void nw_http3_encoder_stream_process_input(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  void (*v6)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  char *v26;
  uint64_t v27;
  os_log_type_t v28;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  int v41;
  nw_protocol *v42;
  nw_protocol *output_handler;
  char v44;
  uint64_t v45;
  void *v46;
  int v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  char *v52;
  _BOOL4 v53;
  _QWORD v54[2];
  uint64_t (*v55)(uint64_t, uint64_t);
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  os_log_type_t type[8];
  uint64_t v60;
  void (*v61)(uint64_t);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  _BYTE v69[24];
  __n128 (*v70)(uint64_t, uint64_t);
  uint64_t (*v71)();
  _QWORD v72[3];
  _BYTE buf[32];
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    while (1)
    {
      *(_QWORD *)v69 = 0;
      *(_QWORD *)&v69[8] = v69;
      *(_QWORD *)&v69[16] = 0x3802000000;
      v70 = __Block_byref_object_copy__60023;
      v71 = __Block_byref_object_dispose__60024;
      v72[0] = 0;
      v72[1] = v72;
      if (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24) + 80))(*(_QWORD *)(a1 + 1064), a1))
      {
        _Block_object_dispose(v69, 8);
        return;
      }
      v54[0] = MEMORY[0x1E0C809B0];
      v54[1] = 0x40000000;
      v55 = ___ZL37nw_http3_encoder_stream_process_inputP17nw_protocol_http3_block_invoke;
      v56 = &unk_1E14A7F40;
      v57 = v69;
      v58 = a1;
      v2 = *(_QWORD *)(*(_QWORD *)&v69[8] + 40);
      do
      {
        if (!v2)
          break;
        v3 = *(_QWORD *)(v2 + 32);
        v4 = ((uint64_t (*)(_QWORD *))v55)(v54);
        v2 = v3;
      }
      while ((v4 & 1) != 0);
      v5 = *(_QWORD **)(*(_QWORD *)&v69[8] + 40);
      if (v5)
      {
        while (1)
        {
          v6 = (void (*)(_QWORD *, _QWORD, uint64_t))v5[10];
          v7 = (_QWORD *)v5[4];
          if (!v6)
            break;
          v8 = v5[11];
          v5[10] = 0;
          v5[11] = 0;
          v6(v5, 0, v8);
LABEL_11:
          v5 = v7;
          if (!v7)
            goto LABEL_30;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "__nw_frame_finalize";
        v9 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v65) = 0;
        if (!__nwlog_fault(v9, type, &v65))
          goto LABEL_27;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = gLogObj;
          v11 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "__nw_frame_finalize";
            v12 = v10;
            v13 = v11;
            v14 = "%{public}s called with null frame->finalizer";
            goto LABEL_26;
          }
          goto LABEL_27;
        }
        if ((_BYTE)v65)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = gLogObj;
          v17 = type[0];
          v18 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (v18)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "__nw_frame_finalize";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_27;
          }
          if (!v18)
          {
LABEL_27:
            if (v9)
              free(v9);
            goto LABEL_11;
          }
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_frame_finalize";
          v12 = v16;
          v13 = v17;
          v14 = "%{public}s called with null frame->finalizer, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = gLogObj;
          v20 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_27;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "__nw_frame_finalize";
          v12 = v19;
          v13 = v20;
          v14 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
        }
LABEL_26:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
        goto LABEL_27;
      }
LABEL_30:
      while (1)
      {
        v21 = *(_QWORD *)(a1 + 960);
        if (!v21)
          break;
        v22 = *(_QWORD *)(v21 + 608);
        v23 = *(_QWORD **)(v21 + 616);
        if (v22)
        {
          *(_QWORD *)(v22 + 616) = v23;
          v23 = *(_QWORD **)(v21 + 616);
        }
        else
        {
          *(_QWORD *)(a1 + 968) = v23;
        }
        *v23 = v22;
        *(_QWORD *)(v21 + 608) = 0;
        *(_QWORD *)(v21 + 616) = 0;
        v24 = *(_DWORD *)(v21 + 372);
        if (v24 > 8)
        {
LABEL_50:
          v65 = 0;
          v66 = &v65;
          v68 = 0;
          v67 = 0x2000000000;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL40nw_http3_stream_fields_process_unblockedP24nw_protocol_http3_stream_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E14A7F68;
          v74 = &v65;
          v75 = v21;
          v42 = *(nw_protocol **)(v21 + 216);
          do
          {
            if (!v42)
              break;
            output_handler = v42->output_handler;
            v44 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v42 = output_handler;
          }
          while ((v44 & 1) != 0);
          if (!*((_DWORD *)v66 + 6))
            nw_protocol_http3_stream_input_available((nw_protocol *)v21, v42);
          if ((*(_WORD *)(v21 + 736) & 0x100) != 0)
          {
            v45 = *(_QWORD *)(v21 + 328);
            v46 = *(void **)(*(_QWORD *)(v21 + 336) + 1256);
            *(_QWORD *)type = MEMORY[0x1E0C809B0];
            v60 = 0x40000000;
            v61 = ___ZL40nw_http3_stream_fields_process_unblockedP24nw_protocol_http3_stream_block_invoke_2;
            v62 = &unk_1E14A7F90;
            v63 = v45;
            v64 = v21;
            nw_queue_context_async(v46, type);
          }
          _Block_object_dispose(&v65, 8);
        }
        else
        {
          if (((1 << v24) & 0x1BB) == 0)
          {
            if (v24 == 2)
            {
              *(_DWORD *)(v21 + 372) = 1;
              v38 = nw_http3_encoder_stream_get_and_reset_received_size(*(_QWORD *)(v21 + 336));
              nw_http_transaction_metadata_increment_inbound_header_size(*(void **)(v21 + 392), v38);
            }
            else
            {
              *(_DWORD *)(v21 + 372) = 5;
            }
            goto LABEL_50;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = *(_DWORD *)(v21 + 372);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_fields_process_unblocked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          v26 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v65) = 0;
          if (__nwlog_fault(v26, type, &v65))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v27 = gLogObj;
              v28 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                v29 = *(_DWORD *)(v21 + 372);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_fields_process_unblocked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v29;
                v30 = v27;
                v31 = v28;
                v32 = "%{public}s Unexpected input state %d";
LABEL_59:
                _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0x12u);
              }
            }
            else if ((_BYTE)v65)
            {
              v33 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v34 = gLogObj;
              v35 = type[0];
              v36 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v33)
              {
                if (v36)
                {
                  v37 = *(_DWORD *)(v21 + 372);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_fields_process_unblocked";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v37;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v33;
                  _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s Unexpected input state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }
                free(v33);
              }
              else if (v36)
              {
                v47 = *(_DWORD *)(v21 + 372);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_fields_process_unblocked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v47;
                v30 = v34;
                v31 = v35;
                v32 = "%{public}s Unexpected input state %d, no backtrace";
                goto LABEL_59;
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v39 = gLogObj;
              v40 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                v41 = *(_DWORD *)(v21 + 372);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_fields_process_unblocked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v41;
                v30 = v39;
                v31 = v40;
                v32 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
                goto LABEL_59;
              }
            }
          }
          if (v26)
            free(v26);
        }
      }
      if (*(_DWORD *)(a1 + 528) != *(_DWORD *)(a1 + 532))
      {
        nw_http3_start_decoder_stream_if_needed(a1);
        nw_http3_decoder_stream_process_output(a1);
      }
      _Block_object_dispose(v69, 8);
    }
  }
  __nwlog_obj();
  *(_DWORD *)v69 = 136446210;
  *(_QWORD *)&v69[4] = "nw_http3_encoder_stream_process_input";
  v48 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v48, buf, type))
  {
    if (buf[0] == 17)
    {
      v49 = __nwlog_obj();
      v50 = buf[0];
      if (!os_log_type_enabled(v49, (os_log_type_t)buf[0]))
        goto LABEL_80;
      *(_DWORD *)v69 = 136446210;
      *(_QWORD *)&v69[4] = "nw_http3_encoder_stream_process_input";
      v51 = "%{public}s called with null http3";
      goto LABEL_79;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v49 = __nwlog_obj();
      v50 = buf[0];
      if (!os_log_type_enabled(v49, (os_log_type_t)buf[0]))
        goto LABEL_80;
      *(_DWORD *)v69 = 136446210;
      *(_QWORD *)&v69[4] = "nw_http3_encoder_stream_process_input";
      v51 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_79;
    }
    v52 = (char *)__nw_create_backtrace_string();
    v49 = __nwlog_obj();
    v50 = buf[0];
    v53 = os_log_type_enabled(v49, (os_log_type_t)buf[0]);
    if (v52)
    {
      if (v53)
      {
        *(_DWORD *)v69 = 136446466;
        *(_QWORD *)&v69[4] = "nw_http3_encoder_stream_process_input";
        *(_WORD *)&v69[12] = 2082;
        *(_QWORD *)&v69[14] = v52;
        _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null http3, dumping backtrace:%{public}s", v69, 0x16u);
      }
      free(v52);
      goto LABEL_80;
    }
    if (v53)
    {
      *(_DWORD *)v69 = 136446210;
      *(_QWORD *)&v69[4] = "nw_http3_encoder_stream_process_input";
      v51 = "%{public}s called with null http3, no backtrace";
LABEL_79:
      _os_log_impl(&dword_182FBE000, v49, v50, v51, v69, 0xCu);
    }
  }
LABEL_80:
  if (v48)
    free(v48);
}

void nw_http3_decoder_stream_process_input(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  char *v28;
  _QWORD v29[2];
  uint64_t (*v30)(uint64_t, uint64_t);
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  os_log_type_t type;
  _BYTE v36[24];
  __n128 (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)();
  _QWORD v39[3];
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)v36 = 136446210;
    *(_QWORD *)&v36[4] = "nw_http3_decoder_stream_process_input";
    v18 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v18, buf, &type))
      goto LABEL_46;
    if (buf[0] == 17)
    {
      v19 = __nwlog_obj();
      v20 = buf[0];
      if (!os_log_type_enabled(v19, (os_log_type_t)buf[0]))
        goto LABEL_46;
      *(_DWORD *)v36 = 136446210;
      *(_QWORD *)&v36[4] = "nw_http3_decoder_stream_process_input";
      v21 = "%{public}s called with null http3";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = buf[0];
      v23 = os_log_type_enabled(v19, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)v36 = 136446466;
          *(_QWORD *)&v36[4] = "nw_http3_decoder_stream_process_input";
          *(_WORD *)&v36[12] = 2082;
          *(_QWORD *)&v36[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null http3, dumping backtrace:%{public}s", v36, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_46;
      }
      if (!v23)
      {
LABEL_46:
        if (v18)
          free(v18);
        return;
      }
      *(_DWORD *)v36 = 136446210;
      *(_QWORD *)&v36[4] = "nw_http3_decoder_stream_process_input";
      v21 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      v19 = __nwlog_obj();
      v20 = buf[0];
      if (!os_log_type_enabled(v19, (os_log_type_t)buf[0]))
        goto LABEL_46;
      *(_DWORD *)v36 = 136446210;
      *(_QWORD *)&v36[4] = "nw_http3_decoder_stream_process_input";
      v21 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v19, v20, v21, v36, 0xCu);
    goto LABEL_46;
  }
  v2 = MEMORY[0x1E0C809B0];
  while (1)
  {
    *(_QWORD *)v36 = 0;
    *(_QWORD *)&v36[8] = v36;
    *(_QWORD *)&v36[16] = 0x3802000000;
    v37 = __Block_byref_object_copy__60023;
    v38 = __Block_byref_object_dispose__60024;
    v39[0] = 0;
    v39[1] = v39;
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 1080) + 24) + 80))(*(_QWORD *)(a1 + 1080), a1))break;
    v29[0] = v2;
    v29[1] = 0x40000000;
    v30 = ___ZL37nw_http3_decoder_stream_process_inputP17nw_protocol_http3_block_invoke;
    v31 = &unk_1E14A80D0;
    v32 = v36;
    v33 = a1;
    v3 = *(_QWORD *)(*(_QWORD *)&v36[8] + 40);
    do
    {
      if (!v3)
        break;
      v4 = *(_QWORD *)(v3 + 32);
      v5 = ((uint64_t (*)(_QWORD *))v30)(v29);
      v3 = v4;
    }
    while ((v5 & 1) != 0);
    v6 = *(_QWORD **)(*(_QWORD *)&v36[8] + 40);
    if (v6)
    {
      do
      {
        while (1)
        {
          v7 = (void (*)(_QWORD *, _QWORD, uint64_t))v6[10];
          v8 = (_QWORD *)v6[4];
          if (!v7)
            break;
          v9 = v6[11];
          v6[10] = 0;
          v6[11] = 0;
          v7(v6, 0, v9);
          v6 = v8;
          if (!v8)
            goto LABEL_3;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v41 = "__nw_frame_finalize";
        v10 = (const char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v34 = 0;
        v28 = (char *)v10;
        if (!__nwlog_fault(v10, &type, &v34))
          goto LABEL_26;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = type;
          log = (os_log_t)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446210;
            v41 = "__nw_frame_finalize";
            v12 = log;
            v13 = v11;
            v14 = "%{public}s called with null frame->finalizer";
LABEL_25:
            _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
          }
        }
        else if (v34)
        {
          v15 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          loga = gLogObj;
          v24 = type;
          v16 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v15)
          {
            if (v16)
            {
              *(_DWORD *)buf = 136446466;
              v41 = "__nw_frame_finalize";
              v42 = 2082;
              v43 = v15;
              _os_log_impl(&dword_182FBE000, loga, v24, "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v15);
            goto LABEL_26;
          }
          if (v16)
          {
            *(_DWORD *)buf = 136446210;
            v41 = "__nw_frame_finalize";
            v12 = loga;
            v13 = v24;
            v14 = "%{public}s called with null frame->finalizer, no backtrace";
            goto LABEL_25;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = type;
          logb = (os_log_t)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446210;
            v41 = "__nw_frame_finalize";
            v12 = logb;
            v13 = v17;
            v14 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
            goto LABEL_25;
          }
        }
LABEL_26:
        if (v28)
          free(v28);
        v6 = v8;
      }
      while (v8);
    }
LABEL_3:
    _Block_object_dispose(v36, 8);
  }
  _Block_object_dispose(v36, 8);
}

uint64_t ___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += nw_frame_unclaimed_length(a2);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return 1;
}

BOOL ___ZL33nw_http3_uni_stream_type_receivedP17nw_protocol_http3P28nw_protocol_http3_uni_streamy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _BOOL4 is_quic_stream;

  is_quic_stream = nw_protocol_metadata_is_quic_stream(a3);
  if (is_quic_stream)
    nw_quic_stream_set_application_error(a3, 259);
  return !is_quic_stream;
}

uint64_t ___ZL37nw_http3_decoder_stream_process_inputP17nw_protocol_http3_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  FILE *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  char v12;
  uint64_t (*v13)(uint64_t, unint64_t);
  char v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v29;

  v29 = 0;
  v4 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v29);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v29;
  v7 = *(FILE **)(v5 + 456);
  if (v7)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v7);
    fprintf(*(FILE **)(v5 + 456), "got %zu bytes of decoder stream", v6);
    fputc(10, *(FILE **)(v5 + 456));
  }
  if ((_DWORD)v6)
  {
    v8 = (char *)&v4[v6];
    v9 = *(_DWORD *)(v5 + 416);
    do
    {
      while (v9 == 1)
      {
        v14 = 0;
        v15 = *(_QWORD *)(v5 + 432);
        v16 = *(_DWORD *)(v5 + 420);
        v17 = v4;
        while (1)
        {
          v21 = *v17++;
          v20 = v21;
          v15 += (unint64_t)(v21 & 0x7F) << v16;
          v16 += 7;
          if ((v21 & 0x80) == 0)
            break;
LABEL_17:
          if (v17 >= (unsigned __int8 *)v8)
          {
            if ((v14 & 1) != 0)
              v26 = 0;
            else
              v26 = *(_DWORD *)(v5 + 424);
            v27 = v26 + (_DWORD)v17 - (_DWORD)v4;
            if (v27 < 0xB)
            {
              *(_QWORD *)(v5 + 432) = v15;
              *(_DWORD *)(v5 + 420) = v16;
              *(_DWORD *)(v5 + 424) = v27;
              *(_DWORD *)(v5 + 416) = 1;
              goto LABEL_28;
            }
            goto LABEL_37;
          }
        }
        if (v16 >= 0x40)
        {
          v22 = v16 != 70 || v20 > 1;
          if (v22 || (v15 & 0x8000000000000000) == 0)
            goto LABEL_37;
        }
LABEL_25:
        if ((*(unsigned int (**)(uint64_t))(v5 + 440))(v5 + 256))
        {
LABEL_37:
          nw_http3_fail_all_streams(*(nw_protocol **)(a1 + 40), 514);
          return 0;
        }
        v9 = 0;
        *(_DWORD *)(v5 + 416) = 0;
        v4 = v17;
        if (v17 >= (unsigned __int8 *)v8)
          goto LABEL_27;
      }
      if (!v9)
      {
        v10 = (char)*v4;
        if (v10 < 0)
        {
          v12 = 7;
          v13 = enc_proc_header_ack;
        }
        else
        {
          v11 = v10 & 0xC0;
          if (v11)
          {
            if (v11 != 64)
              __assert_rtn("lsqpack_enc_decoder_in", "lsqpack.c", 2459, "(buf[0] & 0xC0) == 0x40");
            v12 = 6;
            v13 = enc_proc_stream_cancel;
          }
          else
          {
            v12 = 6;
            v13 = enc_proc_ici;
          }
        }
        *(_QWORD *)(v5 + 440) = v13;
        v17 = v4 + 1;
        v18 = *v4;
        v19 = (-1 << v12) & 0x40 ^ 0x7Fu;
        v15 = v19 & v18;
        if ((v19 & v18) >= v19)
        {
          v16 = 0;
          v14 = 1;
          goto LABEL_17;
        }
        goto LABEL_25;
      }
    }
    while (v4 < (unsigned __int8 *)v8);
  }
LABEL_27:
  *(_DWORD *)(v5 + 452) += v6;
LABEL_28:
  v23 = *(_QWORD *)(a2 + 32);
  v24 = *(_QWORD **)(a2 + 40);
  if (v23)
  {
    *(_QWORD *)(v23 + 40) = v24;
    v24 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = v24;
  }
  *v24 = v23;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v25 = 1;
  nw_frame_finalize(a2);
  return v25;
}

uint64_t ___ZL37nw_http3_encoder_stream_process_inputP17nw_protocol_http3_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  FILE *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  const char **v9;
  char v10;
  int v11;
  char v12;
  char v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  int *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  size_t v63;
  const char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  size_t v71;
  malloc_type_id_t v72;
  int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int *v86;
  size_t v87;
  char *v88;
  char *v89;
  char v90;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  char v97;
  char **v99;
  const char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  int v108;
  _DWORD *v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  FILE *v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  char v118;
  uint64_t v120;
  _DWORD *v121;
  char v122;
  char v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int v130;
  char *v131;
  int v132;
  _DWORD *v133;
  int v134;
  int v135;
  uint64_t v138;
  _DWORD *v139;
  int *v140;
  uint64_t v141;
  unsigned int v142;

  v142 = 0;
  v3 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v142);
  v4 = v142;
  v138 = a1;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v5 + 1032) += v142;
  v6 = *(FILE **)(v5 + 544);
  if (v6)
  {
    fwrite("qdec: debug: ", 0xDuLL, 1uLL, v6);
    fprintf(*(FILE **)(v5 + 544), "got %zu bytes of encoder stream", v4);
    fputc(10, *(FILE **)(v5 + 544));
  }
  *(_DWORD *)(v5 + 520) += v4;
  if (!(_DWORD)v4)
    goto LABEL_213;
  v7 = &v3[v4];
  v8 = (_QWORD *)(v5 + 788);
  v9 = (const char **)(v5 + 776);
  v140 = (int *)(v5 + 768);
  v141 = v5 + 496;
  v139 = (_DWORD *)(v5 + 760);
  v10 = -1;
LABEL_8:
  switch(*(_DWORD *)(v5 + 728))
  {
    case 0:
      v12 = *v3;
      if (((char)*v3 & 0x80000000) == 0)
      {
        if ((*v3 & 0x40) == 0)
        {
          *(_DWORD *)(v5 + 736) = 0;
          if ((v12 & 0x20) != 0)
          {
            *(_DWORD *)(v5 + 728) = 7;
            v10 = 5;
LABEL_98:
            v16 = v3 + 1;
            v78 = *v3;
            v79 = ~(-1 << v10);
            v14 = v78 & v79;
            if ((v78 & v79) < v79)
              goto LABEL_237;
            v15 = 0;
            v17 = 1;
            do
            {
              if (v16 >= v7)
                goto LABEL_208;
LABEL_162:
              v112 = *v16++;
              v111 = v112;
              v14 += (unint64_t)(v112 & 0x7F) << v15;
              v15 += 7;
            }
            while ((v112 & 0x80) != 0);
            if (v15 < 0x40 || v15 == 70 && v111 <= 1 && (v14 & 0x8000000000000000) != 0)
            {
LABEL_237:
              *(_QWORD *)(v5 + 760) = v14;
              if (v14 <= *(unsigned int *)(v5 + 500))
              {
                *(_DWORD *)(v5 + 728) = 0;
                v113 = *(FILE **)(v5 + 544);
                if (v113)
                {
                  fwrite("qdec: debug: ", 0xDuLL, 1uLL, v113);
                  fprintf(*(FILE **)(v5 + 544), "got TSU=%llu", *(_QWORD *)(v5 + 760));
                  fputc(10, *(FILE **)(v5 + 544));
                  v14 = *(_QWORD *)(v5 + 760);
                }
                *(_DWORD *)(v5 + 504) = v14;
                v114 = *(_DWORD *)(v5 + 516);
                v115 = v14 >> 5;
                *(_DWORD *)(v5 + 516) = v115;
                if (v114 != v115)
                {
                  v116 = *(_DWORD *)(v5 + 528);
                  if (v116 == *(_DWORD *)(v5 + 532) && v116 == 2 * v114 - 1)
                  {
                    v117 = 2 * v115 - 1;
                    *(_DWORD *)(v5 + 528) = v117;
                    *(_DWORD *)(v5 + 532) = v117;
                  }
                }
                qdec_remove_overflow_entries(v141);
                goto LABEL_7;
              }
            }
          }
          else
          {
            *(_DWORD *)(v5 + 728) = 6;
            v10 = 5;
LABEL_74:
            v16 = v3 + 1;
            v59 = *v3;
            v60 = ~(-1 << v10);
            v14 = v59 & v60;
            if ((v59 & v60) < v60)
              goto LABEL_238;
            v15 = 0;
            v17 = 1;
            do
            {
              if (v16 >= v7)
                goto LABEL_208;
LABEL_101:
              v80 = *v16++;
              v14 += (unint64_t)(v80 & 0x7F) << v15;
              v15 += 7;
            }
            while (v80 < 0);
            if (v15 <= 0x3F && v14 >> 24 == 0)
            {
LABEL_238:
              *(_DWORD *)(v5 + 760) = v14;
              v82 = *(_DWORD *)(v5 + 552);
              if (v82)
              {
                v83 = *(_DWORD *)(v5 + 556);
                v84 = *(_DWORD *)(v5 + 560);
                v85 = v83 >= v84 ? 0 : *(_DWORD *)(v5 + 552);
                if (v83 + v85 - v84 > v14)
                {
                  v86 = *(unsigned int **)(*(_QWORD *)(v5 + 568) + 8 * ((v82 + v83 + ~(_DWORD)v14) % v82));
                  if (v86)
                  {
                    v87 = *v86 + (unint64_t)v86[1] + 28;
                    v88 = (char *)malloc_type_malloc(v87, 0x943048F6uLL);
                    if (v88)
                    {
                      v89 = v88;
                      memcpy(v88, v86, v87);
                      *((_DWORD *)v89 + 2) = 1;
                      if (!lsqpack_dec_push_entry(v141, v89))
                      {
                        *(_DWORD *)(v5 + 728) = 0;
                        goto LABEL_7;
                      }
                      v135 = *((_DWORD *)v89 + 2) - 1;
                      *((_DWORD *)v89 + 2) = v135;
                      if (!v135)
                        free(v89);
                    }
                  }
                }
              }
            }
          }
          goto LABEL_229;
        }
        *(_BYTE *)(v5 + 796) = (v12 & 0x20) != 0;
        *(_DWORD *)(v5 + 736) = 0;
        *(_QWORD *)(v5 + 776) = 0;
        *(_DWORD *)(v5 + 728) = 8;
        v10 = 5;
LABEL_95:
        v16 = v3 + 1;
        v76 = *v3;
        v77 = ~(-1 << v10);
        v14 = v76 & v77;
        if ((v76 & v77) < v77)
          goto LABEL_239;
        v15 = 0;
        v17 = 1;
        do
        {
          if (v16 >= v7)
            goto LABEL_208;
LABEL_177:
          v118 = *v16++;
          v14 += (unint64_t)(v118 & 0x7F) << v15;
          v15 += 7;
        }
        while (v118 < 0);
        if (v15 <= 0x3F && v14 >> 24 == 0)
        {
LABEL_239:
          *(_DWORD *)(v5 + 768) = v14;
          if (*(_DWORD *)(v5 + 504) << (2 * *(_BYTE *)(v5 + 796)) >= v14)
          {
            v120 = (_DWORD)v14 ? v14 + (v14 >> 1) : 16;
            *(_DWORD *)(v5 + 784) = v120;
            v121 = malloc_type_malloc(v120 + 28, 0x922E1F78uLL);
            *(_QWORD *)(v5 + 776) = v121;
            if (v121)
            {
              v121[6] = 0;
              *v8 = 0;
              if (!*(_BYTE *)(v5 + 796))
              {
                v11 = 10;
                goto LABEL_6;
              }
              v108 = 9;
LABEL_190:
              *(_DWORD *)(v5 + 728) = v108;
              *(_DWORD *)(v5 + 760) = 0;
              goto LABEL_7;
            }
          }
        }
        goto LABEL_229;
      }
      *(_BYTE *)(v5 + 817) = (v12 & 0x40) != 0;
      *(_DWORD *)(v5 + 736) = 0;
      *v9 = 0;
      *(_QWORD *)(v5 + 784) = 0;
      v10 = 6;
      *(_DWORD *)(v5 + 728) = 1;
LABEL_83:
      v16 = v3 + 1;
      v65 = *v3;
      v66 = ~(-1 << v10);
      v14 = v65 & v66;
      if ((v65 & v66) < v66)
        goto LABEL_122;
      v15 = 0;
      v13 = 1;
      while (v16 < v7)
      {
LABEL_116:
        v90 = *v16++;
        v14 += (unint64_t)(v90 & 0x7F) << v15;
        v15 += 7;
        if ((v90 & 0x80) == 0)
        {
          if (v15 > 0x3F || v14 >> 24 != 0)
            goto LABEL_229;
LABEL_122:
          *(_DWORD *)(v5 + 768) = v14;
          if (*(_BYTE *)(v5 + 817))
          {
            if (v14 > 0x62)
              goto LABEL_229;
            *v9 = 0;
            v11 = 2;
            goto LABEL_6;
          }
          v92 = *(_DWORD *)(v5 + 552);
          if (!v92)
            goto LABEL_221;
          v93 = *(_DWORD *)(v5 + 556);
          v94 = *(_DWORD *)(v5 + 560);
          v95 = v93 >= v94 ? 0 : *(_DWORD *)(v5 + 552);
          if (v93 + v95 - v94 <= v14)
            goto LABEL_221;
          v96 = *(_QWORD *)(*(_QWORD *)(v5 + 568) + 8 * ((v92 + v93 + ~(_DWORD)v14) % v92));
          *(_QWORD *)(v5 + 776) = v96;
          if (!v96)
            goto LABEL_229;
          ++*(_DWORD *)(v96 + 8);
          v11 = 2;
LABEL_6:
          *(_DWORD *)(v5 + 728) = v11;
LABEL_7:
          v3 = v16;
          if (v16 >= v7)
            goto LABEL_213;
          goto LABEL_8;
        }
      }
      if ((v13 & 1) != 0)
        v130 = 0;
      else
        v130 = *(_DWORD *)(v5 + 744);
      v126 = v130 + (_DWORD)v16 - (_DWORD)v3;
      if (v126 >= 0xB)
        goto LABEL_229;
LABEL_212:
      *(_QWORD *)(v5 + 752) = v14;
      *(_DWORD *)(v5 + 740) = v15;
      *(_DWORD *)(v5 + 744) = v126;
      *(_DWORD *)(v5 + 736) = 1;
LABEL_213:
      v127 = *(_QWORD *)(a2 + 32);
      v128 = *(_QWORD **)(a2 + 40);
      if (v127)
      {
        *(_QWORD *)(v127 + 40) = v128;
        v128 = *(_QWORD **)(a2 + 40);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 32) + 8) + 48) = v128;
      }
      *v128 = v127;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v129 = 1;
      nw_frame_finalize(a2);
      return v129;
    case 1:
      if (!*(_DWORD *)(v5 + 736))
        goto LABEL_83;
      v13 = 0;
      v14 = *(_QWORD *)(v5 + 752);
      v15 = *(_DWORD *)(v5 + 740);
      v16 = v3;
      goto LABEL_116;
    case 2:
      *(_BYTE *)(v5 + 816) = *v3 >> 7;
      *(_DWORD *)(v5 + 736) = 0;
      *(_DWORD *)(v5 + 728) = 3;
      v10 = 7;
      goto LABEL_18;
    case 3:
      if (*(_DWORD *)(v5 + 736))
      {
        v17 = 0;
        v14 = *(_QWORD *)(v5 + 752);
        v15 = *(_DWORD *)(v5 + 740);
        v16 = v3;
        while (1)
        {
          v97 = *v16++;
          v14 += (unint64_t)(v97 & 0x7F) << v15;
          v15 += 7;
          if ((v97 & 0x80) == 0)
            break;
LABEL_142:
          if (v16 >= v7)
            goto LABEL_208;
        }
        if (v15 > 0x3F || v14 >> 24 != 0)
          goto LABEL_229;
      }
      else
      {
LABEL_18:
        v16 = v3 + 1;
        v18 = *v3;
        v19 = ~(-1 << v10);
        v14 = v18 & v19;
        if ((v18 & v19) >= v19)
        {
          v15 = 0;
          v17 = 1;
          goto LABEL_142;
        }
      }
      *(_DWORD *)(v5 + 772) = v14;
      if (*(_BYTE *)(v5 + 817))
      {
        v99 = &(&static_table)[3 * *v140];
        v102 = *v99;
        v100 = (const char *)(v99 + 2);
        v101 = (uint64_t)v102;
      }
      else
      {
        v100 = *v9;
        v101 = (uint64_t)(*v9 + 28);
      }
      v103 = *(unsigned int *)v100;
      *(_DWORD *)(v5 + 812) = v103;
      *(_QWORD *)(v5 + 792) = v101;
      if ((*(_DWORD *)(v5 + 504) - (int)v103) << (2 * *(_BYTE *)(v5 + 816)) < v14)
        goto LABEL_229;
      v104 = v14 >> 1;
      if (!*(_BYTE *)(v5 + 816))
        v104 = 0;
      v105 = v104 + v14;
      *(_DWORD *)(v5 + 800) = v105;
      v106 = malloc_type_malloc(v103 + v105 + 28, 0x555E5004uLL);
      *(_QWORD *)(v5 + 784) = v106;
      if (!v106)
        goto LABEL_229;
      if (*(_BYTE *)(v5 + 817))
      {
        v106[6] = 5;
        *(_DWORD *)(*(_QWORD *)(v5 + 784) + 12) = name_hashes[*(unsigned int *)(v5 + 768)];
        v107 = (_DWORD *)(v5 + 768);
      }
      else
      {
        v106[6] = *(_DWORD *)(*(_QWORD *)(v5 + 776) + 24) & 5;
        *(_DWORD *)(*(_QWORD *)(v5 + 784) + 12) = *(_DWORD *)(*(_QWORD *)(v5 + 776) + 12);
        v107 = (_DWORD *)(*(_QWORD *)(v5 + 776) + 20);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 784) + 20) = *v107;
      **(_DWORD **)(v5 + 784) = *(_DWORD *)(v5 + 812);
      *(_QWORD *)(v5 + 804) = 0;
      v24 = *(_DWORD *)(v5 + 772);
      if (v24)
      {
        if (!*(_BYTE *)(v5 + 816))
        {
          v11 = 4;
          goto LABEL_6;
        }
        v108 = 5;
        goto LABEL_190;
      }
LABEL_155:
      *(_DWORD *)(*(_QWORD *)(v5 + 784) + 4) = v24;
      *(_DWORD *)(*(_QWORD *)(v5 + 784) + 8) = 1;
      memcpy((void *)(*(_QWORD *)(v5 + 784) + 28), *(const void **)(v5 + 792), *(unsigned int *)(v5 + 812));
      v109 = *(_DWORD **)(v5 + 776);
      if (v109)
      {
        v110 = v109[2] - 1;
        v109[2] = v110;
        if (!v110)
          free(v109);
        *v9 = 0;
      }
      if (!lsqpack_dec_push_entry(v141, *(const char **)(v5 + 784)))
        goto LABEL_160;
      goto LABEL_222;
    case 4:
      v20 = *(_DWORD *)(v5 + 772);
      if (*(_DWORD *)(v5 + 800) < v20)
        __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4714, "WINR.alloced_val_len >= WINR.val_len");
      v21 = *(unsigned int *)(v5 + 804);
      v22 = v20 - v21;
      if (v22 >= (int)v7 - (int)v3)
        v23 = ((_DWORD)v7 - (_DWORD)v3);
      else
        v23 = v22;
      memcpy((void *)(*(_QWORD *)(v5 + 784) + v21 + **(unsigned int **)(v5 + 784) + 28), v3, v23);
      v24 = *(_DWORD *)(v5 + 804) + v23;
      *(_DWORD *)(v5 + 804) = v24;
      v16 = &v3[v23];
      if (v24 == *(_DWORD *)(v5 + 772))
        goto LABEL_155;
      goto LABEL_7;
    case 5:
      v25 = *(unsigned int *)(v5 + 772);
      v26 = *(unsigned int *)(v5 + 808);
      if ((int)v25 - (int)v26 >= ((_DWORD)v7 - (_DWORD)v3))
        v27 = ((_DWORD)v7 - (_DWORD)v3);
      else
        v27 = (v25 - v26);
      v28 = lsqpack_huff_decode(v3, v27, (char *)(*(_QWORD *)(v5 + 784) + *(unsigned int *)(v5 + 804) + **(unsigned int **)(v5 + 784) + 28), (*(_DWORD *)(v5 + 800) - *(_DWORD *)(v5 + 804)), v139, v27 + v26 == v25);
      v30 = v29;
      v31 = HIDWORD(v28);
      if ((_DWORD)v28 == 2)
      {
        v67 = (2 * *(_DWORD *)(v5 + 800));
        *(_DWORD *)(v5 + 800) = v67;
        v68 = malloc_type_realloc(*(void **)(v5 + 784), v67 + *(unsigned int *)(v5 + 812) + 28, 0x2406461BuLL);
        if (!v68)
          goto LABEL_229;
        *(_QWORD *)(v5 + 784) = v68;
      }
      else if ((_DWORD)v28 != 1)
      {
        if ((_DWORD)v28)
          goto LABEL_229;
        *(_DWORD *)(*(_QWORD *)(v5 + 784) + 4) = *(_DWORD *)(v5 + 804) + HIDWORD(v28);
        *(_DWORD *)(*(_QWORD *)(v5 + 784) + 8) = 1;
        memcpy((void *)(*(_QWORD *)(v5 + 784) + 28), *(const void **)(v5 + 792), *(unsigned int *)(v5 + 812));
        v32 = *(_DWORD **)(v5 + 776);
        if (v32)
        {
          v33 = v32[2] - 1;
          v32[2] = v33;
          if (!v33)
            free(v32);
          *v9 = 0;
        }
        if (!lsqpack_dec_push_entry(v141, *(const char **)(v5 + 784)))
        {
          v16 = &v3[v30];
LABEL_160:
          *(_DWORD *)(v5 + 728) = 0;
          *(_QWORD *)(v5 + 784) = 0;
          goto LABEL_7;
        }
LABEL_222:
        v133 = *(_DWORD **)(v5 + 784);
        v134 = v133[2] - 1;
        v133[2] = v134;
        if (!v134)
          free(v133);
        *(_QWORD *)(v5 + 784) = 0;
LABEL_229:
        nw_http3_fail_all_streams(*(nw_protocol **)(v138 + 40), 513);
        return 0;
      }
      v16 = &v3[v30];
      *(_DWORD *)(v5 + 808) += v30;
      *(_DWORD *)(v5 + 804) += v31;
      goto LABEL_7;
    case 6:
      if (!*(_DWORD *)(v5 + 736))
        goto LABEL_74;
      v17 = 0;
      v14 = *(_QWORD *)(v5 + 752);
      v15 = *(_DWORD *)(v5 + 740);
      v16 = v3;
      goto LABEL_101;
    case 7:
      if (!*(_DWORD *)(v5 + 736))
        goto LABEL_98;
      v17 = 0;
      v14 = *(_QWORD *)(v5 + 752);
      v15 = *(_DWORD *)(v5 + 740);
      v16 = v3;
      goto LABEL_162;
    case 8:
      if (!*(_DWORD *)(v5 + 736))
        goto LABEL_95;
      v17 = 0;
      v14 = *(_QWORD *)(v5 + 752);
      v15 = *(_DWORD *)(v5 + 740);
      v16 = v3;
      goto LABEL_177;
    case 9:
      v34 = *(unsigned int *)(v5 + 768);
      v35 = *(unsigned int *)(v5 + 792);
      if ((int)v34 - (int)v35 >= ((_DWORD)v7 - (_DWORD)v3))
        v36 = ((_DWORD)v7 - (_DWORD)v3);
      else
        v36 = (v34 - v35);
      v37 = lsqpack_huff_decode(v3, v36, (char *)(*(_QWORD *)(v5 + 776) + *(unsigned int *)(v5 + 788) + 28), (*(_DWORD *)(v5 + 784) - *(_DWORD *)(v5 + 788)), v139, v36 + v35 == v34);
      v39 = v38;
      v40 = HIDWORD(v37);
      if ((_DWORD)v37 == 2)
      {
        v69 = (2 * *(_DWORD *)(v5 + 784));
        *(_DWORD *)(v5 + 784) = v69;
        v70 = *(void **)(v5 + 776);
        v71 = v69 + 28;
        v72 = 2184326241;
        goto LABEL_91;
      }
      if ((_DWORD)v37 == 1)
        goto LABEL_93;
      if ((_DWORD)v37)
        goto LABEL_229;
      v16 = &v3[v38];
      v41 = *(int **)(v5 + 776);
      v42 = *(_DWORD *)(v5 + 788) + HIDWORD(v37);
LABEL_57:
      *v41 = v42;
      v11 = 11;
      goto LABEL_6;
    case 0xA:
      v43 = *(_DWORD *)(v5 + 768);
      if (*(_DWORD *)(v5 + 784) < v43)
        __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4809, "WONR.alloced_len >= WONR.str_len");
      v44 = *(unsigned int *)v8;
      v45 = v43 - v44;
      if (v45 >= (int)v7 - (int)v3)
        v46 = ((_DWORD)v7 - (_DWORD)v3);
      else
        v46 = v45;
      memcpy((void *)&(*v9)[v44 + 28], v3, v46);
      v42 = *(_DWORD *)v8 + v46;
      *(_DWORD *)v8 = v42;
      v16 = &v3[v46];
      if (v42 != *v140)
        goto LABEL_7;
      v41 = *(int **)(v5 + 776);
      goto LABEL_57;
    case 0xB:
      *(_BYTE *)(v5 + 796) = *v3 >> 7;
      *(_DWORD *)(v5 + 736) = 0;
      *(_DWORD *)(v5 + 728) = 12;
      v10 = 7;
      goto LABEL_61;
    case 0xC:
      if (*(_DWORD *)(v5 + 736))
      {
        v17 = 0;
        v14 = *(_QWORD *)(v5 + 752);
        v15 = *(_DWORD *)(v5 + 740);
        v16 = v3;
        while (1)
        {
          v122 = *v16++;
          v14 += (unint64_t)(v122 & 0x7F) << v15;
          v15 += 7;
          if ((v122 & 0x80) == 0)
            break;
LABEL_205:
          if (v16 >= v7)
          {
LABEL_208:
            if ((v17 & 1) != 0)
              v125 = 0;
            else
              v125 = *(_DWORD *)(v5 + 744);
            v126 = v125 + (_DWORD)v16 - (_DWORD)v3;
            if (v126 >= 0xB)
              goto LABEL_229;
            goto LABEL_212;
          }
        }
        if (v15 > 0x3F || v14 >> 24 != 0)
          goto LABEL_229;
      }
      else
      {
LABEL_61:
        v16 = v3 + 1;
        v47 = *v3;
        v48 = ~(-1 << v10);
        v14 = v47 & v48;
        if ((v47 & v48) >= v48)
        {
          v15 = 0;
          v17 = 1;
          goto LABEL_205;
        }
      }
      *(_DWORD *)(v5 + 768) = v14;
      v64 = *(const char **)(v5 + 776);
      v124 = *(_BYTE *)(v5 + 796);
      if ((*(_DWORD *)(v5 + 504) - *(_DWORD *)v64) << (2 * v124) < v14)
        goto LABEL_229;
      *v8 = 0;
      if ((_DWORD)v14)
      {
        if (!v124)
        {
          v11 = 14;
          goto LABEL_6;
        }
        *(_DWORD *)(v5 + 728) = 13;
        *(_DWORD *)(v5 + 760) = 0;
        goto LABEL_7;
      }
LABEL_203:
      *((_DWORD *)v64 + 1) = v14;
      *((_DWORD *)*v9 + 2) = 1;
      if (!lsqpack_dec_push_entry(v141, *v9))
        goto LABEL_204;
      goto LABEL_219;
    case 0xD:
      v49 = *(unsigned int *)(v5 + 768);
      v50 = *(unsigned int *)(v5 + 792);
      if ((int)v49 - (int)v50 >= ((_DWORD)v7 - (_DWORD)v3))
        v51 = ((_DWORD)v7 - (_DWORD)v3);
      else
        v51 = (v49 - v50);
      v52 = lsqpack_huff_decode(v3, v51, (char *)(*(_QWORD *)(v5 + 776) + *(unsigned int *)(v5 + 788) + **(unsigned int **)(v5 + 776) + 28), (*(_DWORD *)(v5 + 784) - *(_DWORD *)(v5 + 788) - **(_DWORD **)(v5 + 776)), v139, v51 + v50 == v49);
      v39 = v53;
      v40 = HIDWORD(v52);
      if ((_DWORD)v52 == 2)
      {
        v73 = *(_DWORD *)(v5 + 784);
        if (!v73)
          __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4885, "WONR.alloced_len");
        v74 = (2 * v73);
        *(_DWORD *)(v5 + 784) = v74;
        v70 = *(void **)(v5 + 776);
        v71 = v74 + 28;
        v72 = 2751939443;
LABEL_91:
        v75 = malloc_type_realloc(v70, v71, v72);
        if (!v75)
          goto LABEL_229;
        *(_QWORD *)(v5 + 776) = v75;
      }
      else if ((_DWORD)v52 != 1)
      {
        if ((_DWORD)v52)
          goto LABEL_229;
        *((_DWORD *)*v9 + 1) = *(_DWORD *)v8 + HIDWORD(v52);
        *((_DWORD *)*v9 + 2) = 1;
        if (!lsqpack_dec_push_entry(v141, *v9))
        {
          v16 = &v3[v39];
LABEL_204:
          *(_DWORD *)(v5 + 728) = 0;
          *(_QWORD *)(v5 + 776) = 0;
          goto LABEL_7;
        }
LABEL_219:
        v131 = (char *)*v9;
        v132 = *((_DWORD *)*v9 + 2) - 1;
        *((_DWORD *)*v9 + 2) = v132;
        if (!v132)
          free(v131);
LABEL_221:
        *v9 = 0;
        goto LABEL_229;
      }
LABEL_93:
      v16 = &v3[v39];
      *(_DWORD *)(v5 + 792) += v39;
      *(_DWORD *)(v5 + 788) += v40;
      goto LABEL_7;
    case 0xE:
      v54 = *(unsigned int **)(v5 + 776);
      v55 = *v54;
      v56 = *(_DWORD *)(v5 + 768);
      v57 = v56 + *v54;
      if (*(_DWORD *)(v5 + 784) >= v57)
      {
        v58 = (_DWORD *)(v5 + 768);
      }
      else
      {
        *(_DWORD *)(v5 + 784) = v57;
        v54 = (unsigned int *)malloc_type_realloc(v54, v57 + 28, 0x9D13A7E5uLL);
        if (!v54)
          goto LABEL_229;
        *v9 = (const char *)v54;
        v58 = (_DWORD *)(v5 + 768);
        v56 = *v140;
        v55 = *v54;
      }
      v61 = *(unsigned int *)v8;
      v62 = v56 - v61;
      if (v62 >= (int)v7 - (int)v3)
        v63 = ((_DWORD)v7 - (_DWORD)v3);
      else
        v63 = v62;
      memcpy((char *)v54 + v55 + v61 + 28, v3, v63);
      LODWORD(v14) = *(_DWORD *)v8 + v63;
      *(_DWORD *)v8 = v14;
      v16 = &v3[v63];
      if ((_DWORD)v14 != *v58)
        goto LABEL_7;
      v64 = *v9;
      goto LABEL_203;
    default:
      __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4981, "0");
  }
}

uint64_t nw_http3_encoder_stream_get_and_reset_received_size(uint64_t a1)
{
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    result = *(_QWORD *)(a1 + 1032);
    *(_QWORD *)(a1 + 1032) = 0;
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
        v6 = "%{public}s called with null http3";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
        v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
        v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

BOOL ___ZL40nw_http3_stream_fields_process_unblockedP24nw_protocol_http3_stream_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(v3 + 40) = v4;
    v4 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 224) = v4;
  }
  *v4 = v3;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_http3_stream_handle_fields(*(_QWORD *)(a1 + 40), 0, a2, (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 736) >> 3) & 1);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void nw_protocol_http3_stream_input_available(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(nw_protocol *, _QWORD *);
  uint64_t v7;
  const char *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  char *v30;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint32_t v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[92] & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v24 = __nwlog_obj();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            v25 = *(_DWORD *)(handle[42] + 1280);
            v26 = handle[30];
            *(_DWORD *)buf = 136447234;
            v43 = "nw_protocol_http3_stream_input_available";
            v44 = 2082;
            v45 = (char *)handle + 636;
            v46 = 2080;
            v47 = " ";
            v48 = 1024;
            v49 = v25;
            v50 = 2048;
            v51 = v26;
            _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
          }
        }
      }
      v4 = handle[6];
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(void (**)(nw_protocol *, _QWORD *))(v5 + 64);
          if (v6)
          {
            v6(a1->default_input_handler, handle);
            return;
          }
        }
      }
      __nwlog_obj();
      v7 = handle[6];
      v8 = "invalid";
      if (v7)
      {
        v9 = *(const char **)(v7 + 16);
        if (v9)
          v8 = v9;
      }
      *(_DWORD *)buf = 136446466;
      v43 = "nw_protocol_http3_stream_input_available";
      v44 = 2082;
      v45 = (char *)v8;
      v10 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v40 = 0;
      if (__nwlog_fault(v10, &type, &v40))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v11 = __nwlog_obj();
          v12 = type;
          if (!os_log_type_enabled(v11, type))
            goto LABEL_70;
          v13 = handle[6];
          v14 = "invalid";
          if (v13)
          {
            v15 = *(const char **)(v13 + 16);
            if (v15)
              v14 = v15;
          }
          *(_DWORD *)buf = 136446466;
          v43 = "nw_protocol_http3_stream_input_available";
          v44 = 2082;
          v45 = (char *)v14;
          v16 = "%{public}s protocol %{public}s has invalid input_available callback";
LABEL_59:
          v37 = v11;
          v38 = v12;
          v39 = 22;
LABEL_69:
          _os_log_impl(&dword_182FBE000, v37, v38, v16, buf, v39);
          goto LABEL_70;
        }
        if (!v40)
        {
          v11 = __nwlog_obj();
          v12 = type;
          if (!os_log_type_enabled(v11, type))
            goto LABEL_70;
          v27 = handle[6];
          v28 = "invalid";
          if (v27)
          {
            v29 = *(const char **)(v27 + 16);
            if (v29)
              v28 = v29;
          }
          *(_DWORD *)buf = 136446466;
          v43 = "nw_protocol_http3_stream_input_available";
          v44 = 2082;
          v45 = (char *)v28;
          v16 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_59;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v11 = __nwlog_obj();
        v12 = type;
        v18 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (!v18)
            goto LABEL_70;
          v34 = handle[6];
          v35 = "invalid";
          if (v34)
          {
            v36 = *(const char **)(v34 + 16);
            if (v36)
              v35 = v36;
          }
          *(_DWORD *)buf = 136446466;
          v43 = "nw_protocol_http3_stream_input_available";
          v44 = 2082;
          v45 = (char *)v35;
          v16 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
          goto LABEL_59;
        }
        if (v18)
        {
          v19 = handle[6];
          v20 = "invalid";
          if (v19)
          {
            v21 = *(const char **)(v19 + 16);
            if (v21)
              v20 = v21;
          }
          *(_DWORD *)buf = 136446722;
          v43 = "nw_protocol_http3_stream_input_available";
          v44 = 2082;
          v45 = (char *)v20;
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
      }
LABEL_70:
      if (v10)
        goto LABEL_71;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_protocol_http3_stream_input_available";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v10, &type, &v40))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_70;
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http3_stream_input_available";
      v16 = "%{public}s called with null http3_stream";
      goto LABEL_68;
    }
    if (!v40)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_70;
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http3_stream_input_available";
      v16 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_68;
    }
    v30 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v33 = os_log_type_enabled(v22, type);
    if (!v30)
    {
      if (!v33)
        goto LABEL_70;
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http3_stream_input_available";
      v16 = "%{public}s called with null http3_stream, no backtrace";
      goto LABEL_68;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v43 = "nw_protocol_http3_stream_input_available";
      v44 = 2082;
      v45 = v30;
      v32 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_protocol_http3_stream_input_available";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v10, &type, &v40))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_70;
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http3_stream_input_available";
      v16 = "%{public}s called with null protocol";
LABEL_68:
      v37 = v22;
      v38 = v23;
      v39 = 12;
      goto LABEL_69;
    }
    if (!v40)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_70;
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http3_stream_input_available";
      v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_68;
    }
    v30 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v31 = os_log_type_enabled(v22, type);
    if (!v30)
    {
      if (!v31)
        goto LABEL_70;
      *(_DWORD *)buf = 136446210;
      v43 = "nw_protocol_http3_stream_input_available";
      v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_68;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v43 = "nw_protocol_http3_stream_input_available";
      v44 = 2082;
      v45 = v30;
      v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_182FBE000, v22, v23, v32, buf, 0x16u);
    }
  }
  free(v30);
  if (v10)
LABEL_71:
    free(v10);
}

void ___ZL40nw_http3_stream_fields_process_unblockedP24nw_protocol_http3_stream_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  const char *v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  _BOOL4 v24;
  const char *v25;
  const char *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
  {
    v2 = *(_QWORD *)(a1 + 40);
    if ((*(_WORD *)(v2 + 736) & 0x100) != 0)
    {
      if ((*(_WORD *)(v2 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v23 = __nwlog_obj();
          v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
          v2 = *(_QWORD *)(a1 + 40);
          if (v24)
          {
            v25 = (const char *)(v2 + 636);
            v26 = "";
            v27 = *(_DWORD *)(*(_QWORD *)(v2 + 336) + 1280);
            v28 = v2 == 0;
            v29 = *(_QWORD *)(v2 + 240);
            if (v28)
              v25 = "";
            else
              v26 = " ";
            *(_DWORD *)buf = 136447234;
            v39 = "nw_http3_stream_fields_process_unblocked_block_invoke_2";
            v40 = 2082;
            v41 = v25;
            v42 = 2080;
            v43 = (void *)v26;
            v44 = 1024;
            v45 = v27;
            v46 = 2048;
            v47 = v29;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> delivering deferred input finished", buf, 0x30u);
            v2 = *(_QWORD *)(a1 + 40);
          }
        }
      }
      v3 = *(unsigned __int16 *)(v2 + 736);
      v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 738) << 16);
      *(_WORD *)(v2 + 736) = v3 & 0xFEFF;
      *(_BYTE *)(v2 + 738) = BYTE2(v4);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(void (**)(void))(v6 + 184);
          if (v7)
          {
            v7();
            return;
          }
        }
      }
      __nwlog_obj();
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
      v9 = "invalid";
      if (v8)
      {
        v10 = *(const char **)(v8 + 16);
        if (v10)
          v9 = v10;
      }
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
      v40 = 2082;
      v41 = v9;
      v11 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v36 = 0;
      if (!__nwlog_fault(v11, &type, &v36))
        goto LABEL_44;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v12 = __nwlog_obj();
        v13 = type;
        if (!os_log_type_enabled(v12, type))
          goto LABEL_44;
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
        v15 = "invalid";
        if (v14)
        {
          v16 = *(const char **)(v14 + 16);
          if (v16)
            v15 = v16;
        }
        *(_DWORD *)buf = 136446466;
        v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
        v40 = 2082;
        v41 = v15;
        v17 = "%{public}s protocol %{public}s has invalid input_finished callback";
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v12 = __nwlog_obj();
        v13 = type;
        v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
            v21 = "invalid";
            if (v20)
            {
              v22 = *(const char **)(v20 + 16);
              if (v22)
                v21 = v22;
            }
            *(_DWORD *)buf = 136446722;
            v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
            v40 = 2082;
            v41 = v21;
            v42 = 2082;
            v43 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(backtrace_string);
          goto LABEL_44;
        }
        if (!v19)
        {
LABEL_44:
          if (v11)
            free(v11);
          return;
        }
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
        v34 = "invalid";
        if (v33)
        {
          v35 = *(const char **)(v33 + 16);
          if (v35)
            v34 = v35;
        }
        *(_DWORD *)buf = 136446466;
        v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
        v40 = 2082;
        v41 = v34;
        v17 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
      }
      else
      {
        v12 = __nwlog_obj();
        v13 = type;
        if (!os_log_type_enabled(v12, type))
          goto LABEL_44;
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
        v31 = "invalid";
        if (v30)
        {
          v32 = *(const char **)(v30 + 16);
          if (v32)
            v31 = v32;
        }
        *(_DWORD *)buf = 136446466;
        v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
        v40 = 2082;
        v41 = v31;
        v17 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
      goto LABEL_44;
    }
  }
}

void nw_http3_start_decoder_stream_if_needed(uint64_t a1)
{
  _OWORD *outbound;
  uint64_t v3;
  void (**v4)(_QWORD, _QWORD);
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  const char *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  const char *v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 1072))
  {
    outbound = (_OWORD *)nw_http3_uni_stream_create_outbound(a1, 3, 0);
    *(_QWORD *)(a1 + 1072) = outbound;
    *outbound = *(_OWORD *)a1;
    nw_protocol_set_input_handler(*(_QWORD *)(a1 + 1072), a1);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(void (***)(_QWORD, _QWORD))(v3 + 24);
      if (v4)
      {
        v5 = *v4;
        if (v5)
        {
          v5(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 1072));
          goto LABEL_6;
        }
      }
      __nwlog_obj();
      v8 = *(const char **)(v3 + 16);
      if (!v8)
        v8 = "invalid";
    }
    else
    {
      __nwlog_obj();
      v8 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http3_start_decoder_stream_if_needed";
    v34 = 2082;
    v35 = v8;
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v10, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_43;
        v13 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v13 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_start_decoder_stream_if_needed";
        v34 = 2082;
        v35 = v13;
        v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_42:
        _os_log_impl(&dword_182FBE000, v11, v12, v14, buf, 0x16u);
        goto LABEL_43;
      }
      if (!v30)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_43;
        v18 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v18 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_start_decoder_stream_if_needed";
        v34 = 2082;
        v35 = v18;
        v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16)
          goto LABEL_43;
        v19 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v19 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_start_decoder_stream_if_needed";
        v34 = 2082;
        v35 = v19;
        v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_42;
      }
      if (v16)
      {
        v17 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v17 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446722;
        v33 = "nw_http3_start_decoder_stream_if_needed";
        v34 = 2082;
        v35 = v17;
        v36 = 2082;
        v37 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
    }
LABEL_43:
    if (v10)
      free(v10);
    if (!v3)
    {
      __nwlog_obj();
      v9 = "invalid";
      goto LABEL_47;
    }
LABEL_6:
    v6 = *(_QWORD *)(v3 + 24);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, _QWORD))(v6 + 24);
      if (v7)
      {
        v7(v3, *(_QWORD *)(a1 + 1072));
        return;
      }
    }
    __nwlog_obj();
    v9 = *(const char **)(v3 + 16);
    if (!v9)
      v9 = "invalid";
LABEL_47:
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http3_start_decoder_stream_if_needed";
    v34 = 2082;
    v35 = v9;
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v20, &type, &v30))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_73;
      v23 = "invalid";
      if (v3 && *(_QWORD *)(v3 + 16))
        v23 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http3_start_decoder_stream_if_needed";
      v34 = 2082;
      v35 = v23;
      v24 = "%{public}s protocol %{public}s has invalid connect callback";
    }
    else if (v30)
    {
      v25 = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v26 = os_log_type_enabled(v21, type);
      if (v25)
      {
        if (v26)
        {
          v27 = "invalid";
          if (v3 && *(_QWORD *)(v3 + 16))
            v27 = *(const char **)(v3 + 16);
          *(_DWORD *)buf = 136446722;
          v33 = "nw_http3_start_decoder_stream_if_needed";
          v34 = 2082;
          v35 = v27;
          v36 = 2082;
          v37 = v25;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v25);
        goto LABEL_73;
      }
      if (!v26)
      {
LABEL_73:
        if (v20)
          free(v20);
        return;
      }
      v29 = "invalid";
      if (v3 && *(_QWORD *)(v3 + 16))
        v29 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http3_start_decoder_stream_if_needed";
      v34 = 2082;
      v35 = v29;
      v24 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }
    else
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_73;
      v28 = "invalid";
      if (v3 && *(_QWORD *)(v3 + 16))
        v28 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http3_start_decoder_stream_if_needed";
      v34 = 2082;
      v35 = v28;
      v24 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v21, v22, v24, buf, 0x16u);
    goto LABEL_73;
  }
}

void nw_http3_decoder_stream_process_output(uint64_t a1)
{
  _WORD *v2;
  char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  int v8;
  int v9;
  FILE *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  FILE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *backtrace_string;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD *);
  uint64_t v37;
  nw_protocol *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  char *v54;
  NSObject *v55;
  _BOOL4 v56;
  const char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  const char *v61;
  const char *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  NSObject *v68;
  _BOOL4 v69;
  uint64_t v70;
  const char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  NSObject *v78;
  os_log_type_t v79;
  const char *v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  const char *v84;
  char *v85;
  _BOOL4 v86;
  os_log_type_t v87;
  os_log_type_t v88;
  char *v89;
  char *v90;
  char v91;
  os_log_type_t type;
  _QWORD v93[2];
  uint64_t (*v94)(_QWORD *);
  void *v95;
  _BYTE *v96;
  int64_t v97;
  char *v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  _QWORD v105[2];
  _BYTE buf[24];
  char *v107;
  uint64_t v108;

  v2 = (_WORD *)(a1 + 1373);
  v3 = &v101;
  v108 = *MEMORY[0x1E0C80C00];
  v4 = "nw_http3_decoder_stream_process_output";
  while ((*v2 & 0x4000) == 0)
  {
    if (*(_DWORD *)(a1 + 528) == *(_DWORD *)(a1 + 532))
      goto LABEL_53;
    v105[0] = 0;
    v105[1] = v105;
    v5 = *(_QWORD *)(a1 + 1072);
    if (!v5)
      return;
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
      return;
    v7 = *(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(v6 + 88);
    if (!v7 || !v7(*(_QWORD *)(a1 + 1072), a1, 6, 6, 0xFFFFFFFFLL, v105))
      return;
    v8 = *(_DWORD *)(a1 + 528);
    v9 = v8 - *(_DWORD *)(a1 + 532);
    if (!v9)
    {
      v10 = *(FILE **)(a1 + 544);
      if (v10)
      {
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v10);
        fwrite("no ICI instruction necessary: emitting zero bytes", 0x31uLL, 1uLL, *(FILE **)(a1 + 544));
        fputc(10, *(FILE **)(a1 + 544));
      }
      goto LABEL_34;
    }
    v11 = *(_DWORD *)(a1 + 516);
    if (v11)
    {
      v12 = (v9 + 2 * v11) % (2 * v11);
      if (v12 > 0x3E)
      {
        v100 = 63;
        v13 = v12 - 63;
        if ((unint64_t)(v12 - 63) < 0x80)
        {
          v15 = &v100;
          v14 = 1;
        }
        else
        {
          v101 = v13 | 0x80;
          if (v13 < 0x4000)
          {
            v13 >>= 7;
            v14 = 2;
            v15 = v3;
          }
          else
          {
            v102 = (v13 >> 7) | 0x80;
            if (v13 < 0x200000)
            {
              v13 >>= 14;
              v14 = 3;
              v15 = &v102;
            }
            else
            {
              v103 = (v13 >> 14) | 0x80;
              if (v13 >> 28)
              {
                v104 = (v13 >> 21) | 0x80;
                v14 = 5;
                v13 >>= 28;
                v15 = &v104;
              }
              else
              {
                v13 >>= 21;
                v14 = 4;
                v15 = &v103;
              }
            }
          }
        }
        v16 = v15 + 2;
        *(&v100 + v14) = v13;
        if (v15 + 2 <= &v100)
          goto LABEL_34;
        goto LABEL_22;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    v100 = v12;
    v16 = v3;
LABEL_22:
    v17 = *(FILE **)(a1 + 544);
    if (v17)
    {
      fwrite("qdec: debug: ", 0xDuLL, 1uLL, v17);
      fprintf(*(FILE **)(a1 + 544), "wrote ICI: count=%u", v12);
      fputc(10, *(FILE **)(a1 + 544));
      v8 = *(_DWORD *)(a1 + 528);
    }
    *(_DWORD *)(a1 + 532) = v8;
    *(_DWORD *)(a1 + 520) += (_DWORD)v16 - &v100;
    if (v16 - &v100 >= 1)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v107 = 0;
      v93[0] = MEMORY[0x1E0C809B0];
      v93[1] = 0x40000000;
      v94 = (uint64_t (*)(_QWORD *))___ZL38nw_http3_decoder_stream_process_outputP17nw_protocol_http3_block_invoke;
      v95 = &unk_1E14A80A8;
      v96 = buf;
      v97 = v16 - &v100;
      v98 = &v100;
      v99 = a1;
      v18 = v105[0];
      do
      {
        if (!v18)
          break;
        v19 = *(_QWORD *)(v18 + 32);
        v20 = v94(v93);
        v18 = v19;
      }
      while ((v20 & 1) != 0);
      _Block_object_dispose(buf, 8);
      goto LABEL_50;
    }
LABEL_34:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v21, &type, &v91))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v4;
      v24 = v22;
      v25 = v23;
      v26 = "%{public}s Failed to generate ici";
      goto LABEL_47;
    }
    if (!v91)
    {
      v33 = __nwlog_obj();
      v34 = type;
      if (!os_log_type_enabled(v33, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v4;
      v24 = v33;
      v25 = v34;
      v26 = "%{public}s Failed to generate ici, backtrace limit exceeded";
      goto LABEL_47;
    }
    v27 = v3;
    v28 = v4;
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v32 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s Failed to generate ici, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      v4 = v28;
      v3 = v27;
      goto LABEL_48;
    }
    v4 = v28;
    v3 = v27;
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v4;
      v24 = v30;
      v25 = v31;
      v26 = "%{public}s Failed to generate ici, no backtrace";
LABEL_47:
      _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    }
LABEL_48:
    if (v21)
      free(v21);
LABEL_50:
    v35 = *(_QWORD *)(v5 + 24);
    if (v35)
    {
      v36 = *(void (**)(uint64_t, _QWORD *))(v35 + 96);
      if (v36)
      {
        v36(v5, v105);
        goto LABEL_53;
      }
    }
    __nwlog_obj();
    v46 = *(const char **)(v5 + 16);
    if (!v46)
      v46 = "invalid";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v46;
    v47 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    v89 = (char *)v47;
    if (__nwlog_fault(v47, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v48 = __nwlog_obj();
        v49 = type;
        if (!os_log_type_enabled(v48, type))
          goto LABEL_93;
        v50 = *(const char **)(v5 + 16);
        if (!v50)
          v50 = "invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v50;
        v51 = v48;
        v52 = v49;
        v53 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
        goto LABEL_92;
      }
      if (!v91)
      {
        v58 = __nwlog_obj();
        v59 = type;
        if (!os_log_type_enabled(v58, type))
          goto LABEL_93;
        v60 = *(const char **)(v5 + 16);
        if (!v60)
          v60 = "invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v60;
        v51 = v58;
        v52 = v59;
        v53 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_92;
      }
      v54 = (char *)__nw_create_backtrace_string();
      v55 = __nwlog_obj();
      v87 = type;
      v56 = os_log_type_enabled(v55, type);
      if (v54)
      {
        if (v56)
        {
          v57 = *(const char **)(v5 + 16);
          if (!v57)
            v57 = "invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v4;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v57;
          *(_WORD *)&buf[22] = 2082;
          v107 = v54;
          _os_log_impl(&dword_182FBE000, v55, v87, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v54);
        goto LABEL_93;
      }
      if (v56)
      {
        v61 = *(const char **)(v5 + 16);
        if (!v61)
          v61 = "invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v61;
        v51 = v55;
        v52 = v87;
        v53 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_92:
        _os_log_impl(&dword_182FBE000, v51, v52, v53, buf, 0x16u);
      }
    }
LABEL_93:
    if (v89)
      free(v89);
LABEL_53:
    v37 = *(_QWORD *)(a1 + 944);
    if (!v37)
      return;
    if (*(_BYTE *)(v37 + 634)
      && nw_http3_stream_send_section_ack(*(_QWORD *)(a1 + 944))
      && !nw_http3_stream_received_fields_done(v37))
    {
      nw_protocol_http3_stream_input_available((nw_protocol *)v37, v38);
    }
    nw_http3_stream_send_stream_cancellation(v37);
    v39 = *(unsigned __int16 *)(v37 + 736);
    if ((v39 & 0x400) != 0 && !*(_QWORD *)(v37 + 528) && !*(_BYTE *)(v37 + 634) && !*(_BYTE *)(v37 + 635))
    {
      v40 = v39 & 0xFFFFFBFF | (*(unsigned __int8 *)(v37 + 738) << 16);
      *(_WORD *)(v37 + 736) = v39 & 0xFBFF;
      *(_BYTE *)(v37 + 738) = BYTE2(v40);
      v41 = *(_QWORD *)(v37 + 32);
      if (!v41
        || (v42 = *(_QWORD *)(v41 + 24)) == 0
        || (v43 = *(void (**)(uint64_t, uint64_t))(v42 + 32)) == 0)
      {
        __nwlog_obj();
        v44 = *(_QWORD *)(v37 + 32);
        if (v44)
        {
          v45 = *(const char **)(v44 + 16);
          if (!v45)
            v45 = "invalid";
        }
        else
        {
          v45 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_decoder_stream_output_available";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v45;
        v62 = (const char *)_os_log_send_and_compose_impl();
        LOBYTE(v105[0]) = 16;
        v100 = 0;
        v90 = (char *)v62;
        if (!__nwlog_fault(v62, v105, &v100))
          goto LABEL_130;
        if (LOBYTE(v105[0]) == 17)
        {
          v63 = __nwlog_obj();
          v64 = v105[0];
          if (os_log_type_enabled(v63, v105[0]))
          {
            v65 = *(_QWORD *)(v37 + 32);
            if (v65)
            {
              v66 = *(const char **)(v65 + 16);
              if (!v66)
                v66 = "invalid";
            }
            else
            {
              v66 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_decoder_stream_output_available";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v66;
            v78 = v63;
            v79 = v64;
            v80 = "%{public}s protocol %{public}s has invalid disconnect callback";
            goto LABEL_129;
          }
          goto LABEL_130;
        }
        if (v100)
        {
          v67 = (char *)__nw_create_backtrace_string();
          v68 = __nwlog_obj();
          v88 = v105[0];
          v69 = os_log_type_enabled(v68, v105[0]);
          if (v67)
          {
            if (v69)
            {
              v70 = *(_QWORD *)(v37 + 32);
              if (v70)
              {
                v71 = *(const char **)(v70 + 16);
                if (!v71)
                  v71 = "invalid";
              }
              else
              {
                v71 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http3_stream_decoder_stream_output_available";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v71;
              *(_WORD *)&buf[22] = 2082;
              v107 = v67;
              _os_log_impl(&dword_182FBE000, v68, v88, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v67);
            goto LABEL_130;
          }
          if (!v69)
          {
LABEL_130:
            if (v90)
              free(v90);
            goto LABEL_3;
          }
          v76 = *(_QWORD *)(v37 + 32);
          if (v76)
          {
            v77 = *(const char **)(v76 + 16);
            if (!v77)
              v77 = "invalid";
          }
          else
          {
            v77 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_decoder_stream_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v77;
          v78 = v68;
          v79 = v88;
          v80 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
        }
        else
        {
          v72 = __nwlog_obj();
          v73 = v105[0];
          if (!os_log_type_enabled(v72, v105[0]))
            goto LABEL_130;
          v74 = *(_QWORD *)(v37 + 32);
          if (v74)
          {
            v75 = *(const char **)(v74 + 16);
            if (!v75)
              v75 = "invalid";
          }
          else
          {
            v75 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_decoder_stream_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v75;
          v78 = v72;
          v79 = v73;
          v80 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        }
LABEL_129:
        _os_log_impl(&dword_182FBE000, v78, v79, v80, buf, 0x16u);
        goto LABEL_130;
      }
      v43(v41, v37);
    }
LABEL_3:
    if (v37 == *(_QWORD *)(a1 + 944))
      return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = v4;
  v81 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v105[0]) = 16;
  v100 = 0;
  if (!__nwlog_fault(v81, v105, &v100))
    goto LABEL_146;
  if (LOBYTE(v105[0]) == 17)
  {
    v82 = __nwlog_obj();
    v83 = v105[0];
    if (os_log_type_enabled(v82, v105[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v4;
      v84 = "%{public}s Must finalize output frames from decoder stream immediately";
      goto LABEL_145;
    }
    goto LABEL_146;
  }
  if (!v100)
  {
    v82 = __nwlog_obj();
    v83 = v105[0];
    if (!os_log_type_enabled(v82, v105[0]))
      goto LABEL_146;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    v84 = "%{public}s Must finalize output frames from decoder stream immediately, backtrace limit exceeded";
    goto LABEL_145;
  }
  v85 = (char *)__nw_create_backtrace_string();
  v82 = __nwlog_obj();
  v83 = v105[0];
  v86 = os_log_type_enabled(v82, v105[0]);
  if (v85)
  {
    if (v86)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v85;
      _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s Must finalize output frames from decoder stream immediately, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v85);
    goto LABEL_146;
  }
  if (v86)
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    v84 = "%{public}s Must finalize output frames from decoder stream immediately, no backtrace";
LABEL_145:
    _os_log_impl(&dword_182FBE000, v82, v83, v84, buf, 0xCu);
  }
LABEL_146:
  if (v81)
    free(v81);
}

uint64_t ___ZL38nw_http3_decoder_stream_process_outputP17nw_protocol_http3_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  size_t __n;

  LODWORD(__n) = 0;
  v4 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  v5 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v6 = a1[5] - v5;
  v7 = (const void *)(a1[6] + v5);
  if (v6 >= __n)
  {
    memcpy(v4, v7, __n);
  }
  else
  {
    memcpy(v4, v7, a1[5] - v5);
    nw_frame_claim(a2, v8, 0, __n - v6);
  }
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += __n;
  return 1;
}

uint64_t nw_http3_stream_send_section_ack(uint64_t a1)
{
  int output_frames;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  _BOOL4 v17;
  char *backtrace_string;
  _BOOL4 v19;
  _QWORD v20[2];
  uint64_t (*v21)(uint64_t, uint64_t);
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  os_log_type_t type[8];
  os_log_type_t *v26;
  char v27;
  _BYTE buf[24];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_BYTE *)(a1 + 634))
    {
      *(_QWORD *)type = 0;
      v26 = type;
      output_frames = nw_http3_decoder_stream_get_output_frames(*(_QWORD *)(a1 + 336), a1);
      v3 = output_frames != 0;
      if (output_frames)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        v29 = 0;
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 0x40000000;
        v21 = ___ZL32nw_http3_stream_send_section_ackP24nw_protocol_http3_stream_block_invoke;
        v22 = &unk_1E14A7FB8;
        v23 = buf;
        v24 = a1;
        v4 = *(_QWORD *)type;
        do
        {
          if (!v4)
            break;
          v5 = *(_QWORD *)(v4 + 32);
          v6 = ((uint64_t (*)(_QWORD *))v21)(v20);
          v4 = v5;
        }
        while ((v6 & 1) != 0);
        nw_http3_decoder_stream_finalize_output_frames(*(_QWORD *)(a1 + 336), a1, (uint64_t)type);
        *(_BYTE *)(a1 + 634) = 0;
        _Block_object_dispose(buf, 8);
      }
      return v3;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
    v12 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v12, type, &v27))
      goto LABEL_40;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
        v15 = "%{public}s No section ack to send";
LABEL_39:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type[0];
      v19 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s No section ack to send, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
        v15 = "%{public}s No section ack to send, no backtrace";
        goto LABEL_39;
      }
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
        v15 = "%{public}s No section ack to send, backtrace limit exceeded";
        goto LABEL_39;
      }
    }
LABEL_40:
    if (v12)
      free(v12);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
  v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v8, type, &v27))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
        v11 = "%{public}s called with null http3_stream";
LABEL_33:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
    else if (v27)
    {
      v16 = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type[0];
      v17 = os_log_type_enabled(v9, type[0]);
      if (v16)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v16);
        goto LABEL_34;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
        v11 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_33;
      }
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_section_ack";
        v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_33;
      }
    }
  }
LABEL_34:
  if (v8)
    free(v8);
  return 0;
}

uint64_t nw_http3_stream_received_fields_done(uint64_t a1)
{
  unsigned int v1;
  int v3;
  int v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  _WORD *v11;
  id *metadata_with_parsed_fields;
  char v13;
  void *v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  _BOOL4 v23;
  char *backtrace_string;
  _BOOL4 v25;
  int v26;
  int v27;
  uint64_t result;
  _BOOL8 v29;
  void *v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  int is_metadata_complete;
  int v42;
  const char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *v47;
  _BOOL4 v48;
  NSObject *v49;
  uint64_t v50;
  _QWORD v51[6];
  _QWORD v52[5];
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  _BYTE v58[18];
  __int16 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 372);
  if (v1 > 8)
    return 0;
  v3 = 1 << v1;
  if ((v3 & 0x1D5) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = *(_DWORD *)(a1 + 372);
    *(_DWORD *)buf = 136446466;
    v56 = "nw_http3_stream_received_fields_done";
    v57 = 1024;
    *(_DWORD *)v58 = v4;
    v5 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v5, &type, &v53))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      v8 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)buf = 136446466;
      v56 = "nw_http3_stream_received_fields_done";
      v57 = 1024;
      *(_DWORD *)v58 = v8;
      v9 = "%{public}s Unexpected input state %d";
    }
    else if (v53)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      v25 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v25)
        {
          v26 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)buf = 136446722;
          v56 = "nw_http3_stream_received_fields_done";
          v57 = 1024;
          *(_DWORD *)v58 = v26;
          *(_WORD *)&v58[4] = 2082;
          *(_QWORD *)&v58[6] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s Unexpected input state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
LABEL_41:
        if (v5)
        {
          v35 = (char *)v5;
LABEL_43:
          free(v35);
        }
        return 2;
      }
      if (!v25)
        goto LABEL_41;
      v34 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)buf = 136446466;
      v56 = "nw_http3_stream_received_fields_done";
      v57 = 1024;
      *(_DWORD *)v58 = v34;
      v9 = "%{public}s Unexpected input state %d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      v27 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)buf = 136446466;
      v56 = "nw_http3_stream_received_fields_done";
      v57 = 1024;
      *(_DWORD *)v58 = v27;
      v9 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v9, buf, 0x12u);
    goto LABEL_41;
  }
  if ((v3 & 0xA) == 0)
  {
    v29 = nw_http_parsed_fields_copy_trailer_fields(*(void **)(a1 + 504));
    if (v29)
    {
      v30 = (void *)v29;
      nw_http_metadata_set_trailer_fields(*(void **)(a1 + 400), (void *)v29);
      v31 = *(_DWORD **)(a1 + 376);
      v32 = nw_frame_unclaimed_length(v31);
      nw_frame_claim((uint64_t)v31, v33, v32, 0);
      nw_frame_set_metadata(*(_QWORD *)(a1 + 376), *(NSObject **)(a1 + 400), 1, 1);
      goto LABEL_36;
    }
LABEL_37:
    *(_QWORD *)(a1 + 264) = 270;
    nw_protocol_http3_stream_error((nw_protocol *)a1, (nw_protocol *)a1, 94);
    nw_protocol_http3_stream_disconnect((nw_protocol *)a1, (nw_protocol *)a1);
    return 2;
  }
  v10 = *(_QWORD *)(a1 + 336);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http3_stream_received_fields_done";
    v43 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (__nwlog_fault(v43, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v44 = __nwlog_obj();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_http3_stream_received_fields_done";
          v46 = "%{public}s called with null http3";
LABEL_73:
          _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
        }
      }
      else if (v53)
      {
        v47 = (char *)__nw_create_backtrace_string();
        v44 = __nwlog_obj();
        v45 = type;
        v48 = os_log_type_enabled(v44, type);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v56 = "nw_http3_stream_received_fields_done";
            v57 = 2082;
            *(_QWORD *)v58 = v47;
            _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v47);
          goto LABEL_74;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_http3_stream_received_fields_done";
          v46 = "%{public}s called with null http3, no backtrace";
          goto LABEL_73;
        }
      }
      else
      {
        v44 = __nwlog_obj();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_http3_stream_received_fields_done";
          v46 = "%{public}s called with null http3, backtrace limit exceeded";
          goto LABEL_73;
        }
      }
    }
LABEL_74:
    if (!v43)
      return 2;
    v35 = (char *)v43;
    goto LABEL_43;
  }
  v11 = (_WORD *)(v10 + 1373);
  metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields(*(void **)(a1 + 504), *(_WORD *)(v10 + 1373) & 1);
  v13 = *(_BYTE *)(a1 + 408);
  if ((v13 & 1) != 0)
  {
    v14 = *(void **)(a1 + 400);
    if (v14)
    {
      os_release(v14);
      v13 = *(_BYTE *)(a1 + 408);
    }
  }
  *(_QWORD *)(a1 + 400) = metadata_with_parsed_fields;
  *(_BYTE *)(a1 + 408) = v13 | 1;
  if (!metadata_with_parsed_fields)
    goto LABEL_37;
  nw_http_metadata_set_version(metadata_with_parsed_fields, 5);
  v15 = (unsigned __int16)*v11;
  v16 = v15 | (*(unsigned __int8 *)(v10 + 1375) << 16);
  if ((v15 & 1) != 0)
  {
    v23 = 0;
  }
  else
  {
    if ((v16 & 0x100000) != 0 && *(_QWORD *)(v10 + 1240) && *(_DWORD *)(v10 + 1276))
    {
      if ((v16 & 0x400000) == 0)
      {
        v17 = __nwlog_obj();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v18 = *(_DWORD *)(v10 + 1280);
          *(_DWORD *)buf = 136446978;
          v56 = "nw_http3_stream_received_fields_done";
          v57 = 2082;
          *(_QWORD *)v58 = v10 + 1289;
          *(_WORD *)&v58[8] = 2080;
          *(_QWORD *)&v58[10] = " ";
          v59 = 1024;
          LODWORD(v60) = v18;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> decreasing QUIC keepalive frequency after receiving a response", buf, 0x26u);
        }
      }
      v19 = (unsigned __int16)*v11;
      v20 = (v19 | (*(unsigned __int8 *)(v10 + 1375) << 16)) & 0xFFEFFFFF;
      *v11 = v19;
      *(_BYTE *)(v10 + 1375) = BYTE2(v20);
      nw_quic_connection_set_keepalive(*(void **)(v10 + 1240), 0xFFFF);
    }
    v21 = *(_QWORD *)(v10 + 1024);
    *(_QWORD *)(v10 + 1024) = v21 - 1;
    if (!v21)
    {
      if (gLogDatapath)
      {
        v49 = __nwlog_obj();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          v50 = *(_QWORD *)(v10 + 1024);
          *(_DWORD *)buf = 136446978;
          v56 = "nw_http3_stream_received_fields_done";
          v57 = 2082;
          *(_QWORD *)v58 = "http3->outstanding_sent_requests";
          *(_WORD *)&v58[8] = 2048;
          *(_QWORD *)&v58[10] = 1;
          v59 = 2048;
          v60 = v50;
          _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      *(_QWORD *)(v10 + 1024) = 0;
    }
    v22 = nw_http_metadata_copy_response(*(void **)(a1 + 400));
    v23 = (nw_http_response_get_status_code(v22) - 100) < 0x64;
    if (v22)
      os_release(v22);
  }
  nw_http_connection_metadata_increment_inbound_message_count(*(void **)(v10 + 1248));
  nw_http_transaction_metadata_set_inbound_message(*(void **)(a1 + 392), *(void **)(a1 + 400));
  nw::http::content_length_manager::set_inbound_message((nw::http::content_length_manager *)(a1 + 272), *(nw_protocol_metadata **)(a1 + 400));
  v36 = *(_DWORD **)(a1 + 376);
  v37 = nw_frame_unclaimed_length(v36);
  nw_frame_claim((uint64_t)v36, v38, v37, 0);
  v39 = *(_QWORD *)(a1 + 376);
  v40 = *(NSObject **)(a1 + 400);
  is_metadata_complete = nw_frame_is_metadata_complete(v39);
  nw_frame_set_metadata(v39, v40, 1, is_metadata_complete | v23);
  v42 = 0;
  if (v23)
    goto LABEL_54;
  if ((*(_WORD *)(a1 + 736) & 0x10) != 0)
  {
    v42 = 8;
LABEL_54:
    result = 0;
    *(_DWORD *)(a1 + 372) = v42;
    return result;
  }
  *(_DWORD *)(a1 + 372) = 4;
  result = *(_QWORD *)(a1 + 400);
  if (result)
  {
    result = (uint64_t)nw_http_metadata_copy_request((void *)result);
    if (result)
    {
      v30 = (void *)result;
      if (nw_http_request_has_method((void *)result, (uint64_t)"CONNECT-UDP"))
      {
        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 0x40000000;
        v52[2] = ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke;
        v52[3] = &__block_descriptor_tmp_83_60476;
        v52[4] = a1;
        nw_http_fields_access_value_by_name(v30, (unint64_t)"Datagram-Flow-Id", v52);
LABEL_57:
        *(_WORD *)(a1 + 736) |= 0x8000u;
        goto LABEL_36;
      }
      if (nw_http_request_has_method(v30, (uint64_t)"CONNECT"))
      {
        v51[0] = MEMORY[0x1E0C809B0];
        v51[1] = 0x40000000;
        v51[2] = ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke_84;
        v51[3] = &__block_descriptor_tmp_87_60477;
        v51[4] = a1;
        v51[5] = v10;
        nw_http_request_access_extended_connect_protocol(v30, v51);
        goto LABEL_57;
      }
LABEL_36:
      os_release(v30);
      return 0;
    }
  }
  return result;
}

void nw_http3_stream_send_stream_cancellation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v5[2];
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[4];
  _QWORD v11[2];

  if (*(_BYTE *)(a1 + 635))
  {
    v11[0] = 0;
    v11[1] = v11;
    if (nw_http3_decoder_stream_get_output_frames(*(_QWORD *)(a1 + 336), a1))
    {
      v10[0] = 0;
      v10[1] = v10;
      v10[2] = 0x2000000000;
      v10[3] = 0;
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 0x40000000;
      v6 = ___ZL40nw_http3_stream_send_stream_cancellationP24nw_protocol_http3_stream_block_invoke;
      v7 = &unk_1E14A8080;
      v8 = v10;
      v9 = a1;
      v2 = v11[0];
      do
      {
        if (!v2)
          break;
        v3 = *(_QWORD *)(v2 + 32);
        v4 = ((uint64_t (*)(_QWORD *))v6)(v5);
        v2 = v3;
      }
      while ((v4 & 1) != 0);
      nw_http3_decoder_stream_finalize_output_frames(*(_QWORD *)(a1 + 336), a1, (uint64_t)v11);
      *(_BYTE *)(a1 + 635) = 0;
      _Block_object_dispose(v10, 8);
    }
  }
}

uint64_t nw_http3_decoder_stream_get_output_frames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http3_decoder_stream_get_output_frames";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v9, &type, &v15))
      goto LABEL_26;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_http3_decoder_stream_get_output_frames";
      v12 = "%{public}s called with null http3";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_http3_decoder_stream_get_output_frames";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (!v14)
      {
LABEL_26:
        if (v9)
          free(v9);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v18 = "nw_http3_decoder_stream_get_output_frames";
      v12 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_http3_decoder_stream_get_output_frames";
      v12 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_26;
  }
  v3 = *(_QWORD *)(a1 + 944);
  if (v3)
  {
    if (v3 != a2)
    {
      result = 0;
      *(_QWORD *)(a2 + 592) = 0;
      v5 = *(_QWORD **)(a1 + 952);
      *(_QWORD *)(a2 + 600) = v5;
      *v5 = a2;
      *(_QWORD *)(a1 + 952) = a2 + 592;
      return result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 592) = 0;
    v6 = *(_QWORD **)(a1 + 952);
    *(_QWORD *)(a2 + 600) = v6;
    *v6 = a2;
    *(_QWORD *)(a1 + 952) = a2 + 592;
  }
  nw_http3_start_decoder_stream_if_needed(a1);
  result = *(_QWORD *)(a1 + 1072);
  if (result)
  {
    v7 = *(_QWORD *)(result + 24);
    if (v7)
    {
      v8 = *(uint64_t (**)(void))(v7 + 88);
      if (v8)
      {
        result = v8();
        if ((_DWORD)result)
          *(_WORD *)(a1 + 1373) |= 0x4000u;
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t ___ZL40nw_http3_stream_send_stream_cancellationP24nw_protocol_http3_stream_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  size_t __n;

  LODWORD(__n) = 0;
  v3 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy(v3, (const void *)(*(_QWORD *)(a1 + 40) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 730), __n);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += __n;
  return 1;
}

void nw_http3_decoder_stream_finalize_output_frames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  const char *v20;
  _BOOL4 v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  const char *v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)(a1 + 944) != a2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v33 = "nw_http3_decoder_stream_finalize_output_frames";
      v3 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v30 = 0;
      if (!__nwlog_fault(v3, &type, &v30))
        goto LABEL_27;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http3_decoder_stream_finalize_output_frames";
        v6 = "%{public}s Decoder stream is not being used by current stream";
        goto LABEL_25;
      }
      if (!v30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http3_decoder_stream_finalize_output_frames";
        v6 = "%{public}s Decoder stream is not being used by current stream, backtrace limit exceeded";
        goto LABEL_25;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      v10 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http3_decoder_stream_finalize_output_frames";
        v6 = "%{public}s Decoder stream is not being used by current stream, no backtrace";
        goto LABEL_25;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_decoder_stream_finalize_output_frames";
        v34 = 2082;
        v35 = backtrace_string;
        v11 = "%{public}s Decoder stream is not being used by current stream, dumping backtrace:%{public}s";
LABEL_13:
        _os_log_impl(&dword_182FBE000, v4, v5, v11, buf, 0x16u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(a2 + 592);
    v8 = *(_QWORD **)(a2 + 600);
    if (v7)
    {
      *(_QWORD *)(v7 + 600) = v8;
      v8 = *(_QWORD **)(a2 + 600);
    }
    else
    {
      *(_QWORD *)(a1 + 952) = v8;
    }
    *v8 = v7;
    *(_QWORD *)(a2 + 592) = 0;
    *(_QWORD *)(a2 + 600) = 0;
    v12 = *(unsigned __int16 *)(a1 + 1373);
    v13 = v12 & 0xFFFFBFFF | (*(unsigned __int8 *)(a1 + 1375) << 16);
    *(_WORD *)(a1 + 1373) = v12 & 0xBFFF;
    *(_BYTE *)(a1 + 1375) = BYTE2(v13);
    v14 = *(_QWORD *)(a1 + 1072);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(void (**)(_QWORD, uint64_t))(v15 + 96);
        if (v16)
        {
          v16(*(_QWORD *)(a1 + 1072), a3);
          return;
        }
      }
      __nwlog_obj();
      v20 = *(const char **)(v14 + 16);
      if (!v20)
        v20 = "invalid";
    }
    else
    {
      __nwlog_obj();
      v20 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http3_decoder_stream_finalize_output_frames";
    v34 = 2082;
    v35 = (void *)v20;
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v3, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          v24 = "invalid";
          if (v14)
          {
            if (*(_QWORD *)(v14 + 16))
              v24 = *(const char **)(v14 + 16);
          }
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http3_decoder_stream_finalize_output_frames";
          v34 = 2082;
          v35 = (void *)v24;
          v6 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
LABEL_69:
          v17 = v22;
          v18 = v23;
          v19 = 22;
          goto LABEL_26;
        }
      }
      else if (v30)
      {
        v25 = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type;
        v26 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v26)
          {
            v27 = "invalid";
            if (v14 && *(_QWORD *)(v14 + 16))
              v27 = *(const char **)(v14 + 16);
            *(_DWORD *)buf = 136446722;
            v33 = "nw_http3_decoder_stream_finalize_output_frames";
            v34 = 2082;
            v35 = (void *)v27;
            v36 = 2082;
            v37 = v25;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v25);
        }
        else if (v26)
        {
          v29 = "invalid";
          if (v14 && *(_QWORD *)(v14 + 16))
            v29 = *(const char **)(v14 + 16);
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http3_decoder_stream_finalize_output_frames";
          v34 = 2082;
          v35 = (void *)v29;
          v6 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
          goto LABEL_69;
        }
      }
      else
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          v28 = "invalid";
          if (v14 && *(_QWORD *)(v14 + 16))
            v28 = *(const char **)(v14 + 16);
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http3_decoder_stream_finalize_output_frames";
          v34 = 2082;
          v35 = (void *)v28;
          v6 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
          goto LABEL_69;
        }
      }
    }
LABEL_27:
    if (!v3)
      return;
    goto LABEL_28;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_http3_decoder_stream_finalize_output_frames";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (!__nwlog_fault(v3, &type, &v30))
    goto LABEL_27;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_27;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http3_decoder_stream_finalize_output_frames";
    v6 = "%{public}s called with null http3";
    goto LABEL_25;
  }
  if (!v30)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_27;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http3_decoder_stream_finalize_output_frames";
    v6 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_25;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v21 = os_log_type_enabled(v4, type);
  if (!backtrace_string)
  {
    if (!v21)
      goto LABEL_27;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http3_decoder_stream_finalize_output_frames";
    v6 = "%{public}s called with null http3, no backtrace";
LABEL_25:
    v17 = v4;
    v18 = v5;
    v19 = 12;
LABEL_26:
    _os_log_impl(&dword_182FBE000, v17, v18, v6, buf, v19);
    goto LABEL_27;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http3_decoder_stream_finalize_output_frames";
    v34 = 2082;
    v35 = backtrace_string;
    v11 = "%{public}s called with null http3, dumping backtrace:%{public}s";
    goto LABEL_13;
  }
LABEL_14:
  free(backtrace_string);
  if (!v3)
    return;
LABEL_28:
  free(v3);
}

void nw_protocol_http3_stream_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _WORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  FILE *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  FILE *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  FILE *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *);
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  char *backtrace_string;
  _BOOL4 v41;
  char *v42;
  _BOOL4 v43;
  const char *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  const char *v57;
  char *v58;
  _BOOL4 v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  char v69;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v72;
  __int16 v73;
  char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_protocol_http3_stream_disconnect";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (!__nwlog_fault(v33, &type, &v69))
      goto LABEL_143;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null protocol";
    }
    else if (v69)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type;
      v41 = os_log_type_enabled(v34, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v72 = "nw_protocol_http3_stream_disconnect";
          v73 = 2082;
          v74 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_143:
        if (!v33)
          return;
        goto LABEL_144;
      }
      if (!v41)
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_142;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_protocol_http3_stream_disconnect";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (!__nwlog_fault(v33, &type, &v69))
      goto LABEL_143;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v69)
      {
        v34 = __nwlog_obj();
        v35 = type;
        if (!os_log_type_enabled(v34, type))
          goto LABEL_143;
        *(_DWORD *)buf = 136446210;
        v72 = "nw_protocol_http3_stream_disconnect";
        v36 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_142;
      }
      v42 = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type;
      v43 = os_log_type_enabled(v34, type);
      if (!v42)
      {
        if (!v43)
          goto LABEL_143;
        *(_DWORD *)buf = 136446210;
        v72 = "nw_protocol_http3_stream_disconnect";
        v36 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_142;
      }
      if (!v43)
        goto LABEL_113;
      *(_DWORD *)buf = 136446466;
      v72 = "nw_protocol_http3_stream_disconnect";
      v73 = 2082;
      v74 = v42;
      v44 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_112;
    }
    v34 = __nwlog_obj();
    v35 = type;
    if (!os_log_type_enabled(v34, type))
      goto LABEL_143;
    *(_DWORD *)buf = 136446210;
    v72 = "nw_protocol_http3_stream_disconnect";
    v36 = "%{public}s called with null http3_stream";
LABEL_142:
    _os_log_impl(&dword_182FBE000, v34, v35, v36, buf, 0xCu);
    goto LABEL_143;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_protocol_http3_stream_disconnect";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (!__nwlog_fault(v33, &type, &v69))
      goto LABEL_143;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null other_protocol";
      goto LABEL_142;
    }
    if (!v69)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_142;
    }
    v42 = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v45 = os_log_type_enabled(v34, type);
    if (!v42)
    {
      if (!v45)
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_142;
    }
    if (!v45)
      goto LABEL_113;
    *(_DWORD *)buf = 136446466;
    v72 = "nw_protocol_http3_stream_disconnect";
    v73 = 2082;
    v74 = v42;
    v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_112:
    _os_log_impl(&dword_182FBE000, v34, v35, v44, buf, 0x16u);
    goto LABEL_113;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v37 = __nwlog_obj();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        v38 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v39 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        v72 = "nw_protocol_http3_stream_disconnect";
        v73 = 2082;
        v74 = handle + 636;
        v75 = 2080;
        v76 = " ";
        v77 = 1024;
        v78 = v38;
        v79 = 2048;
        v80 = v39;
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v3 = handle + 736;
  v4 = (void *)*((_QWORD *)handle + 52);
  if (v4)
  {
    v5 = *((_QWORD *)handle + 33);
    if (v5 == -1)
    {
      v6 = *((_QWORD *)handle + 54);
      if (v6)
      {
        v5 = (*(uint64_t (**)(_QWORD))(v6 + 16))(*((_QWORD *)handle + 54));
        v4 = (void *)*((_QWORD *)handle + 52);
      }
      else if ((*v3 & 0x10) != 0)
      {
        v5 = 256;
      }
      else
      {
        v5 = 268;
      }
    }
    nw_quic_stream_set_application_error(v4, v5);
  }
  v7 = *((_QWORD *)handle + 12);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 32);
      if (v9)
        v9();
    }
  }
  v10 = *((_QWORD *)handle + 42);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_protocol_http3_stream_disconnect";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (!__nwlog_fault(v33, &type, &v69))
      goto LABEL_143;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null http3_stream->http3_connection";
      goto LABEL_142;
    }
    if (!v69)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
      goto LABEL_142;
    }
    v42 = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v46 = os_log_type_enabled(v34, type);
    if (!v42)
    {
      if (!v46)
        goto LABEL_143;
      *(_DWORD *)buf = 136446210;
      v72 = "nw_protocol_http3_stream_disconnect";
      v36 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
      goto LABEL_142;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v72 = "nw_protocol_http3_stream_disconnect";
      v73 = 2082;
      v74 = v42;
      v44 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_112;
    }
LABEL_113:
    free(v42);
    if (!v33)
      return;
LABEL_144:
    free(v33);
    return;
  }
  v11 = handle + 730;
  v12 = (_QWORD *)(v10 + 576);
  while (1)
  {
    v12 = (_QWORD *)*v12;
    if (!v12)
      break;
    if ((char *)v12[4] == handle)
    {
      *v11 = 64;
      v13 = v12[5];
      if (v13 <= 0x3E)
      {
        v14 = handle + 731;
        handle[730] = v13 | 0x40;
LABEL_38:
        v19 = *(FILE **)(v10 + 544);
        if (v19)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, v19);
          fprintf(*(FILE **)(v10 + 544), "cancelled stream %llu; generate instruction of %u bytes",
            v12[5],
            (_DWORD)v14 - (_DWORD)v11);
          fputc(10, *(FILE **)(v10 + 544));
        }
        v20 = (_QWORD *)*v12;
        v21 = (_QWORD *)v12[1];
        if (*v12)
        {
          v20[1] = v21;
          v21 = (_QWORD *)v12[1];
        }
        else
        {
          *(_QWORD *)(v10 + 584) = v21;
        }
        *v21 = v20;
        if ((v12[13] & 4) != 0)
        {
          v22 = v12[2];
          if (v22)
            *(_QWORD *)(v22 + 24) = v12[3];
          else
            *(_QWORD *)(v10 + 16 * (v12[8] & 7) + 600) = v12[3];
          *(_QWORD *)v12[3] = v22;
          --*(_DWORD *)(v10 + 720);
        }
        free(v12);
        *(_DWORD *)(v10 + 520) += (_DWORD)v14 - (_DWORD)v11;
        if (v14 - v11 >= 0)
        {
          handle[635] = (_BYTE)v14 - ((_BYTE)handle - 38);
          goto LABEL_68;
        }
LABEL_52:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v72 = "nw_protocol_http3_stream_disconnect";
        v24 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v69 = 0;
        if (!__nwlog_fault(v24, &type, &v69))
          goto LABEL_66;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = gLogObj;
          v26 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446210;
            v72 = "nw_protocol_http3_stream_disconnect";
            v27 = "%{public}s Failed to generate stream cancellation instruction";
            goto LABEL_65;
          }
          goto LABEL_66;
        }
        if (v69)
        {
          v28 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = gLogObj;
          v26 = type;
          v29 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v28)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              v72 = "nw_protocol_http3_stream_disconnect";
              v73 = 2082;
              v74 = v28;
              _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s Failed to generate stream cancellation instruction, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v28);
            goto LABEL_66;
          }
          if (!v29)
          {
LABEL_66:
            if (v24)
              free(v24);
            goto LABEL_68;
          }
          *(_DWORD *)buf = 136446210;
          v72 = "nw_protocol_http3_stream_disconnect";
          v27 = "%{public}s Failed to generate stream cancellation instruction, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = gLogObj;
          v26 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_66;
          *(_DWORD *)buf = 136446210;
          v72 = "nw_protocol_http3_stream_disconnect";
          v27 = "%{public}s Failed to generate stream cancellation instruction, backtrace limit exceeded";
        }
LABEL_65:
        _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
        goto LABEL_66;
      }
      *v11 = 127;
      v16 = v13 - 63;
      if (v16 < 0x80)
      {
        v17 = 1;
        v18 = handle + 730;
      }
      else
      {
        handle[731] = v16 | 0x80;
        if (v16 < 0x4000)
        {
          v18 = handle + 731;
          v16 >>= 7;
          v17 = 2;
        }
        else
        {
          handle[732] = (v16 >> 7) | 0x80;
          if (v16 < 0x200000)
          {
            v18 = handle + 732;
            v16 >>= 14;
            v17 = 3;
          }
          else
          {
            handle[733] = (v16 >> 14) | 0x80;
            if (v16 >> 28)
            {
              handle[734] = (v16 >> 21) | 0x80;
              if (v16 >> 35)
              {
                handle[735] = (v16 >> 28) | 0x80;
LABEL_46:
                v23 = *(FILE **)(v10 + 544);
                if (v23)
                {
                  fwrite("qdec: warn: ", 0xCuLL, 1uLL, v23);
                  fprintf(*(FILE **)(v10 + 544), "cannot generate Cancel Stream instruction for stream %llu; buf size=%zu",
                    v12[5],
                    6uLL);
                  fputc(10, *(FILE **)(v10 + 544));
                }
                goto LABEL_52;
              }
              v18 = handle + 734;
              v17 = 5;
              LOBYTE(v16) = v16 >> 28;
            }
            else
            {
              v18 = handle + 733;
              v16 >>= 21;
              v17 = 4;
            }
          }
        }
      }
      v14 = v18 + 2;
      v11[v17] = v16;
      if (v18 + 2 > v11)
        goto LABEL_38;
      goto LABEL_46;
    }
  }
  v15 = *(FILE **)(v10 + 544);
  if (v15)
  {
    fwrite("qdec: info: ", 0xCuLL, 1uLL, v15);
    fwrite("could not find stream to cancel", 0x1FuLL, 1uLL, *(FILE **)(v10 + 544));
    fputc(10, *(FILE **)(v10 + 544));
  }
  handle[635] = 0;
LABEL_68:
  nw_http3_stream_send_stream_cancellation((uint64_t)handle);
  if (*((_QWORD *)handle + 66) || handle[634] || handle[635])
  {
    *v3 |= 0x400u;
    return;
  }
  v30 = *((_QWORD *)handle + 4);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 24);
    if (v31)
    {
      v32 = *(void (**)(uint64_t, char *))(v31 + 32);
      if (v32)
      {
        v32(v30, handle);
        return;
      }
    }
  }
  __nwlog_obj();
  v47 = *((_QWORD *)handle + 4);
  v48 = "invalid";
  if (v47)
  {
    v49 = *(const char **)(v47 + 16);
    if (v49)
      v48 = v49;
  }
  *(_DWORD *)buf = 136446466;
  v72 = "nw_protocol_http3_stream_disconnect";
  v73 = 2082;
  v74 = (char *)v48;
  v50 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v69 = 0;
  v51 = (char *)v50;
  if (!__nwlog_fault(v50, &type, &v69))
    goto LABEL_164;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v52 = __nwlog_obj();
    v53 = type;
    if (!os_log_type_enabled(v52, type))
      goto LABEL_164;
    v54 = *((_QWORD *)handle + 4);
    v55 = "invalid";
    if (v54)
    {
      v56 = *(const char **)(v54 + 16);
      if (v56)
        v55 = v56;
    }
    *(_DWORD *)buf = 136446466;
    v72 = "nw_protocol_http3_stream_disconnect";
    v73 = 2082;
    v74 = (char *)v55;
    v57 = "%{public}s protocol %{public}s has invalid disconnect callback";
    goto LABEL_163;
  }
  if (!v69)
  {
    v52 = __nwlog_obj();
    v53 = type;
    if (!os_log_type_enabled(v52, type))
      goto LABEL_164;
    v63 = *((_QWORD *)handle + 4);
    v64 = "invalid";
    if (v63)
    {
      v65 = *(const char **)(v63 + 16);
      if (v65)
        v64 = v65;
    }
    *(_DWORD *)buf = 136446466;
    v72 = "nw_protocol_http3_stream_disconnect";
    v73 = 2082;
    v74 = (char *)v64;
    v57 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
    goto LABEL_163;
  }
  v58 = (char *)__nw_create_backtrace_string();
  v52 = __nwlog_obj();
  v53 = type;
  v59 = os_log_type_enabled(v52, type);
  if (v58)
  {
    if (v59)
    {
      v60 = *((_QWORD *)handle + 4);
      v61 = "invalid";
      if (v60)
      {
        v62 = *(const char **)(v60 + 16);
        if (v62)
          v61 = v62;
      }
      *(_DWORD *)buf = 136446722;
      v72 = "nw_protocol_http3_stream_disconnect";
      v73 = 2082;
      v74 = (char *)v61;
      v75 = 2082;
      v76 = v58;
      _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v58);
    goto LABEL_164;
  }
  if (v59)
  {
    v66 = *((_QWORD *)handle + 4);
    v67 = "invalid";
    if (v66)
    {
      v68 = *(const char **)(v66 + 16);
      if (v68)
        v67 = v68;
    }
    *(_DWORD *)buf = 136446466;
    v72 = "nw_protocol_http3_stream_disconnect";
    v73 = 2082;
    v74 = (char *)v67;
    v57 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
LABEL_163:
    _os_log_impl(&dword_182FBE000, v52, v53, v57, buf, 0x16u);
  }
LABEL_164:
  if (v51)
    free(v51);
}

void nw::http::content_length_manager::set_inbound_message(nw::http::content_length_manager *this, nw_protocol_metadata *a2)
{
  id v4;
  BOOL has_method;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  _QWORD v16[5];
  _QWORD v17[5];
  char v18;
  os_log_type_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "set_inbound_message";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_42;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_inbound_message";
      v11 = "%{public}s called with null metadata";
      goto LABEL_41;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_inbound_message";
      v11 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v19;
    v13 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_inbound_message";
      v11 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_41;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v21 = "set_inbound_message";
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_42:
    if (!v8)
      return;
    goto LABEL_43;
  }
  if (!nw_protocol_metadata_is_http(a2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "set_inbound_message";
    v8 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &v19, &v18))
      goto LABEL_42;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_inbound_message";
      v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata))";
      goto LABEL_41;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = v19;
      if (!os_log_type_enabled(v9, v19))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "set_inbound_message";
      v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), backtrace limit exceeded";
      goto LABEL_41;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v19;
    v15 = os_log_type_enabled(v9, v19);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "set_inbound_message";
        v22 = 2082;
        v23 = v14;
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v14);
      if (!v8)
        return;
LABEL_43:
      free(v8);
      return;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v21 = "set_inbound_message";
      v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), no backtrace";
LABEL_41:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  if (*((_BYTE *)this + 48))
  {
    v4 = nw_http_metadata_copy_request(a2);
    has_method = nw_http_request_has_method(v4, (uint64_t)"HEAD");
    v6 = MEMORY[0x1E0C809B0];
    *((_BYTE *)this + 49) = has_method;
    v17[0] = v6;
    v17[1] = 0x40000000;
    v17[2] = ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke;
    v17[3] = &__block_descriptor_tmp_88_60516;
    v17[4] = this;
    v7 = v17;
    goto LABEL_5;
  }
  v4 = nw_http_metadata_copy_response(a2);
  nw_http_response_get_status_code(v4);
  if (!*((_BYTE *)this + 49))
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_89;
    v16[4] = this;
    v7 = v16;
LABEL_5:
    nw_http_fields_access_value_by_name(v4, (unint64_t)"Content-Length", v7);
    if (!v4)
      return;
    goto LABEL_13;
  }
  if (!*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 3) = 0;
    if (!v4)
      return;
    goto LABEL_13;
  }
  *((_QWORD *)this + 3) = 0;
  if (v4)
LABEL_13:
    os_release(v4);
}

unint64_t ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke(unint64_t result, char *__s)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  char *v22;
  char v23[8];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v23 = 0;
  if (__s)
  {
    v3 = result;
    result = strlen(__s);
    if (result <= 7)
    {
      v23[0] = *__s;
      if (v23[0])
      {
        v23[1] = __s[1];
        if (v23[1])
        {
          v23[2] = __s[2];
          if (v23[2])
          {
            v23[3] = __s[3];
            if (v23[3])
            {
              v23[4] = __s[4];
              if (v23[4])
              {
                v23[5] = __s[5];
                if (v23[5])
                {
                  v23[6] = __s[6];
                  if (v23[6])
                    v23[7] = 0;
                }
              }
            }
          }
        }
      }
      v4 = *(_QWORD *)(v3 + 32);
      if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v5 = __nwlog_obj();
          v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
          v4 = *(_QWORD *)(v3 + 32);
          if (v6)
          {
            v7 = (const char *)(v4 + 636);
            v8 = "";
            v9 = *(_DWORD *)(*(_QWORD *)(v4 + 336) + 1280);
            if (!v4)
              v7 = "";
            v10 = *(_QWORD *)(v4 + 240);
            if (v4)
              v8 = " ";
            v11 = 136447490;
            v12 = "nw_http3_stream_received_fields_done_block_invoke";
            v13 = 2082;
            v14 = v7;
            v15 = 2080;
            v16 = v8;
            v17 = 1024;
            v18 = v9;
            v19 = 2048;
            v20 = v10;
            v21 = 2082;
            v22 = v23;
            _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> received CONNECT-UDP for flow ID %{public}s", (uint8_t *)&v11, 0x3Au);
            v4 = *(_QWORD *)(v3 + 32);
          }
        }
      }
      result = atoi(v23);
      *(_QWORD *)(v4 + 248) = (int)result;
      *(_WORD *)(v4 + 736) |= 0x20u;
      *(_DWORD *)(*(_QWORD *)(v3 + 32) + 372) = 8;
    }
  }
  return result;
}

void ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke_84(uint64_t a1, char *__s1)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!__s1 || strcmp(__s1, "connect-udp") && strcmp(__s1, "connect-ip"))
    return;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 240);
  if ((v5 & 3) != 0)
  {
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = (const char *)(v7 + 636);
        v9 = "";
        v10 = v7 == 0;
        if (!v7)
          v8 = "";
        v11 = *(_DWORD *)(*(_QWORD *)(v7 + 336) + 1280);
        v12 = *(_QWORD *)(v7 + 240);
        if (!v10)
          v9 = " ";
        v24 = 136447490;
        v25 = "nw_http3_stream_received_fields_done_block_invoke";
        v26 = 2082;
        v27 = v8;
        v28 = 2080;
        v29 = v9;
        v30 = 1024;
        v31 = v11;
        v32 = 2048;
        v33 = v12;
        v34 = 2048;
        v35 = v12;
        v13 = "%{public}s %{public}s%s<i%u:s%llu> received CONNECT(connect-udp/ip) for invalid stream ID %llu";
        v14 = v6;
        v15 = OS_LOG_TYPE_ERROR;
LABEL_12:
        _os_log_impl(&dword_182FBE000, v14, v15, v13, (uint8_t *)&v24, 0x3Au);
      }
    }
  }
  else
  {
    *(_QWORD *)(v4 + 248) = v5 >> 2;
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v17 = __nwlog_obj();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          v18 = *(_QWORD *)(a1 + 32);
          v19 = (const char *)(v18 + 636);
          v20 = "";
          v21 = v18 == 0;
          if (!v18)
            v19 = "";
          v22 = *(_DWORD *)(*(_QWORD *)(v18 + 336) + 1280);
          v23 = *(_QWORD *)(v18 + 240);
          if (!v21)
            v20 = " ";
          v24 = 136447490;
          v25 = "nw_http3_stream_received_fields_done_block_invoke";
          v26 = 2082;
          v27 = v19;
          v28 = 2080;
          v29 = v20;
          v30 = 1024;
          v31 = v22;
          v32 = 2048;
          v33 = v23;
          v34 = 2048;
          v35 = v23;
          v13 = "%{public}s %{public}s%s<i%u:s%llu> received CONNECT(connect-udp/ip) for stream ID %llu";
          v14 = v17;
          v15 = OS_LOG_TYPE_DEBUG;
          goto LABEL_12;
        }
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 32);
  if ((*(_WORD *)(*(_QWORD *)(a1 + 40) + 1373) & 4) != 0)
    *(_WORD *)(v16 + 736) |= 0x20u;
  else
    nw_protocol_http3_stream_start_datagram_flow(v16);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 372) = 8;
}

void nw_protocol_http3_stream_start_datagram_flow(uint64_t a1)
{
  unsigned __int16 *v2;
  int v3;
  int v4;
  uint64_t default_output_handler;
  uint64_t v6;
  void (**v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  const char *v27;
  char *v28;
  _BOOL4 v29;
  const char *v30;
  char *backtrace_string;
  _BOOL4 v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  const char *v43;
  char *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  const char *v48;
  _QWORD v49[5];
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_protocol_http3_stream_start_datagram_flow";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v14, &type, &v50))
      goto LABEL_104;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_104;
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_http3_stream_start_datagram_flow";
      v17 = "%{public}s called with null http3_stream";
    }
    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v32 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_protocol_http3_stream_start_datagram_flow";
          v54 = 2082;
          v55 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_104;
      }
      if (!v32)
      {
LABEL_104:
        if (v14)
          free(v14);
        return;
      }
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_http3_stream_start_datagram_flow";
      v17 = "%{public}s called with null http3_stream, no backtrace";
    }
    else
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_104;
      *(_DWORD *)buf = 136446210;
      v53 = "nw_protocol_http3_stream_start_datagram_flow";
      v17 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_104;
  }
  v2 = (unsigned __int16 *)(a1 + 736);
  if ((*(_WORD *)(a1 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v18 = __nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
        v20 = *(_QWORD *)(a1 + 240);
        *(_DWORD *)buf = 136447234;
        v53 = "nw_protocol_http3_stream_start_datagram_flow";
        v54 = 2082;
        v55 = (void *)(a1 + 636);
        v56 = 2080;
        v57 = " ";
        v58 = 1024;
        v59 = v19;
        v60 = 2048;
        v61 = v20;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v3 = *v2;
  v4 = v3 | (*((unsigned __int8 *)v2 + 2) << 16);
  if ((v3 & 0x10) == 0)
  {
    *((_BYTE *)v2 + 2) = BYTE2(v4);
    *v2 = v4 | 0x10;
    nw_protocol_set_input_handler(a1 + 64, *(_QWORD *)(a1 + 48));
    *(_OWORD *)(a1 + 64) = *(_OWORD *)a1;
    default_output_handler = nw_http3_get_default_output_handler(*(_QWORD *)(a1 + 336));
    v6 = default_output_handler;
    if (default_output_handler)
    {
      v7 = *(void (***)(uint64_t, uint64_t))(default_output_handler + 24);
      if (v7)
      {
        v8 = *v7;
        if (v8)
        {
          v8(default_output_handler, a1 + 64);
          nw_protocol_set_output_handler(a1 + 64, v6);
          goto LABEL_9;
        }
      }
      __nwlog_obj();
      v21 = *(const char **)(v6 + 16);
      if (!v21)
        v21 = "invalid";
    }
    else
    {
      __nwlog_obj();
      v21 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    v53 = "nw_protocol_http3_stream_start_datagram_flow";
    v54 = 2082;
    v55 = (void *)v21;
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v23, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (!os_log_type_enabled(v24, type))
          goto LABEL_67;
        v26 = "invalid";
        if (v6 && *(_QWORD *)(v6 + 16))
          v26 = *(const char **)(v6 + 16);
        *(_DWORD *)buf = 136446466;
        v53 = "nw_protocol_http3_stream_start_datagram_flow";
        v54 = 2082;
        v55 = (void *)v26;
        v27 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_66:
        _os_log_impl(&dword_182FBE000, v24, v25, v27, buf, 0x16u);
        goto LABEL_67;
      }
      if (!v50)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (!os_log_type_enabled(v24, type))
          goto LABEL_67;
        v37 = "invalid";
        if (v6 && *(_QWORD *)(v6 + 16))
          v37 = *(const char **)(v6 + 16);
        *(_DWORD *)buf = 136446466;
        v53 = "nw_protocol_http3_stream_start_datagram_flow";
        v54 = 2082;
        v55 = (void *)v37;
        v27 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_66;
      }
      v28 = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v29 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (!v29)
          goto LABEL_67;
        v38 = "invalid";
        if (v6 && *(_QWORD *)(v6 + 16))
          v38 = *(const char **)(v6 + 16);
        *(_DWORD *)buf = 136446466;
        v53 = "nw_protocol_http3_stream_start_datagram_flow";
        v54 = 2082;
        v55 = (void *)v38;
        v27 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_66;
      }
      if (v29)
      {
        v30 = "invalid";
        if (v6 && *(_QWORD *)(v6 + 16))
          v30 = *(const char **)(v6 + 16);
        *(_DWORD *)buf = 136446722;
        v53 = "nw_protocol_http3_stream_start_datagram_flow";
        v54 = 2082;
        v55 = (void *)v30;
        v56 = 2082;
        v57 = v28;
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v28);
    }
LABEL_67:
    if (v23)
      free(v23);
    nw_protocol_set_output_handler(a1 + 64, v6);
    if (!v6)
    {
      __nwlog_obj();
      v22 = "invalid";
      goto LABEL_71;
    }
LABEL_9:
    v9 = *(_QWORD *)(v6 + 24);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, uint64_t))(v9 + 24);
      if (v10)
      {
        v10(v6, a1 + 64);
LABEL_12:
        v11 = *(_QWORD *)(v6 + 24);
        if (v11)
        {
          v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 224);
          if (v12)
          {
            v13 = (unsigned __int8 *)v12(v6, 255, a1 + 64);
            v49[0] = MEMORY[0x1E0C809B0];
            v49[1] = 0x40000000;
            v49[2] = ___ZL44nw_protocol_http3_stream_start_datagram_flowP24nw_protocol_http3_stream_block_invoke;
            v49[3] = &__block_descriptor_tmp_90_60503;
            v49[4] = a1;
            nw_array_apply(v13, (uint64_t)v49);
            if (v13)
              os_release(v13);
          }
        }
LABEL_16:
        if ((*v2 & 0x800) == 0 && gLogDatapath)
        {
          v33 = __nwlog_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            v34 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
            v35 = *(_QWORD *)(a1 + 240);
            v36 = *(_QWORD *)(a1 + 248);
            *(_DWORD *)buf = 136447490;
            v53 = "nw_protocol_http3_stream_start_datagram_flow";
            v54 = 2082;
            v55 = (void *)(a1 + 636);
            v56 = 2080;
            v57 = " ";
            v58 = 1024;
            v59 = v34;
            v60 = 2048;
            v61 = v35;
            v62 = 2048;
            v63 = v36;
            _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Opened datagram flow %llu", buf, 0x3Au);
          }
        }
        return;
      }
    }
    __nwlog_obj();
    v22 = *(const char **)(v6 + 16);
    if (!v22)
      v22 = "invalid";
LABEL_71:
    *(_DWORD *)buf = 136446466;
    v53 = "nw_protocol_http3_stream_start_datagram_flow";
    v54 = 2082;
    v55 = (void *)v22;
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v39, &type, &v50))
      goto LABEL_97;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_97;
      v42 = "invalid";
      if (v6 && *(_QWORD *)(v6 + 16))
        v42 = *(const char **)(v6 + 16);
      *(_DWORD *)buf = 136446466;
      v53 = "nw_protocol_http3_stream_start_datagram_flow";
      v54 = 2082;
      v55 = (void *)v42;
      v43 = "%{public}s protocol %{public}s has invalid connect callback";
    }
    else if (v50)
    {
      v44 = (char *)__nw_create_backtrace_string();
      v40 = __nwlog_obj();
      v41 = type;
      v45 = os_log_type_enabled(v40, type);
      if (v44)
      {
        if (v45)
        {
          v46 = "invalid";
          if (v6 && *(_QWORD *)(v6 + 16))
            v46 = *(const char **)(v6 + 16);
          *(_DWORD *)buf = 136446722;
          v53 = "nw_protocol_http3_stream_start_datagram_flow";
          v54 = 2082;
          v55 = (void *)v46;
          v56 = 2082;
          v57 = v44;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v44);
LABEL_97:
        if (v39)
          free(v39);
        if (!v6)
          goto LABEL_16;
        goto LABEL_12;
      }
      if (!v45)
        goto LABEL_97;
      v48 = "invalid";
      if (v6 && *(_QWORD *)(v6 + 16))
        v48 = *(const char **)(v6 + 16);
      *(_DWORD *)buf = 136446466;
      v53 = "nw_protocol_http3_stream_start_datagram_flow";
      v54 = 2082;
      v55 = (void *)v48;
      v43 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }
    else
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (!os_log_type_enabled(v40, type))
        goto LABEL_97;
      v47 = "invalid";
      if (v6 && *(_QWORD *)(v6 + 16))
        v47 = *(const char **)(v6 + 16);
      *(_DWORD *)buf = 136446466;
      v53 = "nw_protocol_http3_stream_start_datagram_flow";
      v54 = 2082;
      v55 = (void *)v47;
      v43 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v40, v41, v43, buf, 0x16u);
    goto LABEL_97;
  }
}

uint64_t ___ZL44nw_protocol_http3_stream_start_datagram_flowP24nw_protocol_http3_stream_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 424) && nw_protocol_metadata_is_quic_stream(a3))
  {
    if (a3)
      v5 = os_retain(a3);
    else
      v5 = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 424) = v5;
    if (nw_quic_stream_get_has_datagram_variant_flow_id(a3))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248) = nw_quic_stream_get_datagram_variant_flow_id(a3);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 628) = nw_quic_stream_get_usable_datagram_frame_size(a3);
    }
  }
  return 1;
}

void ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke(uint64_t a1, char *__s)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  if (__s)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(_QWORD *)(v3 + 24) = std::stoull(&__dst, 0, 10);
        *(_BYTE *)(v3 + 32) = 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

void ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke_2(uint64_t a1, char *__s)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  if (__s)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(_QWORD *)(v3 + 24) = std::stoull(&__dst, 0, 10);
        *(_BYTE *)(v3 + 32) = 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

uint64_t ___ZL32nw_http3_stream_send_section_ackP24nw_protocol_http3_stream_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  size_t __n;

  LODWORD(__n) = 0;
  v3 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy(v3, (const void *)(*(_QWORD *)(a1 + 40) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 720), __n);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += __n;
  return 1;
}

BOOL nw_http3_uni_stream_create_outbound(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  char v7;
  char v8;
  _BOOL8 result;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD aBlock[5];
  _BYTE buf[24];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = malloc_type_calloc(1uLL, 0x88uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    v10 = __nwlog_obj();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    v15 = 136;
    v11 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v11);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v11);
  }
  v6[16] = 0;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  if (gLogDatapath)
  {
    v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_uni_stream_create_outbound";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s created uni_stream %p", buf, 0x16u);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v15 = (uint64_t)v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL35nw_http3_uni_stream_create_outboundP17nw_protocol_http3yb_block_invoke;
  aBlock[3] = &unk_1E14A7D58;
  aBlock[4] = buf;
  v6[12] = _Block_copy(aBlock);
  _Block_object_dispose(buf, 8);
  v6[2] = &g_http3_uni_stream_protocol_identifier;
  if (nw_protocol_http3_uni_stream_get_callbacks(void)::onceToken != -1)
    dispatch_once(&nw_protocol_http3_uni_stream_get_callbacks(void)::onceToken, &__block_literal_global_60_60293);
  v6[3] = &nw_protocol_http3_uni_stream_get_callbacks(void)::protocol_callbacks;
  v6[5] = v6;
  v7 = *((_BYTE *)v6 + 131);
  v6[8] = a2;
  v6[9] = a1;
  *((_BYTE *)v6 + 130) = 0;
  if (a3)
    v8 = 16;
  else
    v8 = 0;
  *((_BYTE *)v6 + 131) = v7 & 0xEF | v8 | 1;
  return (BOOL)v6;
}

uint64_t ___ZL35nw_http3_uni_stream_create_outboundP17nw_protocol_http3yb_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void nw_http3_stream_handle_fields(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  FILE *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  FILE *v20;
  FILE *v21;
  int v22;
  uint64_t v23;
  FILE *v24;
  uint64_t v25;
  unsigned int v26;
  void *v27;
  unsigned int v28;
  int v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  const char *v34;
  unsigned int v35;
  int v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *v46;
  _BOOL4 v47;
  int v48;
  char *v49;
  _BOOL4 v50;
  int v51;
  char *backtrace_string;
  _BOOL4 v53;
  int v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  char v64;
  NSObject *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  os_log_type_t type;
  _BYTE buf[40];
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t (*v79)(uint64_t, uint64_t, unsigned __int8 *, uint64_t);
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v5 = a3;
  v86 = *MEMORY[0x1E0C80C00];
  v70 = 0;
  v8 = nw_frame_unclaimed_bytes(a3, &v70);
  if (!v8)
  {
LABEL_44:
    nw_frame_finalize(v5);
    return;
  }
  v10 = v8;
  v68 = v8;
  v69 = 10;
  v11 = a1 + 736;
  v12 = *(_QWORD *)(a1 + 336);
  if ((*(_WORD *)(a1 + 736) & 4) != 0)
  {
    v17 = v5;
    v18 = a4;
    v19 = *(_QWORD *)(a1 + 240);
    if (a2 > 1)
    {
      v23 = v70;
      v78 = 0u;
      v80 = 0;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      v77 = 0u;
      memset(buf, 0, 32);
      *(_QWORD *)&buf[32] = a1;
      v74 = v19;
      v75 = a2;
      v76 = a2;
      v79 = parse_header_prefix;
      v24 = *(FILE **)(v12 + 544);
      if (v24)
      {
        v25 = v70;
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v24);
        fprintf(*(FILE **)(v12 + 544), "begin reading header block for stream %llu", v19);
        fputc(10, *(FILE **)(v12 + 544));
        v23 = v25;
      }
      v16 = qdec_header_process(v12 + 496, buf, &v68, v23, (_BYTE *)(a1 + 720), &v69);
    }
    else
    {
      v20 = *(FILE **)(v12 + 544);
      if (v20)
      {
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v20);
        fprintf(*(FILE **)(v12 + 544), "header block for stream %llu is too short (%zd byte%.*s)", v19, a2, a2 != 1, "s");
        fputc(10, *(FILE **)(v12 + 544));
      }
      *(_QWORD *)(v12 + 824) = 0x10AF00000000;
      *(_QWORD *)(v12 + 832) = 0;
      *(_QWORD *)(v12 + 840) = v19;
      v16 = 3;
    }
    v22 = *(_WORD *)(a1 + 736) & 0xFFFB | (*(unsigned __int8 *)(a1 + 738) << 16);
    *(_WORD *)v11 &= ~4u;
    *(_BYTE *)(a1 + 738) = BYTE2(v22);
    a4 = v18;
    v5 = v17;
  }
  else
  {
    v13 = v70;
    v14 = (_QWORD *)(v12 + 576);
    while (1)
    {
      v14 = (_QWORD *)*v14;
      if (!v14)
        break;
      if (v14[4] == a1)
      {
        v15 = *(FILE **)(v12 + 544);
        if (v15)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, v15);
          fprintf(*(FILE **)(v12 + 544), "continue reading header block for stream %llu", v14[5]);
          fputc(10, *(FILE **)(v12 + 544));
        }
        v16 = qdec_header_process(v12 + 496, v14, &v68, v13, (_BYTE *)(a1 + 720), &v69);
        goto LABEL_16;
      }
    }
    v21 = *(FILE **)(v12 + 544);
    if (v21)
    {
      fwrite("qdec: info: ", 0xCuLL, 1uLL, v21);
      fwrite("could not find header block to continue reading", 0x2FuLL, 1uLL, *(FILE **)(v12 + 544));
      fputc(10, *(FILE **)(v12 + 544));
    }
    v16 = 3;
LABEL_16:
    LOWORD(v22) = *(_WORD *)v11;
  }
  v26 = v68 - v10;
  if ((v22 & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v65 = __nwlog_obj();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        v66 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
        v67 = *(_QWORD *)(a1 + 240);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http3_stream_handle_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 636;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v66;
        *(_WORD *)&buf[38] = 2048;
        v74 = v67;
        LOWORD(v75) = 1024;
        *(_DWORD *)((char *)&v75 + 2) = v16;
        HIWORD(v75) = 1024;
        LODWORD(v76) = v26;
        _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> qpack returned status %d, consumed %u bytes", buf, 0x3Cu);
      }
    }
  }
  switch(v16)
  {
    case 0:
      v27 = *(void **)(a1 + 488);
      if (v27)
      {
        free(v27);
        *(_QWORD *)(a1 + 488) = 0;
      }
      *(_QWORD *)(a1 + 496) = 0;
      *(_WORD *)v11 |= 4u;
      if (!a4 || v70 > v26)
        goto LABEL_43;
      if (!v69)
      {
        *(_QWORD *)(a1 + 376) = v5;
LABEL_102:
        nw_http3_stream_received_fields_done(a1);
        return;
      }
      *(_BYTE *)(a1 + 634) = v69;
      v28 = *(_DWORD *)(a1 + 372);
      if (v28 > 8)
        goto LABEL_101;
      if (((1 << v28) & 0x1DD) != 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_need_section_ack";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v29;
        v30 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v71 = 0;
        if (!__nwlog_fault(v30, &type, &v71))
          goto LABEL_99;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v31 = __nwlog_obj();
          v32 = type;
          if (!os_log_type_enabled(v31, type))
            goto LABEL_99;
          v33 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_need_section_ack";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v33;
          v34 = "%{public}s Unexpected input state %d";
        }
        else if (v71)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v31 = __nwlog_obj();
          v32 = type;
          v53 = os_log_type_enabled(v31, type);
          if (backtrace_string)
          {
            if (v53)
            {
              v54 = *(_DWORD *)(a1 + 372);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http3_stream_need_section_ack";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v54;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s Unexpected input state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(backtrace_string);
            goto LABEL_99;
          }
          if (!v53)
          {
LABEL_99:
            if (v30)
              free(v30);
            goto LABEL_101;
          }
          v63 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_need_section_ack";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v63;
          v34 = "%{public}s Unexpected input state %d, no backtrace";
        }
        else
        {
          v31 = __nwlog_obj();
          v32 = type;
          if (!os_log_type_enabled(v31, type))
            goto LABEL_99;
          v62 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_need_section_ack";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v62;
          v34 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v31, v32, v34, buf, 0x12u);
        goto LABEL_99;
      }
      if (v28 == 1)
        *(_DWORD *)(a1 + 372) = 3;
      else
        *(_DWORD *)(a1 + 372) = 7;
LABEL_101:
      v64 = nw_http3_stream_send_section_ack(a1);
      *(_QWORD *)(a1 + 376) = v5;
      if ((v64 & 1) != 0)
        goto LABEL_102;
      return;
    case 1:
      nw_frame_claim(v5, v9, v26, 0);
      v35 = *(_DWORD *)(a1 + 372);
      if (v35 > 8)
        goto LABEL_78;
      if (((1 << v35) & 0x1DD) == 0)
      {
        if (v35 == 1)
          *(_DWORD *)(a1 + 372) = 2;
        else
          *(_DWORD *)(a1 + 372) = 6;
        goto LABEL_78;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_stream_received_fields_blocked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v36;
      v37 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v71 = 0;
      if (!__nwlog_fault(v37, &type, &v71))
        goto LABEL_76;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v38 = gLogObj;
        v39 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_76;
        v40 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v40;
        v41 = "%{public}s Unexpected input state %d";
LABEL_75:
        _os_log_impl(&dword_182FBE000, v38, v39, v41, buf, 0x12u);
        goto LABEL_76;
      }
      if (!v71)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_76;
        v51 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v51;
        v41 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
        goto LABEL_75;
      }
      v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = gLogObj;
      v39 = type;
      v47 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v46)
      {
        if (!v47)
          goto LABEL_76;
        v55 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v55;
        v41 = "%{public}s Unexpected input state %d, no backtrace";
        goto LABEL_75;
      }
      if (v47)
      {
        v48 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v48;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v46;
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s Unexpected input state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v46);
LABEL_76:
      if (v37)
        free(v37);
LABEL_78:
      v57 = *(_QWORD *)(a1 + 216);
      v56 = (uint64_t *)(a1 + 216);
      *(_QWORD *)(v5 + 32) = v57;
      v58 = (_QWORD *)(v57 + 40);
      if (v57)
        v59 = v58;
      else
        v59 = v56 + 1;
      *v59 = v5 + 32;
      *v56 = v5;
      *(_QWORD *)(v5 + 40) = v56;
      if (a4)
        v60 = 8;
      else
        v60 = 0;
      v61 = *(_WORD *)v11 & 0xFFF7 | (*(unsigned __int8 *)(v11 + 2) << 16);
      *(_WORD *)v11 = *(_WORD *)v11 & 0xFFF7 | v60;
      *(_BYTE *)(v11 + 2) = BYTE2(v61);
      return;
    case 2:
      if (v70 != v26)
      {
        nw_frame_finalize(v5);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http3_stream_handle_fields";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v70;
        v42 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v71 = 0;
        if (!__nwlog_fault(v42, &type, &v71))
          goto LABEL_90;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = gLogObj;
          v44 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_90;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http3_stream_handle_fields";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v70;
          v45 = "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u)";
        }
        else if (v71)
        {
          v49 = (char *)__nw_create_backtrace_string();
          v43 = __nwlog_obj();
          v44 = type;
          v50 = os_log_type_enabled(v43, type);
          if (v49)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http3_stream_handle_fields";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v26;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v70;
              *(_WORD *)&buf[24] = 2082;
              *(_QWORD *)&buf[26] = v49;
              _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u), dumping backtrace:%{public}s", buf, 0x22u);
            }
            free(v49);
            goto LABEL_90;
          }
          if (!v50)
          {
LABEL_90:
            if (v42)
              free(v42);
            return;
          }
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http3_stream_handle_fields";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v70;
          v45 = "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u), no backtrace";
        }
        else
        {
          v43 = __nwlog_obj();
          v44 = type;
          if (!os_log_type_enabled(v43, type))
            goto LABEL_90;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http3_stream_handle_fields";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v70;
          v45 = "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u), backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v43, v44, v45, buf, 0x18u);
        goto LABEL_90;
      }
      if (!a4)
        goto LABEL_44;
LABEL_43:
      nw_frame_finalize(v5);
      nw_http3_fail_all_streams(*(nw_protocol **)(a1 + 336), 512);
      return;
    case 3:
      nw_frame_finalize(v5);
      *(_QWORD *)(a1 + 264) = 270;
      nw_protocol_http3_stream_error((nw_protocol *)a1, (nw_protocol *)a1, 94);
      nw_protocol_http3_stream_disconnect((nw_protocol *)a1, (nw_protocol *)a1);
      return;
    default:
      return;
  }
}

uint64_t nw_http3_framer_get_input_frames(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _QWORD *a5, _QWORD *a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void);
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v27[2];
  uint64_t (*v28)(_QWORD *);
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;

  if (*(_QWORD *)(a1 + 16))
    return nw_http3_framer_deliver_http3_frame_body(a1, a2, a3, a4, a5, a6, a7, a9);
  v15 = MEMORY[0x1E0C809B0];
  v16 = *(_QWORD *)(a1 + 48);
  if (v16)
    goto LABEL_13;
LABEL_6:
  v17 = *(_QWORD *)(a1 + 40);
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(v17 + 24);
  if (!v18)
    return 0;
  v19 = *(unsigned int (**)(void))(v18 + 80);
  if (!v19)
    return 0;
  v33 = 0;
  v34 = &v33;
  if (!v19())
    return 0;
  if (v33)
  {
    **(_QWORD **)(a1 + 56) = v33;
    v20 = v34;
    *(_QWORD *)(v33 + 40) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v20;
  }
  v16 = *(_QWORD *)(a1 + 48);
LABEL_13:
  while (1)
  {
    v33 = 0;
    v34 = &v33;
    v35 = 0x2000000000;
    v36 = 0;
    v27[0] = v15;
    v27[1] = 0x40000000;
    v28 = (uint64_t (*)(_QWORD *))___ZL32nw_http3_framer_get_input_framesP15nw_http3_framerjjjPyS1_PbPjP16nw_frame_array_s_block_invoke;
    v29 = &unk_1E14A7EA8;
    v30 = &v33;
    v31 = a1;
    v32 = a8;
    do
    {
      if (!v16)
        break;
      v21 = *(_QWORD *)(v16 + 32);
      v22 = v28(v27);
      v16 = v21;
    }
    while ((v22 & 1) != 0);
    if (*((_BYTE *)v34 + 24))
      break;
    _Block_object_dispose(&v33, 8);
    v16 = *(_QWORD *)(a1 + 48);
    if (!v16)
      goto LABEL_6;
  }
  v23 = nw_http3_framer_deliver_http3_frame_body(a1, a2, a3, a4, a5, a6, a7, a9);
  _Block_object_dispose(&v33, 8);
  return v23;
}

uint64_t ___ZL37nw_http3_control_stream_process_inputP17nw_protocol_http3_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  size_t __n;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD **)(a2 + 40);
  if (v4)
  {
    *(_QWORD *)(v4 + 40) = v5;
    v5 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48) = v5;
  }
  *v5 = v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  LODWORD(__n) = 0;
  v6 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy((void *)(a1[6] + *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24)), v6, __n);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += __n;
  nw_frame_finalize(a2);
  return 1;
}

BOOL nw_http3_parse_settings(uint64_t a1, _DWORD *a2, unsigned int a3, __n128 a4)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  int v25;
  size_t v26;
  uint8_t *v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  FILE *v33;
  unsigned int v34;
  void *v35;
  _QWORD *v36;
  int v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *backtrace_string;
  _BOOL4 v43;
  NSObject *log;
  __n128 v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  unint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a3;
    v11 = (unsigned __int16 *)(a1 + 1373);
    v12 = a1 + 1289;
    v13 = -1;
    v14 = &unk_1ECD84000;
    a4.n128_u64[0] = 136447490;
    while (2)
    {
      if (a2)
      {
        v15 = *(unsigned __int8 *)a2;
        if (v15 > 0x3F)
        {
          if (v15 >> 6 == 2)
          {
            if (v10 < 4)
              return 0;
            v15 = bswap32(*a2 & 0xFFFFFF7F);
            v16 = 4;
            v17 = v10 - 4;
            if (v10 == 4)
              return 0;
          }
          else if (v15 >> 6 == 1)
          {
            if (v10 < 2)
              return 0;
            v15 = bswap32(*(_WORD *)a2 & 0xFFBF) >> 16;
            v16 = 2;
            v17 = v10 - 2;
            if (v10 == 2)
              return 0;
          }
          else
          {
            if (v10 < 8)
              return 0;
            v15 = bswap64(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFF3FLL);
            v16 = 8;
            v17 = v10 - 8;
            if (v10 == 8)
              return 0;
          }
        }
        else
        {
          v16 = 1;
          v17 = v10 - 1;
          if (v10 == 1)
            return 0;
        }
        v18 = (_DWORD *)((char *)a2 + v16);
        v19 = *((unsigned __int8 *)a2 + v16);
        if (v19 <= 0x3F)
        {
          v20 = 1;
LABEL_28:
          if (((*v11 | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
          {
            if (v14[1345])
            {
              v48 = v6;
              v49 = v5;
              v46 = (char *)v12;
              v47 = v13;
              v45 = a4;
              log = __nwlog_obj();
              v22 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
              a4 = v45;
              v14 = (_BYTE *)&unk_1ECD84000;
              v12 = (uint64_t)v46;
              v13 = v47;
              v6 = v48;
              v5 = v49;
              if (v22)
              {
                v23 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)buf = v45.n128_u32[0];
                v53 = "nw_http3_parse_settings";
                v54 = 2082;
                v55 = v46;
                v56 = 2080;
                v57 = " ";
                v58 = 1024;
                v59 = v23;
                v60 = 2048;
                v61 = v15;
                v62 = 2048;
                v63 = v19;
                _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> setting %llu = %llu", buf, 0x3Au);
                a4 = v45;
                v14 = (_BYTE *)&unk_1ECD84000;
                v12 = (uint64_t)v46;
                v13 = v47;
                v6 = v48;
                v5 = v49;
              }
            }
          }
          result = 0;
          switch(v15)
          {
            case 1uLL:
              if ((v9 & 1) != 0)
                return 0;
              v9 = 1;
              v6 = v19;
              goto LABEL_3;
            case 2uLL:
            case 3uLL:
            case 4uLL:
            case 5uLL:
              return result;
            case 6uLL:
              if ((v8 & 1) != 0)
                return 0;
              v8 = 1;
              v13 = v19;
              goto LABEL_3;
            case 7uLL:
              if ((v7 & 1) != 0)
                return 0;
              v7 = 1;
              v5 = v19;
              goto LABEL_3;
            default:
LABEL_3:
              a2 = (_DWORD *)((char *)v18 + v20);
              v10 = v17 - v20;
              if (v17 != v20)
                continue;
              goto LABEL_40;
          }
        }
        if (v19 >> 6 == 2)
        {
          if (v17 >= 4)
          {
            v19 = bswap32(*v18 & 0xFFFFFF7F);
            v20 = 4;
            goto LABEL_28;
          }
        }
        else if (v19 >> 6 == 1)
        {
          if (v17 >= 2)
          {
            v19 = bswap32(*(_WORD *)v18 & 0xFFBF) >> 16;
            v20 = 2;
            goto LABEL_28;
          }
        }
        else if (v17 >= 8)
        {
          v19 = bswap64(*(_QWORD *)v18 & 0xFFFFFFFFFFFFFF3FLL);
          v20 = 8;
          goto LABEL_28;
        }
        return 0;
      }
      break;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "_http_vle_decode";
    v38 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v38, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v39 = __nwlog_obj();
        v40 = type;
        if (!os_log_type_enabled(v39, type))
          goto LABEL_92;
        *(_DWORD *)buf = 136446210;
        v53 = "_http_vle_decode";
        v41 = "%{public}s called with null *buffer";
        goto LABEL_91;
      }
      if (!v50)
      {
        v39 = __nwlog_obj();
        v40 = type;
        if (!os_log_type_enabled(v39, type))
          goto LABEL_92;
        *(_DWORD *)buf = 136446210;
        v53 = "_http_vle_decode";
        v41 = "%{public}s called with null *buffer, backtrace limit exceeded";
        goto LABEL_91;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v39 = __nwlog_obj();
      v40 = type;
      v43 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "_http_vle_decode";
          v54 = 2082;
          v55 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_92;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "_http_vle_decode";
        v41 = "%{public}s called with null *buffer, no backtrace";
LABEL_91:
        _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
      }
    }
LABEL_92:
    if (v38)
      free(v38);
    return 0;
  }
  v6 = 0;
  v5 = 0;
  v13 = -1;
LABEL_40:
  if ((*(_WORD *)(a1 + 1373) & 0x100) == 0)
  {
    *(_QWORD *)(a1 + 992) = v6;
    *(_QWORD *)(a1 + 1008) = v13;
    *(_QWORD *)(a1 + 1000) = v5;
    if (v6 >= 0x10000)
      v24 = 0x10000;
    else
      v24 = v6;
    if (v24 > v6)
    {
      v25 = 22;
LABEL_46:
      *__error() = v25;
      v26 = 8;
LABEL_73:
      *(_QWORD *)(a1 + 1200) = dispatch_data_create(buf, v26, 0, 0);
      nw_http3_start_encoder_stream_if_needed(a1);
      nw_http3_encoder_stream_process_output(a1);
      return 1;
    }
    if ((_DWORD)v24)
    {
      buf[0] = 32;
      if (v24 > 0x1E)
      {
        buf[0] = 63;
        v30 = v24 - 31;
        if ((unint64_t)(v24 - 31) < 0x80)
        {
          v32 = 1;
          v31 = buf;
        }
        else
        {
          buf[1] = v30 | 0x80;
          if (v30 < 0x4000)
          {
            v31 = &buf[1];
            v30 >>= 7;
            v32 = 2;
          }
          else
          {
            v31 = &buf[2];
            buf[2] = (v30 >> 7) | 0x80;
            v30 >>= 14;
            v32 = 3;
          }
        }
        v27 = v31 + 2;
        buf[v32] = v30;
        if (v31 + 2 <= buf)
        {
          v25 = 55;
          goto LABEL_46;
        }
      }
      else
      {
        v27 = &buf[1];
        buf[0] = v24 | 0x20;
      }
      v28 = v6;
      v29 = v5;
      v33 = *(FILE **)(a1 + 456);
      if (v33)
      {
        fwrite("qenc: debug: ", 0xDuLL, 1uLL, v33);
        v26 = v27 - buf;
        fprintf(*(FILE **)(a1 + 456), "generated TSU=%u instruction %zd byte%.*s in size", v24, v26, v26 != 1, "s");
        fputc(10, *(FILE **)(a1 + 456));
      }
      else
      {
        v26 = v27 - buf;
      }
    }
    else
    {
      v28 = v6;
      v29 = v5;
      v26 = 0;
    }
    v34 = v24 / 0x60;
    if (v24 <= 0x4DF)
      v34 = 12;
    *(_DWORD *)(a1 + 484) = v34;
    v35 = malloc_type_malloc(8 * v34 + 8, 0x100004000313F17uLL);
    *(_QWORD *)(a1 + 472) = v35;
    if (v35)
    {
      if (v28 >= 0x20)
      {
        v36 = malloc_type_malloc(0x80uLL, 0xA004088793A40uLL);
        if (!v36)
        {
          free(*(void **)(a1 + 472));
          if (v26)
            goto LABEL_73;
          goto LABEL_77;
        }
        v36[2] = 0;
        v36[3] = v36 + 2;
        v36[4] = 0;
        v36[5] = v36 + 4;
        v36[6] = 0;
        v36[7] = v36 + 6;
        v36[8] = 0;
        v36[9] = v36 + 8;
        v36[10] = 0;
        v36[11] = v36 + 10;
        v36[12] = 0;
        v36[13] = v36 + 12;
        v36[14] = 0;
        v36[15] = v36 + 14;
        v37 = 2;
        *v36 = 0;
        v36[1] = v36;
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      *(_DWORD *)(a1 + 284) = v28 >> 5;
      *(_DWORD *)(a1 + 280) = v28;
      *(_DWORD *)(a1 + 276) = v24;
      *(_DWORD *)(a1 + 292) = v29;
      *(_QWORD *)(a1 + 328) = v36;
      *(_DWORD *)(a1 + 308) = v37;
      *(_QWORD *)(a1 + 456) = 0;
      *(_DWORD *)(a1 + 268) |= 2u;
    }
    if (v26)
      goto LABEL_73;
LABEL_77:
    *(_WORD *)(a1 + 1373) |= 0x2000u;
    return 1;
  }
  if (*(_QWORD *)(a1 + 992) > v6 || *(_QWORD *)(a1 + 1008) > v13)
    return 0;
  return *(_QWORD *)(a1 + 1000) <= v5;
}

void nw_http3_try_persist_0rtt_state(uint64_t a1)
{
  _BOOL8 v2;
  _BOOL8 v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (uuid_is_null((const unsigned __int8 *)(a1 + 848))
    && *(_QWORD *)(a1 + 1160)
    && *(_QWORD *)(a1 + 1168)
    && *(_QWORD *)(a1 + 1176))
  {
    v2 = nw_array_create();
    nw_array_append(v2, *(void **)(a1 + 1176));
    nw_array_append(v2, *(void **)(a1 + 1160));
    nw_array_append(v2, *(void **)(a1 + 1168));
    v3 = nw_array_create();
    nw_array_append(v3, (void *)v2);
    if (nw_storage_copy_shared_token[0] != -1)
      dispatch_once(nw_storage_copy_shared_token, &__block_literal_global_44834);
    v4 = (id)nw_storage_copy_shared_storage;
    v5 = *(void **)(a1 + 1096);
    if (v5)
      v6 = os_retain(v5);
    else
      v6 = 0;
    while (1)
    {
      v7 = v6;
      v8 = nw_endpoint_copy_parent_endpoint(v6);
      if (!v8)
        break;
      v6 = v8;
      if (v7)
        os_release(v7);
    }
    nw_storage_store_items(v4, (uint64_t)"h3_0rtt", (void *)v3, v6, *(void **)(a1 + 1256), &__block_literal_global_76);
    if (v6)
      os_release(v6);
    if (v4)
      os_release(v4);
    if (v2)
      os_release((void *)v2);
    if (v3)
      os_release((void *)v3);
  }
}

void nw_http3_notify_do_not_reuse(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  const char *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  const char *v25;
  NSObject *log;
  os_log_type_t v27[8];
  os_log_type_t v28;
  os_log_type_t v29[8];
  char *v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 880);
  if (v1)
  {
    v3 = (unsigned __int16 *)(a1 + 1373);
    v4 = (const char *)(a1 + 1289);
    do
    {
      v5 = v1;
      v1 = *(_QWORD *)(v1 + 544);
      if ((*(_WORD *)(v5 + 736) & 0x8000) != 0)
      {
        if (((*v3 | (*((unsigned __int8 *)v3 + 2) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v6 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v7 = *(_DWORD *)(a1 + 1280);
            v8 = *(_QWORD *)(v5 + 240);
            *(_DWORD *)buf = 136447234;
            v34 = "nw_http3_notify_do_not_reuse";
            v35 = 2082;
            v36 = v4;
            v37 = 2080;
            v38 = " ";
            v39 = 1024;
            v40 = v7;
            v41 = 2048;
            v42 = v8;
            _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Notifying stream %llu to not reuse the connection", buf, 0x30u);
          }
        }
        v9 = *(_QWORD *)(v5 + 24);
        if (!v9 || (v10 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v9 + 160)) == 0)
        {
          __nwlog_obj();
          v11 = *(const char **)(v5 + 16);
          if (!v11)
            v11 = "invalid";
          *(_DWORD *)buf = 136446466;
          v34 = "nw_http3_notify_do_not_reuse";
          v35 = 2082;
          v36 = v11;
          v12 = (const char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v31 = 0;
          v30 = (char *)v12;
          if (!__nwlog_fault(v12, &type, &v31))
            goto LABEL_35;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v13 = __nwlog_obj();
            v14 = type;
            *(_QWORD *)v27 = v13;
            if (os_log_type_enabled(v13, type))
            {
              v15 = *(const char **)(v5 + 16);
              if (!v15)
                v15 = "invalid";
              *(_DWORD *)buf = 136446466;
              v34 = "nw_http3_notify_do_not_reuse";
              v35 = 2082;
              v36 = v15;
              v16 = *(NSObject **)v27;
              v17 = v14;
              v18 = "%{public}s protocol %{public}s has invalid notify callback";
              goto LABEL_34;
            }
            goto LABEL_35;
          }
          if (v31)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            log = __nwlog_obj();
            v28 = type;
            v20 = os_log_type_enabled(log, type);
            if (backtrace_string)
            {
              if (v20)
              {
                v21 = *(const char **)(v5 + 16);
                if (!v21)
                  v21 = "invalid";
                *(_DWORD *)buf = 136446722;
                v34 = "nw_http3_notify_do_not_reuse";
                v35 = 2082;
                v36 = v21;
                v37 = 2082;
                v38 = backtrace_string;
                _os_log_impl(&dword_182FBE000, log, v28, "%{public}s protocol %{public}s has invalid notify callback, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(backtrace_string);
              goto LABEL_35;
            }
            if (!v20)
            {
LABEL_35:
              if (v30)
                free(v30);
              continue;
            }
            v25 = *(const char **)(v5 + 16);
            if (!v25)
              v25 = "invalid";
            *(_DWORD *)buf = 136446466;
            v34 = "nw_http3_notify_do_not_reuse";
            v35 = 2082;
            v36 = v25;
            v16 = log;
            v17 = v28;
            v18 = "%{public}s protocol %{public}s has invalid notify callback, no backtrace";
          }
          else
          {
            v22 = __nwlog_obj();
            v23 = type;
            *(_QWORD *)v29 = v22;
            if (!os_log_type_enabled(v22, type))
              goto LABEL_35;
            v24 = *(const char **)(v5 + 16);
            if (!v24)
              v24 = "invalid";
            *(_DWORD *)buf = 136446466;
            v34 = "nw_http3_notify_do_not_reuse";
            v35 = 2082;
            v36 = v24;
            v16 = *(NSObject **)v29;
            v17 = v23;
            v18 = "%{public}s protocol %{public}s has invalid notify callback, backtrace limit exceeded";
          }
LABEL_34:
          _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0x16u);
          goto LABEL_35;
        }
        v10(v5, v5, 12, 0, 0);
      }
    }
    while (v1);
  }
}

uint64_t ___ZL37nw_http3_control_stream_process_inputP17nw_protocol_http3_block_invoke_68(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  size_t __n;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD **)(a2 + 40);
  if (v4)
  {
    *(_QWORD *)(v4 + 40) = v5;
    v5 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48) = v5;
  }
  *v5 = v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  LODWORD(__n) = 0;
  v6 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy((void *)(a1[6] + *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24)), v6, __n);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += __n;
  nw_frame_finalize(a2);
  return 1;
}

void nw_http3_start_encoder_stream_if_needed(uint64_t a1)
{
  _OWORD *outbound;
  uint64_t v3;
  void (**v4)(_QWORD, _QWORD);
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  const char *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  const char *v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 1056))
  {
    outbound = (_OWORD *)nw_http3_uni_stream_create_outbound(a1, 2, 1);
    *(_QWORD *)(a1 + 1056) = outbound;
    *outbound = *(_OWORD *)a1;
    nw_protocol_set_input_handler(*(_QWORD *)(a1 + 1056), a1);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(void (***)(_QWORD, _QWORD))(v3 + 24);
      if (v4)
      {
        v5 = *v4;
        if (v5)
        {
          v5(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 1056));
          goto LABEL_6;
        }
      }
      __nwlog_obj();
      v8 = *(const char **)(v3 + 16);
      if (!v8)
        v8 = "invalid";
    }
    else
    {
      __nwlog_obj();
      v8 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http3_start_encoder_stream_if_needed";
    v34 = 2082;
    v35 = v8;
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v10, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_43;
        v13 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v13 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_start_encoder_stream_if_needed";
        v34 = 2082;
        v35 = v13;
        v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_42:
        _os_log_impl(&dword_182FBE000, v11, v12, v14, buf, 0x16u);
        goto LABEL_43;
      }
      if (!v30)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_43;
        v18 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v18 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_start_encoder_stream_if_needed";
        v34 = 2082;
        v35 = v18;
        v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16)
          goto LABEL_43;
        v19 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v19 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_http3_start_encoder_stream_if_needed";
        v34 = 2082;
        v35 = v19;
        v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_42;
      }
      if (v16)
      {
        v17 = "invalid";
        if (v3 && *(_QWORD *)(v3 + 16))
          v17 = *(const char **)(v3 + 16);
        *(_DWORD *)buf = 136446722;
        v33 = "nw_http3_start_encoder_stream_if_needed";
        v34 = 2082;
        v35 = v17;
        v36 = 2082;
        v37 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
    }
LABEL_43:
    if (v10)
      free(v10);
    if (!v3)
    {
      __nwlog_obj();
      v9 = "invalid";
      goto LABEL_47;
    }
LABEL_6:
    v6 = *(_QWORD *)(v3 + 24);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, _QWORD))(v6 + 24);
      if (v7)
      {
        v7(v3, *(_QWORD *)(a1 + 1056));
        return;
      }
    }
    __nwlog_obj();
    v9 = *(const char **)(v3 + 16);
    if (!v9)
      v9 = "invalid";
LABEL_47:
    *(_DWORD *)buf = 136446466;
    v33 = "nw_http3_start_encoder_stream_if_needed";
    v34 = 2082;
    v35 = v9;
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v20, &type, &v30))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_73;
      v23 = "invalid";
      if (v3 && *(_QWORD *)(v3 + 16))
        v23 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http3_start_encoder_stream_if_needed";
      v34 = 2082;
      v35 = v23;
      v24 = "%{public}s protocol %{public}s has invalid connect callback";
    }
    else if (v30)
    {
      v25 = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v26 = os_log_type_enabled(v21, type);
      if (v25)
      {
        if (v26)
        {
          v27 = "invalid";
          if (v3 && *(_QWORD *)(v3 + 16))
            v27 = *(const char **)(v3 + 16);
          *(_DWORD *)buf = 136446722;
          v33 = "nw_http3_start_encoder_stream_if_needed";
          v34 = 2082;
          v35 = v27;
          v36 = 2082;
          v37 = v25;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v25);
        goto LABEL_73;
      }
      if (!v26)
      {
LABEL_73:
        if (v20)
          free(v20);
        return;
      }
      v29 = "invalid";
      if (v3 && *(_QWORD *)(v3 + 16))
        v29 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http3_start_encoder_stream_if_needed";
      v34 = 2082;
      v35 = v29;
      v24 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }
    else
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_73;
      v28 = "invalid";
      if (v3 && *(_QWORD *)(v3 + 16))
        v28 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http3_start_encoder_stream_if_needed";
      v34 = 2082;
      v35 = v28;
      v24 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v21, v22, v24, buf, 0x16u);
    goto LABEL_73;
  }
}

void nw_http3_encoder_stream_process_output(uint64_t a1)
{
  _WORD *v2;
  NSObject *v3;
  size_t size;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(_QWORD, uint64_t, size_t, size_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *v19;
  _BOOL4 v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  const char *v27;
  uint64_t v28;
  os_log_type_t v29;
  int v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  int is_metadata_complete;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  os_log_type_t v44;
  int v45;
  int v46;
  char *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  NSObject *v63;
  _BOOL4 v64;
  uint64_t v65;
  const char *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  const char *v80;
  char *v81;
  NSObject *v82;
  _BOOL4 v83;
  uint64_t v84;
  const char *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  NSObject *v92;
  os_log_type_t v93;
  const char *v94;
  char *backtrace_string;
  _BOOL4 v96;
  const char *v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  const char *v101;
  const char *v102;
  char *v103;
  _BOOL4 v104;
  const char *v105;
  const char *v106;
  const char *v107;
  os_log_type_t v108;
  os_log_type_t v109;
  char v110;
  os_log_type_t type;
  _QWORD v112[2];
  uint64_t (*v113)(_QWORD *);
  void *v114;
  os_log_type_t *v115;
  _BYTE *v116;
  uint64_t v117;
  os_log_type_t v118[8];
  os_log_type_t *v119;
  uint64_t v120;
  int v121;
  uint8_t v122[4];
  const char *v123;
  __int16 v124;
  void *v125;
  __int16 v126;
  char *v127;
  _BYTE buf[32];
  uint64_t (*v129)();
  _QWORD v130[5];

  v130[2] = *MEMORY[0x1E0C80C00];
  v2 = (_WORD *)(a1 + 1373);
  if ((*(_WORD *)(a1 + 1373) & 0x2000) != 0)
    goto LABEL_28;
  v3 = *(NSObject **)(a1 + 1200);
  if (v3)
  {
    *(_QWORD *)v118 = 0;
    v119 = v118;
    v121 = 0;
    v120 = 0x2000000000;
    size = dispatch_data_get_size(v3);
    v121 = size;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3802000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__60023;
    v129 = __Block_byref_object_dispose__60024;
    v130[0] = 0;
    v130[1] = v130;
    v5 = *(_QWORD *)(a1 + 1056);
    if (!v5)
      goto LABEL_164;
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
      goto LABEL_164;
    v7 = *(unsigned int (**)(_QWORD, uint64_t, size_t, size_t, uint64_t))(v6 + 88);
    if (!v7 || !v7(*(_QWORD *)(a1 + 1056), a1, size, size, 0xFFFFFFFFLL))
      goto LABEL_164;
    v112[0] = MEMORY[0x1E0C809B0];
    v112[1] = 0x40000000;
    v113 = (uint64_t (*)(_QWORD *))___ZL38nw_http3_encoder_stream_process_outputP17nw_protocol_http3_block_invoke;
    v114 = &unk_1E14A80F8;
    v115 = v118;
    v116 = buf;
    v117 = a1;
    v8 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    do
    {
      if (!v8)
        break;
      v9 = *(_QWORD *)(v8 + 32);
      v10 = v113(v112);
      v8 = v9;
    }
    while ((v10 & 1) != 0);
    if (*(_QWORD *)(a1 + 1200))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)v122 = 136446210;
      v123 = "nw_http3_encoder_stream_process_output";
      v11 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v110 = 0;
      if (!__nwlog_fault(v11, &type, &v110))
        goto LABEL_162;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = gLogObj;
        v13 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_162;
        *(_DWORD *)v122 = 136446210;
        v123 = "nw_http3_encoder_stream_process_output";
        v14 = "%{public}s Not enough space for sdtc";
      }
      else if (v110)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = gLogObj;
        v13 = type;
        v96 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v96)
          {
            *(_DWORD *)v122 = 136446466;
            v123 = "nw_http3_encoder_stream_process_output";
            v124 = 2082;
            v125 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Not enough space for sdtc, dumping backtrace:%{public}s", v122, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_162;
        }
        if (!v96)
        {
LABEL_162:
          if (v11)
            free(v11);
LABEL_164:
          _Block_object_dispose(buf, 8);
          _Block_object_dispose(v118, 8);
          return;
        }
        *(_DWORD *)v122 = 136446210;
        v123 = "nw_http3_encoder_stream_process_output";
        v14 = "%{public}s Not enough space for sdtc, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = gLogObj;
        v13 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_162;
        *(_DWORD *)v122 = 136446210;
        v123 = "nw_http3_encoder_stream_process_output";
        v14 = "%{public}s Not enough space for sdtc, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v12, v13, v14, v122, 0xCu);
      goto LABEL_162;
    }
    v21 = *(_QWORD *)(v5 + 24);
    if (v21)
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v21 + 96);
      if (v22)
      {
        v22(v5, *(_QWORD *)&buf[8] + 40);
LABEL_27:
        *v2 |= 0x2000u;
        _Block_object_dispose(buf, 8);
        _Block_object_dispose(v118, 8);
LABEL_28:
        v23 = *(_QWORD *)(a1 + 928);
        while (1)
        {
          if (!v23)
            return;
          v25 = *(_DWORD *)(v23 + 368);
          if (v25 != 2)
            break;
          is_metadata_complete = nw_frame_is_metadata_complete(*(_QWORD *)(v23 + 384));
          if (nw_http3_stream_send_fields(v23, is_metadata_complete))
          {
            v35 = *(_QWORD *)(v23 + 48);
            if (!v35
              || (v36 = *(_QWORD *)(v35 + 24)) == 0
              || (v37 = *(void (**)(uint64_t, uint64_t))(v36 + 72)) == 0)
            {
              __nwlog_obj();
              v55 = *(_QWORD *)(v23 + 48);
              if (v55)
              {
                v56 = *(const char **)(v55 + 16);
                if (!v56)
                  v56 = "invalid";
              }
              else
              {
                v56 = "invalid";
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v56;
              v57 = (const char *)_os_log_send_and_compose_impl();
              v118[0] = OS_LOG_TYPE_ERROR;
              v122[0] = 0;
              if (__nwlog_fault(v57, v118, v122))
              {
                if (v118[0] != OS_LOG_TYPE_FAULT)
                {
                  if (v122[0])
                  {
                    v62 = (char *)__nw_create_backtrace_string();
                    v63 = __nwlog_obj();
                    v108 = v118[0];
                    v64 = os_log_type_enabled(v63, v118[0]);
                    if (v62)
                    {
                      if (v64)
                      {
                        v65 = *(_QWORD *)(v23 + 48);
                        if (v65)
                        {
                          v66 = *(const char **)(v65 + 16);
                          if (!v66)
                            v66 = "invalid";
                        }
                        else
                        {
                          v66 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v66;
                        *(_WORD *)&buf[22] = 2082;
                        *(_QWORD *)&buf[24] = v62;
                        _os_log_impl(&dword_182FBE000, v63, v108, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
                      }
                      free(v62);
                      goto LABEL_126;
                    }
                    if (!v64)
                      goto LABEL_126;
                    v71 = *(_QWORD *)(v23 + 48);
                    if (v71)
                    {
                      v72 = *(const char **)(v71 + 16);
                      if (!v72)
                        v72 = "invalid";
                    }
                    else
                    {
                      v72 = "invalid";
                    }
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v72;
                    v73 = v63;
                    v74 = v108;
                    v75 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
                  }
                  else
                  {
                    v67 = __nwlog_obj();
                    v68 = v118[0];
                    if (!os_log_type_enabled(v67, v118[0]))
                      goto LABEL_126;
                    v69 = *(_QWORD *)(v23 + 48);
                    if (v69)
                    {
                      v70 = *(const char **)(v69 + 16);
                      if (!v70)
                        v70 = "invalid";
                    }
                    else
                    {
                      v70 = "invalid";
                    }
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v70;
                    v73 = v67;
                    v74 = v68;
                    v75 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
                  }
LABEL_125:
                  _os_log_impl(&dword_182FBE000, v73, v74, v75, buf, 0x16u);
                  goto LABEL_126;
                }
                v58 = __nwlog_obj();
                v59 = v118[0];
                if (os_log_type_enabled(v58, v118[0]))
                {
                  v60 = *(_QWORD *)(v23 + 48);
                  if (v60)
                  {
                    v61 = *(const char **)(v60 + 16);
                    if (!v61)
                      v61 = "invalid";
                  }
                  else
                  {
                    v61 = "invalid";
                  }
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v61;
                  v73 = v58;
                  v74 = v59;
                  v75 = "%{public}s protocol %{public}s has invalid output_available callback";
                  goto LABEL_125;
                }
              }
LABEL_126:
              if (!v57)
                goto LABEL_56;
              v47 = (char *)v57;
LABEL_55:
              free(v47);
              goto LABEL_56;
            }
            v37(v35, v23);
          }
LABEL_56:
          v48 = *(unsigned __int16 *)(v23 + 736);
          if ((v48 & 0x400) != 0 && !*(_QWORD *)(v23 + 528) && !*(_BYTE *)(v23 + 634) && !*(_BYTE *)(v23 + 635))
          {
            v49 = v48 & 0xFFFFFBFF | (*(unsigned __int8 *)(v23 + 738) << 16);
            *(_WORD *)(v23 + 736) = v48 & 0xFBFF;
            *(_BYTE *)(v23 + 738) = BYTE2(v49);
            v50 = *(_QWORD *)(v23 + 32);
            if (!v50
              || (v51 = *(_QWORD *)(v50 + 24)) == 0
              || (v52 = *(void (**)(uint64_t, uint64_t))(v51 + 32)) == 0)
            {
              __nwlog_obj();
              v53 = *(_QWORD *)(v23 + 32);
              if (v53)
              {
                v54 = *(const char **)(v53 + 16);
                if (!v54)
                  v54 = "invalid";
              }
              else
              {
                v54 = "invalid";
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v54;
              v76 = (char *)_os_log_send_and_compose_impl();
              v118[0] = OS_LOG_TYPE_ERROR;
              v122[0] = 0;
              if (!__nwlog_fault(v76, v118, v122))
                goto LABEL_143;
              if (v118[0] == OS_LOG_TYPE_FAULT)
              {
                v77 = __nwlog_obj();
                v78 = v118[0];
                if (os_log_type_enabled(v77, v118[0]))
                {
                  v79 = *(_QWORD *)(v23 + 32);
                  if (v79)
                  {
                    v80 = *(const char **)(v79 + 16);
                    if (!v80)
                      v80 = "invalid";
                  }
                  else
                  {
                    v80 = "invalid";
                  }
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v80;
                  v92 = v77;
                  v93 = v78;
                  v94 = "%{public}s protocol %{public}s has invalid disconnect callback";
                  goto LABEL_142;
                }
                goto LABEL_143;
              }
              if (v122[0])
              {
                v81 = (char *)__nw_create_backtrace_string();
                v82 = __nwlog_obj();
                v109 = v118[0];
                v83 = os_log_type_enabled(v82, v118[0]);
                if (v81)
                {
                  if (v83)
                  {
                    v84 = *(_QWORD *)(v23 + 32);
                    if (v84)
                    {
                      v85 = *(const char **)(v84 + 16);
                      if (!v85)
                        v85 = "invalid";
                    }
                    else
                    {
                      v85 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v85;
                    *(_WORD *)&buf[22] = 2082;
                    *(_QWORD *)&buf[24] = v81;
                    _os_log_impl(&dword_182FBE000, v82, v109, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }
                  free(v81);
                  goto LABEL_143;
                }
                if (!v83)
                {
LABEL_143:
                  if (v76)
                    free(v76);
                  goto LABEL_30;
                }
                v90 = *(_QWORD *)(v23 + 32);
                if (v90)
                {
                  v91 = *(const char **)(v90 + 16);
                  if (!v91)
                    v91 = "invalid";
                }
                else
                {
                  v91 = "invalid";
                }
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v91;
                v92 = v82;
                v93 = v109;
                v94 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
              }
              else
              {
                v86 = __nwlog_obj();
                v87 = v118[0];
                if (!os_log_type_enabled(v86, v118[0]))
                  goto LABEL_143;
                v88 = *(_QWORD *)(v23 + 32);
                if (v88)
                {
                  v89 = *(const char **)(v88 + 16);
                  if (!v89)
                    v89 = "invalid";
                }
                else
                {
                  v89 = "invalid";
                }
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v89;
                v92 = v86;
                v93 = v87;
                v94 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
              }
LABEL_142:
              _os_log_impl(&dword_182FBE000, v92, v93, v94, buf, 0x16u);
              goto LABEL_143;
            }
            v52(v50, v23);
          }
LABEL_30:
          v24 = v23 == *(_QWORD *)(a1 + 928);
          v23 = *(_QWORD *)(a1 + 928);
          if (v24)
            return;
        }
        if (v25)
          goto LABEL_56;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v26 = *(_DWORD *)(v23 + 368);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        v27 = (const char *)_os_log_send_and_compose_impl();
        v118[0] = OS_LOG_TYPE_ERROR;
        v122[0] = 0;
        if (__nwlog_fault(v27, v118, v122))
        {
          if (v118[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v28 = gLogObj;
            v29 = v118[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, v118[0]))
              goto LABEL_53;
            v30 = *(_DWORD *)(v23 + 368);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v30;
            v31 = v28;
            v32 = v29;
            v33 = "%{public}s Unexpected output state %d";
LABEL_52:
            _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0x12u);
            goto LABEL_53;
          }
          if (!v122[0])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v43 = gLogObj;
            v44 = v118[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, v118[0]))
              goto LABEL_53;
            v45 = *(_DWORD *)(v23 + 368);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v45;
            v31 = v43;
            v32 = v44;
            v33 = "%{public}s Unexpected output state %d, backtrace limit exceeded";
            goto LABEL_52;
          }
          v38 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = gLogObj;
          v40 = v118[0];
          v41 = os_log_type_enabled((os_log_t)gLogObj, v118[0]);
          if (!v38)
          {
            if (!v41)
              goto LABEL_53;
            v46 = *(_DWORD *)(v23 + 368);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v46;
            v31 = v39;
            v32 = v40;
            v33 = "%{public}s Unexpected output state %d, no backtrace";
            goto LABEL_52;
          }
          if (v41)
          {
            v42 = *(_DWORD *)(v23 + 368);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_http3_stream_encoder_stream_output_available";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v38;
            _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s Unexpected output state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(v38);
        }
LABEL_53:
        if (v27)
        {
          v47 = (char *)v27;
          goto LABEL_55;
        }
        goto LABEL_56;
      }
    }
    __nwlog_obj();
    v97 = *(const char **)(v5 + 16);
    if (!v97)
      v97 = "invalid";
    *(_DWORD *)v122 = 136446466;
    v123 = "nw_http3_encoder_stream_process_output";
    v124 = 2082;
    v125 = (void *)v97;
    v98 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v110 = 0;
    if (__nwlog_fault(v98, &type, &v110))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v99 = __nwlog_obj();
        v100 = type;
        if (!os_log_type_enabled(v99, type))
          goto LABEL_190;
        v101 = *(const char **)(v5 + 16);
        if (!v101)
          v101 = "invalid";
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http3_encoder_stream_process_output";
        v124 = 2082;
        v125 = (void *)v101;
        v102 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
        goto LABEL_189;
      }
      if (!v110)
      {
        v99 = __nwlog_obj();
        v100 = type;
        if (!os_log_type_enabled(v99, type))
          goto LABEL_190;
        v106 = *(const char **)(v5 + 16);
        if (!v106)
          v106 = "invalid";
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http3_encoder_stream_process_output";
        v124 = 2082;
        v125 = (void *)v106;
        v102 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_189;
      }
      v103 = (char *)__nw_create_backtrace_string();
      v99 = __nwlog_obj();
      v100 = type;
      v104 = os_log_type_enabled(v99, type);
      if (v103)
      {
        if (v104)
        {
          v105 = *(const char **)(v5 + 16);
          if (!v105)
            v105 = "invalid";
          *(_DWORD *)v122 = 136446722;
          v123 = "nw_http3_encoder_stream_process_output";
          v124 = 2082;
          v125 = (void *)v105;
          v126 = 2082;
          v127 = v103;
          _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", v122, 0x20u);
        }
        free(v103);
        goto LABEL_190;
      }
      if (v104)
      {
        v107 = *(const char **)(v5 + 16);
        if (!v107)
          v107 = "invalid";
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http3_encoder_stream_process_output";
        v124 = 2082;
        v125 = (void *)v107;
        v102 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_189:
        _os_log_impl(&dword_182FBE000, v99, v100, v102, v122, 0x16u);
      }
    }
LABEL_190:
    if (v98)
      free(v98);
    goto LABEL_27;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_encoder_stream_process_output";
  v15 = (char *)_os_log_send_and_compose_impl();
  v118[0] = OS_LOG_TYPE_ERROR;
  v122[0] = 0;
  if (__nwlog_fault(v15, v118, v122))
  {
    if (v118[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      v17 = v118[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v118[0]))
        goto LABEL_157;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_encoder_stream_process_output";
      v18 = "%{public}s Attempting to send on encoder stream before initial sdtc";
      goto LABEL_156;
    }
    if (!v122[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      v17 = v118[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v118[0]))
        goto LABEL_157;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_encoder_stream_process_output";
      v18 = "%{public}s Attempting to send on encoder stream before initial sdtc, backtrace limit exceeded";
      goto LABEL_156;
    }
    v19 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = gLogObj;
    v17 = v118[0];
    v20 = os_log_type_enabled((os_log_t)gLogObj, v118[0]);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_encoder_stream_process_output";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Attempting to send on encoder stream before initial sdtc, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      goto LABEL_157;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_encoder_stream_process_output";
      v18 = "%{public}s Attempting to send on encoder stream before initial sdtc, no backtrace";
LABEL_156:
      _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
    }
  }
LABEL_157:
  if (v15)
    free(v15);
}

BOOL ___ZL38nw_http3_encoder_stream_process_outputP17nw_protocol_http3_block_invoke(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  NSObject *v5;
  _BOOL8 v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char *v17;
  _BOOL4 v18;
  char v20;
  unsigned int offset;
  os_log_type_t offset_7;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_encoder_stream_process_output_block_invoke";
    v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          v10 = "%{public}s Encoder stream does not support external data";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
        }
      }
      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_http3_encoder_stream_process_output_block_invoke";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Encoder stream does not support external data, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          v10 = "%{public}s Encoder stream does not support external data, no backtrace";
          goto LABEL_31;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          v10 = "%{public}s Encoder stream does not support external data, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }
LABEL_32:
    if (v7)
      free(v7);
    return 0;
  }
  offset = 0;
  nw_frame_set_external_data(a2, *(dispatch_data_t *)(a1[6] + 1200), &offset);
  v4 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v5 = *(NSObject **)(a1[6] + 1200);
  v6 = offset < v4;
  if (offset < v4)
  {
    *(_QWORD *)(a1[6] + 1200) = dispatch_data_create_subrange(*(dispatch_data_t *)(a1[6] + 1200), offset, 0xFFFFFFFFFFFFFFFFLL);
    if (v5)
      dispatch_release(v5);
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) -= offset;
    return v6;
  }
  if (v5)
  {
    dispatch_release(*(dispatch_object_t *)(a1[6] + 1200));
    *(_QWORD *)(a1[6] + 1200) = 0;
  }
  if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48) + 8) != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_encoder_stream_process_output_block_invoke";
    v11 = (char *)_os_log_send_and_compose_impl();
    offset_7 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &offset_7, &v20))
      goto LABEL_41;
    if (offset_7 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_encoder_stream_process_output_block_invoke";
      v14 = "%{public}s Too much space for sdtc";
    }
    else if (v20)
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      v18 = os_log_type_enabled((os_log_t)gLogObj, offset_7);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          v25 = 2082;
          v26 = v17;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Too much space for sdtc, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        goto LABEL_41;
      }
      if (!v18)
      {
LABEL_41:
        if (v11)
          free(v11);
        return v6;
      }
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_encoder_stream_process_output_block_invoke";
      v14 = "%{public}s Too much space for sdtc, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_encoder_stream_process_output_block_invoke";
      v14 = "%{public}s Too much space for sdtc, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_41;
  }
  return v6;
}

BOOL nw_http3_stream_send_fields(uint64_t a1, int a2)
{
  unsigned int v3;
  int v4;
  _WORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  NSObject *v12;
  _BOOL8 result;
  int v14;
  _QWORD *v15;
  int v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  id v36;
  NSObject *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  const char *v57;
  id v58;
  id v59;
  int status_code;
  int v61;
  unsigned int v62;
  void *v63;
  id v64;
  int has_method;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *v71;
  NSObject *v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(void);
  uint64_t v79;
  int v80;
  char *v81;
  _BOOL4 v82;
  id v83;
  char *v84;
  _BOOL4 v85;
  id v86;
  char *backtrace_string;
  _BOOL4 v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  FILE *v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  const char *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  _BOOL4 v106;
  FILE *v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  _BOOL4 v111;
  size_t v112;
  size_t v113;
  NSObject *v114;
  size_t v115;
  dispatch_data_t subrange;
  NSObject *v117;
  char *v118;
  _BOOL4 v119;
  uint8_t *v120;
  NSObject *v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  int v135;
  unsigned int v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char *v141;
  NSObject *v142;
  os_log_type_t v143;
  const char *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t *v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  char *v166;
  _BOOL4 v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t);
  int v172;
  unsigned int v173;
  NSObject *v174;
  int v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  int v180;
  _QWORD *v181;
  int v182;
  uint64_t v183;
  const char *v184;
  const char *v185;
  void *v186;
  NSObject *v187;
  os_log_type_t v188;
  uint64_t v189;
  const char *v190;
  const char *v191;
  id v192;
  char *v193;
  NSObject *v194;
  os_log_type_t v195;
  _BOOL4 v196;
  uint64_t v197;
  const char *v198;
  const char *v199;
  char *v200;
  NSObject *v201;
  os_log_type_t v202;
  const char *v203;
  char *v204;
  _BOOL4 v205;
  char *v206;
  _BOOL4 v207;
  uint64_t v208;
  const char *v209;
  const char *v210;
  const char *v211;
  uint64_t v212;
  const char *v213;
  const char *v214;
  char *v215;
  NSObject *v216;
  os_log_type_t v217;
  uint64_t v218;
  const char *v219;
  const char *v220;
  const char *v221;
  char *v222;
  NSObject *v223;
  os_log_type_t v224;
  const char *v225;
  NSObject *v226;
  _BOOL4 v227;
  int v228;
  _QWORD *v229;
  id v230;
  uint64_t v231;
  const char *v232;
  const char *v233;
  char *v234;
  NSObject *v235;
  os_log_type_t v236;
  uint64_t v237;
  const char *v238;
  const char *v239;
  const char *v240;
  id v241;
  uint64_t v242;
  const char *v243;
  const char *v244;
  char *v245;
  NSObject *v246;
  os_log_type_t v247;
  uint64_t v248;
  const char *v249;
  const char *v250;
  const char *v251;
  uint64_t v252;
  const char *v253;
  const char *v254;
  uint64_t v255;
  const char *v256;
  const char *v257;
  void *v258;
  NSObject *v259;
  os_log_type_t v260;
  uint64_t v261;
  const char *v262;
  const char *v263;
  id v264;
  char *v265;
  NSObject *v266;
  os_log_type_t v267;
  _BOOL4 v268;
  uint64_t v269;
  const char *v270;
  const char *v271;
  uint64_t v272;
  const char *v273;
  const char *v274;
  const char *v275;
  uint64_t v276;
  const char *v277;
  const char *v278;
  char *v279;
  _BOOL4 v280;
  uint64_t v281;
  const char *v282;
  const char *v283;
  char *v284;
  _BOOL4 v285;
  char *v286;
  _BOOL4 v287;
  uint64_t v288;
  const char *v289;
  const char *v290;
  char *v291;
  _BOOL4 v292;
  uint64_t v293;
  const char *v294;
  const char *v295;
  char *v296;
  _BOOL4 v297;
  uint64_t v298;
  const char *v299;
  const char *v300;
  char *v301;
  NSObject *v302;
  os_log_type_t v303;
  const char *v304;
  const char *v305;
  uint64_t v306;
  const char *v307;
  const char *v308;
  uint64_t v309;
  const char *v310;
  const char *v311;
  uint64_t v312;
  const char *v313;
  const char *v314;
  uint64_t v315;
  const char *v316;
  const char *v317;
  char *v318;
  _BOOL4 v319;
  uint64_t v320;
  const char *v321;
  const char *v322;
  NSObject *v323;
  os_log_type_t v324;
  const char *v325;
  char *v326;
  NSObject *v327;
  _BOOL4 v328;
  const char *v329;
  uint64_t v330;
  const char *v331;
  const char *v332;
  uint64_t v333;
  const char *v334;
  const char *v335;
  uint64_t v336;
  const char *v337;
  const char *v338;
  uint64_t v339;
  const char *v340;
  const char *v341;
  uint64_t v342;
  const char *v343;
  char *v344;
  _BOOL4 v345;
  uint64_t v346;
  const char *v347;
  const char *v348;
  uint64_t v349;
  const char *v350;
  uint64_t v351;
  const char *v352;
  const char *v353;
  NSObject *v354;
  os_log_type_t v355;
  uint32_t v356;
  const char *v357;
  id log;
  NSObject *loga;
  id v360;
  _QWORD v361[2];
  uint64_t (*v362)(_QWORD *);
  void *v363;
  uint64_t *v364;
  _BYTE *v365;
  uint64_t v366;
  _QWORD v367[2];
  uint64_t (*v368)(_QWORD *);
  void *v369;
  uint64_t *v370;
  _BYTE *v371;
  uint64_t v372;
  _QWORD v373[5];
  _QWORD v374[5];
  char v375;
  os_log_type_t v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t alloc;
  _QWORD v385[4];
  _QWORD v386[4];
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD v395[4];
  os_log_type_t v396[8];
  os_log_type_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  _BYTE type[24];
  __n128 (*v405)(uint64_t, uint64_t);
  uint64_t (*v406)();
  _DWORD *v407[3];
  uint8_t v408[4];
  const char *v409;
  __int16 v410;
  char *v411;
  os_log_type_t __src[22];
  _BYTE buf[24];
  __n128 (*v414)(uint64_t, uint64_t);
  os_log_type_t *v415;
  _QWORD *v416;
  _BYTE v417[24];
  uint64_t *v418;
  uint64_t *v419;
  _BYTE *v420;
  uint64_t *v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;

  v425 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int16 *)(a1 + 736) | (*(unsigned __int8 *)(a1 + 738) << 16);
  v4 = (v3 >> 11) & 1;
  if (!gLogDatapath)
    LOBYTE(v4) = 1;
  if ((v3 & 0x40000) == 0)
  {
    if ((v4 & 1) == 0)
    {
      v179 = __nwlog_obj();
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
      {
        v180 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
        v181 = *(_QWORD **)(a1 + 240);
        v182 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 636;
        *(_WORD *)&buf[22] = 2080;
        v414 = (__n128 (*)(uint64_t, uint64_t))" ";
        LOWORD(v415) = 1024;
        *(_DWORD *)((char *)&v415 + 2) = v180;
        HIWORD(v415) = 2048;
        v416 = v181;
        *(_WORD *)v417 = 1024;
        *(_DWORD *)&v417[2] = v182;
        _os_log_impl(&dword_182FBE000, v179, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called, state %u", buf, 0x36u);
      }
    }
    v6 = (_WORD *)(a1 + 736);
    if (*(_QWORD *)(a1 + 520))
      goto LABEL_6;
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v17 = (id)nw_protocol_copy_http_definition_http_definition;
    v18 = nw_frame_copy_metadata_for_protocol(*(_QWORD *)(a1 + 384), (uint64_t)v17);
    v19 = v18;
    if (!v18)
      goto LABEL_193;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 336) + 1373) & 1) != 0)
    {
      v20 = nw_http_metadata_copy_response(v18);
      if (!v20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        v21 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        LOBYTE(v400) = 0;
        if (!__nwlog_fault(v21, type, &v400))
          goto LABEL_191;
        if (type[0] == 17)
        {
          v22 = __nwlog_obj();
          v23 = type[0];
          if (!os_log_type_enabled(v22, (os_log_type_t)type[0]))
            goto LABEL_191;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          v24 = "%{public}s did not find response on frame";
          goto LABEL_190;
        }
        if (!(_BYTE)v400)
        {
          v22 = __nwlog_obj();
          v23 = type[0];
          if (!os_log_type_enabled(v22, (os_log_type_t)type[0]))
            goto LABEL_191;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          v24 = "%{public}s did not find response on frame, backtrace limit exceeded";
          goto LABEL_190;
        }
        v86 = v17;
        backtrace_string = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type[0];
        v88 = os_log_type_enabled(v22, (os_log_type_t)type[0]);
        if (backtrace_string)
        {
          if (v88)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s did not find response on frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          v17 = v86;
          if (v21)
            goto LABEL_192;
          goto LABEL_193;
        }
        v17 = v86;
        if (v88)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          v24 = "%{public}s did not find response on frame, no backtrace";
LABEL_190:
          _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
        }
LABEL_191:
        if (v21)
LABEL_192:
          free(v21);
LABEL_193:
        if ((*v6 & 0x800) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v121 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            v122 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
            v123 = *(_QWORD **)(a1 + 240);
            v124 = *(_QWORD *)(a1 + 384);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 636;
            *(_WORD *)&buf[22] = 2080;
            v414 = (__n128 (*)(uint64_t, uint64_t))" ";
            LOWORD(v415) = 1024;
            *(_DWORD *)((char *)&v415 + 2) = v122;
            HIWORD(v415) = 2048;
            v416 = v123;
            *(_WORD *)v417 = 2048;
            *(_QWORD *)&v417[2] = v124;
            _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> Invalid http metadata found in frame %p", buf, 0x3Au);
          }
        }
        v125 = *(_QWORD *)(a1 + 48);
        if (v125)
        {
          v126 = *(_QWORD *)(v125 + 24);
          if (v126)
          {
            v127 = *(void (**)(uint64_t, uint64_t))(v126 + 56);
            if (v127)
            {
              v127(v125, a1);
              v128 = *(_QWORD *)(a1 + 48);
              if (!v128)
                goto LABEL_401;
LABEL_200:
              v129 = *(_QWORD *)(v128 + 24);
              if (v129)
              {
                v130 = *(void (**)(uint64_t, uint64_t))(v129 + 48);
                if (v130)
                {
                  v130(v128, a1);
                  v80 = 1;
                  if (!v19)
                    goto LABEL_304;
                  goto LABEL_303;
                }
              }
LABEL_401:
              __nwlog_obj();
              v255 = *(_QWORD *)(a1 + 48);
              v256 = "invalid";
              if (v255)
              {
                v257 = *(const char **)(v255 + 16);
                if (v257)
                  v256 = v257;
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v256;
              v258 = (void *)_os_log_send_and_compose_impl();
              type[0] = 16;
              LOBYTE(v400) = 0;
              if (!__nwlog_fault((const char *)v258, type, &v400))
              {
LABEL_431:
                if (v258)
                  free(v258);
                v80 = 1;
                if (!v19)
                {
LABEL_304:
                  if (v17)
                    os_release(v17);
                  if (v80)
                    return 0;
LABEL_6:
                  v7 = *(NSObject **)(a1 + 528);
                  if (!v7)
                    goto LABEL_219;
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = buf;
                  *(_QWORD *)&buf[16] = 0x3802000000;
                  v414 = __Block_byref_object_copy__60023;
                  v415 = (os_log_type_t *)__Block_byref_object_dispose__60024;
                  v416 = 0;
                  *(_QWORD *)v417 = &v416;
                  v400 = 0;
                  v401 = &v400;
                  LODWORD(v403) = 0;
                  v402 = 0x2000000000;
                  LODWORD(v403) = dispatch_data_get_size(v7);
                  v8 = *(_QWORD *)(a1 + 336);
                  if (!v8)
                  {
                    __nwlog_obj();
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                    v32 = (char *)_os_log_send_and_compose_impl();
                    v396[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v395[0]) = 0;
                    if (__nwlog_fault(v32, v396, v395))
                    {
                      if (v396[0] == OS_LOG_TYPE_FAULT)
                      {
                        v33 = __nwlog_obj();
                        v34 = v396[0];
                        if (os_log_type_enabled(v33, v396[0]))
                        {
                          *(_DWORD *)type = 136446210;
                          *(_QWORD *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                          v35 = "%{public}s called with null http3";
                          goto LABEL_180;
                        }
                      }
                      else if (LOBYTE(v395[0]))
                      {
                        v204 = (char *)__nw_create_backtrace_string();
                        v33 = __nwlog_obj();
                        v34 = v396[0];
                        v205 = os_log_type_enabled(v33, v396[0]);
                        if (v204)
                        {
                          if (v205)
                          {
                            *(_DWORD *)type = 136446466;
                            *(_QWORD *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                            *(_WORD *)&type[12] = 2082;
                            *(_QWORD *)&type[14] = v204;
                            _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null http3, dumping backtrace:%{public}s", type, 0x16u);
                          }
                          free(v204);
                        }
                        else if (v205)
                        {
                          *(_DWORD *)type = 136446210;
                          *(_QWORD *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                          v35 = "%{public}s called with null http3, no backtrace";
                          goto LABEL_180;
                        }
                      }
                      else
                      {
                        v33 = __nwlog_obj();
                        v34 = v396[0];
                        if (os_log_type_enabled(v33, v396[0]))
                        {
                          *(_DWORD *)type = 136446210;
                          *(_QWORD *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                          v35 = "%{public}s called with null http3, backtrace limit exceeded";
                          goto LABEL_180;
                        }
                      }
                    }
LABEL_181:
                    if (!v32)
                      goto LABEL_12;
LABEL_182:
                    free(v32);
                    goto LABEL_12;
                  }
                  if ((*(_WORD *)(v8 + 1373) & 0x2000) == 0 || (v9 = *(_QWORD *)(v8 + 928)) != 0 && v9 != a1)
                  {
                    *(_QWORD *)(a1 + 576) = 0;
                    v10 = *(uint64_t **)(v8 + 936);
                    *(_QWORD *)(a1 + 584) = v10;
                    *v10 = a1;
                    *(_QWORD *)(v8 + 936) = a1 + 576;
LABEL_12:
                    _Block_object_dispose(&v400, 8);
                    v11 = buf;
LABEL_285:
                    _Block_object_dispose(v11, 8);
                    return 0;
                  }
                  if (!v9)
                  {
                    *(_QWORD *)(a1 + 576) = 0;
                    v25 = *(uint64_t **)(v8 + 936);
                    *(_QWORD *)(a1 + 584) = v25;
                    *v25 = a1;
                    *(_QWORD *)(v8 + 936) = a1 + 576;
                  }
                  nw_http3_start_encoder_stream_if_needed(v8);
                  v26 = *(_QWORD *)(v8 + 1056);
                  if (!v26)
                    goto LABEL_12;
                  v27 = *(_QWORD *)(v26 + 24);
                  if (!v27)
                    goto LABEL_12;
                  v28 = *(unsigned int (**)(uint64_t, uint64_t))(v27 + 88);
                  if (!v28 || !v28(v26, a1))
                    goto LABEL_12;
                  v367[0] = MEMORY[0x1E0C809B0];
                  v367[1] = 0x40000000;
                  v368 = (uint64_t (*)(_QWORD *))___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_3;
                  v369 = &unk_1E14A8168;
                  v370 = &v400;
                  v371 = buf;
                  v372 = a1;
                  v29 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
                  do
                  {
                    if (!v29)
                      break;
                    v30 = *(_QWORD *)(v29 + 32);
                    v31 = v368(v367);
                    v29 = v30;
                  }
                  while ((v31 & 1) != 0);
                  if (*(_QWORD *)(a1 + 528))
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_http3_stream_send_fields";
                    v32 = (char *)_os_log_send_and_compose_impl();
                    v396[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v395[0]) = 0;
                    if (!__nwlog_fault(v32, v396, v395))
                      goto LABEL_181;
                    if (v396[0] == OS_LOG_TYPE_FAULT)
                    {
                      v33 = __nwlog_obj();
                      v34 = v396[0];
                      if (!os_log_type_enabled(v33, v396[0]))
                        goto LABEL_181;
                      *(_DWORD *)type = 136446210;
                      *(_QWORD *)&type[4] = "nw_http3_stream_send_fields";
                      v35 = "%{public}s Not enough space on encoder stream";
                      goto LABEL_180;
                    }
                    if (!LOBYTE(v395[0]))
                    {
                      v33 = __nwlog_obj();
                      v34 = v396[0];
                      if (!os_log_type_enabled(v33, v396[0]))
                        goto LABEL_181;
                      *(_DWORD *)type = 136446210;
                      *(_QWORD *)&type[4] = "nw_http3_stream_send_fields";
                      v35 = "%{public}s Not enough space on encoder stream, backtrace limit exceeded";
                      goto LABEL_180;
                    }
                    v81 = (char *)__nw_create_backtrace_string();
                    v33 = __nwlog_obj();
                    v34 = v396[0];
                    v82 = os_log_type_enabled(v33, v396[0]);
                    if (v81)
                    {
                      if (v82)
                      {
                        *(_DWORD *)type = 136446466;
                        *(_QWORD *)&type[4] = "nw_http3_stream_send_fields";
                        *(_WORD *)&type[12] = 2082;
                        *(_QWORD *)&type[14] = v81;
                        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s Not enough space on encoder stream, dumping backtrace:%{public}s", type, 0x16u);
                      }
                      free(v81);
                      if (!v32)
                        goto LABEL_12;
                      goto LABEL_182;
                    }
                    if (v82)
                    {
                      *(_DWORD *)type = 136446210;
                      *(_QWORD *)&type[4] = "nw_http3_stream_send_fields";
                      v35 = "%{public}s Not enough space on encoder stream, no backtrace";
LABEL_180:
                      _os_log_impl(&dword_182FBE000, v33, v34, v35, type, 0xCu);
                      goto LABEL_181;
                    }
                    goto LABEL_181;
                  }
                  *(_BYTE *)(a1 + 738) |= 4u;
                  v67 = *(_QWORD **)(a1 + 336);
                  if (v67)
                  {
                    if (v67[116] != a1)
                    {
                      __nwlog_obj();
                      *(_DWORD *)type = 136446210;
                      *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                      v68 = (char *)_os_log_send_and_compose_impl();
                      v396[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(v395[0]) = 0;
                      if (!__nwlog_fault(v68, v396, v395))
                        goto LABEL_216;
                      if (v396[0] == OS_LOG_TYPE_FAULT)
                      {
                        v69 = __nwlog_obj();
                        v70 = v396[0];
                        if (!os_log_type_enabled(v69, v396[0]))
                          goto LABEL_216;
                        *(_DWORD *)type = 136446210;
                        *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                        v71 = "%{public}s Encoder stream is not being used by current stream";
                      }
                      else if (LOBYTE(v395[0]))
                      {
                        v110 = (char *)__nw_create_backtrace_string();
                        v69 = __nwlog_obj();
                        v70 = v396[0];
                        v111 = os_log_type_enabled(v69, v396[0]);
                        if (v110)
                        {
                          if (v111)
                          {
                            *(_DWORD *)type = 136446466;
                            *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                            *(_WORD *)&type[12] = 2082;
                            *(_QWORD *)&type[14] = v110;
                            _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s Encoder stream is not being used by current stream, dumping backtrace:%{public}s", type, 0x16u);
                          }
                          free(v110);
                          goto LABEL_216;
                        }
                        if (!v111)
                        {
LABEL_216:
                          if (v68)
                            free(v68);
                          goto LABEL_218;
                        }
                        *(_DWORD *)type = 136446210;
                        *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                        v71 = "%{public}s Encoder stream is not being used by current stream, no backtrace";
                      }
                      else
                      {
                        v69 = __nwlog_obj();
                        v70 = v396[0];
                        if (!os_log_type_enabled(v69, v396[0]))
                          goto LABEL_216;
                        *(_DWORD *)type = 136446210;
                        *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                        v71 = "%{public}s Encoder stream is not being used by current stream, backtrace limit exceeded";
                      }
                      _os_log_impl(&dword_182FBE000, v69, v70, v71, type, 0xCu);
                      goto LABEL_216;
                    }
                    v108 = *(_QWORD *)(a1 + 576);
                    v109 = *(_QWORD **)(a1 + 584);
                    if (v108)
                    {
                      *(_QWORD *)(v108 + 584) = v109;
                      v109 = *(_QWORD **)(a1 + 584);
                    }
                    else
                    {
                      v67[117] = v109;
                    }
                    v131 = *(_QWORD *)&buf[8];
                    *v109 = v108;
                    *(_QWORD *)(a1 + 576) = 0;
                    *(_QWORD *)(a1 + 584) = 0;
                    v132 = v67[132];
                    if (v132)
                    {
                      v133 = *(_QWORD *)(v132 + 24);
                      if (v133)
                      {
                        v134 = *(void (**)(uint64_t, uint64_t))(v133 + 96);
                        if (v134)
                        {
                          v134(v132, v131 + 40);
LABEL_218:
                          nw_http_transaction_metadata_increment_outbound_header_size(*(void **)(a1 + 392), *((unsigned int *)v401 + 6));
                          v135 = (unsigned __int16)*v6;
                          v136 = (v135 | (*(unsigned __int8 *)(a1 + 738) << 16)) & 0xFFFBFFFF;
                          *v6 = v135;
                          *(_BYTE *)(a1 + 738) = BYTE2(v136);
                          _Block_object_dispose(&v400, 8);
                          _Block_object_dispose(buf, 8);
LABEL_219:
                          v137 = *(NSObject **)(a1 + 520);
                          if (v137)
                          {
                            *(_QWORD *)type = 0;
                            *(_QWORD *)&type[8] = type;
                            *(_QWORD *)&type[16] = 0x3802000000;
                            v405 = __Block_byref_object_copy__60023;
                            v406 = __Block_byref_object_dispose__60024;
                            v407[0] = 0;
                            v407[1] = v407;
                            v400 = 0;
                            v401 = &v400;
                            LODWORD(v403) = 0;
                            v402 = 0x2000000000;
                            LODWORD(v403) = dispatch_data_get_size(v137);
                            if (!nw_http3_framer_get_output_frames_for_single_http3_frame(a1 + 128, 1uLL, v403, v407))
                            {
LABEL_284:
                              _Block_object_dispose(&v400, 8);
                              v11 = type;
                              goto LABEL_285;
                            }
                            v361[0] = MEMORY[0x1E0C809B0];
                            v361[1] = 0x40000000;
                            v362 = (uint64_t (*)(_QWORD *))___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_101;
                            v363 = &unk_1E14A8190;
                            v365 = type;
                            v366 = a1;
                            v364 = &v400;
                            v138 = *(_QWORD *)(*(_QWORD *)&type[8] + 40);
                            do
                            {
                              if (!v138)
                                break;
                              v139 = *(_QWORD *)(v138 + 32);
                              v140 = v362(v361);
                              v138 = v139;
                            }
                            while ((v140 & 1) != 0);
                            if (*(_QWORD *)(a1 + 520))
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                              v141 = (char *)_os_log_send_and_compose_impl();
                              v396[0] = OS_LOG_TYPE_ERROR;
                              LOBYTE(v395[0]) = 0;
                              if (!__nwlog_fault(v141, v396, v395))
                                goto LABEL_282;
                              if (v396[0] == OS_LOG_TYPE_FAULT)
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                v142 = gLogObj;
                                v143 = v396[0];
                                if (!os_log_type_enabled((os_log_t)gLogObj, v396[0]))
                                  goto LABEL_282;
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                v144 = "%{public}s Not enough space in fields frame";
                              }
                              else if (LOBYTE(v395[0]))
                              {
                                v166 = (char *)__nw_create_backtrace_string();
                                v142 = __nwlog_obj();
                                v143 = v396[0];
                                v167 = os_log_type_enabled(v142, v396[0]);
                                if (v166)
                                {
                                  if (v167)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = v166;
                                    _os_log_impl(&dword_182FBE000, v142, v143, "%{public}s Not enough space in fields frame, dumping backtrace:%{public}s", buf, 0x16u);
                                  }
                                  free(v166);
                                  goto LABEL_282;
                                }
                                if (!v167)
                                {
LABEL_282:
                                  if (v141)
                                    free(v141);
                                  goto LABEL_284;
                                }
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                v144 = "%{public}s Not enough space in fields frame, no backtrace";
                              }
                              else
                              {
                                v142 = __nwlog_obj();
                                v143 = v396[0];
                                if (!os_log_type_enabled(v142, v396[0]))
                                  goto LABEL_282;
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                v144 = "%{public}s Not enough space in fields frame, backtrace limit exceeded";
                              }
                              _os_log_impl(&dword_182FBE000, v142, v143, v144, buf, 0xCu);
                              goto LABEL_282;
                            }
                            v145 = *(unsigned __int16 *)(a1 + 736) | (*(unsigned __int8 *)(a1 + 738) << 16);
                            v146 = *(_QWORD *)&type[8];
                            if (a2 && (v145 & 0x14000) == 0)
                            {
                              v147 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)&type[8] + 48) + 8);
                              *(_BYTE *)(v147 + 186) |= 0x80u;
                              v145 = (unsigned __int16)*v6 | (*(unsigned __int8 *)(a1 + 738) << 16);
                            }
                            *v6 = v145;
                            *(_BYTE *)(a1 + 738) = (v145 | 0x40000u) >> 16;
                            v148 = *(_QWORD *)(a1 + 160);
                            if (v148 && (v149 = *(_QWORD *)(v148 + 24)) != 0 && *(_QWORD *)(v149 + 96))
                            {
                              v150 = *((_DWORD *)v401 + 6);
                              v151 = (uint64_t *)(v146 + 40);
                              if (v150 >> 30)
                                v152 = 8;
                              else
                                v152 = 4;
                              if (v150 >= 0x4000)
                                v153 = v152;
                              else
                                v153 = 2;
                              if (v150 >= 0x40)
                                v154 = v153;
                              else
                                v154 = 1;
                              v155 = nw_http3_framer_write_http3_frame_header(a1 + 128, 1uLL, *((_DWORD *)v401 + 6), v154 + 1, *v151)+ v150;
                              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v148 + 24) + 96))(v148, v151);
                            }
                            else
                            {
                              v155 = 0;
                            }
                            nw_http_transaction_metadata_increment_outbound_header_size(*(void **)(a1 + 392), v155);
                            v156 = (unsigned __int16)*v6;
                            v157 = (v156 | (*(unsigned __int8 *)(a1 + 738) << 16)) & 0xFFFBFFFF;
                            *v6 = v156;
                            *(_BYTE *)(a1 + 738) = BYTE2(v157);
                            if (a2)
                            {
                              nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(a1 + 392));
                              if (*(_BYTE *)(a1 + 280))
                              {
                                if (*(_QWORD *)(a1 + 272) != *(_QWORD *)(a1 + 288))
                                {
                                  if ((*v6 & 0x800) == 0)
                                  {
                                    v174 = __nwlog_obj();
                                    if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
                                    {
                                      v175 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
                                      v176 = *(_QWORD **)(a1 + 240);
                                      if (*(_BYTE *)(a1 + 280))
                                        v177 = *(_QWORD *)(a1 + 272);
                                      else
                                        v177 = -1;
                                      v178 = *(_QWORD *)(a1 + 288);
                                      *(_DWORD *)buf = 136447746;
                                      *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                      *(_WORD *)&buf[12] = 2082;
                                      *(_QWORD *)&buf[14] = a1 + 636;
                                      *(_WORD *)&buf[22] = 2080;
                                      v414 = (__n128 (*)(uint64_t, uint64_t))" ";
                                      LOWORD(v415) = 1024;
                                      *(_DWORD *)((char *)&v415 + 2) = v175;
                                      HIWORD(v415) = 2048;
                                      v416 = v176;
                                      *(_WORD *)v417 = 2048;
                                      *(_QWORD *)&v417[2] = v177;
                                      *(_WORD *)&v417[10] = 2048;
                                      *(_QWORD *)&v417[12] = v178;
                                      _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> Content length header %llu does not equal body size %llu", buf, 0x44u);
                                    }
                                  }
                                  *(_QWORD *)(a1 + 264) = 270;
                                  nw_protocol_http3_stream_error((nw_protocol *)a1, (nw_protocol *)a1, 22);
                                  nw_protocol_http3_stream_disconnect((nw_protocol *)a1, (nw_protocol *)a1);
                                  goto LABEL_284;
                                }
                              }
                            }
                            _Block_object_dispose(&v400, 8);
                            _Block_object_dispose(type, 8);
                            v158 = (unsigned __int16)*v6 | (*(unsigned __int8 *)(a1 + 738) << 16);
                            if ((v158 & 0x10000) != 0)
                            {
                              nw_frame_reset(*(_QWORD *)(a1 + 384), 0, 0, 0, 0);
                              v168 = *(void **)(a1 + 384);
                              if (v168)
                              {
                                os_release(v168);
                                *(_QWORD *)(a1 + 384) = 0;
                              }
                              *(_QWORD *)(a1 + 384) = nw_frame_create(0, 0, 0, 0, 0);
                              *(_DWORD *)(a1 + 368) = 1;
                            }
                            else
                            {
                              if ((*v6 & 0x30) != 0)
                                v159 = 5;
                              else
                                v159 = 3;
                              *(_DWORD *)(a1 + 368) = v159;
                              if ((v158 & 1) == 0)
                              {
                                v160 = *(_QWORD *)(a1 + 32);
                                if (v160)
                                {
                                  v161 = *(_QWORD *)(v160 + 24);
                                  if (v161)
                                  {
                                    v162 = *(void (**)(uint64_t, uint64_t))(v161 + 160);
                                    if (v162)
                                    {
                                      v162(v160, a1);
                                      LOWORD(v158) = *v6;
                                    }
                                  }
                                }
                                if ((v158 & 0x10) != 0)
                                {
                                  v163 = *(_QWORD *)(a1 + 32);
                                  if (v163)
                                  {
                                    v164 = *(_QWORD *)(v163 + 24);
                                    if (v164)
                                    {
                                      v165 = *(void (**)(uint64_t, uint64_t))(v164 + 160);
                                      if (v165)
                                        v165(v163, a1 + 64);
                                    }
                                  }
                                }
                              }
                            }
                            if ((*v6 & 0x200) == 0)
                              return 1;
                            v169 = *(_QWORD *)(a1 + 32);
                            if (v169)
                            {
                              v170 = *(_QWORD *)(v169 + 24);
                              if (v170)
                              {
                                v171 = *(void (**)(uint64_t, uint64_t))(v170 + 192);
                                if (v171)
                                {
                                  v171(v169, a1);
LABEL_275:
                                  v172 = (unsigned __int16)*v6;
                                  v173 = v172 & 0xFFFFFDFF | (*(unsigned __int8 *)(a1 + 738) << 16);
                                  *v6 = v172 & 0xFDFF;
                                  *(_BYTE *)(a1 + 738) = BYTE2(v173);
                                  return 1;
                                }
                              }
                            }
                            __nwlog_obj();
                            v212 = *(_QWORD *)(a1 + 32);
                            v213 = "invalid";
                            if (v212)
                            {
                              v214 = *(const char **)(v212 + 16);
                              if (v214)
                                v213 = v214;
                            }
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v213;
                            v215 = (char *)_os_log_send_and_compose_impl();
                            type[0] = 16;
                            LOBYTE(v400) = 0;
                            if (__nwlog_fault(v215, type, &v400))
                            {
                              if (type[0] == 17)
                              {
                                v216 = __nwlog_obj();
                                v217 = type[0];
                                if (!os_log_type_enabled(v216, (os_log_type_t)type[0]))
                                  goto LABEL_522;
                                v218 = *(_QWORD *)(a1 + 32);
                                v219 = "invalid";
                                if (v218)
                                {
                                  v220 = *(const char **)(v218 + 16);
                                  if (v220)
                                    v219 = v220;
                                }
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v219;
                                v221 = "%{public}s protocol %{public}s has invalid output_finished callback";
                                goto LABEL_521;
                              }
                              if (!(_BYTE)v400)
                              {
                                v216 = __nwlog_obj();
                                v217 = type[0];
                                if (!os_log_type_enabled(v216, (os_log_type_t)type[0]))
                                  goto LABEL_522;
                                v306 = *(_QWORD *)(a1 + 32);
                                v307 = "invalid";
                                if (v306)
                                {
                                  v308 = *(const char **)(v306 + 16);
                                  if (v308)
                                    v307 = v308;
                                }
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v307;
                                v221 = "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded";
                                goto LABEL_521;
                              }
                              v279 = (char *)__nw_create_backtrace_string();
                              v216 = __nwlog_obj();
                              v217 = type[0];
                              v280 = os_log_type_enabled(v216, (os_log_type_t)type[0]);
                              if (v279)
                              {
                                if (v280)
                                {
                                  v281 = *(_QWORD *)(a1 + 32);
                                  v282 = "invalid";
                                  if (v281)
                                  {
                                    v283 = *(const char **)(v281 + 16);
                                    if (v283)
                                      v282 = v283;
                                  }
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v282;
                                  *(_WORD *)&buf[22] = 2082;
                                  v414 = (__n128 (*)(uint64_t, uint64_t))v279;
                                  _os_log_impl(&dword_182FBE000, v216, v217, "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
                                }
                                free(v279);
                                goto LABEL_522;
                              }
                              if (v280)
                              {
                                v320 = *(_QWORD *)(a1 + 32);
                                v321 = "invalid";
                                if (v320)
                                {
                                  v322 = *(const char **)(v320 + 16);
                                  if (v322)
                                    v321 = v322;
                                }
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v321;
                                v221 = "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace";
LABEL_521:
                                _os_log_impl(&dword_182FBE000, v216, v217, v221, buf, 0x16u);
                              }
                            }
LABEL_522:
                            if (v215)
                              free(v215);
                            goto LABEL_275;
                          }
                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                          v200 = (char *)_os_log_send_and_compose_impl();
                          type[0] = 16;
                          LOBYTE(v400) = 0;
                          if (__nwlog_fault(v200, type, &v400))
                          {
                            if (type[0] == 17)
                            {
                              v201 = __nwlog_obj();
                              v202 = type[0];
                              if (!os_log_type_enabled(v201, (os_log_type_t)type[0]))
                                goto LABEL_479;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                              v203 = "%{public}s called with null http3_stream->output_fields_frame_data";
                              goto LABEL_478;
                            }
                            if (!(_BYTE)v400)
                            {
                              v201 = __nwlog_obj();
                              v202 = type[0];
                              if (!os_log_type_enabled(v201, (os_log_type_t)type[0]))
                                goto LABEL_479;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                              v203 = "%{public}s called with null http3_stream->output_fields_frame_data, backtrace limit exceeded";
                              goto LABEL_478;
                            }
                            v206 = (char *)__nw_create_backtrace_string();
                            v201 = __nwlog_obj();
                            v202 = type[0];
                            v207 = os_log_type_enabled(v201, (os_log_type_t)type[0]);
                            if (v206)
                            {
                              if (v207)
                              {
                                *(_DWORD *)buf = 136446466;
                                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v206;
                                _os_log_impl(&dword_182FBE000, v201, v202, "%{public}s called with null http3_stream->output_fields_frame_data, dumping backtrace:%{public}s", buf, 0x16u);
                              }
                              free(v206);
                              goto LABEL_479;
                            }
                            if (v207)
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                              v203 = "%{public}s called with null http3_stream->output_fields_frame_data, no backtrace";
LABEL_478:
                              _os_log_impl(&dword_182FBE000, v201, v202, v203, buf, 0xCu);
                            }
                          }
LABEL_479:
                          if (v200)
                            free(v200);
                          return 0;
                        }
                      }
                      __nwlog_obj();
                      v305 = *(const char **)(v132 + 16);
                      if (!v305)
                        v305 = "invalid";
                    }
                    else
                    {
                      __nwlog_obj();
                      v305 = "invalid";
                    }
                    *(_DWORD *)type = 136446466;
                    *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                    *(_WORD *)&type[12] = 2082;
                    *(_QWORD *)&type[14] = v305;
                    v301 = (char *)_os_log_send_and_compose_impl();
                    v396[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v395[0]) = 0;
                    if (!__nwlog_fault(v301, v396, v395))
                      goto LABEL_622;
                    if (v396[0] == OS_LOG_TYPE_FAULT)
                    {
                      v323 = __nwlog_obj();
                      v324 = v396[0];
                      if (!os_log_type_enabled(v323, v396[0]))
                        goto LABEL_622;
                      v325 = "invalid";
                      if (v132 && *(_QWORD *)(v132 + 16))
                        v325 = *(const char **)(v132 + 16);
                      *(_DWORD *)type = 136446466;
                      *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = v325;
                      v304 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
LABEL_609:
                      v354 = v323;
LABEL_610:
                      v355 = v324;
                      v356 = 22;
LABEL_621:
                      _os_log_impl(&dword_182FBE000, v354, v355, v304, type, v356);
                      goto LABEL_622;
                    }
                    if (!LOBYTE(v395[0]))
                    {
                      v323 = __nwlog_obj();
                      v324 = v396[0];
                      if (!os_log_type_enabled(v323, v396[0]))
                        goto LABEL_622;
                      v353 = "invalid";
                      if (v132 && *(_QWORD *)(v132 + 16))
                        v353 = *(const char **)(v132 + 16);
                      *(_DWORD *)type = 136446466;
                      *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = v353;
                      v304 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
                      goto LABEL_609;
                    }
                    v326 = (char *)__nw_create_backtrace_string();
                    v327 = __nwlog_obj();
                    v324 = v396[0];
                    loga = v327;
                    v328 = os_log_type_enabled(v327, v396[0]);
                    if (!v326)
                    {
                      if (!v328)
                        goto LABEL_622;
                      v357 = "invalid";
                      if (v132 && *(_QWORD *)(v132 + 16))
                        v357 = *(const char **)(v132 + 16);
                      *(_DWORD *)type = 136446466;
                      *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = v357;
                      v304 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
                      v354 = loga;
                      goto LABEL_610;
                    }
                    if (v328)
                    {
                      v329 = "invalid";
                      if (v132 && *(_QWORD *)(v132 + 16))
                        v329 = *(const char **)(v132 + 16);
                      *(_DWORD *)type = 136446722;
                      *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = v329;
                      *(_WORD *)&type[22] = 2082;
                      v405 = (__n128 (*)(uint64_t, uint64_t))v326;
                      _os_log_impl(&dword_182FBE000, loga, v324, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", type, 0x20u);
                    }
                    free(v326);
LABEL_622:
                    if (!v301)
                      goto LABEL_218;
LABEL_623:
                    free(v301);
                    goto LABEL_218;
                  }
                  __nwlog_obj();
                  *(_DWORD *)type = 136446210;
                  *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                  v301 = (char *)_os_log_send_and_compose_impl();
                  v396[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(v395[0]) = 0;
                  if (!__nwlog_fault(v301, v396, v395))
                    goto LABEL_622;
                  if (v396[0] == OS_LOG_TYPE_FAULT)
                  {
                    v302 = __nwlog_obj();
                    v303 = v396[0];
                    if (!os_log_type_enabled(v302, v396[0]))
                      goto LABEL_622;
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                    v304 = "%{public}s called with null http3";
                  }
                  else if (LOBYTE(v395[0]))
                  {
                    v318 = (char *)__nw_create_backtrace_string();
                    v302 = __nwlog_obj();
                    v303 = v396[0];
                    v319 = os_log_type_enabled(v302, v396[0]);
                    if (v318)
                    {
                      if (v319)
                      {
                        *(_DWORD *)type = 136446466;
                        *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                        *(_WORD *)&type[12] = 2082;
                        *(_QWORD *)&type[14] = v318;
                        _os_log_impl(&dword_182FBE000, v302, v303, "%{public}s called with null http3, dumping backtrace:%{public}s", type, 0x16u);
                      }
                      free(v318);
                      if (!v301)
                        goto LABEL_218;
                      goto LABEL_623;
                    }
                    if (!v319)
                      goto LABEL_622;
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                    v304 = "%{public}s called with null http3, no backtrace";
                  }
                  else
                  {
                    v302 = __nwlog_obj();
                    v303 = v396[0];
                    if (!os_log_type_enabled(v302, v396[0]))
                      goto LABEL_622;
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_http3_encoder_stream_finalize_output_frames";
                    v304 = "%{public}s called with null http3, backtrace limit exceeded";
                  }
                  v354 = v302;
                  v355 = v303;
                  v356 = 12;
                  goto LABEL_621;
                }
LABEL_303:
                os_release(v19);
                goto LABEL_304;
              }
              if (type[0] == 17)
              {
                v259 = __nwlog_obj();
                v260 = type[0];
                if (os_log_type_enabled(v259, (os_log_type_t)type[0]))
                {
                  v261 = *(_QWORD *)(a1 + 48);
                  v262 = "invalid";
                  if (v261)
                  {
                    v263 = *(const char **)(v261 + 16);
                    if (v263)
                      v262 = v263;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v262;
                  _os_log_impl(&dword_182FBE000, v259, v260, "%{public}s protocol %{public}s has invalid disconnected callback", buf, 0x16u);
                }
                goto LABEL_431;
              }
              v264 = v17;
              if ((_BYTE)v400)
              {
                v265 = (char *)__nw_create_backtrace_string();
                v266 = __nwlog_obj();
                v267 = type[0];
                v268 = os_log_type_enabled(v266, (os_log_type_t)type[0]);
                if (v265)
                {
                  if (v268)
                  {
                    v269 = *(_QWORD *)(a1 + 48);
                    v270 = "invalid";
                    if (v269)
                    {
                      v271 = *(const char **)(v269 + 16);
                      if (v271)
                        v270 = v271;
                    }
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v270;
                    *(_WORD *)&buf[22] = 2082;
                    v414 = (__n128 (*)(uint64_t, uint64_t))v265;
                    _os_log_impl(&dword_182FBE000, v266, v267, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }
                  free(v265);
                  goto LABEL_430;
                }
                v17 = v264;
                if (!v268)
                  goto LABEL_431;
                v276 = *(_QWORD *)(a1 + 48);
                v277 = "invalid";
                if (v276)
                {
                  v278 = *(const char **)(v276 + 16);
                  if (v278)
                    v277 = v278;
                }
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v277;
                v275 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
              }
              else
              {
                v266 = __nwlog_obj();
                v267 = type[0];
                if (!os_log_type_enabled(v266, (os_log_type_t)type[0]))
                  goto LABEL_431;
                v272 = *(_QWORD *)(a1 + 48);
                v273 = "invalid";
                if (v272)
                {
                  v274 = *(const char **)(v272 + 16);
                  if (v274)
                    v273 = v274;
                }
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v273;
                v275 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
              }
              _os_log_impl(&dword_182FBE000, v266, v267, v275, buf, 0x16u);
LABEL_430:
              v17 = v264;
              goto LABEL_431;
            }
          }
        }
        __nwlog_obj();
        v183 = *(_QWORD *)(a1 + 48);
        v184 = "invalid";
        if (v183)
        {
          v185 = *(const char **)(v183 + 16);
          if (v185)
            v184 = v185;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v184;
        v186 = (void *)_os_log_send_and_compose_impl();
        type[0] = 16;
        LOBYTE(v400) = 0;
        if (!__nwlog_fault((const char *)v186, type, &v400))
        {
LABEL_398:
          if (v186)
            free(v186);
          v128 = *(_QWORD *)(a1 + 48);
          if (!v128)
            goto LABEL_401;
          goto LABEL_200;
        }
        if (type[0] == 17)
        {
          v187 = __nwlog_obj();
          v188 = type[0];
          if (os_log_type_enabled(v187, (os_log_type_t)type[0]))
          {
            v189 = *(_QWORD *)(a1 + 48);
            v190 = "invalid";
            if (v189)
            {
              v191 = *(const char **)(v189 + 16);
              if (v191)
                v190 = v191;
            }
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v190;
            _os_log_impl(&dword_182FBE000, v187, v188, "%{public}s protocol %{public}s has invalid error callback", buf, 0x16u);
          }
          goto LABEL_398;
        }
        v192 = v17;
        if ((_BYTE)v400)
        {
          v193 = (char *)__nw_create_backtrace_string();
          v194 = __nwlog_obj();
          v195 = type[0];
          v196 = os_log_type_enabled(v194, (os_log_type_t)type[0]);
          if (v193)
          {
            if (v196)
            {
              v197 = *(_QWORD *)(a1 + 48);
              v198 = "invalid";
              if (v197)
              {
                v199 = *(const char **)(v197 + 16);
                if (v199)
                  v198 = v199;
              }
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v198;
              *(_WORD *)&buf[22] = 2082;
              v414 = (__n128 (*)(uint64_t, uint64_t))v193;
              _os_log_impl(&dword_182FBE000, v194, v195, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v193);
            goto LABEL_397;
          }
          v17 = v192;
          if (!v196)
            goto LABEL_398;
          v252 = *(_QWORD *)(a1 + 48);
          v253 = "invalid";
          if (v252)
          {
            v254 = *(const char **)(v252 + 16);
            if (v254)
              v253 = v254;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v253;
          v211 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
        }
        else
        {
          v194 = __nwlog_obj();
          v195 = type[0];
          if (!os_log_type_enabled(v194, (os_log_type_t)type[0]))
            goto LABEL_398;
          v208 = *(_QWORD *)(a1 + 48);
          v209 = "invalid";
          if (v208)
          {
            v210 = *(const char **)(v208 + 16);
            if (v210)
              v209 = v210;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v209;
          v211 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v194, v195, v211, buf, 0x16u);
LABEL_397:
        v17 = v192;
        goto LABEL_398;
      }
    }
    else
    {
      v20 = nw_http_metadata_copy_request(v18);
      if (!v20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        v21 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        LOBYTE(v400) = 0;
        if (!__nwlog_fault(v21, type, &v400))
          goto LABEL_191;
        if (type[0] == 17)
        {
          v22 = __nwlog_obj();
          v23 = type[0];
          if (!os_log_type_enabled(v22, (os_log_type_t)type[0]))
            goto LABEL_191;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          v24 = "%{public}s did not find request on frame";
          goto LABEL_190;
        }
        if (!(_BYTE)v400)
        {
          v22 = __nwlog_obj();
          v23 = type[0];
          if (!os_log_type_enabled(v22, (os_log_type_t)type[0]))
            goto LABEL_191;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          v24 = "%{public}s did not find request on frame, backtrace limit exceeded";
          goto LABEL_190;
        }
        v83 = v17;
        v84 = (char *)__nw_create_backtrace_string();
        v22 = __nwlog_obj();
        v23 = type[0];
        v85 = os_log_type_enabled(v22, (os_log_type_t)type[0]);
        if (!v84)
        {
          v17 = v83;
          if (!v85)
            goto LABEL_191;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          v24 = "%{public}s did not find request on frame, no backtrace";
          goto LABEL_190;
        }
        if (v85)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v84;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s did not find request on frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v84);
        v17 = v83;
        goto LABEL_191;
      }
    }
    os_release(v20);
    nw_http_transaction_metadata_set_outbound_message(*(void **)(a1 + 392), v19);
    nw::http::content_length_manager::set_outbound_message((nw::http::content_length_manager *)(a1 + 272), (nw_protocol_metadata *)v19);
    if ((*(_WORD *)(*(_QWORD *)(a1 + 336) + 1373) & 1) == 0)
    {
      v36 = nw_http_metadata_copy_request(v19);
      if (!v36)
      {
        if ((*v6 & 0x800) == 0)
        {
          v37 = __nwlog_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            v38 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
            v39 = *(_QWORD **)(a1 + 240);
            v40 = *(_QWORD *)(a1 + 384);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 636;
            *(_WORD *)&buf[22] = 2080;
            v414 = (__n128 (*)(uint64_t, uint64_t))" ";
            LOWORD(v415) = 1024;
            *(_DWORD *)((char *)&v415 + 2) = v38;
            HIWORD(v415) = 2048;
            v416 = v39;
            *(_WORD *)v417 = 2048;
            *(_QWORD *)&v417[2] = v40;
            _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> No request found in frame %p", buf, 0x3Au);
          }
        }
        v41 = *(_QWORD *)(a1 + 48);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 24);
          if (v42)
          {
            v43 = *(void (**)(void))(v42 + 56);
            if (v43)
            {
              v43();
              v44 = *(_QWORD *)(a1 + 48);
              if (!v44)
                goto LABEL_51;
LABEL_49:
              v45 = *(_QWORD *)(v44 + 24);
              if (!v45)
                goto LABEL_51;
              v46 = *(void (**)(uint64_t, uint64_t))(v45 + 48);
              if (!v46)
                goto LABEL_51;
LABEL_91:
              v46(v44, a1);
              v80 = 1;
              goto LABEL_303;
            }
          }
        }
        v230 = v17;
        __nwlog_obj();
        v231 = *(_QWORD *)(a1 + 48);
        v232 = "invalid";
        if (v231)
        {
          v233 = *(const char **)(v231 + 16);
          if (v233)
            v232 = v233;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v232;
        v234 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        LOBYTE(v400) = 0;
        if (__nwlog_fault(v234, type, &v400))
        {
          if (type[0] == 17)
          {
            v235 = __nwlog_obj();
            v236 = type[0];
            if (!os_log_type_enabled(v235, (os_log_type_t)type[0]))
              goto LABEL_558;
            v237 = *(_QWORD *)(a1 + 48);
            v238 = "invalid";
            if (v237)
            {
              v239 = *(const char **)(v237 + 16);
              if (v239)
                v238 = v239;
            }
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v238;
            v240 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_557:
            _os_log_impl(&dword_182FBE000, v235, v236, v240, buf, 0x16u);
            goto LABEL_558;
          }
          if (!(_BYTE)v400)
          {
            v235 = __nwlog_obj();
            v236 = type[0];
            if (!os_log_type_enabled(v235, (os_log_type_t)type[0]))
              goto LABEL_558;
            v312 = *(_QWORD *)(a1 + 48);
            v313 = "invalid";
            if (v312)
            {
              v314 = *(const char **)(v312 + 16);
              if (v314)
                v313 = v314;
            }
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v313;
            v240 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
            goto LABEL_557;
          }
          v291 = (char *)__nw_create_backtrace_string();
          v235 = __nwlog_obj();
          v236 = type[0];
          v292 = os_log_type_enabled(v235, (os_log_type_t)type[0]);
          if (!v291)
          {
            if (!v292)
              goto LABEL_558;
            v333 = *(_QWORD *)(a1 + 48);
            v334 = "invalid";
            if (v333)
            {
              v335 = *(const char **)(v333 + 16);
              if (v335)
                v334 = v335;
            }
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v334;
            v240 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
            goto LABEL_557;
          }
          if (v292)
          {
            v293 = *(_QWORD *)(a1 + 48);
            v294 = "invalid";
            if (v293)
            {
              v295 = *(const char **)(v293 + 16);
              if (v295)
                v294 = v295;
            }
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v294;
            *(_WORD *)&buf[22] = 2082;
            v414 = (__n128 (*)(uint64_t, uint64_t))v291;
            _os_log_impl(&dword_182FBE000, v235, v236, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v291);
        }
LABEL_558:
        if (v234)
          free(v234);
        v17 = v230;
        v44 = *(_QWORD *)(a1 + 48);
        if (!v44)
        {
LABEL_51:
          v47 = v17;
          __nwlog_obj();
          v48 = *(_QWORD *)(a1 + 48);
          v49 = "invalid";
          if (v48)
          {
            v50 = *(const char **)(v48 + 16);
            if (v50)
              v49 = v50;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v49;
          v51 = (char *)_os_log_send_and_compose_impl();
          type[0] = 16;
          LOBYTE(v400) = 0;
          if (__nwlog_fault(v51, type, &v400))
          {
            if (type[0] == 17)
            {
              v52 = __nwlog_obj();
              v53 = type[0];
              if (!os_log_type_enabled(v52, (os_log_type_t)type[0]))
                goto LABEL_601;
              v54 = *(_QWORD *)(a1 + 48);
              v55 = "invalid";
              if (v54)
              {
                v56 = *(const char **)(v54 + 16);
                if (v56)
                  v55 = v56;
              }
LABEL_60:
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v55;
              v57 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_600:
              _os_log_impl(&dword_182FBE000, v52, v53, v57, buf, 0x16u);
              goto LABEL_601;
            }
            if ((_BYTE)v400)
            {
              v286 = (char *)__nw_create_backtrace_string();
              v52 = __nwlog_obj();
              v53 = type[0];
              v287 = os_log_type_enabled(v52, (os_log_type_t)type[0]);
              if (v286)
              {
                if (v287)
                {
                  v288 = *(_QWORD *)(a1 + 48);
                  v289 = "invalid";
                  if (v288)
                  {
                    v290 = *(const char **)(v288 + 16);
                    if (v290)
                      v289 = v290;
                  }
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v289;
                  *(_WORD *)&buf[22] = 2082;
                  v414 = (__n128 (*)(uint64_t, uint64_t))v286;
                  _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v286);
                goto LABEL_601;
              }
              if (!v287)
                goto LABEL_601;
              v330 = *(_QWORD *)(a1 + 48);
              v331 = "invalid";
              if (v330)
              {
                v332 = *(const char **)(v330 + 16);
                if (v332)
                  v331 = v332;
              }
LABEL_599:
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v331;
              v57 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
              goto LABEL_600;
            }
            v52 = __nwlog_obj();
            v53 = type[0];
            if (!os_log_type_enabled(v52, (os_log_type_t)type[0]))
              goto LABEL_601;
            v309 = *(_QWORD *)(a1 + 48);
            v310 = "invalid";
            if (v309)
            {
              v311 = *(const char **)(v309 + 16);
              if (v311)
                v310 = v311;
            }
LABEL_499:
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v310;
            v57 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
            goto LABEL_600;
          }
          goto LABEL_601;
        }
        goto LABEL_49;
      }
      goto LABEL_64;
    }
    v58 = nw_http_metadata_copy_response(v19);
    if (v58)
    {
      v59 = v58;
      status_code = _nw_http_response_get_status_code();

      v61 = (unsigned __int16)*v6;
      v62 = (v61 | (*(unsigned __int8 *)(a1 + 738) << 16)) & 0xFFFEFFFF;
      *v6 = v61;
      *(_BYTE *)(a1 + 738) = (v62 | (((status_code - 100) < 0x64) << 16)) >> 16;
      v63 = *(void **)(a1 + 400);
      if (v63)
      {
        v36 = nw_http_metadata_copy_request(v63);
        os_release(v59);
        if (v36)
        {
LABEL_64:
          v64 = v36;
          has_method = _nw_http_request_has_method((uint64_t)v64);

          v360 = v17;
          if (has_method)
          {
            if (!nw_http_fields_have_field_with_name(v64, (unint64_t)"Datagram-Flow-Id"))
            {
              nw_protocol_http3_stream_start_datagram_flow(a1);
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 0;
              snprintf(buf, 0x10uLL, "%llu", *(_QWORD *)(a1 + 248));
              nw_http_fields_append(v64, (uint64_t)"Datagram-Flow-Id", (uint64_t)buf);
            }
            *v6 |= 0x8000u;
          }
          else if (nw_http_request_has_method(v64, (uint64_t)"CONNECT"))
          {
            v66 = MEMORY[0x1E0C809B0];
            v374[0] = MEMORY[0x1E0C809B0];
            v374[1] = 0x40000000;
            v374[2] = ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke;
            v374[3] = &__block_descriptor_tmp_97_60755;
            v374[4] = a1;
            nw_http_fields_access_value_by_name(v64, (unint64_t)"Capsule-Protocol", v374);
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2000000000;
            LOBYTE(v414) = 0;
            v373[0] = v66;
            v373[1] = 0x40000000;
            v373[2] = ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_2;
            v373[3] = &unk_1E14A8140;
            v373[4] = buf;
            nw_http_request_access_extended_connect_protocol(v64, v373);
            if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
            {
              *(_QWORD *)(a1 + 256) = nw_http_metadata_get_datagram_context_id(v19);
              nw_protocol_http3_stream_start_datagram_flow(a1);
            }
            *v6 |= 0x8000u;
            _Block_object_dispose(buf, 8);
          }
LABEL_112:
          v89 = *(_QWORD *)(a1 + 336);
          if (v89)
          {
            if ((*v6 & 0x800) == 0)
            {
              if (gLogDatapath)
              {
                v226 = __nwlog_obj();
                v227 = os_log_type_enabled(v226, OS_LOG_TYPE_DEBUG);
                v89 = *(_QWORD *)(a1 + 336);
                if (v227)
                {
                  v228 = *(_DWORD *)(v89 + 1280);
                  v229 = *(_QWORD **)(a1 + 240);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = a1 + 636;
                  *(_WORD *)&buf[22] = 2080;
                  v414 = (__n128 (*)(uint64_t, uint64_t))" ";
                  LOWORD(v415) = 1024;
                  *(_DWORD *)((char *)&v415 + 2) = v228;
                  HIWORD(v415) = 2048;
                  v416 = v229;
                  _os_log_impl(&dword_182FBE000, v226, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
                  v89 = *(_QWORD *)(a1 + 336);
                }
              }
            }
            *(_QWORD *)type = 0;
            *(_QWORD *)&type[8] = type;
            *(_QWORD *)&type[16] = 0x2000000000;
            v405 = 0;
            v400 = 0;
            v401 = &v400;
            v402 = 0x2000000000;
            v403 = 0;
            *(_QWORD *)v396 = 0;
            v397 = v396;
            v398 = 0x2000000000;
            v399 = 0;
            v395[0] = 0;
            v395[1] = v395;
            v395[2] = 0x2000000000;
            v395[3] = 0;
            v391 = 0;
            v392 = &v391;
            v393 = 0x2000000000;
            v394 = 22;
            v387 = 0;
            v388 = &v387;
            v389 = 0x2000000000;
            v390 = 0;
            v386[0] = 0;
            v386[1] = v386;
            v386[2] = 0x2000000000;
            v386[3] = 512;
            v385[0] = 0;
            v385[1] = v385;
            v385[2] = 0x2000000000;
            v385[3] = 512;
            v381 = 0;
            v382 = &v381;
            v383 = 0x2000000000;
            alloc = 0;
            alloc = dispatch_data_create_alloc();
            v377 = 0;
            v378 = &v377;
            v379 = 0x2000000000;
            v380 = 0;
            v380 = dispatch_data_create_alloc();
            v90 = *(_DWORD *)(a1 + 624);
            if ((*(_BYTE *)(v89 + 268) & 1) == 0)
            {
              log = v64;
              v91 = *(_QWORD *)(*(_QWORD *)&type[8] + 24);
              v92 = *(_QWORD *)(a1 + 240);
              v93 = *(FILE **)(v89 + 456);
              if (v93)
              {
                fwrite("qenc: debug: ", 0xDuLL, 1uLL, v93);
                fprintf(*(FILE **)(v89 + 456), "Start header for stream %llu", v92);
                fputc(10, *(FILE **)(v89 + 456));
              }
              v94 = (_QWORD *)(v89 + 336);
              while (1)
              {
                v94 = (_QWORD *)*v94;
                if (!v94)
                  break;
                v95 = v94[1];
                if (v95 != -1)
                  goto LABEL_130;
              }
              if ((*(_BYTE *)(v89 + 268) & 4) != 0
                || 4112 * (unint64_t)*(unsigned int *)(v89 + 300) < *(unsigned int *)(v89 + 276))
              {
                v94 = malloc_type_malloc(0x1010uLL, 0x10A0040497EC00CuLL);
                if (v94)
                {
                  v95 = 0;
                  *v94 = 0;
                  v94[1] = 0;
                  **(_QWORD **)(v89 + 344) = v94;
                  *(_QWORD *)(v89 + 344) = v94;
                  ++*(_DWORD *)(v89 + 300);
LABEL_130:
                  v100 = __clz(__rbit64(~v95));
                  v94[1] = (1 << v100) | v95;
                  v101 = &v94[8 * v100];
                  v101[2] = 0;
                  v101 += 2;
                  *(_OWORD *)(v101 + 3) = 0u;
                  *(_OWORD *)(v101 + 5) = 0u;
                  v101[7] = 0;
                  *(_OWORD *)(v101 + 1) = 0u;
                  v101[4] = v101;
                  v102 = *(_QWORD **)(v89 + 360);
                  v101[1] = v102;
                  *v102 = v101;
                  *(_QWORD *)(v89 + 360) = v101;
                  v103 = (_QWORD *)(v89 + 384);
                  *(_QWORD *)(v89 + 384) = v101;
                  v101[5] = v92;
                  *((_DWORD *)v101 + 12) = v90;
                  goto LABEL_131;
                }
              }
              v103 = (_QWORD *)(v89 + 384);
              *(_QWORD *)(v89 + 384) = 0;
              v107 = *(FILE **)(v89 + 456);
              if (v107)
              {
                fwrite("qenc: info: ", 0xCuLL, 1uLL, v107);
                fprintf(*(FILE **)(v89 + 456), "could not allocate hinfo for stream %llu", v92);
                fputc(10, *(FILE **)(v89 + 456));
              }
LABEL_131:
              *(_DWORD *)(v89 + 408) = 0;
              *(_QWORD *)(v89 + 392) = 0;
              *(_DWORD *)(v89 + 400) = 0;
              *(_DWORD *)(v89 + 412) = *(_DWORD *)(v89 + 256);
              if (v90)
              {
                if (*v103)
                {
                  v104 = *(_QWORD *)(v89 + 368);
                  if (v104)
                  {
                    while (*(_QWORD *)(v104 + 40) != v92)
                    {
                      v104 = *(_QWORD *)(v104 + 16);
                      if (!v104)
                        goto LABEL_160;
                    }
                    *(_QWORD *)(v89 + 392) = v104;
                  }
                }
              }
LABEL_160:
              *(_DWORD *)(v89 + 268) |= 1u;
              ++*(_DWORD *)(a1 + 624);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL32nw_http3_stream_serialize_fieldsP24nw_protocol_http3_streamP20nw_protocol_metadata_block_invoke;
              v414 = (__n128 (*)(uint64_t, uint64_t))&unk_1E14A81B8;
              v415 = v396;
              v416 = v386;
              *(_QWORD *)v417 = &v391;
              *(_QWORD *)&v417[8] = v395;
              *(_QWORD *)&v417[16] = v385;
              v418 = &v387;
              v423 = a1;
              v424 = v89 + 256;
              v419 = &v400;
              v420 = type;
              v421 = &v377;
              v422 = &v381;
              nw_http_metadata_enumerate_modern_header_fields_combined(v19, buf);
              v112 = lsqpack_enc_end_header(v89 + 256, (uint64_t)__src);
              if ((v112 & 0x8000000000000000) == 0)
              {
                v113 = v112;
                memcpy((void *)(v91 - v112 + 22), __src, v112);
                *(_QWORD *)(a1 + 520) = dispatch_data_create_subrange((dispatch_data_t)v382[3], 22 - v113, v113 + v392[3] - 22);
                v114 = v382[3];
                if (v114)
                {
                  dispatch_release(v114);
                  v382[3] = 0;
                }
                v115 = v388[3];
                v17 = v360;
                v64 = log;
                if (v115)
                  subrange = dispatch_data_create_subrange((dispatch_data_t)v378[3], 0, v115);
                else
                  subrange = 0;
                *(_QWORD *)(a1 + 528) = subrange;
                v117 = v378[3];
                if (v117)
                {
                  dispatch_release(v117);
                  v378[3] = 0;
                }
LABEL_300:
                _Block_object_dispose(&v377, 8);
                _Block_object_dispose(&v381, 8);
                _Block_object_dispose(v385, 8);
                _Block_object_dispose(v386, 8);
                _Block_object_dispose(&v387, 8);
                _Block_object_dispose(&v391, 8);
                _Block_object_dispose(v395, 8);
                _Block_object_dispose(v396, 8);
                _Block_object_dispose(&v400, 8);
                _Block_object_dispose(type, 8);
                if (!v64)
                {
LABEL_302:
                  v80 = 0;
                  goto LABEL_303;
                }
LABEL_301:
                os_release(v64);
                goto LABEL_302;
              }
              __nwlog_obj();
              *(_DWORD *)v408 = 136446210;
              v409 = "nw_http3_stream_serialize_fields";
              v96 = (char *)_os_log_send_and_compose_impl();
              v376 = OS_LOG_TYPE_ERROR;
              v375 = 0;
              v64 = log;
              if (__nwlog_fault(v96, &v376, &v375))
              {
                if (v376 == OS_LOG_TYPE_FAULT)
                {
                  v97 = __nwlog_obj();
                  v98 = v376;
                  if (!os_log_type_enabled(v97, v376))
                    goto LABEL_297;
                  *(_DWORD *)v408 = 136446210;
                  v409 = "nw_http3_stream_serialize_fields";
                  v99 = "%{public}s lsqpack end header before starting";
                  goto LABEL_295;
                }
                if (!v375)
                {
                  v97 = __nwlog_obj();
                  v98 = v376;
                  if (!os_log_type_enabled(v97, v376))
                    goto LABEL_297;
                  *(_DWORD *)v408 = 136446210;
                  v409 = "nw_http3_stream_serialize_fields";
                  v99 = "%{public}s lsqpack end header before starting, backtrace limit exceeded";
                  goto LABEL_295;
                }
                v118 = (char *)__nw_create_backtrace_string();
                v97 = __nwlog_obj();
                v98 = v376;
                v119 = os_log_type_enabled(v97, v376);
                if (v118)
                {
                  if (v119)
                  {
                    *(_DWORD *)v408 = 136446466;
                    v409 = "nw_http3_stream_serialize_fields";
                    v410 = 2082;
                    v411 = v118;
                    _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s lsqpack end header before starting, dumping backtrace:%{public}s", v408, 0x16u);
                  }
                  free(v118);
                  if (!v96)
                    goto LABEL_299;
                  goto LABEL_298;
                }
                if (v119)
                {
                  *(_DWORD *)v408 = 136446210;
                  v409 = "nw_http3_stream_serialize_fields";
                  v99 = "%{public}s lsqpack end header before starting, no backtrace";
LABEL_295:
                  v120 = v408;
                  goto LABEL_296;
                }
              }
LABEL_297:
              if (!v96)
              {
LABEL_299:
                v17 = v360;
                goto LABEL_300;
              }
LABEL_298:
              free(v96);
              goto LABEL_299;
            }
            *(_DWORD *)(a1 + 624) = v90 + 1;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
            v96 = (char *)_os_log_send_and_compose_impl();
            __src[0] = OS_LOG_TYPE_ERROR;
            v408[0] = 0;
            if ((__nwlog_fault(v96, __src, v408) & 1) == 0)
              goto LABEL_297;
            if (__src[0] == OS_LOG_TYPE_FAULT)
            {
              v97 = __nwlog_obj();
              v98 = __src[0];
              if (!os_log_type_enabled(v97, __src[0]))
                goto LABEL_297;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              v99 = "%{public}s lsqpack header already started";
            }
            else if (v408[0])
            {
              v105 = (char *)__nw_create_backtrace_string();
              v97 = __nwlog_obj();
              v98 = __src[0];
              v106 = os_log_type_enabled(v97, __src[0]);
              if (v105)
              {
                if (v106)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v105;
                  _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s lsqpack header already started, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v105);
                goto LABEL_297;
              }
              if (!v106)
                goto LABEL_297;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              v99 = "%{public}s lsqpack header already started, no backtrace";
            }
            else
            {
              v97 = __nwlog_obj();
              v98 = __src[0];
              if (!os_log_type_enabled(v97, __src[0]))
                goto LABEL_297;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              v99 = "%{public}s lsqpack header already started, backtrace limit exceeded";
            }
            v120 = buf;
LABEL_296:
            _os_log_impl(&dword_182FBE000, v97, v98, v99, v120, 0xCu);
            goto LABEL_297;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
          v222 = (char *)_os_log_send_and_compose_impl();
          type[0] = 16;
          LOBYTE(v400) = 0;
          if (__nwlog_fault(v222, type, &v400))
          {
            if (type[0] == 17)
            {
              v223 = __nwlog_obj();
              v224 = type[0];
              if (!os_log_type_enabled(v223, (os_log_type_t)type[0]))
                goto LABEL_527;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              v225 = "%{public}s called with null http3_stream->http3_connection";
LABEL_526:
              _os_log_impl(&dword_182FBE000, v223, v224, v225, buf, 0xCu);
              goto LABEL_527;
            }
            if (!(_BYTE)v400)
            {
              v223 = __nwlog_obj();
              v224 = type[0];
              if (!os_log_type_enabled(v223, (os_log_type_t)type[0]))
                goto LABEL_527;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              v225 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
              goto LABEL_526;
            }
            v284 = (char *)__nw_create_backtrace_string();
            v223 = __nwlog_obj();
            v224 = type[0];
            v285 = os_log_type_enabled(v223, (os_log_type_t)type[0]);
            if (!v284)
            {
              if (!v285)
                goto LABEL_527;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              v225 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
              goto LABEL_526;
            }
            if (v285)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v284;
              _os_log_impl(&dword_182FBE000, v223, v224, "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v284);
          }
LABEL_527:
          if (v222)
            free(v222);
          v17 = v360;
          if (!v64)
            goto LABEL_302;
          goto LABEL_301;
        }
        v360 = v17;
      }
      else
      {
        v360 = v17;
        os_release(v59);
      }
      v64 = 0;
      goto LABEL_112;
    }
    if ((*v6 & 0x800) == 0)
    {
      v72 = __nwlog_obj();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        v73 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
        v74 = *(_QWORD **)(a1 + 240);
        v75 = *(_QWORD *)(a1 + 384);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 636;
        *(_WORD *)&buf[22] = 2080;
        v414 = (__n128 (*)(uint64_t, uint64_t))" ";
        LOWORD(v415) = 1024;
        *(_DWORD *)((char *)&v415 + 2) = v73;
        HIWORD(v415) = 2048;
        v416 = v74;
        *(_WORD *)v417 = 2048;
        *(_QWORD *)&v417[2] = v75;
        _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> No response found in frame %p", buf, 0x3Au);
      }
    }
    v76 = *(_QWORD *)(a1 + 48);
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 24);
      if (v77)
      {
        v78 = *(void (**)(void))(v77 + 56);
        if (v78)
        {
          v78();
          v44 = *(_QWORD *)(a1 + 48);
          if (!v44)
            goto LABEL_571;
LABEL_89:
          v79 = *(_QWORD *)(v44 + 24);
          if (v79)
          {
            v46 = *(void (**)(uint64_t, uint64_t))(v79 + 48);
            if (v46)
              goto LABEL_91;
          }
LABEL_571:
          v47 = v17;
          __nwlog_obj();
          v339 = *(_QWORD *)(a1 + 48);
          v340 = "invalid";
          if (v339)
          {
            v341 = *(const char **)(v339 + 16);
            if (v341)
              v340 = v341;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v340;
          v51 = (char *)_os_log_send_and_compose_impl();
          type[0] = 16;
          LOBYTE(v400) = 0;
          if (__nwlog_fault(v51, type, &v400))
          {
            if (type[0] == 17)
            {
              v52 = __nwlog_obj();
              v53 = type[0];
              if (!os_log_type_enabled(v52, (os_log_type_t)type[0]))
                goto LABEL_601;
              v342 = *(_QWORD *)(a1 + 48);
              v55 = "invalid";
              if (v342)
              {
                v343 = *(const char **)(v342 + 16);
                if (v343)
                  v55 = v343;
              }
              goto LABEL_60;
            }
            if (!(_BYTE)v400)
            {
              v52 = __nwlog_obj();
              v53 = type[0];
              if (!os_log_type_enabled(v52, (os_log_type_t)type[0]))
                goto LABEL_601;
              v349 = *(_QWORD *)(a1 + 48);
              v310 = "invalid";
              if (v349)
              {
                v350 = *(const char **)(v349 + 16);
                if (v350)
                  v310 = v350;
              }
              goto LABEL_499;
            }
            v344 = (char *)__nw_create_backtrace_string();
            v52 = __nwlog_obj();
            v53 = type[0];
            v345 = os_log_type_enabled(v52, (os_log_type_t)type[0]);
            if (v344)
            {
              if (v345)
              {
                v346 = *(_QWORD *)(a1 + 48);
                v347 = "invalid";
                if (v346)
                {
                  v348 = *(const char **)(v346 + 16);
                  if (v348)
                    v347 = v348;
                }
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v347;
                *(_WORD *)&buf[22] = 2082;
                v414 = (__n128 (*)(uint64_t, uint64_t))v344;
                _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v344);
              if (!v51)
                goto LABEL_603;
              goto LABEL_602;
            }
            if (v345)
            {
              v351 = *(_QWORD *)(a1 + 48);
              v331 = "invalid";
              if (v351)
              {
                v352 = *(const char **)(v351 + 16);
                if (v352)
                  v331 = v352;
              }
              goto LABEL_599;
            }
          }
LABEL_601:
          if (!v51)
          {
LABEL_603:
            v80 = 1;
            v17 = v47;
            goto LABEL_303;
          }
LABEL_602:
          free(v51);
          goto LABEL_603;
        }
      }
    }
    v241 = v17;
    __nwlog_obj();
    v242 = *(_QWORD *)(a1 + 48);
    v243 = "invalid";
    if (v242)
    {
      v244 = *(const char **)(v242 + 16);
      if (v244)
        v243 = v244;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v243;
    v245 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    LOBYTE(v400) = 0;
    if (__nwlog_fault(v245, type, &v400))
    {
      if (type[0] == 17)
      {
        v246 = __nwlog_obj();
        v247 = type[0];
        if (!os_log_type_enabled(v246, (os_log_type_t)type[0]))
          goto LABEL_568;
        v248 = *(_QWORD *)(a1 + 48);
        v249 = "invalid";
        if (v248)
        {
          v250 = *(const char **)(v248 + 16);
          if (v250)
            v249 = v250;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v249;
        v251 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_567:
        _os_log_impl(&dword_182FBE000, v246, v247, v251, buf, 0x16u);
        goto LABEL_568;
      }
      if (!(_BYTE)v400)
      {
        v246 = __nwlog_obj();
        v247 = type[0];
        if (!os_log_type_enabled(v246, (os_log_type_t)type[0]))
          goto LABEL_568;
        v315 = *(_QWORD *)(a1 + 48);
        v316 = "invalid";
        if (v315)
        {
          v317 = *(const char **)(v315 + 16);
          if (v317)
            v316 = v317;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v316;
        v251 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
        goto LABEL_567;
      }
      v296 = (char *)__nw_create_backtrace_string();
      v246 = __nwlog_obj();
      v247 = type[0];
      v297 = os_log_type_enabled(v246, (os_log_type_t)type[0]);
      if (!v296)
      {
        if (!v297)
          goto LABEL_568;
        v336 = *(_QWORD *)(a1 + 48);
        v337 = "invalid";
        if (v336)
        {
          v338 = *(const char **)(v336 + 16);
          if (v338)
            v337 = v338;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v337;
        v251 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
        goto LABEL_567;
      }
      if (v297)
      {
        v298 = *(_QWORD *)(a1 + 48);
        v299 = "invalid";
        if (v298)
        {
          v300 = *(const char **)(v298 + 16);
          if (v300)
            v299 = v300;
        }
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v299;
        *(_WORD *)&buf[22] = 2082;
        v414 = (__n128 (*)(uint64_t, uint64_t))v296;
        _os_log_impl(&dword_182FBE000, v246, v247, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v296);
    }
LABEL_568:
    if (v245)
      free(v245);
    v17 = v241;
    v44 = *(_QWORD *)(a1 + 48);
    if (!v44)
      goto LABEL_571;
    goto LABEL_89;
  }
  if ((v4 & 1) == 0)
  {
    v12 = __nwlog_obj();
    result = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
    v15 = *(_QWORD **)(a1 + 240);
    v16 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http3_stream_send_fields";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = a1 + 636;
    *(_WORD *)&buf[22] = 2080;
    v414 = (__n128 (*)(uint64_t, uint64_t))" ";
    LOWORD(v415) = 1024;
    *(_DWORD *)((char *)&v415 + 2) = v14;
    HIWORD(v415) = 2048;
    v416 = v15;
    *(_WORD *)v417 = 1024;
    *(_DWORD *)&v417[2] = v16;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called, state %u - already sending headers", buf, 0x36u);
  }
  return 0;
}

uint64_t ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke(uint64_t result, char *__s1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = result;
  if (__s1)
  {
    result = strcmp(__s1, "?1");
    v3 = ((_DWORD)result == 0) << 14;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(unsigned __int16 *)(v4 + 736);
  v6 = v5 & 0xFFFFBFFF | (*(unsigned __int8 *)(v4 + 738) << 16);
  *(_WORD *)(v4 + 736) = v5 & 0xBFFF | v3;
  *(_BYTE *)(v4 + 738) = BYTE2(v6);
  return result;
}

uint64_t ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_2(uint64_t result, char *__s1)
{
  uint64_t v2;
  BOOL v4;

  v2 = result;
  if (__s1)
  {
    result = strcmp(__s1, "connect-udp");
    if ((_DWORD)result)
    {
      result = strcmp(__s1, "connect-ip");
      v4 = (_DWORD)result == 0;
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v4;
  return result;
}

void ___ZL32nw_http3_stream_serialize_fieldsP24nw_protocol_http3_streamP20nw_protocol_metadata_block_invoke(_QWORD *a1, char *a2, unint64_t a3, unint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  FILE *v34;
  uint64_t v35;
  size_t v36;
  NSObject *v37;
  NSObject *alloc;
  NSObject *v39;
  _QWORD *v40;
  _QWORD *v41;
  unsigned int v42;
  unint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  FILE *v62;
  size_t v63;
  size_t v64;
  int v65;
  unsigned int v66;
  char **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  _BOOL4 v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL4 v76;
  int v77;
  _BOOL4 v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v90;
  float v91;
  int can_evict_at_least;
  uint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  int *v104;
  unint64_t v105;
  int v106;
  unsigned int *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  char *v132;
  int v133;
  int v134;
  unsigned __int8 *v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  _BOOL4 v142;
  char *v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  unsigned int v151;
  FILE *v152;
  unsigned int v153;
  FILE *v154;
  uint64_t v155;
  _BYTE *v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  _BYTE *v160;
  size_t v161;
  int v162;
  unint64_t v163;
  size_t v164;
  char v165;
  uint64_t v166;
  _BYTE *v167;
  int v168;
  int v169;
  _BYTE *v170;
  _BYTE *v171;
  unint64_t v172;
  unsigned int v173;
  uint64_t v174;
  char v175;
  unint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  unsigned int v179;
  unint64_t v180;
  unsigned int v181;
  int v182;
  int v183;
  unint64_t v184;
  _BYTE *v185;
  unint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  _BYTE *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _BYTE *v199;
  unint64_t v200;
  unint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  size_t v209;
  NSObject *v210;
  NSObject *v211;
  unint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  _DWORD *v217;
  unint64_t v218;
  _BYTE *v219;
  _DWORD *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  int64_t v230;
  float v231;
  uint64_t v232;
  uint64_t *v233;
  _DWORD *v234;
  _BYTE *v235;
  uint64_t *v236;
  int v237;
  uint64_t v238;
  size_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  FILE *v245;
  unint64_t v246;
  int v247;
  _BYTE *v248;
  unint64_t v249;
  unint64_t v250;
  _BYTE *v251;
  unsigned int v252;
  unsigned int v253;
  FILE *v254;
  FILE *v255;
  unsigned int v256;
  float v257;
  NSObject *v258;
  uint64_t v259;
  const char *v260;
  const char *v261;
  BOOL v262;
  int v263;
  uint64_t v264;
  int v265;
  char v266;
  char v267;
  int v268;
  int v269;
  char v270;
  char v271;
  char *v272;
  unsigned __int8 *v273;
  char *v274;
  unsigned __int8 *v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  int v287;
  _QWORD *v288;
  _QWORD *v289;
  _BOOL4 v290;
  unint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  unint64_t v294;
  int64_t v295;
  _BYTE *v296;
  int v297;
  _BYTE *v298;
  int64_t v299;
  unsigned int v300;
  _BYTE *v301;
  _QWORD *v302;
  size_t __n;
  size_t v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  size_t v308;
  int v309;
  uint64_t v310;
  char *v311;
  unsigned int v312;
  size_t v313;
  char *v314;
  uint64_t v315;
  int v316;
  char *v317;
  uint64_t v318;
  _BYTE buf[22];
  __int16 v320;
  const char *v321;
  __int16 v322;
  int v323;
  __int16 v324;
  uint64_t v325;
  __int16 v326;
  int v327;
  __int16 v328;
  char *v329;
  uint64_t v330;

  v9 = a1;
  v330 = *MEMORY[0x1E0C80C00];
  v10 = a1[14];
  if (!v10 || (*(_WORD *)(v10 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v258 = __nwlog_obj();
      if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
      {
        v259 = v9[14];
        v260 = (const char *)(v259 + 636);
        v261 = "";
        v262 = v259 == 0;
        if (!v259)
          v260 = "";
        v263 = *(_DWORD *)(*(_QWORD *)(v259 + 336) + 1280);
        v264 = *(_QWORD *)(v259 + 240);
        if (!v262)
          v261 = " ";
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v260;
        v320 = 2080;
        v321 = v261;
        v322 = 1024;
        v323 = v263;
        v324 = 2048;
        v325 = v264;
        v326 = 1040;
        v327 = a3;
        v328 = 2080;
        v329 = a2;
        _os_log_impl(&dword_182FBE000, v258, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> encoding %.*s", buf, 0x40u);
      }
    }
  }
  v302 = v9;
  if (a4 + a3 >= 0x10000)
  {
    v11 = v9[14];
    if (!v11 || (*(_WORD *)(v11 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v13 = v302[14];
        v14 = (const char *)(v13 + 636);
        v15 = "";
        v16 = v13 == 0;
        if (!v13)
          v14 = "";
        v17 = *(_DWORD *)(*(_QWORD *)(v13 + 336) + 1280);
        v18 = *(_QWORD *)(v13 + 240);
        if (!v16)
          v15 = " ";
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http3_stream_serialize_fields_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v14;
        v320 = 2080;
        v321 = v15;
        v322 = 1024;
        v323 = v17;
        v324 = 2048;
        v325 = v18;
        v326 = 1040;
        v327 = a3;
        v328 = 2080;
        v329 = a2;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> dropping oversized field %.*s", buf, 0x40u);
      }
    }
    return;
  }
  if (a3 >= 0x10000)
    __assert_rtn("lsxpack_header_set_offset2", "lsxpack_header.h", 120, "name_len <= LSXPACK_MAX_STRLEN");
  if (a4 >= 0x10000)
    __assert_rtn("lsxpack_header_set_offset2", "lsxpack_header.h", 124, "val_len <= LSXPACK_MAX_STRLEN");
  if (a5 == 3)
    v19 = 2;
  else
    v19 = a5 == 2;
  v20 = &a2[(int)a3];
  __n = (unsigned __int16)a4;
  v21 = (unint64_t)&v20[(unsigned __int16)a4];
  v275 = (unsigned __int8 *)(v20 + 1);
  v291 = v21;
  if (v21 <= (unint64_t)(v20 + 1))
    v21 = (unint64_t)(v20 + 1);
  v292 = v9 + 4;
  v293 = v9 + 6;
  v288 = v9 + 7;
  v289 = v9 + 9;
  v287 = (unsigned __int16)a3 + 414139866;
  v277 = a3 & 0xF;
  v284 = v21 - (_QWORD)v20;
  v311 = &a2[(int)a3];
  v279 = (v21 - (_QWORD)v20) & 0xFFFFFFFFFFFFFFFELL;
  v274 = &v20[v279];
  v270 = (16 * v19) | 0x50;
  v266 = (16 * v19) | 0x5F;
  v268 = (32 * ((v19 >> 1) & 1)) | 0x40;
  v265 = (32 * ((v19 >> 1) & 1)) | 0x4F;
  v280 = v19;
  v271 = (4 * v19) & 8;
  v267 = (4 * v19) | 7;
  v269 = (16 * ((v19 >> 1) & 1)) | 0x20;
  if ((_WORD)a3)
    v22 = a2;
  else
    v22 = 0;
  v313 = (unsigned __int16)a3;
  v273 = (unsigned __int8 *)(v22 + 1);
  if (&v22[(unsigned __int16)a3] <= v22 + 1)
    v23 = v22 + 1;
  else
    v23 = &v22[(unsigned __int16)a3];
  v304 = (unsigned __int16)a4;
  v286 = (unsigned __int16)a4 + (unsigned __int16)a3;
  v285 = (v286 + 32);
  v308 = (unsigned __int16)a3;
  v276 = (unsigned __int16)a3 + 32;
  v314 = &v22[(unsigned __int16)a3];
  v283 = v23 - v22;
  v317 = v22;
  v278 = (v23 - v22) & 0xFFFFFFFFFFFFFFFELL;
  v272 = &v22[v278];
  while (2)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v9[4] + 8) + 24);
    v25 = *(_QWORD *)(*(_QWORD *)(v9[5] + 8) + 24);
    v26 = *(_QWORD *)(*(_QWORD *)(v9[6] + 8) + 24);
    v27 = *(_QWORD *)(*(_QWORD *)(v9[7] + 8) + 24);
    v28 = *(_QWORD *)(*(_QWORD *)(v9[8] + 8) + 24);
    v29 = *(_QWORD *)(*(_QWORD *)(v9[9] + 8) + 24);
    v30 = v9[15];
    v31 = v9[11];
    v32 = *(_QWORD *)(*(_QWORD *)(v9[10] + 8) + 24);
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 8) + 24);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v34 = *(FILE **)(v30 + 200);
    if (v34)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v34);
      fputc(10, *(FILE **)(v30 + 200));
    }
    v35 = v25 + v24;
    if (v35 == v26)
      goto LABEL_32;
    v305 = v30;
    v42 = 414139866;
    if (v317)
    {
      v43 = v313;
      v42 = v287;
      v44 = v317;
      if (v308 >= 0x10)
      {
        v45 = 1679910008;
        v46 = 39378473;
        v47 = -2008766304;
        v48 = 645669457;
        v44 = v317;
        do
        {
          HIDWORD(v49) = v48 - 2048144777 * *(_DWORD *)v44;
          LODWORD(v49) = HIDWORD(v49);
          v48 = -1640531535 * (v49 >> 19);
          HIDWORD(v49) = v47 - 2048144777 * *((_DWORD *)v44 + 1);
          LODWORD(v49) = HIDWORD(v49);
          v47 = -1640531535 * (v49 >> 19);
          HIDWORD(v49) = v46 - 2048144777 * *((_DWORD *)v44 + 2);
          LODWORD(v49) = HIDWORD(v49);
          v46 = -1640531535 * (v49 >> 19);
          HIDWORD(v49) = v45 - 2048144777 * *((_DWORD *)v44 + 3);
          LODWORD(v49) = HIDWORD(v49);
          v45 = -1640531535 * (v49 >> 19);
          v44 += 16;
        }
        while (v44 < v314 - 15);
        HIDWORD(v51) = v48;
        LODWORD(v51) = v48;
        v50 = v51 >> 31;
        HIDWORD(v51) = v47;
        LODWORD(v51) = v47;
        v52 = v51 >> 25;
        HIDWORD(v51) = v46;
        LODWORD(v51) = v46;
        v53 = v51 >> 20;
        HIDWORD(v51) = v45;
        LODWORD(v51) = v45;
        v42 = v50 + v308 + v52 + v53 + (v51 >> 14);
        v43 = v277;
      }
      if (v43 >= 4)
      {
        do
        {
          v54 = *(_DWORD *)v44;
          v44 += 4;
          HIDWORD(v55) = v42 - 1028477379 * v54;
          LODWORD(v55) = HIDWORD(v55);
          v42 = 668265263 * (v55 >> 15);
          v43 -= 4;
        }
        while (v43 > 3);
      }
      for (; v43; --v43)
      {
        v56 = *v44++;
        HIDWORD(v57) = v42 + 374761393 * v56;
        LODWORD(v57) = HIDWORD(v57);
        v42 = -1640531535 * (v57 >> 21);
      }
    }
    v58 = v32;
    v59 = -1028477379 * ((-2048144777 * (v42 ^ (v42 >> 15))) ^ ((-2048144777 * (v42 ^ (v42 >> 15))) >> 13));
    v60 = v59 ^ HIWORD(v59);
    v61 = XXH_INLINE_XXH32((int *)v311, __n, v60);
    v62 = *(FILE **)(v305 + 200);
    if (v62)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v62);
      fprintf(*(FILE **)(v305 + 200), "name hash: 0x%X; nameval hash: 0x%X", v60, v61);
      fputc(10, *(FILE **)(v305 + 200));
    }
    v316 = v60;
    v298 = (_BYTE *)(v58 + v29 - v27);
    v299 = v28 + v27 - v29;
    v301 = &v298[v299];
    v295 = v35 - v26;
    v296 = (_BYTE *)(v33 + v26 - v24);
    v294 = v33 - v24 + v35;
    v63 = v308;
    v64 = v304;
    v65 = v61;
    if (nameval2id_plus_one[v61 & 0x1FF])
    {
      v66 = nameval2id_plus_one[v61 & 0x1FF] - 1;
      v67 = &(&static_table)[3 * v66];
      if (*((_DWORD *)v67 + 4) == (_DWORD)v308
        && *((_DWORD *)&static_table + 6 * v66 + 5) == (_DWORD)v304
        && !memcmp(*v67, v317, v313)
        && !memcmp((&static_table)[3 * v66 + 1], v311, __n))
      {
        v310 = 0;
        v290 = 0;
        v309 = 0;
        v312 = 0;
        v73 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v80 = 0;
        v85 = v66;
        v86 = 1;
        v9 = v302;
        v69 = v291;
        v72 = v313;
        v71 = (unint64_t)v314;
        v68 = v305;
        goto LABEL_203;
      }
    }
    v68 = v305;
    v9 = v302;
    v69 = v291;
    if (!*(_DWORD *)(v305 + 28))
    {
      v76 = 0;
      v73 = 0;
      v72 = v313;
      v71 = (unint64_t)v314;
      goto LABEL_62;
    }
    v70 = *(_QWORD *)(v305 + 128);
    v72 = v313;
    v71 = (unint64_t)v314;
    if (!v70)
    {
      v76 = 0;
      v73 = 0;
      goto LABEL_62;
    }
    v73 = 0;
    v74 = *(_DWORD *)(v70 + 52);
    v75 = *(_DWORD *)(v305 + 20) >> 1;
    v76 = v74 < v75;
    if (v280)
    {
LABEL_62:
      v77 = v60;
      goto LABEL_63;
    }
    v77 = v60;
    if (v74 < v75)
    {
      v73 = *(_DWORD *)v305 != -1;
      v76 = 1;
    }
LABEL_63:
    v309 = v76;
    if (*(_QWORD *)(v305 + 136) || *(_DWORD *)(v305 + 40) < *(_DWORD *)(v305 + 36))
    {
      v78 = 1;
    }
    else
    {
      v81 = *(_QWORD *)(v305 + 128);
      if (!v81)
      {
        v312 = 0;
        goto LABEL_67;
      }
      v78 = *(_DWORD *)(v81 + 60) > *(_DWORD *)(v305 + 4);
    }
    v312 = v78;
LABEL_67:
    v310 = 0;
    v79 = 0;
    v80 = 0;
    v290 = *(_QWORD *)(v305 + 216) != 0;
    while (2)
    {
      v306 = v79;
      if (!v309)
        goto LABEL_106;
      v80 = *(uint64_t **)(*(_QWORD *)(v68 + 72) + 32 * (v65 & ~(-1 << *(_DWORD *)(v68 + 52))) + 16);
      if (!v80)
      {
        v310 = 0;
        v80 = 0;
        goto LABEL_106;
      }
      v310 = 0;
      while (1)
      {
        if (v65 != *((_DWORD *)v80 + 10)
          || *((_DWORD *)v80 + 12) != (_DWORD)v63
          || *((_DWORD *)v80 + 13) != (_DWORD)v64)
        {
          goto LABEL_76;
        }
        if (!memcmp(v317, v80 + 7, v72) && !memcmp(v311, (char *)v80 + v72 + 56, __n))
          break;
        v71 = (unint64_t)v314;
        v77 = v316;
LABEL_76:
        v80 = (uint64_t *)*v80;
        if (!v80)
        {
          if (v310 != 1)
            goto LABEL_106;
          v80 = *(uint64_t **)buf;
          v87 = *(_DWORD *)(*(_QWORD *)buf + 24);
          v306 = v87;
          if (v312)
          {
            if (!v73)
            {
LABEL_105:
              v86 = 2;
              v310 = 1;
              if ((*((_DWORD *)v80 + 8)
                                + *((_DWORD *)v80 + 7)
                                + *(_DWORD *)(v68 + 20)
                                - (*(_DWORD *)(v68 + 32)
                                 + *(_DWORD *)(v68 + 16))) >= *(_DWORD *)(v68 + 20) >> 2)
              {
                v83 = 0;
                v82 = 2;
                v85 = v306;
                v309 = 1;
                v84 = 0;
                goto LABEL_203;
              }
              goto LABEL_106;
            }
          }
          else
          {
            v88 = *(_DWORD *)(v68 + 4);
            if (v87 > v88 || !v73)
              goto LABEL_102;
          }
          if ((*(_BYTE *)(v68 + 12) & 2) != 0)
          {
            v90 = (*(_DWORD *)(*(_QWORD *)buf + 48) + *(_DWORD *)(*(_QWORD *)buf + 52) + 32);
            v91 = (float)*(unsigned int *)(v68 + 20);
            if ((float)((float)(v90 + *(_DWORD *)(v68 + 16)) / v91) >= 0.8
              && (float)((float)(*(_DWORD *)(*(_QWORD *)buf + 28)
                                             - *(_DWORD *)(v68 + 32)
                                             + *(_DWORD *)(*(_QWORD *)buf + 32))
                       / v91) < 0.2)
            {
              can_evict_at_least = qenc_has_or_can_evict_at_least(v68, v90);
              v71 = (unint64_t)v314;
              v77 = v316;
              if (can_evict_at_least)
              {
                v82 = 6;
                v310 = 1;
                if (v312)
                {
                  v86 = 0;
                  v85 = v306;
                  v309 = 1;
                  v312 = 1;
                  goto LABEL_99;
                }
                v127 = *(_DWORD *)(v68 + 16);
                v126 = *(_DWORD *)(v68 + 20);
                if (*((_DWORD *)v80 + 8) + *((_DWORD *)v80 + 7) + v126 - (*(_DWORD *)(v68 + 32) + v127) >= v126 >> 2)
                {
                  v312 = 0;
                  v128 = v127 + *((_DWORD *)v80 + 12) + *((_DWORD *)v80 + 13) + 32;
                  v86 = 2;
                  v310 = 1;
                  v309 = 1;
                  if (v128 <= v126)
                  {
                    v82 = 2;
                    v85 = v306;
                  }
                  else
                  {
                    v129 = *(_QWORD *)(v68 + 56);
                    v86 = 2;
                    if ((uint64_t *)v129 == v80)
                    {
                      v83 = 0;
                      v82 = 2;
                      v310 = 1;
                      v309 = 1;
                      v312 = 0;
                      v85 = v306;
                      v84 = 0;
                      goto LABEL_203;
                    }
                    while (1)
                    {
                      v128 = v128 - (*(_DWORD *)(v129 + 48) + *(_DWORD *)(v129 + 52)) - 32;
                      if (v128 <= v126)
                        break;
                      v129 = *(_QWORD *)(v129 + 16);
                      v82 = 2;
                      if ((uint64_t *)v129 == v80)
                      {
                        v310 = 1;
                        v312 = 0;
                        v83 = 0;
                        v84 = 0;
                        v85 = v306;
                        v309 = 1;
                        v86 = 2;
                        goto LABEL_203;
                      }
                    }
                    v312 = 0;
                    v86 = 2;
                    v310 = 1;
                    v85 = v306;
                    v309 = 1;
                    v82 = 2;
                  }
LABEL_99:
                  v83 = 1;
                  v84 = 1;
                  goto LABEL_203;
                }
LABEL_103:
                v93 = 1;
                goto LABEL_104;
              }
            }
          }
          if (v312)
            goto LABEL_105;
          v87 = *((_DWORD *)v80 + 6);
          v88 = *(_DWORD *)(v68 + 4);
LABEL_102:
          if (v87 <= v88)
            goto LABEL_105;
          goto LABEL_103;
        }
      }
      *(_QWORD *)&buf[8 * v310] = v80;
      v71 = (unint64_t)v314;
      v77 = v316;
      if (!v310)
      {
        v310 = 1;
        goto LABEL_76;
      }
      v85 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
      v125 = *(_DWORD *)(*(_QWORD *)buf + 24);
      if (v85 <= v125)
        __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 1767, "candidates[1]->ete_id > candidates[0]->ete_id");
      v310 = 2;
      if (v312)
      {
        v83 = 0;
        v82 = 2;
        v309 = 1;
        v312 = 1;
LABEL_202:
        v86 = 2;
        v84 = 0;
        v80 = *(uint64_t **)&buf[8];
        goto LABEL_203;
      }
      v130 = *(_DWORD *)(v68 + 4);
      v310 = 2;
      if (v85 <= v130)
      {
        v83 = 0;
        v82 = 2;
        v312 = 0;
        v309 = 1;
        goto LABEL_202;
      }
      if (v125 <= v130)
      {
        v310 = 2;
        if ((*(_DWORD *)(*(_QWORD *)buf + 32)
                          + *(_DWORD *)(*(_QWORD *)buf + 28)
                          + *(_DWORD *)(v68 + 20)
                          - (*(_DWORD *)(v68 + 32)
                           + *(_DWORD *)(v68 + 16))) >= *(_DWORD *)(v68 + 20) >> 2)
        {
          v83 = 0;
          v82 = 2;
          v312 = 0;
          v85 = *(_DWORD *)(*(_QWORD *)buf + 24);
          v309 = 1;
          v86 = 2;
          v84 = 0;
          v80 = *(uint64_t **)buf;
          goto LABEL_203;
        }
      }
      else
      {
        v93 = 2;
LABEL_104:
        v310 = v93;
      }
LABEL_106:
      if (name2id_plus_one[v77 & 0x1FF])
      {
        v94 = name2id_plus_one[v77 & 0x1FF] - 1;
        if (LODWORD((&static_table)[3 * v94 + 2]) == (_DWORD)v63)
        {
          v95 = memcmp((&static_table)[3 * v94], v317, v72);
          v71 = (unint64_t)v314;
          v77 = v316;
          if (!v95)
          {
            if (v73)
            {
              v73 = 1;
              if (qenc_has_or_can_evict_at_least(v68, v285))
              {
                v111 = *(_QWORD *)(v68 + 216);
                v112 = 1;
                v71 = (unint64_t)v314;
                v85 = v94;
                if (v111)
                {
                  v113 = 228;
                  if (!*(_DWORD *)(v68 + 232))
                    v113 = 224;
                  v114 = v111 + 8 * *(unsigned int *)(v68 + v113);
                  *(_DWORD *)(v114 + 4) = v65;
                  v115 = v111 - 8;
                  do
                  {
                    v116 = *(_DWORD *)(v115 + 12);
                    v115 += 8;
                  }
                  while (v116 != v65);
                  v112 = v115 < v114;
                }
                if (v309)
                  v117 = v310 == 0;
                else
                  v117 = 1;
                v118 = !v117;
                v119 = (unsigned int *)((char *)&lsqpack_enc_encode_programs + 64 * v112 + 32 * v312 + 16 * v118);
                v84 = *v119;
                v86 = v119[1];
                v83 = v119[2];
                v82 = v119[3];
                v73 = 1;
              }
              else
              {
                v82 = 0;
                v86 = 3;
                v84 = 0;
                v71 = (unint64_t)v314;
                v85 = v94;
                v83 = 0;
              }
            }
            else
            {
              v85 = v94;
              v82 = 0;
              v73 = 0;
              v86 = 3;
              v84 = 0;
              v83 = 0;
            }
            goto LABEL_203;
          }
        }
      }
      v96 = -1;
      if (!v309
        || (v80 = 0,
            v97 = *(_QWORD *)(v68 + 72),
            !*(_QWORD *)(v97 + 32 * (v77 & ~(-1 << *(_DWORD *)(v68 + 52))))))
      {
LABEL_127:
        if (!v73)
        {
          v83 = 0;
          v82 = 0;
          v85 = v306;
          v73 = 0;
          v86 = 6;
          v84 = 0;
          v72 = v313;
          goto LABEL_203;
        }
        v98 = *(_QWORD *)(v68 + 216);
        if (!v98)
          goto LABEL_134;
        v99 = 228;
        if (!*(_DWORD *)(v68 + 232))
          v99 = 224;
        v100 = v98 + 8 * *(unsigned int *)(v68 + v99);
        *(_DWORD *)(v100 + 4) = v65;
        v101 = v98 - 8;
        do
        {
          v102 = *(_DWORD *)(v101 + 12);
          v101 += 8;
        }
        while (v102 != v65);
        if (v101 >= v100)
        {
LABEL_136:
          v72 = v313;
          if (!v98)
            goto LABEL_142;
        }
        else
        {
LABEL_134:
          if ((v96 & 0x80000000) == 0)
          {
            if (!v96)
              goto LABEL_136;
LABEL_146:
            if (v309)
              v109 = v310 == 0;
            else
              v109 = 1;
            v110 = !v109;
            v107 = (unsigned int *)((char *)&lsqpack_enc_encode_programs_20 + 32 * v312 + 16 * v110);
            v84 = *v107;
            v83 = v107[2];
            v72 = v313;
LABEL_153:
            v86 = v107[1];
            v82 = v107[3];
            v73 = 1;
            v85 = v306;
            goto LABEL_203;
          }
          v108 = qenc_has_or_can_evict_at_least(v68, v285);
          v71 = (unint64_t)v314;
          v77 = v316;
          if (v108)
            goto LABEL_146;
          v98 = *(_QWORD *)(v68 + 216);
          v72 = v313;
          if (!v98)
          {
LABEL_142:
            v73 = 1;
            if (!qenc_has_or_can_evict_at_least(v68, v276))
            {
              v83 = 0;
              v82 = 0;
              v85 = v306;
              v86 = 6;
              v84 = 0;
              v71 = (unint64_t)v314;
              goto LABEL_203;
            }
            v107 = (unsigned int *)((char *)&lsqpack_enc_encode_programs_21 + 16 * v312);
            v83 = 2;
            v84 = 5;
            v71 = (unint64_t)v314;
            goto LABEL_153;
          }
        }
        v103 = 228;
        if (!*(_DWORD *)(v68 + 232))
          v103 = 224;
        v104 = (int *)(v98 + 8 * *(unsigned int *)(v68 + v103));
        *v104 = v77;
        v105 = v98 - 8;
        do
        {
          v106 = *(_DWORD *)(v105 + 8);
          v105 += 8;
        }
        while (v106 != v77);
        v73 = 1;
        if (v105 >= (unint64_t)v104)
        {
          v83 = 0;
          v82 = 0;
          v85 = v306;
          v86 = 6;
          v84 = 0;
          goto LABEL_203;
        }
        goto LABEL_142;
      }
      v80 = *(uint64_t **)(v97 + 32 * (v77 & ~(-1 << *(_DWORD *)(v68 + 52))));
      while (2)
      {
        if (v77 != *((_DWORD *)v80 + 11)
          || (*((_DWORD *)v80 + 8)
                          + *((_DWORD *)v80 + 7)
                          + *(_DWORD *)(v68 + 20)
                          - (*(_DWORD *)(v68 + 32)
                           + *(_DWORD *)(v68 + 16))) < *(_DWORD *)(v68 + 20) >> 2
          || *((_DWORD *)v80 + 12) != (_DWORD)v63
          || !v312 && *((_DWORD *)v80 + 6) > *(_DWORD *)(v68 + 4))
        {
LABEL_116:
          v80 = (uint64_t *)v80[1];
          if (!v80)
            goto LABEL_127;
          continue;
        }
        break;
      }
      if (v73)
      {
        if (v96 < 0)
        {
          if (!qenc_has_or_can_evict_at_least(v68, v285))
          {
            v96 = 0;
            goto LABEL_115;
          }
        }
        else if (!v96)
        {
LABEL_115:
          v71 = (unint64_t)v314;
          v77 = v316;
          goto LABEL_116;
        }
        v96 = 1;
      }
      if (memcmp(v317, v80 + 7, v313))
        goto LABEL_115;
      v85 = *((_DWORD *)v80 + 6);
      v71 = (unint64_t)v314;
      if (!v312 || !v73 || !v96)
        goto LABEL_186;
      v120 = *(_QWORD *)(v68 + 216);
      v82 = 6;
      v83 = 1;
      if (v120)
      {
        v121 = 228;
        if (!*(_DWORD *)(v68 + 232))
          v121 = 224;
        v122 = v120 + 8 * *(unsigned int *)(v68 + v121);
        *(_DWORD *)(v122 + 4) = v65;
        v123 = v120 - 8;
        do
        {
          v124 = *(_DWORD *)(v123 + 12);
          v123 += 8;
        }
        while (v124 != v65);
        v82 = 6;
        v83 = 1;
        v309 = 1;
        if (v123 < v122)
        {
          v86 = 0;
          goto LABEL_191;
        }
LABEL_186:
        v83 = 0;
        v84 = 0;
        v82 = 2;
        v309 = 1;
        v86 = 4;
        v72 = v313;
      }
      else
      {
        v86 = 0;
        v309 = 1;
LABEL_191:
        v312 = 1;
        v73 = 1;
        v84 = 3;
        v72 = v313;
      }
LABEL_203:
      if (((1 << v84) & 0x3C) != 0 && ((1 << v86) & 0x78) != 0)
      {
        v131 = 0;
        if ((_DWORD)v63)
        {
          v131 = 0;
          v132 = v317;
          if (v283 < 2)
            goto LABEL_458;
          v133 = 0;
          v134 = 0;
          v135 = v273;
          v136 = v278;
          do
          {
            v137 = *(v135 - 1);
            v138 = *v135;
            v135 += 2;
            v133 += encode_table[2 * v137 + 1];
            v134 += encode_table[2 * v138 + 1];
            v136 -= 2;
          }
          while (v136);
          v131 = v134 + v133;
          v132 = v272;
          if (v283 != v278)
          {
LABEL_458:
            do
            {
              v139 = *v132++;
              v131 += encode_table[2 * v139 + 1];
            }
            while ((unint64_t)v132 < v71);
          }
        }
        v140 = 0;
        v141 = v131 >> 3;
        v142 = (v131 & 7) != 0;
        if (__n)
        {
          v140 = 0;
          v143 = v311;
          if (v284 < 2)
            goto LABEL_459;
          v144 = 0;
          v145 = 0;
          v146 = v275;
          v147 = v279;
          do
          {
            v148 = *(v146 - 1);
            v149 = *v146;
            v146 += 2;
            v144 += encode_table[2 * v148 + 1];
            v145 += encode_table[2 * v149 + 1];
            v147 -= 2;
          }
          while (v147);
          v140 = v145 + v144;
          v143 = v274;
          if (v284 != v279)
          {
LABEL_459:
            do
            {
              v150 = *v143++;
              v140 += encode_table[2 * v150 + 1];
            }
            while ((unint64_t)v143 < v69);
          }
        }
        v151 = v141 + *(_DWORD *)(v68 + 196) + v142 + (v140 >> 3);
        if ((v140 & 7) != 0)
          ++v151;
        if ((float)((float)v151 / (float)(v286 + *(_DWORD *)(v68 + 192))) > 0.95)
        {
          if (!v73)
            __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 1917, "index");
          v152 = *(FILE **)(v68 + 200);
          if (v152)
          {
            v153 = v85;
            fwrite("qenc: debug: ", 0xDuLL, 1uLL, v152);
            fwrite("double lit would result in ratio > 0.95, reset", 0x2EuLL, 1uLL, *(FILE **)(v68 + 200));
            fputc(10, *(FILE **)(v68 + 200));
            v73 = 0;
            v79 = v153;
          }
          else
          {
            v73 = 0;
            v79 = v85;
          }
LABEL_340:
          v71 = (unint64_t)v314;
          v77 = v316;
          continue;
        }
      }
      break;
    }
    v307 = v86;
    v297 = v82;
    v154 = *(FILE **)(v68 + 200);
    v300 = v85;
    if (v154)
    {
      v155 = v84;
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v154);
      fprintf(*(FILE **)(v68 + 200), "program: %s; %s; %s; flags: 0x%X",
        eea2str[v155],
        eha2str[v307],
        eta2str[v83],
        v297);
      fputc(10, *(FILE **)(v68 + 200));
      v84 = v155;
      v85 = v300;
    }
    v156 = &v298[v299];
    switch(v84)
    {
      case 0:
        break;
      case 1:
        if (v299 < 1)
          goto LABEL_314;
        *v298 = 0;
        v163 = *(_DWORD *)v68 - v85;
        if (v163 <= 0x1E)
        {
          *v298 = *(_BYTE *)v68 - v85;
          v84 = 1;
          break;
        }
        *v298 = 31;
        v185 = v298 + 1;
        v186 = v163 - 31;
        if (v163 - 31 < 0x80)
        {
          v188 = v298;
          LOBYTE(v163) = v163 - 31;
          if (v185 >= v301)
            goto LABEL_314;
        }
        else
        {
          do
          {
            if (v185 >= v301)
              goto LABEL_314;
            *v185++ = v186 | 0x80;
            v163 = v186 >> 7;
            v187 = v186 >> 14;
            v186 >>= 7;
          }
          while (v187);
          v188 = v185 - 1;
          if (v185 >= v301)
          {
LABEL_314:
            v209 = *(_QWORD *)(*(_QWORD *)(v9[9] + 8) + 24);
            if (v209 < *(_QWORD *)(*(_QWORD *)(v9[8] + 8) + 24) + *(_QWORD *)(*(_QWORD *)(v9[7] + 8) + 24))
            {
              v210 = *(NSObject **)(*(_QWORD *)(v9[12] + 8) + 24);
              *(_QWORD *)(*(_QWORD *)(v9[12] + 8) + 24) = dispatch_data_create_subrange(v210, 0, v209);
              if (v210)
                dispatch_release(v210);
            }
            *(_QWORD *)(*(_QWORD *)(v9[8] + 8) + 24) += 512;
            alloc = dispatch_data_create_alloc();
            v211 = *(NSObject **)(*(_QWORD *)(v9[12] + 8) + 24);
            *(_QWORD *)(*(_QWORD *)(v9[12] + 8) + 24) = dispatch_data_create_concat(v211, alloc);
            if (v211)
              dispatch_release(v211);
            v40 = v288;
            v41 = v289;
            if (alloc)
LABEL_27:
              dispatch_release(alloc);
LABEL_28:
            *(_QWORD *)(*(_QWORD *)(*v40 + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*v41 + 8) + 24);
            continue;
          }
        }
        *v185 = v163;
        if (v188 + 2 <= v298)
          goto LABEL_314;
        v84 = v188 + 2 - v298;
        break;
      case 2:
        if (v299 < 1)
          goto LABEL_314;
        v164 = v64;
        *v298 = -64;
        if (v85 <= 0x3E)
        {
          v165 = v85 | 0xC0;
          goto LABEL_242;
        }
        *v298 = -1;
        v189 = v298 + 1;
        v190 = v85 - 63;
        if (v190 < 0x80)
          goto LABEL_287;
        while (v189 < v301)
        {
          *v189++ = v190 | 0x80;
          v191 = v190 >> 7;
          v192 = v190 >> 14;
          v190 >>= 7;
          if (!v192)
            goto LABEL_285;
        }
        goto LABEL_314;
      case 3:
        if (v299 < 1)
          goto LABEL_314;
        v164 = v64;
        *v298 = 0x80;
        v166 = *(_DWORD *)v68 - v85;
        if (v166 > 0x3E)
        {
          *v298 = -65;
          v189 = v298 + 1;
          v190 = v166 - 63;
          if ((unint64_t)(v166 - 63) < 0x80)
          {
LABEL_287:
            v194 = v298;
            LOBYTE(v191) = v190;
            if (v189 >= v301)
              goto LABEL_314;
          }
          else
          {
            do
            {
              if (v189 >= v301)
                goto LABEL_314;
              *v189++ = v190 | 0x80;
              v191 = v190 >> 7;
              v193 = v190 >> 14;
              v190 >>= 7;
            }
            while (v193);
LABEL_285:
            v194 = v189 - 1;
            if (v189 >= v301)
              goto LABEL_314;
          }
          v167 = v194 + 2;
          *v189 = v191;
          if (v194 + 2 <= v298)
            goto LABEL_314;
        }
        else
        {
          v165 = (*(_BYTE *)v68 - v85) | 0x80;
LABEL_242:
          *v298 = v165;
          v167 = v298 + 1;
        }
        v168 = lsqpack_enc_enc_str(7, v167, v301 - v167, (unsigned __int8 *)v311, v164);
        v85 = v300;
        if ((v168 & 0x80000000) == 0)
        {
          v84 = &v167[v168] - v298;
          goto LABEL_245;
        }
        goto LABEL_314;
      case 4:
      case 5:
        v281 = v83;
        if (v299 < 1)
          goto LABEL_314;
        v157 = v64;
        v158 = v84;
        *v298 = 64;
        v159 = lsqpack_enc_enc_str(5, v298, v299, (unsigned __int8 *)v317, v63);
        if (v159 < 0)
          goto LABEL_314;
        v160 = &v298[v159];
        v161 = v158 == 4 ? v157 : 0;
        v162 = lsqpack_enc_enc_str(7, v160, v301 - v160, (unsigned __int8 *)v311, v161);
        v85 = v300;
        if (v162 < 0)
          goto LABEL_314;
        v84 = &v160[v162] - v298;
        v83 = v281;
        goto LABEL_245;
      default:
        __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 1989, "EEA_NONE == prog.ep_enc_action");
    }
    break;
  }
LABEL_245:
  v282 = v84;
  switch(v307)
  {
    case 0:
      v85 = *(_DWORD *)v68 + 1;
      v169 = v316;
      v170 = v296;
      goto LABEL_253;
    case 1:
      v170 = v296;
      *v296 = -64;
      if (v295 <= 0)
        goto LABEL_438;
      if (v85 <= 0x3E)
      {
        *v296 = v85 | 0xC0;
        v171 = v296 + 1;
        v169 = v316;
        goto LABEL_334;
      }
      *v296 = -1;
      v195 = v296 + 1;
      v196 = v85 - 63;
      v169 = v316;
      v172 = v294;
      if (v196 < 0x80)
        goto LABEL_346;
      while ((unint64_t)v195 < v294)
      {
        *v195++ = v196 | 0x80;
        v197 = v196 >> 7;
        v204 = v196 >> 14;
        v196 >>= 7;
        if (!v204)
          goto LABEL_344;
      }
      goto LABEL_32;
    case 2:
      v170 = v296;
      if (v85 > *(_DWORD *)(v68 + 156))
      {
        v169 = v316;
LABEL_253:
        v172 = v294;
        *v170 = 16;
        v173 = *(_DWORD *)(v68 + 156);
        if (v85 <= v173)
          __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 2008, "id > enc->qpe_cur_header.base_idx");
        if (v295 <= 0)
LABEL_438:
          __assert_rtn("lsqpack_enc_int", "lsqpack.c", 759, "dst < end");
        v174 = v85 + ~v173;
        if (v174 <= 0xE)
        {
          v175 = (v85 + ~(_BYTE)v173) | 0x10;
          goto LABEL_302;
        }
        *v170 = 31;
        v195 = v170 + 1;
        v196 = v174 - 15;
        if ((unint64_t)(v174 - 15) >= 0x80)
        {
          while ((unint64_t)v195 < v294)
          {
            *v195++ = v196 | 0x80;
            v197 = v196 >> 7;
            v198 = v196 >> 14;
            v196 >>= 7;
            if (!v198)
              goto LABEL_344;
          }
          goto LABEL_32;
        }
        goto LABEL_346;
      }
      *v296 = 0x80;
      v172 = v294;
      v169 = v316;
      if (v295 <= 0)
        goto LABEL_438;
      v203 = *(_DWORD *)(v68 + 156) - v85;
      if (v203 > 0x3E)
      {
        *v296 = -65;
        v195 = v296 + 1;
        v196 = v203 - 63;
        if ((unint64_t)(v203 - 63) >= 0x80)
        {
          do
          {
            if ((unint64_t)v195 >= v294)
              goto LABEL_32;
            *v195++ = v196 | 0x80;
            v197 = v196 >> 7;
            v218 = v196 >> 14;
            v196 >>= 7;
          }
          while (v218);
LABEL_344:
          v219 = v195 - 1;
          if ((unint64_t)v195 >= v172)
            goto LABEL_32;
          goto LABEL_347;
        }
LABEL_346:
        v219 = v170;
        LOBYTE(v197) = v196;
        if ((unint64_t)v195 >= v172)
          goto LABEL_32;
LABEL_347:
        v171 = v219 + 2;
        *v195 = v197;
        if (v219 + 2 > v170)
          goto LABEL_334;
LABEL_32:
        v9 = v302;
        v36 = *(_QWORD *)(*(_QWORD *)(v302[6] + 8) + 24);
        if (v36 < *(_QWORD *)(*(_QWORD *)(v302[5] + 8) + 24) + *(_QWORD *)(*(_QWORD *)(v302[4] + 8) + 24))
        {
          v37 = *(NSObject **)(*(_QWORD *)(v302[13] + 8) + 24);
          *(_QWORD *)(*(_QWORD *)(v302[13] + 8) + 24) = dispatch_data_create_subrange(v37, 0, v36);
          if (v37)
            dispatch_release(v37);
        }
        *(_QWORD *)(*(_QWORD *)(v302[5] + 8) + 24) += 512;
        alloc = dispatch_data_create_alloc();
        v39 = *(NSObject **)(*(_QWORD *)(v302[13] + 8) + 24);
        *(_QWORD *)(*(_QWORD *)(v302[13] + 8) + 24) = dispatch_data_create_concat(v39, alloc);
        if (v39)
          dispatch_release(v39);
        v40 = v292;
        v41 = v293;
        if (alloc)
          goto LABEL_27;
        goto LABEL_28;
      }
      v175 = (*(_BYTE *)(v68 + 156) - v85) | 0x80;
LABEL_302:
      *v170 = v175;
      v171 = v170 + 1;
LABEL_334:
      if ((unint64_t)(v83 - 1) > 1)
      {
        if (v83)
          __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 2117, "prog.ep_tab_action == ETA_NOOP");
        v315 = v171 - v170;
        if ((v297 & 2) == 0)
          goto LABEL_368;
      }
      else
      {
        v214 = v83;
        v215 = v85;
        v64 = v304;
        if (v214 == 1)
          v216 = v304;
        else
          v216 = 0;
        v63 = v308;
        v217 = lsqpack_enc_push_entry(v68, v169, v65, v317, v308, v311, v216);
        if (!v217)
        {
          v73 = 0;
          v79 = v215;
          v9 = v302;
          v69 = v291;
          v72 = v313;
          goto LABEL_340;
        }
        v315 = v171 - v170;
        v220 = *(_DWORD **)(v68 + 128);
        v220[13] += v217[12] + v217[13] + 32;
        if ((v297 & 4) != 0)
        {
          ++v217[9];
          *(_DWORD *)(v68 + 152) |= 2u;
          v221 = v220[15];
          v222 = v217[6];
          if (v221)
          {
            if (v222 <= v221)
              __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 2111, "new_entry->ete_id > enc->qpe_cur_header.hinfo->qhi_max_id");
            v220[15] = v222;
            goto LABEL_361;
          }
          v220[14] = v222;
          v220[15] = v222;
          if ((v297 & 2) == 0)
            goto LABEL_368;
        }
        else
        {
LABEL_361:
          if ((v297 & 2) == 0)
            goto LABEL_368;
        }
      }
      ++*((_DWORD *)v80 + 9);
      v223 = *(_QWORD *)(v68 + 128);
      v224 = *((_DWORD *)v80 + 6);
      v225 = *(_DWORD *)(v223 + 60);
      if (!v225)
      {
        *(_DWORD *)(v223 + 60) = v224;
LABEL_367:
        *(_DWORD *)(v223 + 56) = v224;
        goto LABEL_368;
      }
      if (v225 < v224)
      {
        *(_DWORD *)(v223 + 60) = v224;
        goto LABEL_368;
      }
      if (*(_DWORD *)(v223 + 56) > v224)
        goto LABEL_367;
LABEL_368:
      qenc_remove_overflow_entries(v68);
      v226 = v282;
      if (v290)
      {
        v227 = *(_QWORD *)(v68 + 216);
        if (!v227)
          __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 2132, "enc->qpe_hist_els");
        v228 = *(_DWORD *)(v68 + 228);
        if (*(_DWORD *)(v68 + 144) < v228)
        {
LABEL_373:
          *(_DWORD *)(v227 + 8 * *(unsigned int *)(v68 + 224)) = v316;
          *(_DWORD *)(v227 + 8 * *(unsigned int *)(v68 + 224) + 4) = v65;
          v229 = (*(_DWORD *)(v68 + 224) + 1) % *(_DWORD *)(v68 + 228);
          *(_DWORD *)(v68 + 224) = v229;
          *(_DWORD *)(v68 + 232) |= v229 == 0;
        }
        else
        {
          qenc_hist_update_size(v68, v228 + 4);
          v226 = v282;
          if (*(_DWORD *)(v68 + 228))
          {
            v227 = *(_QWORD *)(v68 + 216);
            goto LABEL_373;
          }
        }
        ++*(_DWORD *)(v68 + 144);
      }
      v230 = v299;
      if (v299 != v226)
      {
        while ((*(_BYTE *)(v68 + 12) & 2) != 0 && *(_DWORD *)v68 != -1)
        {
          v231 = *(float *)(v68 + 208);
          if ((v231 != 0.0
             || *(_QWORD *)(v68 + 136)
             || *(_DWORD *)(v68 + 40) < *(_DWORD *)(v68 + 36)
             || (v232 = *(_QWORD *)(v68 + 128)) != 0 && *(_DWORD *)(v232 + 60) > *(_DWORD *)(v68 + 4))
            && v231 < *(float *)(v68 + 212))
          {
            break;
          }
          v233 = *(uint64_t **)(v68 + 56);
          if (!v233)
            break;
          v234 = 0;
          v235 = &v298[v226];
          v318 = v299 - v226;
          v230 = v226;
          do
          {
            if ((*((_DWORD *)v233 + 8)
                              + *((_DWORD *)v233 + 7)
                              + *(_DWORD *)(v68 + 20)
                              - (*(_DWORD *)(v68 + 32)
                               + *(_DWORD *)(v68 + 16))) >= *(_DWORD *)(v68 + 20) >> 2)
              break;
            if (!v234
              || *((_DWORD *)v233 + 12) + *((_DWORD *)v233 + 13) + 32 >= (v234[12] + v234[13] + 32))
            {
              v236 = (uint64_t *)*v233;
              v237 = *((_DWORD *)v233 + 10);
              if (*v233)
              {
                while (1)
                {
                  if (*((_DWORD *)v236 + 10) == v237)
                  {
                    v238 = *((unsigned int *)v236 + 12);
                    if ((_DWORD)v238 == *((_DWORD *)v233 + 12))
                    {
                      v239 = *((unsigned int *)v236 + 13);
                      if ((_DWORD)v239 == *((_DWORD *)v233 + 13)
                        && !memcmp(v236 + 7, v233 + 7, *((unsigned int *)v236 + 12))
                        && !memcmp((char *)v236 + v238 + 56, (char *)v233 + v238 + 56, v239))
                      {
                        break;
                      }
                    }
                  }
                  v236 = (uint64_t *)*v236;
                  if (!v236)
                    goto LABEL_402;
                }
                v156 = &v298[v299];
              }
              else
              {
LABEL_402:
                v240 = *(_QWORD *)(v68 + 216);
                v156 = &v298[v299];
                if (!v240)
                  goto LABEL_460;
                v241 = 228;
                if (!*(_DWORD *)(v68 + 232))
                  v241 = 224;
                v242 = v240 + 8 * *(unsigned int *)(v68 + v241);
                *(_DWORD *)(v242 + 4) = v237;
                v243 = v240 - 8;
                do
                {
                  v244 = *(_DWORD *)(v243 + 12);
                  v243 += 8;
                }
                while (v244 != v237);
                if (v243 < v242)
                {
LABEL_460:
                  if (qenc_has_or_can_evict_at_least(v68, (*((_DWORD *)v233 + 12) + *((_DWORD *)v233 + 13) + 32)))v234 = v233;
                }
              }
              v226 = v230;
            }
            v233 = (uint64_t *)v233[2];
          }
          while (v233);
          if (!v234)
            break;
          v245 = *(FILE **)(v68 + 200);
          if (v245)
          {
            fwrite("qenc: debug: ", 0xDuLL, 1uLL, v245);
            fwrite("dup draining", 0xCuLL, 1uLL, *(FILE **)(v68 + 200));
            fputc(10, *(FILE **)(v68 + 200));
          }
          *v235 = 0;
          if (v318 <= 0)
            goto LABEL_438;
          v246 = (*(_DWORD *)v68 - v234[6]);
          if (v246 > 0x1E)
          {
            *v235 = 31;
            v248 = v235 + 1;
            v249 = v246 - 31;
            if (v246 - 31 < 0x80)
            {
              v251 = v235;
              LOBYTE(v246) = v246 - 31;
            }
            else
            {
              do
              {
                if (v248 >= v156)
                  goto LABEL_427;
                *v248++ = v249 | 0x80;
                v246 = v249 >> 7;
                v250 = v249 >> 14;
                v249 >>= 7;
              }
              while (v250);
              v251 = v248 - 1;
            }
            if (v248 >= v156)
              goto LABEL_427;
            v247 = (_DWORD)v251 + 2;
            *v248 = v246;
            if (v251 + 2 <= v235)
              goto LABEL_427;
          }
          else
          {
            *v235 = *(_BYTE *)v68 - *((_BYTE *)v234 + 24);
            v247 = (_DWORD)v235 + 1;
          }
          if (!lsqpack_enc_push_entry(v68, v234[11], v234[10], v234 + 14, v234[12], (char *)v234 + v234[12] + 56, v234[13])|| v247 == (_DWORD)v235)
          {
            goto LABEL_427;
          }
          qenc_remove_overflow_entries(v68);
          v226 = (v247 - (_DWORD)v235) + v230;
          if (v299 == v226)
          {
            v230 = v299;
            goto LABEL_427;
          }
        }
        v230 = v226;
      }
LABEL_427:
      v252 = v286 + *(_DWORD *)(v68 + 192);
      v253 = *(_DWORD *)(v68 + 196) + v230 + v315;
      *(_DWORD *)(v68 + 192) = v252;
      *(_DWORD *)(v68 + 196) = v253;
      if (v253 >= 0x80000001)
      {
        *(_DWORD *)(v68 + 192) = (int)(float)((float)((float)v252 * 1000.0) / (float)v253);
        *(_DWORD *)(v68 + 196) = 1000;
        v254 = *(FILE **)(v68 + 200);
        if (v254)
        {
          fwrite("qenc: debug: ", 0xDuLL, 1uLL, v254);
          v255 = *(FILE **)(v68 + 200);
          v256 = *(_DWORD *)(v68 + 192);
          if (v256)
          {
            v257 = (float)*(unsigned int *)(v68 + 196) / (float)v256;
            if (v255)
            {
              fwrite("qenc: debug: ", 0xDuLL, 1uLL, *(FILE **)(v68 + 200));
              fprintf(*(FILE **)(v68 + 200), "bytes out: %u; bytes in: %u, ratio: %.3f",
                *(_DWORD *)(v68 + 196),
                *(_DWORD *)(v68 + 192),
                v257);
              fputc(10, *(FILE **)(v68 + 200));
            }
          }
          else
          {
            v257 = 0.0;
          }
          fprintf(v255, "reset bytes in/out counters, ratio: %.3f", v257);
          fputc(10, *(FILE **)(v68 + 200));
        }
      }
      *(_QWORD *)(*(_QWORD *)(*v293 + 8) + 24) += v315;
      *(_QWORD *)(*(_QWORD *)(*v289 + 8) + 24) += v230;
      return;
    case 3:
      v170 = v296;
      *v296 = v270;
      if (v295 <= 0)
        goto LABEL_438;
      if (v85 <= 0xE)
      {
        *v296 = v270 | v85;
        v178 = v296 + 1;
        v176 = v294;
        goto LABEL_331;
      }
      *v296 = v266;
      v205 = v296 + 1;
      v206 = v85 - 15;
      v176 = v294;
      if (v206 < 0x80)
        goto LABEL_329;
      while ((unint64_t)v205 < v294)
      {
        *v205++ = v206 | 0x80;
        v207 = v206 >> 7;
        v208 = v206 >> 14;
        v206 >>= 7;
        if (!v208)
          goto LABEL_327;
      }
      goto LABEL_32;
    case 4:
      v170 = v296;
      if (v85 > *(_DWORD *)(v68 + 156))
        goto LABEL_262;
      *v296 = v268;
      v176 = v294;
      if (v295 <= 0)
        goto LABEL_438;
      v177 = *(_DWORD *)(v68 + 156) - v85;
      if (v177 > 0xE)
      {
        *v296 = v265;
        v205 = v296 + 1;
        v206 = v177 - 15;
        if ((unint64_t)(v177 - 15) < 0x80)
        {
LABEL_329:
          v213 = v170;
          LOBYTE(v207) = v206;
          if ((unint64_t)v205 >= v176)
            goto LABEL_32;
        }
        else
        {
          do
          {
            if ((unint64_t)v205 >= v294)
              goto LABEL_32;
            *v205++ = v206 | 0x80;
            v207 = v206 >> 7;
            v212 = v206 >> 14;
            v206 >>= 7;
          }
          while (v212);
LABEL_327:
          v213 = v205 - 1;
          if ((unint64_t)v205 >= v176)
            goto LABEL_32;
        }
        v178 = v213 + 2;
        *v205 = v207;
        if (v213 + 2 <= v170)
          goto LABEL_32;
      }
      else
      {
        *v296 = v268 | (*(_BYTE *)(v68 + 156) - v85);
        v178 = v296 + 1;
      }
LABEL_331:
      v184 = v176 - (_QWORD)v178;
LABEL_332:
      v182 = lsqpack_enc_enc_str(7, v178, v184, (unsigned __int8 *)v311, v304);
      v85 = v300;
      v169 = v316;
      if ((v182 & 0x80000000) == 0)
        goto LABEL_333;
      goto LABEL_32;
    case 5:
      v85 = *(_DWORD *)v68 + 1;
      v170 = v296;
LABEL_262:
      *v170 = v271;
      v179 = *(_DWORD *)(v68 + 156);
      if (v85 <= v179)
        __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 2045, "id > enc->qpe_cur_header.base_idx");
      if (v295 <= 0)
        goto LABEL_438;
      v180 = v85 + ~v179;
      if (v180 > 6)
      {
        *v170 = v267;
        v199 = v170 + 1;
        v200 = v180 - 7;
        if (v180 - 7 < 0x80)
        {
          v202 = v170;
          LOBYTE(v180) = v180 - 7;
          if ((unint64_t)v199 >= v294)
            goto LABEL_32;
        }
        else
        {
          do
          {
            if ((unint64_t)v199 >= v294)
              goto LABEL_32;
            *v199++ = v200 | 0x80;
            v180 = v200 >> 7;
            v201 = v200 >> 14;
            v200 >>= 7;
          }
          while (v201);
          v202 = v199 - 1;
          if ((unint64_t)v199 >= v294)
            goto LABEL_32;
        }
        v178 = v202 + 2;
        *v199 = v180;
        if (v202 + 2 <= v170)
          goto LABEL_32;
      }
      else
      {
        *v170 = v271 | (v85 + ~(_BYTE)v179);
        v178 = v170 + 1;
      }
      v181 = v85;
      v182 = lsqpack_enc_enc_str(7, v178, v294 - (_QWORD)v178, (unsigned __int8 *)v311, v304);
      v169 = v316;
      if ((v182 & 0x80000000) == 0)
      {
        v85 = v181;
LABEL_333:
        v171 = &v178[v182];
        goto LABEL_334;
      }
      goto LABEL_32;
    case 6:
      v170 = v296;
      *v296 = v269;
      v183 = lsqpack_enc_enc_str(3, v296, v295, (unsigned __int8 *)v317, v63);
      if (v183 < 0)
        goto LABEL_32;
      v178 = &v296[v183];
      v184 = v294 - (_QWORD)v178;
      goto LABEL_332;
    default:
      __assert_rtn("lsqpack_enc_encode", "lsqpack.c", 2075, "prog.ep_hea_action == EHA_LIT_WITH_NAME_STAT");
  }
}

BOOL ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  NSObject *v5;
  _BOOL8 v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char *v17;
  _BOOL4 v18;
  char v20;
  unsigned int offset;
  os_log_type_t offset_7;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_stream_send_fields_block_invoke_3";
    v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v10 = "%{public}s Encoder stream does not support external data";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
        }
      }
      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_http3_stream_send_fields_block_invoke";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Encoder stream does not support external data, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v10 = "%{public}s Encoder stream does not support external data, no backtrace";
          goto LABEL_31;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v10 = "%{public}s Encoder stream does not support external data, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }
LABEL_32:
    if (v7)
      free(v7);
    return 0;
  }
  offset = 0;
  nw_frame_set_external_data(a2, *(dispatch_data_t *)(a1[6] + 528), &offset);
  v4 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v5 = *(NSObject **)(a1[6] + 528);
  v6 = offset < v4;
  if (offset < v4)
  {
    *(_QWORD *)(a1[6] + 528) = dispatch_data_create_subrange(*(dispatch_data_t *)(a1[6] + 528), offset, 0xFFFFFFFFFFFFFFFFLL);
    if (v5)
      dispatch_release(v5);
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) -= offset;
    return v6;
  }
  if (v5)
  {
    dispatch_release(*(dispatch_object_t *)(a1[6] + 528));
    *(_QWORD *)(a1[6] + 528) = 0;
  }
  if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48) + 8) != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_stream_send_fields_block_invoke";
    v11 = (char *)_os_log_send_and_compose_impl();
    offset_7 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &offset_7, &v20))
      goto LABEL_41;
    if (offset_7 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_fields_block_invoke";
      v14 = "%{public}s Too much space on encoder stream";
    }
    else if (v20)
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      v18 = os_log_type_enabled((os_log_t)gLogObj, offset_7);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v25 = 2082;
          v26 = v17;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Too much space on encoder stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        goto LABEL_41;
      }
      if (!v18)
      {
LABEL_41:
        if (v11)
          free(v11);
        return v6;
      }
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_fields_block_invoke";
      v14 = "%{public}s Too much space on encoder stream, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_fields_block_invoke";
      v14 = "%{public}s Too much space on encoder stream, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_41;
  }
  return v6;
}

BOOL ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_101(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  NSObject *v5;
  _BOOL8 v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char *v17;
  _BOOL4 v18;
  char v20;
  unsigned int offset;
  os_log_type_t offset_7;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_stream_send_fields_block_invoke";
    v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v10 = "%{public}s Fields frame does not support external data";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
        }
      }
      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_http3_stream_send_fields_block_invoke";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Fields frame does not support external data, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v10 = "%{public}s Fields frame does not support external data, no backtrace";
          goto LABEL_31;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v10 = "%{public}s Fields frame does not support external data, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }
LABEL_32:
    if (v7)
      free(v7);
    return 0;
  }
  offset = 0;
  nw_frame_set_external_data(a2, *(dispatch_data_t *)(a1[6] + 520), &offset);
  v4 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v5 = *(NSObject **)(a1[6] + 520);
  v6 = offset < v4;
  if (offset < v4)
  {
    *(_QWORD *)(a1[6] + 520) = dispatch_data_create_subrange(*(dispatch_data_t *)(a1[6] + 520), offset, 0xFFFFFFFFFFFFFFFFLL);
    if (v5)
      dispatch_release(v5);
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) -= offset;
    return v6;
  }
  if (v5)
  {
    dispatch_release(*(dispatch_object_t *)(a1[6] + 520));
    *(_QWORD *)(a1[6] + 520) = 0;
  }
  if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48) + 8) != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_stream_send_fields_block_invoke";
    v11 = (char *)_os_log_send_and_compose_impl();
    offset_7 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &offset_7, &v20))
      goto LABEL_41;
    if (offset_7 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_fields_block_invoke";
      v14 = "%{public}s Too much space in fields frame";
    }
    else if (v20)
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      v18 = os_log_type_enabled((os_log_t)gLogObj, offset_7);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http3_stream_send_fields_block_invoke";
          v25 = 2082;
          v26 = v17;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Too much space in fields frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        goto LABEL_41;
      }
      if (!v18)
      {
LABEL_41:
        if (v11)
          free(v11);
        return v6;
      }
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_fields_block_invoke";
      v14 = "%{public}s Too much space in fields frame, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_fields_block_invoke";
      v14 = "%{public}s Too much space in fields frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_41;
  }
  return v6;
}

uint64_t ___ZL32nw_http3_framer_get_input_framesP15nw_http3_framerjjjPyS1_PbPjP16nw_frame_array_s_block_invoke(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v24;

  v24 = 0;
  v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v24);
  v5 = a1[5];
  if (!v4)
    goto LABEL_28;
  v6 = *(unsigned __int16 *)(v5 + 84);
  if (16 - v6 >= (unint64_t)v24)
    v7 = v24;
  else
    v7 = 16 - v6;
  memcpy((void *)(v5 + v6 + 68), v4, v7);
  v5 = a1[5];
  v9 = *(_WORD *)(v5 + 84) + v7;
  *(_WORD *)(v5 + 84) = v9;
  if (!v9)
    goto LABEL_23;
  v10 = (_DWORD *)(v5 + 68);
  v11 = *(unsigned __int8 *)(v5 + 68);
  if (v11 <= 0x3F)
  {
    v12 = 1;
    goto LABEL_8;
  }
  v17 = v11 >> 6;
  if (v17 == 2)
  {
    if (v9 < 4u)
      goto LABEL_23;
    v11 = bswap32(*v10 & 0xFFFFFF7F);
    v12 = 4;
  }
  else
  {
    if (v17 == 1)
    {
      if (v9 >= 2u)
      {
        v11 = bswap32(*(_WORD *)v10 & 0xFFBF) >> 16;
        v12 = 2;
        goto LABEL_8;
      }
LABEL_23:
      v12 = 0;
      goto LABEL_24;
    }
    if (v9 < 8u)
      goto LABEL_23;
    v11 = bswap64(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFF3FLL);
    v12 = 8;
  }
LABEL_8:
  *(_QWORD *)v5 = v11;
  v13 = v9 - (unint64_t)v12;
  if (v9 != (unint64_t)v12)
  {
    v14 = *((unsigned __int8 *)v10 + v12);
    if (v14 <= 0x3F)
    {
      v15 = 1;
LABEL_11:
      v12 += v15;
      *(_WORD *)(v5 + 84) = 0;
      v16 = 1;
      *(_QWORD *)(v5 + 8) = v14;
      *(_QWORD *)(v5 + 16) = v14;
      goto LABEL_25;
    }
    v18 = v14 >> 6;
    if (v18 == 2)
    {
      if (v13 >= 4)
      {
        v14 = bswap32(*(_DWORD *)((char *)v10 + v12) & 0xFFFFFF7F);
        v15 = 4;
        goto LABEL_11;
      }
    }
    else if (v18 == 1)
    {
      if (v13 >= 2)
      {
        v14 = bswap32(*(_WORD *)((_BYTE *)v10 + v12) & 0xFFBF) >> 16;
        v15 = 2;
        goto LABEL_11;
      }
    }
    else if (v13 >= 8)
    {
      v14 = bswap64(*(_QWORD *)((_BYTE *)v10 + v12) & 0xFFFFFFFFFFFFFF3FLL);
      v15 = 8;
      goto LABEL_11;
    }
  }
LABEL_24:
  v16 = 0;
LABEL_25:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v16;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    nw_frame_claim(a2, v8, v12 - v6, 0);
    v19 = (unsigned int *)a1[6];
    v20 = 0;
    if (v19)
      *v19 = v12;
    return v20;
  }
LABEL_28:
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD **)(a2 + 40);
  if (v21)
  {
    *(_QWORD *)(v21 + 40) = v22;
    v22 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(v5 + 56) = v22;
  }
  *v22 = v21;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v20 = 1;
  nw_frame_finalize(a2);
  return v20;
}

uint64_t nw_http3_framer_deliver_http3_frame_body(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _QWORD *a5, _QWORD *a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, uint64_t);
  void *v38;
  _BYTE *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[2];
  uint64_t (*v50)(_QWORD *);
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  _BYTE buf[24];
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  v59 = &v58;
  v61 = 0;
  v60 = 0x2000000000;
  v54 = 0;
  v55 = &v54;
  v57 = 0;
  v56 = 0x2000000000;
  v16 = MEMORY[0x1E0C809B0];
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 0x40000000;
  v50 = (uint64_t (*)(_QWORD *))___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke;
  v51 = &unk_1E14A7ED0;
  v52 = &v58;
  v53 = &v54;
  v17 = *(_QWORD *)(a1 + 48);
  do
  {
    if (!v17)
      break;
    v18 = *(_QWORD *)(v17 + 32);
    v19 = v50(v49);
    v17 = v18;
  }
  while ((v19 & 1) != 0);
  v20 = *((unsigned int *)v59 + 6);
  v21 = *(_QWORD *)(a1 + 16);
  if (v20 < a3 && v21 > v20)
  {
    v23 = *(_QWORD *)(a1 + 40);
    if (*((_DWORD *)v55 + 6) < a4 && v23 != 0)
    {
      v25 = *(_QWORD *)(v23 + 24);
      if (v25)
      {
        if (*(_QWORD *)(v25 + 80))
        {
          v45 = 0;
          v46 = &v45;
          if (v21 >= a2)
            LODWORD(v21) = a2;
          v26 = (v21 - v20);
          if (v21 < v20 && gLogDatapath)
          {
            v35 = v23;
            v33 = __nwlog_obj();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            {
              v34 = *((unsigned int *)v59 + 6);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http3_framer_deliver_http3_frame_body";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "final_minimum_bytes";
              *(_WORD *)&buf[22] = 2048;
              v63 = v34;
              v64 = 2048;
              v65 = v26;
              _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
            v23 = v35;
            v16 = MEMORY[0x1E0C809B0];
          }
          if (!(*(unsigned int (**)(void))(*(_QWORD *)(v23 + 24) + 80))())
          {
            v31 = 0;
            goto LABEL_26;
          }
          if (v45)
          {
            **(_QWORD **)(a1 + 56) = v45;
            v27 = v46;
            *(_QWORD *)(v45 + 40) = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v27;
          }
        }
      }
    }
  }
  *a5 = *(_QWORD *)a1;
  *a6 = *(_QWORD *)(a1 + 8);
  *a7 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  LODWORD(v63) = 0;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v45 = 0;
  v46 = &v45;
  v48 = 0;
  v47 = 0x2000000000;
  v36[0] = v16;
  v36[1] = 0x40000000;
  v37 = ___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke_73;
  v38 = &unk_1E14A7EF8;
  v44 = a3;
  v41 = a1;
  v42 = a8;
  v39 = buf;
  v40 = &v45;
  v43 = a7;
  v28 = *(_QWORD *)(a1 + 48);
  do
  {
    if (!v28)
      break;
    v29 = *(_QWORD *)(v28 + 32);
    v30 = ((uint64_t (*)(_QWORD *))v37)(v36);
    v28 = v29;
  }
  while ((v30 & 1) != 0);
  v31 = *((unsigned int *)v46 + 6);
  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(buf, 8);
LABEL_26:
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v58, 8);
  return v31;
}

uint64_t ___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += nw_frame_unclaimed_length(a2);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return 1;
}

uint64_t ___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke_73(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  char *backtrace_string;
  _BOOL4 v37;
  char v38;
  os_log_type_t type;
  uint64_t v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD **)(a2 + 40);
  v6 = (_QWORD *)(a2 + 32);
  if (v4)
  {
    *(_QWORD *)(v4 + 40) = v5;
    v5 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) = v5;
  }
  *v5 = v4;
  *v6 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = nw_frame_unclaimed_length((_DWORD *)a2);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(unsigned int *)(v8 + 24);
  v10 = *(unsigned int *)(a1 + 72);
  v11 = v10 - v9;
  if (v10 < v9)
    v11 = 0;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) + v9 <= v10)
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  else
    v12 = v11;
  v13 = v7;
  if (v12 < v7)
  {
    v40 = a2;
    v14 = nw_frame_split(&v40, v12);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(v15 + 16) - v12;
    *(_QWORD *)(v15 + 16) = v16;
    if (!v16)
      **(_BYTE **)(a1 + 64) = 1;
    if (v14)
    {
      v17 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(v14 + 32) = 0;
      v18 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v14 + 40) = v18;
      *v18 = v14;
      *(_QWORD *)(v17 + 8) = v14 + 32;
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v19 = *(_QWORD *)(a1 + 48);
      v20 = v40;
      v22 = *(_QWORD *)(v19 + 48);
      v21 = (uint64_t *)(v19 + 48);
      v23 = v40;
      *(_QWORD *)(v40 + 32) = v22;
      v24 = v23 + 32;
      v25 = (uint64_t *)(v22 + 40);
      if (v22)
        v26 = v25;
      else
        v26 = v21 + 1;
      *v26 = v24;
      *v21 = v20;
      *(_QWORD *)(v20 + 40) = v21;
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
    v32 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v32, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = gLogObj;
        v34 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
        v35 = "%{public}s nw_frame_split returned NULL frame";
        goto LABEL_32;
      }
      if (!v38)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = gLogObj;
        v34 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
        v35 = "%{public}s nw_frame_split returned NULL frame, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      v34 = type;
      v37 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
          v43 = 2082;
          v44 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s nw_frame_split returned NULL frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_33;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
        v35 = "%{public}s nw_frame_split returned NULL frame, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v33, v34, v35, buf, 0xCu);
      }
    }
LABEL_33:
    if (v32)
      free(v32);
    return 0;
  }
  *(_DWORD *)(v8 + 24) = v9 + v7;
  v27 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 32) = 0;
  v28 = *(uint64_t **)(v27 + 8);
  *(_QWORD *)(a2 + 40) = v28;
  *v28 = a2;
  *(_QWORD *)(v27 + 8) = v6;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v29 = *(_QWORD *)(a1 + 48);
  result = 1;
  v31 = *(_QWORD *)(v29 + 16) - v13;
  *(_QWORD *)(v29 + 16) = v31;
  if (v31)
    return result;
  **(_BYTE **)(a1 + 64) = 1;
  return 0;
}

void ___ZL41nw_protocol_http3_uni_stream_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  const char *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  char v32;
  os_log_type_t type;
  _BYTE buf[24];
  char *v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v1)
  {
    v2 = v1;
    v3 = (_QWORD *)(v1 + 104);
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60151;
    v35 = (char *)&__block_descriptor_tmp_26_60152;
    v36 = v3;
    v37 = 0;
    v4 = *v3;
    do
    {
      if (!v4)
        break;
      v5 = *(_QWORD *)(v4 + 32);
      v6 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v4 = v5;
    }
    while ((v6 & 1) != 0);
    v7 = *(_QWORD *)(v2 + 32);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(void (**)(void))(v8 + 8);
        if (v9)
        {
          v9();
LABEL_10:
          nw_protocol_http3_uni_stream_destroy(v2);
          return;
        }
      }
    }
    __nwlog_obj();
    v10 = *(_QWORD *)(v2 + 32);
    v11 = "invalid";
    if (v10)
    {
      v12 = *(const char **)(v10 + 16);
      if (v12)
        v11 = v12;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v11;
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v13, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_43;
        v16 = *(_QWORD *)(v2 + 32);
        v17 = "invalid";
        if (v16)
        {
          v18 = *(const char **)(v16 + 16);
          if (v18)
            v17 = v18;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v17;
        v19 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
        goto LABEL_42;
      }
      if (!v32)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_43;
        v26 = *(_QWORD *)(v2 + 32);
        v27 = "invalid";
        if (v26)
        {
          v28 = *(const char **)(v26 + 16);
          if (v28)
            v27 = v28;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v27;
        v19 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v21 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v21)
        {
          v22 = *(_QWORD *)(v2 + 32);
          v23 = "invalid";
          if (v22)
          {
            v24 = *(const char **)(v22 + 16);
            if (v24)
              v23 = v24;
          }
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v23;
          *(_WORD *)&buf[22] = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_43;
      }
      if (v21)
      {
        v29 = *(_QWORD *)(v2 + 32);
        v30 = "invalid";
        if (v29)
        {
          v31 = *(const char **)(v29 + 16);
          if (v31)
            v30 = v31;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v30;
        v19 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_42:
        _os_log_impl(&dword_182FBE000, v14, v15, v19, buf, 0x16u);
      }
    }
LABEL_43:
    if (v13)
      free(v13);
    goto LABEL_10;
  }
}

void ___ZL31nw_protocol_http3_get_callbacksv_block_invoke()
{
  qword_1EDCE4F90 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCE4F98 = nw_protocol_default_waiting_for_output;
  qword_1EDCE4F50 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCE4F58 = nw_protocol_default_unregister_notification;
  qword_1EDCE4ED0 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCE4ED8 = nw_protocol_http3_connect;
  qword_1EDCE4EE0 = (uint64_t)nw_protocol_http3_disconnect;
  unk_1EDCE4EE8 = nw_protocol_http3_connected;
  qword_1EDCE4EF0 = (uint64_t)nw_protocol_http3_disconnected;
  unk_1EDCE4EF8 = nw_protocol_http3_error;
  nw_protocol_http3_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http3_add_input_handler;
  *(_QWORD *)algn_1EDCE4EC8 = nw_protocol_http3_remove_input_handler;
  qword_1EDCE4F00 = (uint64_t)nw_protocol_http3_input_available;
  unk_1EDCE4F08 = nw_protocol_http3_output_available;
  qword_1EDCE4F10 = (uint64_t)nw_protocol_http3_get_input_frames;
  unk_1EDCE4F18 = nw_protocol_http3_uni_stream_get_output_frames;
  qword_1EDCE4FA0 = (uint64_t)nw_protocol_default_copy_info;
  unk_1EDCE4FA8 = nw_protocol_http3_add_listen_handler;
  qword_1EDCE4FB0 = (uint64_t)nw_protocol_http3_remove_listen_handler;
  unk_1EDCE4FB8 = nw_protocol_default_get_message_properties;
  qword_1EDCE4F40 = (uint64_t)nw_protocol_http3_get_local_endpoint;
  unk_1EDCE4F48 = nw_protocol_http3_get_remote_endpoint;
  qword_1EDCE4F30 = (uint64_t)nw_protocol_http3_get_parameters;
  unk_1EDCE4F38 = nw_protocol_http3_get_path;
  qword_1EDCE4F60 = (uint64_t)nw_protocol_http3_notify;
  unk_1EDCE4F68 = nw_protocol_default_updated_path;
  qword_1EDCE4F20 = (uint64_t)nw_protocol_http3_uni_stream_finalize_output_frames;
  unk_1EDCE4F28 = nw_protocol_http3_link_state;
  qword_1EDCE4F80 = (uint64_t)nw_protocol_http3_output_finished;
  unk_1EDCE4F88 = nw_protocol_http3_get_output_local_endpoint;
  qword_1EDCE4FC0 = (uint64_t)nw_protocol_http3_reset;
  unk_1EDCE4FC8 = nw_protocol_default_input_flush;
  qword_1EDCE4F70 = (uint64_t)nw_protocol_http3_supports_external_data;
  unk_1EDCE4F78 = nw_protocol_http3_input_finished;
}

uint64_t nw_protocol_http3_connect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_connect";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &type, &v20))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_connect";
      v14 = "%{public}s called with null protocol";
LABEL_60:
      _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      goto LABEL_61;
    }
    if (!v20)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http3_connect";
        v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http3_connect";
        v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (!v16)
      goto LABEL_47;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_http3_connect";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
    _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
    goto LABEL_47;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_connect";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &type, &v20))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_connect";
      v14 = "%{public}s called with null http3";
      goto LABEL_60;
    }
    if (!v20)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http3_connect";
        v14 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http3_connect";
        v14 = "%{public}s called with null http3, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (!v18)
      goto LABEL_47;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_http3_connect";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null http3, dumping backtrace:%{public}s";
    goto LABEL_46;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (a2)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_http3_connect";
    v24 = 2048;
    v25 = handle;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v4, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_http3_connect";
          v24 = 2048;
          v25 = handle;
          v7 = "%{public}s http3 %p called";
LABEL_17:
          _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0x16u);
        }
      }
      else if (v20)
      {
        v8 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        v9 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v8)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446722;
            v23 = "nw_protocol_http3_connect";
            v24 = 2048;
            v25 = handle;
            v26 = 2082;
            v27 = v8;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s http3 %p called, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v8);
          goto LABEL_18;
        }
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_http3_connect";
          v24 = 2048;
          v25 = handle;
          v7 = "%{public}s http3 %p called, no backtrace";
          goto LABEL_17;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_http3_connect";
          v24 = 2048;
          v25 = handle;
          v7 = "%{public}s http3 %p called, backtrace limit exceeded";
          goto LABEL_17;
        }
      }
    }
LABEL_18:
    if (v4)
      free(v4);
    return 1;
  }
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_http3_connect";
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v11, &type, &v20))
    goto LABEL_61;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http3_connect";
        v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v19 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http3_connect";
        v14 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http3_connect";
      v24 = 2082;
      v25 = backtrace_string;
      v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
LABEL_47:
    free(backtrace_string);
    goto LABEL_61;
  }
  v12 = __nwlog_obj();
  v13 = type;
  if (os_log_type_enabled(v12, type))
  {
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_connect";
    v14 = "%{public}s called with null other_protocol";
    goto LABEL_60;
  }
LABEL_61:
  if (v11)
    free(v11);
  return 0;
}

void nw_protocol_http3_connected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _WORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  nw_protocol_identifier *identifier;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  unsigned int (*waiting_for_output)(void);
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  int v18;
  void *v19;
  _BYTE *v20;
  _BOOL4 v21;
  NSObject *v22;
  NSObject *v23;
  __n128 v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  nw_protocol *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  nw_protocol *v36;
  const char *v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  int v41;
  char *v42;
  _BOOL4 v43;
  nw_protocol *v44;
  char *backtrace_string;
  _BOOL4 v46;
  _BOOL4 v47;
  nw_protocol *v48;
  NSObject *v49;
  int v50;
  NSObject *v51;
  int v52;
  nw_protocol *v53;
  _BOOL4 v54;
  _BOOL4 v55;
  char v56;
  os_log_type_t type;
  size_t size_ptr;
  void *buffer_ptr;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  nw_protocol *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  nw_protocol *v69;
  __int16 v70;
  nw_protocol_identifier *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_protocol_http3_connected";
    v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (!__nwlog_fault(v25, &buffer_ptr, &size_ptr))
      goto LABEL_52;
    if (buffer_ptr == 17)
    {
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_protocol_http3_connected";
      v28 = "%{public}s called with null protocol";
    }
    else
    {
      if ((_BYTE)size_ptr)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v26 = __nwlog_obj();
        v27 = buffer_ptr;
        v46 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
        if (backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446466;
            v61 = "nw_protocol_http3_connected";
            v62 = 2082;
            v63 = (nw_protocol *)backtrace_string;
            _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_protocol_http3_connected";
          v28 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_protocol_http3_connected";
      v28 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_protocol_http3_connected";
    v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (!__nwlog_fault(v25, &buffer_ptr, &size_ptr))
      goto LABEL_52;
    if (buffer_ptr == 17)
    {
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_protocol_http3_connected";
      v28 = "%{public}s called with null http3";
      goto LABEL_51;
    }
    if ((_BYTE)size_ptr)
    {
      v29 = (char *)__nw_create_backtrace_string();
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      v47 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
      if (!v29)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_protocol_http3_connected";
          v28 = "%{public}s called with null http3, no backtrace";
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      if (!v47)
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_protocol_http3_connected";
      v62 = 2082;
      v63 = (nw_protocol *)v29;
      v31 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    v26 = __nwlog_obj();
    v27 = buffer_ptr;
    if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v61 = "nw_protocol_http3_connected";
    v28 = "%{public}s called with null http3, backtrace limit exceeded";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
    goto LABEL_52;
  }
  v5 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      v38 = __nwlog_obj();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        v39 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        v61 = "nw_protocol_http3_connected";
        v62 = 2082;
        v63 = (nw_protocol *)(handle + 1289);
        v64 = 2080;
        v65 = " ";
        v66 = 1024;
        v67 = v39;
        _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Got a connected event from the lower layer", buf, 0x26u);
      }
    }
  }
  v6 = *((_QWORD *)handle + 110);
  if (v6)
  {
    v7 = 0;
    do
    {
      ++v7;
      v6 = *(_QWORD *)(v6 + 544);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      v40 = __nwlog_obj();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        v41 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136447234;
        v61 = "nw_protocol_http3_connected";
        v62 = 2082;
        v63 = (nw_protocol *)(handle + 1289);
        v64 = 2080;
        v65 = " ";
        v66 = 1024;
        v67 = v41;
        v68 = 1024;
        LODWORD(v69) = v7;
        _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> http3 has %u streams", buf, 0x2Cu);
      }
    }
  }
  v8 = *(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16);
  if (a1->output_handler != a2)
  {
    if ((v8 & 0x400000) == 0 && gLogDatapath)
    {
      v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *((_DWORD *)handle + 320);
        identifier = a2->identifier;
        *(_DWORD *)buf = 136447490;
        v61 = "nw_protocol_http3_connected";
        v62 = 2082;
        v63 = (nw_protocol *)(handle + 1289);
        v64 = 2080;
        v65 = " ";
        v66 = 1024;
        v67 = v10;
        v68 = 2048;
        v69 = a2;
        v70 = 2080;
        v71 = identifier;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> connected protocol %p (%s) is not our output_handler, ignoring", buf, 0x3Au);
      }
    }
    return;
  }
  handle[1375] = BYTE2(v8);
  *v5 = v8 | 0x10;
  output_handler = a1->output_handler;
  if (!output_handler
    || (callbacks = output_handler->callbacks) == 0
    || (waiting_for_output = (unsigned int (*)(void))callbacks->waiting_for_output) == 0)
  {
    __nwlog_obj();
    v32 = a1->output_handler;
    *(_DWORD *)buf = 136446466;
    v61 = "nw_protocol_http3_connected";
    v62 = 2048;
    v63 = v32;
    v33 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (!__nwlog_fault(v33, &buffer_ptr, &size_ptr))
      goto LABEL_106;
    if (buffer_ptr == 17)
    {
      v34 = __nwlog_obj();
      v35 = buffer_ptr;
      if (!os_log_type_enabled(v34, (os_log_type_t)buffer_ptr))
        goto LABEL_106;
      v36 = a1->output_handler;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_protocol_http3_connected";
      v62 = 2048;
      v63 = v36;
      v37 = "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set";
    }
    else if ((_BYTE)size_ptr)
    {
      v42 = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = buffer_ptr;
      v43 = os_log_type_enabled(v34, (os_log_type_t)buffer_ptr);
      if (v42)
      {
        if (v43)
        {
          v44 = a1->output_handler;
          *(_DWORD *)buf = 136446722;
          v61 = "nw_protocol_http3_connected";
          v62 = 2048;
          v63 = v44;
          v64 = 2082;
          v65 = v42;
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v42);
LABEL_106:
        if (v33)
          free(v33);
        if ((*v5 & 0x100) != 0)
          goto LABEL_24;
        goto LABEL_25;
      }
      if (!v43)
        goto LABEL_106;
      v53 = a1->output_handler;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_protocol_http3_connected";
      v62 = 2048;
      v63 = v53;
      v37 = "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set, no backtrace";
    }
    else
    {
      v34 = __nwlog_obj();
      v35 = buffer_ptr;
      if (!os_log_type_enabled(v34, (os_log_type_t)buffer_ptr))
        goto LABEL_106;
      v48 = a1->output_handler;
      *(_DWORD *)buf = 136446466;
      v61 = "nw_protocol_http3_connected";
      v62 = 2048;
      v63 = v48;
      v37 = "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v34, v35, v37, buf, 0x16u);
    goto LABEL_106;
  }
  if (waiting_for_output())
    v16 = 256;
  else
    v16 = 0;
  v17 = *(_WORD *)(handle + 1373) & 0xFEFF | v16;
  *v5 = v17;
  if ((v17 & 0x100) != 0)
LABEL_24:
    nw_http3_signal_output_pending((uint64_t)handle, 1);
LABEL_25:
  nw_http3_control_stream_process_output((uint64_t)handle, v15);
  v18 = (unsigned __int16)*v5;
  if ((v18 & 0x100) == 0)
  {
    if (((v18 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v49 = __nwlog_obj();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          v50 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          v61 = "nw_protocol_http3_connected";
          v62 = 2082;
          v63 = (nw_protocol *)(handle + 1289);
          v64 = 2080;
          v65 = " ";
          v66 = 1024;
          v67 = v50;
          _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> http3 connection is connected", buf, 0x26u);
        }
      }
    }
    if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v51 = __nwlog_obj();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          v52 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          v61 = "nw_http3_add_edges";
          v62 = 2082;
          v63 = (nw_protocol *)(handle + 1289);
          v64 = 2080;
          v65 = " ";
          v66 = 1024;
          v67 = v52;
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    v19 = (void *)*((_QWORD *)handle + 137);
    if (v19)
    {
      v20 = v19;
      v21 = (v20[231] & 4) == 0;

      if (!v21)
      {
        nw_endpoint_add_edges_for_instance(*((void **)handle + 137), (unsigned __int8 *)handle, 1);
        return;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v61 = "nw_http3_add_edges";
      v25 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(buffer_ptr) = 16;
      LOBYTE(size_ptr) = 0;
      if (!__nwlog_fault(v25, &buffer_ptr, &size_ptr))
        goto LABEL_52;
      if (buffer_ptr == 17)
      {
        v26 = __nwlog_obj();
        v27 = buffer_ptr;
        if (os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_http3_add_edges";
          v28 = "%{public}s http3->remote_endpoint is not registered when connected";
          goto LABEL_51;
        }
LABEL_52:
        if (!v25)
          return;
        goto LABEL_53;
      }
      if (!(_BYTE)size_ptr)
      {
        v26 = __nwlog_obj();
        v27 = buffer_ptr;
        if (os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_http3_add_edges";
          v28 = "%{public}s http3->remote_endpoint is not registered when connected, backtrace limit exceeded";
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      v29 = (char *)__nw_create_backtrace_string();
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      v55 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
      if (!v29)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_http3_add_edges";
          v28 = "%{public}s http3->remote_endpoint is not registered when connected, no backtrace";
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        v61 = "nw_http3_add_edges";
        v62 = 2082;
        v63 = (nw_protocol *)v29;
        v31 = "%{public}s http3->remote_endpoint is not registered when connected, dumping backtrace:%{public}s";
        goto LABEL_44;
      }
LABEL_45:
      free(v29);
      if (!v25)
        return;
LABEL_53:
      free(v25);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_http3_add_edges";
    v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (!__nwlog_fault(v25, &buffer_ptr, &size_ptr))
      goto LABEL_52;
    if (buffer_ptr == 17)
    {
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_http3_add_edges";
      v28 = "%{public}s http3->remote_endpoint is NULL when connected";
      goto LABEL_51;
    }
    if (!(_BYTE)size_ptr)
    {
      v26 = __nwlog_obj();
      v27 = buffer_ptr;
      if (os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_http3_add_edges";
        v28 = "%{public}s http3->remote_endpoint is NULL when connected, backtrace limit exceeded";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    v29 = (char *)__nw_create_backtrace_string();
    v26 = __nwlog_obj();
    v27 = buffer_ptr;
    v54 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
    if (!v29)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_http3_add_edges";
        v28 = "%{public}s http3->remote_endpoint is NULL when connected, no backtrace";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v54)
      goto LABEL_45;
    *(_DWORD *)buf = 136446466;
    v61 = "nw_http3_add_edges";
    v62 = 2082;
    v63 = (nw_protocol *)v29;
    v31 = "%{public}s http3->remote_endpoint is NULL when connected, dumping backtrace:%{public}s";
LABEL_44:
    _os_log_impl(&dword_182FBE000, v26, v27, v31, buf, 0x16u);
    goto LABEL_45;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v22 = *((_QWORD *)handle + 144);
  if (!v22)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_protocol_http3_connected";
    v25 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v56 = 0;
    if (!__nwlog_fault(v25, &type, &v56))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      v27 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_protocol_http3_connected";
      v28 = "%{public}s Could not find persisted SETTINGS";
      goto LABEL_51;
    }
    if (!v56)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_protocol_http3_connected";
      v28 = "%{public}s Could not find persisted SETTINGS, backtrace limit exceeded";
      goto LABEL_51;
    }
    v29 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = gLogObj;
    v27 = type;
    v30 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v29)
    {
      if (!v30)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v61 = "nw_protocol_http3_connected";
      v28 = "%{public}s Could not find persisted SETTINGS, no backtrace";
      goto LABEL_51;
    }
    if (!v30)
      goto LABEL_45;
    *(_DWORD *)buf = 136446466;
    v61 = "nw_protocol_http3_connected";
    v62 = 2082;
    v63 = (nw_protocol *)v29;
    v31 = "%{public}s Could not find persisted SETTINGS, dumping backtrace:%{public}s";
    goto LABEL_44;
  }
  v23 = dispatch_data_create_map(v22, (const void **)&buffer_ptr, &size_ptr);
  nw_http3_parse_settings((uint64_t)handle, buffer_ptr, (unsigned __int16)size_ptr, v24);
  if (v23)
    dispatch_release(v23);
}

void nw_protocol_http3_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_disconnect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v4, &type, &v20))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_disconnect";
      v7 = "%{public}s called with null protocol";
      goto LABEL_61;
    }
    if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v16 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (!v16)
          goto LABEL_47;
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_http3_disconnect";
        v24 = 2082;
        v25 = backtrace_string;
        v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
      if (!v16)
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_disconnect";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_disconnect";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_61:
    v10 = v13;
    v11 = v14;
    v12 = 12;
    goto LABEL_18;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_disconnect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v4, &type, &v20))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_disconnect";
      v7 = "%{public}s called with null http3";
      goto LABEL_61;
    }
    if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v18 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (!v18)
          goto LABEL_47;
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_http3_disconnect";
        v24 = 2082;
        v25 = backtrace_string;
        v17 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
      if (!v18)
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_disconnect";
      v7 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_http3_disconnect";
      v7 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    goto LABEL_61;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (a2)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_http3_disconnect";
    v24 = 2048;
    v25 = handle;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v4, &type, &v20))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http3_disconnect";
      v24 = 2048;
      v25 = handle;
      v7 = "%{public}s http3 %p called";
LABEL_17:
      v10 = v5;
      v11 = v6;
      v12 = 22;
LABEL_18:
      _os_log_impl(&dword_182FBE000, v10, v11, v7, buf, v12);
      goto LABEL_19;
    }
    if (!v20)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http3_disconnect";
      v24 = 2048;
      v25 = handle;
      v7 = "%{public}s http3 %p called, backtrace limit exceeded";
      goto LABEL_17;
    }
    v8 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v8)
    {
      if (!v9)
        goto LABEL_19;
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http3_disconnect";
      v24 = 2048;
      v25 = handle;
      v7 = "%{public}s http3 %p called, no backtrace";
      goto LABEL_17;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446722;
      v23 = "nw_protocol_http3_disconnect";
      v24 = 2048;
      v25 = handle;
      v26 = 2082;
      v27 = v8;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s http3 %p called, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v8);
LABEL_19:
    if (!v4)
      return;
    goto LABEL_20;
  }
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_http3_disconnect";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v4, &type, &v20))
    goto LABEL_19;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_disconnect";
    v7 = "%{public}s called with null other_protocol";
    goto LABEL_61;
  }
  if (!v20)
  {
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_disconnect";
    v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_61;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v13 = __nwlog_obj();
  v14 = type;
  v19 = os_log_type_enabled(v13, type);
  if (!backtrace_string)
  {
    if (!v19)
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http3_disconnect";
    v7 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_61;
  }
  if (!v19)
    goto LABEL_47;
  *(_DWORD *)buf = 136446466;
  v23 = "nw_protocol_http3_disconnect";
  v24 = 2082;
  v25 = backtrace_string;
  v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_46:
  _os_log_impl(&dword_182FBE000, v13, v14, v17, buf, 0x16u);
LABEL_47:
  free(backtrace_string);
  if (v4)
LABEL_20:
    free(v4);
}

void nw_protocol_http3_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _WORD *v4;
  int v5;
  unsigned int v6;
  nw_protocol *output_handler;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  NSObject *v37;
  int v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  const char *v74;
  char *v75;
  _BOOL4 v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  char *backtrace_string;
  _BOOL4 v81;
  char *v82;
  _BOOL4 v83;
  char *v84;
  _BOOL4 v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  char *v89;
  _BOOL4 v90;
  uint64_t v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  char v112;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v115;
  __int16 v116;
  char *v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  int v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_protocol_http3_disconnected";
    v49 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v112 = 0;
    if (!__nwlog_fault(v49, &type, &v112))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v50 = __nwlog_obj();
      v51 = type;
      if (!os_log_type_enabled(v50, type))
        goto LABEL_153;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_protocol_http3_disconnected";
      v52 = "%{public}s called with null protocol";
    }
    else if (v112)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v50 = __nwlog_obj();
      v51 = type;
      v81 = os_log_type_enabled(v50, type);
      if (backtrace_string)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446466;
          v115 = "nw_protocol_http3_disconnected";
          v116 = 2082;
          v117 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_153:
        if (!v49)
          return;
LABEL_154:
        free(v49);
        return;
      }
      if (!v81)
        goto LABEL_153;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_protocol_http3_disconnected";
      v52 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v50 = __nwlog_obj();
      v51 = type;
      if (!os_log_type_enabled(v50, type))
        goto LABEL_153;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_protocol_http3_disconnected";
      v52 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_152:
    _os_log_impl(&dword_182FBE000, v50, v51, v52, buf, 0xCu);
    goto LABEL_153;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    v4 = handle + 1373;
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v53 = __nwlog_obj();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          v54 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          v115 = "nw_protocol_http3_disconnected";
          v116 = 2082;
          v117 = handle + 1289;
          v118 = 2080;
          v119 = " ";
          v120 = 1024;
          v121 = v54;
          _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    v5 = (unsigned __int16)*v4;
    if ((v5 & 0x200) == 0)
    {
      if ((*v4 & 8) == 0)
        nw_http3_fail_all_streams((nw_protocol *)handle, 260);
      return;
    }
    v6 = v5 & 0xFFFFFDFF | (handle[1375] << 16);
    *v4 = v5 & 0xFDFF;
    handle[1375] = BYTE2(v6);
    output_handler = a1->output_handler;
    v8 = *((_QWORD *)handle + 4);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(void (**)(void))(v9 + 8);
        if (v10)
        {
          v10();
          goto LABEL_12;
        }
      }
    }
    __nwlog_obj();
    v39 = *((_QWORD *)handle + 4);
    v40 = "invalid";
    if (v39)
    {
      v41 = *(const char **)(v39 + 16);
      if (v41)
        v40 = v41;
    }
    *(_DWORD *)buf = 136446466;
    v115 = "nw_http3_reset";
    v116 = 2082;
    v117 = (char *)v40;
    v42 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v112 = 0;
    if (__nwlog_fault(v42, &type, &v112))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v43 = __nwlog_obj();
        v44 = type;
        if (!os_log_type_enabled(v43, type))
          goto LABEL_136;
        v45 = *((_QWORD *)handle + 4);
        v46 = "invalid";
        if (v45)
        {
          v47 = *(const char **)(v45 + 16);
          if (v47)
            v46 = v47;
        }
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http3_reset";
        v116 = 2082;
        v117 = (char *)v46;
        v48 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
        goto LABEL_135;
      }
      if (!v112)
      {
        v43 = __nwlog_obj();
        v44 = type;
        if (!os_log_type_enabled(v43, type))
          goto LABEL_136;
        v94 = *((_QWORD *)handle + 4);
        v95 = "invalid";
        if (v94)
        {
          v96 = *(const char **)(v94 + 16);
          if (v96)
            v95 = v96;
        }
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http3_reset";
        v116 = 2082;
        v117 = (char *)v95;
        v48 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_135;
      }
      v75 = (char *)__nw_create_backtrace_string();
      v43 = __nwlog_obj();
      v44 = type;
      v76 = os_log_type_enabled(v43, type);
      if (v75)
      {
        if (v76)
        {
          v77 = *((_QWORD *)handle + 4);
          v78 = "invalid";
          if (v77)
          {
            v79 = *(const char **)(v77 + 16);
            if (v79)
              v78 = v79;
          }
          *(_DWORD *)buf = 136446722;
          v115 = "nw_http3_reset";
          v116 = 2082;
          v117 = (char *)v78;
          v118 = 2082;
          v119 = v75;
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v75);
        goto LABEL_136;
      }
      if (v76)
      {
        v97 = *((_QWORD *)handle + 4);
        v98 = "invalid";
        if (v97)
        {
          v99 = *(const char **)(v97 + 16);
          if (v99)
            v98 = v99;
        }
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http3_reset";
        v116 = 2082;
        v117 = (char *)v98;
        v48 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_135:
        _os_log_impl(&dword_182FBE000, v43, v44, v48, buf, 0x16u);
      }
    }
LABEL_136:
    if (v42)
      free(v42);
LABEL_12:
    *((_QWORD *)handle + 8) = 0;
    handle[130] = 0;
    lsqpack_enc_cleanup((uint64_t)(handle + 256));
    *((_OWORD *)handle + 20) = 0u;
    *((_OWORD *)handle + 21) = 0u;
    *((_OWORD *)handle + 22) = 0u;
    *((_OWORD *)handle + 23) = 0u;
    *((_OWORD *)handle + 29) = 0u;
    *((_OWORD *)handle + 30) = 0u;
    *((_OWORD *)handle + 27) = 0u;
    *((_OWORD *)handle + 28) = 0u;
    *((_OWORD *)handle + 25) = 0u;
    *((_OWORD *)handle + 26) = 0u;
    *((_OWORD *)handle + 24) = 0u;
    *((_OWORD *)handle + 18) = 0u;
    *((_OWORD *)handle + 19) = 0u;
    *((_OWORD *)handle + 16) = 0u;
    *((_OWORD *)handle + 17) = 0u;
    *((_QWORD *)handle + 40) = handle + 312;
    *((_QWORD *)handle + 43) = handle + 336;
    *((_QWORD *)handle + 45) = handle + 352;
    *((_QWORD *)handle + 47) = handle + 368;
    lsqpack_dec_cleanup((uint64_t)(handle + 496));
    *((_OWORD *)handle + 51) = 0u;
    *((_OWORD *)handle + 52) = 0u;
    *((_OWORD *)handle + 49) = 0u;
    *((_OWORD *)handle + 50) = 0u;
    *((_OWORD *)handle + 47) = 0u;
    *((_OWORD *)handle + 48) = 0u;
    *((_OWORD *)handle + 45) = 0u;
    *((_OWORD *)handle + 46) = 0u;
    *((_OWORD *)handle + 43) = 0u;
    *((_OWORD *)handle + 44) = 0u;
    *((_OWORD *)handle + 41) = 0u;
    *((_OWORD *)handle + 42) = 0u;
    *((_OWORD *)handle + 39) = 0u;
    *((_OWORD *)handle + 40) = 0u;
    *((_OWORD *)handle + 37) = 0u;
    *((_OWORD *)handle + 38) = 0u;
    *((_OWORD *)handle + 35) = 0u;
    *((_OWORD *)handle + 36) = 0u;
    *((_OWORD *)handle + 33) = 0u;
    *((_OWORD *)handle + 34) = 0u;
    *((_OWORD *)handle + 31) = 0u;
    *((_OWORD *)handle + 32) = 0u;
    *(_QWORD *)(handle + 500) = 0x3FFF00003FFFLL;
    *((int32x2_t *)handle + 66) = vdup_n_s32(0x3FDu);
    *((_QWORD *)handle + 64) = 0x1FF00000064;
    *((_QWORD *)handle + 67) = &nw_qpack_dec_callbacks;
    *((_QWORD *)handle + 73) = handle + 576;
    *((_QWORD *)handle + 75) = handle + 592;
    *((_QWORD *)handle + 77) = handle + 608;
    *((_QWORD *)handle + 79) = handle + 624;
    *((_QWORD *)handle + 81) = handle + 640;
    *((_QWORD *)handle + 83) = handle + 656;
    *((_QWORD *)handle + 85) = handle + 672;
    *((_QWORD *)handle + 87) = handle + 688;
    *((_QWORD *)handle + 89) = handle + 704;
    v11 = *((_QWORD *)handle + 114);
    if (v11)
    {
      v12 = (_QWORD *)(v11 + 560);
      v13 = *(_QWORD *)(v11 + 560);
      if (v13)
      {
        do
        {
          v14 = v13;
          v15 = (_QWORD *)(v13 + 560);
          *(_QWORD *)(v13 + 568) = *(_QWORD *)(v11 + 568);
          **(_QWORD **)(v11 + 568) = v13;
          *v12 = 0;
          v12[1] = 0;
          v13 = *(_QWORD *)(v13 + 560);
          v12 = v15;
          v11 = v14;
        }
        while (v13);
      }
      else
      {
        v14 = *((_QWORD *)handle + 114);
        v15 = (_QWORD *)(v11 + 560);
      }
      v16 = *(_QWORD **)(v14 + 568);
      *((_QWORD *)handle + 115) = v16;
      *v16 = 0;
      *v15 = 0;
      v15[1] = 0;
    }
    v17 = *((_QWORD *)handle + 116);
    if (v17)
    {
      v18 = (_QWORD *)(v17 + 576);
      v19 = *(_QWORD *)(v17 + 576);
      if (v19)
      {
        do
        {
          v20 = v19;
          v21 = (_QWORD *)(v19 + 576);
          *(_QWORD *)(v19 + 584) = *(_QWORD *)(v17 + 584);
          **(_QWORD **)(v17 + 584) = v19;
          *v18 = 0;
          v18[1] = 0;
          v19 = *(_QWORD *)(v19 + 576);
          v18 = v21;
          v17 = v20;
        }
        while (v19);
      }
      else
      {
        v20 = *((_QWORD *)handle + 116);
        v21 = (_QWORD *)(v17 + 576);
      }
      v22 = *(_QWORD **)(v20 + 584);
      *((_QWORD *)handle + 117) = v22;
      *v22 = 0;
      *v21 = 0;
      v21[1] = 0;
    }
    v23 = *((_QWORD *)handle + 118);
    if (v23)
    {
      v24 = (_QWORD *)(v23 + 592);
      v25 = *(_QWORD *)(v23 + 592);
      if (v25)
      {
        do
        {
          v26 = v25;
          v27 = (_QWORD *)(v25 + 592);
          *(_QWORD *)(v25 + 600) = *(_QWORD *)(v23 + 600);
          **(_QWORD **)(v23 + 600) = v25;
          *v24 = 0;
          v24[1] = 0;
          v25 = *(_QWORD *)(v25 + 592);
          v24 = v27;
          v23 = v26;
        }
        while (v25);
      }
      else
      {
        v26 = *((_QWORD *)handle + 118);
        v27 = (_QWORD *)(v23 + 592);
      }
      v28 = *(_QWORD **)(v26 + 600);
      *((_QWORD *)handle + 119) = v28;
      *v28 = 0;
      *v27 = 0;
      v27[1] = 0;
    }
    *((_OWORD *)handle + 62) = 0u;
    *((_QWORD *)handle + 126) = -1;
    v29 = *((_QWORD *)handle + 132);
    if (!v29)
    {
LABEL_36:
      v33 = *((_QWORD *)handle + 134);
      if (!v33)
      {
LABEL_42:
        v37 = *((_QWORD *)handle + 150);
        if (v37)
        {
          dispatch_release(v37);
          *((_QWORD *)handle + 150) = 0;
        }
        *((_DWORD *)handle + 318) = 0;
        *((_QWORD *)handle + 122) = 0;
        *((_WORD *)handle + 642) = 0;
        *((_QWORD *)handle + 128) = 0;
        v38 = (*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0xCF966F;
        *v4 &= 0x966Fu;
        handle[1375] = BYTE2(v38);
        nw_protocol_set_output_handler((uint64_t)a1, (uint64_t)output_handler);
        nw_http3_setup_connection_if_needed((uint64_t)handle);
        return;
      }
      v34 = *(_QWORD *)(v33 + 32);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 24);
        if (v35)
        {
          v36 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
          if (v36)
          {
            v36(v34, v33);
LABEL_41:
            nw_protocol_http3_uni_stream_destroy(*((_QWORD *)handle + 134));
            *((_QWORD *)handle + 134) = 0;
            goto LABEL_42;
          }
        }
      }
      __nwlog_obj();
      v65 = *(_QWORD *)(*((_QWORD *)handle + 134) + 32);
      v66 = "invalid";
      if (v65)
      {
        v67 = *(const char **)(v65 + 16);
        if (v67)
          v66 = v67;
      }
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http3_reset";
      v116 = 2082;
      v117 = (char *)v66;
      v68 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v112 = 0;
      if (__nwlog_fault(v68, &type, &v112))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v69 = __nwlog_obj();
          v70 = type;
          if (!os_log_type_enabled(v69, type))
            goto LABEL_169;
          v71 = *(_QWORD *)(*((_QWORD *)handle + 134) + 32);
          v72 = "invalid";
          if (v71)
          {
            v73 = *(const char **)(v71 + 16);
            if (v73)
              v72 = v73;
          }
          *(_DWORD *)buf = 136446466;
          v115 = "nw_http3_reset";
          v116 = 2082;
          v117 = (char *)v72;
          v74 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
          goto LABEL_168;
        }
        if (!v112)
        {
          v69 = __nwlog_obj();
          v70 = type;
          if (!os_log_type_enabled(v69, type))
            goto LABEL_169;
          v103 = *(_QWORD *)(*((_QWORD *)handle + 134) + 32);
          v104 = "invalid";
          if (v103)
          {
            v105 = *(const char **)(v103 + 16);
            if (v105)
              v104 = v105;
          }
          *(_DWORD *)buf = 136446466;
          v115 = "nw_http3_reset";
          v116 = 2082;
          v117 = (char *)v104;
          v74 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
          goto LABEL_168;
        }
        v89 = (char *)__nw_create_backtrace_string();
        v69 = __nwlog_obj();
        v70 = type;
        v90 = os_log_type_enabled(v69, type);
        if (v89)
        {
          if (v90)
          {
            v91 = *(_QWORD *)(*((_QWORD *)handle + 134) + 32);
            v92 = "invalid";
            if (v91)
            {
              v93 = *(const char **)(v91 + 16);
              if (v93)
                v92 = v93;
            }
            *(_DWORD *)buf = 136446722;
            v115 = "nw_http3_reset";
            v116 = 2082;
            v117 = (char *)v92;
            v118 = 2082;
            v119 = v89;
            _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v89);
          goto LABEL_169;
        }
        if (v90)
        {
          v109 = *(_QWORD *)(*((_QWORD *)handle + 134) + 32);
          v110 = "invalid";
          if (v109)
          {
            v111 = *(const char **)(v109 + 16);
            if (v111)
              v110 = v111;
          }
          *(_DWORD *)buf = 136446466;
          v115 = "nw_http3_reset";
          v116 = 2082;
          v117 = (char *)v110;
          v74 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_168:
          _os_log_impl(&dword_182FBE000, v69, v70, v74, buf, 0x16u);
        }
      }
LABEL_169:
      if (v68)
        free(v68);
      goto LABEL_41;
    }
    v30 = *(_QWORD *)(v29 + 32);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 24);
      if (v31)
      {
        v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
        if (v32)
        {
          v32(v30, v29);
LABEL_35:
          nw_protocol_http3_uni_stream_destroy(*((_QWORD *)handle + 132));
          *((_QWORD *)handle + 132) = 0;
          goto LABEL_36;
        }
      }
    }
    __nwlog_obj();
    v55 = *(_QWORD *)(*((_QWORD *)handle + 132) + 32);
    v56 = "invalid";
    if (v55)
    {
      v57 = *(const char **)(v55 + 16);
      if (v57)
        v56 = v57;
    }
    *(_DWORD *)buf = 136446466;
    v115 = "nw_http3_reset";
    v116 = 2082;
    v117 = (char *)v56;
    v58 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v112 = 0;
    if (__nwlog_fault(v58, &type, &v112))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v59 = __nwlog_obj();
        v60 = type;
        if (!os_log_type_enabled(v59, type))
          goto LABEL_161;
        v61 = *(_QWORD *)(*((_QWORD *)handle + 132) + 32);
        v62 = "invalid";
        if (v61)
        {
          v63 = *(const char **)(v61 + 16);
          if (v63)
            v62 = v63;
        }
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http3_reset";
        v116 = 2082;
        v117 = (char *)v62;
        v64 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
        goto LABEL_160;
      }
      if (!v112)
      {
        v59 = __nwlog_obj();
        v60 = type;
        if (!os_log_type_enabled(v59, type))
          goto LABEL_161;
        v100 = *(_QWORD *)(*((_QWORD *)handle + 132) + 32);
        v101 = "invalid";
        if (v100)
        {
          v102 = *(const char **)(v100 + 16);
          if (v102)
            v101 = v102;
        }
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http3_reset";
        v116 = 2082;
        v117 = (char *)v101;
        v64 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_160;
      }
      v84 = (char *)__nw_create_backtrace_string();
      v59 = __nwlog_obj();
      v60 = type;
      v85 = os_log_type_enabled(v59, type);
      if (v84)
      {
        if (v85)
        {
          v86 = *(_QWORD *)(*((_QWORD *)handle + 132) + 32);
          v87 = "invalid";
          if (v86)
          {
            v88 = *(const char **)(v86 + 16);
            if (v88)
              v87 = v88;
          }
          *(_DWORD *)buf = 136446722;
          v115 = "nw_http3_reset";
          v116 = 2082;
          v117 = (char *)v87;
          v118 = 2082;
          v119 = v84;
          _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v84);
        goto LABEL_161;
      }
      if (v85)
      {
        v106 = *(_QWORD *)(*((_QWORD *)handle + 132) + 32);
        v107 = "invalid";
        if (v106)
        {
          v108 = *(const char **)(v106 + 16);
          if (v108)
            v107 = v108;
        }
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http3_reset";
        v116 = 2082;
        v117 = (char *)v107;
        v64 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_160:
        _os_log_impl(&dword_182FBE000, v59, v60, v64, buf, 0x16u);
      }
    }
LABEL_161:
    if (v58)
      free(v58);
    goto LABEL_35;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v115 = "nw_protocol_http3_disconnected";
  v49 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v112 = 0;
  if (!__nwlog_fault(v49, &type, &v112))
    goto LABEL_153;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v50 = __nwlog_obj();
    v51 = type;
    if (!os_log_type_enabled(v50, type))
      goto LABEL_153;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_protocol_http3_disconnected";
    v52 = "%{public}s called with null http3";
    goto LABEL_152;
  }
  if (!v112)
  {
    v50 = __nwlog_obj();
    v51 = type;
    if (!os_log_type_enabled(v50, type))
      goto LABEL_153;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_protocol_http3_disconnected";
    v52 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_152;
  }
  v82 = (char *)__nw_create_backtrace_string();
  v50 = __nwlog_obj();
  v51 = type;
  v83 = os_log_type_enabled(v50, type);
  if (!v82)
  {
    if (!v83)
      goto LABEL_153;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_protocol_http3_disconnected";
    v52 = "%{public}s called with null http3, no backtrace";
    goto LABEL_152;
  }
  if (v83)
  {
    *(_DWORD *)buf = 136446466;
    v115 = "nw_protocol_http3_disconnected";
    v116 = 2082;
    v117 = v82;
    _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v82);
  if (v49)
    goto LABEL_154;
}

void nw_protocol_http3_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  char *handle;
  _WORD *v7;
  int v8;
  id v9;
  void *v10;
  void *v11;
  nw_protocol *v12;
  nw_protocol *output_handler;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD *v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  id v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  int v29;
  char *backtrace_string;
  _BOOL4 v31;
  char *v32;
  _BOOL4 v33;
  const char *v34;
  _BOOL4 v35;
  NSObject *v36;
  int v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  void *v43;
  void *v44;
  char *v45;
  _BOOL4 v46;
  char *v47;
  _BOOL4 v48;
  const char *v49;
  _BOOL4 v50;
  char v51;
  os_log_type_t type;
  _BYTE block[24];
  const char *v54;
  _QWORD *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  const char *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "nw_protocol_http3_error";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v24, &type, &v51))
      goto LABEL_92;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_92;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      v27 = "%{public}s called with null protocol";
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)block = 136446466;
          *(_QWORD *)&block[4] = "nw_protocol_http3_error";
          *(_WORD *)&block[12] = 2082;
          *(_QWORD *)&block[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", block, 0x16u);
        }
        free(backtrace_string);
LABEL_92:
        if (!v24)
          return;
        goto LABEL_93;
      }
      if (!v31)
        goto LABEL_92;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      v27 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_92;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_91;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "nw_protocol_http3_error";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v24, &type, &v51))
      goto LABEL_92;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v51)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (!os_log_type_enabled(v25, type))
          goto LABEL_92;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_protocol_http3_error";
        v27 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_91;
      }
      v32 = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v33 = os_log_type_enabled(v25, type);
      if (!v32)
      {
        if (!v33)
          goto LABEL_92;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_protocol_http3_error";
        v27 = "%{public}s called with null http3, no backtrace";
        goto LABEL_91;
      }
      if (v33)
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "nw_protocol_http3_error";
        *(_WORD *)&block[12] = 2082;
        *(_QWORD *)&block[14] = v32;
        v34 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_182FBE000, v25, v26, v34, block, 0x16u);
      }
LABEL_63:
      free(v32);
      if (!v24)
        return;
LABEL_93:
      free(v24);
      return;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_92;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "nw_protocol_http3_error";
    v27 = "%{public}s called with null http3";
LABEL_91:
    _os_log_impl(&dword_182FBE000, v25, v26, v27, block, 0xCu);
    goto LABEL_92;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "nw_protocol_http3_error";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v24, &type, &v51))
      goto LABEL_92;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_92;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      v27 = "%{public}s called with null other_protocol";
      goto LABEL_91;
    }
    if (!v51)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_92;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      v27 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_91;
    }
    v32 = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type;
    v35 = os_log_type_enabled(v25, type);
    if (!v32)
    {
      if (!v35)
        goto LABEL_92;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      v27 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_91;
    }
    if (v35)
    {
      *(_DWORD *)block = 136446466;
      *(_QWORD *)&block[4] = "nw_protocol_http3_error";
      *(_WORD *)&block[12] = 2082;
      *(_QWORD *)&block[14] = v32;
      v34 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  v7 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      v28 = __nwlog_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        v29 = *((_DWORD *)handle + 320);
        *(_DWORD *)block = 136446978;
        *(_QWORD *)&block[4] = "nw_protocol_http3_error";
        *(_WORD *)&block[12] = 2082;
        *(_QWORD *)&block[14] = handle + 1289;
        *(_WORD *)&block[22] = 2080;
        v54 = " ";
        LOWORD(v55) = 1024;
        *(_DWORD *)((char *)&v55 + 2) = v29;
        _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", block, 0x26u);
      }
    }
  }
  if (a3 == 35)
  {
    v8 = (unsigned __int16)*v7;
    if ((v8 & 0x100) != 0)
    {
      if (a1->output_handler != a2)
        return;
      if (((v8 | (handle[1375] << 16)) & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          v36 = __nwlog_obj();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            v37 = *((_DWORD *)handle + 320);
            *(_DWORD *)block = 136446978;
            *(_QWORD *)&block[4] = "nw_protocol_http3_error";
            *(_WORD *)&block[12] = 2082;
            *(_QWORD *)&block[14] = handle + 1289;
            *(_WORD *)&block[22] = 2080;
            v54 = " ";
            LOWORD(v55) = 1024;
            *(_DWORD *)((char *)&v55 + 2) = v37;
            _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> early data rejected", block, 0x26u);
          }
        }
      }
      if (!uuid_is_null((const unsigned __int8 *)handle + 848))
      {
        v14 = (void *)*((_QWORD *)handle + 139);
        if (v14)
          nw_path_report_error_to_agent(v14, (const unsigned __int8 *)handle + 848, 35);
        goto LABEL_33;
      }
      if (nw_storage_copy_shared_token[0] != -1)
        dispatch_once(nw_storage_copy_shared_token, &__block_literal_global_44834);
      v9 = (id)nw_storage_copy_shared_storage;
      v10 = (void *)*((_QWORD *)handle + 137);
      if (v10)
        v11 = os_retain(v10);
      else
        v11 = 0;
      while (1)
      {
        v15 = v11;
        v16 = nw_endpoint_copy_parent_endpoint(v11);
        if (!v16)
          break;
        v11 = v16;
        if (v15)
          os_release(v15);
      }
      v17 = (void *)*((_QWORD *)handle + 157);
      v18 = v9;
      v19 = v15;
      v20 = v17;
      v21 = &__block_literal_global_120_61923;
      if (v18)
      {
        if (v19)
        {
          if (v20)
          {
            v22 = v18[2];
            *(_QWORD *)block = MEMORY[0x1E0C809B0];
            *(_QWORD *)&block[8] = 3221225472;
            *(_QWORD *)&block[16] = __nw_storage_remove_items_block_invoke;
            v54 = (const char *)&unk_1E14AAC08;
            v55 = v18;
            v61 = "h3_0rtt";
            v56 = v19;
            v57 = 0;
            v58 = 0;
            v59 = v20;
            v23 = &__block_literal_global_120_61923;
            v60 = &__block_literal_global_120_61923;
            dispatch_async(v22, block);

LABEL_29:
            if (v19)
              os_release(v19);
            if (v18)
              os_release(v18);
LABEL_33:
            *v7 |= 0x200u;
            return;
          }
          __nwlog_obj();
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_storage_remove_items";
          v39 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v51 = 0;
          if (!__nwlog_fault(v39, &type, &v51))
            goto LABEL_124;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null context";
              goto LABEL_122;
            }
LABEL_123:

            goto LABEL_124;
          }
          if (!v51)
          {
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null context, backtrace limit exceeded";
              goto LABEL_122;
            }
            goto LABEL_123;
          }
          v47 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          v50 = os_log_type_enabled(v40, type);
          if (!v47)
          {
            if (v50)
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null context, no backtrace";
              goto LABEL_122;
            }
            goto LABEL_123;
          }
          if (v50)
          {
            *(_DWORD *)block = 136446466;
            *(_QWORD *)&block[4] = "nw_storage_remove_items";
            *(_WORD *)&block[12] = 2082;
            *(_QWORD *)&block[14] = v47;
            v49 = "%{public}s called with null context, dumping backtrace:%{public}s";
            goto LABEL_107;
          }
          goto LABEL_108;
        }
        __nwlog_obj();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_storage_remove_items";
        v39 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (!__nwlog_fault(v39, &type, &v51))
          goto LABEL_124;
        if (type != OS_LOG_TYPE_FAULT)
        {
          if (!v51)
          {
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_122;
            }
            goto LABEL_123;
          }
          v47 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          v48 = os_log_type_enabled(v40, type);
          if (!v47)
          {
            if (v48)
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null endpoint, no backtrace";
              goto LABEL_122;
            }
            goto LABEL_123;
          }
          if (v48)
          {
            *(_DWORD *)block = 136446466;
            *(_QWORD *)&block[4] = "nw_storage_remove_items";
            *(_WORD *)&block[12] = 2082;
            *(_QWORD *)&block[14] = v47;
            v49 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_107:
            _os_log_impl(&dword_182FBE000, v40, v41, v49, block, 0x16u);
          }
LABEL_108:

          free(v47);
          if (!v39)
            goto LABEL_29;
          goto LABEL_125;
        }
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (!os_log_type_enabled(v40, type))
          goto LABEL_123;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_storage_remove_items";
        v42 = "%{public}s called with null endpoint";
      }
      else
      {
        __nwlog_obj();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_storage_remove_items";
        v39 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (!__nwlog_fault(v39, &type, &v51))
          goto LABEL_124;
        if (type != OS_LOG_TYPE_FAULT)
        {
          if (v51)
          {
            v45 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            v46 = os_log_type_enabled(v40, type);
            if (v45)
            {
              if (v46)
              {
                *(_DWORD *)block = 136446466;
                *(_QWORD *)&block[4] = "nw_storage_remove_items";
                *(_WORD *)&block[12] = 2082;
                *(_QWORD *)&block[14] = v45;
                _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null storage, dumping backtrace:%{public}s", block, 0x16u);
              }

              free(v45);
LABEL_124:
              if (!v39)
                goto LABEL_29;
LABEL_125:
              free(v39);
              goto LABEL_29;
            }
            if (v46)
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null storage, no backtrace";
              goto LABEL_122;
            }
          }
          else
          {
            __nwlog_obj();
            v40 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)block = 136446210;
              *(_QWORD *)&block[4] = "nw_storage_remove_items";
              v42 = "%{public}s called with null storage, backtrace limit exceeded";
              goto LABEL_122;
            }
          }
          goto LABEL_123;
        }
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (!os_log_type_enabled(v40, type))
          goto LABEL_123;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_storage_remove_items";
        v42 = "%{public}s called with null storage";
      }
LABEL_122:
      _os_log_impl(&dword_182FBE000, v40, v41, v42, block, 0xCu);
      goto LABEL_123;
    }
  }
  v12 = (nw_protocol *)*((_QWORD *)handle + 110);
  if (v12)
  {
    do
    {
      output_handler = v12[8].output_handler;
      nw_protocol_http3_stream_error(v12, a2, a3);
      v12 = output_handler;
    }
    while (output_handler);
  }
}

void nw_protocol_http3_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_output_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v3, &type, &v14))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s called with null protocol";
      goto LABEL_17;
    }
    if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (!v10)
          goto LABEL_46;
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http3_output_finished";
        v18 = 2082;
        v19 = backtrace_string;
        v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_45;
      }
      if (!v10)
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_17:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_18;
  }
  if (!a1->handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_output_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v3, &type, &v14))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s called with null http3";
      goto LABEL_17;
    }
    if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v12 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (!v12)
          goto LABEL_46;
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http3_output_finished";
        v18 = 2082;
        v19 = backtrace_string;
        v11 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_45;
      }
      if (!v12)
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    goto LABEL_17;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (a2)
  {
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_output_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v3, &type, &v14))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s http3 should not get output_finished";
      goto LABEL_17;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s http3 should not get output_finished, backtrace limit exceeded";
      goto LABEL_17;
    }
    v7 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    v8 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_output_finished";
      v6 = "%{public}s http3 should not get output_finished, no backtrace";
      goto LABEL_17;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http3_output_finished";
      v18 = 2082;
      v19 = v7;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s http3 should not get output_finished, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v7);
LABEL_18:
    if (!v3)
      return;
    goto LABEL_19;
  }
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_http3_output_finished";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v3, &type, &v14))
    goto LABEL_18;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_18;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_output_finished";
    v6 = "%{public}s called with null other_protocol";
    goto LABEL_17;
  }
  if (!v14)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_18;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_output_finished";
    v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v13 = os_log_type_enabled(v4, type);
  if (!backtrace_string)
  {
    if (!v13)
      goto LABEL_18;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_output_finished";
    v6 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_17;
  }
  if (!v13)
    goto LABEL_46;
  *(_DWORD *)buf = 136446466;
  v17 = "nw_protocol_http3_output_finished";
  v18 = 2082;
  v19 = backtrace_string;
  v11 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_45:
  _os_log_impl(&dword_182FBE000, v4, v5, v11, buf, 0x16u);
LABEL_46:
  free(backtrace_string);
  if (v3)
LABEL_19:
    free(v3);
}

void nw_protocol_http3_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  NSObject *v7;
  int v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http3_input_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_http3_input_finished";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_52:
        if (!v3)
          return;
        goto LABEL_53;
      }
      if (!v10)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http3_input_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_52;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v15)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http3_input_finished";
        v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_51;
      }
      v11 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v12 = os_log_type_enabled(v4, type);
      if (!v11)
      {
        if (!v12)
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http3_input_finished";
        v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_51;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_protocol_http3_input_finished";
        v19 = 2082;
        v20 = v11;
        v13 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v4, v5, v13, buf, 0x16u);
      }
LABEL_37:
      free(v11);
      if (!v3)
        return;
LABEL_53:
      free(v3);
      return;
    }
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http3_input_finished";
    v6 = "%{public}s called with null http3";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_52;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http3_input_finished";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v3, &type, &v15))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null other_protocol";
      goto LABEL_51;
    }
    if (!v15)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_51;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v14 = os_log_type_enabled(v4, type);
    if (!v11)
    {
      if (!v14)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http3_input_finished";
      v6 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_51;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http3_input_finished";
      v19 = 2082;
      v20 = v11;
      v13 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        v18 = "nw_protocol_http3_input_finished";
        v19 = 2082;
        v20 = handle + 1289;
        v21 = 2080;
        v22 = " ";
        v23 = 1024;
        v24 = v8;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }
  if ((*(_WORD *)(handle + 1373) & 8) == 0)
    nw_http3_fail_all_streams((nw_protocol *)handle, 260);
}

BOOL nw_protocol_http3_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  void *parameters;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  _BOOL8 result;
  int v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_local_endpoint)(nw_protocol *);
  void *v27;
  nw_protocol_callbacks *v28;
  uint64_t (*get_path)(nw_protocol *);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  uint64_t v35;
  id *v36;
  NSObject *v37;
  uint64_t v38;
  nw_protocol_options_t v39;
  id *v40;
  id v41;
  char *identifier;
  id *v43;
  uint64_t v44;
  id *v45;
  NSObject *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  NWConcrete_nw_protocol_options *v49;
  id v50;
  uint64_t v51;
  nw_protocol_stack_t v52;
  NSObject *v53;
  int v54;
  void *v55;
  uint64_t v56;
  void *v57;
  _OWORD *v58;
  void *v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  void *singleton;
  void *v66;
  char v67;
  const void *v68;
  _WORD *v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  void *v73;
  void *v74;
  void *v75;
  id v76;
  _QWORD *v77;
  id v78;
  const char *v79;
  uint64_t v80;
  os_log_type_t v81;
  const char *v82;
  char *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  NSObject *v86;
  os_log_type_t v87;
  nw_protocol *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  unsigned __int8 *v95;
  __int16 v96;
  NSObject *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  unsigned __int8 *v110;
  __int16 v111;
  __int16 v112;
  int v113;
  unsigned __int8 *v114;
  int v115;
  NSObject *v116;
  int v117;
  const void *v118;
  NSObject *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  size_t v123;
  void (**v124)(uint64_t, _OWORD *);
  void (*v125)(uint64_t, _OWORD *);
  id *v126;
  id v127;
  void *v128;
  id v129;
  id v130;
  id v131;
  id *v132;
  NWConcrete_nw_protocol_instance_stub *v133;
  id v134;
  void *v135;
  _BOOL8 v136;
  void *v137;
  void *v138;
  int v139;
  id v140;
  void *v141;
  void *v142;
  size_t v143;
  uint64_t v144;
  NSObject *v145;
  void *v146;
  size_t v147;
  NSObject *v148;
  void *v149;
  size_t v150;
  size_t v151;
  NSObject *v152;
  void *v153;
  size_t v154;
  int v155;
  int v156;
  unsigned int v157;
  nw_protocol *output_handler;
  nw_protocol_callbacks *v159;
  void (*notify)(nw_protocol *, nw_protocol *);
  NSObject *v161;
  int v162;
  char *v163;
  NSObject *v164;
  os_log_type_t v165;
  const char *v166;
  char *backtrace_string;
  _BOOL4 v168;
  const char *v169;
  _BOOL4 v170;
  NSObject *v171;
  void *v172;
  char *v173;
  NSObject *v174;
  os_log_type_t v175;
  const char *v176;
  NSObject *v177;
  const char *v178;
  const char *v179;
  int v180;
  uint64_t v181;
  const char *v182;
  NSObject *v183;
  int v184;
  _BOOL4 v185;
  char *v186;
  NSObject *v187;
  os_log_type_t v188;
  const char *v189;
  const char *v190;
  char *v191;
  NSObject *v192;
  os_log_type_t v193;
  _BOOL4 v194;
  const char *v195;
  NSObject *v196;
  int v197;
  uint64_t v198;
  char *v199;
  _BOOL4 v200;
  char *v201;
  _BOOL4 v202;
  const char *v203;
  _BOOL4 v204;
  char *v205;
  NSObject *v206;
  const char *name;
  const char *v208;
  NSObject *v209;
  os_log_type_t v210;
  const char *v211;
  NSObject *v212;
  int v213;
  NSObject *log;
  char *v215;
  void **v216;
  _QWORD *v217;
  _BOOL4 v218;
  nw_protocol *v219;
  id *object;
  nw_protocol *v221;
  _BYTE *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t __src;
  os_log_type_t type[64];
  _BYTE v228[24];
  char v229;
  uint8_t buf[72];
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    v163 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v228[0] = 0;
    if (!__nwlog_fault(v163, type, v228))
      goto LABEL_375;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v164 = __nwlog_obj();
      v165 = type[0];
      if (!os_log_type_enabled(v164, type[0]))
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null protocol";
      goto LABEL_374;
    }
    if (!v228[0])
    {
      v164 = __nwlog_obj();
      v165 = type[0];
      if (!os_log_type_enabled(v164, type[0]))
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_374;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v164 = __nwlog_obj();
    v165 = type[0];
    v168 = os_log_type_enabled(v164, type[0]);
    if (!backtrace_string)
    {
      if (!v168)
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_374;
    }
    if (!v168)
      goto LABEL_300;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v169 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_299:
    _os_log_impl(&dword_182FBE000, v164, v165, v169, buf, 0x16u);
    goto LABEL_300;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    v163 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v228[0] = 0;
    if (!__nwlog_fault(v163, type, v228))
      goto LABEL_375;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v164 = __nwlog_obj();
      v165 = type[0];
      if (!os_log_type_enabled(v164, type[0]))
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null http3";
      goto LABEL_374;
    }
    if (!v228[0])
    {
      v164 = __nwlog_obj();
      v165 = type[0];
      if (!os_log_type_enabled(v164, type[0]))
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_374;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v164 = __nwlog_obj();
    v165 = type[0];
    v170 = os_log_type_enabled(v164, type[0]);
    if (!backtrace_string)
    {
      if (!v170)
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null http3, no backtrace";
      goto LABEL_374;
    }
    if (!v170)
      goto LABEL_300;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v169 = "%{public}s called with null http3, dumping backtrace:%{public}s";
    goto LABEL_299;
  }
  v222 = handle + 1373;
  if ((*(_WORD *)(handle + 1373) & 8) == 0)
  {
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      v219 = a1;
      v6 = parameters;
      v7 = *(id *)(v6[13] + 136);

      if (nw_context_shares_workloop(*((void **)handle + 157), v7))
        goto LABEL_24;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = *((_QWORD *)handle + 157);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = v7;
      *(_WORD *)&buf[32] = 2112;
      *(_QWORD *)&buf[34] = v8;
      v9 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v228[0] = 0;
      if (__nwlog_fault(v9, type, v228))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = gLogObj;
          v11 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_22;
          v12 = *((_QWORD *)handle + 157);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a2;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v7;
          *(_WORD *)&buf[32] = 2112;
          *(_QWORD *)&buf[34] = v12;
          v13 = "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol creat"
                "e, which had workloop %@";
LABEL_20:
          v23 = v10;
          v24 = v11;
LABEL_21:
          _os_log_impl(&dword_182FBE000, v23, v24, v13, buf, 0x2Au);
          goto LABEL_22;
        }
        if (!v228[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = gLogObj;
          v11 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_22;
          v22 = *((_QWORD *)handle + 157);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a2;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v7;
          *(_WORD *)&buf[32] = 2112;
          *(_QWORD *)&buf[34] = v22;
          v13 = "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol creat"
                "e, which had workloop %@, backtrace limit exceeded";
          goto LABEL_20;
        }
        v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = type[0];
        v20 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v17)
        {
          if (v20)
          {
            v21 = *((_QWORD *)handle + 157);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = a2;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v7;
            *(_WORD *)&buf[32] = 2112;
            *(_QWORD *)&buf[34] = v21;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&buf[44] = v17;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v17);
          goto LABEL_22;
        }
        if (v20)
        {
          v144 = *((_QWORD *)handle + 157);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a2;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v7;
          *(_WORD *)&buf[32] = 2112;
          *(_QWORD *)&buf[34] = v144;
          v13 = "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol creat"
                "e, which had workloop %@, no backtrace";
          v23 = v18;
          v24 = v19;
          goto LABEL_21;
        }
      }
LABEL_22:
      if (v9)
        free(v9);
LABEL_24:
      if (v7)
        os_release(v7);
      if (!*((_QWORD *)handle + 138))
      {
        if (!a2)
        {
          v216 = (void **)(handle + 1112);
          goto LABEL_38;
        }
        callbacks = a2->callbacks;
        if (callbacks)
        {
          get_local_endpoint = (uint64_t (*)(nw_protocol *))callbacks->get_local_endpoint;
          if (get_local_endpoint)
          {
            v27 = (void *)get_local_endpoint(a2);
            if (v27)
              *((_QWORD *)handle + 138) = os_retain(v27);
          }
        }
      }
      v216 = (void **)(handle + 1112);
      if (a2)
      {
        if (!*((_QWORD *)handle + 139))
        {
          v28 = a2->callbacks;
          if (v28)
          {
            get_path = (uint64_t (*)(nw_protocol *))v28->get_path;
            if (get_path)
            {
              v30 = (void *)get_path(a2);
              if (v30)
                *((_QWORD *)handle + 139) = os_retain(v30);
            }
          }
        }
      }
LABEL_38:
      v31 = *((_QWORD *)handle + 4);
      v32 = *((_QWORD *)handle + 110);
      v33 = (v32 | v31) == 0;
      if (v31)
        v34 = 1;
      else
        v34 = v32 == 0;
      if (v34)
        v35 = *((_QWORD *)handle + 4);
      else
        v35 = 0;
      if (v32 && !v31)
      {
        while (1)
        {
          v35 = *(_QWORD *)(v32 + 32);
          if (v35)
            break;
          v32 = *(_QWORD *)(v32 + 544);
          if (!v32)
          {
            v35 = 0;
            break;
          }
        }
      }
      v221 = a2;
      *(_QWORD *)v228 = 0;
      *(_QWORD *)&v228[8] = v228;
      *(_QWORD *)&v228[16] = 0x2000000000;
      v229 = 0;
      v217 = v6;
      v36 = v6;
      v37 = v36[19];
      object = v36;

      v38 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL43nw_http3_set_prohibit_joining_on_parametersP11nw_protocolP13nw_parameters_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14A8298;
      *(_QWORD *)&buf[32] = v228;
      *(_QWORD *)&buf[40] = v219;
      nw_protocol_stack_iterate_application_protocols(v37, buf);
      v218 = v33;
      if (*(_BYTE *)(*(_QWORD *)&v228[8] + 24))
      {
        v39 = nw_protocol_stack_copy_transport_protocol(v37);
        if (v39)
        {
          v40 = v39;
          v41 = v40[1];

          identifier = nw_protocol_definition_get_identifier(v41);
          if (gLogDatapath)
          {
            v205 = identifier;
            v206 = __nwlog_obj();
            if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
            {
              name = v219->identifier->name;
              if (!name)
                name = "invalid";
              *(_DWORD *)type = 136446978;
              *(_QWORD *)&type[4] = "nw_http3_set_prohibit_joining_on_parameters";
              *(_WORD *)&type[12] = 2080;
              *(_QWORD *)&type[14] = name;
              *(_WORD *)&type[22] = 2048;
              *(_QWORD *)&type[24] = v219;
              *(_WORD *)&type[32] = 2080;
              *(_QWORD *)&type[34] = v205;
              _os_log_impl(&dword_182FBE000, v206, OS_LOG_TYPE_DEBUG, "%{public}s %s (%p) setting prohibit joining on %s", (uint8_t *)type, 0x2Au);
            }
          }
          if (v41)
            os_release(v41);
          v43 = v40;
          *((_BYTE *)v43 + 153) = 1;

          v33 = v218;
          *(_BYTE *)(*(_QWORD *)&v228[8] + 24) = 0;
          os_release(v43);
        }
      }
      if (v37)
        os_release(v37);
      _Block_object_dispose(v228, 8);
      v44 = (uint64_t)v221;
      if (v33)
      {
        v45 = object;
        v46 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v45, 0, 1);

        v47 = nw_parameters_copy_protocol_options_legacy(v46, v219);
        if (v47)
        {
          v48 = v47;
          v49 = nw_protocol_options_copy(v47);
          v44 = (uint64_t)v221;
          if (nw_protocol_copy_http3_definition_onceToken != -1)
            dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
          v50 = (id)nw_protocol_copy_http3_definition_http3_definition;
          nw_parameters_set_protocol_instance(v49, v51, (uint64_t)handle);
          if (v50)
            os_release(v50);
          v52 = nw_parameters_copy_default_protocol_stack(v46);
          nw_protocol_stack_replace_protocol_with_handle(v52, (uint64_t)v219, v49);
          if (v52)
            os_release(v52);
          if (v49)
            os_release(v49);
          os_release(v48);
        }
        else
        {
          v44 = (uint64_t)v221;
          if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v53 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              v54 = *((_DWORD *)handle + 320);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = handle + 1289;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v54;
              *(_WORD *)&buf[38] = 2048;
              *(_QWORD *)&buf[40] = v46;
              *(_WORD *)&buf[48] = 2048;
              *(_QWORD *)&buf[50] = v45;
              _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to find http3 options in new parameters %p, copy of %p", buf, 0x3Au);
            }
          }
        }
        v55 = (void *)*((_QWORD *)handle + 140);
        if (v55)
          os_release(v55);
        *((_QWORD *)handle + 140) = v46;
      }
      v56 = *((_QWORD *)handle + 2);
      v57 = (void *)*((_QWORD *)handle + 137);
      v58 = malloc_type_calloc(1uLL, 0x2E8uLL, 0xEAFB8F1AuLL);
      if (!v58)
      {
        v171 = __nwlog_obj();
        os_log_type_enabled(v171, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "strict_calloc";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = 1;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 744;
        v172 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v172);
        if (result)
          goto LABEL_387;
        free(v172);
      }
      bzero(v58, 0x2E8uLL);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      *(_QWORD *)&buf[24] = v58;
      *(_QWORD *)type = v38;
      *(_QWORD *)&type[8] = 0x40000000;
      *(_QWORD *)&type[16] = ___ZL22nw_http3_stream_createPK22nw_protocol_identifierP17nw_protocol_http3P11nw_endpointP13nw_parametersb_block_invoke;
      *(_QWORD *)&type[24] = &unk_1E14A82C0;
      *(_QWORD *)&type[32] = buf;
      *((_QWORD *)v58 + 41) = _Block_copy(type);
      _Block_object_dispose(buf, 8);
      *((_QWORD *)v58 + 2) = v56;
      if (nw_protocol_http3_stream_get_callbacks(void)::onceToken[0] != -1)
        dispatch_once(nw_protocol_http3_stream_get_callbacks(void)::onceToken, &__block_literal_global_126);
      *((_QWORD *)v58 + 3) = &nw_protocol_http3_stream_get_callbacks(void)::protocol_callbacks;
      *((_QWORD *)v58 + 5) = v58;
      if (nw_protocol_http3_identifier::onceToken[0] != -1)
        dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
      *((_QWORD *)v58 + 10) = &nw_protocol_http3_identifier::http3_protocol_identifier;
      if (nw_protocol_http3_stream_get_callbacks(void)::onceToken[0] != -1)
        dispatch_once(nw_protocol_http3_stream_get_callbacks(void)::onceToken, &__block_literal_global_126);
      *((_QWORD *)v58 + 11) = &nw_protocol_http3_stream_get_callbacks(void)::protocol_callbacks;
      *((_QWORD *)v58 + 13) = v58;
      *((_QWORD *)v58 + 42) = handle;
      *((_QWORD *)v58 + 16) = -1;
      *((_QWORD *)v58 + 17) = 0;
      *((_QWORD *)v58 + 18) = 0;
      *((_QWORD *)v58 + 19) = v58;
      *((_QWORD *)v58 + 20) = 0;
      *((_QWORD *)v58 + 21) = 0;
      *((_QWORD *)v58 + 22) = 0;
      *((_QWORD *)v58 + 24) = 0;
      *((_QWORD *)v58 + 25) = 0;
      *((_QWORD *)v58 + 23) = v58 + 11;
      *(_QWORD *)((char *)v58 + 206) = 0;
      if (v57)
        v59 = os_retain(v57);
      else
        v59 = 0;
      *((_QWORD *)v58 + 43) = v59;
      *((_QWORD *)v58 + 44) = os_retain(object);
      *((_QWORD *)v58 + 46) = 0;
      *((_QWORD *)v58 + 33) = -1;
      v60 = nw_frame_create(0, 0, 0, 0, 0);
      *((_QWORD *)v58 + 27) = 0;
      *((_QWORD *)v58 + 48) = v60;
      *((_QWORD *)v58 + 28) = (char *)v58 + 216;
      *((_QWORD *)v58 + 61) = 0;
      *((_QWORD *)v58 + 62) = 0;
      *((_WORD *)v58 + 368) |= 4u;
      if (nw_path_parameters_get_logging_disabled(v217[13]))
        v61 = 2048;
      else
        v61 = 0;
      v62 = v58[46] & 0xF7FF | (*((unsigned __int8 *)v58 + 738) << 16);
      *((_WORD *)v58 + 368) = v58[46] & 0xF7FF | v61;
      *((_BYTE *)v58 + 738) = BYTE2(v62);
      *((_BYTE *)v58 + 320) = *v222 & 1;
      v63 = nw_parameters_copy_protocol_options_legacy(object, (nw_protocol *)handle);
      if (!v63)
        goto LABEL_92;
      v64 = v63;
      singleton = nw_http_messaging_options_copy_transaction_metadata(v63);
      v66 = nw_http3_copy_application_error_callback(v64);
      v67 = *((_BYTE *)v58 + 440);
      if ((v67 & 1) != 0)
      {
        v68 = (const void *)*((_QWORD *)v58 + 54);
        if (v68)
        {
          _Block_release(v68);
          v67 = *((_BYTE *)v58 + 440);
        }
      }
      *((_QWORD *)v58 + 54) = v66;
      *((_BYTE *)v58 + 440) = v67 | 1;
      os_release(v64);
      if (!singleton)
      {
LABEL_92:
        if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
        singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_transaction_definition_definition);
      }
      v69 = v58 + 46;
      *((_QWORD *)v58 + 49) = singleton;
      v70 = v218;
      if (v218)
      {
        nw_http_transaction_metadata_set_first_on_connection(singleton);
        singleton = (void *)*((_QWORD *)v58 + 49);
      }
      nw_http_transaction_metadata_set_connection_metadata(singleton, *((void **)handle + 156));
      if ((*v69 & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v177 = __nwlog_obj();
          if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
          {
            v178 = (char *)v58 + 636;
            v179 = " ";
            v180 = *(_DWORD *)(*((_QWORD *)v58 + 42) + 1280);
            v181 = *((_QWORD *)v58 + 30);
            if (!v58)
            {
              v179 = "";
              v178 = "";
            }
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http3_stream_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v178;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v179;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v180;
            *(_WORD *)&buf[38] = 2048;
            *(_QWORD *)&buf[40] = v181;
            *(_WORD *)&buf[48] = 2048;
            *(_QWORD *)&buf[50] = v58;
            _os_log_impl(&dword_182FBE000, v177, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> created HTTP/3 stream %p", buf, 0x3Au);
          }
        }
      }
      if (v44)
      {
        nw_protocol_set_input_handler((uint64_t)v58, v44);
        *v58 = *(_OWORD *)v44;
        nw_protocol_set_output_handler(v44, (uint64_t)v58);
        *((_QWORD *)v58 + 19) = v58;
        v71 = *(_QWORD *)(v44 + 24);
        if (v71)
        {
          v72 = *(uint64_t (**)(uint64_t))(v71 + 176);
          if (v72)
            *v69 = *v69 & 0xFFFE | v72(v44);
        }
        v73 = (void *)*((_QWORD *)v58 + 44);
        v74 = (void *)nw_protocol_get_parameters(v44);
        if (v74)
        {
          v75 = v74;
          *((_QWORD *)v58 + 44) = os_retain(v74);
          v76 = nw_parameters_copy_context(v73);
          v77 = v75;
          v78 = *(id *)(v77[13] + 136);

          if (nw_context_shares_workloop(v76, v78))
            goto LABEL_121;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v221;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v78;
          *(_WORD *)&buf[32] = 2112;
          *(_QWORD *)&buf[34] = v76;
          v79 = (const char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v228[0] = 0;
          v215 = (char *)v79;
          if (__nwlog_fault(v79, type, v228))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v80 = gLogObj;
              v81 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v221;
                *(_WORD *)&buf[22] = 2112;
                *(_QWORD *)&buf[24] = v78;
                *(_WORD *)&buf[32] = 2112;
                *(_QWORD *)&buf[34] = v76;
                v82 = "%{public}s Incoming http3 stream %p has different workloop on context %@ than original one from ht"
                      "tp3_stream, which had workloop %@";
LABEL_116:
                v86 = v80;
                v87 = v81;
LABEL_117:
                _os_log_impl(&dword_182FBE000, v86, v87, v82, buf, 0x2Au);
              }
            }
            else if (v228[0])
            {
              v83 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v84 = type[0];
              log = gLogObj;
              v85 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v83)
              {
                if (v85)
                {
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v221;
                  *(_WORD *)&buf[22] = 2112;
                  *(_QWORD *)&buf[24] = v78;
                  *(_WORD *)&buf[32] = 2112;
                  *(_QWORD *)&buf[34] = v76;
                  *(_WORD *)&buf[42] = 2082;
                  *(_QWORD *)&buf[44] = v83;
                  _os_log_impl(&dword_182FBE000, log, v84, "%{public}s Incoming http3 stream %p has different workloop on context %@ than original one from http3_stream, which had workloop %@, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v83);
                goto LABEL_118;
              }
              if (v85)
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v221;
                *(_WORD *)&buf[22] = 2112;
                *(_QWORD *)&buf[24] = v78;
                *(_WORD *)&buf[32] = 2112;
                *(_QWORD *)&buf[34] = v76;
                v82 = "%{public}s Incoming http3 stream %p has different workloop on context %@ than original one from ht"
                      "tp3_stream, which had workloop %@, no backtrace";
                v86 = log;
                v87 = v84;
                goto LABEL_117;
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v80 = gLogObj;
              v81 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v221;
                *(_WORD *)&buf[22] = 2112;
                *(_QWORD *)&buf[24] = v78;
                *(_WORD *)&buf[32] = 2112;
                *(_QWORD *)&buf[34] = v76;
                v82 = "%{public}s Incoming http3 stream %p has different workloop on context %@ than original one from ht"
                      "tp3_stream, which had workloop %@, backtrace limit exceeded";
                goto LABEL_116;
              }
            }
          }
LABEL_118:
          if (v215)
            free(v215);
          v70 = v218;
LABEL_121:
          if (v76)
            os_release(v76);
          if (v78)
            os_release(v78);
          if (v73)
            os_release(v73);
          v88 = (nw_protocol *)*((_QWORD *)v58 + 42);
          if (v88)
          {
            nw_http3_stream_replace_protocol_instance((uint64_t)v58, *((void **)v58 + 44), v88, (uint64_t)v58);
            v89 = nw_parameters_copy_protocol_options_legacy(v77, (nw_protocol *)v58);
            if (v89)
            {
              v90 = v89;
              v91 = v90;
              *((_BYTE *)v58 + 636) = 0;
              v92 = 84;
              v93 = 636;
              while (1)
              {
                v94 = v90[v93 - 588];
                *((_BYTE *)v58 + v93) = v94;
                if (!v94)
                  break;
                --v92;
                ++v93;
                if (v92 <= 1)
                {
                  *((_BYTE *)v58 + v93) = 0;
                  break;
                }
              }

              v95 = v91;
              v96 = *((_WORD *)v95 + 68);

              *((_WORD *)v58 + 316) = v96;
              os_release(v95);
              v44 = (uint64_t)v221;
            }
            else
            {
              v44 = (uint64_t)v221;
              if ((*v69 & 0x800) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v97 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  v98 = *(_DWORD *)(*((_QWORD *)v58 + 42) + 1280);
                  v99 = *((_QWORD *)v58 + 30);
                  v100 = *((_QWORD *)v58 + 44);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v58 + 636;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v98;
                  *(_WORD *)&buf[38] = 2048;
                  *(_QWORD *)&buf[40] = v99;
                  *(_WORD *)&buf[48] = 2048;
                  *(_QWORD *)&buf[50] = v58;
                  *(_WORD *)&buf[58] = 2048;
                  *(_QWORD *)&buf[60] = v100;
                  _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> Failed to access options for protocol %p, parameters %p", buf, 0x44u);
                }
              }
            }
LABEL_137:
            v101 = *((_QWORD *)handle + 110);
            *((_QWORD *)v58 + 68) = v101;
            if (v101)
              v102 = (_QWORD *)(v101 + 552);
            else
              v102 = handle + 888;
            *v102 = v58 + 34;
            *((_QWORD *)handle + 110) = v58;
            *((_QWORD *)v58 + 69) = handle + 880;
            if (*((_QWORD *)handle + 6))
            {
              if (v70)
              {
LABEL_142:
                *(_OWORD *)handle = *(_OWORD *)v44;
                if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
                {
                  if (gLogDatapath)
                  {
                    v196 = __nwlog_obj();
                    if (os_log_type_enabled(v196, OS_LOG_TYPE_DEBUG))
                    {
                      v197 = *((_DWORD *)handle + 320);
                      v198 = *((_QWORD *)handle + 6);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = handle + 1289;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v197;
                      *(_WORD *)&buf[38] = 2048;
                      *(_QWORD *)&buf[40] = handle;
                      *(_WORD *)&buf[48] = 2048;
                      *(_QWORD *)&buf[50] = v198;
                      *(_WORD *)&buf[58] = 2048;
                      *(_QWORD *)&buf[60] = v44;
                      _os_log_impl(&dword_182FBE000, v196, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> protocol %p protocol->default_input_handler %p input_protocol %p", buf, 0x44u);
                    }
                  }
                }
                if (!*((_QWORD *)handle + 152))
                {
                  v126 = object;
                  v127 = *(id *)(v217[13] + 136);

                  v128 = (void *)*((_QWORD *)handle + 151);
                  if (v128)
                  {
                    os_release(v128);
                    *((_QWORD *)handle + 151) = 0;
                  }
                  v129 = nw_path_copy_flow_registration(v127, (uint64_t)handle);
                  *((_QWORD *)handle + 151) = v129;
                  v44 = (uint64_t)v221;
                  if (v127)
                  {
                    os_release(v127);
                    v129 = (id)*((_QWORD *)handle + 151);
                  }
                  if (v129)
                  {
                    v130 = nw_path_flow_registration_copy_endpoint(v129);
                    v131 = nw_path_flow_registration_copy_parameters(*((void **)handle + 151));
                    v132 = nw_endpoint_copy_association_with_evaluator(v130, v131, 0);
                    *((_QWORD *)handle + 152) = v132;
                    if (v130)
                    {
                      os_release(v130);
                      v132 = (id *)*((_QWORD *)handle + 152);
                    }
                    if (v132)
                    {
                      v133 = nw_protocol_instance_stub_create((nw_protocol *)handle);
                      *((_QWORD *)handle + 153) = v133;
                      nw_association_register(*((void **)handle + 152), v126, v133, 0, &__block_literal_global_165_61224);
                      v134 = nw_association_copy_current_path(*((void **)handle + 152), v131);
                      if (v134)
                      {
                        v135 = v134;
                        v136 = nw_path_copy_for_flow_registration(v134, *((void **)handle + 151));
                        if (v136)
                        {
                          v137 = (void *)v136;
                          v138 = *v216;
                          if (*v216 != v137)
                          {
                            if (v138)
                            {
                              os_release(v138);
                              *v216 = 0;
                            }
                            *v216 = os_retain(v137);
                          }
                          if (nw_path_has_flows(v137))
                            v139 = -8388608;
                          else
                            v139 = 0;
                          handle[1375] = (v139 & 0xFF80FFFF | ((handle[1375] & 0x7F) << 16)) >> 16;
                          v140 = nw_parameters_copy_effective_proxy_config(v126);
                          if (v140)
                          {
                            v141 = v140;
                            if (nw_path_has_proxy_config(v135, v140))
                            {
                              v142 = (void *)*((_QWORD *)handle + 154);
                              if (v142)
                                os_release(v142);
                              *((_QWORD *)handle + 154) = v141;
                            }
                            else
                            {
                              os_release(v141);
                            }
                          }
                          os_release(v135);
                        }
                        else
                        {
                          v137 = v135;
                        }
                        os_release(v137);
                      }
                    }
                    if (v131)
                      os_release(v131);
                  }
                }
                v103 = nw_parameters_copy_protocol_options_legacy(object, (nw_protocol *)v58);
                if (!v103)
                  goto LABEL_233;
                v105 = v103;
                v106 = v105;
                handle[1289] = 0;
                v107 = 84;
                v108 = 1289;
                while (1)
                {
                  v109 = v105[v108 - 1241];
                  handle[v108] = v109;
                  if (!v109)
                    break;
                  --v107;
                  ++v108;
                  if (v107 <= 1)
                  {
                    handle[v108] = 0;
                    break;
                  }
                }

                v110 = v106;
                v111 = *((_WORD *)v110 + 68);

                *((_WORD *)handle + 643) = v111;
                *((_QWORD *)handle + 127) = 1000 * nw_http3_get_idle_timeout(v110);
                *((_DWORD *)handle + 319) = nw_http3_get_keepalive_mode(v110);
                if (nw_http3_get_0rtt_enabled(v110))
                  v112 = 32;
                else
                  v112 = 0;
                v113 = *(_WORD *)(handle + 1373) & 0xFFDF | (handle[1375] << 16);
                *(_WORD *)v222 = *(_WORD *)v222 & 0xFFDF | v112;
                handle[1375] = BYTE2(v113);
                handle[1288] = nw_http3_get_sessions_to_request(v110);
                nw_http3_get_resumable_session_agent(v110, (uint64_t)(handle + 848));
                *((_DWORD *)handle + 320) = nw_protocol_get_next_instance_id();
                v114 = v110;
                v115 = *((_DWORD *)v114 + 33);

                if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v116 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    v117 = *((_DWORD *)handle + 320);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = handle + 1289;
                    *(_WORD *)&buf[22] = 2080;
                    *(_QWORD *)&buf[24] = " ";
                    *(_WORD *)&buf[32] = 1024;
                    *(_DWORD *)&buf[34] = v117;
                    *(_WORD *)&buf[38] = 1024;
                    *(_DWORD *)&buf[40] = v117;
                    *(_WORD *)&buf[44] = 1024;
                    *(_DWORD *)&buf[46] = v115;
                    _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> created HTTP/3 and assigned instance ID: %u from C%u", buf, 0x32u);
                  }
                }
                v118 = (const void *)*((_QWORD *)handle + 108);
                v44 = (uint64_t)v221;
                if (v118)
                {
                  _Block_release(v118);
                  *((_QWORD *)handle + 108) = 0;
                }
                v119 = *((_QWORD *)handle + 109);
                if (v119)
                {
                  dispatch_release(v119);
                  *((_QWORD *)handle + 109) = 0;
                }
                *((_QWORD *)handle + 108) = nw_http3_copy_resumable_session_handler(v114);
                *((_QWORD *)handle + 109) = nw_http3_copy_resumable_session_handler_queue(v114);
                v224 = 0;
                v225 = 0;
                v223 = 0;
                if (!nw_http3_get_initial_remote_settings(v114, (uint64_t)&v225, (uint64_t)&v224, (uint64_t)&v223))goto LABEL_232;
                memset(type, 0, 63);
                v120 = v224;
                v121 = v225;
                v122 = v223;
                memset(buf, 0, 63);
                if (v225 == -1)
                {
                  v143 = 0;
                }
                else
                {
                  __src = 6;
                  buf[0] = 6;
                  if (v225 > 0x3F)
                  {
                    if (v225 >> 14)
                    {
                      if (v225 >> 30)
                      {
                        if (v225 >> 62)
                        {
                          v145 = __nwlog_obj();
                          os_log_type_enabled(v145, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v228 = 136446466;
                          *(_QWORD *)&v228[4] = "_http_vle_encode";
                          *(_WORD *)&v228[12] = 2048;
                          *(_QWORD *)&v228[14] = v121;
                          v146 = (void *)_os_log_send_and_compose_impl();
                          result = __nwlog_abort((uint64_t)v146);
                          if (result)
                            goto LABEL_387;
                          free(v146);
                          v123 = 0;
                        }
                        else
                        {
                          __src = bswap64(v225 | 0xC000000000000000);
                          v123 = 8;
                        }
                      }
                      else
                      {
                        __src = bswap32(v225 | 0x80000000);
                        v123 = 4;
                      }
                    }
                    else
                    {
                      __src = bswap32(v225 | 0x4000) >> 16;
                      v123 = 2;
                    }
                  }
                  else
                  {
                    __src = v225;
                    v123 = 1;
                  }
                  memcpy(&buf[1], &__src, v123);
                  v143 = v123 + 1;
                }
                __src = 1;
                buf[v143] = 1;
                if (v120 > 0x3F)
                {
                  if (v120 >> 14)
                  {
                    if (v120 >> 30)
                    {
                      if (v120 >> 62)
                      {
                        v148 = __nwlog_obj();
                        os_log_type_enabled(v148, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v228 = 136446466;
                        *(_QWORD *)&v228[4] = "_http_vle_encode";
                        *(_WORD *)&v228[12] = 2048;
                        *(_QWORD *)&v228[14] = v120;
                        v149 = (void *)_os_log_send_and_compose_impl();
                        result = __nwlog_abort((uint64_t)v149);
                        if (result)
                          goto LABEL_387;
                        free(v149);
                        v147 = 0;
                      }
                      else
                      {
                        __src = bswap64(v120 | 0xC000000000000000);
                        v147 = 8;
                      }
                    }
                    else
                    {
                      __src = bswap32(v120 | 0x80000000);
                      v147 = 4;
                    }
                  }
                  else
                  {
                    __src = bswap32(v120 | 0x4000) >> 16;
                    v147 = 2;
                  }
                }
                else
                {
                  __src = v120;
                  v147 = 1;
                }
                memcpy(&buf[v143 + 1], &__src, v147);
                v150 = v147 + v143 + 1;
                __src = 7;
                buf[v150] = 7;
                if (v122 <= 0x3F)
                {
                  __src = v122;
                  v151 = 1;
LABEL_231:
                  memcpy(&buf[v150 + 1], &__src, v151);
                  v154 = v151 + v150 + 1;
                  memcpy(type, buf, v154);
                  *((_QWORD *)handle + 144) = dispatch_data_create(type, v154, 0, 0);
                  *(_WORD *)v222 |= 0x40u;
LABEL_232:
                  os_release(v114);
                  goto LABEL_233;
                }
                if (!(v122 >> 14))
                {
                  __src = bswap32(v122 | 0x4000) >> 16;
                  v151 = 2;
                  goto LABEL_231;
                }
                if (!(v122 >> 30))
                {
                  __src = bswap32(v122 | 0x80000000);
                  v151 = 4;
                  goto LABEL_231;
                }
                if (!(v122 >> 62))
                {
                  __src = bswap64(v122 | 0xC000000000000000);
                  v151 = 8;
                  goto LABEL_231;
                }
                v152 = __nwlog_obj();
                os_log_type_enabled(v152, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v228 = 136446466;
                *(_QWORD *)&v228[4] = "_http_vle_encode";
                *(_WORD *)&v228[12] = 2048;
                *(_QWORD *)&v228[14] = v122;
                v153 = (void *)_os_log_send_and_compose_impl();
                result = __nwlog_abort((uint64_t)v153);
                if (!result)
                {
                  free(v153);
                  v151 = 0;
                  goto LABEL_231;
                }
LABEL_387:
                __break(1u);
                return result;
              }
            }
            else
            {
              nw_protocol_set_input_handler((uint64_t)handle, v44);
              if (v70)
                goto LABEL_142;
            }
            if (v35)
            {
              v124 = *(void (***)(uint64_t, _OWORD *))(v35 + 24);
              if (v124)
              {
                v125 = *v124;
                if (v125)
                {
                  v125(v35, v58);
LABEL_233:
                  if (*((_QWORD *)handle + 158))
                  {
                    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v183 = __nwlog_obj();
                        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
                        {
                          v184 = *((_DWORD *)handle + 320);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = handle + 1289;
                          *(_WORD *)&buf[22] = 2080;
                          *(_QWORD *)&buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v184;
                          _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> deactivating destroy timer because we are active again", buf, 0x26u);
                        }
                      }
                    }
                    nw_queue_cancel_source(*((_QWORD *)handle + 158), v104);
                    *((_QWORD *)handle + 158) = 0;
                  }
                  v155 = *(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16);
                  if ((v155 & 0x200000) != 0 && *((_QWORD *)handle + 155) && *((_DWORD *)handle + 319) == 2)
                  {
                    if ((v155 & 0x400000) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v212 = __nwlog_obj();
                        if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
                        {
                          v213 = *((_DWORD *)handle + 320);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = handle + 1289;
                          *(_WORD *)&buf[22] = 2080;
                          *(_QWORD *)&buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v213;
                          _os_log_impl(&dword_182FBE000, v212, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> re-enabling QUIC keepalives", buf, 0x26u);
                        }
                      }
                    }
                    v156 = *(unsigned __int16 *)v222;
                    v157 = (v156 | (handle[1375] << 16)) & 0xFFDFFFFF;
                    *(_WORD *)v222 = v156;
                    handle[1375] = BYTE2(v157);
                    nw_quic_connection_set_keepalive(*((void **)handle + 155), 0xFFFF);
                    buf[0] = 0;
                    output_handler = v219->output_handler;
                    if (output_handler)
                    {
                      v159 = output_handler->callbacks;
                      if (v159)
                      {
                        notify = (void (*)(nw_protocol *, nw_protocol *))v159->notify;
                        if (notify)
                          notify(output_handler, v219);
                      }
                    }
                    v155 = *(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16);
                  }
                  if ((v155 & 0x400000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v161 = gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
                    {
                      v162 = *((_DWORD *)handle + 320);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = handle + 1289;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v162;
                      *(_WORD *)&buf[38] = 2048;
                      *(_QWORD *)&buf[40] = v44;
                      *(_WORD *)&buf[48] = 2082;
                      *(_QWORD *)&buf[50] = (char *)v58 + 636;
                      _os_log_impl(&dword_182FBE000, v161, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> added input handler %p from %{public}s", buf, 0x3Au);
                    }
                  }
                  return 1;
                }
              }
              __nwlog_obj();
              v182 = *(const char **)(v35 + 16);
              if (!v182)
                v182 = "invalid";
            }
            else
            {
              __nwlog_obj();
              v182 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v182;
            v186 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v228[0] = 0;
            if (__nwlog_fault(v186, type, v228))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v187 = __nwlog_obj();
                v188 = type[0];
                if (!os_log_type_enabled(v187, type[0]))
                  goto LABEL_351;
                v189 = "invalid";
                if (v35 && *(_QWORD *)(v35 + 16))
                  v189 = *(const char **)(v35 + 16);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v189;
                v190 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_349:
                v209 = v187;
                v210 = v188;
LABEL_350:
                _os_log_impl(&dword_182FBE000, v209, v210, v190, buf, 0x16u);
                v44 = (uint64_t)v221;
                goto LABEL_351;
              }
              if (!v228[0])
              {
                v187 = __nwlog_obj();
                v188 = type[0];
                if (!os_log_type_enabled(v187, type[0]))
                  goto LABEL_351;
                v208 = "invalid";
                if (v35 && *(_QWORD *)(v35 + 16))
                  v208 = *(const char **)(v35 + 16);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v208;
                v190 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
                goto LABEL_349;
              }
              v191 = (char *)__nw_create_backtrace_string();
              v192 = __nwlog_obj();
              v193 = type[0];
              v194 = os_log_type_enabled(v192, type[0]);
              if (v191)
              {
                if (v194)
                {
                  v195 = "invalid";
                  if (v35 && *(_QWORD *)(v35 + 16))
                    v195 = *(const char **)(v35 + 16);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v195;
                  *(_WORD *)&buf[22] = 2082;
                  *(_QWORD *)&buf[24] = v191;
                  _os_log_impl(&dword_182FBE000, v192, v193, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
                  v44 = (uint64_t)v221;
                }
                free(v191);
                goto LABEL_351;
              }
              if (v194)
              {
                v211 = "invalid";
                if (v35 && *(_QWORD *)(v35 + 16))
                  v211 = *(const char **)(v35 + 16);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v211;
                v190 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
                v209 = v192;
                v210 = v193;
                goto LABEL_350;
              }
            }
LABEL_351:
            if (v186)
              free(v186);
            goto LABEL_233;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
          v173 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v228[0] = 0;
          v44 = (uint64_t)v221;
          if (!__nwlog_fault(v173, type, v228))
            goto LABEL_385;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v174 = __nwlog_obj();
            v175 = type[0];
            if (!os_log_type_enabled(v174, type[0]))
              goto LABEL_385;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            v176 = "%{public}s called with null options_protocol";
            goto LABEL_384;
          }
          if (!v228[0])
          {
            v174 = __nwlog_obj();
            v175 = type[0];
            v70 = v218;
            if (!os_log_type_enabled(v174, type[0]))
              goto LABEL_385;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            v176 = "%{public}s called with null options_protocol, backtrace limit exceeded";
            goto LABEL_384;
          }
          v201 = (char *)__nw_create_backtrace_string();
          v174 = __nwlog_obj();
          v175 = type[0];
          v204 = os_log_type_enabled(v174, type[0]);
          if (!v201)
          {
            v44 = (uint64_t)v221;
            v70 = v218;
            if (!v204)
              goto LABEL_385;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            v176 = "%{public}s called with null options_protocol, no backtrace";
            goto LABEL_384;
          }
          if (v204)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v201;
            v203 = "%{public}s called with null options_protocol, dumping backtrace:%{public}s";
            goto LABEL_332;
          }
          goto LABEL_333;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
        v173 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v228[0] = 0;
        if (!__nwlog_fault(v173, type, v228))
          goto LABEL_385;
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (!v228[0])
          {
            v174 = __nwlog_obj();
            v175 = type[0];
            v70 = v218;
            if (!os_log_type_enabled(v174, type[0]))
              goto LABEL_385;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            v176 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_384;
          }
          v201 = (char *)__nw_create_backtrace_string();
          v174 = __nwlog_obj();
          v175 = type[0];
          v202 = os_log_type_enabled(v174, type[0]);
          if (!v201)
          {
            v44 = (uint64_t)v221;
            v70 = v218;
            if (!v202)
              goto LABEL_385;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            v176 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_384;
          }
          if (v202)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v201;
            v203 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_332:
            _os_log_impl(&dword_182FBE000, v174, v175, v203, buf, 0x16u);
          }
LABEL_333:
          free(v201);
          v44 = (uint64_t)v221;
          v70 = v218;
          if (!v173)
            goto LABEL_137;
LABEL_386:
          free(v173);
          goto LABEL_137;
        }
        v174 = __nwlog_obj();
        v175 = type[0];
        if (!os_log_type_enabled(v174, type[0]))
          goto LABEL_385;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
        v176 = "%{public}s called with null parameters";
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
        v173 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v228[0] = 0;
        if (!__nwlog_fault(v173, type, v228))
          goto LABEL_385;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v174 = __nwlog_obj();
          v175 = type[0];
          if (!os_log_type_enabled(v174, type[0]))
            goto LABEL_385;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
          v176 = "%{public}s called with null input_protocol";
        }
        else if (v228[0])
        {
          v199 = (char *)__nw_create_backtrace_string();
          v174 = __nwlog_obj();
          v175 = type[0];
          v200 = os_log_type_enabled(v174, type[0]);
          if (v199)
          {
            if (v200)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v199;
              _os_log_impl(&dword_182FBE000, v174, v175, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v199);
            v44 = (uint64_t)v221;
            v70 = v218;
LABEL_385:
            if (!v173)
              goto LABEL_137;
            goto LABEL_386;
          }
          v44 = (uint64_t)v221;
          v70 = v218;
          if (!v200)
            goto LABEL_385;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
          v176 = "%{public}s called with null input_protocol, no backtrace";
        }
        else
        {
          v174 = __nwlog_obj();
          v175 = type[0];
          v70 = v218;
          if (!os_log_type_enabled(v174, type[0]))
            goto LABEL_385;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_stream_add_input_handler";
          v176 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        }
      }
LABEL_384:
      _os_log_impl(&dword_182FBE000, v174, v175, v176, buf, 0xCu);
      goto LABEL_385;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    v163 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v228[0] = 0;
    if (!__nwlog_fault(v163, type, v228))
      goto LABEL_375;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v164 = __nwlog_obj();
      v165 = type[0];
      if (!os_log_type_enabled(v164, type[0]))
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null parameters";
      goto LABEL_374;
    }
    if (!v228[0])
    {
      v164 = __nwlog_obj();
      v165 = type[0];
      if (!os_log_type_enabled(v164, type[0]))
        goto LABEL_375;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
      v166 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_374;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v164 = __nwlog_obj();
    v165 = type[0];
    v185 = os_log_type_enabled(v164, type[0]);
    if (backtrace_string)
    {
      if (v185)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v169 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
        goto LABEL_299;
      }
LABEL_300:
      free(backtrace_string);
      goto LABEL_375;
    }
    if (!v185)
      goto LABEL_375;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    v166 = "%{public}s called with null parameters, no backtrace";
LABEL_374:
    _os_log_impl(&dword_182FBE000, v164, v165, v166, buf, 0xCu);
LABEL_375:
    if (v163)
      free(v163);
    return 0;
  }
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) != 0)
    return 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    v16 = *((_DWORD *)handle + 320);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = handle + 1289;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v16;
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> cannot add input handler to closed connection", buf, 0x26u);
    return 0;
  }
  return result;
}

void sub_18395CC9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http3_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _WORD *v5;
  NSObject *v6;
  int v7;
  nw_protocol *default_input_handler;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*notify)(void);
  uint64_t v16;
  int v17;
  NSObject *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  int v28;
  int v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  nw_protocol *v33;
  uint64_t v34;
  dispatch_time_t v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  const char *v43;
  char *backtrace_string;
  _BOOL4 v45;
  const char *v46;
  _BOOL4 v47;
  _QWORD v48[5];
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  nw_protocol *v60;
  __int16 v61;
  nw_protocol *v62;
  __int16 v63;
  nw_protocol *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http3_remove_input_handler";
    v40 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v40, &type, &v49))
      goto LABEL_83;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v49)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_83;
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http3_remove_input_handler";
        v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v45 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v45)
          goto LABEL_83;
        *(_DWORD *)buf = 136446210;
        v52 = "nw_protocol_http3_remove_input_handler";
        v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_82;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_protocol_http3_remove_input_handler";
        v53 = 2082;
        v54 = backtrace_string;
        v46 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_72:
        _os_log_impl(&dword_182FBE000, v41, v42, v46, buf, 0x16u);
      }
LABEL_73:
      free(backtrace_string);
      goto LABEL_83;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http3_remove_input_handler";
    v43 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_182FBE000, v41, v42, v43, buf, 0xCu);
LABEL_83:
    if (v40)
      free(v40);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http3_remove_input_handler";
    v40 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v40, &type, &v49))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v41 = __nwlog_obj();
      v42 = type;
      if (!os_log_type_enabled(v41, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_protocol_http3_remove_input_handler";
      v43 = "%{public}s called with null http3";
      goto LABEL_82;
    }
    if (!v49)
    {
      v41 = __nwlog_obj();
      v42 = type;
      if (!os_log_type_enabled(v41, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_protocol_http3_remove_input_handler";
      v43 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v41 = __nwlog_obj();
    v42 = type;
    v47 = os_log_type_enabled(v41, type);
    if (backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_protocol_http3_remove_input_handler";
        v53 = 2082;
        v54 = backtrace_string;
        v46 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (!v47)
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_protocol_http3_remove_input_handler";
    v43 = "%{public}s called with null http3, no backtrace";
    goto LABEL_82;
  }
  v5 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v7 = *((_DWORD *)handle + 320);
      default_input_handler = a1->default_input_handler;
      *(_DWORD *)buf = 136447746;
      v52 = "nw_protocol_http3_remove_input_handler";
      v53 = 2082;
      v54 = handle + 1289;
      v55 = 2080;
      v56 = " ";
      v57 = 1024;
      v58 = v7;
      v59 = 2048;
      v60 = a1;
      v61 = 2048;
      v62 = default_input_handler;
      v63 = 2048;
      v64 = a2;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> protocol %p, default_input_handler %p, input protocol %p", buf, 0x44u);
    }
  }
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  v9 = *((_QWORD *)handle + 110);
  if (v9)
  {
    v10 = (unsigned __int16)*v5 | (handle[1375] << 16);
    if ((v10 & 0x200000) == 0 && *((_QWORD *)handle + 155) && *((_DWORD *)handle + 319) == 2)
    {
      while ((*(_WORD *)(v9 + 736) & 0x2000) != 0)
      {
        v9 = *(_QWORD *)(v9 + 544);
        if (!v9)
        {
          if ((v10 & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v11 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v12 = *((_DWORD *)handle + 320);
              *(_DWORD *)buf = 136446978;
              v52 = "nw_protocol_http3_remove_input_handler";
              v53 = 2082;
              v54 = handle + 1289;
              v55 = 2080;
              v56 = " ";
              v57 = 1024;
              v58 = v12;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> disabling QUIC keepalives due to idleness", buf, 0x26u);
            }
          }
          handle[1375] |= 0x20u;
          nw_quic_connection_set_keepalive(*((void **)handle + 155), 0);
          buf[0] = 1;
          output_handler = a1->output_handler;
          if (output_handler)
          {
            callbacks = output_handler->callbacks;
            if (callbacks)
            {
              notify = (void (*)(void))callbacks->notify;
              if (notify)
                notify();
            }
          }
          break;
        }
      }
    }
  }
  if (a1->default_input_handler != a2)
    return 0;
  v17 = (unsigned __int16)*v5;
  if ((v17 & 0x18) == 0)
  {
    if (((v17 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v19 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        v52 = "nw_protocol_http3_remove_input_handler";
        v53 = 2082;
        v54 = handle + 1289;
        v55 = 2080;
        v56 = " ";
        v57 = 1024;
        v58 = v19;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> first input handler bailed, closing", buf, 0x26u);
      }
    }
    *v5 |= 8u;
    nw_protocol_remove_instance((uint64_t)handle);
    v20 = (_QWORD *)*((_QWORD *)handle + 110);
    if (!v20)
      goto LABEL_33;
    do
    {
      v21 = (_QWORD *)v20[68];
      nw_protocol_notify(v20, (uint64_t)handle, 22);
      v20 = v21;
    }
    while (v21);
  }
  v22 = *((_QWORD *)handle + 110);
  if (!v22)
  {
LABEL_33:
    nw_protocol_set_input_handler((uint64_t)a1, 0);
    v26 = (unsigned __int16)*v5;
    if ((v26 & 0x800) == 0)
    {
      if (((v26 | (handle[1375] << 16)) & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v28 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          v52 = "nw_protocol_http3_remove_input_handler";
          v53 = 2082;
          v54 = handle + 1289;
          v55 = 2080;
          v56 = " ";
          v57 = 1024;
          v58 = v28;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> called before initial connect, will tear down immediately", buf, 0x26u);
        }
      }
      *v5 |= 8u;
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_set_output_handler((uint64_t)handle, 0);
    }
    if (*((_QWORD *)handle + 155))
    {
      v29 = *((_DWORD *)handle + 319);
      if (v29 == 2 || v29 == 1 && (*(_WORD *)(handle + 1373) & 8) != 0)
      {
        if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v31 = *((_DWORD *)handle + 320);
            *(_DWORD *)buf = 136446978;
            v52 = "nw_protocol_http3_remove_input_handler";
            v53 = 2082;
            v54 = handle + 1289;
            v55 = 2080;
            v56 = " ";
            v57 = 1024;
            v58 = v31;
            _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> disabling QUIC keepalives", buf, 0x26u);
          }
        }
        handle[1375] |= 0x20u;
        nw_quic_connection_set_keepalive(*((void **)handle + 155), 0);
      }
    }
    v32 = *((_QWORD *)handle + 158);
    if (v32)
      nw_queue_cancel_source(v32, v25);
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 0x40000000;
    v48[2] = ___ZL38nw_protocol_http3_remove_input_handlerP11nw_protocolS0_b_block_invoke;
    v48[3] = &__block_descriptor_tmp_167;
    v48[4] = handle;
    *((_QWORD *)handle + 158) = nw_queue_context_create_source(0, 2, 3, 0, v48, 0);
    v33 = (nw_protocol *)*((_QWORD *)handle + 127);
    if (!nw_protocol_http3_accept((uint64_t)a1))
      v33 = 0;
    v34 = *((_QWORD *)handle + 158);
    v35 = dispatch_time(0x8000000000000000, 1000000 * (_QWORD)v33);
    nw_queue_set_timer_values(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 1000 * (_QWORD)v33);
    if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v38 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136447234;
        v52 = "nw_protocol_http3_remove_input_handler";
        v53 = 2082;
        v54 = handle + 1289;
        v55 = 2080;
        v56 = " ";
        v57 = 1024;
        v58 = v38;
        v59 = 2048;
        v60 = v33;
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> activating destroy timer for %lldms", buf, 0x30u);
      }
    }
    nw_queue_activate_source(*((_QWORD *)handle + 158), v36);
    return 1;
  }
  nw_protocol_set_input_handler((uint64_t)a1, *(_QWORD *)(v22 + 48));
  if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) != 0)
    return 1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v23 = gLogObj;
  v16 = 1;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    v24 = *((_DWORD *)handle + 320);
    *(_DWORD *)buf = 136446978;
    v52 = "nw_protocol_http3_remove_input_handler";
    v53 = 2082;
    v54 = handle + 1289;
    v55 = 2080;
    v56 = " ";
    v57 = 1024;
    v58 = v24;
    _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> not destroying, has streams", buf, 0x26u);
  }
  return v16;
}

void nw_protocol_http3_input_available(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_input_available";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http3_input_available";
      v7 = "%{public}s called with null protocol";
      goto LABEL_24;
    }
    if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v13 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (!v13)
          goto LABEL_47;
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_http3_input_available";
        v20 = 2082;
        v21 = backtrace_string;
        v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
      if (!v13)
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http3_input_available";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http3_input_available";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_24:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_25;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v10 = __nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v11 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          v19 = "nw_protocol_http3_input_available";
          v20 = 2082;
          v21 = handle + 1289;
          v22 = 2080;
          v23 = " ";
          v24 = 1024;
          v25 = v11;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    if (*((nw_protocol **)handle + 131) == a2)
    {
      nw_http3_control_stream_process_input((uint64_t)handle);
      return;
    }
    if (*((nw_protocol **)handle + 133) == a2)
    {
      nw_http3_encoder_stream_process_input((uint64_t)handle);
      return;
    }
    if (*((nw_protocol **)handle + 135) == a2)
    {
      nw_http3_decoder_stream_process_input((uint64_t)handle);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_input_available";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v4, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_input_available";
        v7 = "%{public}s input_available for unknown stream";
        goto LABEL_24;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_input_available";
        v7 = "%{public}s input_available for unknown stream, backtrace limit exceeded";
        goto LABEL_24;
      }
      v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v8)
      {
        if (!v9)
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_input_available";
        v7 = "%{public}s input_available for unknown stream, no backtrace";
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_http3_input_available";
        v20 = 2082;
        v21 = v8;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s input_available for unknown stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v8);
    }
LABEL_25:
    if (!v4)
      return;
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_http3_input_available";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16))
    goto LABEL_25;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_25;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_input_available";
    v7 = "%{public}s called with null http3";
    goto LABEL_24;
  }
  if (!v16)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_25;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_input_available";
    v7 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_24;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v15 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (!v15)
      goto LABEL_25;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_input_available";
    v7 = "%{public}s called with null http3, no backtrace";
    goto LABEL_24;
  }
  if (!v15)
    goto LABEL_47;
  *(_DWORD *)buf = 136446466;
  v19 = "nw_protocol_http3_input_available";
  v20 = 2082;
  v21 = backtrace_string;
  v14 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_46:
  _os_log_impl(&dword_182FBE000, v5, v6, v14, buf, 0x16u);
LABEL_47:
  free(backtrace_string);
  if (v4)
LABEL_26:
    free(v4);
}

void nw_protocol_http3_output_available(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_output_available";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http3_output_available";
      v7 = "%{public}s called with null protocol";
      goto LABEL_24;
    }
    if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v13 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (!v13)
          goto LABEL_47;
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_http3_output_available";
        v20 = 2082;
        v21 = backtrace_string;
        v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
      if (!v13)
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http3_output_available";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http3_output_available";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_24:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_25;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v10 = __nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v11 = *((_DWORD *)handle + 320);
          *(_DWORD *)buf = 136446978;
          v19 = "nw_protocol_http3_output_available";
          v20 = 2082;
          v21 = handle + 1289;
          v22 = 2080;
          v23 = " ";
          v24 = 1024;
          v25 = v11;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    if (*((nw_protocol **)handle + 4) == a2)
    {
      nw_http3_control_stream_process_output((uint64_t)handle, (uint64_t)a2);
      return;
    }
    if (*((nw_protocol **)handle + 132) == a2)
    {
      nw_http3_encoder_stream_process_output((uint64_t)handle);
      return;
    }
    if (*((nw_protocol **)handle + 134) == a2)
    {
      nw_http3_decoder_stream_process_output((uint64_t)handle);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_output_available";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v4, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_output_available";
        v7 = "%{public}s output_available for unknown stream";
        goto LABEL_24;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_output_available";
        v7 = "%{public}s output_available for unknown stream, backtrace limit exceeded";
        goto LABEL_24;
      }
      v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v8)
      {
        if (!v9)
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_output_available";
        v7 = "%{public}s output_available for unknown stream, no backtrace";
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_http3_output_available";
        v20 = 2082;
        v21 = v8;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s output_available for unknown stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v8);
    }
LABEL_25:
    if (!v4)
      return;
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_http3_output_available";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16))
    goto LABEL_25;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_25;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_output_available";
    v7 = "%{public}s called with null http3";
    goto LABEL_24;
  }
  if (!v16)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_25;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_output_available";
    v7 = "%{public}s called with null http3, backtrace limit exceeded";
    goto LABEL_24;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v15 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (!v15)
      goto LABEL_25;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_output_available";
    v7 = "%{public}s called with null http3, no backtrace";
    goto LABEL_24;
  }
  if (!v15)
    goto LABEL_47;
  *(_DWORD *)buf = 136446466;
  v19 = "nw_protocol_http3_output_available";
  v20 = 2082;
  v21 = backtrace_string;
  v14 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_46:
  _os_log_impl(&dword_182FBE000, v5, v6, v14, buf, 0x16u);
LABEL_47:
  free(backtrace_string);
  if (v4)
LABEL_26:
    free(v4);
}

uint64_t nw_protocol_http3_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  char *handle;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_http3_get_input_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http3_get_input_frames";
      v10 = "%{public}s called with null protocol";
      goto LABEL_48;
    }
    if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v20 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (!v20)
          goto LABEL_38;
        *(_DWORD *)buf = 136446466;
        v26 = "nw_protocol_http3_get_input_frames";
        v27 = 2082;
        v28 = backtrace_string;
        v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
      if (!v20)
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http3_get_input_frames";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http3_get_input_frames";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_48:
    v13 = v17;
    v14 = v18;
    v15 = 12;
    goto LABEL_17;
  }
  handle = (char *)a1->handle;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!handle)
  {
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_http3_get_input_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v7, &type, &v23))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http3_get_input_frames";
      v10 = "%{public}s called with null http3";
      goto LABEL_48;
    }
    if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v22 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (!v22)
          goto LABEL_38;
        *(_DWORD *)buf = 136446466;
        v26 = "nw_protocol_http3_get_input_frames";
        v27 = 2082;
        v28 = backtrace_string;
        v21 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_37:
        _os_log_impl(&dword_182FBE000, v17, v18, v21, buf, 0x16u);
LABEL_38:
        free(backtrace_string);
        if (!v7)
          return 0;
        goto LABEL_19;
      }
      if (!v22)
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http3_get_input_frames";
      v10 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http3_get_input_frames";
      v10 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    goto LABEL_48;
  }
  *(_DWORD *)buf = 136446466;
  v26 = "nw_protocol_http3_get_input_frames";
  v27 = 2048;
  v28 = handle;
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v7, &type, &v23))
    goto LABEL_18;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_18;
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_http3_get_input_frames";
    v27 = 2048;
    v28 = handle;
    v10 = "%{public}s http3 %p called";
LABEL_16:
    v13 = v8;
    v14 = v9;
    v15 = 22;
LABEL_17:
    _os_log_impl(&dword_182FBE000, v13, v14, v10, buf, v15);
    goto LABEL_18;
  }
  if (!v23)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_18;
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_http3_get_input_frames";
    v27 = 2048;
    v28 = handle;
    v10 = "%{public}s http3 %p called, backtrace limit exceeded";
    goto LABEL_16;
  }
  v11 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = gLogObj;
  v9 = type;
  v12 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v11)
  {
    if (!v12)
      goto LABEL_18;
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_http3_get_input_frames";
    v27 = 2048;
    v28 = handle;
    v10 = "%{public}s http3 %p called, no backtrace";
    goto LABEL_16;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446722;
    v26 = "nw_protocol_http3_get_input_frames";
    v27 = 2048;
    v28 = handle;
    v29 = 2082;
    v30 = v11;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s http3 %p called, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v11);
LABEL_18:
  if (v7)
LABEL_19:
    free(v7);
  return 0;
}

BOOL nw_protocol_http3_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  char *handle;
  NSObject *v4;
  _BOOL8 result;
  int v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  NSObject *v16;
  int v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  nw_listen_protocol *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_add_listen_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18))
      goto LABEL_42;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_add_listen_handler";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13)
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_add_listen_handler";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_protocol_http3_add_listen_handler";
        v22 = 2082;
        v23 = backtrace_string;
        v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
      }
LABEL_29:
      free(backtrace_string);
      goto LABEL_42;
    }
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_add_listen_handler";
    v11 = "%{public}s called with null protocol";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
LABEL_42:
    if (v8)
      free(v8);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_add_listen_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_add_listen_handler";
      v11 = "%{public}s called with null http3";
      goto LABEL_41;
    }
    if (!v18)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_add_listen_handler";
      v11 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_protocol_http3_add_listen_handler";
        v22 = 2082;
        v23 = backtrace_string;
        v14 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    if (!v15)
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_add_listen_handler";
    v11 = "%{public}s called with null http3, no backtrace";
    goto LABEL_41;
  }
  if (*((_QWORD *)handle + 136))
  {
    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v6 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        v21 = "nw_protocol_http3_add_listen_handler";
        v22 = 2082;
        v23 = handle + 1289;
        v24 = 2080;
        v25 = " ";
        v26 = 1024;
        v27 = v6;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Already have a listen handler, ignoring add", buf, 0x26u);
        return 0;
      }
      return result;
    }
    return 0;
  }
  *((_QWORD *)handle + 136) = a2;
  a2->protocol_handler = (nw_protocol *)handle;
  if ((a3 & 1) != 0)
  {
    handle[1375] = (*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16) | 0x10000u) >> 16;
    nw_protocol_remove_instance((uint64_t)handle);
  }
  result = 1;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0 && gLogDatapath)
  {
    v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v17 = *((_DWORD *)handle + 320);
      *(_DWORD *)buf = 136447234;
      v21 = "nw_protocol_http3_add_listen_handler";
      v22 = 2082;
      v23 = handle + 1289;
      v24 = 2080;
      v25 = " ";
      v26 = 1024;
      v27 = v17;
      v28 = 2048;
      v29 = a2;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> added protocol listen handler %p", buf, 0x30u);
    }
    return 1;
  }
  return result;
}

uint64_t nw_protocol_http3_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  unsigned __int8 *handle;
  int v4;
  NSObject *v5;
  int v6;
  _WORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  NSObject *v20;
  int v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http3_remove_listen_handler";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v15 = "%{public}s called with null protocol";
LABEL_47:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
LABEL_48:
      if (v12)
        free(v12);
      return 0;
    }
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v17 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_http3_remove_listen_handler";
      v26 = 2082;
      v27 = backtrace_string;
      v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v13, v14, v18, buf, 0x16u);
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_48;
  }
  handle = (unsigned __int8 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http3_remove_listen_handler";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v15 = "%{public}s called with null http3";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v15 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v15 = "%{public}s called with null http3, no backtrace";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_http3_remove_listen_handler";
      v26 = 2082;
      v27 = backtrace_string;
      v18 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  v4 = (handle[1375] >> 6) & 1;
  if (!gLogDatapath)
    LOBYTE(v4) = 1;
  if (*((nw_listen_protocol **)handle + 136) == a2)
  {
    v7 = handle + 1373;
    if ((v4 & 1) == 0)
    {
      v20 = __nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v21 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        v25 = "nw_protocol_http3_remove_listen_handler";
        v26 = 2082;
        v27 = (char *)(handle + 1289);
        v28 = 2080;
        v29 = " ";
        v30 = 1024;
        v31 = v21;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removing protocol listen handler", buf, 0x26u);
      }
    }
    handle[1375] = (*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16) | 0x10000u) >> 16;
    *((_QWORD *)handle + 136) = 0;
    a2->protocol_handler = 0;
    v8 = (unsigned __int16)*v7;
    v9 = v8 | (handle[1375] << 16);
    if ((v8 & 1) != 0 && *((_QWORD *)handle + 25))
    {
      if (*((_DWORD *)handle + 318) == 3 && !*((_QWORD *)handle + 114))
      {
        v10 = 1;
        *((_DWORD *)handle + 318) = 1;
        nw_http3_control_stream_process_output((uint64_t)handle, (uint64_t)a2);
        return v10;
      }
      *v7 = v8;
      handle[1375] = (v9 | 0x20000u) >> 16;
    }
    else
    {
      nw_http3_async_close_connection_if_no_stream((uint64_t)handle);
    }
  }
  else if ((v4 & 1) == 0)
  {
    v5 = __nwlog_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = *((_DWORD *)handle + 320);
      *(_DWORD *)buf = 136446978;
      v25 = "nw_protocol_http3_remove_listen_handler";
      v26 = 2082;
      v27 = (char *)(handle + 1289);
      v28 = 2080;
      v29 = " ";
      v30 = 1024;
      v31 = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> ignoring request to remove http3 listen handler, does not match our handler", buf, 0x26u);
    }
  }
  return 1;
}

uint64_t nw_protocol_http3_get_parameters(nw_protocol *a1)
{
  char *handle;
  uint64_t result;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  NSObject *v8;
  int v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  nw_protocol *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          v8 = __nwlog_obj();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            v9 = *((_DWORD *)handle + 320);
            *(_DWORD *)buf = 136447490;
            v17 = "nw_protocol_http3_get_parameters";
            v18 = 2082;
            v19 = handle + 1289;
            v20 = 2080;
            v21 = " ";
            v22 = 1024;
            v23 = v9;
            v24 = 2048;
            v25 = a1;
            v26 = 2048;
            v27 = handle;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with protocol %p (control_outbound_protocol is %p)", buf, 0x3Au);
          }
        }
      }
      result = *((_QWORD *)handle + 141);
      if (!result)
        return *((_QWORD *)handle + 140);
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_get_parameters";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http3_get_parameters";
        v7 = "%{public}s called with null http3";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http3_get_parameters";
        v7 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v13 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http3_get_parameters";
        v7 = "%{public}s called with null http3, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http3_get_parameters";
      v18 = 2082;
      v19 = backtrace_string;
      v12 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_http3_get_parameters";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
    goto LABEL_37;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http3_get_parameters";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http3_get_parameters";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http3_get_parameters";
      v18 = 2082;
      v19 = backtrace_string;
      v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_182FBE000, v5, v6, v12, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_get_parameters";
    v7 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_37:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_protocol_http3_get_local_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[138];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_local_endpoint";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_local_endpoint";
        v6 = "%{public}s called with null http3";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_local_endpoint";
        v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_local_endpoint";
        v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_local_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http3_get_local_endpoint";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_local_endpoint";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_local_endpoint";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_local_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_local_endpoint";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_http3_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[137];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_remote_endpoint";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_remote_endpoint";
        v6 = "%{public}s called with null http3";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_remote_endpoint";
        v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_remote_endpoint";
        v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_remote_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http3_get_remote_endpoint";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_remote_endpoint";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_remote_endpoint";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_remote_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_remote_endpoint";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_http3_get_path(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[139];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_path";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_path";
        v6 = "%{public}s called with null http3";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_path";
        v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_path";
        v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_path";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http3_get_path";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_path";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_path";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_path";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_path";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

void nw_protocol_http3_notify(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  int v14;
  void **v15;
  NSObject *v16;
  int v17;
  __int16 v18;
  _WORD *v19;
  int v20;
  int v21;
  NSObject *v22;
  int v23;
  unsigned int v24;
  NSObject *v25;
  int v26;
  _WORD *v27;
  int v28;
  NSObject *v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char *backtrace_string;
  _BOOL4 v42;
  char *v43;
  _BOOL4 v44;
  const char *v45;
  _BOOL4 v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http3_notify";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v37, &type, &v47))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      v40 = "%{public}s called with null protocol";
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v42 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "nw_protocol_http3_notify";
          v51 = 2082;
          v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_101:
        if (!v37)
          return;
        goto LABEL_102;
      }
      if (!v42)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      v40 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      v40 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_100;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http3_notify";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v37, &type, &v47))
      goto LABEL_101;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v47)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (!os_log_type_enabled(v38, type))
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http3_notify";
        v40 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_100;
      }
      v43 = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v44 = os_log_type_enabled(v38, type);
      if (!v43)
      {
        if (!v44)
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v50 = "nw_protocol_http3_notify";
        v40 = "%{public}s called with null http3, no backtrace";
        goto LABEL_100;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_protocol_http3_notify";
        v51 = 2082;
        v52 = v43;
        v45 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_85:
        _os_log_impl(&dword_182FBE000, v38, v39, v45, buf, 0x16u);
      }
LABEL_86:
      free(v43);
      if (!v37)
        return;
LABEL_102:
      free(v37);
      return;
    }
    v38 = __nwlog_obj();
    v39 = type;
    if (!os_log_type_enabled(v38, type))
      goto LABEL_101;
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http3_notify";
    v40 = "%{public}s called with null http3";
LABEL_100:
    _os_log_impl(&dword_182FBE000, v38, v39, v40, buf, 0xCu);
    goto LABEL_101;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_protocol_http3_notify";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v37, &type, &v47))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      v40 = "%{public}s called with null other_protocol";
      goto LABEL_100;
    }
    if (!v47)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      v40 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_100;
    }
    v43 = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type;
    v46 = os_log_type_enabled(v38, type);
    if (!v43)
    {
      if (!v46)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v50 = "nw_protocol_http3_notify";
      v40 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_100;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_protocol_http3_notify";
      v51 = 2082;
      v52 = v43;
      v45 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_85;
    }
    goto LABEL_86;
  }
  switch(a3)
  {
    case 12:
      if ((*(_WORD *)(v6 + 1373) & 8) == 0)
      {
        nw_http3_async_close_connection_if_no_stream(*(_QWORD *)(a1 + 40));
        nw_http3_notify_do_not_reuse(v6);
      }
      return;
    case 13:
      v7 = *(unsigned __int16 *)(v6 + 1373) | (*(unsigned __int8 *)(v6 + 1375) << 16);
      if ((v7 & 0x100000) == 0 && *(_QWORD *)(v6 + 1240) && *(_DWORD *)(v6 + 1276))
      {
        if ((v7 & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v9 = *(_DWORD *)(v6 + 1280);
            *(_DWORD *)buf = 136446978;
            v50 = "nw_protocol_http3_notify";
            v51 = 2082;
            v52 = (char *)(v6 + 1289);
            v53 = 2080;
            v54 = " ";
            v55 = 1024;
            v56 = v9;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> increasing QUIC keepalive frequency due to data stall", buf, 0x26u);
          }
        }
        *(_BYTE *)(v6 + 1375) |= 0x10u;
        nw_quic_connection_set_keepalive(*(void **)(v6 + 1240), 2);
      }
      v10 = *(_QWORD *)(a1 + 32);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 24);
        if (v11)
        {
          v12 = *(void (**)(void))(v11 + 160);
          if (v12)
            goto LABEL_53;
        }
      }
      return;
    case 16:
      if (!a4 || a5 != 1)
        goto LABEL_50;
      if (!*a4)
      {
        v27 = (_WORD *)(v6 + 1373);
        v28 = *(unsigned __int16 *)(v6 + 1373) | (*(unsigned __int8 *)(v6 + 1375) << 16);
        if ((v28 & 0x200000) != 0 && *(_QWORD *)(v6 + 1240))
        {
          v15 = (void **)(v6 + 1240);
          if ((v28 & 0x400000) == 0)
          {
            v29 = __nwlog_obj();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              v30 = *(_DWORD *)(v6 + 1280);
              *(_DWORD *)buf = 136446978;
              v50 = "nw_protocol_http3_notify";
              v51 = 2082;
              v52 = (char *)(v6 + 1289);
              v53 = 2080;
              v54 = " ";
              v55 = 1024;
              v56 = v30;
              _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> re-enabling QUIC keepalives due to connection reuse", buf, 0x26u);
            }
          }
          v31 = (unsigned __int16)*v27;
          v32 = (v31 | (*(unsigned __int8 *)(v6 + 1375) << 16)) & 0xFFDFFFFF;
          *v27 = v31;
          *(_BYTE *)(v6 + 1375) = BYTE2(v32);
          v18 = -1;
          goto LABEL_49;
        }
LABEL_50:
        v33 = *(_QWORD *)(a1 + 32);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 24);
          if (v34)
          {
            v12 = *(void (**)(void))(v34 + 160);
            if (v12)
LABEL_53:
              v12();
          }
        }
        return;
      }
      v13 = *(_QWORD *)(v6 + 880);
      if (!v13)
      {
LABEL_24:
        v14 = *(unsigned __int16 *)(v6 + 1373) | (*(unsigned __int8 *)(v6 + 1375) << 16);
        if ((v14 & 0x200000) == 0 && *(_QWORD *)(v6 + 1240) && *(_DWORD *)(v6 + 1276) == 2)
        {
          v15 = (void **)(v6 + 1240);
          if ((v14 & 0x400000) == 0)
          {
            v16 = __nwlog_obj();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              v17 = *(_DWORD *)(v6 + 1280);
              *(_DWORD *)buf = 136446978;
              v50 = "nw_protocol_http3_notify";
              v51 = 2082;
              v52 = (char *)(v6 + 1289);
              v53 = 2080;
              v54 = " ";
              v55 = 1024;
              v56 = v17;
              _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> disabling QUIC keepalives due to idleness", buf, 0x26u);
            }
          }
          v18 = 0;
          *(_BYTE *)(v6 + 1375) |= 0x20u;
LABEL_49:
          nw_quic_connection_set_keepalive(*v15, v18);
          goto LABEL_50;
        }
        goto LABEL_50;
      }
      while ((*(_WORD *)(v13 + 736) & 0x2000) != 0)
      {
        v13 = *(_QWORD *)(v13 + 544);
        if (!v13)
          goto LABEL_24;
      }
      return;
    case 18:
      v19 = (_WORD *)(v6 + 1373);
      v20 = *(unsigned __int16 *)(v6 + 1373);
      v21 = v20 | (*(unsigned __int8 *)(v6 + 1375) << 16);
      if ((v20 & 8) == 0 && a4 && a5 == 1)
      {
        if (*a4)
        {
          if ((v21 & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v22 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v23 = *(_DWORD *)(v6 + 1280);
              *(_DWORD *)buf = 136446978;
              v50 = "nw_protocol_http3_notify";
              v51 = 2082;
              v52 = (char *)(v6 + 1289);
              v53 = 2080;
              v54 = " ";
              v55 = 1024;
              v56 = v23;
              _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Path recovered from lower protocol, recommending that new flows join", buf, 0x26u);
            }
          }
          v24 = ((unsigned __int16)*v19 | (*(unsigned __int8 *)(v6 + 1375) << 16)) & 0xFFF7FFFF;
        }
        else
        {
          if ((v21 & 0x400000) == 0)
          {
            v35 = __nwlog_obj();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              v36 = *(_DWORD *)(v6 + 1280);
              *(_DWORD *)buf = 136446978;
              v50 = "nw_protocol_http3_notify";
              v51 = 2082;
              v52 = (char *)(v6 + 1289);
              v53 = 2080;
              v54 = " ";
              v55 = 1024;
              v56 = v36;
              _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Bad path from lower protocol, recommending that new flows not join", buf, 0x26u);
            }
          }
          v24 = (unsigned __int16)*v19 | (*(unsigned __int8 *)(v6 + 1375) << 16) | 0x80000;
        }
        *v19 = v24;
        *(_BYTE *)(v6 + 1375) = BYTE2(v24);
      }
      return;
    case 22:
      if (((*(unsigned __int16 *)(v6 + 1373) | (*(unsigned __int8 *)(v6 + 1375) << 16)) & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v26 = *(_DWORD *)(v6 + 1280);
          *(_DWORD *)buf = 136446978;
          v50 = "nw_protocol_http3_notify";
          v51 = 2082;
          v52 = (char *)(v6 + 1289);
          v53 = 2080;
          v54 = " ";
          v55 = 1024;
          v56 = v26;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> restart received, assuming connection closed", buf, 0x26u);
        }
      }
      *(_WORD *)(v6 + 1373) |= 8u;
      return;
    default:
      return;
  }
}

uint64_t nw_protocol_http3_get_output_local_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t result;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      result = nw_protocol_get_output_local_endpoint((uint64_t)a1->output_handler);
      if (!result)
        return handle[138];
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_output_local_endpoint";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_output_local_endpoint";
        v6 = "%{public}s called with null http3";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_output_local_endpoint";
        v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_output_local_endpoint";
        v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_output_local_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http3_get_output_local_endpoint";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_33;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_output_local_endpoint";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http3_get_output_local_endpoint";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_get_output_local_endpoint";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_23:
    free(backtrace_string);
    goto LABEL_33;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http3_get_output_local_endpoint";
    v6 = "%{public}s called with null protocol";
LABEL_32:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_33:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_protocol_http3_reset(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_reset";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v3, &type, &v14))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_reset";
      v6 = "%{public}s called with null protocol";
      goto LABEL_16;
    }
    if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v11 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (!v11)
          goto LABEL_37;
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http3_reset";
        v18 = 2082;
        v19 = backtrace_string;
        v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_36;
      }
      if (!v11)
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_reset";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_reset";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_16:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_17;
  }
  handle = a1->handle;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (!handle)
  {
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_reset";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v3, &type, &v14))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_reset";
      v6 = "%{public}s called with null http3";
      goto LABEL_16;
    }
    if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v13 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (!v13)
          goto LABEL_37;
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http3_reset";
        v18 = 2082;
        v19 = backtrace_string;
        v12 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v4, v5, v12, buf, 0x16u);
LABEL_37:
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_18;
      }
      if (!v13)
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_reset";
      v6 = "%{public}s called with null http3, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_reset";
      v6 = "%{public}s called with null http3, backtrace limit exceeded";
    }
    goto LABEL_16;
  }
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_http3_reset";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v3, &type, &v14))
    goto LABEL_17;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_17;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_reset";
    v6 = "%{public}s Reset is not supported on http3 connection";
    goto LABEL_16;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_17;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_reset";
    v6 = "%{public}s Reset is not supported on http3 connection, backtrace limit exceeded";
    goto LABEL_16;
  }
  v7 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = gLogObj;
  v5 = type;
  v8 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v7)
  {
    if (!v8)
      goto LABEL_17;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_reset";
    v6 = "%{public}s Reset is not supported on http3 connection, no backtrace";
    goto LABEL_16;
  }
  if (v8)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_protocol_http3_reset";
    v18 = 2082;
    v19 = v7;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s Reset is not supported on http3 connection, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v7);
LABEL_17:
  if (v3)
LABEL_18:
    free(v3);
  return 0;
}

uint64_t nw_protocol_http3_supports_external_data(nw_protocol *a1)
{
  return 0;
}

void ___ZL38nw_protocol_http3_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3 || ((*(unsigned __int16 *)(v3 + 1373) | (*(unsigned __int8 *)(v3 + 1375) << 16)) & 0x400000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    v5 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    v3 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(_DWORD *)(v3 + 1280);
      v7 = v3 == 0;
      if (v3)
        v8 = (const char *)(v3 + 1289);
      else
        v8 = "";
      v10 = 136446978;
      v11 = "nw_protocol_http3_remove_input_handler_block_invoke";
      v12 = 2082;
      v13 = v8;
      if (v7)
        v9 = "";
      else
        v9 = " ";
      v14 = 2080;
      v15 = v9;
      v16 = 1024;
      v17 = v6;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> tearing down http3 connection", (uint8_t *)&v10, 0x26u);
      v3 = *(_QWORD *)(a1 + 32);
    }
  }
  *(_WORD *)(v3 + 1373) |= 8u;
  nw_http3_connection_destroy(*(_QWORD *)(a1 + 32), a2);
}

BOOL nw_protocol_http3_accept(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t int64_with_default;
  int64_t v8;
  uint64_t v9;
  _BOOL8 result;
  int v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *backtrace_string;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http3_accept";
    v25 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v25, &type, &v33))
      goto LABEL_62;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        v26 = __nwlog_obj();
        v27 = type;
        if (!os_log_type_enabled(v26, type))
          goto LABEL_62;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_protocol_http3_accept";
        v28 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v26 = __nwlog_obj();
      v27 = type;
      v30 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (!v30)
          goto LABEL_62;
        *(_DWORD *)buf = 136446210;
        v36 = "nw_protocol_http3_accept";
        v28 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_61;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_protocol_http3_accept";
        v37 = 2082;
        v38 = backtrace_string;
        v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_51:
        _os_log_impl(&dword_182FBE000, v26, v27, v31, buf, 0x16u);
      }
LABEL_52:
      free(backtrace_string);
      goto LABEL_62;
    }
    v26 = __nwlog_obj();
    v27 = type;
    if (!os_log_type_enabled(v26, type))
      goto LABEL_62;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http3_accept";
    v28 = "%{public}s called with null protocol";
LABEL_61:
    _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
LABEL_62:
    if (v25)
      free(v25);
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 40);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http3_accept";
    v25 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v25, &type, &v33))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_accept";
      v28 = "%{public}s called with null http3";
      goto LABEL_61;
    }
    if (!v33)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_accept";
      v28 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v26 = __nwlog_obj();
    v27 = type;
    v32 = os_log_type_enabled(v26, type);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_protocol_http3_accept";
        v37 = 2082;
        v38 = backtrace_string;
        v31 = "%{public}s called with null http3, dumping backtrace:%{public}s";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v32)
      goto LABEL_62;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http3_accept";
    v28 = "%{public}s called with null http3, no backtrace";
    goto LABEL_61;
  }
  v2 = (unsigned __int16 *)(v1 + 1373);
  if ((*(_WORD *)(v1 + 1373) & 0x10) == 0)
  {
    v3 = *(_QWORD *)(v1 + 976);
    if (v3)
    {
      v4 = mach_continuous_approximate_time();
      v5 = v4 <= 1 ? 1 : v4;
      v6 = nw_delta_nanos(v3, v5);
      int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5);
      if (v6 > 1000000000 * int64_with_default)
      {
        if (((*v2 | (*(unsigned __int8 *)(v1 + 1375) << 16)) & 0x400000) == 0)
        {
          v8 = int64_with_default;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = gLogObj;
          result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
          if (!result)
            return result;
          v11 = *(_DWORD *)(v1 + 1280);
          *(_DWORD *)buf = 136447234;
          v36 = "nw_protocol_http3_accept";
          v37 = 2082;
          v38 = (char *)(v1 + 1289);
          v39 = 2080;
          v40 = " ";
          v41 = 1024;
          v42 = v11;
          v43 = 2048;
          v44 = v8;
          v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 connection not ready within %lld seconds";
          v13 = v9;
          v14 = 48;
          goto LABEL_32;
        }
        return 0;
      }
    }
  }
  if (*(_WORD *)(v1 + 1284))
  {
    v15 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5);
    v16 = *(unsigned __int16 *)(v1 + 1373) | (*(unsigned __int8 *)(v1 + 1375) << 16);
    if (v15 < *(unsigned __int16 *)(v1 + 1284))
    {
      if ((v16 & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
        if (!result)
          return result;
        v18 = *(_DWORD *)(v1 + 1280);
        v19 = *(unsigned __int16 *)(v1 + 1284);
        *(_DWORD *)buf = 136447234;
        v36 = "nw_protocol_http3_accept";
        v37 = 2082;
        v38 = (char *)(v1 + 1289);
        v39 = 2080;
        v40 = " ";
        v41 = 1024;
        v42 = v18;
        v43 = 1024;
        LODWORD(v44) = v19;
        v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 connection has hit %u stalls";
        v13 = v17;
        v14 = 44;
        goto LABEL_32;
      }
      return 0;
    }
  }
  else
  {
    v16 = *v2 | (*(unsigned __int8 *)(v1 + 1375) << 16);
  }
  if ((v16 & 8) != 0)
  {
    if ((v16 & 0x400000) != 0)
      return 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    if (!result)
      return result;
    v23 = *(_DWORD *)(v1 + 1280);
    *(_DWORD *)buf = 136446978;
    v36 = "nw_protocol_http3_accept";
    v37 = 2082;
    v38 = (char *)(v1 + 1289);
    v39 = 2080;
    v40 = " ";
    v41 = 1024;
    v42 = v23;
    v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 connection is closed";
LABEL_31:
    v13 = v22;
    v14 = 38;
LABEL_32:
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    return 0;
  }
  if ((v16 & 0x80000) != 0)
  {
    if ((v16 & 0x400000) != 0)
      return 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    if (!result)
      return result;
    v24 = *(_DWORD *)(v1 + 1280);
    *(_DWORD *)buf = 136446978;
    v36 = "nw_protocol_http3_accept";
    v37 = 2082;
    v38 = (char *)(v1 + 1289);
    v39 = 2080;
    v40 = " ";
    v41 = 1024;
    v42 = v24;
    v12 = "%{public}s %{public}s%s<i%u> denying join attempt because http3 has a better alternate path";
    goto LABEL_31;
  }
  result = 1;
  if ((v16 & 0x400000) == 0 && gLogDatapath)
  {
    v20 = __nwlog_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_DWORD *)(v1 + 1280);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_protocol_http3_accept";
      v37 = 2082;
      v38 = (char *)(v1 + 1289);
      v39 = 2080;
      v40 = " ";
      v41 = 1024;
      v42 = v21;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> allowing join attempt", buf, 0x26u);
    }
    return 1;
  }
  return result;
}

void ___ZL43nw_http3_set_prohibit_joining_on_parametersP11nw_protocolP13nw_parameters_block_invoke(uint64_t a1, NSObject *a2)
{
  uint64_t protocol_handle;
  nw_protocol_definition_t v5;
  char *identifier;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v5 = nw_protocol_options_copy_definition(a2);
    identifier = nw_protocol_definition_get_identifier(v5);
    if (gLogDatapath)
    {
      v7 = identifier;
      v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(a1 + 40);
        v10 = "invalid";
        if (v9 && *(_QWORD *)(v9 + 16))
          v10 = *(const char **)(v9 + 16);
        v11 = 136446978;
        v12 = "nw_http3_set_prohibit_joining_on_parameters_block_invoke";
        v13 = 2080;
        v14 = v10;
        v15 = 2048;
        v16 = v9;
        v17 = 2080;
        v18 = v7;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %s (%p) setting prohibit joining on %s", (uint8_t *)&v11, 0x2Au);
      }
    }
    if (v5)
      os_release(v5);
    nw_protocol_options_set_prohibit_joining(a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 40) == protocol_handle)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t ___ZL22nw_http3_stream_createPK22nw_protocol_identifierP17nw_protocol_http3P11nw_endpointP13nw_parametersb_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void nw_http3_stream_replace_protocol_instance(uint64_t a1, void *a2, nw_protocol *a3, uint64_t a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  id v10;
  unsigned __int8 *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  char *backtrace_string;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  nw_protocol *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  unsigned __int8 *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http3_stream_replace_protocol_instance";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v15 = "%{public}s called with null http3_stream";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v20 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http3_stream_replace_protocol_instance";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_56:
        if (!v12)
          return;
        goto LABEL_57;
      }
      if (!v20)
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v15 = "%{public}s called with null http3_stream, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v15 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }
    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http3_stream_replace_protocol_instance";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_56;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_56;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http3_stream_replace_protocol_instance";
        v15 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_55;
      }
      v21 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v22 = os_log_type_enabled(v13, type);
      if (!v21)
      {
        if (!v22)
          goto LABEL_56;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http3_stream_replace_protocol_instance";
        v15 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_55;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_http3_stream_replace_protocol_instance";
        v29 = 2082;
        v30 = v21;
        v23 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_40:
        _os_log_impl(&dword_182FBE000, v13, v14, v23, buf, 0x16u);
      }
LABEL_41:
      free(v21);
      if (!v12)
        return;
LABEL_57:
      free(v12);
      return;
    }
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_56;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http3_stream_replace_protocol_instance";
    v15 = "%{public}s called with null parameters";
LABEL_55:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_56;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http3_stream_replace_protocol_instance";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v15 = "%{public}s called with null new_instance";
      goto LABEL_55;
    }
    if (!v25)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v15 = "%{public}s called with null new_instance, backtrace limit exceeded";
      goto LABEL_55;
    }
    v21 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v24 = os_log_type_enabled(v13, type);
    if (!v21)
    {
      if (!v24)
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v15 = "%{public}s called with null new_instance, no backtrace";
      goto LABEL_55;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_http3_stream_replace_protocol_instance";
      v29 = 2082;
      v30 = v21;
      v23 = "%{public}s called with null new_instance, dumping backtrace:%{public}s";
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  v8 = nw_parameters_copy_protocol_options_legacy(a2, a3);
  if (v8)
  {
    v9 = v8;
    if ((*(_WORD *)(a1 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 1280);
          v18 = *(_QWORD *)(a1 + 240);
          *(_DWORD *)buf = 136448514;
          v28 = "nw_http3_stream_replace_protocol_instance";
          v29 = 2082;
          v30 = (char *)(a1 + 636);
          v31 = 2080;
          v32 = " ";
          v33 = 1024;
          v34 = v17;
          v35 = 2048;
          v36 = v18;
          v37 = 2048;
          v38 = a1;
          v39 = 2048;
          v40 = a4;
          v41 = 2048;
          v42 = a3;
          v43 = 2048;
          v44 = a2;
          v45 = 2048;
          v46 = v9;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> http3_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x62u);
        }
      }
    }
    if (nw_protocol_copy_http3_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
    v10 = (id)nw_protocol_copy_http3_definition_http3_definition;
    v11 = v9;
    *((_QWORD *)v11 + 2) = a4;

    if (v10)
      os_release(v10);
    os_release(v11);
  }
}

void ___ZL36nw_protocol_http3_set_up_associationP17nw_protocol_http3P13nw_parameters_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t handle;
  uint64_t v5;
  _WORD *v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 is_viable;
  int alternate_path_state;
  int v13;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  unsigned int v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *backtrace_string;
  _BOOL4 v30;
  char *v31;
  _BOOL4 v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  handle = nw_protocol_instance_stub_get_handle(a2);
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http3_set_up_association_block_invoke";
    v25 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v25, &type, &v33))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v28 = "%{public}s called with null protocol_handle";
      goto LABEL_60;
    }
    if (!v33)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v28 = "%{public}s called with null protocol_handle, backtrace limit exceeded";
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v26 = __nwlog_obj();
    v27 = type;
    v30 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (!v30)
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v28 = "%{public}s called with null protocol_handle, no backtrace";
      goto LABEL_60;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v37 = 2082;
      v38 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null protocol_handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_61:
    if (!v25)
      return;
    goto LABEL_62;
  }
  v5 = *(_QWORD *)(handle + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_protocol_http3_set_up_association_block_invoke";
    v25 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v25, &type, &v33))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v28 = "%{public}s called with null http3";
      goto LABEL_60;
    }
    if (!v33)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v28 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_60;
    }
    v31 = (char *)__nw_create_backtrace_string();
    v26 = __nwlog_obj();
    v27 = type;
    v32 = os_log_type_enabled(v26, type);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_protocol_http3_set_up_association_block_invoke";
        v37 = 2082;
        v38 = v31;
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v31);
      if (!v25)
        return;
LABEL_62:
      free(v25);
      return;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nw_protocol_http3_set_up_association_block_invoke";
      v28 = "%{public}s called with null http3, no backtrace";
LABEL_60:
      _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
      goto LABEL_61;
    }
    goto LABEL_61;
  }
  v6 = (_WORD *)(v5 + 1373);
  if (((*(unsigned __int16 *)(v5 + 1373) | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0x10008) == 0)
  {
    v7 = nw_path_copy_for_flow_registration(a3, *(void **)(v5 + 1208));
    if (v7)
    {
      v8 = (void *)v7;
      v9 = *(void **)(v5 + 1112);
      if (v9 != v8)
      {
        if (v9)
        {
          os_release(v9);
          *(_QWORD *)(v5 + 1112) = 0;
        }
        *(_QWORD *)(v5 + 1112) = os_retain(v8);
      }
      v10 = *(void **)(v5 + 1232);
      if (v10 && (nw_path_has_proxy_config(v8, v10) & 1) == 0)
      {
        if ((((unsigned __int16)*v6 | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v20 = *(_DWORD *)(v5 + 1280);
            *(_DWORD *)buf = 136446978;
            v36 = "nw_protocol_http3_set_up_association_block_invoke";
            v37 = 2082;
            v38 = (char *)(v5 + 1289);
            v39 = 2080;
            v40 = " ";
            v41 = 1024;
            v42 = v20;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Effective proxy configuration lost, treating as a GOAWAY", buf, 0x26u);
          }
        }
        nw_http3_async_close_connection_if_no_stream(v5);
        nw_http3_notify_do_not_reuse(v5);
        goto LABEL_31;
      }
      if (((unsigned __int16)*v6 | (*(char *)(v5 + 1375) << 16)) < 0)
      {
        is_viable = nw_path_is_viable(v8);
        alternate_path_state = nw_path_get_alternate_path_state(v8, a3);
        v13 = (unsigned __int16)*v6 | (*(unsigned __int8 *)(v5 + 1375) << 16);
        if (is_viable && alternate_path_state == 0)
        {
          if ((v13 & 0x80000) != 0)
          {
            if ((v13 & 0x400000) == 0)
            {
              v21 = __nwlog_obj();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                v22 = *(_DWORD *)(v5 + 1280);
                *(_DWORD *)buf = 136446978;
                v36 = "nw_protocol_http3_set_up_association_block_invoke";
                v37 = 2082;
                v38 = (char *)(v5 + 1289);
                v39 = 2080;
                v40 = " ";
                v41 = 1024;
                v42 = v22;
                _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Path recovered, recommending that new flows join", buf, 0x26u);
              }
            }
            v23 = (unsigned __int16)*v6;
            v24 = (v23 | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0xFFF7FFFF;
            *v6 = v23;
            *(_BYTE *)(v5 + 1375) = BYTE2(v24);
            v17 = v5;
            v18 = 1;
            goto LABEL_30;
          }
        }
        else if ((v13 & 0x80000) == 0)
        {
          if ((v13 & 0x400000) == 0)
          {
            v15 = __nwlog_obj();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              v16 = *(_DWORD *)(v5 + 1280);
              *(_DWORD *)buf = 136446978;
              v36 = "nw_protocol_http3_set_up_association_block_invoke";
              v37 = 2082;
              v38 = (char *)(v5 + 1289);
              v39 = 2080;
              v40 = " ";
              v41 = 1024;
              v42 = v16;
              _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Bad path, recommending that new flows not join", buf, 0x26u);
            }
          }
          *(_BYTE *)(v5 + 1375) = ((unsigned __int16)*v6 | (*(unsigned __int8 *)(v5 + 1375) << 16) | 0x80000u) >> 16;
          v17 = v5;
          v18 = 0;
LABEL_30:
          nw_http3_notify_viability_changed(v17, v18);
        }
      }
LABEL_31:
      os_release(v8);
    }
  }
}

void nw_http3_notify_viability_changed(uint64_t a1, int a2)
{
  uint64_t v2;
  char v3;
  unsigned __int16 *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, char *, uint64_t);
  const char *v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  const char *v28;
  NSObject *log;
  os_log_type_t v30[8];
  os_log_type_t v31;
  os_log_type_t v32[8];
  char *v33;
  char v34;
  os_log_type_t type;
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 880);
  if (v2)
  {
    v3 = a2;
    v5 = (unsigned __int16 *)(a1 + 1373);
    v6 = (const char *)(a1 + 1289);
    if (a2)
      v7 = "";
    else
      v7 = "not ";
    do
    {
      v8 = *(_QWORD *)(v2 + 544);
      if ((*(_WORD *)(v2 + 736) & 0x8000) != 0)
      {
        if (((*v5 | (*((unsigned __int8 *)v5 + 2) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v10 = *(_DWORD *)(a1 + 1280);
            v11 = *(_QWORD *)(v2 + 240);
            *(_DWORD *)buf = 136447490;
            v38 = "nw_http3_notify_viability_changed";
            v39 = 2082;
            v40 = v6;
            v41 = 2080;
            v42 = " ";
            v43 = 1024;
            v44 = v10;
            v45 = 2048;
            v46 = v11;
            v47 = 2082;
            v48 = v7;
            _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Notifying stream %llu that the connection is %{public}sviable", buf, 0x3Au);
          }
        }
        v36 = v3;
        v12 = *(_QWORD *)(v2 + 24);
        if (!v12 || (v13 = *(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t))(v12 + 160)) == 0)
        {
          __nwlog_obj();
          v14 = *(const char **)(v2 + 16);
          if (!v14)
            v14 = "invalid";
          *(_DWORD *)buf = 136446466;
          v38 = "nw_http3_notify_viability_changed";
          v39 = 2082;
          v40 = v14;
          v15 = (const char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v34 = 0;
          v33 = (char *)v15;
          if (!__nwlog_fault(v15, &type, &v34))
            goto LABEL_37;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v16 = __nwlog_obj();
            v17 = type;
            *(_QWORD *)v30 = v16;
            if (os_log_type_enabled(v16, type))
            {
              v18 = *(const char **)(v2 + 16);
              if (!v18)
                v18 = "invalid";
              *(_DWORD *)buf = 136446466;
              v38 = "nw_http3_notify_viability_changed";
              v39 = 2082;
              v40 = v18;
              v19 = *(NSObject **)v30;
              v20 = v17;
              v21 = "%{public}s protocol %{public}s has invalid notify callback";
              goto LABEL_36;
            }
            goto LABEL_37;
          }
          if (v34)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            log = __nwlog_obj();
            v31 = type;
            v23 = os_log_type_enabled(log, type);
            if (backtrace_string)
            {
              if (v23)
              {
                v24 = *(const char **)(v2 + 16);
                if (!v24)
                  v24 = "invalid";
                *(_DWORD *)buf = 136446722;
                v38 = "nw_http3_notify_viability_changed";
                v39 = 2082;
                v40 = v24;
                v41 = 2082;
                v42 = backtrace_string;
                _os_log_impl(&dword_182FBE000, log, v31, "%{public}s protocol %{public}s has invalid notify callback, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(backtrace_string);
              goto LABEL_37;
            }
            if (!v23)
            {
LABEL_37:
              if (v33)
                free(v33);
              goto LABEL_6;
            }
            v28 = *(const char **)(v2 + 16);
            if (!v28)
              v28 = "invalid";
            *(_DWORD *)buf = 136446466;
            v38 = "nw_http3_notify_viability_changed";
            v39 = 2082;
            v40 = v28;
            v19 = log;
            v20 = v31;
            v21 = "%{public}s protocol %{public}s has invalid notify callback, no backtrace";
          }
          else
          {
            v25 = __nwlog_obj();
            v26 = type;
            *(_QWORD *)v32 = v25;
            if (!os_log_type_enabled(v25, type))
              goto LABEL_37;
            v27 = *(const char **)(v2 + 16);
            if (!v27)
              v27 = "invalid";
            *(_DWORD *)buf = 136446466;
            v38 = "nw_http3_notify_viability_changed";
            v39 = 2082;
            v40 = v27;
            v19 = *(NSObject **)v32;
            v20 = v26;
            v21 = "%{public}s protocol %{public}s has invalid notify callback, backtrace limit exceeded";
          }
LABEL_36:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0x16u);
          goto LABEL_37;
        }
        v13(v2, v2, 18, &v36, 1);
      }
LABEL_6:
      v2 = v8;
    }
    while (v8);
  }
}

double __nw_protocol_http3_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http3_identifier::http3_protocol_identifier, "http3");
  *(_QWORD *)&result = 0x200000004;
  qword_1EDCE52F0 = 0x200000004;
  return result;
}

void ___ZL38nw_protocol_http3_stream_get_callbacksv_block_invoke()
{
  qword_1EDCE50D8 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCE50E0 = nw_protocol_default_input_flush;
  qword_1EDCE50A8 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCE50B0 = nw_protocol_default_waiting_for_output;
  qword_1EDCE4FF8 = (uint64_t)nw_protocol_http3_stream_disconnect;
  unk_1EDCE5000 = nw_protocol_http3_stream_connected;
  qword_1EDCE5008 = (uint64_t)nw_protocol_http3_stream_disconnected;
  unk_1EDCE5010 = nw_protocol_http3_stream_error;
  qword_1EDCE5098 = (uint64_t)nw_protocol_http3_stream_output_finished;
  unk_1EDCE50A0 = nw_protocol_default_get_output_local;
  nw_protocol_http3_stream_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http3_stream_add_input_handler;
  unk_1EDCE4FE0 = nw_protocol_http3_stream_remove_input_handler;
  qword_1EDCE4FE8 = (uint64_t)nw_protocol_http3_stream_replace_input_handler;
  unk_1EDCE4FF0 = nw_protocol_http3_stream_connect;
  qword_1EDCE5018 = (uint64_t)nw_protocol_http3_stream_input_available;
  unk_1EDCE5020 = nw_protocol_http3_stream_output_available;
  qword_1EDCE5028 = (uint64_t)nw_protocol_http3_stream_get_input_frames;
  unk_1EDCE5030 = nw_protocol_http3_stream_get_output_frames;
  qword_1EDCE5038 = (uint64_t)nw_protocol_http3_stream_finalize_output_frames;
  unk_1EDCE5040 = nw_protocol_default_link_state;
  qword_1EDCE5088 = (uint64_t)nw_protocol_http3_stream_supports_external_data;
  unk_1EDCE5090 = nw_protocol_http3_stream_input_finished;
  qword_1EDCE5058 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCE5060 = nw_protocol_http3_stream_get_remote_endpoint;
  qword_1EDCE50B8 = (uint64_t)nw_protocol_http3_stream_copy_info;
  unk_1EDCE50C0 = nw_protocol_http3_stream_add_listen_handler;
  qword_1EDCE5078 = (uint64_t)nw_protocol_http3_stream_notify;
  unk_1EDCE5080 = nw_protocol_default_updated_path;
  qword_1EDCE5048 = (uint64_t)nw_protocol_http3_stream_get_parameters;
  unk_1EDCE5050 = nw_protocol_default_get_path;
  qword_1EDCE50C8 = (uint64_t)nw_protocol_http3_stream_remove_listen_handler;
  unk_1EDCE50D0 = nw_protocol_http3_stream_get_message_properties;
  qword_1EDCE5068 = (uint64_t)nw_protocol_http3_stream_register_notification;
  unk_1EDCE5070 = nw_protocol_http3_stream_unregister_notification;
}

BOOL nw_protocol_http3_stream_connect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _WORD *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  void *v12;
  _BYTE *v13;
  _BOOL4 v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  id v17;
  __int16 v18;
  int v19;
  unsigned int v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, _QWORD);
  unsigned __int8 *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _BOOL8 result;
  int v34;
  uint64_t v35;
  nw_protocol_callbacks *callbacks;
  void (*connected)(nw_protocol *, nw_protocol *);
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  nw_protocol_identifier *identifier;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  nw_protocol_identifier *v49;
  const char *v50;
  char *backtrace_string;
  _BOOL4 v52;
  const char *v53;
  _BOOL4 v54;
  _BOOL4 v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  const char *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  const char *v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  char *v67;
  _BOOL4 v68;
  nw_protocol_identifier *v69;
  char *v70;
  _BOOL4 v71;
  char *v72;
  _BOOL4 v73;
  char *v74;
  _BOOL4 v75;
  nw_protocol_identifier *v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  const char *v80;
  NSObject *v81;
  int v82;
  nw_protocol_identifier *v83;
  char *v84;
  _BOOL4 v85;
  char *v86;
  _BOOL4 v87;
  NSObject *v88;
  int v89;
  unsigned __int16 *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE buf[24];
  const char *v96;
  uint64_t *v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  uint8_t v101[4];
  const char *v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  int v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    v38 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (!__nwlog_fault(v38, v101, &v91))
      goto LABEL_148;
    if (v101[0] == 17)
    {
      v39 = __nwlog_obj();
      v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0]))
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null protocol";
      goto LABEL_147;
    }
    if (!(_BYTE)v91)
    {
      v39 = __nwlog_obj();
      v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0]))
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_147;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = v101[0];
    v52 = os_log_type_enabled(v39, (os_log_type_t)v101[0]);
    if (!backtrace_string)
    {
      if (!v52)
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_147;
    }
    if (!v52)
      goto LABEL_97;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v53 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_96:
    _os_log_impl(&dword_182FBE000, v39, v40, v53, buf, 0x16u);
    goto LABEL_97;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    v38 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (!__nwlog_fault(v38, v101, &v91))
      goto LABEL_148;
    if (v101[0] == 17)
    {
      v39 = __nwlog_obj();
      v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0]))
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null http3_stream";
      goto LABEL_147;
    }
    if (!(_BYTE)v91)
    {
      v39 = __nwlog_obj();
      v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0]))
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_147;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = v101[0];
    v54 = os_log_type_enabled(v39, (os_log_type_t)v101[0]);
    if (!backtrace_string)
    {
      if (!v54)
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null http3_stream, no backtrace";
      goto LABEL_147;
    }
    if (!v54)
      goto LABEL_97;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v53 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_96;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    v38 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (!__nwlog_fault(v38, v101, &v91))
      goto LABEL_148;
    if (v101[0] == 17)
    {
      v39 = __nwlog_obj();
      v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0]))
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null other_protocol";
      goto LABEL_147;
    }
    if (!(_BYTE)v91)
    {
      v39 = __nwlog_obj();
      v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0]))
        goto LABEL_148;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
      v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_147;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v39 = __nwlog_obj();
    v40 = v101[0];
    v55 = os_log_type_enabled(v39, (os_log_type_t)v101[0]);
    if (backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v53 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_96;
      }
LABEL_97:
      free(backtrace_string);
      goto LABEL_148;
    }
    if (!v55)
      goto LABEL_148;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    v41 = "%{public}s called with null other_protocol, no backtrace";
LABEL_147:
    _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
LABEL_148:
    if (v38)
      free(v38);
    return 0;
  }
  v5 = handle + 736;
  v6 = &unk_1ECD84000;
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v42 = __nwlog_obj();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        v43 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v44 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 636;
        *(_WORD *)&buf[22] = 2080;
        v96 = " ";
        LOWORD(v97) = 1024;
        *(_DWORD *)((char *)&v97 + 2) = v43;
        HIWORD(v97) = 2048;
        v98 = v44;
        _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v7 = *((_QWORD *)handle + 4);
  if (v7)
  {
    if ((*v5 & 0x40) == 0)
    {
      if (!*((_QWORD *)handle + 29))
      {
        v8 = mach_continuous_approximate_time();
        if (v8 <= 1)
          v9 = 1;
        else
          v9 = v8;
        *((_QWORD *)handle + 29) = v9;
        v7 = *((_QWORD *)handle + 4);
      }
      *((_QWORD *)handle + 20) = v7;
      *((_QWORD *)handle + 21) = v7;
      v10 = *((_QWORD *)handle + 42);
      if (v10)
      {
        if (v7)
        {
          if (*(_QWORD *)(v10 + 32))
            goto LABEL_42;
          nw_protocol_set_output_handler(*((_QWORD *)handle + 42), v7);
          v11 = (unsigned __int16 *)(v10 + 1373);
          if (((*(unsigned __int16 *)(v10 + 1373) | (*(unsigned __int8 *)(v10 + 1375) << 16)) & 0x400000) == 0)
          {
            if (gLogDatapath)
            {
              v81 = __nwlog_obj();
              if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
              {
                v82 = *(_DWORD *)(v10 + 1280);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http3_add_edges";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v10 + 1289;
                *(_WORD *)&buf[22] = 2080;
                v96 = " ";
                LOWORD(v97) = 1024;
                *(_DWORD *)((char *)&v97 + 2) = v82;
                _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
              }
            }
          }
          v12 = *(void **)(v10 + 1096);
          if (v12)
          {
            v13 = v12;
            v14 = (v13[231] & 4) == 0;

            if (!v14)
            {
              nw_endpoint_add_edges_for_instance(*(void **)(v10 + 1096), (unsigned __int8 *)v10, 0);
LABEL_21:
              v15 = nw_parameters_copy_protocol_options_legacy(*(void **)(v10 + 1120), *(nw_protocol **)(v10 + 32));
              if (v15)
              {
                v16 = v15;
                if (nw_protocol_options_is_quic_stream(v15))
                {
                  v17 = nw_quic_stream_copy_shared_connection_options(v16);
                  v18 = nw_quic_connection_get_max_datagram_frame_size(v17) != 0;
                  v19 = *v11;
                  v20 = v19 & 0xFFFFFFFD | (*((unsigned __int8 *)v11 + 2) << 16);
                  *v11 = v19 & 0xFFFD | (2 * v18);
                  *((_BYTE *)v11 + 2) = BYTE2(v20);
                  v21 = nw_quic_connection_get_datagram_quarter_stream_id(v17) ? 0 : 4;
                  v22 = *v11 & 0xFFFB | (*((unsigned __int8 *)v11 + 2) << 16);
                  *v11 = *v11 & 0xFFFB | v21;
                  *((_BYTE *)v11 + 2) = BYTE2(v22);
                  if (v17)
                    os_release(v17);
                }
                os_release(v16);
              }
              if (!*(_QWORD *)(v10 + 1240))
              {
                v23 = *(_QWORD *)(v7 + 24);
                if (v23)
                {
                  v24 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v23 + 224);
                  if (v24)
                  {
                    v25 = (unsigned __int8 *)v24(v7, 255, 0);
                    v91 = 0;
                    v92 = &v91;
                    v93 = 0x2000000000;
                    v94 = 0;
                    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[8] = 0x40000000;
                    *(_QWORD *)&buf[16] = ___ZL28nw_http3_save_output_handlerP17nw_protocol_http3P11nw_protocol_block_invoke;
                    v96 = (const char *)&unk_1E14A8308;
                    v97 = &v91;
                    nw_array_apply(v25, (uint64_t)buf);
                    v26 = (void *)v92[3];
                    if (v26)
                    {
                      v27 = os_retain(v26);
                      *(_QWORD *)(v10 + 1240) = v27;
                      if (*(_DWORD *)(v10 + 1276))
                      {
                        if (((*v11 | (*((unsigned __int8 *)v11 + 2) << 16)) & 0x400000) == 0)
                        {
                          if (v6[1345])
                          {
                            v88 = __nwlog_obj();
                            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
                            {
                              v89 = *(_DWORD *)(v10 + 1280);
                              *(_DWORD *)v101 = 136446978;
                              v102 = "nw_http3_save_output_handler";
                              v103 = 2082;
                              v104 = v10 + 1289;
                              v105 = 2080;
                              v106 = " ";
                              v107 = 1024;
                              v108 = v89;
                              _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> enabling QUIC keepalives", v101, 0x26u);
                            }
                          }
                        }
                        nw_quic_connection_set_keepalive(*(void **)(v10 + 1240), 0xFFFF);
                        v27 = *(void **)(v10 + 1240);
                      }
                      v28 = nw_quic_connection_copy_sec_protocol_metadata(v27);
                      nw_http_connection_metadata_set_sec_metadata(*(void **)(v10 + 1248), v28);
                      if (v28)
                        os_release(v28);
                    }
                    if (v25)
                      os_release(v25);
                    _Block_object_dispose(&v91, 8);
                  }
                }
              }
              goto LABEL_42;
            }
            v90 = (unsigned __int16 *)(v10 + 1373);
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_add_edges";
            v77 = (char *)_os_log_send_and_compose_impl();
            v101[0] = 16;
            LOBYTE(v91) = 0;
            if (__nwlog_fault(v77, v101, &v91))
            {
              if (v101[0] == 17)
              {
                v78 = __nwlog_obj();
                v79 = v101[0];
                if (!os_log_type_enabled(v78, (os_log_type_t)v101[0]))
                  goto LABEL_212;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http3_add_edges";
                v80 = "%{public}s http3->remote_endpoint is not registered when connected";
                goto LABEL_211;
              }
              if (!(_BYTE)v91)
              {
                v78 = __nwlog_obj();
                v79 = v101[0];
                if (!os_log_type_enabled(v78, (os_log_type_t)v101[0]))
                  goto LABEL_212;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http3_add_edges";
                v80 = "%{public}s http3->remote_endpoint is not registered when connected, backtrace limit exceeded";
                goto LABEL_211;
              }
              v86 = (char *)__nw_create_backtrace_string();
              v78 = __nwlog_obj();
              v79 = v101[0];
              v87 = os_log_type_enabled(v78, (os_log_type_t)v101[0]);
              if (v86)
              {
                if (v87)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http3_add_edges";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v86;
                  _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s http3->remote_endpoint is not registered when connected, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v86);
                if (!v77)
                  goto LABEL_214;
                goto LABEL_213;
              }
              if (v87)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http3_add_edges";
                v80 = "%{public}s http3->remote_endpoint is not registered when connected, no backtrace";
LABEL_211:
                _os_log_impl(&dword_182FBE000, v78, v79, v80, buf, 0xCu);
              }
            }
          }
          else
          {
            v90 = (unsigned __int16 *)(v10 + 1373);
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_add_edges";
            v77 = (char *)_os_log_send_and_compose_impl();
            v101[0] = 16;
            LOBYTE(v91) = 0;
            if (!__nwlog_fault(v77, v101, &v91))
              goto LABEL_212;
            if (v101[0] == 17)
            {
              v78 = __nwlog_obj();
              v79 = v101[0];
              if (!os_log_type_enabled(v78, (os_log_type_t)v101[0]))
                goto LABEL_212;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_add_edges";
              v80 = "%{public}s http3->remote_endpoint is NULL when connected";
              goto LABEL_211;
            }
            if (!(_BYTE)v91)
            {
              v78 = __nwlog_obj();
              v79 = v101[0];
              if (!os_log_type_enabled(v78, (os_log_type_t)v101[0]))
                goto LABEL_212;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_add_edges";
              v80 = "%{public}s http3->remote_endpoint is NULL when connected, backtrace limit exceeded";
              goto LABEL_211;
            }
            v84 = (char *)__nw_create_backtrace_string();
            v78 = __nwlog_obj();
            v79 = v101[0];
            v85 = os_log_type_enabled(v78, (os_log_type_t)v101[0]);
            if (!v84)
            {
              if (!v85)
                goto LABEL_212;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http3_add_edges";
              v80 = "%{public}s http3->remote_endpoint is NULL when connected, no backtrace";
              goto LABEL_211;
            }
            if (v85)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http3_add_edges";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v84;
              _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s http3->remote_endpoint is NULL when connected, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v84);
          }
LABEL_212:
          if (!v77)
          {
LABEL_214:
            v6 = (_BYTE *)&unk_1ECD84000;
            v11 = v90;
            goto LABEL_21;
          }
LABEL_213:
          free(v77);
          goto LABEL_214;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
        v56 = (char *)_os_log_send_and_compose_impl();
        v101[0] = 16;
        LOBYTE(v91) = 0;
        if (!__nwlog_fault(v56, v101, &v91))
          goto LABEL_199;
        if (v101[0] == 17)
        {
          v57 = __nwlog_obj();
          v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0]))
            goto LABEL_199;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          v59 = "%{public}s called with null quic_protocol";
          goto LABEL_198;
        }
        if (!(_BYTE)v91)
        {
          v57 = __nwlog_obj();
          v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0]))
            goto LABEL_199;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          v59 = "%{public}s called with null quic_protocol, backtrace limit exceeded";
          goto LABEL_198;
        }
        v74 = (char *)__nw_create_backtrace_string();
        v57 = __nwlog_obj();
        v58 = v101[0];
        v75 = os_log_type_enabled(v57, (os_log_type_t)v101[0]);
        if (v74)
        {
          if (v75)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v74;
            _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s called with null quic_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v74);
          if (!v56)
          {
LABEL_42:
            nw_http3_setup_connection_if_needed(*((_QWORD *)handle + 42));
            *v5 |= 2u;
            v29 = *((_QWORD *)handle + 42);
            if (v29)
            {
              if ((*(_WORD *)(v29 + 1373) & 0x61) != 0x20 || !uuid_is_null((const unsigned __int8 *)(v29 + 848)))
              {
                if (!*(_QWORD *)(v29 + 976))
                {
                  v30 = mach_continuous_approximate_time();
                  if (v30 <= 1)
                    v31 = 1;
                  else
                    v31 = v30;
                  *(_QWORD *)(v29 + 976) = v31;
                }
                nw_http3_stream_connect_lower((uint64_t)handle);
              }
LABEL_51:
              nw_http3_signal_output_pending(*((_QWORD *)handle + 42), 0);
              return 1;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http3_should_connect";
            v60 = (char *)_os_log_send_and_compose_impl();
            v101[0] = 16;
            LOBYTE(v91) = 0;
            if (__nwlog_fault(v60, v101, &v91))
            {
              if (v101[0] == 17)
              {
                v61 = __nwlog_obj();
                v62 = v101[0];
                if (!os_log_type_enabled(v61, (os_log_type_t)v101[0]))
                  goto LABEL_194;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http3_should_connect";
                v63 = "%{public}s called with null http3";
                goto LABEL_193;
              }
              if (!(_BYTE)v91)
              {
                v61 = __nwlog_obj();
                v62 = v101[0];
                if (!os_log_type_enabled(v61, (os_log_type_t)v101[0]))
                  goto LABEL_194;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http3_should_connect";
                v63 = "%{public}s called with null http3, backtrace limit exceeded";
                goto LABEL_193;
              }
              v72 = (char *)__nw_create_backtrace_string();
              v61 = __nwlog_obj();
              v62 = v101[0];
              v73 = os_log_type_enabled(v61, (os_log_type_t)v101[0]);
              if (v72)
              {
                if (v73)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http3_should_connect";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v72;
                  _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v72);
                goto LABEL_194;
              }
              if (v73)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http3_should_connect";
                v63 = "%{public}s called with null http3, no backtrace";
LABEL_193:
                _os_log_impl(&dword_182FBE000, v61, v62, v63, buf, 0xCu);
              }
            }
LABEL_194:
            if (v60)
              free(v60);
            goto LABEL_51;
          }
LABEL_200:
          free(v56);
          goto LABEL_42;
        }
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          v59 = "%{public}s called with null quic_protocol, no backtrace";
LABEL_198:
          _os_log_impl(&dword_182FBE000, v57, v58, v59, buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
        v56 = (char *)_os_log_send_and_compose_impl();
        v101[0] = 16;
        LOBYTE(v91) = 0;
        if (!__nwlog_fault(v56, v101, &v91))
          goto LABEL_199;
        if (v101[0] == 17)
        {
          v57 = __nwlog_obj();
          v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0]))
            goto LABEL_199;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          v59 = "%{public}s called with null http3";
          goto LABEL_198;
        }
        if (!(_BYTE)v91)
        {
          v57 = __nwlog_obj();
          v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0]))
            goto LABEL_199;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          v59 = "%{public}s called with null http3, backtrace limit exceeded";
          goto LABEL_198;
        }
        v70 = (char *)__nw_create_backtrace_string();
        v57 = __nwlog_obj();
        v58 = v101[0];
        v71 = os_log_type_enabled(v57, (os_log_type_t)v101[0]);
        if (!v70)
        {
          if (!v71)
            goto LABEL_199;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          v59 = "%{public}s called with null http3, no backtrace";
          goto LABEL_198;
        }
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_save_output_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v70;
          _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v70);
      }
LABEL_199:
      if (!v56)
        goto LABEL_42;
      goto LABEL_200;
    }
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v64 = __nwlog_obj();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          v65 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v66 = *((_QWORD *)handle + 30);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 636;
          *(_WORD *)&buf[22] = 2080;
          v96 = " ";
          LOWORD(v97) = 1024;
          *(_DWORD *)((char *)&v97 + 2) = v65;
          HIWORD(v97) = 2048;
          v98 = v66;
          v99 = 2048;
          v100 = v66;
          _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> stream %llu is already connected", buf, 0x3Au);
        }
      }
    }
    callbacks = a2->callbacks;
    if (callbacks)
    {
      connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
      if (connected)
      {
        connected(a2, a1);
        return 1;
      }
    }
    __nwlog_obj();
    identifier = a2->identifier;
    if (!identifier)
      identifier = (nw_protocol_identifier *)"invalid";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = identifier;
    v46 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (__nwlog_fault(v46, v101, &v91))
    {
      if (v101[0] == 17)
      {
        v47 = __nwlog_obj();
        v48 = v101[0];
        if (!os_log_type_enabled(v47, (os_log_type_t)v101[0]))
          goto LABEL_170;
        v49 = a2->identifier;
        if (!v49)
          v49 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v49;
        v50 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_169;
      }
      if (!(_BYTE)v91)
      {
        v47 = __nwlog_obj();
        v48 = v101[0];
        if (!os_log_type_enabled(v47, (os_log_type_t)v101[0]))
          goto LABEL_170;
        v76 = a2->identifier;
        if (!v76)
          v76 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v76;
        v50 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_169;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = v101[0];
      v68 = os_log_type_enabled(v47, (os_log_type_t)v101[0]);
      if (v67)
      {
        if (v68)
        {
          v69 = a2->identifier;
          if (!v69)
            v69 = (nw_protocol_identifier *)"invalid";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v69;
          *(_WORD *)&buf[22] = 2082;
          v96 = v67;
          _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v67);
        goto LABEL_170;
      }
      if (v68)
      {
        v83 = a2->identifier;
        if (!v83)
          v83 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v83;
        v50 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_169:
        _os_log_impl(&dword_182FBE000, v47, v48, v50, buf, 0x16u);
      }
    }
LABEL_170:
    if (v46)
      free(v46);
    return 1;
  }
  if ((*v5 & 0x800) != 0)
    return 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v32 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v34 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
    v35 = *((_QWORD *)handle + 30);
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = handle + 636;
    *(_WORD *)&buf[22] = 2080;
    v96 = " ";
    LOWORD(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 2) = v34;
    HIWORD(v97) = 2048;
    v98 = v35;
    _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> output_handler is NULL", buf, 0x30u);
    return 0;
  }
  return result;
}

void nw_protocol_http3_stream_connected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*connected)(void);
  _WORD *v8;
  NSObject *v9;
  int v10;
  nw_protocol *v11;
  nw_protocol *output_handler;
  const char *v13;
  NSObject *v14;
  nw_protocol_callbacks *v15;
  uint64_t (*copy_info)(nw_protocol *, uint64_t, char *);
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  NSObject *v21;
  int v22;
  nw_protocol *v23;
  NSObject *v24;
  int v25;
  nw_protocol *v26;
  void *v27;
  int v28;
  nw_protocol *v29;
  nw_protocol_callbacks *v30;
  void (*v31)(nw_protocol *, nw_protocol *);
  nw_protocol *v32;
  const char *v33;
  nw_protocol_identifier *identifier;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  nw_protocol *v38;
  const char *v39;
  nw_protocol_identifier *v40;
  const char *v41;
  char *v42;
  _BOOL4 v43;
  nw_protocol *v44;
  const char *v45;
  nw_protocol_identifier *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  NSObject *v51;
  int v52;
  nw_protocol *v53;
  nw_protocol *v54;
  const char *v55;
  nw_protocol_identifier *v56;
  nw_protocol *v57;
  const char *v58;
  nw_protocol_identifier *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  nw_protocol *v63;
  const char *v64;
  nw_protocol_identifier *v65;
  const char *v66;
  char *backtrace_string;
  _BOOL4 v68;
  char *v69;
  _BOOL4 v70;
  nw_protocol *v71;
  const char *v72;
  nw_protocol_identifier *v73;
  char *v74;
  _BOOL4 v75;
  nw_protocol *v76;
  const char *v77;
  nw_protocol_identifier *v78;
  NSObject *v79;
  int v80;
  nw_protocol *v81;
  nw_protocol *v82;
  const char *v83;
  nw_protocol_identifier *v84;
  nw_protocol *v85;
  const char *v86;
  nw_protocol_identifier *v87;
  _QWORD v88[5];
  _QWORD v89[5];
  char v90;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v93;
  __int16 v94;
  char *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  nw_protocol *v101;
  __int16 v102;
  nw_protocol *v103;
  __int16 v104;
  nw_protocol *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v93 = "nw_protocol_http3_stream_connected";
    v47 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v90 = 0;
    if (!__nwlog_fault(v47, &type, &v90))
      goto LABEL_121;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v48 = __nwlog_obj();
      v49 = type;
      if (!os_log_type_enabled(v48, type))
        goto LABEL_121;
      *(_DWORD *)buf = 136446210;
      v93 = "nw_protocol_http3_stream_connected";
      v50 = "%{public}s called with null protocol";
      goto LABEL_120;
    }
    if (!v90)
    {
      v48 = __nwlog_obj();
      v49 = type;
      if (!os_log_type_enabled(v48, type))
        goto LABEL_121;
      *(_DWORD *)buf = 136446210;
      v93 = "nw_protocol_http3_stream_connected";
      v50 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_120;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v48 = __nwlog_obj();
    v49 = type;
    v68 = os_log_type_enabled(v48, type);
    if (!backtrace_string)
    {
      if (!v68)
        goto LABEL_121;
      *(_DWORD *)buf = 136446210;
      v93 = "nw_protocol_http3_stream_connected";
      v50 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_120;
    }
    if (v68)
    {
      *(_DWORD *)buf = 136446466;
      v93 = "nw_protocol_http3_stream_connected";
      v94 = 2082;
      v95 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_121:
    if (!v47)
      return;
    goto LABEL_122;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v93 = "nw_protocol_http3_stream_connected";
    v47 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v90 = 0;
    if (!__nwlog_fault(v47, &type, &v90))
      goto LABEL_121;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v48 = __nwlog_obj();
      v49 = type;
      if (!os_log_type_enabled(v48, type))
        goto LABEL_121;
      *(_DWORD *)buf = 136446210;
      v93 = "nw_protocol_http3_stream_connected";
      v50 = "%{public}s called with null http3_stream";
      goto LABEL_120;
    }
    if (!v90)
    {
      v48 = __nwlog_obj();
      v49 = type;
      if (!os_log_type_enabled(v48, type))
        goto LABEL_121;
      *(_DWORD *)buf = 136446210;
      v93 = "nw_protocol_http3_stream_connected";
      v50 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_120;
    }
    v69 = (char *)__nw_create_backtrace_string();
    v48 = __nwlog_obj();
    v49 = type;
    v70 = os_log_type_enabled(v48, type);
    if (v69)
    {
      if (v70)
      {
        *(_DWORD *)buf = 136446466;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = v69;
        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v69);
      if (!v47)
        return;
LABEL_122:
      free(v47);
      return;
    }
    if (v70)
    {
      *(_DWORD *)buf = 136446210;
      v93 = "nw_protocol_http3_stream_connected";
      v50 = "%{public}s called with null http3_stream, no backtrace";
LABEL_120:
      _os_log_impl(&dword_182FBE000, v48, v49, v50, buf, 0xCu);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v51 = __nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        v52 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v53 = (nw_protocol *)*((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = handle + 636;
        v96 = 2080;
        v97 = " ";
        v98 = 1024;
        v99 = v52;
        v100 = 2048;
        v101 = v53;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Got a connected event from the lower layer", buf, 0x30u);
      }
    }
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      connected = (void (*)(void))callbacks->connected;
      if (connected)
      {
        connected();
        goto LABEL_9;
      }
    }
  }
  __nwlog_obj();
  v32 = a1->default_input_handler;
  v33 = "invalid";
  if (v32)
  {
    identifier = v32->identifier;
    if (identifier)
      v33 = (const char *)identifier;
  }
  *(_DWORD *)buf = 136446466;
  v93 = "nw_protocol_http3_stream_connected";
  v94 = 2082;
  v95 = (char *)v33;
  v35 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v90 = 0;
  if (__nwlog_fault(v35, &type, &v90))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v36 = __nwlog_obj();
      v37 = type;
      if (!os_log_type_enabled(v36, type))
        goto LABEL_100;
      v38 = a1->default_input_handler;
      v39 = "invalid";
      if (v38)
      {
        v40 = v38->identifier;
        if (v40)
          v39 = (const char *)v40;
      }
      *(_DWORD *)buf = 136446466;
      v93 = "nw_protocol_http3_stream_connected";
      v94 = 2082;
      v95 = (char *)v39;
      v41 = "%{public}s protocol %{public}s has invalid connected callback";
      goto LABEL_99;
    }
    if (!v90)
    {
      v36 = __nwlog_obj();
      v37 = type;
      if (!os_log_type_enabled(v36, type))
        goto LABEL_100;
      v54 = a1->default_input_handler;
      v55 = "invalid";
      if (v54)
      {
        v56 = v54->identifier;
        if (v56)
          v55 = (const char *)v56;
      }
      *(_DWORD *)buf = 136446466;
      v93 = "nw_protocol_http3_stream_connected";
      v94 = 2082;
      v95 = (char *)v55;
      v41 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_99;
    }
    v42 = (char *)__nw_create_backtrace_string();
    v36 = __nwlog_obj();
    v37 = type;
    v43 = os_log_type_enabled(v36, type);
    if (v42)
    {
      if (v43)
      {
        v44 = a1->default_input_handler;
        v45 = "invalid";
        if (v44)
        {
          v46 = v44->identifier;
          if (v46)
            v45 = (const char *)v46;
        }
        *(_DWORD *)buf = 136446722;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = (char *)v45;
        v96 = 2082;
        v97 = v42;
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v42);
      goto LABEL_100;
    }
    if (v43)
    {
      v71 = a1->default_input_handler;
      v72 = "invalid";
      if (v71)
      {
        v73 = v71->identifier;
        if (v73)
          v72 = (const char *)v73;
      }
      *(_DWORD *)buf = 136446466;
      v93 = "nw_protocol_http3_stream_connected";
      v94 = 2082;
      v95 = (char *)v72;
      v41 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_99:
      _os_log_impl(&dword_182FBE000, v36, v37, v41, buf, 0x16u);
    }
  }
LABEL_100:
  if (v35)
    free(v35);
LABEL_9:
  v8 = handle + 736;
  if (a1->output_handler != a2)
  {
    if ((*v8 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v11 = (nw_protocol *)*((_QWORD *)handle + 30);
          output_handler = a1->output_handler;
          *(_DWORD *)buf = 136447490;
          v93 = "nw_protocol_http3_stream_connected";
          v94 = 2082;
          v95 = handle + 636;
          v96 = 2080;
          v97 = " ";
          v98 = 1024;
          v99 = v10;
          v100 = 2048;
          v101 = v11;
          v102 = 2048;
          v103 = output_handler;
          v13 = "%{public}s %{public}s%s<i%u:s%llu> connected protocol is not our output_handler (%p), ignoring";
          v14 = v9;
LABEL_14:
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, v13, buf, 0x3Au);
          return;
        }
      }
    }
    return;
  }
  if (a2)
  {
    if (!*((_QWORD *)handle + 52))
    {
      v15 = a2->callbacks;
      if (v15)
      {
        copy_info = (uint64_t (*)(nw_protocol *, uint64_t, char *))v15->copy_info;
        if (copy_info)
        {
          v17 = (unsigned __int8 *)copy_info(a2, 255, handle);
          v89[0] = MEMORY[0x1E0C809B0];
          v89[1] = 0x40000000;
          v89[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke;
          v89[3] = &__block_descriptor_tmp_128_61766;
          v89[4] = handle;
          nw_array_apply(v17, (uint64_t)v89);
          if (v17)
            os_release(v17);
        }
      }
    }
  }
  if (!a1->default_input_handler)
  {
    if ((*v8 & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v26 = (nw_protocol *)*((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = handle + 636;
        v96 = 2080;
        v97 = " ";
        v98 = 1024;
        v99 = v25;
        v100 = 2048;
        v101 = v26;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> No input handler found, ignoring connected call", buf, 0x30u);
      }
    }
    return;
  }
  if ((*v8 & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v79 = __nwlog_obj();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        v80 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v81 = (nw_protocol *)*((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447746;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = handle + 636;
        v96 = 2080;
        v97 = " ";
        v98 = 1024;
        v99 = v80;
        v100 = 2048;
        v101 = v81;
        v102 = 2048;
        v103 = a1;
        v104 = 2048;
        v105 = a2;
        _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> http3 stream %p connected with output_handler %p", buf, 0x44u);
      }
    }
  }
  v18 = *((_QWORD *)handle + 42);
  if (!v18)
  {
    v20 = (unsigned __int16)*v8 | (handle[738] << 16);
    goto LABEL_34;
  }
  v19 = *(_DWORD *)(v18 + 1272);
  v20 = (unsigned __int16)*v8 | (handle[738] << 16);
  if (v19)
  {
LABEL_34:
    *v8 = v20;
    handle[738] = (v20 | 0x80000u) >> 16;
    v27 = (void *)*((_QWORD *)handle + 49);
    v88[0] = MEMORY[0x1E0C809B0];
    v88[1] = 0x40000000;
    v88[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_129;
    v88[3] = &__block_descriptor_tmp_137_61770;
    v88[4] = handle;
    nw_http_transaction_metadata_set_event_handler(v27, v88);
    v28 = *((_WORD *)handle + 368) & 0xFF7F | (handle[738] << 16);
    *v8 = *v8 & 0xFF3F | 0x40;
    handle[738] = BYTE2(v28);
    nw_http3_signal_output_pending(*((_QWORD *)handle + 42), 1);
    v29 = a1->default_input_handler;
    if (v29)
    {
      v30 = v29->callbacks;
      if (v30)
      {
        v31 = (void (*)(nw_protocol *, nw_protocol *))v30->connected;
        if (v31)
        {
          v31(v29, a1);
LABEL_38:
          nw_http3_signal_output_pending(*((_QWORD *)handle + 42), 0);
          return;
        }
      }
    }
    __nwlog_obj();
    v57 = a1->default_input_handler;
    v58 = "invalid";
    if (v57)
    {
      v59 = v57->identifier;
      if (v59)
        v58 = (const char *)v59;
    }
    *(_DWORD *)buf = 136446466;
    v93 = "nw_protocol_http3_stream_connected";
    v94 = 2082;
    v95 = (char *)v58;
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v90 = 0;
    if (__nwlog_fault(v60, &type, &v90))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v61 = __nwlog_obj();
        v62 = type;
        if (!os_log_type_enabled(v61, type))
          goto LABEL_134;
        v63 = a1->default_input_handler;
        v64 = "invalid";
        if (v63)
        {
          v65 = v63->identifier;
          if (v65)
            v64 = (const char *)v65;
        }
        *(_DWORD *)buf = 136446466;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = (char *)v64;
        v66 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_133;
      }
      if (!v90)
      {
        v61 = __nwlog_obj();
        v62 = type;
        if (!os_log_type_enabled(v61, type))
          goto LABEL_134;
        v82 = a1->default_input_handler;
        v83 = "invalid";
        if (v82)
        {
          v84 = v82->identifier;
          if (v84)
            v83 = (const char *)v84;
        }
        *(_DWORD *)buf = 136446466;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = (char *)v83;
        v66 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_133;
      }
      v74 = (char *)__nw_create_backtrace_string();
      v61 = __nwlog_obj();
      v62 = type;
      v75 = os_log_type_enabled(v61, type);
      if (v74)
      {
        if (v75)
        {
          v76 = a1->default_input_handler;
          v77 = "invalid";
          if (v76)
          {
            v78 = v76->identifier;
            if (v78)
              v77 = (const char *)v78;
          }
          *(_DWORD *)buf = 136446722;
          v93 = "nw_protocol_http3_stream_connected";
          v94 = 2082;
          v95 = (char *)v77;
          v96 = 2082;
          v97 = v74;
          _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v74);
        goto LABEL_134;
      }
      if (v75)
      {
        v85 = a1->default_input_handler;
        v86 = "invalid";
        if (v85)
        {
          v87 = v85->identifier;
          if (v87)
            v86 = (const char *)v87;
        }
        *(_DWORD *)buf = 136446466;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = (char *)v86;
        v66 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_133:
        _os_log_impl(&dword_182FBE000, v61, v62, v66, buf, 0x16u);
      }
    }
LABEL_134:
    if (v60)
      free(v60);
    goto LABEL_38;
  }
  handle[738] = BYTE2(v20);
  *v8 = v20 | 0x80;
  if ((v20 & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v21 = __nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v23 = (nw_protocol *)*((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447490;
        v93 = "nw_protocol_http3_stream_connected";
        v94 = 2082;
        v95 = handle + 636;
        v96 = 2080;
        v97 = " ";
        v98 = 1024;
        v99 = v22;
        v100 = 2048;
        v101 = v23;
        v102 = 2048;
        v103 = v23;
        v13 = "%{public}s %{public}s%s<i%u:s%llu> Pending connected event for stream %llu until SETTINGS are sent";
        v14 = v21;
        goto LABEL_14;
      }
    }
  }
}

void nw_protocol_http3_stream_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  uint64_t application_error;
  nw_protocol *v5;
  nw_protocol_callbacks *v6;
  void (*error)(void);
  NSObject *v8;
  int v9;
  uint64_t v10;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  nw_protocol *v13;
  nw_protocol_callbacks *v14;
  void (*disconnected)(void);
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  char *backtrace_string;
  _BOOL4 v24;
  char *v25;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_http3_stream_disconnected";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v16, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_http3_stream_disconnected";
      v19 = "%{public}s called with null protocol";
      goto LABEL_54;
    }
    if (!v27)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_http3_stream_disconnected";
      v19 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (!v24)
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_http3_stream_disconnected";
      v19 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_protocol_http3_stream_disconnected";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_55:
    if (!v16)
      return;
    goto LABEL_56;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_http3_stream_disconnected";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v16, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_http3_stream_disconnected";
      v19 = "%{public}s called with null http3_stream";
      goto LABEL_54;
    }
    if (!v27)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_http3_stream_disconnected";
      v19 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_54;
    }
    v25 = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v26 = os_log_type_enabled(v17, type);
    if (v25)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_protocol_http3_stream_disconnected";
        v31 = 2082;
        v32 = v25;
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v25);
      if (!v16)
        return;
LABEL_56:
      free(v16);
      return;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_http3_stream_disconnected";
      v19 = "%{public}s called with null http3_stream, no backtrace";
LABEL_54:
      _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
      goto LABEL_55;
    }
    goto LABEL_55;
  }
  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v20 = __nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(_DWORD *)(handle[42] + 1280);
        v22 = handle[30];
        *(_DWORD *)buf = 136447234;
        v30 = "nw_protocol_http3_stream_disconnected";
        v31 = 2082;
        v32 = (char *)handle + 636;
        v33 = 2080;
        v34 = " ";
        v35 = 1024;
        v36 = v21;
        v37 = 2048;
        v38 = v22;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  if (handle + 8 != (_QWORD *)a1)
  {
    application_error = nw_http3_stream_get_application_error((uint64_t)handle);
    if (application_error == 272)
    {
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          error = (void (*)(void))callbacks->error;
          if (error)
            goto LABEL_19;
        }
      }
    }
    else if (application_error == 267)
    {
      v5 = a1->default_input_handler;
      if (v5)
      {
        v6 = v5->callbacks;
        if (v6)
        {
          error = (void (*)(void))v6->error;
          if (error)
LABEL_19:
            error();
        }
      }
    }
    v13 = a1->default_input_handler;
    if (v13)
    {
      v14 = v13->callbacks;
      if (v14)
      {
        disconnected = (void (*)(void))v14->disconnected;
        if (disconnected)
          disconnected();
      }
    }
    return;
  }
  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)(handle[42] + 1280);
        v10 = handle[30];
        *(_DWORD *)buf = 136447234;
        v30 = "nw_protocol_http3_stream_disconnected";
        v31 = 2082;
        v32 = (char *)handle + 636;
        v33 = 2080;
        v34 = " ";
        v35 = 1024;
        v36 = v9;
        v37 = 2048;
        v38 = v10;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> datagram flow disconnected", buf, 0x30u);
      }
    }
  }
}

void nw_protocol_http3_stream_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  unsigned int v4;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*output_finished)(void);
  nw_protocol *v8;
  const char *v9;
  nw_protocol_identifier *identifier;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  nw_protocol *v14;
  const char *v15;
  nw_protocol_identifier *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  char *v25;
  _BOOL4 v26;
  nw_protocol *v27;
  const char *v28;
  nw_protocol_identifier *v29;
  char *backtrace_string;
  _BOOL4 v31;
  char *v32;
  _BOOL4 v33;
  const char *v34;
  _BOOL4 v35;
  nw_protocol *v36;
  const char *v37;
  nw_protocol_identifier *v38;
  nw_protocol *v39;
  const char *v40;
  nw_protocol_identifier *v41;
  char *v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_http3_stream_output_finished";
    v18 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v18, &type, &v43))
      goto LABEL_88;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_http3_stream_output_finished";
      v21 = "%{public}s called with null protocol";
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type;
      v31 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_protocol_http3_stream_output_finished";
          v47 = 2082;
          v48 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_88:
        if (!v18)
          return;
        goto LABEL_89;
      }
      if (!v31)
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_http3_stream_output_finished";
      v21 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_http3_stream_output_finished";
      v21 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_87;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_http3_stream_output_finished";
    v18 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v18, &type, &v43))
      goto LABEL_88;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (!os_log_type_enabled(v19, type))
          goto LABEL_88;
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_http3_stream_output_finished";
        v21 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_87;
      }
      v32 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type;
      v33 = os_log_type_enabled(v19, type);
      if (!v32)
      {
        if (!v33)
          goto LABEL_88;
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_http3_stream_output_finished";
        v21 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_87;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v46 = "nw_protocol_http3_stream_output_finished";
        v47 = 2082;
        v48 = v32;
        v34 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_59:
        _os_log_impl(&dword_182FBE000, v19, v20, v34, buf, 0x16u);
      }
LABEL_60:
      free(v32);
      if (!v18)
        return;
LABEL_89:
      v42 = (char *)v18;
      goto LABEL_90;
    }
    v19 = __nwlog_obj();
    v20 = type;
    if (!os_log_type_enabled(v19, type))
      goto LABEL_88;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_http3_stream_output_finished";
    v21 = "%{public}s called with null http3_stream";
LABEL_87:
    _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
    goto LABEL_88;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_http3_stream_output_finished";
    v18 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v18, &type, &v43))
      goto LABEL_88;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_http3_stream_output_finished";
      v21 = "%{public}s called with null other_protocol";
      goto LABEL_87;
    }
    if (!v43)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_http3_stream_output_finished";
      v21 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_87;
    }
    v32 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v35 = os_log_type_enabled(v19, type);
    if (!v32)
    {
      if (!v35)
        goto LABEL_88;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_http3_stream_output_finished";
      v21 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_87;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_http3_stream_output_finished";
      v47 = 2082;
      v48 = v32;
      v34 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_59;
    }
    goto LABEL_60;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v24 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        v46 = "nw_protocol_http3_stream_output_finished";
        v47 = 2082;
        v48 = handle + 636;
        v49 = 2080;
        v50 = " ";
        v51 = 1024;
        v52 = v23;
        v53 = 2048;
        v54 = v24;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v4 = *((_DWORD *)handle + 92);
  if (v4 > 5)
    return;
  if (((1 << v4) & 0x2B) == 0)
  {
    *((_WORD *)handle + 368) |= 0x200u;
    return;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      output_finished = (void (*)(void))callbacks->output_finished;
      if (output_finished)
      {
        output_finished();
        return;
      }
    }
  }
  __nwlog_obj();
  v8 = a1->output_handler;
  v9 = "invalid";
  if (v8)
  {
    identifier = v8->identifier;
    if (identifier)
      v9 = (const char *)identifier;
  }
  *(_DWORD *)buf = 136446466;
  v46 = "nw_protocol_http3_stream_output_finished";
  v47 = 2082;
  v48 = (char *)v9;
  v11 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v11, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      v14 = a1->output_handler;
      v15 = "invalid";
      if (v14)
      {
        v16 = v14->identifier;
        if (v16)
          v15 = (const char *)v16;
      }
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_http3_stream_output_finished";
      v47 = 2082;
      v48 = (char *)v15;
      v17 = "%{public}s protocol %{public}s has invalid output_finished callback";
LABEL_72:
      _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
      goto LABEL_73;
    }
    if (!v43)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      v36 = a1->output_handler;
      v37 = "invalid";
      if (v36)
      {
        v38 = v36->identifier;
        if (v38)
          v37 = (const char *)v38;
      }
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_http3_stream_output_finished";
      v47 = 2082;
      v48 = (char *)v37;
      v17 = "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded";
      goto LABEL_72;
    }
    v25 = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v26 = os_log_type_enabled(v12, type);
    if (!v25)
    {
      if (!v26)
        goto LABEL_73;
      v39 = a1->output_handler;
      v40 = "invalid";
      if (v39)
      {
        v41 = v39->identifier;
        if (v41)
          v40 = (const char *)v41;
      }
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_http3_stream_output_finished";
      v47 = 2082;
      v48 = (char *)v40;
      v17 = "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace";
      goto LABEL_72;
    }
    if (v26)
    {
      v27 = a1->output_handler;
      v28 = "invalid";
      if (v27)
      {
        v29 = v27->identifier;
        if (v29)
          v28 = (const char *)v29;
      }
      *(_DWORD *)buf = 136446722;
      v46 = "nw_protocol_http3_stream_output_finished";
      v47 = 2082;
      v48 = (char *)v28;
      v49 = 2082;
      v50 = v25;
      _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v25);
  }
LABEL_73:
  if (v11)
  {
    v42 = (char *)v11;
LABEL_90:
    free(v42);
  }
}

void nw_protocol_http3_stream_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  unsigned int v4;
  _WORD *v5;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_available)(void);
  unsigned int v9;
  int v10;
  unsigned int v11;
  nw_protocol *v12;
  nw_protocol_callbacks *v13;
  void (*input_finished)(nw_protocol *, nw_protocol *);
  nw_protocol *v15;
  const char *v16;
  nw_protocol_identifier *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  nw_protocol *v21;
  const char *v22;
  nw_protocol_identifier *v23;
  const char *v24;
  nw_protocol_callbacks *v25;
  nw_protocol *v26;
  const char *v27;
  nw_protocol_identifier *identifier;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  nw_protocol *v32;
  const char *v33;
  nw_protocol_identifier *v34;
  const char *v35;
  nw_protocol *v36;
  const char *v37;
  nw_protocol_identifier *v38;
  nw_protocol *v39;
  nw_protocol_identifier *v40;
  const char *v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  char *v45;
  _BOOL4 v46;
  nw_protocol *v47;
  const char *v48;
  nw_protocol_identifier *v49;
  char *v50;
  _BOOL4 v51;
  nw_protocol *v52;
  const char *v53;
  nw_protocol_identifier *v54;
  char *backtrace_string;
  _BOOL4 v56;
  char *v57;
  _BOOL4 v58;
  const char *v59;
  _BOOL4 v60;
  NSObject *v61;
  int v62;
  uint64_t v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  char *v67;
  _BOOL4 v68;
  nw_protocol *v69;
  const char *v70;
  nw_protocol_identifier *v71;
  nw_protocol *v72;
  const char *v73;
  nw_protocol_identifier *v74;
  nw_protocol *v75;
  const char *v76;
  nw_protocol_identifier *v77;
  NSObject *v78;
  int v79;
  uint64_t v80;
  nw_protocol *v81;
  const char *v82;
  nw_protocol_identifier *v83;
  nw_protocol *v84;
  const char *v85;
  nw_protocol_identifier *v86;
  char *v87;
  nw_protocol *v88;
  nw_protocol_identifier *v89;
  nw_protocol *v90;
  nw_protocol_identifier *v91;
  char v92;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v95 = "nw_protocol_http3_stream_input_finished";
    v41 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (!__nwlog_fault(v41, &type, &v92))
      goto LABEL_152;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v42 = __nwlog_obj();
      v43 = type;
      if (!os_log_type_enabled(v42, type))
        goto LABEL_152;
      *(_DWORD *)buf = 136446210;
      v95 = "nw_protocol_http3_stream_input_finished";
      v44 = "%{public}s called with null protocol";
    }
    else if (v92)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v42 = __nwlog_obj();
      v43 = type;
      v56 = os_log_type_enabled(v42, type);
      if (backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446466;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          v97 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_152:
        if (!v41)
          return;
        goto LABEL_153;
      }
      if (!v56)
        goto LABEL_152;
      *(_DWORD *)buf = 136446210;
      v95 = "nw_protocol_http3_stream_input_finished";
      v44 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v42 = __nwlog_obj();
      v43 = type;
      if (!os_log_type_enabled(v42, type))
        goto LABEL_152;
      *(_DWORD *)buf = 136446210;
      v95 = "nw_protocol_http3_stream_input_finished";
      v44 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_151;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v95 = "nw_protocol_http3_stream_input_finished";
    v41 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (!__nwlog_fault(v41, &type, &v92))
      goto LABEL_152;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v92)
      {
        v42 = __nwlog_obj();
        v43 = type;
        if (!os_log_type_enabled(v42, type))
          goto LABEL_152;
        *(_DWORD *)buf = 136446210;
        v95 = "nw_protocol_http3_stream_input_finished";
        v44 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_151;
      }
      v57 = (char *)__nw_create_backtrace_string();
      v42 = __nwlog_obj();
      v43 = type;
      v58 = os_log_type_enabled(v42, type);
      if (!v57)
      {
        if (!v58)
          goto LABEL_152;
        *(_DWORD *)buf = 136446210;
        v95 = "nw_protocol_http3_stream_input_finished";
        v44 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_151;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = v57;
        v59 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_98:
        _os_log_impl(&dword_182FBE000, v42, v43, v59, buf, 0x16u);
      }
LABEL_99:
      free(v57);
      if (!v41)
        return;
LABEL_153:
      v87 = (char *)v41;
LABEL_167:
      free(v87);
      return;
    }
    v42 = __nwlog_obj();
    v43 = type;
    if (!os_log_type_enabled(v42, type))
      goto LABEL_152;
    *(_DWORD *)buf = 136446210;
    v95 = "nw_protocol_http3_stream_input_finished";
    v44 = "%{public}s called with null http3_stream";
LABEL_151:
    _os_log_impl(&dword_182FBE000, v42, v43, v44, buf, 0xCu);
    goto LABEL_152;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v95 = "nw_protocol_http3_stream_input_finished";
    v41 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (!__nwlog_fault(v41, &type, &v92))
      goto LABEL_152;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v42 = __nwlog_obj();
      v43 = type;
      if (!os_log_type_enabled(v42, type))
        goto LABEL_152;
      *(_DWORD *)buf = 136446210;
      v95 = "nw_protocol_http3_stream_input_finished";
      v44 = "%{public}s called with null other_protocol";
      goto LABEL_151;
    }
    if (!v92)
    {
      v42 = __nwlog_obj();
      v43 = type;
      if (!os_log_type_enabled(v42, type))
        goto LABEL_152;
      *(_DWORD *)buf = 136446210;
      v95 = "nw_protocol_http3_stream_input_finished";
      v44 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_151;
    }
    v57 = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = type;
    v60 = os_log_type_enabled(v42, type);
    if (!v57)
    {
      if (!v60)
        goto LABEL_152;
      *(_DWORD *)buf = 136446210;
      v95 = "nw_protocol_http3_stream_input_finished";
      v44 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_151;
    }
    if (v60)
    {
      *(_DWORD *)buf = 136446466;
      v95 = "nw_protocol_http3_stream_input_finished";
      v96 = 2082;
      v97 = v57;
      v59 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    goto LABEL_99;
  }
  v4 = *((_DWORD *)handle + 93);
  if (v4 > 8)
    return;
  if (((1 << v4) & 0x67) != 0)
  {
    v5 = handle + 736;
    if ((*((_WORD *)handle + 368) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v61 = __nwlog_obj();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          v62 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v63 = *((_QWORD *)handle + 30);
          *(_DWORD *)buf = 136447234;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          v97 = handle + 636;
          v98 = 2080;
          v99 = " ";
          v100 = 1024;
          v101 = v62;
          v102 = 2048;
          v103 = v63;
          _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> deferring input finished", buf, 0x30u);
        }
      }
    }
    *v5 |= 0x100u;
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_available = (void (*)(void))callbacks->input_available;
        if (input_available)
        {
          input_available();
          goto LABEL_12;
        }
      }
    }
    __nwlog_obj();
    v26 = a1->default_input_handler;
    v27 = "invalid";
    if (v26)
    {
      identifier = v26->identifier;
      if (identifier)
        v27 = (const char *)identifier;
    }
    *(_DWORD *)buf = 136446466;
    v95 = "nw_protocol_http3_stream_input_finished";
    v96 = 2082;
    v97 = (char *)v27;
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (__nwlog_fault(v29, &type, &v92))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_138;
        v32 = a1->default_input_handler;
        v33 = "invalid";
        if (v32)
        {
          v34 = v32->identifier;
          if (v34)
            v33 = (const char *)v34;
        }
        *(_DWORD *)buf = 136446466;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = (char *)v33;
        v35 = "%{public}s protocol %{public}s has invalid input_available callback";
        goto LABEL_137;
      }
      if (!v92)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_138;
        v72 = a1->default_input_handler;
        v73 = "invalid";
        if (v72)
        {
          v74 = v72->identifier;
          if (v74)
            v73 = (const char *)v74;
        }
        *(_DWORD *)buf = 136446466;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = (char *)v73;
        v35 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
        goto LABEL_137;
      }
      v45 = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v46 = os_log_type_enabled(v30, type);
      if (v45)
      {
        if (v46)
        {
          v47 = a1->default_input_handler;
          v48 = "invalid";
          if (v47)
          {
            v49 = v47->identifier;
            if (v49)
              v48 = (const char *)v49;
          }
          *(_DWORD *)buf = 136446722;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          v97 = (char *)v48;
          v98 = 2082;
          v99 = v45;
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v45);
        goto LABEL_138;
      }
      if (v46)
      {
        v81 = a1->default_input_handler;
        v82 = "invalid";
        if (v81)
        {
          v83 = v81->identifier;
          if (v83)
            v82 = (const char *)v83;
        }
        *(_DWORD *)buf = 136446466;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = (char *)v82;
        v35 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_137:
        _os_log_impl(&dword_182FBE000, v30, v31, v35, buf, 0x16u);
      }
    }
LABEL_138:
    if (v29)
      free(v29);
LABEL_12:
    if ((*v5 & 0x100) == 0)
      return;
    v9 = *((_DWORD *)handle + 93);
    if (v9 > 8 || ((1 << v9) & 0x198) == 0)
      return;
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v78 = __nwlog_obj();
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          v79 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v80 = *((_QWORD *)handle + 30);
          *(_DWORD *)buf = 136447234;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          v97 = handle + 636;
          v98 = 2080;
          v99 = " ";
          v100 = 1024;
          v101 = v79;
          v102 = 2048;
          v103 = v80;
          _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> delivering deferred input finished", buf, 0x30u);
        }
      }
    }
    v10 = (unsigned __int16)*v5;
    v11 = v10 & 0xFFFFFEFF | (handle[738] << 16);
    *v5 = v10 & 0xFEFF;
    handle[738] = BYTE2(v11);
    v12 = a1->default_input_handler;
    if (!v12
      || (v13 = v12->callbacks) == 0
      || (input_finished = (void (*)(nw_protocol *, nw_protocol *))v13->input_finished) == 0)
    {
      __nwlog_obj();
      v15 = a1->default_input_handler;
      v16 = "invalid";
      if (v15)
      {
        v17 = v15->identifier;
        if (v17)
          v16 = (const char *)v17;
      }
      *(_DWORD *)buf = 136446466;
      v95 = "nw_protocol_http3_stream_input_finished";
      v96 = 2082;
      v97 = (char *)v16;
      v18 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v92 = 0;
      if (!__nwlog_fault(v18, &type, &v92))
        goto LABEL_165;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (!os_log_type_enabled(v19, type))
          goto LABEL_165;
        v21 = a1->default_input_handler;
        v22 = "invalid";
        if (v21)
        {
          v23 = v21->identifier;
          if (v23)
            v22 = (const char *)v23;
        }
LABEL_29:
        *(_DWORD *)buf = 136446466;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = (char *)v22;
        v24 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_164:
        _os_log_impl(&dword_182FBE000, v19, v20, v24, buf, 0x16u);
        goto LABEL_165;
      }
      if (v92)
      {
        v67 = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v68 = os_log_type_enabled(v19, type);
        if (v67)
        {
          if (v68)
          {
            v69 = a1->default_input_handler;
            v70 = "invalid";
            if (v69)
            {
              v71 = v69->identifier;
              if (v71)
                v70 = (const char *)v71;
            }
            *(_DWORD *)buf = 136446722;
            v95 = "nw_protocol_http3_stream_input_finished";
            v96 = 2082;
            v97 = (char *)v70;
            v98 = 2082;
            v99 = v67;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v67);
          if (v18)
            goto LABEL_166;
          return;
        }
        if (v68)
        {
          v90 = a1->default_input_handler;
          v85 = "invalid";
          if (v90)
          {
            v91 = v90->identifier;
            if (v91)
              v85 = (const char *)v91;
          }
LABEL_163:
          *(_DWORD *)buf = 136446466;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          v97 = (char *)v85;
          v24 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
          goto LABEL_164;
        }
        goto LABEL_165;
      }
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_165;
      v88 = a1->default_input_handler;
      v76 = "invalid";
      if (v88)
      {
        v89 = v88->identifier;
        if (v89)
          v76 = (const char *)v89;
      }
LABEL_123:
      *(_DWORD *)buf = 136446466;
      v95 = "nw_protocol_http3_stream_input_finished";
      v96 = 2082;
      v97 = (char *)v76;
      v24 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
      goto LABEL_164;
    }
LABEL_35:
    input_finished(v12, a1);
    return;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        v65 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v66 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        v95 = "nw_protocol_http3_stream_input_finished";
        v96 = 2082;
        v97 = handle + 636;
        v98 = 2080;
        v99 = " ";
        v100 = 1024;
        v101 = v65;
        v102 = 2048;
        v103 = v66;
        _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v12 = a1->default_input_handler;
  if (v12)
  {
    v25 = v12->callbacks;
    if (v25)
    {
      input_finished = (void (*)(nw_protocol *, nw_protocol *))v25->input_finished;
      if (input_finished)
        goto LABEL_35;
    }
  }
  __nwlog_obj();
  v36 = a1->default_input_handler;
  v37 = "invalid";
  if (v36)
  {
    v38 = v36->identifier;
    if (v38)
      v37 = (const char *)v38;
  }
  *(_DWORD *)buf = 136446466;
  v95 = "nw_protocol_http3_stream_input_finished";
  v96 = 2082;
  v97 = (char *)v37;
  v18 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v92 = 0;
  if (!__nwlog_fault(v18, &type, &v92))
    goto LABEL_165;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v19 = __nwlog_obj();
    v20 = type;
    if (!os_log_type_enabled(v19, type))
      goto LABEL_165;
    v39 = a1->default_input_handler;
    v22 = "invalid";
    if (v39)
    {
      v40 = v39->identifier;
      if (v40)
        v22 = (const char *)v40;
    }
    goto LABEL_29;
  }
  if (!v92)
  {
    v19 = __nwlog_obj();
    v20 = type;
    if (!os_log_type_enabled(v19, type))
      goto LABEL_165;
    v75 = a1->default_input_handler;
    v76 = "invalid";
    if (v75)
    {
      v77 = v75->identifier;
      if (v77)
        v76 = (const char *)v77;
    }
    goto LABEL_123;
  }
  v50 = (char *)__nw_create_backtrace_string();
  v19 = __nwlog_obj();
  v20 = type;
  v51 = os_log_type_enabled(v19, type);
  if (!v50)
  {
    if (!v51)
      goto LABEL_165;
    v84 = a1->default_input_handler;
    v85 = "invalid";
    if (v84)
    {
      v86 = v84->identifier;
      if (v86)
        v85 = (const char *)v86;
    }
    goto LABEL_163;
  }
  if (v51)
  {
    v52 = a1->default_input_handler;
    v53 = "invalid";
    if (v52)
    {
      v54 = v52->identifier;
      if (v54)
        v53 = (const char *)v54;
    }
    *(_DWORD *)buf = 136446722;
    v95 = "nw_protocol_http3_stream_input_finished";
    v96 = 2082;
    v97 = (char *)v53;
    v98 = 2082;
    v99 = v50;
    _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v50);
LABEL_165:
  if (v18)
  {
LABEL_166:
    v87 = (char *)v18;
    goto LABEL_167;
  }
}

BOOL nw_protocol_http3_stream_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _WORD *v5;
  nw_protocol *v6;
  BOOL v7;
  _BOOL8 result;
  NSObject *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  char *parameters;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  char *backtrace_string;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  NSObject *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_http3_stream_add_input_handler";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v21, &type, &v39))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v24 = "%{public}s called with null protocol";
      goto LABEL_61;
    }
    if (!v39)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v24 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v29 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v29)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v24 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_61;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_62:
    if (!v21)
      return 0;
LABEL_63:
    free(v21);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_http3_stream_add_input_handler";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v21, &type, &v39))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v24 = "%{public}s called with null http3_stream";
      goto LABEL_61;
    }
    if (!v39)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_61;
    }
    v30 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v31 = os_log_type_enabled(v22, type);
    if (v30)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v42 = "nw_protocol_http3_stream_add_input_handler";
        v43 = 2082;
        v44 = v30;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v30);
      if (!v21)
        return 0;
      goto LABEL_63;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v24 = "%{public}s called with null http3_stream, no backtrace";
LABEL_61:
      _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
      goto LABEL_62;
    }
    goto LABEL_62;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v27 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        v42 = "nw_protocol_http3_stream_add_input_handler";
        v43 = 2082;
        v44 = handle + 636;
        v45 = 2080;
        v46 = " ";
        v47 = 1024;
        v48 = v26;
        v49 = 2048;
        v50 = v27;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v5 = handle + 736;
  v6 = (nw_protocol *)*((_QWORD *)handle + 42);
  if (v6)
    v7 = a1->default_input_handler == a2;
  else
    v7 = 1;
  if (!v7)
  {
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v32 = __nwlog_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v33 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v34 = *((_QWORD *)handle + 30);
          *(_DWORD *)buf = 136447490;
          v42 = "nw_protocol_http3_stream_add_input_handler";
          v43 = 2082;
          v44 = handle + 636;
          v45 = 2080;
          v46 = " ";
          v47 = 1024;
          v48 = v33;
          v49 = 2048;
          v50 = v34;
          v51 = 2048;
          v52 = handle;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Peeling off a new stream from %p", buf, 0x3Au);
        }
      }
    }
    parameters = (char *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      v16 = parameters;
      nw_http3_stream_replace_protocol_instance((uint64_t)handle, parameters, (nw_protocol *)handle, (uint64_t)v6);
      if ((*v5 & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v35 = __nwlog_obj();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            v36 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
            v37 = *((_QWORD *)handle + 30);
            *(_DWORD *)buf = 136447490;
            v42 = "nw_protocol_http3_stream_add_input_handler";
            v43 = 2082;
            v44 = handle + 636;
            v45 = 2080;
            v46 = " ";
            v47 = 1024;
            v48 = v36;
            v49 = 2048;
            v50 = v37;
            v51 = 2048;
            v52 = v16;
            _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Set connection protocol as instance in peeled off parameters %p", buf, 0x3Au);
          }
        }
      }
    }
    v17 = *((_QWORD *)handle + 42);
    if (v17)
    {
      *(_WORD *)(v17 + 1373) |= 0x8000u;
      result = nw_protocol_http3_add_input_handler(v6, a2);
      v18 = *((_QWORD *)handle + 42);
      v19 = *(unsigned __int16 *)(v18 + 1373);
      v20 = v19 & 0xFFFF7FFF | (*(unsigned __int8 *)(v18 + 1375) << 16);
      *(_WORD *)(v18 + 1373) = v19 & 0x7FFF;
      *(_BYTE *)(v18 + 1375) = BYTE2(v20);
      return result;
    }
    return 0;
  }
  if (v6)
  {
    result = 0;
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v9 = __nwlog_obj();
        result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          v10 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v11 = *((_QWORD *)handle + 30);
          *(_DWORD *)buf = 136447234;
          v42 = "nw_protocol_http3_stream_add_input_handler";
          v43 = 2082;
          v44 = handle + 636;
          v45 = 2080;
          v46 = " ";
          v47 = 1024;
          v48 = v10;
          v49 = 2048;
          v50 = v11;
          v12 = "%{public}s %{public}s%s<i%u:s%llu> Rejecting duplicate request for a stream";
          v13 = v9;
          v14 = 48;
LABEL_52:
          _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, v12, buf, v14);
          return 0;
        }
      }
    }
  }
  else
  {
    if (!gLogDatapath)
      return 0;
    v38 = __nwlog_obj();
    result = os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_http3_stream_add_input_handler";
      v12 = "%{public}s Rejecting duplicate request for a stream";
      v13 = v38;
      v14 = 12;
      goto LABEL_52;
    }
  }
  return result;
}

uint64_t nw_protocol_http3_stream_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  char *handle;
  NSObject *v7;
  int v8;
  uint64_t v9;
  nw_protocol *default_input_handler;
  _WORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD, char *);
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  FILE *v21;
  _QWORD *v22;
  _QWORD *v23;
  FILE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  NSObject *v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  NSObject *v51;
  _BOOL4 v52;
  int v53;
  uint64_t v54;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*remove_input_handler)(nw_protocol *, nw_protocol *);
  nw_protocol *v58;
  const char *v59;
  nw_protocol_identifier *identifier;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  nw_protocol *v64;
  const char *v65;
  nw_protocol_identifier *v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  const char *v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  const char *v79;
  NSObject *v80;
  int v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  nw_protocol *v86;
  const char *v87;
  nw_protocol_identifier *v88;
  char *backtrace_string;
  _BOOL4 v90;
  const char *v91;
  char *v92;
  NSObject *v93;
  os_log_type_t v94;
  const char *v95;
  const char *v96;
  char *v97;
  _BOOL4 v98;
  const char *v99;
  _BOOL4 v100;
  NSObject *v101;
  int v102;
  uint64_t v103;
  nw_protocol *v104;
  NSObject *v105;
  NSObject *v106;
  char *v107;
  NSObject *v108;
  _BOOL4 v109;
  NSObject *v110;
  const char *v111;
  NSObject *v112;
  os_log_type_t v113;
  const char *v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  const char *v118;
  const char *v119;
  char *v120;
  _BOOL4 v121;
  const char *v122;
  NSObject *v123;
  const char *v124;
  NSObject *v125;
  os_log_type_t v126;
  nw_protocol *v127;
  const char *v128;
  nw_protocol_identifier *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  nw_protocol *v133;
  const char *v134;
  nw_protocol_identifier *v135;
  NSObject *v136;
  NSObject *v137;
  uint64_t v138;
  NSObject *log;
  os_log_type_t loga;
  os_log_type_t logb;
  NSObject *v142;
  NSObject *v143;
  NSObject *v144;
  NSObject *v145;
  NSObject *v146;
  int v147;
  char v148;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v151;
  __int128 v152;
  __int16 v153;
  nw_protocol *v154;
  __int16 v155;
  nw_protocol *v156;
  __int16 v157;
  nw_protocol *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
    v67 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v148 = 0;
    if (!__nwlog_fault(v67, &type, &v148))
      goto LABEL_232;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v148)
      {
        v68 = __nwlog_obj();
        v69 = type;
        if (!os_log_type_enabled(v68, type))
          goto LABEL_232;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_231;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = type;
      v90 = os_log_type_enabled(v68, type);
      if (!backtrace_string)
      {
        if (!v90)
          goto LABEL_232;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_231;
      }
      if (v90)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v91 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_152:
        _os_log_impl(&dword_182FBE000, v68, v69, v91, buf, 0x16u);
      }
LABEL_153:
      free(backtrace_string);
      goto LABEL_232;
    }
    v68 = __nwlog_obj();
    v69 = type;
    if (!os_log_type_enabled(v68, type))
      goto LABEL_232;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
    v70 = "%{public}s called with null protocol";
LABEL_231:
    _os_log_impl(&dword_182FBE000, v68, v69, v70, buf, 0xCu);
LABEL_232:
    if (v67)
      free(v67);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
    v67 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v148 = 0;
    if (!__nwlog_fault(v67, &type, &v148))
      goto LABEL_232;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v68 = __nwlog_obj();
      v69 = type;
      if (!os_log_type_enabled(v68, type))
        goto LABEL_232;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
      v70 = "%{public}s called with null http3_stream";
      goto LABEL_231;
    }
    if (!v148)
    {
      v68 = __nwlog_obj();
      v69 = type;
      if (!os_log_type_enabled(v68, type))
        goto LABEL_232;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
      v70 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_231;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v68 = __nwlog_obj();
    v69 = type;
    v100 = os_log_type_enabled(v68, type);
    if (backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v91 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
        goto LABEL_152;
      }
      goto LABEL_153;
    }
    if (!v100)
      goto LABEL_232;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
    v70 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_231;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
      v9 = *((_QWORD *)handle + 30);
      default_input_handler = a1->default_input_handler;
      *(_DWORD *)buf = 136448002;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = handle + 636;
      *(_WORD *)&buf[22] = 2080;
      v151 = (uint64_t)" ";
      LOWORD(v152) = 1024;
      *(_DWORD *)((char *)&v152 + 2) = v8;
      WORD3(v152) = 2048;
      *((_QWORD *)&v152 + 1) = v9;
      v153 = 2048;
      v154 = a1;
      v155 = 2048;
      v156 = default_input_handler;
      v157 = 2048;
      v158 = a2;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:s%llu> protocol %p, default_input_handler %p, input protocol %p", buf, 0x4Eu);
    }
  }
  v11 = handle + 736;
  nw_http_transaction_metadata_mark_end(*((void **)handle + 49));
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if ((*v11 & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v71 = __nwlog_obj();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        v72 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v73 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 636;
        *(_WORD *)&buf[22] = 2080;
        v151 = (uint64_t)" ";
        LOWORD(v152) = 1024;
        *(_DWORD *)((char *)&v152 + 2) = v72;
        WORD3(v152) = 2048;
        *((_QWORD *)&v152 + 1) = v73;
        _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  v12 = (unsigned __int16)*v11;
  if ((v12 & 0x10) != 0)
  {
    v13 = v12 & 0xFFFFFFEF | (handle[738] << 16);
    *v11 = v12 & 0xFFEF;
    handle[738] = BYTE2(v13);
    v14 = *((_QWORD *)handle + 12);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(void (**)(_QWORD, char *))(v15 + 32);
        if (v16)
        {
          v16(*((_QWORD *)handle + 12), handle + 64);
          goto LABEL_15;
        }
      }
      __nwlog_obj();
      v74 = *(const char **)(v14 + 16);
      if (!v74)
        v74 = "invalid";
    }
    else
    {
      __nwlog_obj();
      v74 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v74;
    type = OS_LOG_TYPE_ERROR;
    v92 = (char *)_os_log_send_and_compose_impl();
    v148 = 0;
    if (__nwlog_fault(v92, &type, &v148))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v93 = __nwlog_obj();
        v94 = type;
        v142 = v93;
        if (!os_log_type_enabled(v93, type))
          goto LABEL_172;
        v95 = "invalid";
        if (v14 && *(_QWORD *)(v14 + 16))
          v95 = *(const char **)(v14 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v95;
        v96 = "%{public}s protocol %{public}s has invalid disconnect callback";
LABEL_170:
        v112 = v142;
        v113 = v94;
LABEL_171:
        _os_log_impl(&dword_182FBE000, v112, v113, v96, buf, 0x16u);
        goto LABEL_172;
      }
      if (!v148)
      {
        v110 = __nwlog_obj();
        v94 = type;
        v142 = v110;
        if (!os_log_type_enabled(v110, type))
          goto LABEL_172;
        v111 = "invalid";
        if (v14 && *(_QWORD *)(v14 + 16))
          v111 = *(const char **)(v14 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v111;
        v96 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_170;
      }
      v97 = (char *)__nw_create_backtrace_string();
      v143 = __nwlog_obj();
      loga = type;
      v98 = os_log_type_enabled(v143, type);
      if (v97)
      {
        if (v98)
        {
          v99 = "invalid";
          if (v14 && *(_QWORD *)(v14 + 16))
            v99 = *(const char **)(v14 + 16);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v99;
          *(_WORD *)&buf[22] = 2082;
          v151 = (uint64_t)v97;
          _os_log_impl(&dword_182FBE000, v143, loga, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v97);
      }
      else if (v98)
      {
        v131 = "invalid";
        if (v14 && *(_QWORD *)(v14 + 16))
          v131 = *(const char **)(v14 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v131;
        v96 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
        v112 = v143;
        v113 = loga;
        goto LABEL_171;
      }
    }
LABEL_172:
    if (v92)
      free(v92);
    if (!v14)
    {
      __nwlog_obj();
      v75 = "invalid";
      goto LABEL_176;
    }
LABEL_15:
    v17 = *(_QWORD *)(v14 + 24);
    if (v17)
    {
      v18 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 8);
      if (v18)
      {
        v18(v14, handle + 64, 1);
LABEL_18:
        nw_protocol_set_output_handler((uint64_t)(handle + 64), 0);
        if ((*v11 & 0x800) == 0)
        {
          if (gLogDatapath)
          {
            v101 = __nwlog_obj();
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
            {
              v102 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
              v103 = *((_QWORD *)handle + 30);
              v104 = (nw_protocol *)*((_QWORD *)handle + 31);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = handle + 636;
              *(_WORD *)&buf[22] = 2080;
              v151 = (uint64_t)" ";
              LOWORD(v152) = 1024;
              *(_DWORD *)((char *)&v152 + 2) = v102;
              WORD3(v152) = 2048;
              *((_QWORD *)&v152 + 1) = v103;
              v153 = 2048;
              v154 = v104;
              _os_log_impl(&dword_182FBE000, v101, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Closed datagram flow %llu", buf, 0x3Au);
            }
          }
        }
        goto LABEL_20;
      }
    }
    __nwlog_obj();
    v75 = *(const char **)(v14 + 16);
    if (!v75)
      v75 = "invalid";
LABEL_176:
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v75;
    v114 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v115 = (char *)v114;
    v148 = 0;
    if (!__nwlog_fault(v114, &type, &v148))
      goto LABEL_198;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v116 = __nwlog_obj();
      v117 = type;
      v145 = v116;
      if (!os_log_type_enabled(v116, type))
        goto LABEL_198;
      v118 = "invalid";
      if (v14 && *(_QWORD *)(v14 + 16))
        v118 = *(const char **)(v14 + 16);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v118;
      v119 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
    }
    else
    {
      if (v148)
      {
        v120 = (char *)__nw_create_backtrace_string();
        v146 = __nwlog_obj();
        logb = type;
        v121 = os_log_type_enabled(v146, type);
        if (v120)
        {
          if (v121)
          {
            v122 = "invalid";
            if (v14 && *(_QWORD *)(v14 + 16))
              v122 = *(const char **)(v14 + 16);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v122;
            *(_WORD *)&buf[22] = 2082;
            v151 = (uint64_t)v120;
            _os_log_impl(&dword_182FBE000, v146, logb, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v120);
          goto LABEL_198;
        }
        if (!v121)
        {
LABEL_198:
          if (v115)
            free(v115);
          goto LABEL_18;
        }
        v132 = "invalid";
        if (v14 && *(_QWORD *)(v14 + 16))
          v132 = *(const char **)(v14 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v132;
        v119 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
        v125 = v146;
        v126 = logb;
LABEL_197:
        _os_log_impl(&dword_182FBE000, v125, v126, v119, buf, 0x16u);
        goto LABEL_198;
      }
      v123 = __nwlog_obj();
      v117 = type;
      v145 = v123;
      if (!os_log_type_enabled(v123, type))
        goto LABEL_198;
      v124 = "invalid";
      if (v14 && *(_QWORD *)(v14 + 16))
        v124 = *(const char **)(v14 + 16);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_stop_datagram_flow";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v124;
      v119 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
    }
    v125 = v145;
    v126 = v117;
    goto LABEL_197;
  }
LABEL_20:
  v19 = *((_QWORD *)handle + 42);
  if (!v19)
    goto LABEL_56;
  v20 = (_QWORD *)(v19 + 576);
  while (1)
  {
    v20 = (_QWORD *)*v20;
    if (!v20)
      break;
    if ((char *)v20[4] == handle)
    {
      v21 = *(FILE **)(v19 + 544);
      if (v21)
      {
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v21);
        fprintf(*(FILE **)(v19 + 544), "unreffed header block for stream %llu", v20[5]);
        fputc(10, *(FILE **)(v19 + 544));
      }
      v22 = (_QWORD *)*v20;
      v23 = (_QWORD *)v20[1];
      if (*v20)
      {
        v22[1] = v23;
        v23 = (_QWORD *)v20[1];
      }
      else
      {
        *(_QWORD *)(v19 + 584) = v23;
      }
      *v23 = v22;
      if ((v20[13] & 4) != 0)
      {
        v25 = v20[2];
        if (v25)
          *(_QWORD *)(v25 + 24) = v20[3];
        else
          *(_QWORD *)(v19 + 16 * (v20[8] & 7) + 600) = v20[3];
        *(_QWORD *)v20[3] = v25;
        --*(_DWORD *)(v19 + 720);
      }
      free(v20);
      goto LABEL_37;
    }
  }
  v24 = *(FILE **)(v19 + 544);
  if (v24)
  {
    fwrite("qdec: info: ", 0xCuLL, 1uLL, v24);
    fwrite("could not find header block to unref", 0x24uLL, 1uLL, *(FILE **)(v19 + 544));
    fputc(10, *(FILE **)(v19 + 544));
  }
LABEL_37:
  v26 = *((_QWORD *)handle + 42);
  if (v26)
  {
    if (((*(unsigned __int16 *)(v26 + 1373) | (*(unsigned __int8 *)(v26 + 1375) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v80 = __nwlog_obj();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
        {
          v81 = *(_DWORD *)(v26 + 1280);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v26 + 1289;
          *(_WORD *)&buf[22] = 2080;
          v151 = (uint64_t)" ";
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v81;
          _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }
    if (!*((_DWORD *)handle + 93))
    {
      v29 = *((_QWORD *)handle + 29);
      if (v29)
      {
        v30 = mach_continuous_approximate_time();
        v31 = v30 <= 1 ? 1 : v30;
        v32 = nw_delta_nanos(v29, v31);
        if (v32 > 1000000000
                 * networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_setup_threshold_seconds, 5))
        {
          v33 = (unsigned __int16)(*(_WORD *)(v26 + 1284))++ + 1;
          if ((v33 & 0x10000) != 0)
          {
            if (gLogDatapath)
            {
              v137 = __nwlog_obj();
              if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
              {
                v138 = *(unsigned __int16 *)(v26 + 1284);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http3->stream_stall_count";
                *(_WORD *)&buf[22] = 2048;
                v151 = 1;
                LOWORD(v152) = 2048;
                *(_QWORD *)((char *)&v152 + 2) = v138;
                _os_log_impl(&dword_182FBE000, v137, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
              }
            }
            *(_WORD *)(v26 + 1284) = -1;
          }
          if (((*(unsigned __int16 *)(v26 + 1373) | (*(unsigned __int8 *)(v26 + 1375) << 16)) & 0x400000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v35 = *(_DWORD *)(v26 + 1280);
              v36 = *(unsigned __int16 *)(v26 + 1284);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v26 + 1289;
              *(_WORD *)&buf[22] = 2080;
              v151 = (uint64_t)" ";
              LOWORD(v152) = 1024;
              *(_DWORD *)((char *)&v152 + 2) = v35;
              WORD3(v152) = 1024;
              DWORD2(v152) = v36;
              _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> stream setup stalls incremented to %u", buf, 0x2Cu);
            }
          }
        }
      }
    }
    v27 = *((_QWORD *)handle + 68);
    v28 = (_QWORD *)*((_QWORD *)handle + 69);
    if (v27)
    {
      *(_QWORD *)(v27 + 552) = v28;
      v28 = (_QWORD *)*((_QWORD *)handle + 69);
    }
    else
    {
      *(_QWORD *)(v26 + 888) = v28;
    }
    *v28 = v27;
    *((_QWORD *)handle + 68) = 0;
    *((_QWORD *)handle + 69) = 0;
    nw_protocol_http3_remove_input_handler((nw_protocol *)v26, *((nw_protocol **)handle + 6));
    goto LABEL_56;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
  v76 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v148 = 0;
  if (__nwlog_fault(v76, &type, &v148))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v77 = __nwlog_obj();
      v78 = type;
      if (!os_log_type_enabled(v77, type))
        goto LABEL_238;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
      v79 = "%{public}s called with null http3";
LABEL_236:
      v136 = v77;
LABEL_237:
      _os_log_impl(&dword_182FBE000, v136, v78, v79, buf, 0xCu);
      goto LABEL_238;
    }
    if (!v148)
    {
      v77 = __nwlog_obj();
      v78 = type;
      if (!os_log_type_enabled(v77, type))
        goto LABEL_238;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
      v79 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_236;
    }
    v107 = (char *)__nw_create_backtrace_string();
    v108 = __nwlog_obj();
    v78 = type;
    v144 = v108;
    v109 = os_log_type_enabled(v108, type);
    if (v107)
    {
      if (v109)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v107;
        _os_log_impl(&dword_182FBE000, v144, v78, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v107);
      goto LABEL_238;
    }
    if (v109)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_remove_stream";
      v79 = "%{public}s called with null http3, no backtrace";
      v136 = v144;
      goto LABEL_237;
    }
  }
LABEL_238:
  if (v76)
    free(v76);
LABEL_56:
  *((_QWORD *)handle + 20) = 0;
  *((_QWORD *)handle + 21) = 0;
  if (a1->default_input_handler != a2)
    return 0;
  v147 = a3;
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  if (gLogDatapath)
  {
    v105 = __nwlog_obj();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_182FBE000, v105, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  v38 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60151;
  v151 = (uint64_t)&__block_descriptor_tmp_26_60152;
  *(_QWORD *)&v152 = handle + 216;
  BYTE8(v152) = 0;
  v39 = *((_QWORD *)handle + 27);
  do
  {
    if (!v39)
      break;
    v40 = *(_QWORD *)(v39 + 32);
    v41 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    v39 = v40;
  }
  while ((v41 & 1) != 0);
  v42 = *((_QWORD *)handle + 22);
  while (v42)
  {
    v43 = (_DWORD *)v42;
    v42 = *(_QWORD *)(v42 + 32);
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        v44 = nw_frame_unclaimed_length(v43);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http3_framer_cleanup_block_invoke";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v43;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v151) = v44;
        _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s input frames unprocessed still has frames in it: frame %p (%u bytes)", buf, 0x1Cu);
      }
    }
  }
  if (gLogDatapath)
  {
    v106 = __nwlog_obj();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  *(_QWORD *)buf = v38;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60151;
  v151 = (uint64_t)&__block_descriptor_tmp_26_60152;
  *(_QWORD *)&v152 = handle + 176;
  BYTE8(v152) = 0;
  v45 = *((_QWORD *)handle + 22);
  do
  {
    if (!v45)
      break;
    v46 = *(_QWORD *)(v45 + 32);
    v47 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    v45 = v46;
  }
  while ((v47 & 1) != 0);
  *((_DWORD *)handle + 48) = 0;
  v48 = *((_QWORD *)handle + 47);
  v49 = v147;
  if (v48)
  {
    nw_frame_finalize(v48);
    *((_QWORD *)handle + 47) = 0;
  }
  if (*((_QWORD *)handle + 66) || handle[634] || handle[635])
  {
    v50 = *((_QWORD *)handle + 42);
    if ((*(_WORD *)(v50 + 1373) & 8) == 0 && (*v11 & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v51 = gLogObj;
      v52 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      v50 = *((_QWORD *)handle + 42);
      if (v52)
      {
        v53 = *(_DWORD *)(v50 + 1280);
        v54 = *((_QWORD *)handle + 30);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 636;
        *(_WORD *)&buf[22] = 2080;
        v151 = (uint64_t)" ";
        LOWORD(v152) = 1024;
        *(_DWORD *)((char *)&v152 + 2) = v53;
        WORD3(v152) = 2048;
        *((_QWORD *)&v152 + 1) = v54;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> cancelled while sending data on uni streams", buf, 0x30u);
        v50 = *((_QWORD *)handle + 42);
      }
    }
    nw_http3_fail_all_streams((nw_protocol *)v50, 258);
  }
  output_handler = a1->output_handler;
  if (!output_handler
    || (callbacks = output_handler->callbacks) == 0
    || (remove_input_handler = (void (*)(nw_protocol *, nw_protocol *))callbacks->remove_input_handler) == 0)
  {
    __nwlog_obj();
    v58 = a1->output_handler;
    v59 = "invalid";
    if (v58)
    {
      identifier = v58->identifier;
      if (identifier)
        v59 = (const char *)identifier;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v59;
    v61 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v148 = 0;
    if (!__nwlog_fault(v61, &type, &v148))
      goto LABEL_225;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v62 = __nwlog_obj();
      v63 = type;
      if (os_log_type_enabled(v62, type))
      {
        v64 = a1->output_handler;
        v65 = "invalid";
        if (v64)
        {
          v66 = v64->identifier;
          if (v66)
            v65 = (const char *)v66;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v65;
        _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s protocol %{public}s has invalid remove_input_handler callback", buf, 0x16u);
      }
      goto LABEL_225;
    }
    if (v148)
    {
      v82 = (char *)__nw_create_backtrace_string();
      v83 = __nwlog_obj();
      v84 = type;
      v85 = os_log_type_enabled(v83, type);
      if (v82)
      {
        if (v85)
        {
          v86 = a1->output_handler;
          v87 = "invalid";
          if (v86)
          {
            v88 = v86->identifier;
            if (v88)
              v87 = (const char *)v88;
          }
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v87;
          *(_WORD *)&buf[22] = 2082;
          v151 = (uint64_t)v82;
          _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
          v49 = v147;
        }
        free(v82);
        goto LABEL_225;
      }
      if (!v85)
      {
LABEL_225:
        if (v61)
          free(v61);
        goto LABEL_85;
      }
      v133 = a1->output_handler;
      v134 = "invalid";
      if (v133)
      {
        v135 = v133->identifier;
        if (v135)
          v134 = (const char *)v135;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v134;
      v130 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
    }
    else
    {
      v83 = __nwlog_obj();
      v84 = type;
      if (!os_log_type_enabled(v83, type))
        goto LABEL_225;
      v127 = a1->output_handler;
      v128 = "invalid";
      if (v127)
      {
        v129 = v127->identifier;
        if (v129)
          v128 = (const char *)v129;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v128;
      v130 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v83, v84, v130, buf, 0x16u);
    v49 = v147;
    goto LABEL_225;
  }
  remove_input_handler(output_handler, a1);
LABEL_85:
  nw_protocol_set_output_handler((uint64_t)a1, 0);
  if (v49)
  {
    a1->handle = 0;
    nw_protocol_http3_stream_destroy((uint64_t)handle);
  }
  return 1;
}

uint64_t nw_protocol_http3_stream_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  _QWORD *handle;
  nw_protocol *default_input_handler;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  nw_protocol *v11;
  const char *v12;
  uint64_t v13;
  char *v15;
  _BOOL4 v16;
  nw_protocol *v17;
  nw_protocol *v18;
  nw_protocol *v19;
  char *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  nw_protocol *v36;
  __int16 v37;
  nw_protocol *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v21, &type, &v31))
      goto LABEL_83;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v31)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_http3_stream_replace_input_handler";
          v24 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v26 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_http3_stream_replace_input_handler";
          v24 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      if (!v26)
        goto LABEL_65;
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_http3_stream_replace_input_handler";
      v35 = 2082;
      v36 = (nw_protocol *)backtrace_string;
      v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
    v22 = __nwlog_obj();
    v23 = type;
    if (!os_log_type_enabled(v22, type))
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v24 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
    goto LABEL_83;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v21, &type, &v31))
      goto LABEL_83;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v31)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_http3_stream_replace_input_handler";
          v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v28 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_protocol_http3_stream_replace_input_handler";
          v24 = "%{public}s called with null http3_stream, no backtrace";
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      if (!v28)
        goto LABEL_65;
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_http3_stream_replace_input_handler";
      v35 = 2082;
      v36 = (nw_protocol *)backtrace_string;
      v27 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
    v22 = __nwlog_obj();
    v23 = type;
    if (!os_log_type_enabled(v22, type))
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v24 = "%{public}s called with null http3_stream";
    goto LABEL_82;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v21, &type, &v31))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_http3_stream_replace_input_handler";
      v24 = "%{public}s called with null old_input_handler";
      goto LABEL_82;
    }
    if (!v31)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_http3_stream_replace_input_handler";
        v24 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v29 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_http3_stream_replace_input_handler";
        v24 = "%{public}s called with null old_input_handler, no backtrace";
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    if (!v29)
      goto LABEL_65;
    *(_DWORD *)buf = 136446466;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v35 = 2082;
    v36 = (nw_protocol *)backtrace_string;
    v27 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_64:
    _os_log_impl(&dword_182FBE000, v22, v23, v27, buf, 0x16u);
    goto LABEL_65;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v21, &type, &v31))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_http3_stream_replace_input_handler";
        v24 = "%{public}s called with null new_input_handler";
        goto LABEL_82;
      }
LABEL_83:
      if (!v21)
        return 0;
      v20 = (char *)v21;
      goto LABEL_29;
    }
    if (!v31)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_http3_stream_replace_input_handler";
        v24 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v30 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_http3_stream_replace_input_handler";
        v24 = "%{public}s called with null new_input_handler, no backtrace";
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_http3_stream_replace_input_handler";
      v35 = 2082;
      v36 = (nw_protocol *)backtrace_string;
      v27 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
LABEL_65:
    free(backtrace_string);
    goto LABEL_83;
  }
  if (a1->default_input_handler == a2)
  {
    nw_protocol_set_input_handler((uint64_t)a1->handle, (uint64_t)a3);
    nw_protocol_set_input_handler((uint64_t)(handle + 8), (uint64_t)a3);
    v13 = handle[42];
    if (v13 && *(nw_protocol **)(v13 + 48) == a2)
    {
      nw_protocol_set_input_handler(v13, (uint64_t)a3);
      if (a3->output_handler)
        return 1;
    }
    else if (a3->output_handler)
    {
      return 1;
    }
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  default_input_handler = a1->default_input_handler;
  *(_DWORD *)buf = 136446722;
  v34 = "nw_protocol_http3_stream_replace_input_handler";
  v35 = 2048;
  v36 = default_input_handler;
  v37 = 2048;
  v38 = a2;
  v8 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (!__nwlog_fault(v8, &type, &v31))
    goto LABEL_27;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_27;
    v11 = a1->default_input_handler;
    *(_DWORD *)buf = 136446722;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v35 = 2048;
    v36 = v11;
    v37 = 2048;
    v38 = a2;
    v12 = "%{public}s Old input handler does not match (%p != %p)";
LABEL_26:
    _os_log_impl(&dword_182FBE000, v9, v10, v12, buf, 0x20u);
    goto LABEL_27;
  }
  if (!v31)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_27;
    v18 = a1->default_input_handler;
    *(_DWORD *)buf = 136446722;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v35 = 2048;
    v36 = v18;
    v37 = 2048;
    v38 = a2;
    v12 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
    goto LABEL_26;
  }
  v15 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  v10 = type;
  v16 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v15)
  {
    if (!v16)
      goto LABEL_27;
    v19 = a1->default_input_handler;
    *(_DWORD *)buf = 136446722;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v35 = 2048;
    v36 = v19;
    v37 = 2048;
    v38 = a2;
    v12 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
    goto LABEL_26;
  }
  if (v16)
  {
    v17 = a1->default_input_handler;
    *(_DWORD *)buf = 136446978;
    v34 = "nw_protocol_http3_stream_replace_input_handler";
    v35 = 2048;
    v36 = v17;
    v37 = 2048;
    v38 = a2;
    v39 = 2082;
    v40 = v15;
    _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v15);
LABEL_27:
  if (v8)
  {
    v20 = (char *)v8;
LABEL_29:
    free(v20);
  }
  return 0;
}

void nw_protocol_http3_stream_output_available(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *handle;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  NSObject *v6;
  int v7;
  uint64_t v8;
  int is_metadata_complete;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  char *backtrace_string;
  _BOOL4 v29;
  char *v30;
  _BOOL4 v31;
  char *v32;
  _BOOL4 v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  const char *v44;
  char v45;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_http3_stream_output_available";
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v21, &type, &v45))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_stream_output_available";
      v24 = "%{public}s called with null protocol";
      goto LABEL_65;
    }
    if (!v45)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_stream_output_available";
      v24 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v29 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v29)
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_stream_output_available";
      v24 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_65;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_stream_output_available";
      v49 = 2082;
      v50 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_66:
    if (!v21)
      return;
    goto LABEL_67;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_http3_stream_output_available";
    v21 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v21, &type, &v45))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_stream_output_available";
      v24 = "%{public}s called with null http3_stream";
      goto LABEL_65;
    }
    if (!v45)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_stream_output_available";
      v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_65;
    }
    v30 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v31 = os_log_type_enabled(v22, type);
    if (v30)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v48 = "nw_protocol_http3_stream_output_available";
        v49 = 2082;
        v50 = v30;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v30);
      if (!v21)
        return;
LABEL_67:
      v37 = (char *)v21;
LABEL_68:
      free(v37);
      return;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_stream_output_available";
      v24 = "%{public}s called with null http3_stream, no backtrace";
LABEL_65:
      _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
      goto LABEL_66;
    }
    goto LABEL_66;
  }
  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_DWORD *)(handle[42] + 1280);
        v27 = handle[30];
        *(_DWORD *)buf = 136447234;
        v48 = "nw_protocol_http3_stream_output_available";
        v49 = 2082;
        v50 = (char *)handle + 636;
        v51 = 2080;
        v52 = " ";
        v53 = 1024;
        v54 = v26;
        v55 = 2048;
        v56 = v27;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }
  switch(*((_DWORD *)handle + 92))
  {
    case 0:
      if ((handle[92] & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v7 = *(_DWORD *)(handle[42] + 1280);
          v8 = handle[30];
          *(_DWORD *)buf = 136447234;
          v48 = "nw_protocol_http3_stream_output_available";
          v49 = 2082;
          v50 = (char *)handle + 636;
          v51 = 2080;
          v52 = " ";
          v53 = 1024;
          v54 = v7;
          v55 = 2048;
          v56 = v8;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> output_available before get_output_frames", buf, 0x30u);
        }
      }
      return;
    case 1:
    case 3:
    case 5:
      nw_http3_stream_send_pending_capsules((uint64_t)handle);
      v3 = handle[6];
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 24);
        if (v4)
        {
          v5 = *(void (**)(void))(v4 + 72);
          if (v5)
            goto LABEL_9;
        }
      }
      return;
    case 2:
      is_metadata_complete = nw_frame_is_metadata_complete(handle[48]);
      if (!nw_http3_stream_send_fields((uint64_t)handle, is_metadata_complete))
        return;
      v10 = handle[6];
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 24);
        if (v11)
        {
          v5 = *(void (**)(void))(v11 + 72);
          if (v5)
          {
LABEL_9:
            v5();
            return;
          }
        }
      }
      __nwlog_obj();
      v12 = handle[6];
      v13 = "invalid";
      if (v12)
      {
        v14 = *(const char **)(v12 + 16);
        if (v14)
          v13 = v14;
      }
      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_stream_output_available";
      v49 = 2082;
      v50 = (char *)v13;
      type = OS_LOG_TYPE_ERROR;
      v45 = 0;
      v44 = (const char *)_os_log_send_and_compose_impl();
      if (!__nwlog_fault(v44, &type, &v45))
        goto LABEL_80;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_80;
        v17 = handle[6];
        v18 = "invalid";
        if (v17)
        {
          v19 = *(const char **)(v17 + 16);
          if (v19)
            v18 = v19;
        }
        *(_DWORD *)buf = 136446466;
        v48 = "nw_protocol_http3_stream_output_available";
        v49 = 2082;
        v50 = (char *)v18;
        v20 = "%{public}s protocol %{public}s has invalid output_available callback";
LABEL_79:
        _os_log_impl(&dword_182FBE000, v15, v16, v20, buf, 0x16u);
        goto LABEL_80;
      }
      if (!v45)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (!os_log_type_enabled(v15, type))
          goto LABEL_80;
        v38 = handle[6];
        v39 = "invalid";
        if (v38)
        {
          v40 = *(const char **)(v38 + 16);
          if (v40)
            v39 = v40;
        }
        *(_DWORD *)buf = 136446466;
        v48 = "nw_protocol_http3_stream_output_available";
        v49 = 2082;
        v50 = (char *)v39;
        v20 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
        goto LABEL_79;
      }
      v32 = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v33 = os_log_type_enabled(v15, type);
      if (!v32)
      {
        if (!v33)
          goto LABEL_80;
        v41 = handle[6];
        v42 = "invalid";
        if (v41)
        {
          v43 = *(const char **)(v41 + 16);
          if (v43)
            v42 = v43;
        }
        *(_DWORD *)buf = 136446466;
        v48 = "nw_protocol_http3_stream_output_available";
        v49 = 2082;
        v50 = (char *)v42;
        v20 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
        goto LABEL_79;
      }
      if (v33)
      {
        v34 = handle[6];
        v35 = "invalid";
        if (v34)
        {
          v36 = *(const char **)(v34 + 16);
          if (v36)
            v35 = v36;
        }
        *(_DWORD *)buf = 136446722;
        v48 = "nw_protocol_http3_stream_output_available";
        v49 = 2082;
        v50 = (char *)v35;
        v51 = 2082;
        v52 = v32;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v32);
LABEL_80:
      v37 = (char *)v44;
      if (v44)
        goto LABEL_68;
      break;
    default:
      return;
  }
}

uint64_t nw_protocol_http3_stream_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  char *handle;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  nw_frame **v18;
  int input_frames;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  nw_frame **tqh_last;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  os_log_type_t v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  char *backtrace_string;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  char *v62;
  char *v63;
  NSObject *v64;
  uint64_t v65;
  NSObject *metadata_for_capsule;
  nw_frame **v67;
  NSObject *v68;
  NSObject *v69;
  char *v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  const char *v84;
  NSObject *v85;
  int v86;
  uint64_t v87;
  char *v88;
  _BOOL4 v89;
  const char *v90;
  _BOOL4 v91;
  NSObject *v92;
  int v93;
  uint64_t v94;
  int v95;
  NSObject *v96;
  int v97;
  uint64_t v98;
  NSObject *log;
  uint64_t *v100;
  _QWORD v105[6];
  _QWORD v106[2];
  BOOL (*v107)(uint64_t, uint64_t);
  void *v108;
  uint64_t *v109;
  os_log_type_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  nw_frame_array_s *v114;
  int v115;
  char v116;
  char v117;
  os_log_type_t type;
  _QWORD v119[2];
  uint64_t (*v120)(_QWORD *);
  void *v121;
  _QWORD *v122;
  uint64_t *v123;
  os_log_type_t *v124;
  char *v125;
  nw_protocol *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[3];
  __int16 v132;
  _QWORD v133[2];
  BOOL (*v134)(uint64_t, uint64_t);
  void *v135;
  uint64_t *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  __int16 v157;
  _QWORD v158[3];
  __int16 v159;
  _QWORD v160[4];
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  os_log_type_t v165[8];
  os_log_type_t *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  uint8_t buf[4];
  const char *v173;
  __int16 v174;
  char *v175;
  __int16 v176;
  const char *v177;
  __int16 v178;
  int v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  _BYTE v183[30];
  __int16 v184;
  int v185;
  _QWORD v186[5];

  v186[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if ((*((_WORD *)handle + 368) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v85 = __nwlog_obj();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
          {
            v86 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
            v87 = *((_QWORD *)handle + 30);
            *(_DWORD *)buf = 136447234;
            v173 = "nw_protocol_http3_stream_get_input_frames";
            v174 = 2082;
            v175 = handle + 636;
            v176 = 2080;
            v177 = " ";
            v178 = 1024;
            v179 = v86;
            v180 = 2048;
            v181 = v87;
            _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
          }
        }
      }
      v8 = 0;
      v9 = handle + 736;
      switch(*((_DWORD *)handle + 93))
      {
        case 0:
        case 1:
        case 5:
          v10 = a3 + 1;
          v11 = v10 << 31 >> 31;
          if (v11 >= 0 && v11 == v10)
            v13 = a3 + 1;
          else
            v13 = -1;
          v14 = a4 + 0x20000;
          v15 = v14 << 31 >> 31;
          if (v15 < 0 || v15 != v14)
            LODWORD(v14) = -1;
          a3 = v13;
          a4 = v14;
          goto LABEL_19;
        case 2:
        case 3:
        case 6:
        case 7:
          return v8;
        case 4:
          goto LABEL_19;
        case 8:
          v29 = *((_QWORD *)handle + 47);
          if (v29)
          {
            *(_QWORD *)(v29 + 32) = 0;
            tqh_last = a6->tqh_last;
            *(_QWORD *)(v29 + 40) = tqh_last;
            *tqh_last = (nw_frame *)v29;
            a6->tqh_last = (nw_frame **)(v29 + 32);
            *((_QWORD *)handle + 47) = 0;
            return 1;
          }
          v8 = 0;
          v100 = (uint64_t *)(handle + 216);
          v31 = "nw_protocol_http3_stream_get_input_frames";
          break;
        default:
          a3 = 0;
          a4 = 0;
LABEL_19:
          *(_QWORD *)v165 = 0;
          v166 = v165;
          LODWORD(v168) = 0;
          v167 = 0x2000000000;
          v17 = *((_QWORD *)handle + 47);
          if (v17)
          {
            *(_QWORD *)(v17 + 32) = 0;
            v18 = a6->tqh_last;
            *(_QWORD *)(v17 + 40) = v18;
            *v18 = (nw_frame *)v17;
            a6->tqh_last = (nw_frame **)(v17 + 32);
            ++*((_DWORD *)v166 + 6);
            *((_QWORD *)handle + 47) = 0;
          }
          v161 = 0;
          v162 = &v161;
          v164 = 0;
          v163 = 0x2000000000;
          do
          {
            v160[0] = -1;
            v158[0] = 0;
            LOBYTE(v150) = 0;
            LODWORD(v154) = 0;
            input_frames = nw_http3_framer_get_input_frames((uint64_t)(handle + 128), a3, a4, a5, v160, v158, &v150, (uint64_t)&v154, (uint64_t)(handle + 216));
            if ((*v9 & 0x800) == 0)
            {
              if (gLogDatapath)
              {
                log = __nwlog_obj();
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
                {
                  v23 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
                  v24 = *((_QWORD *)handle + 30);
                  v25 = *((_DWORD *)handle + 93);
                  *(_DWORD *)buf = 136448514;
                  v173 = "nw_protocol_http3_stream_get_input_frames";
                  v174 = 2082;
                  v175 = handle + 636;
                  v176 = 2080;
                  v177 = " ";
                  v178 = 1024;
                  v179 = v23;
                  v180 = 2048;
                  v181 = v24;
                  v182 = 1024;
                  *(_DWORD *)v183 = input_frames;
                  *(_WORD *)&v183[4] = 1024;
                  *(_DWORD *)&v183[6] = v25;
                  *(_WORD *)&v183[10] = 2048;
                  *(_QWORD *)&v183[12] = v160[0];
                  *(_WORD *)&v183[20] = 2048;
                  *(_QWORD *)&v183[22] = v158[0];
                  v184 = 1024;
                  v185 = v150;
                  _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> read %u input frames, state %u type %llx length %llu complete %u", buf, 0x56u);
                }
              }
            }
            if (!input_frames)
              break;
            v106[0] = MEMORY[0x1E0C809B0];
            v106[1] = 0x40000000;
            v107 = ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_148;
            v108 = &unk_1E14A84B0;
            v111 = handle;
            v112 = v160[0];
            v116 = v150;
            v115 = v154;
            v113 = v158[0];
            v114 = a6;
            v109 = &v161;
            v110 = v165;
            v20 = *((_QWORD *)handle + 27);
            do
            {
              if (!v20)
                break;
              v21 = *(_QWORD *)(v20 + 32);
              v22 = ((uint64_t (*)(_QWORD *))v107)(v106);
              v20 = v21;
            }
            while ((v22 & 1) != 0);
          }
          while (!*((_DWORD *)v166 + 6) && !*((_DWORD *)v162 + 6));
          if ((*v9 & 0x800) == 0)
          {
            if (gLogDatapath)
            {
              v92 = __nwlog_obj();
              if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
              {
                v93 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
                v94 = *((_QWORD *)handle + 30);
                v95 = *((_DWORD *)v166 + 6);
                *(_DWORD *)buf = 136447490;
                v173 = "nw_protocol_http3_stream_get_input_frames";
                v174 = 2082;
                v175 = handle + 636;
                v176 = 2080;
                v177 = " ";
                v178 = 1024;
                v179 = v93;
                v180 = 2048;
                v181 = v94;
                v182 = 1024;
                *(_DWORD *)v183 = v95;
                _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> returning %u input frames", buf, 0x36u);
              }
            }
          }
          if ((*v9 & 0x100) != 0 && (*((_DWORD *)handle + 93) | 4) != 6)
          {
            v26 = *((_QWORD *)handle + 41);
            v27 = *(void **)(*((_QWORD *)handle + 42) + 1256);
            v105[0] = MEMORY[0x1E0C809B0];
            v105[1] = 0x40000000;
            v105[2] = ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_150;
            v105[3] = &unk_1E14A84D8;
            v105[4] = v26;
            v105[5] = handle;
            nw_queue_context_async(v27, v105);
          }
          v8 = *((unsigned int *)v166 + 6);
          _Block_object_dispose(&v161, 8);
          _Block_object_dispose(v165, 8);
          return v8;
      }
      while (1)
      {
        v170 = 0;
        v171 = -1;
        v169 = 0;
        v32 = nw_http3_framer_get_input_frames((uint64_t)(handle + 128), 1u, 0xFFFFFFFF, 0xFFFFFFFF, &v171, &v170, &v169, 0, (uint64_t)v100);
        if ((*v9 & 0x800) == 0)
        {
          if (gLogDatapath)
          {
            v71 = __nwlog_obj();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
            {
              v72 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
              v73 = *((_QWORD *)handle + 30);
              *(_DWORD *)buf = 136448258;
              v173 = v31;
              v174 = 2082;
              v175 = handle + 636;
              v176 = 2080;
              v177 = " ";
              v178 = 1024;
              v179 = v72;
              v180 = 2048;
              v181 = v73;
              v182 = 1024;
              *(_DWORD *)v183 = v32;
              *(_WORD *)&v183[4] = 2048;
              *(_QWORD *)&v183[6] = v171;
              *(_WORD *)&v183[14] = 2048;
              *(_QWORD *)&v183[16] = v170;
              *(_WORD *)&v183[24] = 1024;
              *(_DWORD *)&v183[26] = v169;
              _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> read %u input frames on capsule stream, type %llx length %llu complete %u", buf, 0x50u);
            }
          }
        }
        if (!v32)
        {
          if (a5 > v8)
          {
            v79 = *((_QWORD *)handle + 12);
            if (v79)
            {
              v80 = (*(uint64_t (**)(void))(*(_QWORD *)(v79 + 24) + 80))();
              if ((*v9 & 0x800) == 0)
              {
                if (gLogDatapath)
                {
                  v96 = __nwlog_obj();
                  if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
                  {
                    v97 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
                    v98 = *((_QWORD *)handle + 30);
                    *(_DWORD *)buf = 136447490;
                    v173 = v31;
                    v174 = 2082;
                    v175 = handle + 636;
                    v176 = 2080;
                    v177 = " ";
                    v178 = 1024;
                    v179 = v97;
                    v180 = 2048;
                    v181 = v98;
                    v182 = 1024;
                    *(_DWORD *)v183 = v80;
                    _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> read %u input datagrams", buf, 0x36u);
                  }
                }
              }
              return (v80 + v8);
            }
          }
          return v8;
        }
        if (v169)
          break;
LABEL_44:
        if (v8 >= a5)
          return v8;
      }
      *(_QWORD *)v165 = 0;
      v166 = v165;
      v167 = 0x2000000000;
      v168 = 0;
      v161 = 0;
      v162 = &v161;
      v163 = 0x2000000000;
      LOBYTE(v164) = 0;
      v186[0] = 0;
      v186[1] = 0;
      v160[0] = 0;
      v160[1] = v160;
      v160[2] = 0x2000000000;
      v160[3] = v186;
      v158[0] = 0;
      v158[1] = v158;
      v158[2] = 0x2000000000;
      v159 = 0;
      v154 = 0;
      v155 = &v154;
      v156 = 0x2000000000;
      v157 = 0;
      v150 = 0;
      v151 = &v150;
      v152 = 0x2000000000;
      v153 = -1;
      v146 = 0;
      v147 = &v146;
      v148 = 0x2000000000;
      v149 = 0;
      v133[0] = MEMORY[0x1E0C809B0];
      v133[1] = 0x40000000;
      v134 = ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      v135 = &unk_1E14A8460;
      v136 = &v161;
      v142 = handle;
      v143 = v171;
      v144 = v170;
      v145 = 1;
      v137 = v158;
      v138 = v160;
      v139 = &v150;
      v140 = &v154;
      v141 = &v146;
      v33 = *((_QWORD *)handle + 27);
      do
      {
        if (!v33)
          break;
        v34 = *(_QWORD *)(v33 + 32);
        v35 = v134((uint64_t)v133, v33);
        v33 = v34;
      }
      while (v35);
      if (!*((_BYTE *)v162 + 24))
      {
LABEL_88:
        if (*((_QWORD *)v166 + 3))
        {
          v65 = nw_frame_create(0, 0, 0, (uint64_t)nw_protocol_http3_capsule_frame_finalizer, 0);
          metadata_for_capsule = nw_http_create_metadata_for_capsule(v151[3], *((void **)v166 + 3));
          nw_frame_set_metadata(v65, metadata_for_capsule, 1, 1);
          if (metadata_for_capsule)
            os_release(metadata_for_capsule);
          *(_QWORD *)(v65 + 32) = 0;
          v67 = a6->tqh_last;
          *(_QWORD *)(v65 + 40) = v67;
          *v67 = (nw_frame *)v65;
          a6->tqh_last = (nw_frame **)(v65 + 32);
          v68 = *((_QWORD *)v166 + 3);
          if (v68)
          {
            dispatch_release(v68);
            *((_QWORD *)v166 + 3) = 0;
          }
          v8 = (v8 + 1);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v69 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v70 = (char *)v151[3];
            *(_DWORD *)buf = 136446466;
            v173 = v31;
            v174 = 2048;
            v175 = v70;
            _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_INFO, "%{public}s Receiving capsule type 0x%llx", buf, 0x16u);
          }
        }
        _Block_object_dispose(&v146, 8);
        _Block_object_dispose(&v150, 8);
        _Block_object_dispose(&v154, 8);
        _Block_object_dispose(v158, 8);
        _Block_object_dispose(v160, 8);
        _Block_object_dispose(&v161, 8);
        _Block_object_dispose(v165, 8);
        goto LABEL_44;
      }
      v36 = 0;
      v37 = *((_DWORD *)v147 + 6) + *((unsigned __int16 *)v155 + 12);
      v38 = *v100;
      while (v38)
      {
        v42 = *(_DWORD *)(v38 + 52);
        if (v42)
          v42 -= *(_DWORD *)(v38 + 56) + *(_DWORD *)(v38 + 60);
        v38 = *(_QWORD *)(v38 + 32);
        v39 = __CFADD__(v36, v42);
        v40 = v36 + v42;
        v36 += v42;
        if (v39)
          v41 = -1;
        else
          v41 = v40;
        if (v41 >= v37)
          goto LABEL_62;
      }
      if (v36 < v37)
        goto LABEL_88;
LABEL_62:
      v131[0] = 0;
      v131[1] = v131;
      v131[2] = 0x2000000000;
      v132 = 0;
      v132 = *((_WORD *)v155 + 12);
      v127 = 0;
      v128 = &v127;
      v129 = 0x2000000000;
      v130 = 0;
      v130 = v147[3];
      if ((*v9 & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v74 = __nwlog_obj();
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            v75 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
            v76 = *((_QWORD *)handle + 30);
            v77 = v151[3];
            v78 = v147[3];
            *(_DWORD *)buf = 136447746;
            v173 = v31;
            v174 = 2082;
            v175 = handle + 636;
            v176 = 2080;
            v177 = " ";
            v178 = 1024;
            v179 = v75;
            v180 = 2048;
            v181 = v76;
            v182 = 2048;
            *(_QWORD *)v183 = v77;
            *(_WORD *)&v183[8] = 2048;
            *(_QWORD *)&v183[10] = v78;
            _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> Receiving capsule type 0x%llx length %llu", buf, 0x44u);
          }
        }
      }
      v119[0] = MEMORY[0x1E0C809B0];
      v119[1] = 0x40000000;
      v120 = (uint64_t (*)(_QWORD *))___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_146;
      v121 = &unk_1E14A8488;
      v125 = handle;
      v126 = a1;
      v122 = v131;
      v123 = &v127;
      v124 = v165;
      v43 = *((_QWORD *)handle + 27);
      do
      {
        if (!v43)
          break;
        v44 = *(_QWORD *)(v43 + 32);
        v45 = v120(v119);
        v43 = v44;
      }
      while ((v45 & 1) != 0);
      if (!*((_QWORD *)v166 + 3) || !v128[3])
      {
LABEL_87:
        _Block_object_dispose(&v127, 8);
        _Block_object_dispose(v131, 8);
        goto LABEL_88;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v46 = (char *)v128[3];
      *(_DWORD *)buf = 136446466;
      v47 = v31;
      v173 = v31;
      v174 = 2048;
      v175 = v46;
      v48 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v117 = 0;
      if (__nwlog_fault(v48, &type, &v117))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v49 = gLogObj;
          v50 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v51 = (char *)v128[3];
            *(_DWORD *)buf = 136446466;
            v173 = v31;
            v174 = 2048;
            v175 = v51;
            v52 = v49;
            v53 = v50;
            v54 = "%{public}s Read capsule data, but still have remaining length %llu";
LABEL_82:
            _os_log_impl(&dword_182FBE000, v52, v53, v54, buf, 0x16u);
          }
        }
        else if (v117)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v56 = __nwlog_obj();
          v57 = type;
          v58 = os_log_type_enabled(v56, type);
          if (backtrace_string)
          {
            if (v58)
            {
              v59 = (char *)v128[3];
              *(_DWORD *)buf = 136446722;
              v173 = v47;
              v174 = 2048;
              v175 = v59;
              v176 = 2082;
              v177 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s Read capsule data, but still have remaining length %llu, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(backtrace_string);
            goto LABEL_83;
          }
          if (v58)
          {
            v63 = (char *)v128[3];
            *(_DWORD *)buf = 136446466;
            v173 = v47;
            v174 = 2048;
            v175 = v63;
            v52 = v56;
            v53 = v57;
            v54 = "%{public}s Read capsule data, but still have remaining length %llu, no backtrace";
            goto LABEL_82;
          }
        }
        else
        {
          v60 = __nwlog_obj();
          v61 = type;
          if (os_log_type_enabled(v60, type))
          {
            v62 = (char *)v128[3];
            *(_DWORD *)buf = 136446466;
            v173 = v31;
            v174 = 2048;
            v175 = v62;
            v52 = v60;
            v53 = v61;
            v54 = "%{public}s Read capsule data, but still have remaining length %llu, backtrace limit exceeded";
            goto LABEL_82;
          }
        }
      }
LABEL_83:
      if (v48)
        free(v48);
      v64 = *((_QWORD *)v166 + 3);
      v31 = v47;
      if (v64)
      {
        dispatch_release(v64);
        *((_QWORD *)v166 + 3) = 0;
      }
      goto LABEL_87;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v173 = "nw_protocol_http3_stream_get_input_frames";
    v81 = (char *)_os_log_send_and_compose_impl();
    v165[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v161) = 0;
    if (!__nwlog_fault(v81, v165, &v161))
      goto LABEL_135;
    if (v165[0] == OS_LOG_TYPE_FAULT)
    {
      v82 = __nwlog_obj();
      v83 = v165[0];
      if (os_log_type_enabled(v82, v165[0]))
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_protocol_http3_stream_get_input_frames";
        v84 = "%{public}s called with null http3_stream";
        goto LABEL_134;
      }
      goto LABEL_135;
    }
    if (!(_BYTE)v161)
    {
      v82 = __nwlog_obj();
      v83 = v165[0];
      if (os_log_type_enabled(v82, v165[0]))
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_protocol_http3_stream_get_input_frames";
        v84 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_134;
      }
      goto LABEL_135;
    }
    v88 = (char *)__nw_create_backtrace_string();
    v82 = __nwlog_obj();
    v83 = v165[0];
    v91 = os_log_type_enabled(v82, v165[0]);
    if (!v88)
    {
      if (v91)
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_protocol_http3_stream_get_input_frames";
        v84 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_134;
      }
      goto LABEL_135;
    }
    if (v91)
    {
      *(_DWORD *)buf = 136446466;
      v173 = "nw_protocol_http3_stream_get_input_frames";
      v174 = 2082;
      v175 = v88;
      v90 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_122;
    }
    goto LABEL_123;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v173 = "nw_protocol_http3_stream_get_input_frames";
  v81 = (char *)_os_log_send_and_compose_impl();
  v165[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v161) = 0;
  if (!__nwlog_fault(v81, v165, &v161))
    goto LABEL_135;
  if (v165[0] != OS_LOG_TYPE_FAULT)
  {
    if (!(_BYTE)v161)
    {
      v82 = __nwlog_obj();
      v83 = v165[0];
      if (os_log_type_enabled(v82, v165[0]))
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_protocol_http3_stream_get_input_frames";
        v84 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_134;
      }
      goto LABEL_135;
    }
    v88 = (char *)__nw_create_backtrace_string();
    v82 = __nwlog_obj();
    v83 = v165[0];
    v89 = os_log_type_enabled(v82, v165[0]);
    if (!v88)
    {
      if (v89)
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_protocol_http3_stream_get_input_frames";
        v84 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_134;
      }
      goto LABEL_135;
    }
    if (v89)
    {
      *(_DWORD *)buf = 136446466;
      v173 = "nw_protocol_http3_stream_get_input_frames";
      v174 = 2082;
      v175 = v88;
      v90 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_122:
      _os_log_impl(&dword_182FBE000, v82, v83, v90, buf, 0x16u);
    }
LABEL_123:
    free(v88);
    goto LABEL_135;
  }
  v82 = __nwlog_obj();
  v83 = v165[0];
  if (os_log_type_enabled(v82, v165[0]))
  {
    *(_DWORD *)buf = 136446210;
    v173 = "nw_protocol_http3_stream_get_input_frames";
    v84 = "%{public}s called with null protocol";
LABEL_134:
    _os_log_impl(&dword_182FBE000, v82, v83, v84, buf, 0xCu);
  }
LABEL_135:
  if (v81)
    free(v81);
  return 0;
}

uint64_t nw_protocol_http3_stream_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  char *handle;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  os_log_type_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  nw_frame **tqh_last;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  nw_frame **v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  char *backtrace_string;
  _BOOL4 v45;
  int v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  int v51;
  int v52;
  nw_frame *tqh_first;
  nw_frame *v54;
  char v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  const char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint32_t v62;
  int v63;
  int v64;
  NSObject *v65;
  os_log_type_t v66;
  uint32_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v72;
  os_log_type_t v73;
  NSObject *v74;
  int v75;
  uint64_t v76;
  int v77;
  NSObject *v78;
  _BOOL4 v79;
  _BOOL4 v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  char v88;
  os_log_type_t type;
  _BYTE buf[32];
  __int128 v91;
  __int16 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (!__nwlog_fault(v13, &type, &v88))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v72 = __nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      v17 = "%{public}s called with null protocol";
      goto LABEL_127;
    }
    if (v88)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v72 = __nwlog_obj();
      v73 = type;
      v79 = os_log_type_enabled(v72, type);
      if (backtrace_string)
      {
        if (v79)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          v47 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_118;
        }
LABEL_49:
        free(backtrace_string);
        goto LABEL_83;
      }
      if (!v79)
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v72 = __nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_127:
    v65 = v72;
    v66 = v73;
    v67 = 12;
LABEL_82:
    _os_log_impl(&dword_182FBE000, v65, v66, v17, buf, v67);
LABEL_83:
    if (v13)
      free(v13);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (!__nwlog_fault(v13, &type, &v88))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v72 = __nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      v17 = "%{public}s called with null http3_stream";
      goto LABEL_127;
    }
    if (v88)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v72 = __nwlog_obj();
      v73 = type;
      v80 = os_log_type_enabled(v72, type);
      if (backtrace_string)
      {
        if (v80)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          v47 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_118:
          v48 = v72;
          v49 = v73;
          v50 = 22;
LABEL_48:
          _os_log_impl(&dword_182FBE000, v48, v49, v47, buf, v50);
          goto LABEL_49;
        }
        goto LABEL_49;
      }
      if (!v80)
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      v17 = "%{public}s called with null http3_stream, no backtrace";
    }
    else
    {
      v72 = __nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      v17 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }
    goto LABEL_127;
  }
  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v74 = __nwlog_obj();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        v75 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
        v76 = *((_QWORD *)handle + 30);
        v77 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 636;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        LOWORD(v91) = 1024;
        *(_DWORD *)((char *)&v91 + 2) = v75;
        WORD3(v91) = 2048;
        *((_QWORD *)&v91 + 1) = v76;
        v92 = 1024;
        v93 = v77;
        _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called, state %u", buf, 0x36u);
      }
    }
  }
  v11 = 0;
  switch(*((_DWORD *)handle + 92))
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      v13 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v88 = 0;
      if (!__nwlog_fault(v13, &type, &v88))
        goto LABEL_83;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_83;
        v16 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        v17 = "%{public}s Unexpected output state %d";
LABEL_81:
        v65 = v14;
        v66 = v15;
        v67 = 18;
        goto LABEL_82;
      }
      if (!v88)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_83;
        v63 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v63;
        v17 = "%{public}s Unexpected output state %d, backtrace limit exceeded";
        goto LABEL_81;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v45)
          goto LABEL_83;
        v64 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v64;
        v17 = "%{public}s Unexpected output state %d, no backtrace";
        goto LABEL_81;
      }
      if (!v45)
        goto LABEL_49;
      v46 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v46;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = backtrace_string;
      v47 = "%{public}s Unexpected output state %d, dumping backtrace:%{public}s";
      v48 = v14;
      v49 = v15;
      v50 = 28;
      goto LABEL_48;
    case 1:
      v18 = *((_QWORD *)handle + 48);
      *(_QWORD *)(v18 + 32) = 0;
      tqh_last = a6->tqh_last;
      *(_QWORD *)(v18 + 40) = tqh_last;
      *tqh_last = (nw_frame *)v18;
      a6->tqh_last = (nw_frame **)(v18 + 32);
      *((_DWORD *)handle + 92) = 2;
      v20 = *((_QWORD *)handle + 42);
      if (v20)
      {
        v21 = *(unsigned __int16 *)(v20 + 1373);
        v22 = v21 | (*(unsigned __int8 *)(v20 + 1375) << 16);
        if ((v21 & 1) == 0)
        {
          v23 = *(_QWORD *)(v20 + 1024);
          if ((v22 & 0x100000) == 0 && !v23)
          {
            v23 = *(_QWORD *)(v20 + 1240);
            if (v23)
            {
              if (*(_DWORD *)(v20 + 1276))
              {
                if ((v22 & 0x400000) == 0)
                {
                  v24 = __nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                  {
                    v25 = *(_DWORD *)(v20 + 1280);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v20 + 1289;
                    *(_WORD *)&buf[22] = 2080;
                    *(_QWORD *)&buf[24] = " ";
                    LOWORD(v91) = 1024;
                    *(_DWORD *)((char *)&v91 + 2) = v25;
                    _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> increasing QUIC keepalive frequency for requests", buf, 0x26u);
                  }
                }
                *(_BYTE *)(v20 + 1375) |= 0x10u;
                nw_quic_connection_set_keepalive(*(void **)(v20 + 1240), 2);
                v23 = *(_QWORD *)(v20 + 1024);
              }
              else
              {
                v23 = 0;
              }
            }
          }
          v28 = __CFADD__(v23, 1);
          v68 = v23 + 1;
          v69 = v28;
          v70 = v69 << 63 >> 63;
          *(_QWORD *)(v20 + 1024) = v68;
          if (v70 != v69 || v70 < 0)
          {
            if (gLogDatapath)
            {
              v86 = __nwlog_obj();
              if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
              {
                v87 = *(_QWORD *)(v20 + 1024);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http3->outstanding_sent_requests";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                LOWORD(v91) = 2048;
                *(_QWORD *)((char *)&v91 + 2) = v87;
                _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
              }
            }
            *(_QWORD *)(v20 + 1024) = -1;
          }
        }
        nw_http_connection_metadata_increment_outbound_message_count(*(void **)(v20 + 1248));
      }
      return 1;
    case 3:
      v26 = *((_QWORD *)handle + 20);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 24);
        if (v27)
        {
          if (*(_QWORD *)(v27 + 88))
          {
            if (a3 < 0x40)
            {
              v28 = __CFADD__(a3, 2);
              v29 = a3 + 2;
              if (!v28)
                goto LABEL_63;
LABEL_26:
              if (gLogDatapath)
              {
                v81 = __nwlog_obj();
                if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                {
                  if (v29 >= 0x40)
                  {
                    if (v29 >= 0x4000)
                    {
                      v82 = 9;
                      if (!(v29 >> 30))
                        v82 = 5;
                    }
                    else
                    {
                      v82 = 3;
                    }
                  }
                  else
                  {
                    v82 = 2;
                  }
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http3_framer_get_output_frames_for_multiple_http3_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "minimum_bytes";
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v82;
                  LOWORD(v91) = 2048;
                  *(_QWORD *)((char *)&v91 + 2) = v29;
                  _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                }
              }
              v29 = 0xFFFFFFFFLL;
              if (a4 < 0x40)
              {
LABEL_64:
                v28 = __CFADD__(a4, 2);
                v30 = a4 + 2;
                if (!v28)
                  goto LABEL_68;
                goto LABEL_66;
              }
LABEL_28:
              if (a4 >= 0x4000)
              {
                if (a4 >> 30)
                  v51 = 9;
                else
                  v51 = 5;
                v28 = __CFADD__(a4, v51);
                v30 = a4 + v51;
                if (!v28)
                {
LABEL_68:
                  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, nw_frame_array_s *))(*(_QWORD *)(v26 + 24) + 88))(v26, *((_QWORD *)handle + 19), v29, v30, a5, a6);
                  if ((_DWORD)v11)
                  {
                    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[8] = 0x40000000;
                    *(_QWORD *)&buf[16] = ___ZL59nw_http3_framer_get_output_frames_for_multiple_http3_framesP15nw_http3_frameryjjjP16nw_frame_array_s_block_invoke;
                    *(_QWORD *)&buf[24] = &__block_descriptor_tmp_155_61527;
                    *(_QWORD *)&v91 = 0;
                    *((_QWORD *)&v91 + 1) = handle + 128;
                    tqh_first = a6->tqh_first;
                    do
                    {
                      if (!tqh_first)
                        break;
                      v54 = (nw_frame *)*((_QWORD *)tqh_first + 4);
                      v55 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                      tqh_first = v54;
                    }
                    while ((v55 & 1) != 0);
                  }
                  return v11;
                }
              }
              else
              {
                v28 = __CFADD__(a4, 3);
                v30 = a4 + 3;
                if (!v28)
                  goto LABEL_68;
              }
LABEL_66:
              if (gLogDatapath)
              {
                v83 = v29;
                v84 = __nwlog_obj();
                if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
                {
                  if (v30 >= 0x40)
                  {
                    if (v30 >= 0x4000)
                    {
                      v85 = 9;
                      if (!(v30 >> 30))
                        v85 = 5;
                    }
                    else
                    {
                      v85 = 3;
                    }
                  }
                  else
                  {
                    v85 = 2;
                  }
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http3_framer_get_output_frames_for_multiple_http3_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "maximum_bytes";
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v85;
                  LOWORD(v91) = 2048;
                  *(_QWORD *)((char *)&v91 + 2) = v30;
                  _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                }
                v30 = 0xFFFFFFFFLL;
                v29 = v83;
              }
              else
              {
                v30 = 0xFFFFFFFFLL;
              }
              goto LABEL_68;
            }
            if (a3 >= 0x4000)
            {
              if (a3 >> 30)
                v52 = 9;
              else
                v52 = 5;
              v28 = __CFADD__(a3, v52);
              v29 = a3 + v52;
              if (v28)
                goto LABEL_26;
            }
            else
            {
              v28 = __CFADD__(a3, 3);
              v29 = a3 + 3;
              if (v28)
                goto LABEL_26;
            }
LABEL_63:
            if (a4 < 0x40)
              goto LABEL_64;
            goto LABEL_28;
          }
        }
      }
      v78 = __nwlog_obj();
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_framer_get_output_frames_for_multiple_http3_frames";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v26;
      v59 = "%{public}s Output handler (%p)'s get_output_frames callback is not properly set";
      v60 = v78;
      v61 = OS_LOG_TYPE_ERROR;
      v62 = 22;
      goto LABEL_109;
    case 5:
      v31 = handle + 736;
      if ((_DWORD)a5 && !a4 && (*((_WORD *)handle + 368) & 0x4000) != 0)
      {
        v32 = nw_frame_create(0, 0, 0, (uint64_t)nw_protocol_http3_capsule_frame_finalizer, 0);
        *(_QWORD *)(v32 + 32) = 0;
        v33 = a6->tqh_last;
        *(_QWORD *)(v32 + 40) = v33;
        *v33 = (nw_frame *)v32;
        a6->tqh_last = (nw_frame **)(v32 + 32);
        v11 = 1;
        if ((*v31 & 0x800) == 0)
        {
          if (gLogDatapath)
          {
            v34 = __nwlog_obj();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              v35 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
              v36 = *((_QWORD *)handle + 30);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = handle + 636;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              LOWORD(v91) = 1024;
              *(_DWORD *)((char *)&v91 + 2) = v35;
              WORD3(v91) = 2048;
              *((_QWORD *)&v91 + 1) = v36;
              v37 = "%{public}s %{public}s%s<i%u:s%llu> returning a metadata-only output frame";
              v38 = v34;
              v39 = 48;
LABEL_43:
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, v37, buf, v39);
              return v11;
            }
          }
        }
      }
      else
      {
        v40 = *((_QWORD *)handle + 12);
        if (v40)
        {
          v11 = (*(uint64_t (**)(void))(*(_QWORD *)(v40 + 24) + 88))();
          if ((*v31 & 0x800) == 0)
          {
            if (gLogDatapath)
            {
              v41 = __nwlog_obj();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
              {
                v42 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
                v43 = *((_QWORD *)handle + 30);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = handle + 636;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                LOWORD(v91) = 1024;
                *(_DWORD *)((char *)&v91 + 2) = v42;
                WORD3(v91) = 2048;
                *((_QWORD *)&v91 + 1) = v43;
                v92 = 1024;
                v93 = v11;
                v37 = "%{public}s %{public}s%s<i%u:s%llu> returning %u output datagrams";
                v38 = v41;
                v39 = 54;
                goto LABEL_43;
              }
            }
          }
        }
        else
        {
          v11 = 0;
          if ((*((_WORD *)handle + 368) & 0x800) == 0 && gLogDatapath)
          {
            v56 = __nwlog_obj();
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
              return 0;
            v57 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
            v58 = *((_QWORD *)handle + 30);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = handle + 636;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            LOWORD(v91) = 1024;
            *(_DWORD *)((char *)&v91 + 2) = v57;
            WORD3(v91) = 2048;
            *((_QWORD *)&v91 + 1) = v58;
            v59 = "%{public}s %{public}s%s<i%u:s%llu> no datagram output handler";
            v60 = v56;
            v61 = OS_LOG_TYPE_DEBUG;
            v62 = 48;
LABEL_109:
            _os_log_impl(&dword_182FBE000, v60, v61, v59, buf, v62);
            v11 = 0;
          }
        }
      }
      break;
    default:
      return v11;
  }
  return v11;
}

uint64_t nw_protocol_http3_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  char *handle;
  uint64_t v4;
  int v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  _WORD *v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  nw_frame *tqh_first;
  nw_frame *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  nw_frame *v34;
  nw_frame *v35;
  char v36;
  uint64_t v37;
  char *v38;
  _BOOL4 v39;
  int v40;
  int is_metadata_complete;
  int v42;
  char *backtrace_string;
  _BOOL4 v44;
  const char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  NSObject *v50;
  int v51;
  uint64_t v52;
  int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  int v59;
  const char *v60;
  NSObject *v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t (*v64)(uint64_t *, uint64_t);
  void *v65;
  id v66;
  char *v67;
  nw_frame_array_s *v68;
  uint64_t v69;
  _QWORD v70[5];
  os_log_type_t type[8];
  os_log_type_t *v72;
  uint64_t v73;
  BOOL v74;
  _BYTE buf[32];
  __int128 v76;
  _BYTE v77[20];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
    v11 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    BYTE4(v69) = 0;
    if (!__nwlog_fault(v11, type, (_BYTE *)&v69 + 4))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      v14 = "%{public}s called with null protocol";
      goto LABEL_73;
    }
    if (BYTE4(v69))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type[0];
      v54 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (!v54)
          goto LABEL_63;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v45 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_182FBE000, v12, v13, v45, buf, 0x16u);
LABEL_63:
        free(backtrace_string);
        goto LABEL_74;
      }
      if (!v54)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      v14 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_73:
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_74;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if ((*((_WORD *)handle + 368) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v50 = __nwlog_obj();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          v51 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
          v52 = *((_QWORD *)handle + 30);
          v53 = *((_DWORD *)handle + 92);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 636;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          LOWORD(v76) = 1024;
          *(_DWORD *)((char *)&v76 + 2) = v51;
          WORD3(v76) = 2048;
          *((_QWORD *)&v76 + 1) = v52;
          *(_WORD *)v77 = 1024;
          *(_DWORD *)&v77[2] = v53;
          _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called, state %u", buf, 0x36u);
        }
      }
    }
    v4 = 0;
    switch(*((_DWORD *)handle + 92))
    {
      case 0:
      case 1:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        v6 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        BYTE4(v69) = 0;
        if (!__nwlog_fault(v6, type, (_BYTE *)&v69 + 4))
          goto LABEL_67;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = gLogObj;
          v8 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            v9 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v9;
            v10 = "%{public}s Unexpected output state %d";
LABEL_66:
            _os_log_impl(&dword_182FBE000, v7, v8, v10, buf, 0x12u);
          }
        }
        else if (BYTE4(v69))
        {
          v38 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = gLogObj;
          v8 = type[0];
          v39 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v38)
          {
            if (v39)
            {
              v40 = *((_DWORD *)handle + 92);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v40;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v38;
              _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s Unexpected output state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v38);
            goto LABEL_67;
          }
          if (v39)
          {
            v46 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v46;
            v10 = "%{public}s Unexpected output state %d, no backtrace";
            goto LABEL_66;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = gLogObj;
          v8 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            v42 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            v10 = "%{public}s Unexpected output state %d, backtrace limit exceeded";
            goto LABEL_66;
          }
        }
LABEL_67:
        if (!v6)
          return 0;
        v47 = (char *)v6;
        goto LABEL_76;
      case 2:
        if (a2->tqh_first == (nw_frame *)*((_QWORD *)handle + 48))
        {
          is_metadata_complete = nw_frame_is_metadata_complete((uint64_t)a2->tqh_first);
          nw_http3_stream_send_fields((uint64_t)handle, is_metadata_complete);
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        v11 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        BYTE4(v69) = 0;
        if (!__nwlog_fault(v11, type, (_BYTE *)&v69 + 4))
          goto LABEL_74;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_74;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          v14 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame";
          goto LABEL_73;
        }
        if (BYTE4(v69))
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = type[0];
          v44 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (!v44)
              goto LABEL_63;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            v45 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame, dumping bac"
                  "ktrace:%{public}s";
            goto LABEL_62;
          }
          if (!v44)
            goto LABEL_74;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          v14 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame, no backtrace";
        }
        else
        {
          v12 = __nwlog_obj();
          v13 = type[0];
          if (!os_log_type_enabled(v12, type[0]))
            goto LABEL_74;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
          v14 = "%{public}s Expected frame array first to be the same as http3_stream->output_fields_frame, backtrace limit exceeded";
        }
        goto LABEL_73;
      case 3:
        v15 = handle + 736;
        v16 = **((_QWORD **)a2->tqh_last + 1);
        *(_QWORD *)type = 0;
        v72 = type;
        v73 = 0x2000000000;
        v74 = 0;
        if (v16)
        {
          v17 = *(char *)(v16 + 186);
          v18 = *(_BYTE *)(v16 + 186);
          v19 = (v17 >> 7) & 1;
          v74 = (v17 & 0x80) != 0;
          if ((v17 & 0x80000000) == 0)
          {
            v20 = *(_QWORD *)(v16 + 64);
            if (v20)
            {
              if ((*(_BYTE *)(v20 + 66) & 0x40) != 0)
              {
                v70[0] = MEMORY[0x1E0C809B0];
                v70[1] = 0x40000000;
                v70[2] = ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
                v70[3] = &unk_1E14A8520;
                v70[4] = type;
                nw_frame_foreach_protocol_metadata(v16, 0, (uint64_t)v70);
                v19 = *((unsigned __int8 *)v72 + 24);
                v18 = *(_BYTE *)(v16 + 186);
              }
            }
          }
          *(_BYTE *)(v16 + 186) = v18 & 0x7F | ((v19 != 0) << 7);
        }
        if ((*v15 & 0x800) == 0)
        {
          if (gLogDatapath)
          {
            v56 = __nwlog_obj();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
            {
              v57 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
              v58 = *((_QWORD *)handle + 30);
              *(_DWORD *)buf = 0;
              nw_frame_array_get_frame_count((uint64_t *)a2, 1, buf);
              v59 = *(_DWORD *)buf;
              if (*((_BYTE *)v72 + 24))
                v60 = ", complete";
              else
                v60 = "";
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = handle + 636;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              LOWORD(v76) = 1024;
              *(_DWORD *)((char *)&v76 + 2) = v57;
              WORD3(v76) = 2048;
              *((_QWORD *)&v76 + 1) = v58;
              *(_WORD *)v77 = 1024;
              *(_DWORD *)&v77[2] = v59;
              *(_WORD *)&v77[6] = 2080;
              *(_QWORD *)&v77[8] = v60;
              _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> sending %u bytes of body data%s", buf, 0x40u);
            }
          }
        }
        v69 = 0;
        v4 = *((_QWORD *)handle + 20);
        if (v4)
        {
          v21 = *(_QWORD *)(v4 + 24);
          if (v21 && *(_QWORD *)(v21 + 96))
          {
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL64nw_http3_framer_finalize_output_frames_for_multiple_http3_framesP15nw_http3_frameryP16nw_frame_array_sPjS3__block_invoke;
            *(_QWORD *)&buf[24] = &__block_descriptor_tmp_161;
            *(_QWORD *)&v76 = 0;
            *((_QWORD *)&v76 + 1) = handle + 128;
            *(_QWORD *)v77 = (char *)&v69 + 4;
            *(_QWORD *)&v77[8] = &v69;
            tqh_first = a2->tqh_first;
            do
            {
              if (!tqh_first)
                break;
              v23 = (nw_frame *)*((_QWORD *)tqh_first + 4);
              v24 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              tqh_first = v23;
            }
            while ((v24 & 1) != 0);
            v4 = (*(uint64_t (**)(uint64_t, nw_frame_array_s *))(*(_QWORD *)(v4 + 24) + 96))(v4, a2);
            v25 = v69;
          }
          else
          {
            v25 = 0;
            v4 = 0;
          }
        }
        else
        {
          v25 = 0;
        }
        nw_http_transaction_metadata_increment_outbound_body_transfer_size(*((void **)handle + 49), v25);
        v26 = HIDWORD(v69);
        v27 = *((_QWORD *)handle + 36);
        v28 = __CFADD__(v27, HIDWORD(v69));
        *((_QWORD *)handle + 36) = v27 + HIDWORD(v69);
        if (v28)
        {
          if (gLogDatapath)
          {
            v61 = __nwlog_obj();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              v62 = *((_QWORD *)handle + 36);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "increment_outbound_body_size";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "outbound_body_size";
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v26;
              LOWORD(v76) = 2048;
              *(_QWORD *)((char *)&v76 + 2) = v62;
              _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
            }
          }
          *((_QWORD *)handle + 36) = -1;
        }
        if (*((_BYTE *)v72 + 24))
        {
          nw_http_transaction_metadata_mark_outbound_message_end(*((void **)handle + 49));
          if (handle[280])
          {
            if (*((_QWORD *)handle + 34) != *((_QWORD *)handle + 36))
            {
              if ((*v15 & 0x800) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v29 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  v30 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
                  v31 = *((_QWORD *)handle + 30);
                  if (handle[280])
                    v32 = *((_QWORD *)handle + 34);
                  else
                    v32 = -1;
                  v48 = *((_QWORD *)handle + 36);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = handle + 636;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = " ";
                  LOWORD(v76) = 1024;
                  *(_DWORD *)((char *)&v76 + 2) = v30;
                  WORD3(v76) = 2048;
                  *((_QWORD *)&v76 + 1) = v31;
                  *(_WORD *)v77 = 2048;
                  *(_QWORD *)&v77[2] = v32;
                  *(_WORD *)&v77[10] = 2048;
                  *(_QWORD *)&v77[12] = v48;
                  _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> Content length header %llu does not equal body size %llu", buf, 0x44u);
                }
              }
              *((_QWORD *)handle + 33) = 270;
              nw_protocol_http3_stream_error((nw_protocol *)handle, (nw_protocol *)handle, 22);
              nw_protocol_http3_stream_disconnect((nw_protocol *)handle, (nw_protocol *)handle);
              v4 = 0;
            }
          }
        }
        _Block_object_dispose(type, 8);
        return v4;
      case 5:
        if (nw_protocol_copy_http_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
        v33 = (id)nw_protocol_copy_http_definition_http_definition;
        v63[0] = MEMORY[0x1E0C809B0];
        v63[1] = 0x40000000;
        v64 = ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_159;
        v65 = &__block_descriptor_tmp_160;
        v66 = v33;
        v67 = handle;
        v68 = a2;
        v34 = a2->tqh_first;
        do
        {
          if (!v34)
            break;
          v35 = (nw_frame *)*((_QWORD *)v34 + 4);
          v36 = ((uint64_t (*)(_QWORD *))v64)(v63);
          v34 = v35;
        }
        while ((v36 & 1) != 0);
        if (v33)
          os_release(v33);
        nw_http3_stream_send_pending_capsules((uint64_t)handle);
        v37 = *((_QWORD *)handle + 12);
        if (!v37)
          return 0;
        return (*(uint64_t (**)(void))(*(_QWORD *)(v37 + 24) + 96))();
      default:
        return v4;
    }
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
  v11 = (const char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  BYTE4(v69) = 0;
  if (__nwlog_fault(v11, type, (_BYTE *)&v69 + 4))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      v14 = "%{public}s called with null http3_stream";
      goto LABEL_73;
    }
    if (BYTE4(v69))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type[0];
      v55 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (!v55)
          goto LABEL_63;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v45 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
        goto LABEL_62;
      }
      if (!v55)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      v14 = "%{public}s called with null http3_stream, no backtrace";
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      v14 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
LABEL_74:
  if (v11)
  {
    v47 = (char *)v11;
LABEL_76:
    free(v47);
  }
  return 0;
}

uint64_t nw_protocol_http3_stream_supports_external_data(nw_protocol *a1)
{
  _DWORD *handle;
  int v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v2 = handle[92];
      if (v2 == 3 || v2 == 5 && handle + 16 == (_DWORD *)a1)
        return handle[184] & 1;
      else
        return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http3_stream_supports_external_data";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http3_stream_supports_external_data";
        v7 = "%{public}s called with null http3_stream";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http3_stream_supports_external_data";
        v7 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http3_stream_supports_external_data";
        v7 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_http3_stream_supports_external_data";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_http3_stream_supports_external_data";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_36;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http3_stream_supports_external_data";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http3_stream_supports_external_data";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_http3_stream_supports_external_data";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http3_stream_supports_external_data";
    v7 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_36:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_protocol_http3_stream_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  _QWORD *handle;
  uint64_t v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_add_listen_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v5, &type, &v18))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_add_listen_handler";
      v8 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      goto LABEL_49;
    }
    if (!v18)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v14)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http3_stream_add_listen_handler";
    v22 = 2082;
    v23 = backtrace_string;
    v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v6, v7, v15, buf, 0x16u);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_add_listen_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v5, &type, &v18))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_add_listen_handler";
      v8 = "%{public}s called with null http3_stream";
      goto LABEL_48;
    }
    if (!v18)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v8 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v16 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v8 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v16)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http3_stream_add_listen_handler";
    v22 = 2082;
    v23 = backtrace_string;
    v15 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  v3 = handle[42];
  if (v3)
  {
    if ((handle[92] & 0x800) == 0 && gLogDatapath)
    {
      v9 = __nwlog_obj();
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      v3 = handle[42];
      if (v10)
      {
        v11 = *(_DWORD *)(v3 + 1280);
        v12 = handle[30];
        *(_DWORD *)buf = 136447234;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v22 = 2082;
        v23 = (char *)handle + 636;
        v24 = 2080;
        v25 = " ";
        v26 = 1024;
        v27 = v11;
        v28 = 2048;
        v29 = v12;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
        v3 = handle[42];
      }
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 24) + 232))();
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_http3_stream_add_listen_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v5, &type, &v18))
    goto LABEL_49;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v8 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_add_listen_handler";
        v8 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v21 = "nw_protocol_http3_stream_add_listen_handler";
      v22 = 2082;
      v23 = backtrace_string;
      v15 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(backtrace_string);
    goto LABEL_49;
  }
  v6 = __nwlog_obj();
  v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_add_listen_handler";
    v8 = "%{public}s called with null http3_stream->http3_connection";
    goto LABEL_48;
  }
LABEL_49:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_protocol_http3_stream_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  _QWORD *handle;
  uint64_t v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_remove_listen_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v5, &type, &v18))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_remove_listen_handler";
      v8 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      goto LABEL_49;
    }
    if (!v18)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v14)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http3_stream_remove_listen_handler";
    v22 = 2082;
    v23 = backtrace_string;
    v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v6, v7, v15, buf, 0x16u);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_remove_listen_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v5, &type, &v18))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_remove_listen_handler";
      v8 = "%{public}s called with null http3_stream";
      goto LABEL_48;
    }
    if (!v18)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v8 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v16 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v8 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v16)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http3_stream_remove_listen_handler";
    v22 = 2082;
    v23 = backtrace_string;
    v15 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  v3 = handle[42];
  if (v3)
  {
    if ((handle[92] & 0x800) == 0 && gLogDatapath)
    {
      v9 = __nwlog_obj();
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      v3 = handle[42];
      if (v10)
      {
        v11 = *(_DWORD *)(v3 + 1280);
        v12 = handle[30];
        *(_DWORD *)buf = 136447234;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v22 = 2082;
        v23 = (char *)handle + 636;
        v24 = 2080;
        v25 = " ";
        v26 = 1024;
        v27 = v11;
        v28 = 2048;
        v29 = v12;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
        v3 = handle[42];
      }
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 24) + 240))();
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_http3_stream_remove_listen_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v5, &type, &v18))
    goto LABEL_49;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v8 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_http3_stream_remove_listen_handler";
        v8 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v21 = "nw_protocol_http3_stream_remove_listen_handler";
      v22 = 2082;
      v23 = backtrace_string;
      v15 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(backtrace_string);
    goto LABEL_49;
  }
  v6 = __nwlog_obj();
  v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_remove_listen_handler";
    v8 = "%{public}s called with null http3_stream->http3_connection";
    goto LABEL_48;
  }
LABEL_49:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_protocol_http3_stream_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(nw_protocol *);
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_stream_get_remote_endpoint";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v9 = "%{public}s called with null protocol";
      goto LABEL_34;
    }
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v11)
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v18 = 2082;
      v19 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_35:
    if (!v6)
      return 0;
LABEL_36:
    free(v6);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http3_stream_get_remote_endpoint";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v9 = "%{public}s called with null http3_stream";
      goto LABEL_34;
    }
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v9 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_34;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v13 = os_log_type_enabled(v7, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http3_stream_get_remote_endpoint";
        v18 = 2082;
        v19 = v12;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v12);
      if (!v6)
        return 0;
      goto LABEL_36;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      v9 = "%{public}s called with null http3_stream, no backtrace";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v2 = handle[6];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(uint64_t (**)(nw_protocol *))(v3 + 136);
      if (v4)
        return v4(a1->default_input_handler);
    }
  }
  return 0;
}

uint64_t nw_protocol_http3_stream_copy_info(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http3_stream_copy_info";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http3_stream_copy_info";
      v13 = "%{public}s called with null protocol";
LABEL_52:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      goto LABEL_53;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_copy_info";
        v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v15 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_copy_info";
        v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v15)
      goto LABEL_39;
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_http3_stream_copy_info";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
    _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
    goto LABEL_39;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http3_stream_copy_info";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http3_stream_copy_info";
      v13 = "%{public}s called with null http3_stream";
      goto LABEL_52;
    }
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_copy_info";
        v13 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_copy_info";
        v13 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v17)
      goto LABEL_39;
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_http3_stream_copy_info";
    v23 = 2082;
    v24 = backtrace_string;
    v16 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_38;
  }
  v3 = *(_QWORD *)(v2 + 336);
  if (v3)
  {
    if (a2 == 253)
      return *(_QWORD *)(v3 + 1088);
    v6 = nw_protocol_common_copy_info(a1, a2);
    v5 = v6;
    if (a2 == 255)
    {
      if (!v6)
        v5 = nw_array_create();
      v7 = *(void **)(*(_QWORD *)(v2 + 336) + 1248);
      if (v7)
        nw_array_append(v5, v7);
      v8 = *(void **)(v2 + 392);
      if (v8)
        nw_array_append(v5, v8);
    }
    return v5;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_http3_stream_copy_info";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v10, &type, &v19))
    goto LABEL_53;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_copy_info";
        v13 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v18 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_copy_info";
        v13 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_http3_stream_copy_info";
      v23 = 2082;
      v24 = backtrace_string;
      v16 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
LABEL_39:
    free(backtrace_string);
    goto LABEL_53;
  }
  v11 = __nwlog_obj();
  v12 = type;
  if (os_log_type_enabled(v11, type))
  {
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http3_stream_copy_info";
    v13 = "%{public}s called with null http3_stream->http3_connection";
    goto LABEL_52;
  }
LABEL_53:
  if (v10)
    free(v10);
  return 0;
}

void nw_protocol_http3_stream_notify(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, uint64_t, unsigned __int8 *, uint64_t);
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  char *backtrace_string;
  _BOOL4 v33;
  char *v34;
  _BOOL4 v35;
  const char *v36;
  _BOOL4 v37;
  char *v38;
  _BOOL4 v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *v46;
  _BOOL4 v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  const char *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint32_t v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  char *v59;
  const char *v60;
  char v61;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_protocol_http3_stream_notify";
    v17 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v17, &type, &v61))
      goto LABEL_125;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v61)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_125;
        *(_DWORD *)buf = 136446210;
        v64 = "nw_protocol_http3_stream_notify";
        v20 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_109;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v33 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v33)
          goto LABEL_125;
        *(_DWORD *)buf = 136446210;
        v64 = "nw_protocol_http3_stream_notify";
        v20 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_109;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v64 = "nw_protocol_http3_stream_notify";
        v65 = 2082;
        v66 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_125;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_protocol_http3_stream_notify";
    v20 = "%{public}s called with null protocol";
LABEL_109:
    v53 = v18;
    v54 = v19;
    v55 = 12;
LABEL_124:
    _os_log_impl(&dword_182FBE000, v53, v54, v20, buf, v55);
    goto LABEL_125;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    if (a2)
    {
      switch((int)a3)
      {
        case 7:
        case 15:
        case 21:
          return;
        case 13:
          goto LABEL_8;
        case 16:
          if (a4 && a5 == 1)
          {
            v7 = *(_WORD *)(v6 + 736) & 0xDFFF | (*(unsigned __int8 *)(v6 + 738) << 16) | (*a4 << 13);
            *(_WORD *)(v6 + 736) = *(_WORD *)(v6 + 736) & 0xDFFF | (*a4 << 13);
            *(_BYTE *)(v6 + 738) = BYTE2(v7);
          }
LABEL_8:
          v8 = *(_QWORD *)(v6 + 336);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 24);
            if (v9)
            {
              v10 = *(void (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *, uint64_t))(v9 + 160);
              if (v10)
              {
                v10(*(_QWORD *)(v6 + 336), a2, a3, a4, a5);
                return;
              }
            }
            __nwlog_obj();
            v31 = *(const char **)(v8 + 16);
            if (!v31)
              v31 = "invalid";
          }
          else
          {
            __nwlog_obj();
            v31 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          v64 = "nw_protocol_http3_stream_notify";
          v65 = 2082;
          v66 = (void *)v31;
          v17 = (const char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v61 = 0;
          if (!__nwlog_fault(v17, &type, &v61))
            goto LABEL_125;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v43 = __nwlog_obj();
            v44 = type;
            if (!os_log_type_enabled(v43, type))
              goto LABEL_125;
            v45 = "invalid";
            if (v8)
            {
              if (*(_QWORD *)(v8 + 16))
                v45 = *(const char **)(v8 + 16);
            }
            *(_DWORD *)buf = 136446466;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v45;
            v20 = "%{public}s protocol %{public}s has invalid notify callback";
LABEL_123:
            v53 = v43;
            v54 = v44;
            v55 = 22;
            goto LABEL_124;
          }
          if (!v61)
          {
            v43 = __nwlog_obj();
            v44 = type;
            if (!os_log_type_enabled(v43, type))
              goto LABEL_125;
            v52 = "invalid";
            if (v8 && *(_QWORD *)(v8 + 16))
              v52 = *(const char **)(v8 + 16);
            *(_DWORD *)buf = 136446466;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v52;
            v20 = "%{public}s protocol %{public}s has invalid notify callback, backtrace limit exceeded";
            goto LABEL_123;
          }
          v46 = (char *)__nw_create_backtrace_string();
          v43 = __nwlog_obj();
          v44 = type;
          v47 = os_log_type_enabled(v43, type);
          if (!v46)
          {
            if (!v47)
              goto LABEL_125;
            v60 = "invalid";
            if (v8 && *(_QWORD *)(v8 + 16))
              v60 = *(const char **)(v8 + 16);
            *(_DWORD *)buf = 136446466;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v60;
            v20 = "%{public}s protocol %{public}s has invalid notify callback, no backtrace";
            goto LABEL_123;
          }
          if (v47)
          {
            v48 = "invalid";
            if (v8 && *(_QWORD *)(v8 + 16))
              v48 = *(const char **)(v8 + 16);
            *(_DWORD *)buf = 136446722;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v48;
            v67 = 2082;
            v68 = v46;
            _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s protocol %{public}s has invalid notify callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v46);
          if (!v17)
            return;
          goto LABEL_126;
        case 22:
          if ((*(_WORD *)(v6 + 736) & 0x800) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v11 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              v12 = *(_DWORD *)(*(_QWORD *)(v6 + 336) + 1280);
              v13 = *(_QWORD *)(v6 + 240);
              *(_DWORD *)buf = 136447234;
              v64 = "nw_protocol_http3_stream_notify";
              v65 = 2082;
              v66 = (void *)(v6 + 636);
              v67 = 2080;
              v68 = " ";
              v69 = 1024;
              v70 = v12;
              v71 = 2048;
              v72 = v13;
              _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> restart received, assuming connection closed", buf, 0x30u);
            }
          }
          *(_WORD *)(*(_QWORD *)(v6 + 336) + 1373) |= 8u;
          goto LABEL_16;
        default:
LABEL_16:
          v14 = *(_QWORD *)(a1 + 48);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 24);
            if (v15)
            {
              v16 = *(void (**)(void))(v15 + 160);
              if (v16)
              {
                v16();
                return;
              }
            }
          }
          __nwlog_obj();
          v21 = *(_QWORD *)(a1 + 48);
          v22 = "invalid";
          if (v21)
          {
            v23 = *(const char **)(v21 + 16);
            if (v23)
              v22 = v23;
          }
          *(_DWORD *)buf = 136446466;
          v64 = "nw_protocol_http3_stream_notify";
          v65 = 2082;
          v66 = (void *)v22;
          v24 = (const char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v61 = 0;
          if (!__nwlog_fault(v24, &type, &v61))
            goto LABEL_116;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v25 = __nwlog_obj();
            v26 = type;
            if (!os_log_type_enabled(v25, type))
              goto LABEL_116;
            v27 = *(_QWORD *)(a1 + 48);
            v28 = "invalid";
            if (v27)
            {
              v29 = *(const char **)(v27 + 16);
              if (v29)
                v28 = v29;
            }
            *(_DWORD *)buf = 136446466;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v28;
            v30 = "%{public}s protocol %{public}s has invalid notify callback";
LABEL_115:
            _os_log_impl(&dword_182FBE000, v25, v26, v30, buf, 0x16u);
            goto LABEL_116;
          }
          if (!v61)
          {
            v25 = __nwlog_obj();
            v26 = type;
            if (!os_log_type_enabled(v25, type))
              goto LABEL_116;
            v49 = *(_QWORD *)(a1 + 48);
            v50 = "invalid";
            if (v49)
            {
              v51 = *(const char **)(v49 + 16);
              if (v51)
                v50 = v51;
            }
            *(_DWORD *)buf = 136446466;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v50;
            v30 = "%{public}s protocol %{public}s has invalid notify callback, backtrace limit exceeded";
            goto LABEL_115;
          }
          v38 = (char *)__nw_create_backtrace_string();
          v25 = __nwlog_obj();
          v26 = type;
          v39 = os_log_type_enabled(v25, type);
          if (!v38)
          {
            if (!v39)
              goto LABEL_116;
            v56 = *(_QWORD *)(a1 + 48);
            v57 = "invalid";
            if (v56)
            {
              v58 = *(const char **)(v56 + 16);
              if (v58)
                v57 = v58;
            }
            *(_DWORD *)buf = 136446466;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v57;
            v30 = "%{public}s protocol %{public}s has invalid notify callback, no backtrace";
            goto LABEL_115;
          }
          if (v39)
          {
            v40 = *(_QWORD *)(a1 + 48);
            v41 = "invalid";
            if (v40)
            {
              v42 = *(const char **)(v40 + 16);
              if (v42)
                v41 = v42;
            }
            *(_DWORD *)buf = 136446722;
            v64 = "nw_protocol_http3_stream_notify";
            v65 = 2082;
            v66 = (void *)v41;
            v67 = 2082;
            v68 = v38;
            _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s protocol %{public}s has invalid notify callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v38);
LABEL_116:
          if (!v24)
            return;
          v59 = (char *)v24;
          break;
      }
      goto LABEL_127;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_protocol_http3_stream_notify";
    v17 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v17, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_125;
        *(_DWORD *)buf = 136446210;
        v64 = "nw_protocol_http3_stream_notify";
        v20 = "%{public}s called with null other_protocol";
        goto LABEL_109;
      }
      if (!v61)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_125;
        *(_DWORD *)buf = 136446210;
        v64 = "nw_protocol_http3_stream_notify";
        v20 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_109;
      }
      v34 = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v37 = os_log_type_enabled(v18, type);
      if (!v34)
      {
        if (!v37)
          goto LABEL_125;
        *(_DWORD *)buf = 136446210;
        v64 = "nw_protocol_http3_stream_notify";
        v20 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_109;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        v64 = "nw_protocol_http3_stream_notify";
        v65 = 2082;
        v66 = v34;
        v36 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
LABEL_125:
    if (v17)
      goto LABEL_126;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v64 = "nw_protocol_http3_stream_notify";
  v17 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v61 = 0;
  if (!__nwlog_fault(v17, &type, &v61))
    goto LABEL_125;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_protocol_http3_stream_notify";
    v20 = "%{public}s called with null http3_stream";
    goto LABEL_109;
  }
  if (!v61)
  {
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_protocol_http3_stream_notify";
    v20 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    goto LABEL_109;
  }
  v34 = (char *)__nw_create_backtrace_string();
  v18 = __nwlog_obj();
  v19 = type;
  v35 = os_log_type_enabled(v18, type);
  if (!v34)
  {
    if (!v35)
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_protocol_http3_stream_notify";
    v20 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_109;
  }
  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    v64 = "nw_protocol_http3_stream_notify";
    v65 = 2082;
    v66 = v34;
    v36 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_59:
    _os_log_impl(&dword_182FBE000, v18, v19, v36, buf, 0x16u);
  }
LABEL_60:
  free(v34);
  if (v17)
  {
LABEL_126:
    v59 = (char *)v17;
LABEL_127:
    free(v59);
  }
}

uint64_t nw_protocol_http3_stream_get_parameters(nw_protocol *a1)
{
  char *handle;
  void *v3;
  id v4;
  _BOOL8 v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  NWConcrete_nw_protocol_options *v9;
  id v10;
  uint64_t v11;
  nw_protocol_stack_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *v17;
  _BOOL4 v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *backtrace_string;
  _BOOL4 v24;
  const char *v25;
  _BOOL4 v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_protocol_http3_stream_get_parameters";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_http3_stream_get_parameters";
      v22 = "%{public}s called with null protocol";
LABEL_73:
      _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      goto LABEL_74;
    }
    if (!v32)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_http3_stream_get_parameters";
      v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v24 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_protocol_http3_stream_get_parameters";
        v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_http3_stream_get_parameters";
      v36 = 2082;
      v37 = backtrace_string;
      v25 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_57:
      _os_log_impl(&dword_182FBE000, v20, v21, v25, buf, 0x16u);
    }
LABEL_58:
    free(backtrace_string);
    goto LABEL_74;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_protocol_http3_stream_get_parameters";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32))
      goto LABEL_74;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_http3_stream_get_parameters";
      v22 = "%{public}s called with null http3_stream";
      goto LABEL_73;
    }
    if (!v32)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_http3_stream_get_parameters";
      v22 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v26 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_protocol_http3_stream_get_parameters";
        v22 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_http3_stream_get_parameters";
      v36 = 2082;
      v37 = backtrace_string;
      v25 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  if (handle + 64 != (char *)a1)
  {
    if ((*((_WORD *)handle + 368) & 0x1000) == 0)
    {
      if (*((_QWORD *)handle + 4))
      {
        nw_http3_fix_quic_parameters(*((_QWORD *)handle + 42), *((NSObject **)handle + 44), 0, 0);
        *((_WORD *)handle + 368) |= 0x1000u;
      }
    }
    return *((_QWORD *)handle + 44);
  }
  if (*((_QWORD *)handle + 45))
    goto LABEL_9;
  v3 = (void *)*((_QWORD *)handle + 44);
  if (v3)
  {
    v4 = v3;
    v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v4, 0, 1);

    *((_QWORD *)handle + 45) = v5;
    v6 = *((_QWORD *)handle + 4);
    if (v6)
    {
      v7 = nw_parameters_copy_protocol_options_legacy((void *)v5, *((nw_protocol **)handle + 4));
      if (v7)
      {
        v8 = v7;
        if (nw_protocol_options_is_quic_stream(v7))
        {
          v9 = nw_protocol_options_copy(v8);
          nw_quic_stream_set_is_unidirectional(v9, 0);
          nw_quic_stream_set_is_datagram(v9, 1);
          nw_quic_stream_set_associated_stream_id(v9, *((_QWORD *)handle + 30));
          nw_quic_stream_set_datagram_context_id(v9, *((_QWORD *)handle + 32));
          nw_protocol_http3_add_alpn_to_quic_options((nw_protocol_options *)v9);
          if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
          v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          nw_parameters_set_protocol_instance(v9, v11, v6);
          if (v10)
            os_release(v10);
          nw_protocol_options_inherit_log_id(v8, v9);
          nw_protocol_options_set_prohibit_joining(v9);
          v12 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 45));
          nw_protocol_stack_replace_protocol_with_handle(v12, v6, v9);
          if (v12)
            os_release(v12);
          if (v9)
            os_release(v9);
        }
        os_release(v8);
      }
LABEL_9:
      if ((*((_WORD *)handle + 368) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v27 = __nwlog_obj();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            v28 = *(_DWORD *)(*((_QWORD *)handle + 42) + 1280);
            v29 = *((_QWORD *)handle + 30);
            v30 = *((_QWORD *)handle + 45);
            *(_DWORD *)buf = 136447490;
            v35 = "nw_http3_stream_get_datagram_parameters";
            v36 = 2082;
            v37 = handle + 636;
            v38 = 2080;
            v39 = " ";
            v40 = 1024;
            v41 = v28;
            v42 = 2048;
            v43 = v29;
            v44 = 2048;
            v45 = v30;
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> returning datagram parameters %p", buf, 0x3Au);
          }
        }
      }
      return *((_QWORD *)handle + 45);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v35 = "nw_http3_stream_get_datagram_parameters";
    v36 = 2048;
    v37 = handle;
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v13, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_39;
        *(_DWORD *)buf = 136446466;
        v35 = "nw_http3_stream_get_datagram_parameters";
        v36 = 2048;
        v37 = handle;
        v16 = "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters";
        goto LABEL_38;
      }
      if (!v32)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_39;
        *(_DWORD *)buf = 136446466;
        v35 = "nw_http3_stream_get_datagram_parameters";
        v36 = 2048;
        v37 = handle;
        v16 = "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters, backtrace limit exceeded";
        goto LABEL_38;
      }
      v17 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v18 = os_log_type_enabled(v14, type);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446722;
          v35 = "nw_http3_stream_get_datagram_parameters";
          v36 = 2048;
          v37 = handle;
          v38 = 2082;
          v39 = v17;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v17);
        goto LABEL_39;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v35 = "nw_http3_stream_get_datagram_parameters";
        v36 = 2048;
        v37 = handle;
        v16 = "%{public}s no output handler on http3 stream %p yet, cannot create datagram parameters, no backtrace";
LABEL_38:
        _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0x16u);
      }
    }
LABEL_39:
    if (v13)
      free(v13);
    goto LABEL_9;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_http3_stream_get_datagram_parameters";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v19, &type, &v32))
    goto LABEL_74;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v32)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_http3_stream_get_datagram_parameters";
      v22 = "%{public}s called with null http3_stream->parameters, backtrace limit exceeded";
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v31 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v31)
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_http3_stream_get_datagram_parameters";
      v22 = "%{public}s called with null http3_stream->parameters, no backtrace";
      goto LABEL_73;
    }
    if (!v31)
      goto LABEL_58;
    *(_DWORD *)buf = 136446466;
    v35 = "nw_http3_stream_get_datagram_parameters";
    v36 = 2082;
    v37 = backtrace_string;
    v25 = "%{public}s called with null http3_stream->parameters, dumping backtrace:%{public}s";
    goto LABEL_57;
  }
  v20 = __nwlog_obj();
  v21 = type;
  if (os_log_type_enabled(v20, type))
  {
    *(_DWORD *)buf = 136446210;
    v35 = "nw_http3_stream_get_datagram_parameters";
    v22 = "%{public}s called with null http3_stream->parameters";
    goto LABEL_73;
  }
LABEL_74:
  if (v19)
    free(v19);
  return 0;
}

void sub_1839706D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_http3_stream_get_message_properties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  unsigned int v12;
  int v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_get_message_properties";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_get_message_properties";
      v11 = "%{public}s called with null protocol";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_protocol_http3_stream_get_message_properties";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_42:
        if (!v8)
          return;
LABEL_43:
        free(v8);
        return;
      }
      if (!v15)
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_get_message_properties";
      v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_http3_stream_get_message_properties";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_41:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_42;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (a3)
    {
      if ((*(_WORD *)(v3 + 736) & 0x10) != 0)
      {
        v5 = *(_QWORD *)(v3 + 96);
        if (v5 && (v6 = *(_QWORD *)(v5 + 24)) != 0 && (v7 = *(void (**)(void))(v6 + 248)) != 0)
        {
          v7();
        }
        else
        {
          v12 = a3[1] & 0xFFFFFFFA;
          a3[1] = v12 | 1;
          v13 = *(_DWORD *)(v3 + 628);
          if (!v13)
            v13 = -1;
          *a3 = v13;
          a3[1] = v12 | 3;
        }
      }
      else
      {
        v4 = a3[1] & 0xFFFFFFF8;
        *a3 = -1;
        a3[1] = v4;
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_protocol_http3_stream_get_message_properties";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v8, &type, &v18))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_get_message_properties";
    v11 = "%{public}s called with null http3_stream";
    goto LABEL_41;
  }
  if (!v18)
  {
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_get_message_properties";
    v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    goto LABEL_41;
  }
  v16 = (char *)__nw_create_backtrace_string();
  v9 = __nwlog_obj();
  v10 = type;
  v17 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (!v17)
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http3_stream_get_message_properties";
    v11 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_41;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_protocol_http3_stream_get_message_properties";
    v22 = 2082;
    v23 = v16;
    _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v8)
    goto LABEL_43;
}

uint64_t nw_protocol_http3_stream_register_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      if (a3 != 5)
        return nw_protocol_common_register_notification(a1, a2, a3);
      if ((*(_WORD *)(v3 + 736) & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v5 = *(_DWORD *)(*(_QWORD *)(v3 + 336) + 1280);
          v6 = *(_QWORD *)(v3 + 240);
          *(_DWORD *)buf = 136447234;
          v19 = "nw_protocol_http3_stream_register_notification";
          v20 = 2082;
          v21 = (char *)(v3 + 636);
          v22 = 2080;
          v23 = " ";
          v24 = 1024;
          v25 = v5;
          v26 = 2048;
          v27 = v6;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> registered metadata_changed notification", buf, 0x30u);
        }
      }
      *(_BYTE *)(v3 + 738) |= 2u;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_stream_register_notification";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_stream_register_notification";
        v11 = "%{public}s called with null http3_stream";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_stream_register_notification";
        v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_stream_register_notification";
        v11 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http3_stream_register_notification";
      v20 = 2082;
      v21 = backtrace_string;
      v14 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_http3_stream_register_notification";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v8, &type, &v16))
    goto LABEL_37;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_stream_register_notification";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http3_stream_register_notification";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http3_stream_register_notification";
      v20 = 2082;
      v21 = backtrace_string;
      v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  v9 = __nwlog_obj();
  v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http3_stream_register_notification";
    v11 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
  }
LABEL_37:
  if (v8)
    free(v8);
  return 0;
}

uint64_t nw_protocol_http3_stream_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      if (a3 != 5)
        return nw_protocol_common_unregister_notification(a1, a2, a3);
      v4 = (_WORD *)(v3 + 736);
      if ((*(_WORD *)(v3 + 736) & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v6 = *(_DWORD *)(*(_QWORD *)(v3 + 336) + 1280);
          v7 = *(_QWORD *)(v3 + 240);
          *(_DWORD *)buf = 136447234;
          v22 = "nw_protocol_http3_stream_unregister_notification";
          v23 = 2082;
          v24 = (char *)(v3 + 636);
          v25 = 2080;
          v26 = " ";
          v27 = 1024;
          v28 = v6;
          v29 = 2048;
          v30 = v7;
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> unregistered metadata_changed notification", buf, 0x30u);
        }
      }
      v8 = (unsigned __int16)*v4;
      v9 = (v8 | (*(unsigned __int8 *)(v3 + 738) << 16)) & 0xFFFDFFFF;
      *v4 = v8;
      *(_BYTE *)(v3 + 738) = BYTE2(v9);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http3_stream_unregister_notification";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v11, &type, &v19))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_unregister_notification";
        v14 = "%{public}s called with null http3_stream";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v19)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_unregister_notification";
        v14 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_unregister_notification";
        v14 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_http3_stream_unregister_notification";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_http3_stream_unregister_notification";
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v11, &type, &v19))
    goto LABEL_37;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_unregister_notification";
        v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http3_stream_unregister_notification";
        v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_http3_stream_unregister_notification";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  v12 = __nwlog_obj();
  v13 = type;
  if (os_log_type_enabled(v12, type))
  {
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http3_stream_unregister_notification";
    v14 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
  }
LABEL_37:
  if (v11)
    free(v11);
  return 0;
}

void nw_protocol_http3_add_alpn_to_quic_options(nw_protocol_options *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = nw_quic_stream_copy_shared_connection_options(a1);
  v2 = nw_quic_connection_copy_sec_protocol_options(v1);
  v3 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
  v4 = v3;
  if (v3 && xpc_array_get_count(v3))
  {
LABEL_20:
    xpc_release(v4);
    goto LABEL_21;
  }
  sec_protocol_options_add_transport_specific_application_protocol();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http3_add_alpn_to_quic_options";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      v8 = "%{public}s Missing \"h3\" alpn from quic options. Protocol http3 will stop adding it for you in the future si"
           "nce it prevents joining from working properly.";
LABEL_16:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      goto LABEL_17;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      v8 = "%{public}s Missing \"h3\" alpn from quic options. Protocol http3 will stop adding it for you in the future si"
           "nce it prevents joining from working properly., backtrace limit exceeded";
      goto LABEL_16;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    v7 = type;
    v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_17;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      v8 = "%{public}s Missing \"h3\" alpn from quic options. Protocol http3 will stop adding it for you in the future si"
           "nce it prevents joining from working properly., no backtrace";
      goto LABEL_16;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      v15 = 2082;
      v16 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s Missing \"h3\" alpn from quic options. Protocol http3 will stop adding it for you in the future since it prevents joining from working properly., dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
  }
LABEL_17:
  if (v5)
    free(v5);
  if (v4)
    goto LABEL_20;
LABEL_21:
  if (v1)
    os_release(v1);
  if (v2)
    os_release(v2);
}

NSObject *nw_http3_fix_quic_parameters(uint64_t a1, NSObject *a2, char a3, int a4)
{
  NSObject *v4;
  NSObject *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  NWConcrete_nw_protocol_options *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  unsigned __int8 *v21;
  nw_protocol_stack_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  NSObject *v27;
  int v28;
  char *v29;
  _BOOL4 v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  _BOOL4 v38;
  _QWORD v40[5];
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v31, &type, &v41))
      goto LABEL_82;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v32 = __nwlog_obj();
        v33 = type;
        if (!os_log_type_enabled(v32, type))
          goto LABEL_82;
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http3_fix_quic_parameters";
        v34 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_81;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v32 = __nwlog_obj();
      v33 = type;
      v36 = os_log_type_enabled(v32, type);
      if (!backtrace_string)
      {
        if (!v36)
          goto LABEL_82;
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http3_fix_quic_parameters";
        v34 = "%{public}s called with null http3, no backtrace";
        goto LABEL_81;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v44 = "nw_http3_fix_quic_parameters";
        v45 = 2082;
        v46 = backtrace_string;
        v37 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_182FBE000, v32, v33, v37, buf, 0x16u);
      }
LABEL_72:
      free(backtrace_string);
      goto LABEL_82;
    }
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_82;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v34 = "%{public}s called with null http3";
LABEL_81:
    _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
LABEL_82:
    if (v31)
      free(v31);
    return 0;
  }
  v4 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v31, &type, &v41))
      goto LABEL_82;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_82;
      *(_DWORD *)buf = 136446210;
      v44 = "nw_http3_fix_quic_parameters";
      v34 = "%{public}s called with null parameters";
      goto LABEL_81;
    }
    if (!v41)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_82;
      *(_DWORD *)buf = 136446210;
      v44 = "nw_http3_fix_quic_parameters";
      v34 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_81;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v38 = os_log_type_enabled(v32, type);
    if (backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v44 = "nw_http3_fix_quic_parameters";
        v45 = 2082;
        v46 = backtrace_string;
        v37 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (!v38)
      goto LABEL_82;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v34 = "%{public}s called with null parameters, no backtrace";
    goto LABEL_81;
  }
  if (a4)
  {
    v8 = a2;
    v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v8, 0, 1);

  }
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
  {
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136446978;
        v44 = "nw_http3_fix_quic_parameters";
        v45 = 2082;
        v46 = (char *)(a1 + 1289);
        v47 = 2080;
        v48 = " ";
        v49 = 1024;
        v50 = v28;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> http3 does not yet have output handler, cannot fix parameters", buf, 0x26u);
        return 0;
      }
    }
    return 0;
  }
  v10 = nw_parameters_copy_protocol_options_legacy(v4, *(nw_protocol **)(a1 + 32));
  v11 = v10;
  if (v10 && nw_protocol_options_is_quic_stream(v10))
  {
    v12 = nw_protocol_options_copy(v11);
    nw_quic_stream_set_is_unidirectional(v12, a3);
    nw_protocol_http3_add_alpn_to_quic_options((nw_protocol_options *)v12);
    v13 = nw_quic_stream_copy_shared_connection_options(v12);
    v14 = nw_quic_connection_copy_sec_protocol_options(v13);
    if (*(_BYTE *)(a1 + 1288))
    {
      sec_protocol_options_set_new_session_ticket_request();
      sec_protocol_options_set_resumed_session_ticket_request();
    }
    if ((*(_WORD *)(a1 + 1373) & 0x20) != 0 && uuid_is_null((const unsigned __int8 *)(a1 + 848))
      || *(_QWORD *)(a1 + 864) && *(_QWORD *)(a1 + 872))
    {
      v15 = nw_context_copy_workloop(*(void **)(a1 + 1256));
      v16 = *(_QWORD *)(a1 + 1040);
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 0x40000000;
      v40[2] = ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke;
      v40[3] = &unk_1E14A8208;
      v40[4] = v16;
      nw_quic_connection_set_session_state_update_block(v13, v40, v15);
      if (v15)
        dispatch_release(v15);
    }
    if ((*(_WORD *)(a1 + 1373) & 0x20) != 0 && a4)
    {
      v17 = *(void **)(a1 + 1136);
      if (v17)
      {
        v18 = *(void **)(a1 + 1144);
        if (v18)
          nw_quic_connection_set_session_state(v13, v17, v18);
      }
      sec_protocol_options_set_tls_early_data_enabled();
      sec_protocol_options_set_tls_tickets_enabled(v14, 1);
    }
    if (v14)
      os_release(v14);
    if (v13)
      os_release(v13);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
    v19 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
    nw_parameters_set_protocol_instance(v12, v20, v9);
    if (v19)
      os_release(v19);
    nw_protocol_options_inherit_log_id(v11, v12);
    v21 = v11;
    v21[153] = 1;

    v22 = nw_parameters_copy_default_protocol_stack(v4);
    nw_protocol_stack_replace_protocol_with_handle(v22, v9, v12);
    if (v22)
      os_release(v22);
    if (v12)
      os_release(v12);
LABEL_54:
    os_release(v11);
    return v4;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v44 = "nw_http3_fix_quic_parameters";
  v23 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v41 = 0;
  if (!__nwlog_fault(v23, &type, &v41))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_51;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v26 = "%{public}s No quic below http3";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    goto LABEL_51;
  }
  if (!v41)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_51;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v26 = "%{public}s No quic below http3, backtrace limit exceeded";
    goto LABEL_50;
  }
  v29 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v24 = gLogObj;
  v25 = type;
  v30 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v29)
  {
    if (!v30)
      goto LABEL_51;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http3_fix_quic_parameters";
    v26 = "%{public}s No quic below http3, no backtrace";
    goto LABEL_50;
  }
  if (v30)
  {
    *(_DWORD *)buf = 136446466;
    v44 = "nw_http3_fix_quic_parameters";
    v45 = 2082;
    v46 = v29;
    _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s No quic below http3, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v29);
LABEL_51:
  if (v23)
    free(v23);
  if (v11)
    goto LABEL_54;
  return v4;
}

void sub_18397207C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke(uint64_t a1, NSObject *a2, NSObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_data_t *v11;
  NSObject *v12;
  dispatch_data_t v13;
  NSObject *alloc;
  _DWORD *v15;
  NSObject *concat;
  NSObject *v17;
  NSObject *v18;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  dispatch_data_t v23;
  _BYTE buf[24];
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v5)
  {
    v6 = v5;
    if (((*(unsigned __int16 *)(v5 + 1373) | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v8 = *(_DWORD *)(v6 + 1280);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http3_fix_quic_parameters_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v6 + 1289;
        *(_WORD *)&buf[22] = 2080;
        v25 = (void (*)(uint64_t, uint64_t))" ";
        LOWORD(v26) = 1024;
        *(_DWORD *)((char *)&v26 + 2) = v8;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> received new TLS session ticket", buf, 0x26u);
      }
    }
    v9 = *(NSObject **)(v6 + 1160);
    if (v9)
    {
      dispatch_release(v9);
      *(_QWORD *)(v6 + 1160) = 0;
    }
    v10 = *(NSObject **)(v6 + 1168);
    if (v10)
    {
      dispatch_release(v10);
      *(_QWORD *)(v6 + 1168) = 0;
    }
    dispatch_retain(a2);
    dispatch_retain(a3);
    *(_QWORD *)(v6 + 1160) = a2;
    *(_QWORD *)(v6 + 1168) = a3;
    if (*(_QWORD *)(v6 + 864) && *(_QWORD *)(v6 + 872))
    {
      v11 = &v23;
      v12 = *(NSObject **)(v6 + 1176);
      if (!v12)
        v12 = *(NSObject **)(v6 + 1152);
      v13 = 0;
      v20 = 0;
      v21 = &v20;
      v22 = 0x2000000000;
      v23 = 0;
      if (a3 && a2 && v12)
      {
        *(_QWORD *)buf = 0;
        alloc = dispatch_data_create_alloc();
        v15 = *(_DWORD **)buf;
        **(_DWORD **)buf = 9685181;
        v15[1] = dispatch_data_get_size(v12);
        v15[2] = dispatch_data_get_size(a2);
        v15[3] = dispatch_data_get_size(a3);
        concat = dispatch_data_create_concat(alloc, v12);
        if (alloc)
          dispatch_release(alloc);
        v17 = dispatch_data_create_concat(concat, a2);
        if (concat)
          dispatch_release(concat);
        v13 = dispatch_data_create_concat(v17, a3);
        if (v17)
          dispatch_release(v17);
        v11 = (dispatch_data_t *)(v21 + 3);
      }
      v23 = v13;
      if (*v11)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3002000000;
        v25 = __Block_byref_object_copy__110;
        v26 = __Block_byref_object_dispose__111;
        v27 = 0;
        v27 = _Block_copy(*(const void **)(v6 + 864));
        v18 = *(NSObject **)(v6 + 872);
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 0x40000000;
        v19[2] = ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke_112;
        v19[3] = &unk_1E14A81E0;
        v19[4] = buf;
        v19[5] = &v20;
        dispatch_async(v18, v19);
        _Block_object_dispose(buf, 8);
      }
      _Block_object_dispose(&v20, 8);
    }
    else
    {
      nw_http3_try_persist_0rtt_state(v6);
    }
  }
}

void __Block_byref_object_copy__110(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__111(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke_112(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 16))();
  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = 0;
  }
  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

uint64_t ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_protocol_metadata_is_http(a2);
  return 0;
}

BOOL ___ZL64nw_http3_framer_finalize_output_frames_for_multiple_http3_framesP15nw_http3_frameryP16nw_frame_array_sPjS3__block_invoke(_QWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  void *v7;
  _BOOL8 result;
  int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD v15[2];
  const char *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = nw_frame_unclaimed_length(a2);
  if (!v4 && !a1[4])
    return 1;
  v15[0] = 0;
  nw_frame_get_buffer((uint64_t)a2, v15);
  v5 = a1[4];
  if (v5 < 0x40)
  {
    v6 = 1;
LABEL_13:
    if (v15[0] >> 30)
      v9 = 8;
    else
      v9 = 4;
    if (v15[0] >= 0x4000u)
      v10 = v9;
    else
      v10 = 2;
    if (v15[0] >= 0x40u)
      v11 = v10;
    else
      v11 = 1;
    v12 = nw_http3_framer_write_http3_frame_header(a1[5], a1[4], v4, v11 + v6, (uint64_t)a2);
    v13 = (_DWORD *)a1[6];
    if (v13)
      *v13 += v4;
    v14 = (_DWORD *)a1[7];
    if (v14)
      *v14 += v12 + v4;
    return 1;
  }
  if (v5 < 0x4000)
  {
    v6 = 2;
    goto LABEL_13;
  }
  if (!(v5 >> 30))
  {
    v6 = 4;
    goto LABEL_13;
  }
  if (!(v5 >> 62))
  {
    v6 = 8;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v15[1] = 136446466;
  v16 = "_http_vle_length";
  v17 = 2048;
  v18 = v5;
  v7 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    v6 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_159(uint64_t *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = nw_frame_copy_metadata_for_protocol(a2, a1[4]);
  if (v4)
  {
    v5 = v4;
    if (nw_http_metadata_is_capsule(v4))
    {
      v6 = *(_QWORD *)(a1[5] + 536);
      if (!v6)
      {
        *(_QWORD *)(a1[5] + 536) = nw_array_create();
        v6 = *(_QWORD *)(a1[5] + 536);
      }
      nw_array_append(v6, v5);
    }
    os_release(v5);
  }
  if (*(void (**)(nw_frame *, BOOL, void *))(a2 + 80) == nw_protocol_http3_capsule_frame_finalizer)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD **)(a2 + 40);
    if (v7)
    {
      *(_QWORD *)(v7 + 40) = v8;
      v8 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(a1[6] + 8) = v8;
    }
    *v8 = v7;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
  }
  return 1;
}

void nw_http3_stream_send_pending_capsules(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[6];

  v1 = *(_QWORD *)(a1 + 536);
  if (v1 && *(_QWORD *)(v1 + 16) != *(_QWORD *)(v1 + 24))
  {
    v3 = nw_array_create();
    v4 = *(unsigned __int8 **)(a1 + 536);
    v5 = MEMORY[0x1E0C809B0];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke;
    v7[3] = &__block_descriptor_tmp_141_61480;
    v7[4] = a1;
    v7[5] = v3;
    nw_array_apply(v4, (uint64_t)v7);
    v6[0] = v5;
    v6[1] = 0x40000000;
    v6[2] = ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_142;
    v6[3] = &__block_descriptor_tmp_143;
    v6[4] = a1;
    nw_array_apply((unsigned __int8 *)v3, (uint64_t)v6);
    if (v3)
      os_release((void *)v3);
  }
}

BOOL ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t capsule_type;
  size_t size;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  _BOOL8 result;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  os_log_type_t v24;
  const char *v25;
  char *backtrace_string;
  _BOOL4 v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  char *v43;
  _BOOL4 v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *log;
  uint64_t v60;
  void *object;
  unint64_t v62;
  _QWORD v63[2];
  uint64_t (*v64)(_QWORD *);
  void *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  __n128 (*v76)(uint64_t, uint64_t);
  uint64_t (*v77)();
  _DWORD *v78[2];
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  id v82;
  char v83;
  os_log_type_t v84;
  uint8_t buf[4];
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  size_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  char *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  capsule_type = nw_http_metadata_get_capsule_type(a3);
  v79 = 0;
  v80 = &v79;
  v81 = 0x2000000000;
  v82 = 0;
  object = a3;
  v82 = nw_http_metadata_copy_capsule_data(a3);
  v73 = 0;
  v74 = &v73;
  v75 = 0x3802000000;
  v76 = __Block_byref_object_copy__60023;
  v77 = __Block_byref_object_dispose__60024;
  v78[0] = 0;
  v78[1] = v78;
  size = dispatch_data_get_size((dispatch_data_t)v80[3]);
  v69 = 0;
  v70 = &v69;
  v71 = 0x2000000000;
  v72 = size;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(v7 + 160);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 24)) == 0 || !*(_QWORD *)(v9 + 88))
  {
    v58 = __nwlog_obj();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v86 = "nw_http3_framer_get_output_frames_for_capsule";
      v87 = 2048;
      v88 = (const char *)v8;
      _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_ERROR, "%{public}s Output handler (%p)'s get_output_frames callback is not properly set", buf, 0x16u);
    }
    goto LABEL_82;
  }
  v62 = capsule_type;
  if (capsule_type >= 0x40)
  {
    if (capsule_type >= 0x4000)
    {
      if (capsule_type >> 30)
      {
        if (capsule_type >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v86 = "_http_vle_length";
          v87 = 2048;
          v88 = (const char *)capsule_type;
          v11 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v11);
          if (result)
            goto LABEL_112;
          free(v11);
          v10 = 0;
        }
        else
        {
          v10 = 8;
        }
      }
      else
      {
        v10 = 4;
      }
    }
    else
    {
      v10 = 2;
    }
  }
  else
  {
    v10 = 1;
  }
  if (size >> 30)
    v13 = 8;
  else
    v13 = 4;
  if (size >= 0x4000)
    v14 = v13;
  else
    v14 = 2;
  if (size >= 0x40)
    v15 = v14;
  else
    v15 = 1;
  v16 = v15 + v10;
  v17 = v15 + v10 + size;
  if (v17 >> 30)
    v18 = 9;
  else
    v18 = 5;
  if (v17 >= 0x4000)
    v19 = v18;
  else
    v19 = 3;
  if (v17 >= 0x40)
    v20 = v19;
  else
    v20 = 2;
  v21 = v17 + v20;
  if (__CFADD__(v17, (_DWORD)v20))
  {
    v60 = a1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    v86 = "nw_http3_framer_get_output_frames_for_capsule";
    v87 = 2082;
    v88 = "frame_length";
    v89 = 2048;
    v90 = v20;
    v91 = 2048;
    v92 = v21;
    v22 = (char *)_os_log_send_and_compose_impl();
    v84 = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v22, &v84, &v83))
    {
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = gLogObj;
        v24 = v84;
        if (os_log_type_enabled((os_log_t)gLogObj, v84))
        {
          *(_DWORD *)buf = 136446978;
          v86 = "nw_http3_framer_get_output_frames_for_capsule";
          v87 = 2082;
          v88 = "frame_length";
          v89 = 2048;
          v90 = v20;
          v91 = 2048;
          v92 = v21;
          v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_45:
          v28 = v23;
LABEL_46:
          _os_log_impl(&dword_182FBE000, v28, v24, v25, buf, 0x2Au);
        }
      }
      else if (v83)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = v84;
        log = gLogObj;
        v27 = os_log_type_enabled((os_log_t)gLogObj, v84);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136447234;
            v86 = "nw_http3_framer_get_output_frames_for_capsule";
            v87 = 2082;
            v88 = "frame_length";
            v89 = 2048;
            v90 = v20;
            v91 = 2048;
            v92 = v21;
            v93 = 2082;
            v94 = backtrace_string;
            _os_log_impl(&dword_182FBE000, log, v24, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_47;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446978;
          v86 = "nw_http3_framer_get_output_frames_for_capsule";
          v87 = 2082;
          v88 = "frame_length";
          v89 = 2048;
          v90 = v20;
          v91 = 2048;
          v92 = v21;
          v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          v28 = log;
          goto LABEL_46;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = gLogObj;
        v24 = v84;
        if (os_log_type_enabled((os_log_t)gLogObj, v84))
        {
          *(_DWORD *)buf = 136446978;
          v86 = "nw_http3_framer_get_output_frames_for_capsule";
          v87 = 2082;
          v88 = "frame_length";
          v89 = 2048;
          v90 = v20;
          v91 = 2048;
          v92 = v21;
          v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_45;
        }
      }
    }
LABEL_47:
    if (v22)
      free(v22);
    v21 = 0xFFFFFFFFLL;
    a1 = v60;
  }
  if (!(*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)(v8 + 24)
                                                                                              + 88))(v8, *(_QWORD *)(v7 + 152), v21, v21, 0xFFFFFFFFLL, v78))
  {
LABEL_82:
    v45 = 0;
LABEL_109:
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v73, 8);
    _Block_object_dispose(&v79, 8);
    return v45;
  }
  nw_http3_framer_claim_http3_frame_header(v16 + v20, v78[0]);
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 0x40000000;
  v64 = (uint64_t (*)(_QWORD *))___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_2;
  v65 = &unk_1E14A83F8;
  v66 = &v79;
  v67 = &v69;
  v68 = &v73;
  v29 = v74[5];
  do
  {
    if (!v29)
      break;
    v30 = *(_QWORD *)(v29 + 32);
    v31 = v64(v63);
    v29 = v30;
  }
  while ((v31 & 1) != 0);
  if (v80[3])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_http3_stream_send_pending_capsules_block_invoke";
    v32 = (char *)_os_log_send_and_compose_impl();
    v84 = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v32, &v84, &v83))
      goto LABEL_80;
    if (v84 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      v34 = v84;
      if (!os_log_type_enabled((os_log_t)gLogObj, v84))
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v86 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v35 = "%{public}s Not enough space in capsule frames";
    }
    else if (v83)
    {
      v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      v34 = v84;
      v44 = os_log_type_enabled((os_log_t)gLogObj, v84);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v86 = "nw_http3_stream_send_pending_capsules_block_invoke";
          v87 = 2082;
          v88 = v43;
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s Not enough space in capsule frames, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v43);
        goto LABEL_80;
      }
      if (!v44)
      {
LABEL_80:
        if (v32)
          free(v32);
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446210;
      v86 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v35 = "%{public}s Not enough space in capsule frames, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      v34 = v84;
      if (!os_log_type_enabled((os_log_t)gLogObj, v84))
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v86 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v35 = "%{public}s Not enough space in capsule frames, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v33, v34, v35, buf, 0xCu);
    goto LABEL_80;
  }
  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(_QWORD *)(v36 + 160);
  if (!v37 || (v38 = *(_QWORD *)(v37 + 24)) == 0 || !*(_QWORD *)(v38 + 96))
  {
LABEL_106:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v57 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      v86 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v87 = 2048;
      v88 = (const char *)v62;
      v89 = 2048;
      v90 = size;
      _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_INFO, "%{public}s Sending capsule type 0x%llx length %zu", buf, 0x20u);
    }
    nw_array_append(*(_QWORD *)(a1 + 40), object);
    v45 = 1;
    goto LABEL_109;
  }
  v39 = *((_DWORD *)v70 + 6);
  v40 = v74;
  if (v62 < 0x40)
  {
    v41 = a1;
    v42 = 1;
LABEL_87:
    if (v39 >> 30)
      v48 = 8;
    else
      v48 = 4;
    if (v39 >= 0x4000)
      v49 = v48;
    else
      v49 = 2;
    if (v39 >= 0x40)
      v50 = v49;
    else
      v50 = 1;
    v51 = v50 + v42;
    v52 = v50 + v42 + v39;
    if (v52 >> 30)
      v53 = 9;
    else
      v53 = 5;
    if (v52 >= 0x4000)
      v54 = v53;
    else
      v54 = 3;
    if (v52 >= 0x40)
      v55 = v54;
    else
      v55 = 2;
    v56 = v40[5];
    nw_http3_framer_write_http3_frame_header(v36 + 128, v62, v39, v51, v56);
    nw_http3_framer_write_http3_frame_header(v36 + 128, 0, v52, v55, v56);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v37 + 24) + 96))(v37, v40 + 5);
    a1 = v41;
    goto LABEL_106;
  }
  if (v62 < 0x4000)
  {
    v41 = a1;
    v42 = 2;
    goto LABEL_87;
  }
  if (!(v62 >> 30))
  {
    v41 = a1;
    v42 = 4;
    goto LABEL_87;
  }
  if (!(v62 >> 62))
  {
    v41 = a1;
    v42 = 8;
    goto LABEL_87;
  }
  v46 = __nwlog_obj();
  os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v86 = "_http_vle_length";
  v87 = 2048;
  v88 = (const char *)v62;
  v47 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v47);
  if (!result)
  {
    v41 = a1;
    free(v47);
    v42 = 0;
    goto LABEL_87;
  }
LABEL_112:
  __break(1u);
  return result;
}

uint64_t ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_142(uint64_t a1, uint64_t a2, uint64_t a3)
{
  nw_array_remove_object(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 536), a3);
  return 1;
}

BOOL ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  NSObject *v5;
  _BOOL8 v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char *v17;
  _BOOL4 v18;
  char v20;
  unsigned int offset;
  os_log_type_t offset_7;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_stream_send_pending_capsules_block_invoke_2";
    v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          v10 = "%{public}s Capsule frame does not support external data";
LABEL_32:
          _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
        }
      }
      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Capsule frame does not support external data, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_33;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          v10 = "%{public}s Capsule frame does not support external data, no backtrace";
          goto LABEL_32;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          v10 = "%{public}s Capsule frame does not support external data, backtrace limit exceeded";
          goto LABEL_32;
        }
      }
    }
LABEL_33:
    if (v7)
      free(v7);
    return 0;
  }
  offset = 0;
  nw_frame_set_external_data(a2, *(dispatch_data_t *)(*(_QWORD *)(a1[4] + 8) + 24), &offset);
  v4 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v5 = *(NSObject **)(*(_QWORD *)(a1[4] + 8) + 24);
  v6 = offset < v4;
  if (offset < v4)
  {
    if (v5)
    {
      dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[4] + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = dispatch_data_create_subrange(v5, offset, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = dispatch_data_create_subrange(0, offset, 0xFFFFFFFFFFFFFFFFLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= offset;
    return v6;
  }
  if (v5)
  {
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[4] + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
  if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48) + 8) != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
    v11 = (char *)_os_log_send_and_compose_impl();
    offset_7 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &offset_7, &v20))
      goto LABEL_42;
    if (offset_7 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v14 = "%{public}s Too much space in capsule frames";
    }
    else if (v20)
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      v18 = os_log_type_enabled((os_log_t)gLogObj, offset_7);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          v25 = 2082;
          v26 = v17;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Too much space in capsule frames, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        goto LABEL_42;
      }
      if (!v18)
      {
LABEL_42:
        if (v11)
          free(v11);
        return v6;
      }
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v14 = "%{public}s Too much space in capsule frames, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = offset_7;
      if (!os_log_type_enabled((os_log_t)gLogObj, offset_7))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
      v14 = "%{public}s Too much space in capsule frames, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_42;
  }
  return v6;
}

void nw_protocol_http3_capsule_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
  if (a1)
    os_release(a1);
}

BOOL ___ZL59nw_http3_framer_get_output_frames_for_multiple_http3_framesP15nw_http3_frameryjjjP16nw_frame_array_s_block_invoke(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  void *v6;
  _BOOL8 result;
  int v8;
  int v9;
  int v10;
  _DWORD v11[2];
  const char *v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  nw_frame_get_buffer((uint64_t)a2, v11);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= 0x40)
  {
    if (v4 >= 0x4000)
    {
      if (v4 >> 30)
      {
        if (v4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          v11[1] = 136446466;
          v12 = "_http_vle_length";
          v13 = 2048;
          v14 = v4;
          v6 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v6);
          if (result)
          {
            __break(1u);
            return result;
          }
          free(v6);
          v5 = 0;
        }
        else
        {
          v5 = 8;
        }
      }
      else
      {
        v5 = 4;
      }
    }
    else
    {
      v5 = 2;
    }
  }
  else
  {
    v5 = 1;
  }
  if (v11[0] >> 30)
    v8 = 8;
  else
    v8 = 4;
  if (v11[0] >= 0x4000u)
    v9 = v8;
  else
    v9 = 2;
  if (v11[0] >= 0x40u)
    v10 = v9;
  else
    v10 = 1;
  nw_http3_framer_claim_http3_frame_header(v10 + v5, a2);
  return 1;
}

BOOL ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  int v11;
  const void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *backtrace_string;
  _BOOL4 v40;
  unsigned int v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  _BOOL4 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 104))
    v5 = *(_QWORD *)(v4 + 216) == 0;
  else
    v5 = 0;
  if (*(_DWORD *)(v4 + 372) != 8)
  {
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_DWORD *)(*(_QWORD *)(v4 + 336) + 1280);
        v10 = *(_QWORD *)(v4 + 240);
        v11 = *(_DWORD *)(v4 + 372);
        *(_DWORD *)buf = 136447490;
        v45 = "nw_http3_stream_frame_received_for_capsule";
        v46 = 2082;
        v47 = (char *)(v4 + 636);
        v48 = 2080;
        v49 = " ";
        v50 = 1024;
        v51 = v9;
        v52 = 2048;
        v53 = v10;
        v54 = 1024;
        LODWORD(v55) = v11;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> processing capsule data in incorrect state %u", buf, 0x36u);
      }
    }
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 88);
  if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v28 = *(_QWORD *)(a1 + 96);
      v29 = __nwlog_obj();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(_DWORD *)(*(_QWORD *)(v4 + 336) + 1280);
        v31 = *(_QWORD *)(v4 + 240);
        *(_DWORD *)buf = 136448002;
        v45 = "nw_http3_stream_frame_received_for_capsule";
        v46 = 2082;
        v47 = (char *)(v4 + 636);
        v48 = 2080;
        v49 = " ";
        v50 = 1024;
        v51 = v30;
        v52 = 2048;
        v53 = v31;
        v54 = 2048;
        v55 = v6;
        v56 = 2048;
        v57 = v28;
        v58 = 1024;
        v59 = v5;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> received frame type %llu, length %llu, complete %{BOOL}d", buf, 0x4Au);
      }
    }
  }
  if (v6 > 0xD)
    goto LABEL_15;
  if (((1 << v6) & 0x2098) != 0)
  {
LABEL_16:
    nw_http3_fail_all_streams(*(nw_protocol **)(v4 + 336), 261);
    return 0;
  }
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = 0;
      *(_DWORD *)(v4 + 372) = 5;
      return v7;
    }
LABEL_15:
    if (v6 == 4287504053)
      goto LABEL_16;
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        v32 = __nwlog_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v33 = *(_DWORD *)(*(_QWORD *)(v4 + 336) + 1280);
          v34 = *(_QWORD *)(v4 + 240);
          *(_DWORD *)buf = 136447234;
          v45 = "nw_http3_stream_frame_received_for_capsule";
          v46 = 2082;
          v47 = (char *)(v4 + 636);
          v48 = 2080;
          v49 = " ";
          v50 = 1024;
          v51 = v33;
          v52 = 2048;
          v53 = v34;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> dropping unknown frame type", buf, 0x30u);
        }
      }
    }
    nw_frame_finalize(a2);
  }
  v41 = 0;
  v13 = (const void *)nw_frame_unclaimed_bytes(a2, &v41);
  if (v13)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
    v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (16 - v16 >= (unint64_t)v41)
      v17 = v41;
    else
      v17 = 16 - v16;
    memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + v16), v13, v17);
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v17;
    v18 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v18)
    {
      v19 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v20 = *(unsigned __int8 *)v18;
        if (v20 > 0x3F)
        {
          v26 = v20 >> 6;
          if (v26 == 2)
          {
            if (v19 < 4)
              return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
            v20 = bswap32(*v18 & 0xFFFFFF7F);
            v21 = 4;
          }
          else if (v26 == 1)
          {
            if (v19 < 2)
              return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
            v20 = bswap32(*(_WORD *)v18 & 0xFFBF) >> 16;
            v21 = 2;
          }
          else
          {
            if (v19 < 8)
              return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
            v20 = bswap64(*(_QWORD *)v18 & 0xFFFFFFFFFFFFFF3FLL);
            v21 = 8;
          }
        }
        else
        {
          v21 = 1;
        }
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v20;
        v22 = v21;
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v21;
        v23 = v19 - v21;
        if (v23)
        {
          v24 = *((unsigned __int8 *)v18 + v22);
          if (v24 > 0x3F)
          {
            v27 = v24 >> 6;
            if (v27 == 2)
            {
              if (v23 < 4)
                return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
              v24 = bswap32(*(_DWORD *)((char *)v18 + v22) & 0xFFFFFF7F);
              v25 = 4;
            }
            else if (v27 == 1)
            {
              if (v23 < 2)
                return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
              v24 = bswap32(*(_WORD *)((_BYTE *)v18 + v22) & 0xFFBF) >> 16;
              v25 = 2;
            }
            else
            {
              if (v23 < 8)
                return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
              v24 = bswap64(*(_QWORD *)((_BYTE *)v18 + v22) & 0xFFFFFFFFFFFFFF3FLL);
              v25 = 8;
            }
          }
          else
          {
            v25 = 1;
          }
          v7 = 0;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v24;
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += v25;
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          return v7;
        }
      }
      return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "_http_vle_decode";
    v35 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v35, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (!os_log_type_enabled(v36, type))
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v45 = "_http_vle_decode";
        v38 = "%{public}s called with null *buffer";
        goto LABEL_73;
      }
      if (!v42)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (!os_log_type_enabled(v36, type))
          goto LABEL_74;
        *(_DWORD *)buf = 136446210;
        v45 = "_http_vle_decode";
        v38 = "%{public}s called with null *buffer, backtrace limit exceeded";
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v40 = os_log_type_enabled(v36, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "_http_vle_decode";
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_74;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "_http_vle_decode";
        v38 = "%{public}s called with null *buffer, no backtrace";
LABEL_73:
        _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
      }
    }
LABEL_74:
    if (v35)
      free(v35);
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
  }
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD **)(a2 + 40);
  if (v14)
  {
    *(_QWORD *)(v14 + 40) = v15;
    v15 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 224) = v15;
  }
  *v15 = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = 1;
  nw_frame_finalize(a2);
  return v7;
}

BOOL ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_146(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  dispatch_data_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  dispatch_data_t v17;
  NSObject *v18;
  uint64_t v19;
  dispatch_data_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  dispatch_data_t concat;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  size_t size;

  LODWORD(size) = 0;
  v4 = (const void *)nw_frame_unclaimed_bytes(a2, &size);
  v6 = *(_QWORD *)(a1[4] + 8);
  v7 = *(unsigned __int16 *)(v6 + 24);
  if (*(_WORD *)(v6 + 24))
  {
    if (size < v7)
    {
      *(_WORD *)(v6 + 24) = v7 - size;
      v8 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD **)(a2 + 40);
      if (v8)
      {
        *(_QWORD *)(v8 + 40) = v9;
        v9 = *(_QWORD **)(a2 + 40);
      }
      else
      {
        *(_QWORD *)(a1[7] + 224) = v9;
      }
      *v9 = v8;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v19 = 1;
      nw_frame_finalize(a2);
      return v19;
    }
    nw_frame_claim(a2, v5, v7, 0);
    v4 = (const void *)nw_frame_unclaimed_bytes(a2, &size);
    *(_WORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
  v10 = *(_QWORD *)(a1[5] + 8);
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    return 0;
  v12 = size;
  if (v11 <= size)
  {
    v20 = dispatch_data_create(v4, v11, 0, 0);
    if (v20)
    {
      v22 = v20;
      v23 = *(_QWORD *)(a1[6] + 8);
      v24 = *(NSObject **)(v23 + 24);
      if (v24)
      {
        concat = dispatch_data_create_concat(v24, v22);
        v26 = *(NSObject **)(*(_QWORD *)(a1[6] + 8) + 24);
        if (v26)
        {
          dispatch_release(v26);
          *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
        }
        dispatch_release(v22);
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = concat;
      }
      else
      {
        *(_QWORD *)(v23 + 24) = v22;
      }
    }
    nw_frame_claim(a2, v21, *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
    v19 = 0;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  else
  {
    *(_QWORD *)(v10 + 24) = v11 - size;
    v13 = dispatch_data_create(v4, v12, 0, 0);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)(a1[6] + 8);
      v16 = *(NSObject **)(v15 + 24);
      if (v16)
      {
        v17 = dispatch_data_create_concat(v16, v14);
        v18 = *(NSObject **)(*(_QWORD *)(a1[6] + 8) + 24);
        if (v18)
        {
          dispatch_release(v18);
          *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
        }
        dispatch_release(v14);
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v17;
      }
      else
      {
        *(_QWORD *)(v15 + 24) = v14;
      }
    }
    v27 = *(_QWORD *)(a2 + 32);
    v28 = *(_QWORD **)(a2 + 40);
    if (v27)
    {
      *(_QWORD *)(v27 + 40) = v28;
      v28 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(a1[7] + 224) = v28;
    }
    *v28 = v27;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    return *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) != 0;
  }
  return v19;
}

BOOL ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int is_metadata_complete;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  _QWORD **v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  _BOOL4 v18;
  int v19;
  _BYTE *v20;
  int v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  const char *v26;
  unsigned int v27;
  int v28;
  int v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  const char *v34;
  char *v35;
  _BOOL4 v36;
  int v37;
  char *backtrace_string;
  _BOOL4 v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  uint64_t *v55;
  int v56;
  int v57;
  int v58;
  NSObject *v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  int v87;
  int v89;
  NSObject *v90;
  _BOOL4 v91;
  uint64_t v92;
  const char *v93;
  const char *v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  char *v99;
  NSObject *v100;
  os_log_type_t v101;
  const char *v102;
  NSObject *v103;
  NSObject *v104;
  const char *v105;
  const char *v106;
  int v107;
  uint64_t v108;
  char *v109;
  _BOOL4 v110;
  BOOL v111;
  const char *v112;
  const char *v113;
  int v114;
  int v115;
  uint64_t v116;
  NSObject *objectb;
  NSObject *object;
  NSObject *objecta;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  char v127;
  os_log_type_t type;
  _BYTE buf[32];
  _QWORD *v130;
  uint64_t v131;
  __int16 v132;
  _BYTE v133[10];
  unint64_t v134;
  __int16 v135;
  _BOOL4 v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v59 = __nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        v60 = *(_QWORD *)(a1 + 48);
        v61 = (const char *)(v60 + 636);
        v62 = "";
        v63 = v60 == 0;
        if (!v60)
          v61 = "";
        v64 = *(_DWORD *)(*(_QWORD *)(v60 + 336) + 1280);
        v65 = *(_QWORD *)(v60 + 240);
        if (!v63)
          v62 = " ";
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v61;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v62;
        LOWORD(v130) = 1024;
        *(_DWORD *)((char *)&v130 + 2) = v64;
        HIWORD(v130) = 2048;
        v131 = v65;
        v132 = 2048;
        *(_QWORD *)v133 = a2;
        _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> processing frame %p", buf, 0x3Au);
      }
    }
  }
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD **)(a2 + 40);
  v7 = (_QWORD *)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224) = v6;
  }
  *v6 = v5;
  *v7 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  is_metadata_complete = nw_frame_is_metadata_complete(a2);
  v9 = is_metadata_complete;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 84))
  {
    v13 = *(_QWORD *)(v10 + 216) == 0;
    v14 = (_QWORD **)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 72);
    v16 = *(_DWORD *)(a1 + 80);
    v17 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v18 = v10 == 0;
  }
  else
  {
    v18 = 0;
    v14 = (_QWORD **)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 72);
    v16 = *(_DWORD *)(a1 + 80);
    v17 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (!v10)
    {
      v19 = 1;
      goto LABEL_12;
    }
    v13 = 0;
  }
  v19 = v18;
  v18 = v13;
  if ((*(_WORD *)(v10 + 736) & 0x800) != 0)
    goto LABEL_13;
LABEL_12:
  if (!gLogDatapath)
  {
LABEL_13:
    if (v11 > 0xD)
      goto LABEL_87;
    goto LABEL_14;
  }
  v124 = v16;
  v121 = *(_QWORD *)(a1 + 64);
  v126 = is_metadata_complete;
  object = __nwlog_obj();
  if (os_log_type_enabled(object, OS_LOG_TYPE_DEBUG))
  {
    v66 = (const char *)(v10 + 636);
    v67 = "";
    v68 = *(_DWORD *)(*(_QWORD *)(v10 + 336) + 1280);
    v69 = *(_QWORD *)(v10 + 240);
    if (v19)
      v66 = "";
    else
      v67 = " ";
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v66;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = v67;
    LOWORD(v130) = 1024;
    *(_DWORD *)((char *)&v130 + 2) = v68;
    HIWORD(v130) = 2048;
    v131 = v69;
    v132 = 2048;
    *(_QWORD *)v133 = v11;
    *(_WORD *)&v133[8] = 2048;
    v134 = v121;
    v135 = 1024;
    v136 = v18;
    _os_log_impl(&dword_182FBE000, object, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> received frame type %llu, length %llu, complete %{BOOL}d", buf, 0x4Au);
    v12 = v121;
    v9 = v126;
  }
  else
  {
    v9 = v126;
    v12 = v121;
  }
  v16 = v124;
  if (v11 > 0xD)
    goto LABEL_87;
LABEL_14:
  if (((1 << v11) & 0x2098) != 0)
  {
LABEL_88:
    v70 = v9;
    nw_http3_fail_all_streams(*(nw_protocol **)(v10 + 336), 261);
    v9 = v70;
    v47 = 2;
    v20 = (_BYTE *)&unk_1ECD84000;
    goto LABEL_95;
  }
  if (v11)
  {
    if (v11 == 1)
    {
      v20 = (_BYTE *)&unk_1ECD84000;
      v125 = v9;
      switch(*(_DWORD *)(v10 + 372))
      {
        case 0:
          v42 = v16;
          v43 = v12;
          *(_DWORD *)(v10 + 372) = 1;
          v44 = *(_QWORD *)(v10 + 336);
          if (v44 && *(_WORD *)(v44 + 1284))
            *(_WORD *)(v44 + 1284) = 0;
          *(_QWORD *)buf = _nw_http_parsed_fields_create();
          nw::retained_ptr<nw_endpoint *>::operator=(v10 + 504, buf);
          v12 = v43;
          v16 = v42;
          goto LABEL_47;
        case 1:
LABEL_47:
          v122 = v16;
          v45 = v12;
          nw_http3_stream_handle_fields(v10, v12, a2, v18);
          v47 = v46;
          v48 = *(_QWORD *)(v10 + 376);
          if (v48)
          {
            *(_QWORD *)(v48 + 32) = 0;
            v49 = *(_QWORD **)(v15 + 8);
            *(_QWORD *)(v48 + 40) = v49;
            *v49 = v48;
            *(_QWORD *)(v15 + 8) = v48 + 32;
            ++*v17;
            *(_QWORD *)(v10 + 376) = 0;
          }
          if (v18)
          {
            v50 = nw_http3_encoder_stream_get_and_reset_received_size(*(_QWORD *)(v10 + 336));
            nw_http_transaction_metadata_increment_inbound_header_size(*(void **)(v10 + 392), v45 + v122 + v50);
          }
          goto LABEL_54;
        case 2:
        case 3:
        case 6:
        case 7:
        case 8:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = *(_DWORD *)(v10 + 372);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v21;
          v22 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v127 = 0;
          if (!__nwlog_fault(v22, &type, &v127))
            goto LABEL_71;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = gLogObj;
            v24 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_71;
            v25 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            v26 = "%{public}s Unexpected input state %d";
LABEL_70:
            _os_log_impl(&dword_182FBE000, v23, v24, v26, buf, 0x12u);
            goto LABEL_71;
          }
          if (!v127)
          {
            v23 = __nwlog_obj();
            v24 = type;
            if (!os_log_type_enabled(v23, type))
              goto LABEL_71;
            v56 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v56;
            v26 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
            goto LABEL_70;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v23 = __nwlog_obj();
          v24 = type;
          v39 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            v20 = (_BYTE *)&unk_1ECD84000;
            if (!v39)
              goto LABEL_71;
            v58 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v58;
            v26 = "%{public}s Unexpected input state %d, no backtrace";
            goto LABEL_70;
          }
          if (v39)
          {
            v40 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v40;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Unexpected input state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(backtrace_string);
          v20 = (_BYTE *)&unk_1ECD84000;
LABEL_71:
          if (v22)
            free(v22);
          break;
        case 4:
          *(_DWORD *)(v10 + 372) = 5;
          goto LABEL_52;
        case 5:
LABEL_52:
          nw_http3_stream_handle_fields(v10, v12, a2, v18);
          v47 = v51;
          v52 = *(_QWORD *)(v10 + 376);
          if (v52)
          {
            *(_QWORD *)(v52 + 32) = 0;
            v53 = *(_QWORD **)(v15 + 8);
            *(_QWORD *)(v52 + 40) = v53;
            *v53 = v52;
            *(_QWORD *)(v15 + 8) = v52 + 32;
            ++*v17;
            *(_QWORD *)(v10 + 376) = 0;
          }
LABEL_54:
          v9 = v125;
          if (!v47)
            goto LABEL_94;
          goto LABEL_95;
        default:
          goto LABEL_94;
      }
      goto LABEL_73;
    }
LABEL_87:
    if (v11 == 4287504053)
      goto LABEL_88;
    v71 = v9;
    if ((v19 & 1) != 0)
    {
      v20 = (_BYTE *)&unk_1ECD84000;
    }
    else
    {
      v20 = &unk_1ECD84000;
      if ((*(_WORD *)(v10 + 736) & 0x800) != 0)
      {
LABEL_93:
        nw_frame_finalize(a2);
        v9 = v71;
        goto LABEL_94;
      }
    }
    if (v20[1345])
    {
      v104 = __nwlog_obj();
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
      {
        v105 = (const char *)(v10 + 636);
        v106 = "";
        v107 = *(_DWORD *)(*(_QWORD *)(v10 + 336) + 1280);
        v108 = *(_QWORD *)(v10 + 240);
        if (v19)
          v105 = "";
        else
          v106 = " ";
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v105;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v106;
        LOWORD(v130) = 1024;
        *(_DWORD *)((char *)&v130 + 2) = v107;
        HIWORD(v130) = 2048;
        v131 = v108;
        _os_log_impl(&dword_182FBE000, v104, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> dropping unknown frame type", buf, 0x30u);
      }
    }
    goto LABEL_93;
  }
  v27 = *(_DWORD *)(v10 + 372);
  v20 = &unk_1ECD84000;
  if (v27 > 8)
  {
LABEL_94:
    v47 = 0;
    goto LABEL_95;
  }
  if (((1 << v27) & 0x1EE) == 0)
  {
    v125 = v9;
    if (!v27)
    {
      nw_http3_fail_all_streams(*(nw_protocol **)(v10 + 336), 261);
LABEL_73:
      v47 = 2;
      v9 = v125;
      goto LABEL_95;
    }
    v123 = v16;
    objectb = *(NSObject **)(v10 + 400);
    v120 = v12;
    v54 = nw_frame_is_metadata_complete(a2);
    nw_frame_set_metadata(a2, objectb, 1, v54);
    if ((*(_WORD *)(v10 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        objecta = __nwlog_obj();
        if (os_log_type_enabled(objecta, OS_LOG_TYPE_DEBUG))
        {
          v111 = v19 == 0;
          if (v19)
            v112 = "";
          else
            v112 = (const char *)(v10 + 636);
          if (v111)
            v113 = " ";
          else
            v113 = "";
          v115 = *(_DWORD *)(*(_QWORD *)(v10 + 336) + 1280);
          v116 = *(_QWORD *)(v10 + 240);
          v114 = nw_frame_unclaimed_length((_DWORD *)a2);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v112;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v113;
          v20 = (_BYTE *)&unk_1ECD84000;
          LOWORD(v130) = 1024;
          *(_DWORD *)((char *)&v130 + 2) = v115;
          HIWORD(v130) = 2048;
          v131 = v116;
          v132 = 1024;
          *(_DWORD *)v133 = v114;
          _os_log_impl(&dword_182FBE000, objecta, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> received %u data bytes", buf, 0x36u);
        }
      }
    }
    *(_QWORD *)(a2 + 32) = 0;
    v55 = *(uint64_t **)(v15 + 8);
    *(_QWORD *)(a2 + 40) = v55;
    *v55 = a2;
    *(_QWORD *)(v15 + 8) = v7;
    ++*v17;
    v9 = v125;
    if (v18)
    {
      nw_http_transaction_metadata_increment_inbound_body_transfer_size(*(void **)(v10 + 392), v120 + v123);
      nw::http::content_length_manager::increment_inbound_body_size((nw::http::content_length_manager *)(v10 + 272), v120);
      v9 = v125;
    }
    goto LABEL_94;
  }
  v28 = v9;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v29 = *(_DWORD *)(v10 + 372);
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v29;
  v30 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v127 = 0;
  if (__nwlog_fault(v30, &type, &v127))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v31 = gLogObj;
      v32 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        v33 = *(_DWORD *)(v10 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v33;
        v34 = "%{public}s Unexpected input state %d";
LABEL_64:
        _os_log_impl(&dword_182FBE000, v31, v32, v34, buf, 0x12u);
      }
    }
    else if (v127)
    {
      v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v31 = gLogObj;
      v32 = type;
      v36 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v35)
      {
        if (v36)
        {
          v37 = *(_DWORD *)(v10 + 372);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v37;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v35;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s Unexpected input state %d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v35);
        v20 = (_BYTE *)&unk_1ECD84000;
        goto LABEL_65;
      }
      v20 = (_BYTE *)&unk_1ECD84000;
      if (v36)
      {
        v57 = *(_DWORD *)(v10 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v57;
        v34 = "%{public}s Unexpected input state %d, no backtrace";
        goto LABEL_64;
      }
    }
    else
    {
      v31 = __nwlog_obj();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        v41 = *(_DWORD *)(v10 + 372);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_stream_frame_received";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        v34 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
        goto LABEL_64;
      }
    }
  }
LABEL_65:
  if (v30)
    free(v30);
  v47 = 2;
  v9 = v28;
LABEL_95:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v47;
  v72 = *(_QWORD *)(a1 + 48);
  if (!v72 || (*(_WORD *)(v72 + 736) & 0x800) == 0)
  {
    if (v20[1345])
    {
      v89 = v9;
      v90 = __nwlog_obj();
      v91 = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
      v9 = v89;
      if (v91)
      {
        v92 = *(_QWORD *)(a1 + 48);
        v93 = (const char *)(v92 + 636);
        v94 = "";
        if (v92)
          v94 = " ";
        else
          v93 = "";
        v95 = *(_DWORD *)(*(_QWORD *)(v92 + 336) + 1280);
        v96 = *(_QWORD *)(v92 + 240);
        v97 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v98 = *(_DWORD *)(v92 + 372);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v93;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v94;
        LOWORD(v130) = 1024;
        *(_DWORD *)((char *)&v130 + 2) = v95;
        HIWORD(v130) = 2048;
        v131 = v96;
        v132 = 1024;
        *(_DWORD *)v133 = v97;
        *(_WORD *)&v133[4] = 1024;
        *(_DWORD *)&v133[6] = v98;
        _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> status %u http3_stream->input_state %u", buf, 0x3Cu);
        v9 = v89;
      }
    }
  }
  if (v9)
  {
    nw_http_transaction_metadata_mark_inbound_message_end(*(void **)(*(_QWORD *)(a1 + 48) + 392));
    v73 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(v73 + 304))
    {
      if (*(_QWORD *)(v73 + 296) != *(_QWORD *)(v73 + 312))
      {
        if ((*(_WORD *)(v73 + 736) & 0x800) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v74 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            v75 = *(_QWORD *)(a1 + 48);
            v76 = " ";
            if (v75)
              v77 = (const char *)(v75 + 636);
            else
              v77 = "";
            if (!v75)
              v76 = "";
            v78 = *(_DWORD *)(*(_QWORD *)(v75 + 336) + 1280);
            v79 = *(_QWORD *)(v75 + 240);
            if (*(_BYTE *)(v75 + 304))
              v80 = *(_QWORD *)(v75 + 296);
            else
              v80 = -1;
            v81 = *(_QWORD *)(v75 + 312);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_protocol_http3_stream_get_input_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v77;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v76;
            LOWORD(v130) = 1024;
            *(_DWORD *)((char *)&v130 + 2) = v78;
            HIWORD(v130) = 2048;
            v131 = v79;
            v132 = 2048;
            *(_QWORD *)v133 = v80;
            *(_WORD *)&v133[8] = 2048;
            v134 = v81;
            _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%llu> Content length header %llu does not equal body size %llu", buf, 0x44u);
          }
        }
        v82 = *v14;
        if (*v14)
        {
          if (v20[1345])
          {
            v103 = __nwlog_obj();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v103, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60151;
          *(_QWORD *)&buf[24] = &__block_descriptor_tmp_26_60152;
          v130 = v82;
          LOBYTE(v131) = 0;
          v83 = *v82;
          do
          {
            if (!v83)
              break;
            v84 = *(_QWORD *)(v83 + 32);
            v85 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v83 = v84;
          }
          while ((v85 & 1) != 0);
LABEL_117:
          v86 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(v86 + 264) = 270;
          if (*(_QWORD *)(v86 + 312))
            v87 = 40;
          else
            v87 = 91;
          nw_protocol_http3_stream_error((nw_protocol *)v86, (nw_protocol *)v86, v87);
          nw_protocol_http3_stream_disconnect(*(nw_protocol **)(a1 + 48), *(nw_protocol **)(a1 + 48));
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
          return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        v99 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v127 = 0;
        if (__nwlog_fault(v99, &type, &v127))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v100 = __nwlog_obj();
            v101 = type;
            if (!os_log_type_enabled(v100, type))
              goto LABEL_148;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
            v102 = "%{public}s called with null array";
            goto LABEL_147;
          }
          if (!v127)
          {
            v100 = __nwlog_obj();
            v101 = type;
            if (!os_log_type_enabled(v100, type))
              goto LABEL_148;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
            v102 = "%{public}s called with null array, backtrace limit exceeded";
            goto LABEL_147;
          }
          v109 = (char *)__nw_create_backtrace_string();
          v100 = __nwlog_obj();
          v101 = type;
          v110 = os_log_type_enabled(v100, type);
          if (v109)
          {
            if (v110)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v109;
              _os_log_impl(&dword_182FBE000, v100, v101, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v109);
            goto LABEL_148;
          }
          if (v110)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
            v102 = "%{public}s called with null array, no backtrace";
LABEL_147:
            _os_log_impl(&dword_182FBE000, v100, v101, v102, buf, 0xCu);
          }
        }
LABEL_148:
        if (v99)
          free(v99);
        goto LABEL_117;
      }
    }
  }
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_150(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  const char *v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  _BOOL4 v24;
  const char *v25;
  const char *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
  {
    v2 = *(_QWORD *)(a1 + 40);
    if ((*(_WORD *)(v2 + 736) & 0x100) != 0)
    {
      if ((*(_WORD *)(v2 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          v23 = __nwlog_obj();
          v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
          v2 = *(_QWORD *)(a1 + 40);
          if (v24)
          {
            v25 = (const char *)(v2 + 636);
            v26 = "";
            v27 = *(_DWORD *)(*(_QWORD *)(v2 + 336) + 1280);
            v28 = v2 == 0;
            v29 = *(_QWORD *)(v2 + 240);
            if (v28)
              v25 = "";
            else
              v26 = " ";
            *(_DWORD *)buf = 136447234;
            v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
            v40 = 2082;
            v41 = v25;
            v42 = 2080;
            v43 = (void *)v26;
            v44 = 1024;
            v45 = v27;
            v46 = 2048;
            v47 = v29;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> delivering deferred input finished", buf, 0x30u);
            v2 = *(_QWORD *)(a1 + 40);
          }
        }
      }
      v3 = *(unsigned __int16 *)(v2 + 736);
      v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 738) << 16);
      *(_WORD *)(v2 + 736) = v3 & 0xFEFF;
      *(_BYTE *)(v2 + 738) = BYTE2(v4);
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(void (**)(void))(v6 + 184);
          if (v7)
          {
            v7();
            return;
          }
        }
      }
      __nwlog_obj();
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
      v9 = "invalid";
      if (v8)
      {
        v10 = *(const char **)(v8 + 16);
        if (v10)
          v9 = v10;
      }
      *(_DWORD *)buf = 136446466;
      v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
      v40 = 2082;
      v41 = v9;
      v11 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v36 = 0;
      if (!__nwlog_fault(v11, &type, &v36))
        goto LABEL_44;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v12 = __nwlog_obj();
        v13 = type;
        if (!os_log_type_enabled(v12, type))
          goto LABEL_44;
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
        v15 = "invalid";
        if (v14)
        {
          v16 = *(const char **)(v14 + 16);
          if (v16)
            v15 = v16;
        }
        *(_DWORD *)buf = 136446466;
        v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        v40 = 2082;
        v41 = v15;
        v17 = "%{public}s protocol %{public}s has invalid input_finished callback";
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v12 = __nwlog_obj();
        v13 = type;
        v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
            v21 = "invalid";
            if (v20)
            {
              v22 = *(const char **)(v20 + 16);
              if (v22)
                v21 = v22;
            }
            *(_DWORD *)buf = 136446722;
            v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
            v40 = 2082;
            v41 = v21;
            v42 = 2082;
            v43 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(backtrace_string);
          goto LABEL_44;
        }
        if (!v19)
        {
LABEL_44:
          if (v11)
            free(v11);
          return;
        }
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
        v34 = "invalid";
        if (v33)
        {
          v35 = *(const char **)(v33 + 16);
          if (v35)
            v34 = v35;
        }
        *(_DWORD *)buf = 136446466;
        v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        v40 = 2082;
        v41 = v34;
        v17 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
      }
      else
      {
        v12 = __nwlog_obj();
        v13 = type;
        if (!os_log_type_enabled(v12, type))
          goto LABEL_44;
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
        v31 = "invalid";
        if (v30)
        {
          v32 = *(const char **)(v30 + 16);
          if (v32)
            v31 = v32;
        }
        *(_DWORD *)buf = 136446466;
        v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        v40 = 2082;
        v41 = v31;
        v17 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
      goto LABEL_44;
    }
  }
}

void nw::http::content_length_manager::increment_inbound_body_size(nw::http::content_length_manager *this, uint64_t a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v2 + a2;
  if (__CFADD__(v2, a2))
  {
    if (gLogDatapath)
    {
      v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v6 = *((_QWORD *)this + 5);
        v7 = 136446978;
        v8 = "increment_inbound_body_size";
        v9 = 2082;
        v10 = "inbound_body_size";
        v11 = 2048;
        v12 = a2;
        v13 = 2048;
        v14 = v6;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", (uint8_t *)&v7, 0x2Au);
      }
    }
    *((_QWORD *)this + 5) = -1;
  }
}

BOOL ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _BOOL4 is_quic_stream;
  void *v6;
  uint64_t id;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  is_quic_stream = nw_protocol_metadata_is_quic_stream(a3);
  if (is_quic_stream)
  {
    v6 = a3 ? os_retain(a3) : 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 416) = v6;
    id = nw_quic_stream_get_id(a3);
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v8 + 240) = id;
    if ((*(_WORD *)(v8 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = (const char *)(v10 + 636);
        v12 = "";
        if (!v10)
          v11 = "";
        v13 = *(_DWORD *)(*(_QWORD *)(v10 + 336) + 1280);
        v14 = *(_QWORD *)(v10 + 240);
        if (v10)
          v12 = " ";
        v16 = 136447746;
        v17 = "nw_protocol_http3_stream_connected_block_invoke";
        v18 = 2082;
        v19 = v11;
        v20 = 2080;
        v21 = v12;
        v22 = 1024;
        v23 = v13;
        v24 = 2048;
        v25 = v14;
        v26 = 2048;
        v27 = v10;
        v28 = 2048;
        v29 = v14;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> http3 stream %p assigned ID %llu", (uint8_t *)&v16, 0x44u);
      }
    }
  }
  return !is_quic_stream;
}

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_129(uint64_t a1, void *a2, int a3)
{
  id outbound_message;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  int status_code;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint64_t outbound_body_size;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  const char *v30;
  id v31;
  id v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t inbound_body_size;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id inbound_message;
  id v58;
  int v59;
  id v60;
  _QWORD *v61;
  _QWORD v62[5];
  __int16 v63;
  _QWORD v64[6];
  _QWORD v65[5];
  _QWORD v66[5];
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v66[0] = MEMORY[0x1E0C809B0];
        v66[1] = 0x40000000;
        v66[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_2;
        v66[3] = &__block_descriptor_tmp_130;
        v66[4] = *(_QWORD *)(a1 + 32);
        v8 = v6;
        v9 = v66;
        _nw_http_request_access_method((uint64_t)v8, v9);

      }
      if (!v7)
        goto LABEL_34;
      v10 = v7;
      status_code = _nw_http_response_get_status_code();

      v12 = *(_QWORD *)(a1 + 32);
      if (v12 && (*(_WORD *)(v12 + 736) & 0x800) != 0)
        goto LABEL_33;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_33;
      v14 = *(_QWORD *)(a1 + 32);
      v15 = (const char *)(v14 + 636);
      v16 = "";
      v17 = v14 == 0;
      if (!v14)
        v15 = "";
      v18 = *(_DWORD *)(*(_QWORD *)(v14 + 336) + 1280);
      v19 = *(_QWORD *)(v14 + 240);
      if (!v17)
        v16 = " ";
      *(_DWORD *)buf = 136447490;
      v68 = "nw_protocol_http3_stream_connected_block_invoke";
      v69 = 2082;
      v70 = v15;
      v71 = 2080;
      v72 = v16;
      v73 = 1024;
      v74 = v18;
      v75 = 2048;
      v76 = v19;
      v77 = 1024;
      LODWORD(v78) = status_code;
      v20 = "%{public}s %{public}s%s<i%u:s%llu> [http] sending response header {status=%hu}";
      goto LABEL_32;
    case 1:
      outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      v22 = *(_QWORD *)(a1 + 32);
      if (v22 && (*(_WORD *)(v22 + 736) & 0x800) != 0)
        return;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v24 = *(_QWORD *)(a1 + 32);
      v25 = (const char *)(v24 + 636);
      v26 = "";
      v27 = v24 == 0;
      if (!v24)
        v25 = "";
      v28 = *(_DWORD *)(*(_QWORD *)(v24 + 336) + 1280);
      v29 = *(_QWORD *)(v24 + 240);
      if (!v27)
        v26 = " ";
      *(_DWORD *)buf = 136447490;
      v68 = "nw_protocol_http3_stream_connected_block_invoke";
      v69 = 2082;
      v70 = v25;
      v71 = 2080;
      v72 = v26;
      v73 = 1024;
      v74 = v28;
      v75 = 2048;
      v76 = v29;
      v77 = 2048;
      v78 = outbound_body_size;
      v30 = "%{public}s %{public}s%s<i%u:s%llu> [http] finished sending {body_bytes=%llu}";
      goto LABEL_46;
    case 2:
      outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      v6 = nw_http_metadata_copy_request(outbound_message);
      v31 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v65[0] = MEMORY[0x1E0C809B0];
        v65[1] = 0x40000000;
        v65[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_131;
        v65[3] = &__block_descriptor_tmp_132;
        v65[4] = *(_QWORD *)(a1 + 32);
        v32 = v6;
        v33 = v65;
        _nw_http_request_access_method((uint64_t)v32, v33);

      }
      if (v31)
      {
        v10 = v31;
        v34 = _nw_http_response_get_status_code();

        v35 = *(_QWORD *)(a1 + 32);
        if (!v35 || (*(_WORD *)(v35 + 736) & 0x800) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v36 = *(_QWORD *)(a1 + 32);
            v37 = (const char *)(v36 + 636);
            v38 = "";
            v39 = v36 == 0;
            if (!v36)
              v37 = "";
            v40 = *(_DWORD *)(*(_QWORD *)(v36 + 336) + 1280);
            v41 = *(_QWORD *)(v36 + 240);
            if (!v39)
              v38 = " ";
            *(_DWORD *)buf = 136447490;
            v68 = "nw_protocol_http3_stream_connected_block_invoke";
            v69 = 2082;
            v70 = v37;
            v71 = 2080;
            v72 = v38;
            v73 = 1024;
            v74 = v40;
            v75 = 2048;
            v76 = v41;
            v77 = 1024;
            LODWORD(v78) = v34;
            v20 = "%{public}s %{public}s%s<i%u:s%llu> [http] receiving response header {status=%hu}";
LABEL_32:
            _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, v20, buf, 0x36u);
          }
        }
LABEL_33:
        os_release(v10);
      }
LABEL_34:
      if (v6)
        os_release(v6);
      if (!outbound_message)
        return;
      v42 = outbound_message;
      goto LABEL_68;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      v44 = *(_QWORD *)(a1 + 32);
      if (v44 && (*(_WORD *)(v44 + 736) & 0x800) != 0)
        return;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return;
      v45 = *(_QWORD *)(a1 + 32);
      v46 = (const char *)(v45 + 636);
      v47 = "";
      v48 = v45 == 0;
      if (!v45)
        v46 = "";
      v49 = *(_DWORD *)(*(_QWORD *)(v45 + 336) + 1280);
      v50 = *(_QWORD *)(v45 + 240);
      if (!v48)
        v47 = " ";
      *(_DWORD *)buf = 136447490;
      v68 = "nw_protocol_http3_stream_connected_block_invoke";
      v69 = 2082;
      v70 = v46;
      v71 = 2080;
      v72 = v47;
      v73 = 1024;
      v74 = v49;
      v75 = 2048;
      v76 = v50;
      v77 = 2048;
      v78 = inbound_body_size;
      v30 = "%{public}s %{public}s%s<i%u:s%llu> [http] finished receiving {body_bytes=%llu}";
LABEL_46:
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, v30, buf, 0x3Au);
      return;
    case 4:
      v51 = MEMORY[0x1E0C809B0];
      v64[0] = MEMORY[0x1E0C809B0];
      v64[1] = 0x40000000;
      v64[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_133;
      v64[3] = &__block_descriptor_tmp_134;
      v52 = *(_QWORD *)(a1 + 32);
      v64[4] = a2;
      v64[5] = v52;
      v53 = nw_http_transaction_metadata_get_outbound_message(a2);
      v54 = v53;
      if (v53)
      {
        v55 = nw_http_metadata_copy_request(v53);
        v56 = nw_http_metadata_copy_response(v54);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message)
          goto LABEL_56;
        if (v55)
        {
          if (v56)
            goto LABEL_57;
          goto LABEL_55;
        }
      }
      else
      {
        v58 = nw_http_transaction_metadata_get_inbound_message(a2);
        v56 = 0;
        if (!v58)
        {
          v59 = 0;
          inbound_message = 0;
          goto LABEL_71;
        }
        inbound_message = v58;
      }
      v55 = nw_http_metadata_copy_request(inbound_message);
      if (v56)
        goto LABEL_57;
LABEL_55:
      v56 = nw_http_metadata_copy_response(inbound_message);
LABEL_56:
      if (!v56)
      {
        v59 = 0;
        if (!v55)
          goto LABEL_71;
LABEL_60:
        v62[0] = v51;
        v62[1] = 0x40000000;
        v62[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_135;
        v62[3] = &unk_1E14A83B0;
        v62[4] = v64;
        v63 = v59;
        v60 = v55;
        v61 = v62;
        _nw_http_request_access_method((uint64_t)v60, v61);

        if (!inbound_message)
          goto LABEL_62;
        goto LABEL_61;
      }
LABEL_57:
      v56 = v56;
      v59 = _nw_http_response_get_status_code();

      if (v55)
        goto LABEL_60;
LABEL_71:
      ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_133((uint64_t)v64, (uint64_t)"", v59);
      v60 = 0;
      if (inbound_message)
LABEL_61:
        os_release(inbound_message);
LABEL_62:
      if (v54)
        os_release(v54);
      if (v56)
        os_release(v56);
      if (v60)
      {
        v42 = v60;
LABEL_68:
        os_release(v42);
      }
      return;
    default:
      return;
  }
}

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = (const char *)(v6 + 636);
      v8 = "";
      v9 = v6 == 0;
      if (!v6)
        v7 = "";
      v10 = *(_DWORD *)(*(_QWORD *)(v6 + 336) + 1280);
      v11 = *(_QWORD *)(v6 + 240);
      if (!v9)
        v8 = " ";
      v12 = 136447490;
      v13 = "nw_protocol_http3_stream_connected_block_invoke_2";
      v14 = 2082;
      v15 = v7;
      v16 = 2080;
      v17 = v8;
      v18 = 1024;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> [http] sending request header {method=\"%{public}s\"}", (uint8_t *)&v12, 0x3Au);
    }
  }
}

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_131(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = (const char *)(v6 + 636);
      v8 = "";
      v9 = v6 == 0;
      if (!v6)
        v7 = "";
      v10 = *(_DWORD *)(*(_QWORD *)(v6 + 336) + 1280);
      v11 = *(_QWORD *)(v6 + 240);
      if (!v9)
        v8 = " ";
      v12 = 136447490;
      v13 = "nw_protocol_http3_stream_connected_block_invoke";
      v14 = 2082;
      v15 = v7;
      v16 = 2080;
      v17 = v8;
      v18 = 1024;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      v22 = 2082;
      v23 = a2;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%llu> [http] receiving request header {method=\"%{public}s\"}", (uint8_t *)&v12, 0x3Au);
    }
  }
}

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_133(uint64_t a1, uint64_t a2, int a3)
{
  int start_reason;
  uint64_t start_time;
  uint64_t end_time;
  uint64_t outbound_message_start_time;
  uint64_t outbound_message_end_time;
  uint64_t inbound_message_start_time;
  uint64_t inbound_message_end_time;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  int v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t inbound_body_size;
  uint64_t outbound_body_size;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  v12 = *(_QWORD *)(a1 + 40);
  if (!v12 || (*(_WORD *)(v12 + 736) & 0x800) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (v14)
        v15 = (const char *)(v14 + 636);
      else
        v15 = "";
      if (v14)
        v16 = " ";
      else
        v16 = "";
      v32 = v15;
      v33 = v16;
      if ((start_reason - 1) > 2)
        v17 = "initial";
      else
        v17 = off_1E14AA478[start_reason - 1];
      v29 = v17;
      v30 = *(_DWORD *)(*(_QWORD *)(v14 + 336) + 1280);
      v31 = *(_QWORD *)(v14 + 240);
      v18 = -1;
      if (start_time && end_time)
      {
        v19 = nw_delta_nanos(start_time, end_time);
        if (v19 > 0xF423FFFFFFFFFLL)
          v18 = -1;
        else
          v18 = v19 / 0xF4240;
      }
      v20 = -1;
      v21 = a3;
      if (start_time && outbound_message_start_time)
      {
        v22 = nw_delta_nanos(start_time, outbound_message_start_time);
        if (v22 > 0xF423FFFFFFFFFLL)
          v20 = -1;
        else
          v20 = v22 / 0xF4240;
      }
      v23 = -1;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        v24 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        if (v24 > 0xF423FFFFFFFFFLL)
          v23 = -1;
        else
          v23 = v24 / 0xF4240;
      }
      v25 = -1;
      if (start_time && inbound_message_start_time)
      {
        v26 = nw_delta_nanos(start_time, inbound_message_start_time);
        if (v26 > 0xF423FFFFFFFFFLL)
          v25 = -1;
        else
          v25 = v26 / 0xF4240;
      }
      LODWORD(v27) = -1;
      if (inbound_message_start_time && inbound_message_end_time)
      {
        v28 = nw_delta_nanos(inbound_message_start_time, inbound_message_end_time);
        v27 = v28 / 0xF4240;
        if (v28 > 0xF423FFFFFFFFFLL)
          LODWORD(v27) = -1;
      }
      *(_DWORD *)buf = 136449794;
      v38 = "nw_protocol_http3_stream_connected_block_invoke";
      v39 = 2082;
      v40 = v32;
      v41 = 2080;
      v42 = v33;
      v43 = 1024;
      v44 = v30;
      v45 = 2048;
      v46 = v31;
      v47 = 2080;
      v48 = v29;
      v49 = 1024;
      v50 = v18;
      v51 = 2082;
      v52 = a2;
      v53 = 1024;
      v54 = v21;
      v55 = 1024;
      v56 = v20;
      v57 = 1024;
      v58 = v23;
      v59 = 1024;
      v60 = v25;
      v61 = 1024;
      v62 = v27;
      v63 = 2048;
      v64 = outbound_body_size;
      v65 = 2048;
      v66 = inbound_body_size;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u:s%llu> [http] transaction summary {start_reason=\"%s\", duration_ms=%d, request_method=\"%{public}s\", response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_duration_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}", buf, 0x7Cu);
    }
  }
}

uint64_t ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_135(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 40));
}

uint64_t ___ZL28nw_http3_save_output_handlerP17nw_protocol_http3P11nw_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (nw_protocol_metadata_is_quic_connection(a3))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return 1;
}

void nw_http3_setup_connection_if_needed(uint64_t a1)
{
  unsigned __int16 *v2;
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);
  __int16 v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD, uint64_t);
  void (*v15)(_QWORD, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  _BOOL8 v20;
  int *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  char *v32;
  _BOOL4 v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  const char *v38;
  char *backtrace_string;
  _BOOL4 v40;
  const char *v41;
  NSObject *v42;
  int v43;
  const char *v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  const char *v53;
  char *v54;
  _BOOL4 v55;
  const char *v56;
  const char *v57;
  const char *v58;
  NSObject *v59;
  int v60;
  os_log_type_t type[8];
  char v62;
  _BYTE buf[24];
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (unsigned __int16 *)(a1 + 1373);
    v3 = *(_WORD *)(a1 + 1373);
    if ((v3 & 0x800) != 0)
      return;
    if ((*(_WORD *)(a1 + 1373) & 0x400) == 0)
    {
      v4 = *(_QWORD *)(a1 + 32);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(unsigned int (**)(void))(v5 + 232);
          if (v6)
          {
            if (v6())
              v7 = 1024;
            else
              v7 = 0;
            v3 = *v2 & 0xFBFF | v7;
            *v2 = v3;
          }
        }
      }
    }
    if ((v3 & 0x20) != 0 && !uuid_is_null((const unsigned __int8 *)(a1 + 848)))
    {
      v19 = *(void **)(a1 + 1112);
      if (v19)
      {
        *(_QWORD *)type = 0;
        v20 = nw_path_copy_token_from_agent(v19, (const unsigned __int8 *)(a1 + 848), type);
        if (v20)
        {
          v21 = (int *)v20;
          if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
          {
            if (gLogDatapath)
            {
              v59 = __nwlog_obj();
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
              {
                v60 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 1289;
                *(_WORD *)&buf[22] = 2080;
                v64 = " ";
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v60;
                _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> received session to resume", buf, 0x26u);
              }
            }
          }
          nw_http3_parse_resumable_session_data(a1, v21, *(unint64_t *)type);
          free(v21);
        }
      }
    }
    if ((*v2 & 0x61) == 0x20 && uuid_is_null((const unsigned __int8 *)(a1 + 848)))
    {
      if (nw_storage_copy_shared_token[0] != -1)
        dispatch_once(nw_storage_copy_shared_token, &__block_literal_global_44834);
      v8 = (id)nw_storage_copy_shared_storage;
      v9 = *(void **)(a1 + 1096);
      if (v9)
        v10 = os_retain(v9);
      else
        v10 = 0;
      while (1)
      {
        v22 = v10;
        v23 = nw_endpoint_copy_parent_endpoint(v10);
        if (!v23)
          break;
        v10 = v23;
        if (v22)
          os_release(v22);
      }
      v24 = *(_QWORD *)(a1 + 1040);
      v25 = *(void **)(a1 + 1256);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL32nw_http3_start_0rtt_state_lookupP17nw_protocol_http3_block_invoke;
      v64 = (const char *)&unk_1E14A8230;
      v65 = v24;
      nw_storage_lookup_items(v8, (uint64_t)"h3_0rtt", v10, v25, buf);
      if (v10)
        os_release(v10);
      if (v8)
        os_release(v8);
      return;
    }
    if (!*(_QWORD *)(a1 + 976))
    {
      v11 = mach_continuous_approximate_time();
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      *(_QWORD *)(a1 + 976) = v12;
    }
    if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        v42 = __nwlog_obj();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          v43 = *(_DWORD *)(a1 + 1280);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 1289;
          *(_WORD *)&buf[22] = 2080;
          v64 = " ";
          LOWORD(v65) = 1024;
          *(_DWORD *)((char *)&v65 + 2) = v43;
          _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> starting control stream", buf, 0x26u);
        }
      }
    }
    *v2 |= 0x800u;
    if (!*(_QWORD *)(a1 + 1128))
    {
      *(_QWORD *)(a1 + 1128) = nw_http3_fix_quic_parameters(a1, *(NSObject **)(a1 + 1120), 1, 1);
      if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          v45 = __nwlog_obj();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            v46 = *(_DWORD *)(a1 + 1280);
            v47 = *(_QWORD *)(a1 + 1128);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 1289;
            *(_WORD *)&buf[22] = 2080;
            v64 = " ";
            LOWORD(v65) = 1024;
            *(_DWORD *)((char *)&v65 + 2) = v46;
            HIWORD(v65) = 2048;
            v66 = v47;
            _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> set up unidirectional parameters %p", buf, 0x30u);
          }
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = *(void (***)(_QWORD, uint64_t))(v13 + 24);
      if (v14)
      {
        v15 = *v14;
        if (v15)
        {
          v15(*(_QWORD *)(a1 + 32), a1);
          goto LABEL_33;
        }
      }
      __nwlog_obj();
      v30 = *(const char **)(v13 + 16);
      if (!v30)
        v30 = "invalid";
    }
    else
    {
      __nwlog_obj();
      v30 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v30;
    v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (__nwlog_fault(v34, type, &v62))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v35 = __nwlog_obj();
        v36 = type[0];
        if (!os_log_type_enabled(v35, type[0]))
          goto LABEL_99;
        v37 = "invalid";
        if (v13 && *(_QWORD *)(v13 + 16))
          v37 = *(const char **)(v13 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v37;
        v38 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_98:
        _os_log_impl(&dword_182FBE000, v35, v36, v38, buf, 0x16u);
        goto LABEL_99;
      }
      if (!v62)
      {
        v35 = __nwlog_obj();
        v36 = type[0];
        if (!os_log_type_enabled(v35, type[0]))
          goto LABEL_99;
        v44 = "invalid";
        if (v13 && *(_QWORD *)(v13 + 16))
          v44 = *(const char **)(v13 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v44;
        v38 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_98;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v35 = __nwlog_obj();
      v36 = type[0];
      v40 = os_log_type_enabled(v35, type[0]);
      if (!backtrace_string)
      {
        if (!v40)
          goto LABEL_99;
        v48 = "invalid";
        if (v13 && *(_QWORD *)(v13 + 16))
          v48 = *(const char **)(v13 + 16);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v48;
        v38 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_98;
      }
      if (v40)
      {
        v41 = "invalid";
        if (v13 && *(_QWORD *)(v13 + 16))
          v41 = *(const char **)(v13 + 16);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v41;
        *(_WORD *)&buf[22] = 2082;
        v64 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
    }
LABEL_99:
    if (v34)
      free(v34);
    if (!v13)
    {
      __nwlog_obj();
      v31 = "invalid";
      goto LABEL_103;
    }
LABEL_33:
    v16 = *(_QWORD *)(v13 + 24);
    if (v16)
    {
      v17 = *(void (**)(uint64_t, uint64_t))(v16 + 24);
      if (v17)
      {
        v17(v13, a1);
LABEL_36:
        nw_http3_control_stream_process_output(a1, v18);
        return;
      }
    }
    __nwlog_obj();
    v31 = *(const char **)(v13 + 16);
    if (!v31)
      v31 = "invalid";
LABEL_103:
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v31;
    v49 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v49, type, &v62))
      goto LABEL_129;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v50 = __nwlog_obj();
      v51 = type[0];
      if (!os_log_type_enabled(v50, type[0]))
        goto LABEL_129;
      v52 = "invalid";
      if (v13 && *(_QWORD *)(v13 + 16))
        v52 = *(const char **)(v13 + 16);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v52;
      v53 = "%{public}s protocol %{public}s has invalid connect callback";
    }
    else if (v62)
    {
      v54 = (char *)__nw_create_backtrace_string();
      v50 = __nwlog_obj();
      v51 = type[0];
      v55 = os_log_type_enabled(v50, type[0]);
      if (v54)
      {
        if (v55)
        {
          v56 = "invalid";
          if (v13 && *(_QWORD *)(v13 + 16))
            v56 = *(const char **)(v13 + 16);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 2082;
          v64 = v54;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v54);
        goto LABEL_129;
      }
      if (!v55)
      {
LABEL_129:
        if (v49)
          free(v49);
        goto LABEL_36;
      }
      v58 = "invalid";
      if (v13 && *(_QWORD *)(v13 + 16))
        v58 = *(const char **)(v13 + 16);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v58;
      v53 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }
    else
    {
      v50 = __nwlog_obj();
      v51 = type[0];
      if (!os_log_type_enabled(v50, type[0]))
        goto LABEL_129;
      v57 = "invalid";
      if (v13 && *(_QWORD *)(v13 + 16))
        v57 = *(const char **)(v13 + 16);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v57;
      v53 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v50, v51, v53, buf, 0x16u);
    goto LABEL_129;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
  v26 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v62 = 0;
  if (__nwlog_fault(v26, type, &v62))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, type[0]))
        goto LABEL_134;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
      v29 = "%{public}s called with null http3";
      goto LABEL_133;
    }
    if (!v62)
    {
      v27 = __nwlog_obj();
      v28 = type[0];
      if (!os_log_type_enabled(v27, type[0]))
        goto LABEL_134;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
      v29 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_133;
    }
    v32 = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type[0];
    v33 = os_log_type_enabled(v27, type[0]);
    if (v32)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v32;
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null http3, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v32);
      goto LABEL_134;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http3_setup_connection_if_needed";
      v29 = "%{public}s called with null http3, no backtrace";
LABEL_133:
      _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
    }
  }
LABEL_134:
  if (v26)
    free(v26);
}

void nw_http3_stream_connect_lower(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  const char *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  _BOOL4 v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint32_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http3_stream_connect_lower";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v10, &type, &v35))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http3_stream_connect_lower";
      v16 = "%{public}s called with null http3_stream";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v25 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_http3_stream_connect_lower";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null http3_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v10)
          goto LABEL_54;
        return;
      }
      if (!v25)
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http3_stream_connect_lower";
      v16 = "%{public}s called with null http3_stream, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http3_stream_connect_lower";
      v16 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }
    v32 = v17;
    v33 = v18;
    v34 = 12;
    goto LABEL_52;
  }
  v2 = *(unsigned __int16 *)(a1 + 736);
  if ((v2 & 2) == 0)
    return;
  v3 = v2 & 0xFFFFFFFD | (*(unsigned __int8 *)(a1 + 738) << 16);
  *(_WORD *)(a1 + 736) = v2 & 0xFFFD;
  *(_BYTE *)(a1 + 738) = BYTE2(v3);
  *(_DWORD *)(a1 + 368) = 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(void (**)(void))(v5 + 24);
      if (v6)
      {
        v6();
        return;
      }
    }
  }
  __nwlog_obj();
  v7 = *(_QWORD *)(a1 + 32);
  v8 = "invalid";
  if (v7)
  {
    v9 = *(const char **)(v7 + 16);
    if (v9)
      v8 = v9;
  }
  *(_DWORD *)buf = 136446466;
  v38 = "nw_http3_stream_connect_lower";
  v39 = 2082;
  v40 = (void *)v8;
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v10, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_53;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = "invalid";
      if (v13)
      {
        v15 = *(const char **)(v13 + 16);
        if (v15)
          v14 = v15;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http3_stream_connect_lower";
      v39 = 2082;
      v40 = (void *)v14;
      v16 = "%{public}s protocol %{public}s has invalid connect callback";
LABEL_48:
      v32 = v11;
      v33 = v12;
      v34 = 22;
LABEL_52:
      _os_log_impl(&dword_182FBE000, v32, v33, v16, buf, v34);
      goto LABEL_53;
    }
    if (!v35)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_53;
      v26 = *(_QWORD *)(a1 + 32);
      v27 = "invalid";
      if (v26)
      {
        v28 = *(const char **)(v26 + 16);
        if (v28)
          v27 = v28;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http3_stream_connect_lower";
      v39 = 2082;
      v40 = (void *)v27;
      v16 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
      goto LABEL_48;
    }
    v19 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v20 = os_log_type_enabled(v11, type);
    if (!v19)
    {
      if (!v20)
        goto LABEL_53;
      v29 = *(_QWORD *)(a1 + 32);
      v30 = "invalid";
      if (v29)
      {
        v31 = *(const char **)(v29 + 16);
        if (v31)
          v30 = v31;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http3_stream_connect_lower";
      v39 = 2082;
      v40 = (void *)v30;
      v16 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
      goto LABEL_48;
    }
    if (v20)
    {
      v21 = *(_QWORD *)(a1 + 32);
      v22 = "invalid";
      if (v21)
      {
        v23 = *(const char **)(v21 + 16);
        if (v23)
          v22 = v23;
      }
      *(_DWORD *)buf = 136446722;
      v38 = "nw_http3_stream_connect_lower";
      v39 = 2082;
      v40 = (void *)v22;
      v41 = 2082;
      v42 = v19;
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v19);
  }
LABEL_53:
  if (v10)
LABEL_54:
    free(v10);
}

void nw_http3_parse_resumable_session_data(uint64_t a1, int *a2, unint64_t a3)
{
  NSObject *v6;
  int v7;
  size_t v8;
  NSObject *v9;
  _DWORD *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  if (a3 <= 0xF && ((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v7 = *(_DWORD *)(a1 + 1280);
      v25 = 136447234;
      v26 = "nw_http3_parse_resumable_session_data";
      v27 = 2082;
      v28 = a1 + 1289;
      v29 = 2080;
      v30 = " ";
      v31 = 1024;
      v32 = v7;
      v33 = 2048;
      v34 = a3;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Resumable session too short (%zu bytes)", (uint8_t *)&v25, 0x30u);
    }
  }
  if (*a2 != 9685181)
  {
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      return;
    v14 = *(_DWORD *)(a1 + 1280);
    v15 = *a2;
    v25 = 136447234;
    v26 = "nw_http3_parse_resumable_session_data";
    v27 = 2082;
    v28 = a1 + 1289;
    v29 = 2080;
    v30 = " ";
    v31 = 1024;
    v32 = v14;
    v33 = 1024;
    LODWORD(v34) = v15;
    v16 = "%{public}s %{public}s%s<i%u> Unrecognized resumable session version %x";
    v17 = v13;
    v18 = OS_LOG_TYPE_INFO;
    v19 = 44;
LABEL_21:
    _os_log_impl(&dword_182FBE000, v17, v18, v16, (uint8_t *)&v25, v19);
    return;
  }
  v8 = a2[1];
  if (v8 + a2[2] + a2[3] + 16 != a3)
  {
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return;
    v21 = *(_DWORD *)(a1 + 1280);
    v22 = a2[1];
    v23 = a2[2];
    v24 = a2[3];
    v25 = 136448258;
    v26 = "nw_http3_parse_resumable_session_data";
    v27 = 2082;
    v28 = a1 + 1289;
    v29 = 2080;
    v30 = " ";
    v31 = 1024;
    v32 = v21;
    v33 = 2048;
    v34 = a3;
    v35 = 2048;
    v36 = 16;
    v37 = 1024;
    v38 = v22;
    v39 = 1024;
    v40 = v23;
    v41 = 1024;
    v42 = v24;
    v16 = "%{public}s %{public}s%s<i%u> Invalid resumable session length (%zu != %zu+%u+%u+%u)";
    v17 = v20;
    v18 = OS_LOG_TYPE_ERROR;
    v19 = 76;
    goto LABEL_21;
  }
  v9 = *(NSObject **)(a1 + 1152);
  if (v9)
  {
    dispatch_release(v9);
    *(_QWORD *)(a1 + 1152) = 0;
    v8 = a2[1];
  }
  v10 = a2 + 4;
  *(_QWORD *)(a1 + 1152) = dispatch_data_create(a2 + 4, v8, 0, 0);
  v11 = *(NSObject **)(a1 + 1136);
  if (v11)
  {
    dispatch_release(v11);
    *(_QWORD *)(a1 + 1136) = 0;
  }
  *(_QWORD *)(a1 + 1136) = dispatch_data_create((char *)v10 + a2[1], a2[2], 0, 0);
  v12 = *(NSObject **)(a1 + 1144);
  if (v12)
  {
    dispatch_release(v12);
    *(_QWORD *)(a1 + 1144) = 0;
  }
  *(_QWORD *)(a1 + 1144) = dispatch_data_create((char *)v10 + a2[1] + a2[2], a2[3], 0, 0);
}

void ___ZL32nw_http3_start_0rtt_state_lookupP17nw_protocol_http3_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t object_at_index;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t j;
  uint64_t i;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v3)
  {
    v4 = v3;
    if (!a2 || *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16) != 8)
    {
      *(_WORD *)(v3 + 1373) |= 0x40u;
      nw_http3_setup_connection_if_needed(v3);
      for (i = *(_QWORD *)(v4 + 880); i; i = *(_QWORD *)(i + 544))
        nw_http3_stream_connect_lower(i);
      goto LABEL_22;
    }
    object_at_index = nw_array_get_object_at_index(a2, 0);
    if (object_at_index)
    {
      v6 = object_at_index;
      if (*(_QWORD *)(object_at_index + 24) - *(_QWORD *)(object_at_index + 16) == 24)
      {
        v7 = nw_array_get_object_at_index(object_at_index, 0);
        v8 = nw_array_get_object_at_index(v6, 1uLL);
        v9 = nw_array_get_object_at_index(v6, 2uLL);
        *(_WORD *)(v4 + 1373) |= 0x40u;
        if (v7)
        {
          if (v8)
          {
            v10 = v9;
            if (v9)
            {
              v11 = *(NSObject **)(v4 + 1152);
              if (v11)
                dispatch_release(v11);
              *(_QWORD *)(v4 + 1152) = v7;
              dispatch_retain(v7);
              v12 = *(NSObject **)(v4 + 1136);
              if (v12)
                dispatch_release(v12);
              *(_QWORD *)(v4 + 1136) = v8;
              dispatch_retain(v8);
              v13 = *(NSObject **)(v4 + 1144);
              if (v13)
                dispatch_release(v13);
              *(_QWORD *)(v4 + 1144) = v10;
              dispatch_retain(v10);
            }
          }
        }
        nw_http3_setup_connection_if_needed(v4);
        for (j = *(_QWORD *)(v4 + 880); j; j = *(_QWORD *)(j + 544))
          nw_http3_stream_connect_lower(j);
LABEL_22:
        nw_http3_signal_output_pending(v4, 0);
      }
    }
  }
}

BOOL nw_queue_target_dispatch_queue(void *a1)
{
  NSObject *v1;
  id v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v2 = (id)nw_context_copy_implicit_context::implicit_context;
    v3 = nw_context_copy_workloop(v2);

    dispatch_set_target_queue(v1, (dispatch_queue_t)v3);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_queue_target_dispatch_queue";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_queue_target_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null queue", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_queue_target_dispatch_queue";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_queue_target_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_queue_target_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
LABEL_5:

  return v1 != 0;
}

void sub_183978CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_queue_register_dispatch_queue(void *a1)
{
  id v1;
  id v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  void *v11;
  os_log_type_t v12;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_queue_register_dispatch_queue";
    v3 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v3, &type, &v16))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s nw_queue_register_dispatch_queue is deprecated", buf, 0xCu);
      }
LABEL_18:

      goto LABEL_19;
    }
    if (!v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s nw_queue_register_dispatch_queue is deprecated, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v7 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s nw_queue_register_dispatch_queue is deprecated, no backtrace", buf, 0xCu);
      }
      goto LABEL_18;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_queue_register_dispatch_queue";
      v20 = 2082;
      v21 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s nw_queue_register_dispatch_queue is deprecated, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_11:

    free(backtrace_string);
    if (!v3)
      goto LABEL_21;
    goto LABEL_20;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_queue_register_dispatch_queue";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v3, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v4, v12, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_18;
    }
    if (!v16)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v4, v15, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    v14 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_182FBE000, v4, v13, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_18;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_queue_register_dispatch_queue";
      v20 = 2082;
      v21 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v13, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_11;
  }
LABEL_19:
  if (v3)
LABEL_20:
    free(v3);
LABEL_21:

  return 0;
}

void nw_queue_async(void *a1)
{
  id v1;
  _BOOL8 v2;
  dispatch_block_t block;

  block = a1;
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v1 = (id)nw_context_copy_implicit_context::implicit_context;
  v2 = nw_context_copy_workloop(v1);

  dispatch_async((dispatch_queue_t)v2, block);
}

void sub_18397922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void nw_queue_async_current(void *a1)
{
  _BOOL8 v1;
  dispatch_block_t block;

  block = a1;
  v1 = nw_queue_copy_current_workloop();
  dispatch_async((dispatch_queue_t)v1, block);

}

BOOL nw_queue_create_source(int a1, int a2, unsigned int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  _BOOL8 source;

  v9 = a4;
  v10 = a5;
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v11 = (id)nw_context_copy_implicit_context::implicit_context;
  source = nw_queue_context_create_source(v11, a1, a2, a3, v9, v10);

  return source;
}

void sub_183979330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_queue_source_run_timer(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 40) == -1)
    {
      nw_context_reset_timer_block_with_time(*(_QWORD *)(a1 + 8), a1, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v3 = _Block_copy(*(const void **)(a1 + 16));
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 32);
      v8 = v3;
      v6 = v3;
      nw_context_reset_timer_block_with_time(v4, a1, v5);

    }
  }
  else if (gLogDatapath)
  {
    __nwlog_obj(a1, a2);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v10 = "nw_queue_source_run_timer";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Cancelled, not running timer", buf, 0xCu);
    }

  }
}

void sub_1839794C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25nw_queue_source_run_timerP15nw_queue_source_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  dispatch_time_t v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 == -1)
  {
    v4 = -1;
  }
  else
  {
    v4 = dispatch_time(0x8000000000000000, v3);
    v2 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(v2 + 32) = v4;
  return nw_queue_source_run_timer();
}

void __nw_queue_cancel_source_block_invoke(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)
    free(v1);
}

uint64_t nw_hash_table_create_no_lock(unsigned int a1, int a2, const void *(*a3)(const void *, unsigned int *), unsigned int (*a4)(const void *, unsigned int), BOOL (*a5)(const void *, const void *, unsigned int), void (*a6)(void *))
{
  uint64_t result;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    result = nw_hash_table_create_internal(a1, a2, a3, a4, a5, a6);
    if (result)
      *(_DWORD *)(result + 48) &= ~2u;
    return result;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_hash_table_create_no_lock";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_hash_table_create_no_lock";
        v10 = "%{public}s called with null count";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_hash_table_create_no_lock";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null count, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_hash_table_create_no_lock";
        v10 = "%{public}s called with null count, no backtrace";
        goto LABEL_18;
      }
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_hash_table_create_no_lock";
        v10 = "%{public}s called with null count, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (v7)
    free(v7);
  return 0;
}

BOOL nw_hash_table_create_internal(unsigned int a1, int a2, const void *(*a3)(const void *, unsigned int *), unsigned int (*a4)(const void *, unsigned int), BOOL (*a5)(const void *, const void *, unsigned int), void (*a6)(void *))
{
  char *v12;
  uint64_t v13;
  double *v14;
  __int128 v15;
  uint64_t v16;
  double *v17;
  double *v18;
  float64_t v19;
  double *v20;
  double *v21;
  uint64_t v22;
  char *v23;
  _BOOL8 result;
  NSObject *v25;
  void *v26;
  float64x2x2_t v27;

  v12 = (char *)malloc_type_calloc(1uLL, 16 * a1 + 56, 0xEAFB8F1AuLL);
  if (v12)
  {
LABEL_2:
    *((_DWORD *)v12 + 8) = a1;
    *((_DWORD *)v12 + 9) = a2;
    *(_QWORD *)v12 = a3;
    *((_QWORD *)v12 + 1) = a4;
    *((_QWORD *)v12 + 2) = a5;
    *((_QWORD *)v12 + 3) = a6;
    *((_QWORD *)v12 + 6) = *((_DWORD *)v12 + 12) | 3u;
    if (a1 >= 4)
    {
      v14 = (double *)(v12 + 56);
      v13 = a1 & 0xFFFFFFFC;
      v15 = 0uLL;
      v16 = v13;
      do
      {
        v17 = v14;
        v18 = v14 + 2;
        *(_QWORD *)&v19 = v14 + 6;
        v20 = v14 + 8;
        vst2q_f64(v14, *(float64x2x2_t *)&v15);
        v21 = v14 + 4;
        *(_QWORD *)&v27.val[1].f64[0] = v21;
        v27.val[1].f64[1] = v19;
        v27.val[0] = 0uLL;
        vst2q_f64(v21, v27);
        v14 = v20;
        v16 -= 4;
      }
      while (v16);
      if (v13 == a1)
        return (BOOL)v12;
    }
    else
    {
      v13 = 0;
    }
    v22 = a1 - v13;
    v23 = &v12[16 * v13 + 56];
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = v23;
      v23 += 16;
      --v22;
    }
    while (v22);
    return (BOOL)v12;
  }
  v25 = __nwlog_obj();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  v26 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

BOOL nw_hash_table_create_with_lock(unsigned int a1, int a2, const void *(*a3)(const void *, unsigned int *), unsigned int (*a4)(const void *, unsigned int), BOOL (*a5)(const void *, const void *, unsigned int), void (*a6)(void *))
{
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
    return nw_hash_table_create_internal(a1, a2, a3, a4, a5, a6);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_hash_table_create_with_lock";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_hash_table_create_with_lock";
        v10 = "%{public}s called with null count";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_hash_table_create_with_lock";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null count, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_17;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_hash_table_create_with_lock";
        v10 = "%{public}s called with null count, no backtrace";
        goto LABEL_16;
      }
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_hash_table_create_with_lock";
        v10 = "%{public}s called with null count, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if (v7)
    free(v7);
  return 0;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_62354()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

void nw_hash_node_free(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;

  if (*((_BYTE *)a2 + 30) == 2)
  {
    v4 = (void **)a2[1];
    if (!v4)
    {
LABEL_11:
      v9 = __nwlog_obj(a1, a2);
      os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      v10 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v10))
        goto LABEL_15;
      free(v10);
      if (!*((_WORD *)a2 + 14))
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else
  {
    v7 = __nwlog_obj(a1, a2);
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    v8 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v8))
      goto LABEL_15;
    free(v8);
    v4 = (void **)a2[1];
    if (!v4)
      goto LABEL_11;
  }
  if (*v4 != a2)
    goto LABEL_11;
  if (*((_WORD *)a2 + 14))
  {
LABEL_13:
    v11 = __nwlog_obj(a1, a2);
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    v12 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v12))
    {
      free(v12);
      goto LABEL_5;
    }
LABEL_15:
    __break(1u);
    return;
  }
LABEL_5:
  *((_BYTE *)a2 + 30) = 3;
  v5 = *a2;
  v6 = (_QWORD *)a2[1];
  if (*a2)
  {
    *(_QWORD *)(v5 + 8) = v6;
    v6 = (_QWORD *)a2[1];
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
  }
  *v6 = v5;
  free(a2);
}

void _nw_hash_table_release(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint32_t os_unfair_lock_opaque;
  NSObject *v6;
  void *v7;
  uint32_t v8;
  uint32_t v9;

  nw_hash_table_release_all_objects((uint64_t)a1, a2);
  if (a1[8]._os_unfair_lock_opaque)
  {
    os_unfair_lock_opaque = a1[12]._os_unfair_lock_opaque;
    if ((os_unfair_lock_opaque & 2) == 0)
      goto LABEL_3;
  }
  else
  {
    v6 = __nwlog_obj(v3, v4);
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v7))
    {
      __break(1u);
      return;
    }
    free(v7);
    os_unfair_lock_opaque = a1[12]._os_unfair_lock_opaque;
    if ((os_unfair_lock_opaque & 2) == 0)
    {
LABEL_3:
      a1[12]._os_unfair_lock_opaque = os_unfair_lock_opaque & 0xFFFFFFFE;
      if (a1[11]._os_unfair_lock_opaque)
        return;
      goto LABEL_10;
    }
  }
  os_unfair_lock_lock(a1 + 13);
  v9 = a1[11]._os_unfair_lock_opaque;
  v8 = a1[12]._os_unfair_lock_opaque;
  a1[12]._os_unfair_lock_opaque = v8 & 0xFFFFFFFE;
  if ((v8 & 2) != 0)
    os_unfair_lock_unlock(a1 + 13);
  if (!v9)
LABEL_10:
    free(a1);
}

uint64_t nw_protocol_hash_table_create(unsigned int a1, int a2)
{
  return nw_hash_table_create_no_lock(a1, a2, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
}

void nw_protocol_get_key(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
}

uint64_t nw_protocol_key_hash(int32x4_t *a1)
{
  return vaddvq_s32(*a1);
}

BOOL nw_protocol_matches_key(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t nw_packet_hash_table_create(unsigned int a1, int a2)
{
  return nw_hash_table_create_no_lock(a1, a2, (const void *(*)(const void *, unsigned int *))nw_packet_get_key, (unsigned int (*)(const void *, unsigned int))nw_packet_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_packet_matches_key, nw_packet_release);
}

uint64_t nw_packet_key_hash(int32x4_t *a1)
{
  return (vaddvq_s32(vaddq_s32(vaddq_s32(*a1, a1[1]), a1[2])) + a1[3].i32[0] + a1[3].i32[1] + a1[3].i32[2]);
}

BOOL nw_packet_matches_key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a1[6];
  v15 = a2[6];
  v16 = *((unsigned int *)a1 + 14);
  v17 = *((unsigned int *)a2 + 14);
  return v2 == v4 && v3 == v5 && v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13 && v14 == v15 && v16 == v17;
}

void nw_packet_release(void *a1)
{
  if (a1)
    free(a1);
}

void sub_18397A3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *nw_fd_wrapper_create_do_not_guard(int a1)
{
  _DWORD *v2;
  NSObject *v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  _WORD v18[17];

  *(_QWORD *)&v18[13] = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v16 = "nw_fd_wrapper_create_do_not_guard";
    v17 = 1024;
    *(_DWORD *)v18 = a1;
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_fd_wrapper_create_do_not_guard";
          v17 = 1024;
          *(_DWORD *)v18 = a1;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with invalid fd %d", buf, 0x12u);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v10 = type;
        v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446722;
            v16 = "nw_fd_wrapper_create_do_not_guard";
            v17 = 1024;
            *(_DWORD *)v18 = a1;
            v18[2] = 2082;
            *(_QWORD *)&v18[3] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with invalid fd %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          if (!v5)
            return 0;
          goto LABEL_11;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_fd_wrapper_create_do_not_guard";
          v17 = 1024;
          *(_DWORD *)v18 = a1;
          _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with invalid fd %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_fd_wrapper_create_do_not_guard";
          v17 = 1024;
          *(_DWORD *)v18 = a1;
          _os_log_impl(&dword_182FBE000, v6, v12, "%{public}s called with invalid fd %d, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v5)
      return 0;
LABEL_11:
    free(v5);
    return 0;
  }
  v2 = -[NWConcrete_nw_fd_wrapper initWithFileDescriptor:]([NWConcrete_nw_fd_wrapper alloc], a1);
  *((_BYTE *)v2 + 24) |= 2u;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_fd_wrapper_create_do_not_guard";
    v17 = 2114;
    *(_QWORD *)v18 = v2;
    _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Created %{public}@", buf, 0x16u);
  }

  return v2;
}

uint64_t nw_fd_wrapper_is_guarded(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    v3 = v2[6]._os_unfair_lock_opaque & 1;
    os_unfair_lock_unlock(v2 + 3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_fd_wrapper_is_guarded";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_fd_wrapper_is_guarded";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null wrapper", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_fd_wrapper_is_guarded";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null wrapper, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_fd_wrapper_is_guarded";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_fd_wrapper_is_guarded";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null wrapper, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_fd_wrapper_relinquish_fd(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  uint32_t os_unfair_lock_opaque;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint32_t v8;
  id v9;
  uint32_t v10;
  os_log_type_t v11;
  uint32_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  uint32_t v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint32_t v19;
  os_log_type_t v20;
  uint32_t v21;
  os_log_type_t v22;
  uint32_t v23;
  uint32_t v24;
  uint32_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  _WORD v39[17];

  *(_QWORD *)&v39[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    if ((v2[2]._os_unfair_lock_opaque & 0x80000000) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (id)gLogObj;
      os_unfair_lock_opaque = v2[2]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_fd_wrapper_relinquish_fd";
      v38 = 1024;
      *(_DWORD *)v39 = os_unfair_lock_opaque;
      v5 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (!__nwlog_fault(v5, &type, &v34))
        goto LABEL_38;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          v8 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v8;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s attempt to relinquish invalid fd %d", buf, 0x12u);
        }
        goto LABEL_37;
      }
      if (!v34)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v6, type))
        {
          v21 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v21;
          _os_log_impl(&dword_182FBE000, v6, v20, "%{public}s attempt to relinquish invalid fd %d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          v24 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v24;
          _os_log_impl(&dword_182FBE000, v6, v14, "%{public}s attempt to relinquish invalid fd %d, no backtrace", buf, 0x12u);
        }
        goto LABEL_37;
      }
      if (v15)
      {
        v16 = v2[2]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        v37 = "nw_fd_wrapper_relinquish_fd";
        v38 = 1024;
        *(_DWORD *)v39 = v16;
        v39[2] = 2082;
        *(_QWORD *)&v39[3] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v14, "%{public}s attempt to relinquish invalid fd %d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
    }
    else
    {
      if ((v2[6]._os_unfair_lock_opaque & 1) == 0)
      {
        v2[2]._os_unfair_lock_opaque = -1;
LABEL_40:
        os_unfair_lock_unlock(v2 + 3);
        goto LABEL_41;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v10 = v2[2]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_fd_wrapper_relinquish_fd";
      v38 = 1024;
      *(_DWORD *)v39 = v10;
      v5 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (!__nwlog_fault(v5, &type, &v34))
        goto LABEL_38;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          v12 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v12;
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s attempt to relinquish guarded fd %d", buf, 0x12u);
        }
LABEL_37:

LABEL_38:
        if (!v5)
          goto LABEL_40;
LABEL_39:
        free(v5);
        goto LABEL_40;
      }
      if (!v34)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v6, type))
        {
          v23 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v23;
          _os_log_impl(&dword_182FBE000, v6, v22, "%{public}s attempt to relinquish guarded fd %d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v17 = type;
      v18 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          v25 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 1024;
          *(_DWORD *)v39 = v25;
          _os_log_impl(&dword_182FBE000, v6, v17, "%{public}s attempt to relinquish guarded fd %d, no backtrace", buf, 0x12u);
        }
        goto LABEL_37;
      }
      if (v18)
      {
        v19 = v2[2]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        v37 = "nw_fd_wrapper_relinquish_fd";
        v38 = 1024;
        *(_DWORD *)v39 = v19;
        v39[2] = 2082;
        *(_QWORD *)&v39[3] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v17, "%{public}s attempt to relinquish guarded fd %d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
    }

    free(backtrace_string);
    if (!v5)
      goto LABEL_40;
    goto LABEL_39;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_fd_wrapper_relinquish_fd";
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v27, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_fd_wrapper_relinquish_fd";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null wrapper", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v28, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_fd_wrapper_relinquish_fd";
          v38 = 2082;
          *(_QWORD *)v39 = v30;
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null wrapper, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        goto LABEL_58;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_fd_wrapper_relinquish_fd";
        _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_fd_wrapper_relinquish_fd";
        _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null wrapper, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_58:
  if (v27)
    free(v27);
LABEL_41:

}

void sub_18397B2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_interpose;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

id *nw_interpose_client_register(int a1, void *a2)
{
  id v4;
  NWConcrete_nw_interpose *v5;
  id v6;
  id *v7;
  id *v8;
  id *v9;
  id v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  NWConcrete_nw_path_evaluator *evaluator_for_interpose;
  id v15;
  id v16;
  _OWORD *v17;
  NSObject *v18;
  id *v19;
  int v20;
  NSObject *v21;
  id *v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  NSObject *v39;
  objc_super v41;
  __int128 v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  id *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  __int128 *v50;
  _OWORD buffer[3];
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  nw_allow_use_of_dispatch_internal();
  v5 = [NWConcrete_nw_interpose alloc];
  v6 = v4;
  if (!v5)
  {
LABEL_60:

    goto LABEL_61;
  }
  v41.receiver = v5;
  v41.super_class = (Class)NWConcrete_nw_interpose;
  v7 = (id *)objc_msgSendSuper2(&v41, sel_init);
  if (!v7)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buffer[0]) = 136446210;
    *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    v24 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if ((__nwlog_fault(v24, buf, &v42) & 1) != 0)
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = buf[0];
        if (os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s [super init] failed", (uint8_t *)buffer, 0xCu);
        }
      }
      else if ((_BYTE)v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v32 = buf[0];
        v33 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            LODWORD(buffer[0]) = 136446466;
            *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
            WORD6(buffer[0]) = 2082;
            *(_QWORD *)((char *)buffer + 14) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s [super init] failed, dumping backtrace:%{public}s", (uint8_t *)buffer, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v33)
        {
          LODWORD(buffer[0]) = 136446210;
          *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s [super init] failed, no backtrace", (uint8_t *)buffer, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v37 = buf[0];
        if (os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_182FBE000, v25, v37, "%{public}s [super init] failed, backtrace limit exceeded", (uint8_t *)buffer, 0xCu);
        }
      }

    }
LABEL_52:
    if (v24)
      free(v24);
    goto LABEL_60;
  }
  v8 = v7;
  *((_DWORD *)v7 + 7) = a1;
  v9 = v7 + 8;
  objc_storeStrong(v7 + 8, a2);
  v10 = *v9;
  if (!*v9)
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    objc_storeStrong(v9, (id)nw_context_copy_implicit_context::implicit_context);
    v10 = *v9;
  }
  if (nw_context_is_inline(v10))
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buffer[0]) = 136446210;
    *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    v28 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (__nwlog_fault(v28, buf, &v42))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = buf[0];
        if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Cannot use nw_interpose on inline contexts", (uint8_t *)buffer, 0xCu);
        }
      }
      else if ((_BYTE)v42)
      {
        v34 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v35 = buf[0];
        v36 = os_log_type_enabled(v29, (os_log_type_t)buf[0]);
        if (v34)
        {
          if (v36)
          {
            LODWORD(buffer[0]) = 136446466;
            *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
            WORD6(buffer[0]) = 2082;
            *(_QWORD *)((char *)buffer + 14) = v34;
            _os_log_impl(&dword_182FBE000, v29, v35, "%{public}s Cannot use nw_interpose on inline contexts, dumping backtrace:%{public}s", (uint8_t *)buffer, 0x16u);
          }

          free(v34);
          goto LABEL_57;
        }
        if (v36)
        {
          LODWORD(buffer[0]) = 136446210;
          *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_182FBE000, v29, v35, "%{public}s Cannot use nw_interpose on inline contexts, no backtrace", (uint8_t *)buffer, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v38 = buf[0];
        if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(_QWORD *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_182FBE000, v29, v38, "%{public}s Cannot use nw_interpose on inline contexts, backtrace limit exceeded", (uint8_t *)buffer, 0xCu);
        }
      }

    }
LABEL_57:
    if (v28)
      free(v28);

    goto LABEL_60;
  }
  v52 = 0;
  memset(buffer, 0, sizeof(buffer));
  v11 = proc_pidinfo(a1, 17, 1uLL, buffer, 56);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  v13 = v12;
  if (v11 != 56)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v20 = *((_DWORD *)v8 + 7);
      *(_DWORD *)buf = 136446722;
      v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
      v45 = 2114;
      v46 = v8;
      v47 = 1024;
      v48 = v20;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to get upid for pid %d", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446978;
    v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    v45 = 2114;
    v46 = v8;
    v47 = 1024;
    v48 = a1;
    v49 = 2048;
    v50 = *(__int128 **)&buffer[1];
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] pid %u upid %llu", buf, 0x26u);
  }

  v13 = nw_parameters_create();
  nw_parameters_set_pid(v13, *((_DWORD *)v8 + 7));
  nw_parameters_set_proc_uuid(v13, buffer);
  nw_parameters_set_e_proc_uuid(v13, buffer);
  nw_parameters_set_delegated_unique_pid(v13, *(uint64_t *)&buffer[1]);
  nw_parameters_set_include_peer_to_peer(v13, 1);
  nw_parameters_set_context(v13, v8[8]);
  evaluator_for_interpose = nw_path_create_evaluator_for_interpose(v13);
  v15 = v8[5];
  v8[5] = evaluator_for_interpose;

  v16 = v8[5];
  if (!v16)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
      v45 = 2114;
      v46 = v8;
      v47 = 1024;
      v48 = a1;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to create evaluator for pid %d", buf, 0x1Cu);
    }

LABEL_20:
    v19 = 0;
    goto LABEL_21;
  }
  v17 = v16;
  v42 = v17[5];

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446978;
    v44 = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    v45 = 2114;
    v46 = v8;
    v47 = 1042;
    v48 = 16;
    v49 = 2098;
    v50 = &v42;
    _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] registered with client %{public,uuid_t}.16P", buf, 0x26u);
  }

  v19 = v8;
LABEL_21:

  if (v19)
  {
    v22 = v19;
    goto LABEL_64;
  }
LABEL_61:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v39 = (id)gLogObj;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buffer[0]) = 136446466;
    *(_QWORD *)((char *)buffer + 4) = "nw_interpose_client_register";
    WORD6(buffer[0]) = 2114;
    *(_QWORD *)((char *)buffer + 14) = 0;
    _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to allocate interpose", (uint8_t *)buffer, 0x16u);
  }

  v22 = 0;
LABEL_64:

  return v22;
}

void sub_18397BC28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id *nw_interpose_client_claim(const unsigned __int8 *a1, void *a2)
{
  id v4;
  NSObject *v5;
  const char *v6;
  id *v7;
  NWConcrete_nw_interpose *v8;
  id v9;
  char *v10;
  void **v11;
  NSObject *v12;
  NWConcrete_nw_path_evaluator *evaluator_for_client_id;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  objc_super v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const unsigned __int8 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  nw_allow_use_of_dispatch_internal();
  if (uuid_is_null(a1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      v7 = 0;
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136446466;
    v31 = "nw_interpose_client_claim";
    v32 = 2114;
    v33 = 0;
    v6 = "%{public}s [%{public}@] no client UUID";
LABEL_4:
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x16u);
    goto LABEL_5;
  }
  v8 = [NWConcrete_nw_interpose alloc];
  v9 = v4;
  if (!v8)
  {
LABEL_22:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
    *(_DWORD *)buf = 136446466;
    v31 = "nw_interpose_client_claim";
    v32 = 2114;
    v33 = 0;
    v6 = "%{public}s [%{public}@] failed to allocate interpose";
    goto LABEL_4;
  }
  v29.receiver = v8;
  v29.super_class = (Class)NWConcrete_nw_interpose;
  v10 = (char *)objc_msgSendSuper2(&v29, sel_init);
  v7 = (id *)v10;
  if (!v10)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if ((__nwlog_fault(v20, &type, &v27) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v20)
      free(v20);
    goto LABEL_22;
  }
  *(_OWORD *)(v10 + 12) = *(_OWORD *)a1;
  v11 = (void **)(v10 + 64);
  objc_storeStrong((id *)v10 + 8, a2);
  if (!*v11)
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    objc_storeStrong(v7 + 8, (id)nw_context_copy_implicit_context::implicit_context);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446978;
    v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    v32 = 2114;
    v33 = (char *)v7;
    v34 = 1042;
    v35 = 16;
    v36 = 2098;
    v37 = a1;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] claiming evaluator with client UUID %{public,uuid_t}.16P", buf, 0x26u);
  }

  evaluator_for_client_id = nw_path_create_evaluator_for_client_id(a1, *v11);
  v14 = v7[5];
  v7[5] = evaluator_for_client_id;

  v15 = v7[5];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  v17 = v16;
  if (!v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
      v32 = 2114;
      v33 = (char *)v7;
      v34 = 1042;
      v35 = 16;
      v36 = 2098;
      v37 = a1;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to claim evaluator with client UUID %{public,uuid_t}.16P", buf, 0x26u);
    }

    goto LABEL_22;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446978;
    v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    v32 = 2114;
    v33 = (char *)v7;
    v34 = 1042;
    v35 = 16;
    v36 = 2098;
    v37 = a1;
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] claimed evaluator with client UUID %{public,uuid_t}.16P", buf, 0x26u);
  }

LABEL_18:
  return v7;
}

void sub_18397C26C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_interpose_get_client_uuid(void *a1, _OWORD *a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _BOOL8 client_id;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 2);
    client_id = nw_path_evaluator_get_client_id(*(void **)&v4[10]._os_unfair_lock_opaque, a2);
    os_unfair_lock_unlock(v4 + 2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_interpose_get_client_uuid";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_interpose_get_client_uuid";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null interpose", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_interpose_get_client_uuid";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null interpose, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_interpose_get_client_uuid";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_interpose_get_client_uuid";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null interpose, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  client_id = 0;
LABEL_3:

  return client_id;
}

void nw_interpose_set_queue(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_interpose_set_queue";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_interpose_set_queue";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null interpose", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_interpose_set_queue";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null interpose, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_interpose_set_queue";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_interpose_set_queue";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null interpose, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    objc_storeStrong((id *)v3 + 9, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_interpose_set_queue";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_interpose_set_queue";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_interpose_set_queue";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_interpose_set_queue";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_interpose_set_queue";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

void nw_interpose_set_flow_event_handler(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_interpose_set_flow_event_handler";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_interpose_set_flow_event_handler";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null interpose", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_interpose_set_flow_event_handler";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null interpose, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v10)
          goto LABEL_4;
LABEL_39:
        free(v10);
        goto LABEL_4;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_interpose_set_flow_event_handler";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_interpose_set_flow_event_handler";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null interpose, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    os_unfair_lock_lock(v3 + 2);
    v6 = v3;
    v7 = _Block_copy(v5);
    v8 = *(void **)&v6[14]._os_unfair_lock_opaque;
    *(_QWORD *)&v6[14]._os_unfair_lock_opaque = v7;

    os_unfair_lock_unlock(v3 + 2);
    goto LABEL_4;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_interpose_set_flow_event_handler";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_interpose_set_flow_event_handler";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_interpose_set_flow_event_handler";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_interpose_set_flow_event_handler";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_interpose_set_flow_event_handler";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_39;
LABEL_4:

}

void nw_interpose_start(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  os_unfair_lock_s *v16;
  _QWORD v17[4];
  id v18;
  char v19;
  os_log_type_t v20;
  _BYTE location[12];
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    objc_initWeak((id *)location, v2);
    v3 = *(void **)&v2[10]._os_unfair_lock_opaque;
    v4 = *(void **)&v2[18]._os_unfair_lock_opaque;
    v5 = MEMORY[0x1E0C809B0];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_interpose_start_block_invoke;
    v17[3] = &unk_1E14AC8E0;
    objc_copyWeak(&v18, (id *)location);
    nw_path_evaluator_set_update_handler(v3, v4, v17);
    v6 = *(void **)&v2[16]._os_unfair_lock_opaque;
    v15[0] = v5;
    v15[1] = 3221225472;
    v15[2] = __nw_interpose_start_block_invoke_5;
    v15[3] = &unk_1E14ACFD0;
    v16 = v2;
    nw_queue_context_async(v6, v15);
    os_unfair_lock_unlock(v2 + 2);

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)location);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)location = 136446210;
  *(_QWORD *)&location[4] = "nw_interpose_start";
  v8 = (char *)_os_log_send_and_compose_impl();

  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_interpose_start";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null interpose", location, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v20;
      v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)location = 136446466;
          *(_QWORD *)&location[4] = "nw_interpose_start";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null interpose, dumping backtrace:%{public}s", location, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_interpose_start";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null interpose, no backtrace", location, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_interpose_start";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null interpose, backtrace limit exceeded", location, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void sub_18397D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  objc_destroyWeak((id *)(v20 - 96));

  _Unwind_Resume(a1);
}

void __nw_interpose_start_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  os_unfair_lock_s *WeakRetained;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  os_unfair_lock_s *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136446722;
      v7 = "nw_interpose_start_block_invoke";
      v8 = 2114;
      v9 = WeakRetained;
      v10 = 2114;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] Handling new path %{public}@", (uint8_t *)&v6, 0x20u);
    }

    os_unfair_lock_lock(WeakRetained + 2);
    nw_interpose_handle_path_update_locked(WeakRetained, v3);
    os_unfair_lock_unlock(WeakRetained + 2);
  }

}

void sub_18397D39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_interpose_start_block_invoke_5(uint64_t a1)
{
  _QWORD *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  id *v5;
  id v6;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (os_unfair_lock_s *)v2[5];
  if (v3)
  {
    v4 = v3 + 24;
    v5 = v3;
    os_unfair_lock_lock(v4);
    v6 = v5[6];
    os_unfair_lock_unlock(v4);

  }
  else
  {
    v6 = 0;
  }
  nw_interpose_handle_path_update_locked(v2, v6);

  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_18397D448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_interpose_handle_path_update_locked(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v16[4];
  uint64_t *v17;
  _QWORD v18[4];
  uint64_t *v19;
  _QWORD v20[4];
  _QWORD *v21;
  _QWORD v22[4];
  uint64_t *v23;
  id v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = nw_dictionary_create();
  v6 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke;
  v22[3] = &unk_1E14A8758;
  v7 = (uint64_t *)v3;
  v23 = v7;
  v8 = v5;
  v24 = v8;
  nw_path_enumerate_interface_options(v4, v22);
  v9 = v7[6];
  if (v9)
  {
    v20[0] = v6;
    v20[1] = 3221225472;
    v20[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_79;
    v20[3] = &unk_1E14A8D48;
    v21 = v8;
    nw_dictionary_apply(v9, (uint64_t)v20);

  }
  objc_storeStrong((id *)v7 + 6, v5);
  v10 = (void *)v7[8];
  v18[0] = v6;
  v18[1] = 3221225472;
  v18[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_2;
  v18[3] = &unk_1E14ACFD0;
  v11 = v7;
  v19 = v11;
  nw_queue_context_async(v10, v18);
  v12 = (unsigned __int8 *)nw_path_copy_flows(v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (v12)
      v14 = (*((_QWORD *)v12 + 3) - *((_QWORD *)v12 + 2)) >> 3;
    else
      LODWORD(v14) = 0;
    *(_DWORD *)buf = 136446722;
    v26 = "nw_interpose_handle_path_update_locked";
    v27 = 2114;
    v28 = v11;
    v29 = 1024;
    v30 = v14;
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] got %d flows from path", buf, 0x1Cu);
  }

  v16[0] = v6;
  v16[1] = 3221225472;
  v16[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_80;
  v16[3] = &unk_1E14AC200;
  v15 = v11;
  v17 = v15;
  nw_array_apply(v12, (uint64_t)v16);

}

void sub_18397D6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  const char *v5;
  char *v6;
  const char *v7;
  NSObject *p_super;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  nw_interpose_flow *v13;
  nw_interpose_flow *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NWConcrete_nw_path_flow_registration *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const unsigned __int8 *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = (char *)v5;
  if (v5)
    v7 = v5 + 104;
  else
    v7 = 0;
  if (v5)
  {
    if (uuid_is_null(a3))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      p_super = (id)gLogObj;
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        v28 = "nw_interpose_handle_path_update_locked_block_invoke";
        v29 = 2114;
        v30 = v9;
        v10 = "%{public}s [%{public}@] no nexus agent";
LABEL_10:
        _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
        goto LABEL_34;
      }
      goto LABEL_34;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    if (v12 && (v13 = (nw_interpose_flow *)nw_dictionary_copy_value(v12, (uint64_t)v7)) != 0)
    {
      v14 = v13;
      if (-[nw_interpose_flow matchNexusAgent:](v13, "matchNexusAgent:", a3))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136447234;
          v28 = "nw_interpose_handle_path_update_locked_block_invoke";
          v29 = 2114;
          v30 = v16;
          v31 = 1042;
          v32 = 16;
          v33 = 2098;
          v34 = a3;
          v35 = 2080;
          v36 = v7;
          _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] flow registration already exists for nexus agent %{public,uuid_t}.16P on %s", buf, 0x30u);
        }

LABEL_26:
        nw_dictionary_set_value(*(_QWORD *)(a1 + 40), v7, v14);
        p_super = &v14->super;
        goto LABEL_34;
      }
      p_super = &v14->super;
    }
    else
    {
      p_super = 0;
    }
    v26 = *(_OWORD *)a3;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136447234;
      v28 = "nw_interpose_handle_path_update_locked_block_invoke";
      v29 = 2114;
      v30 = v18;
      v31 = 1042;
      v32 = 16;
      v33 = 2098;
      v34 = (const unsigned __int8 *)&v26;
      v35 = 2080;
      v36 = v7;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] adding flow registration for nexus agent %{public,uuid_t}.16P on %s", buf, 0x30u);
    }

    v19 = nw_path_evaluator_create_flow_inner(*(void **)(*(_QWORD *)(a1 + 32) + 40), 0, 1, 0, 0, &v26, 0, 0, 0);
    if (v19)
    {
      v14 = -[nw_interpose_flow initWithInterface:registration:eventHandler:]([nw_interpose_flow alloc], "initWithInterface:registration:eventHandler:", v6, v19, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v21 = v20;
      if (v14)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136447234;
          v28 = "nw_interpose_handle_path_update_locked_block_invoke";
          v29 = 2114;
          v30 = v22;
          v31 = 1042;
          v32 = 16;
          v33 = 2098;
          v34 = (const unsigned __int8 *)&v26;
          v35 = 2080;
          v36 = v7;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] added flow registration for nexus agent %{public,uuid_t}.16P on %s", buf, 0x30u);
        }

        goto LABEL_26;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136447234;
        v28 = "nw_interpose_handle_path_update_locked_block_invoke";
        v29 = 2114;
        v30 = v25;
        v31 = 1042;
        v32 = 16;
        v33 = 2098;
        v34 = (const unsigned __int8 *)&v26;
        v35 = 2080;
        v36 = v7;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to create flow object for nexus agent %{public,uuid_t}.16P on %s", buf, 0x30u);
      }

      p_super = 0;
      nw_path_flow_registration_close(v19);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136447234;
        v28 = "nw_interpose_handle_path_update_locked_block_invoke";
        v29 = 2114;
        v30 = v24;
        v31 = 1042;
        v32 = 16;
        v33 = 2098;
        v34 = (const unsigned __int8 *)&v26;
        v35 = 2080;
        v36 = v7;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to create flow registration for nexus agent %{public,uuid_t}.16P on %s", buf, 0x30u);
      }

    }
    goto LABEL_34;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  p_super = (id)gLogObj;
  if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
  {
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v28 = "nw_interpose_handle_path_update_locked_block_invoke";
    v29 = 2114;
    v30 = v11;
    v10 = "%{public}s [%{public}@] no interface name";
    goto LABEL_10;
  }
LABEL_34:

}

void sub_18397DCC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_79(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  BOOL v8;

  v5 = a3;
  v6 = nw_dictionary_copy_value(*(_QWORD *)(a1 + 32), a2);
  v7 = v6;
  if (v6)
    v8 = v6 == v5;
  else
    v8 = 0;
  if (!v8)
    objc_msgSend(v5, "close");

  return 1;
}

void sub_18397DD64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_2(uint64_t a1)
{
  nw_path_evaluator_force_update(*(void **)(*(_QWORD *)(a1 + 32) + 40), 0);
}

uint64_t ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_80(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD v34[4];
  id v35;
  _BYTE *v36;
  char v37;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(id *)(a1 + 32);
  v6 = v4;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null interpose", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v37)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v29, "%{public}s called with null interpose, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null interpose, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_32;
  }
  v8 = v5[6];
  if (!v8)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null interpose->flows", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v37)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v30, "%{public}s called with null interpose->flows, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null interpose->flows, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null interpose->flows, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_32:

    free(backtrace_string);
    if (!v14)
      goto LABEL_59;
    goto LABEL_58;
  }
  if (!v6)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v14, &type, &v37))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v15, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v26;
          _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
LABEL_57:
        if (!v14)
        {
LABEL_59:

          goto LABEL_60;
        }
LABEL_58:
        free(v14);
        goto LABEL_59;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_182FBE000, v15, v31, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v40 = __Block_byref_object_copy__62808;
  v41 = __Block_byref_object_dispose__62809;
  v42 = 0;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = ___ZL28nw_interpose_flow_get_lockedP23NWConcrete_nw_interposePU26objcproto15OS_nw_path_flow8NSObject_block_invoke;
  v34[3] = &unk_1E14AB4B0;
  v9 = v6;
  v35 = v9;
  v36 = buf;
  nw_dictionary_apply(v8, (uint64_t)v34);
  v10 = *(id *)(*(_QWORD *)&buf[8] + 40);

  _Block_object_dispose(buf, 8);
  if (v10)
  {
    -[NSObject resetFlow:](v10, "resetFlow:", v9);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_interpose_handle_path_update_locked_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v12;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] updated flow", buf, 0x16u);
    }

    goto LABEL_62;
  }
LABEL_60:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v32 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_interpose_handle_path_update_locked_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v32;
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to find flowObj", buf, 0x16u);
  }
LABEL_62:

  return 1;
}

void sub_18397E620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__62808(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__62809(uint64_t a1)
{

}

uint64_t ___ZL28nw_interpose_flow_get_lockedP23NWConcrete_nw_interposePU26objcproto15OS_nw_path_flow8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  int v6;

  v5 = a3;
  v6 = objc_msgSend(v5, "matchNexusAgentWithFlow:", *(_QWORD *)(a1 + 32));
  if (v6)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

  return v6 ^ 1u;
}

void sub_18397E6C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_interpose_cancel(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    v3 = v2;
    v4 = *(_QWORD *)&v3[12]._os_unfair_lock_opaque;
    if (v4)
    {
      nw_dictionary_apply(v4, (uint64_t)&__block_literal_global_62831);
LABEL_4:
      v5 = *(void **)&v3[14]._os_unfair_lock_opaque;
      *(_QWORD *)&v3[14]._os_unfair_lock_opaque = 0;

      v6 = *(void **)&v3[10]._os_unfair_lock_opaque;
      if (v6)
      {
        nw_path_evaluator_cancel(v6);
        v7 = *(void **)&v3[10]._os_unfair_lock_opaque;
        *(_QWORD *)&v3[10]._os_unfair_lock_opaque = 0;

      }
      os_unfair_lock_unlock(v2 + 2);
      goto LABEL_7;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_interpose_flow_clear_handlers_locked";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_interpose_flow_clear_handlers_locked";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null interpose->flows", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_interpose_flow_clear_handlers_locked";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s called with null interpose->flows, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_interpose_flow_clear_handlers_locked";
          _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s called with null interpose->flows, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_interpose_flow_clear_handlers_locked";
          _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null interpose->flows, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (v13)
      free(v13);
    goto LABEL_4;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_interpose_cancel";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v9, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_interpose_cancel";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null interpose", buf, 0xCu);
      }
    }
    else if (v24)
    {
      v16 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_interpose_cancel";
          v28 = 2082;
          v29 = v16;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null interpose, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        goto LABEL_37;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_interpose_cancel";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_interpose_cancel";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null interpose, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_37:
  if (v9)
    free(v9);
LABEL_7:

}

void sub_18397EBC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL39nw_interpose_flow_clear_handlers_lockedP23NWConcrete_nw_interpose_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  objc_msgSend(a3, "clearFlowEventHandler");
  return 1;
}

void __nw_http_cookie_storage_copy_shared_block_invoke()
{
  NWConcrete_nw_http_cookie_storage *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc_init(NWConcrete_nw_http_cookie_storage);
  v1 = (void *)nw_http_cookie_storage_copy_shared_storage;
  nw_http_cookie_storage_copy_shared_storage = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(nw_http_cookie_storage_copy_shared_storage + 8);
  *(_QWORD *)(nw_http_cookie_storage_copy_shared_storage + 8) = v2;

}

NWConcrete_nw_http_cookie_storage *nw_http_cookie_storage_create_ns(void *a1)
{
  NSHTTPCookieStorage *v1;
  NWConcrete_nw_http_cookie_storage *v2;
  NSHTTPCookieStorage *cookieStorage;

  v1 = a1;
  v2 = objc_alloc_init(NWConcrete_nw_http_cookie_storage);
  cookieStorage = v2->cookieStorage;
  v2->cookieStorage = v1;

  return v2;
}

void __nw_http_cookie_enumerate_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          objc_msgSend(v9, "name");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "value");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(v10, "UTF8String"), objc_msgSend(v11, "UTF8String"));

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }
  }

}

uint64_t __nw_http_cookie_parse_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;

  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a4, a5, 5);
  objc_msgSend(MEMORY[0x1E0C92C00], "_cookieForSetCookieString:forURL:partition:", v6, *(_QWORD *)(a1 + 40), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);

  return 1;
}

void ___ZL32nw_protocol_setup_tcp_definitionv_block_invoke()
{
  __int128 *v0;
  NWConcrete_nw_protocol_definition *v1;
  void *v2;

  v0 = (__int128 *)nw_protocol_tcp_identifier();
  v1 = nw_protocol_definition_create_with_identifier(v0);
  v2 = (void *)g_tcp_definition;
  g_tcp_definition = (uint64_t)v1;

  nw_protocol_definition_set_options_allocator((void *)g_tcp_definition, (uint64_t)nw_tcp_allocate_options, (uint64_t)nw_tcp_copy_options, (uint64_t)nw_tcp_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)g_tcp_definition, (uint64_t)nw_tcp_option_is_equal);
  nw_protocol_definition_set_metadata_allocator((void *)g_tcp_definition, (uint64_t)nw_tcp_allocate_metadata, (uint64_t)nw_tcp_deallocate_metadata);
  nw_protocol_definition_set_context_globals_allocator((void *)g_tcp_definition, nw_tcp_allocate_globals, nw_tcp_deallocate_globals);
  nw_protocol_definition_set_has_global_definition((void *)g_tcp_definition);
}

BOOL nw_tcp_allocate_options(void *a1)
{
  id v1;
  _QWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[4] = 0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_BYTE *)v2 + 38) = 0;
    *((_WORD *)v2 + 18) = 1;
    *(_QWORD *)((char *)v2 + 28) = 0x2FFFFFFFFLL;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_18397F060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_tcp_copy_options(void *a1, __int128 *a2)
{
  id v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 result;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  void *v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_tcp_copy_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_tcp_copy_options";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_tcp_copy_options";
            v22 = 2082;
            v23 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_tcp_copy_options";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_tcp_copy_options";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v9)
      free(v9);
    v4 = 0;
    goto LABEL_4;
  }
  v4 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    v4[4] = 0;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    v5 = *a2;
    v6 = a2[1];
    v4[4] = *((_QWORD *)a2 + 4);
    *(_OWORD *)v4 = v5;
    *((_OWORD *)v4 + 1) = v6;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v21 = "strict_calloc";
  v22 = 2048;
  v23 = 1;
  v24 = 2048;
  v25 = 40;
  v13 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_18397F3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_tcp_deallocate_options(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_tcp_option_is_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (!a2 || !a3)
    return a2 == a3;
  return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4];
}

BOOL nw_tcp_allocate_metadata(void *a1)
{
  id v1;
  _OWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x40uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[2] = 0u;
    v2[3] = 0u;
    *v2 = 0u;
    v2[1] = 0u;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_18397F594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_tcp_deallocate_metadata(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_tcp_allocate_globals(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 result;
  NSObject *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = malloc_type_calloc(1uLL, 0x14CuLL, 0xEAFB8F1AuLL);
  if (v5)
    goto LABEL_2;
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  v8 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
LABEL_2:
    nw_tcp_init_globals();

    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

void sub_18397F70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_tcp_deallocate_globals(uint64_t a1, void *a2)
{
  nw_tcp_destroy_globals();
  if (a2)
    free(a2);
}

void nw_tcp_options_set_reduce_buffering(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_reduce_buffering_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_reduce_buffering";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_reduce_buffering";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_reduce_buffering";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18397FA2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_reduce_buffering_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 36) = *(_WORD *)(a2 + 36) & 0xFFFE | *(unsigned __int8 *)(a1 + 32);
  return 1;
}

void nw_tcp_options_set_no_timewait(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_no_timewait_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_no_timewait";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_timewait";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_no_timewait";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_timewait";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_timewait";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18397FD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_timewait_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFFFB | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)v2 = v3 & 0xFFFB | (4 * (*(_BYTE *)(a1 + 32) & 0x3F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_no_push(nw_protocol_options_t options, BOOL no_push)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_no_push_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = no_push;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_no_push";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_push";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_no_push";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_push";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_push";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183980030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_push_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFFF7 | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)v2 = v3 & 0xFFF7 | (8 * (*(_BYTE *)(a1 + 32) & 0x1F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_no_options(nw_protocol_options_t options, BOOL no_options)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_no_options_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = no_options;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_no_options";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_options";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_no_options";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_options";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_options";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18398033C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_options_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFFEF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)v2 = v3 & 0xFFEF | (16 * (*(_BYTE *)(a1 + 32) & 0xF));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_enable_keepalive_offload(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_enable_keepalive_offload_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_enable_keepalive_offload";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_enable_keepalive_offload";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_keepalive_offload";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183980648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_keepalive_offload_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFFBF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)v2 = v3 & 0xFFBF | ((*(_BYTE *)(a1 + 32) & 3) << 6);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_disable_ack_stretching(nw_protocol_options_t options, BOOL disable_ack_stretching)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_disable_ack_stretching_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = disable_ack_stretching;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_disable_ack_stretching";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_ack_stretching";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_disable_ack_stretching";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_ack_stretching";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_ack_stretching";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183980954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_disable_ack_stretching_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFF7F | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)v2 = v3 & 0xFF7F | ((*(_BYTE *)(a1 + 32) & 1) << 7);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_disable_blackhole_detection(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_disable_blackhole_detection_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_disable_blackhole_detection";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_blackhole_detection";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_disable_blackhole_detection";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_blackhole_detection";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_blackhole_detection";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183980C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_disable_blackhole_detection_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)v2 = v3 & 0xFEFF | (*(unsigned __int8 *)(a1 + 32) << 8);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_enable_background_traffic_management(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_enable_background_traffic_management_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_enable_background_traffic_management";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_enable_background_traffic_management";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_background_traffic_management";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183980F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_background_traffic_management_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFDFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_WORD *)v2 = v3 & 0xFDFF | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_enable_fast_open(nw_protocol_options_t options, BOOL enable_fast_open)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_enable_fast_open_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = enable_fast_open;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_enable_fast_open";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_fast_open";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_enable_fast_open";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_fast_open";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_fast_open";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183981270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_fast_open_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFF7FF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 11);
  *(_WORD *)v2 = v3 & 0xF7FF | (*(unsigned __int8 *)(a1 + 32) << 11);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_no_fast_open_cookie(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_no_fast_open_cookie_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_no_fast_open_cookie";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_fast_open_cookie";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_no_fast_open_cookie";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_fast_open_cookie";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_no_fast_open_cookie";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183981578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_fast_open_cookie_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFDFFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 13);
  *(_WORD *)v2 = v3 & 0xDFFF | (*(unsigned __int8 *)(a1 + 32) << 13);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

BOOL nw_tcp_options_get_no_fast_open_cookie(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_no_fast_open_cookie_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1839818B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_no_fast_open_cookie_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_WORD *)(a2 + 36) & 0x2000) != 0;
  return 1;
}

void nw_tcp_options_set_fast_open_force_enable(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_fast_open_force_enable_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_fast_open_force_enable";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_fast_open_force_enable";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_fast_open_force_enable";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183981BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_fast_open_force_enable_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFBFFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 14);
  *(_WORD *)v2 = v3 & 0xBFFF | (*(unsigned __int8 *)(a1 + 32) << 14);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_retransmit_fin_drop(nw_protocol_options_t options, BOOL retransmit_fin_drop)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_retransmit_fin_drop_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = retransmit_fin_drop;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_retransmit_fin_drop";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_retransmit_fin_drop";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_retransmit_fin_drop";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_retransmit_fin_drop";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_retransmit_fin_drop";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183981ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_retransmit_fin_drop_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFFFBFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 10);
  *(_WORD *)v2 = v3 & 0xFBFF | (*(unsigned __int8 *)(a1 + 32) << 10);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_disable_ecn(nw_protocol_options_t options, BOOL disable_ecn)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_disable_ecn_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = disable_ecn;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_disable_ecn";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_ecn";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_disable_ecn";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_ecn";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_disable_ecn";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1839821D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_disable_ecn_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = v3 & 0xFFFF7FFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_WORD *)v2 = v3 & 0x7FFF | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_reset_local_port(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_reset_local_port_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_reset_local_port";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_reset_local_port";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_reset_local_port";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_reset_local_port";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_reset_local_port";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1839824E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_reset_local_port_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a2 + 36);
  v2 = a2 + 36;
  v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFEFFFF | (*(unsigned __int8 *)(a1 + 32) << 16);
  *(_WORD *)v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1;
}

void nw_tcp_options_set_maximum_segment_size(nw_protocol_options_t options, uint32_t maximum_segment_size)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  uint32_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_maximum_segment_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = maximum_segment_size;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_maximum_segment_size";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_maximum_segment_size";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_maximum_segment_size";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_maximum_segment_size";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_maximum_segment_size";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1839827E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_maximum_segment_size_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_tcp_options_set_persist_timeout(nw_protocol_options_t options, uint32_t persist_timeout)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  uint32_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_persist_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = persist_timeout;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_persist_timeout";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_persist_timeout";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_persist_timeout";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_persist_timeout";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_persist_timeout";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183982AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_persist_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_tcp_options_set_keepalive_count(nw_protocol_options_t options, uint32_t keepalive_count)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  uint32_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_keepalive_count_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = keepalive_count;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_keepalive_count";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_keepalive_count";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_keepalive_count";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_keepalive_count";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_keepalive_count";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183982DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_keepalive_count_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_tcp_options_set_multipath_force_version(nw_protocol_options_t options, nw_multipath_version_t multipath_force_version)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  nw_multipath_version_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_multipath_force_version_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = multipath_force_version;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_multipath_force_version";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_multipath_force_version";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_multipath_force_version";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_multipath_force_version";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_multipath_force_version";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1839830AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_multipath_force_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_tcp_options_get_multipath_force_version(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_multipath_force_version_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_options_get_multipath_force_version";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_options_get_multipath_force_version";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_options_get_multipath_force_version";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_options_get_multipath_force_version";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_options_get_multipath_force_version";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1839833C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_multipath_force_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 28);
  return 1;
}

void nw_tcp_options_set_enable_l4s(void *a1, int a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_enable_l4s_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_tcp_options_set_enable_l4s";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_l4s";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_tcp_options_set_enable_l4s";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_l4s";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_tcp_options_set_enable_l4s";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1839836D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_l4s_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint32_t nw_tcp_get_available_receive_buffer(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  uint32_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  if (nw_protocol_metadata_is_tcp(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_get_available_receive_buffer_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    v2 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_get_available_receive_buffer";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_get_available_receive_buffer";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_get_available_receive_buffer";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_get_available_receive_buffer";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_get_available_receive_buffer";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1839839EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_get_available_receive_buffer_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  if (*(_QWORD *)a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(_QWORD))a2)(*(_QWORD *)(a2 + 48));
  os_unfair_lock_unlock(v4);
  return 1;
}

uint32_t nw_tcp_get_available_send_buffer(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  uint32_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  if (nw_protocol_metadata_is_tcp(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_get_available_send_buffer_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    v2 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_get_available_send_buffer";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_get_available_send_buffer";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_get_available_send_buffer";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_get_available_send_buffer";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_get_available_send_buffer";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183983D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_get_available_send_buffer_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t (*v5)(_QWORD);

  v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  v5 = *(uint64_t (**)(_QWORD))(a2 + 8);
  if (v5)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5(*(_QWORD *)(a2 + 48));
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_tcp_reset_keepalives(void *a1, char a2, int a3, int a4, int a5)
{
  NSObject *v9;
  uint64_t v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _QWORD v20[5];
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  os_log_type_t type;
  _BYTE buf[24];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (nw_protocol_metadata_is_tcp(v9))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v28 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __nw_tcp_reset_keepalives_block_invoke;
    v20[3] = &unk_1E14A87C8;
    v20[4] = buf;
    v24 = a2;
    v21 = a3;
    v22 = a4;
    v23 = a5;
    nw_protocol_metadata_access_handle((uint64_t)v9, (uint64_t)v20);
    v10 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_reset_keepalives";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v13, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_reset_keepalives";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_reset_keepalives";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_reset_keepalives";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_reset_keepalives";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v13)
    free(v13);
  v10 = 22;
LABEL_3:

  return v10;
}

void sub_183984108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_reset_keepalives_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  v5 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 16);
  if (v5)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5(*(_QWORD *)(a2 + 48), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48));
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_tcp_enable_nodelay(void *a1)
{
  return nw_tcp_set_no_delay(a1, 1);
}

uint64_t nw_tcp_set_no_delay(void *a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_metadata_is_tcp(v3))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_tcp_set_no_delay_block_invoke;
    v14[3] = &unk_1E14A87F0;
    v14[4] = buf;
    v15 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v14);
    v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_set_no_delay";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_set_no_delay";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_set_no_delay";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_set_no_delay";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_set_no_delay";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 22;
LABEL_3:

  return v4;
}

void sub_1839844A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_set_no_delay_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t (*v5)(_QWORD, _QWORD);

  v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  v5 = *(uint64_t (**)(_QWORD, _QWORD))(a2 + 24);
  if (v5)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5(*(_QWORD *)(a2 + 48), *(unsigned __int8 *)(a1 + 40));
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_tcp_set_no_push(void *a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_metadata_is_tcp(v3))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_tcp_set_no_push_block_invoke;
    v14[3] = &unk_1E14A87F0;
    v14[4] = buf;
    v15 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v14);
    v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tcp_set_no_push";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_set_no_push";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcp_set_no_push";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_set_no_push";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_set_no_push";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 22;
LABEL_3:

  return v4;
}

void sub_183984830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_set_no_push_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t (*v5)(_QWORD, _QWORD);

  v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  v5 = *(uint64_t (**)(_QWORD, _QWORD))(a2 + 32);
  if (v5)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5(*(_QWORD *)(a2 + 48), *(unsigned __int8 *)(a1 + 40));
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_mem_buffer_manager_close(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_mem_buffer_manager_close";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v10, &type, &v17))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_mem_buffer_manager_close";
      v13 = "%{public}s called with null buffer_manager";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_mem_buffer_manager_close";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null buffer_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_34;
      }
      if (!v16)
      {
LABEL_34:
        if (v10)
          free(v10);
        return;
      }
      *(_DWORD *)buf = 136446210;
      v20 = "nw_mem_buffer_manager_close";
      v13 = "%{public}s called with null buffer_manager, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_mem_buffer_manager_close";
      v13 = "%{public}s called with null buffer_manager, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_34;
  }
  v2 = (_QWORD *)a1[11];
  if (v2)
  {
    os_unfair_lock_lock(&nw_mem_cache_lock);
    v3 = v2[10];
    v4 = (_QWORD *)v2[11];
    if (v3)
    {
      *(_QWORD *)(v3 + 88) = v4;
      v4 = (_QWORD *)v2[11];
    }
    else
    {
      qword_1ECD84A28 = v2[11];
    }
    *v4 = v3;
    os_unfair_lock_unlock(&nw_mem_cache_lock);
    nw_mem_cache_magazine_purge((uint64_t)v2);
    if (v2[1])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      v5 = v2[1];
      *(_DWORD *)buf = 136446978;
      v20 = "nw_mem_cache_destroy";
      v21 = 2082;
      v22 = (char *)(v2 + 12);
      v23 = 2048;
      v24 = v2;
      v25 = 2048;
      v26 = v5;
      v6 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v6))
      {
        __break(1u);
        return;
      }
      free(v6);
    }
    v2[23] = -1;
    v2[24] = -1;
    v2[25] = 0;
    v7 = (void *)v2[36];
    if (v7)
    {
      free(v7);
      v2[36] = 0;
    }
    if (gLogDatapath)
    {
      v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v20 = "nw_mem_cache_destroy";
        v21 = 2082;
        v22 = (char *)(v2 + 12);
        v23 = 2048;
        v24 = v2;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\": nwm %p", buf, 0x20u);
      }
    }
    nw_mem_region_release(v2[27]);
    v2[27] = 0;
    v8 = (void *)*(v2 - 1);
    if (v8)
      malloc_zone_free((malloc_zone_t *)g_slab_zone, v8);
    a1[11] = 0;
  }
  v9 = a1[10];
  if (v9)
    nw_mem_region_release(v9);
  free(a1);
}

BOOL nw_protocol_http_early_data_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _BOOL8 result;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_http_early_data_create";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_protocol_http_early_data_create";
          v12 = "%{public}s called with null parameters";
LABEL_27:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v17 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_protocol_http_early_data_create";
            v22 = 2082;
            v23 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_28;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_protocol_http_early_data_create";
          v12 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_27;
        }
      }
      else
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_protocol_http_early_data_create";
          v12 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }
LABEL_28:
    if (v9)
      free(v9);
    return 0;
  }
  v5 = malloc_type_calloc(1uLL, 0x108uLL, 0xEAFB8F1AuLL);
  if (v5)
    goto LABEL_3;
  v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v21 = "strict_calloc";
  v22 = 2048;
  v23 = 1;
  v24 = 2048;
  v25 = 264;
  v14 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
LABEL_3:
    v5[32] = 0;
    *((_OWORD *)v5 + 14) = 0u;
    *((_OWORD *)v5 + 15) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 13) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    if (gLogDatapath)
    {
      v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v21 = "nw_protocol_http_early_data_create";
        v22 = 2082;
        v23 = (uint64_t)v5 + 114;
        v24 = 2080;
        v25 = (uint64_t)" ";
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    if (nw_protocol_http_early_data_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_63386);
    v5[2] = &nw_protocol_http_early_data_identifier::protocol_identifier;
    if (nw_protocol_http_early_data_get_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http_early_data_get_callbacks(void)::onceToken, &__block_literal_global_5_63387);
    v5[3] = &nw_protocol_http_early_data_get_callbacks(void)::protocol_callbacks;
    v5[5] = v5;
    v6 = a4;
    v7 = v6[12];

    *((_BYTE *)v5 + 256) = v5[32] & 0xFE | ((v7 & 0x8000) != 0);
    v5[8] = v5 + 13;
    nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_early_data_create::$_0::__invoke);
    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_http_early_data_create::$_0::__invoke(nw_protocol_http_early_data_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

void ___ZL41nw_protocol_http_early_data_get_callbacksv_block_invoke()
{
  qword_1EDCF23C0 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCF23C8 = nw_protocol_common_get_path;
  qword_1EDCF23D0 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCF23D8 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCF2360 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCF2368 = nw_protocol_common_connect;
  qword_1EDCF2410 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCF2418 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCF2458 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCF2420 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1EDCF2428 = (uint64_t)nw_protocol_common_waiting_for_output;
  unk_1EDCF2430 = nw_protocol_common_copy_info;
  qword_1EDCF23E0 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCF23E8 = nw_protocol_common_unregister_notification;
  qword_1EDCF23F0 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCF23F8 = nw_protocol_common_updated_path;
  qword_1EDCF23A0 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCF23A8 = nw_protocol_http_early_data_get_output_frames;
  qword_1EDCF23B0 = (uint64_t)nw_protocol_http_early_data_finalize_output_frames;
  unk_1EDCF23B8 = nw_protocol_common_link_state;
  qword_1EDCF2390 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCF2398 = nw_protocol_http_early_data_output_available;
  nw_protocol_http_early_data_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  *(_QWORD *)algn_1EDCF2358 = nw_protocol_http_early_data_remove_input_handler;
  qword_1EDCF2448 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCF2450 = nw_protocol_http_early_data_reset;
  qword_1EDCF2370 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCF2378 = nw_protocol_http_early_data_connected;
  qword_1EDCF2380 = (uint64_t)nw_protocol_http_early_data_disconnected;
  unk_1EDCF2388 = nw_protocol_http_early_data_error;
  qword_1EDCF2400 = (uint64_t)nw_protocol_http_early_data_supports_external_data;
  unk_1EDCF2408 = nw_protocol_common_input_finished;
}

uint64_t nw_protocol_http_early_data_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  _BYTE *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  NSObject *v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http_early_data_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v8, &type, &v19))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v11 = "%{public}s called with null protocol";
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_protocol_http_early_data_get_output_frames";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_52:
        if (!v8)
          return 0;
LABEL_53:
        free(v8);
        return 0;
      }
      if (!v13)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http_early_data_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v8, &type, &v19))
      goto LABEL_52;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v19)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http_early_data_get_output_frames";
        v11 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_51;
      }
      v14 = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15)
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_http_early_data_get_output_frames";
        v11 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_51;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_http_early_data_get_output_frames";
        v23 = 2082;
        v24 = v14;
        v16 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v9, v10, v16, buf, 0x16u);
      }
LABEL_35:
      free(v14);
      if (!v8)
        return 0;
      goto LABEL_53;
    }
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http_early_data_get_output_frames";
    v11 = "%{public}s called with null http_early_data";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_52;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http_early_data_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v8, &type, &v19))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v11 = "%{public}s called with null return_array";
      goto LABEL_51;
    }
    if (!v19)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v11 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_51;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v17)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v11 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_51;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v23 = 2082;
      v24 = v14;
      v16 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if ((handle[256] & 4) == 0)
    return nw_protocol_get_output_frames((uint64_t)a1->output_handler, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
  if ((handle[198] & 1) == 0 && gLogDatapath)
  {
    v18 = __nwlog_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "nw_protocol_http_early_data_get_output_frames";
      v23 = 2082;
      v24 = handle + 114;
      v25 = 2080;
      v26 = " ";
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%snot vending output frames, still replaying early data", buf, 0x20u);
    }
  }
  return 0;
}

uint64_t nw_protocol_http_early_data_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _BYTE *handle;
  nw_frame *tqh_first;
  nw_frame *v6;
  char v7;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t);
  void *v21;
  _BYTE *v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_http_early_data_finalize_output_frames";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http_early_data_finalize_output_frames";
      v12 = "%{public}s called with null protocol";
LABEL_52:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      goto LABEL_53;
    }
    if (!v23)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_http_early_data_finalize_output_frames";
        v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_http_early_data_finalize_output_frames";
        v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v15)
      goto LABEL_39;
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_http_early_data_finalize_output_frames";
    v27 = 2082;
    v28 = backtrace_string;
    v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
    _os_log_impl(&dword_182FBE000, v10, v11, v16, buf, 0x16u);
    goto LABEL_39;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_http_early_data_finalize_output_frames";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_http_early_data_finalize_output_frames";
      v12 = "%{public}s called with null http_early_data";
      goto LABEL_52;
    }
    if (!v23)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_http_early_data_finalize_output_frames";
        v12 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_http_early_data_finalize_output_frames";
        v12 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v17)
      goto LABEL_39;
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_http_early_data_finalize_output_frames";
    v27 = 2082;
    v28 = backtrace_string;
    v16 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
    goto LABEL_38;
  }
  if (a2)
  {
    if ((handle[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        v13 = __nwlog_obj();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v26 = "nw_protocol_http_early_data_finalize_output_frames";
          v27 = 2082;
          v28 = handle + 114;
          v29 = 2080;
          v30 = " ";
          _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if ((handle[256] & 2) != 0)
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v20 = ___ZL50nw_protocol_http_early_data_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      v21 = &__block_descriptor_tmp_8_63522;
      v22 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first)
          break;
        v6 = (nw_frame *)*((_QWORD *)tqh_first + 4);
        v7 = ((uint64_t (*)(_QWORD *))v20)(v19);
        tqh_first = v6;
      }
      while ((v7 & 1) != 0);
    }
    return nw_protocol_finalize_output_frames((uint64_t)a1->output_handler, (uint64_t)a2);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_http_early_data_finalize_output_frames";
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23))
    goto LABEL_53;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v23)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_http_early_data_finalize_output_frames";
        v12 = "%{public}s called with null frames, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_http_early_data_finalize_output_frames";
        v12 = "%{public}s called with null frames, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_protocol_http_early_data_finalize_output_frames";
      v27 = 2082;
      v28 = backtrace_string;
      v16 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
LABEL_39:
    free(backtrace_string);
    goto LABEL_53;
  }
  v10 = __nwlog_obj();
  v11 = type;
  if (os_log_type_enabled(v10, type))
  {
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_http_early_data_finalize_output_frames";
    v12 = "%{public}s called with null frames";
    goto LABEL_52;
  }
LABEL_53:
  if (v9)
    free(v9);
  return 0;
}

void nw_protocol_http_early_data_output_available(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  NSObject *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_early_data_output_available";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v3, &type, &v12))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_early_data_output_available";
      v6 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v9 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_http_early_data_output_available";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_39:
        if (!v3)
          return;
LABEL_40:
        free(v3);
        return;
      }
      if (!v9)
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_early_data_output_available";
      v6 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_early_data_output_available";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_38:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_39;
  }
  handle = a1->handle;
  if (handle)
  {
    if ((handle[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        v7 = __nwlog_obj();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v15 = "nw_protocol_http_early_data_output_available";
          v16 = 2082;
          v17 = handle + 114;
          v18 = 2080;
          v19 = " ";
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    if ((handle[256] & 4) != 0)
      nw_http_early_data_replay((uint64_t)handle);
    else
      nw_protocol_output_available(*((_QWORD **)handle + 6), (uint64_t)handle);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_http_early_data_output_available";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v3, &type, &v12))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_early_data_output_available";
    v6 = "%{public}s called with null http_early_data";
    goto LABEL_38;
  }
  if (!v12)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_early_data_output_available";
    v6 = "%{public}s called with null http_early_data, backtrace limit exceeded";
    goto LABEL_38;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v11 = os_log_type_enabled(v4, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_early_data_output_available";
    v6 = "%{public}s called with null http_early_data, no backtrace";
    goto LABEL_38;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_protocol_http_early_data_output_available";
    v16 = 2082;
    v17 = v10;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_early_data, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v3)
    goto LABEL_40;
}

uint64_t nw_protocol_http_early_data_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  void *handle;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  _QWORD v13[5];
  char v14;
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___ZL48nw_protocol_http_early_data_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_14_63491;
      v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)&__block_literal_global_13_63492, (uint64_t)v13);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_early_data_remove_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    v16 = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v5, &v16, &v15))
      goto LABEL_32;
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = v16;
      if (os_log_type_enabled(v6, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http_early_data_remove_input_handler";
        v8 = "%{public}s called with null http_early_data";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v15)
    {
      v6 = __nwlog_obj();
      v7 = v16;
      if (os_log_type_enabled(v6, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http_early_data_remove_input_handler";
        v8 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = v16;
    v12 = os_log_type_enabled(v6, v16);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http_early_data_remove_input_handler";
        v8 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http_early_data_remove_input_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v11 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_http_early_data_remove_input_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v5, &v16, &v15))
    goto LABEL_32;
  if (v16 != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v6 = __nwlog_obj();
      v7 = v16;
      if (os_log_type_enabled(v6, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http_early_data_remove_input_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = v16;
    v10 = os_log_type_enabled(v6, v16);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_http_early_data_remove_input_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http_early_data_remove_input_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v6 = __nwlog_obj();
  v7 = v16;
  if (os_log_type_enabled(v6, v16))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http_early_data_remove_input_handler";
    v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_protocol_http_early_data_reset(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  NSObject *v10;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  char *backtrace_string;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_reset";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_reset";
      v15 = "%{public}s called with null protocol";
LABEL_57:
      _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      goto LABEL_58;
    }
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_reset";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v18 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_reset";
        v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v18)
      goto LABEL_44;
    *(_DWORD *)buf = 136446466;
    v25 = "nw_protocol_http_early_data_reset";
    v26 = 2082;
    v27 = backtrace_string;
    v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_43:
    _os_log_impl(&dword_182FBE000, v13, v14, v19, buf, 0x16u);
    goto LABEL_44;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_reset";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v12, &type, &v22))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_reset";
      v15 = "%{public}s called with null http_early_data";
      goto LABEL_57;
    }
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_reset";
        v15 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v20 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_reset";
        v15 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v20)
      goto LABEL_44;
    *(_DWORD *)buf = 136446466;
    v25 = "nw_protocol_http_early_data_reset";
    v26 = 2082;
    v27 = backtrace_string;
    v19 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
    goto LABEL_43;
  }
  if (a2)
  {
    if ((handle[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v25 = "nw_protocol_http_early_data_reset";
          v26 = 2082;
          v27 = handle + 114;
          v28 = 2080;
          v29 = " ";
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }
    v5 = handle[208];
    if ((v5 & 1) != 0)
    {
      v6 = (void *)*((_QWORD *)handle + 25);
      if (v6)
      {
        os_release(v6);
        v5 = handle[208];
      }
    }
    *((_QWORD *)handle + 25) = 0;
    handle[208] = v5 | 1;
    v7 = handle[224];
    if ((v7 & 1) != 0)
    {
      v8 = (void *)*((_QWORD *)handle + 27);
      if (v8)
      {
        os_release(v8);
        v7 = handle[224];
      }
    }
    *((_QWORD *)handle + 27) = 0;
    handle[224] = v7 | 1;
    v9 = handle[240];
    if ((v9 & 1) != 0)
    {
      v10 = *((_QWORD *)handle + 29);
      if (v10)
      {
        dispatch_release(v10);
        v9 = handle[240];
      }
    }
    *((_QWORD *)handle + 29) = 0;
    handle[240] = v9 | 1;
    handle[256] &= 0xF1u;
    nw_protocol_reset((uint64_t)a1->output_handler, (uint64_t)a2);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_protocol_http_early_data_reset";
  v12 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v12, &type, &v22))
    goto LABEL_58;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_reset";
        v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_reset";
        v15 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_http_early_data_reset";
      v26 = 2082;
      v27 = backtrace_string;
      v19 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
LABEL_44:
    free(backtrace_string);
    goto LABEL_58;
  }
  v13 = __nwlog_obj();
  v14 = type;
  if (os_log_type_enabled(v13, type))
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_reset";
    v15 = "%{public}s called with null other_protocol";
    goto LABEL_57;
  }
LABEL_58:
  if (v12)
    free(v12);
  return 0;
}

void nw_protocol_http_early_data_connected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  int v4;
  char v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *v17;
  _BOOL4 v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_early_data_connected";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v21 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_http_early_data_connected";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_40;
      }
      if (!v21)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_39;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_early_data_connected";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null http_early_data";
    }
    else if (v24)
    {
      v17 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v22 = os_log_type_enabled(v14, type);
      if (v17)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_http_early_data_connected";
          v28 = 2082;
          v29 = v17;
          v19 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
          goto LABEL_32;
        }
LABEL_33:
        free(v17);
        if (!v13)
          return;
LABEL_41:
        free(v13);
        return;
      }
      if (!v22)
      {
LABEL_40:
        if (!v13)
          return;
        goto LABEL_41;
      }
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null http_early_data, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null http_early_data, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_40;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_early_data_connected";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null other_protocol";
    }
    else if (v24)
    {
      v17 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v23 = os_log_type_enabled(v14, type);
      if (v17)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_http_early_data_connected";
          v28 = 2082;
          v29 = v17;
          v19 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_32;
        }
        goto LABEL_33;
      }
      if (!v23)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http_early_data_connected";
      v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
    goto LABEL_39;
  }
  nw_protocol_connected(*((_QWORD **)handle + 6), (uint64_t)a2);
  if (*((nw_protocol **)handle + 4) != a2)
    return;
  v4 = nw_protocol_waiting_for_output((uint64_t)a2, (uint64_t)handle);
  v5 = *((_BYTE *)handle + 256);
  if (v4)
    v6 = 2;
  else
    v6 = 0;
  *((_BYTE *)handle + 256) = v5 & 0xFD | v6;
  if ((v5 & 4) != 0)
  {
    if (!v4)
    {
      nw_http_early_data_replay((uint64_t)handle);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http_early_data_connected";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_early_data_connected";
        v16 = "%{public}s Attempting early data after failure";
        goto LABEL_39;
      }
      if (!v24)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (!os_log_type_enabled(v14, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_early_data_connected";
        v16 = "%{public}s Attempting early data after failure, backtrace limit exceeded";
        goto LABEL_39;
      }
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      v18 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v17)
      {
        if (!v18)
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http_early_data_connected";
        v16 = "%{public}s Attempting early data after failure, no backtrace";
        goto LABEL_39;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http_early_data_connected";
        v28 = 2082;
        v29 = v17;
        v19 = "%{public}s Attempting early data after failure, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v14, v15, v19, buf, 0x16u);
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    goto LABEL_40;
  }
  if ((v4 & 1) == 0)
  {
    v7 = *((_BYTE *)handle + 208);
    if ((v7 & 1) != 0)
    {
      v8 = (void *)*((_QWORD *)handle + 25);
      if (v8)
      {
        os_release(v8);
        v7 = *((_BYTE *)handle + 208);
      }
    }
    *((_QWORD *)handle + 25) = 0;
    *((_BYTE *)handle + 208) = v7 | 1;
    v9 = *((_BYTE *)handle + 224);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)*((_QWORD *)handle + 27);
      if (v10)
      {
        os_release(v10);
        v9 = *((_BYTE *)handle + 224);
      }
    }
    *((_QWORD *)handle + 27) = 0;
    *((_BYTE *)handle + 224) = v9 | 1;
    v11 = *((_BYTE *)handle + 240);
    if ((v11 & 1) != 0)
    {
      v12 = *((_QWORD *)handle + 29);
      if (v12)
      {
        dispatch_release(v12);
        v11 = *((_BYTE *)handle + 240);
      }
    }
    *((_QWORD *)handle + 29) = 0;
    *((_BYTE *)handle + 240) = v11 | 1;
  }
  nw_protocol_connected(*((_QWORD **)handle + 6), (uint64_t)handle);
}

void nw_protocol_http_early_data_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol *v3;
  void *parameters;
  void *v5;
  unsigned __int8 *v6;
  id v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  nw_protocol *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_disconnected";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_64;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_disconnected";
      v13 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_protocol_http_early_data_disconnected";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_64:
        if (!v10)
          return;
        goto LABEL_65;
      }
      if (!v15)
        goto LABEL_64;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_disconnected";
      v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_64;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_disconnected";
      v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_63;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_disconnected";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_64;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_64;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_disconnected";
        v13 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_63;
      }
      v16 = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!v16)
      {
        if (!v17)
          goto LABEL_64;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_protocol_http_early_data_disconnected";
        v13 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_63;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_protocol_http_early_data_disconnected";
        v26 = 2082;
        v27 = v16;
        v18 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
LABEL_46:
        _os_log_impl(&dword_182FBE000, v11, v12, v18, buf, 0x16u);
      }
LABEL_47:
      free(v16);
      if (!v10)
        return;
LABEL_65:
      free(v10);
      return;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_64;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_disconnected";
    v13 = "%{public}s called with null http_early_data";
LABEL_63:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_64;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_disconnected";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_64;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_disconnected";
      v13 = "%{public}s called with null other_protocol";
      goto LABEL_63;
    }
    if (!v22)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_64;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_disconnected";
      v13 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_63;
    }
    v16 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v19)
        goto LABEL_64;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_http_early_data_disconnected";
      v13 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_63;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_http_early_data_disconnected";
      v26 = 2082;
      v27 = v16;
      v18 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  if ((handle[256] & 0x10) == 0)
  {
    nw_protocol_disconnected(*((_QWORD **)handle + 6), (uint64_t)handle);
    return;
  }
  handle[256] &= ~0x10u;
  v3 = (nw_protocol *)*((_QWORD *)handle + 4);
  parameters = (void *)nw_protocol_get_parameters((uint64_t)handle);
  if (parameters)
    v5 = os_retain(parameters);
  else
    v5 = 0;
  v6 = nw_parameters_copy_protocol_options_legacy(v5, v3);
  nw_protocol_remove_input_handler(*((_QWORD *)handle + 4), (uint64_t)handle);
  if (!v6)
  {
    handle[256] |= 4u;
    nw_protocol_add_input_handler(*((_QWORD *)handle + 31), (uint64_t)handle);
    nw_protocol_connect(*((_QWORD *)handle + 4), (uint64_t)handle);
    *((_QWORD *)handle + 31) = 0;
    if (!v5)
      return;
    goto LABEL_19;
  }
  if ((handle[198] & 1) == 0)
  {
    if (gLogDatapath)
    {
      v20 = __nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v21 = *((_QWORD *)handle + 31);
        *(_DWORD *)buf = 136447234;
        v25 = "nw_protocol_http_early_data_disconnected";
        v26 = 2082;
        v27 = handle + 114;
        v28 = 2080;
        v29 = " ";
        v30 = 2048;
        v31 = v3;
        v32 = 2048;
        v33 = v21;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sresetting http stream protocol instance %p to connection %p", buf, 0x34u);
      }
    }
  }
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v7 = (id)nw_protocol_copy_http_definition_http_definition;
  v8 = *((_QWORD *)handle + 31);
  v9 = v6;
  *((_QWORD *)v9 + 2) = v8;

  if (v7)
    os_release(v7);
  handle[256] |= 4u;
  nw_protocol_add_input_handler(*((_QWORD *)handle + 31), (uint64_t)handle);
  nw_protocol_connect(*((_QWORD *)handle + 4), (uint64_t)handle);
  *((_QWORD *)handle + 31) = 0;
  os_release(v9);
  if (v5)
LABEL_19:
    os_release(v5);
}

void nw_protocol_http_early_data_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _BYTE *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_early_data_error";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http_early_data_error";
      v7 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_http_early_data_error";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_50:
        if (!v4)
          return;
        goto LABEL_51;
      }
      if (!v9)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http_early_data_error";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http_early_data_error";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_49;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_early_data_error";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_50;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_early_data_error";
        v7 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_49;
      }
      v10 = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11)
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_early_data_error";
        v7 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_49;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_protocol_http_early_data_error";
        v18 = 2082;
        v19 = v10;
        v12 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v5, v6, v12, buf, 0x16u);
      }
LABEL_35:
      free(v10);
      if (!v4)
        return;
LABEL_51:
      free(v4);
      return;
    }
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_50;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_early_data_error";
    v7 = "%{public}s called with null http_early_data";
LABEL_49:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_50;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_early_data_error";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http_early_data_error";
      v7 = "%{public}s called with null other_protocol";
      goto LABEL_49;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http_early_data_error";
      v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_49;
    }
    v10 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v13 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v13)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_http_early_data_error";
      v7 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_49;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http_early_data_error";
      v18 = 2082;
      v19 = v10;
      v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if (a3 == 35 && (handle[256] & 2) != 0)
  {
    handle[256] |= 0x10u;
    *((_QWORD *)handle + 31) = a2;
  }
  else
  {
    nw_protocol_error(*((_QWORD **)handle + 6), (uint64_t)a2);
  }
}

uint64_t nw_protocol_http_early_data_supports_external_data(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return nw_protocol_supports_external_data(handle[6]);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_early_data_supports_external_data";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http_early_data_supports_external_data";
        v6 = "%{public}s called with null http_early_data";
        goto LABEL_31;
      }
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http_early_data_supports_external_data";
        v6 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_http_early_data_supports_external_data";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null http_early_data, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_33;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http_early_data_supports_external_data";
        v6 = "%{public}s called with null http_early_data, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http_early_data_supports_external_data";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_early_data_supports_external_data";
      v6 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_early_data_supports_external_data";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v7 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_http_early_data_supports_external_data";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http_early_data_supports_external_data";
      v15 = 2082;
      v16 = v7;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v7);
  }
LABEL_32:
  if (v3)
LABEL_33:
    free(v3);
  return 0;
}

void nw_http_early_data_replay(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v8[2];
  uint64_t (*v9)(uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[2];

  if ((*(_BYTE *)(a1 + 256) & 4) != 0)
  {
    v2 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v13[0] = 0;
      v13[1] = v13;
      v3 = *(NSObject **)(a1 + 232);
      v4 = v3 ? dispatch_data_get_size(v3) : 0;
      if (!nw_protocol_get_output_frames(*(_QWORD *)(a1 + 32), a1, (_DWORD)v4 != 0, v4, 0xFFFFFFFFLL, (uint64_t)v13))break;
      v8[0] = v2;
      v8[1] = 0x40000000;
      v9 = ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke;
      v10 = &__block_descriptor_tmp_11_63456;
      v11 = a1;
      v12 = v4;
      v5 = v13[0];
      do
      {
        if (!v5)
          break;
        v6 = *(_QWORD *)(v5 + 32);
        v7 = ((uint64_t (*)(_QWORD *))v9)(v8);
        v5 = v6;
      }
      while ((v7 & 1) != 0);
      nw_protocol_finalize_output_frames(*(_QWORD *)(a1 + 32), (uint64_t)v13);
      if ((*(_BYTE *)(a1 + 256) & 4) == 0)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    nw_protocol_connected(*(_QWORD **)(a1 + 48), a1);
  }
}

uint64_t ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  int v17;
  const char *v18;
  dispatch_data_t v19;
  uint64_t v20;
  char v21;
  NSObject *v22;
  char *backtrace_string;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  size_t v31;
  uint64_t v32;
  char v33;
  NSObject *v34;
  dispatch_data_t subrange;
  uint64_t v36;
  char v37;
  NSObject *v38;
  char v40;
  os_log_type_t type;
  _QWORD applier[7];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unsigned int buf;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v4 + 232))
  {
LABEL_8:
    *(_BYTE *)(v4 + 256) &= ~4u;
    v8 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 256) >> 3) & 1;
    goto LABEL_41;
  }
  if (!nw_frame_uses_external_data(a2))
  {
    v48 = 0;
    v49 = 0;
    v52 = 0;
    v50 = &v49;
    v51 = 0x2000000000;
    v47[0] = 0;
    v47[1] = v47;
    v47[2] = 0x2000000000;
    v48 = nw_frame_unclaimed_bytes(a2, &v52);
    v43 = 0;
    v44 = &v43;
    v46 = 0;
    v45 = 0x2000000000;
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 232);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke_2;
    applier[3] = &unk_1E14A8918;
    applier[4] = &v49;
    applier[5] = v47;
    applier[6] = &v43;
    dispatch_data_apply(v9, applier);
    if (!*((_DWORD *)v50 + 6))
    {
LABEL_31:
      v31 = *((unsigned int *)v44 + 6);
      v32 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 40) == (_DWORD)v31)
      {
        v33 = *(_BYTE *)(v32 + 240);
        if ((v33 & 1) != 0)
        {
          v34 = *(NSObject **)(v32 + 232);
          if (v34)
          {
            dispatch_release(v34);
            v33 = *(_BYTE *)(v32 + 240);
          }
        }
        *(_QWORD *)(v32 + 232) = 0;
        *(_BYTE *)(v32 + 240) = v33 | 1;
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 256) &= ~4u;
        v8 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 256) >> 3) & 1;
      }
      else
      {
        subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(v32 + 232), v31, 0xFFFFFFFFFFFFFFFFLL);
        v36 = *(_QWORD *)(a1 + 32);
        v37 = *(_BYTE *)(v36 + 240);
        if ((v37 & 1) != 0)
        {
          v38 = *(NSObject **)(v36 + 232);
          if (v38)
          {
            dispatch_release(v38);
            v37 = *(_BYTE *)(v36 + 240);
          }
        }
        v8 = 0;
        *(_QWORD *)(v36 + 232) = subrange;
        *(_BYTE *)(v36 + 240) = v37 | 1;
      }
      _Block_object_dispose(&v43, 8);
      _Block_object_dispose(v47, 8);
      _Block_object_dispose(&v49, 8);
      goto LABEL_41;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = *((_DWORD *)v44 + 6);
    v11 = *((_DWORD *)v50 + 6);
    buf = 136446722;
    v54 = "nw_http_early_data_replay_block_invoke";
    v55 = 1024;
    v56 = v10;
    v57 = 1024;
    v58 = v11;
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (__nwlog_fault(v12, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v16 = *((_DWORD *)v44 + 6);
          v17 = *((_DWORD *)v50 + 6);
          buf = 136446722;
          v54 = "nw_http_early_data_replay_block_invoke";
          v55 = 1024;
          v56 = v16;
          v57 = 1024;
          v58 = v17;
          v18 = "%{public}s Frame is larger than requested (copied=%u, remaining=%u)";
LABEL_27:
          _os_log_impl(&dword_182FBE000, v14, v15, v18, (uint8_t *)&buf, 0x18u);
        }
      }
      else if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        v24 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v24)
          {
            v25 = *((_DWORD *)v44 + 6);
            v26 = *((_DWORD *)v50 + 6);
            buf = 136446978;
            v54 = "nw_http_early_data_replay_block_invoke";
            v55 = 1024;
            v56 = v25;
            v57 = 1024;
            v58 = v26;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Frame is larger than requested (copied=%u, remaining=%u), dumping backtrace:%{public}s", (uint8_t *)&buf, 0x22u);
          }
          free(backtrace_string);
          goto LABEL_28;
        }
        if (v24)
        {
          v29 = *((_DWORD *)v44 + 6);
          v30 = *((_DWORD *)v50 + 6);
          buf = 136446722;
          v54 = "nw_http_early_data_replay_block_invoke";
          v55 = 1024;
          v56 = v29;
          v57 = 1024;
          v58 = v30;
          v18 = "%{public}s Frame is larger than requested (copied=%u, remaining=%u), no backtrace";
          goto LABEL_27;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v27 = *((_DWORD *)v44 + 6);
          v28 = *((_DWORD *)v50 + 6);
          buf = 136446722;
          v54 = "nw_http_early_data_replay_block_invoke";
          v55 = 1024;
          v56 = v27;
          v57 = 1024;
          v58 = v28;
          v18 = "%{public}s Frame is larger than requested (copied=%u, remaining=%u), backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }
LABEL_28:
    if (v12)
      free(v12);
    nw_frame_claim(a2, v13, 0, *((_DWORD *)v50 + 6));
    goto LABEL_31;
  }
  buf = 0;
  nw_frame_set_external_data(a2, *(dispatch_data_t *)(*(_QWORD *)(a1 + 32) + 232), &buf);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 40) == buf)
  {
    v6 = *(_BYTE *)(v5 + 240);
    if ((v6 & 1) != 0)
    {
      v7 = *(NSObject **)(v5 + 232);
      if (v7)
      {
        dispatch_release(v7);
        v6 = *(_BYTE *)(v5 + 240);
      }
    }
    *(_QWORD *)(v5 + 232) = 0;
    *(_BYTE *)(v5 + 240) = v6 | 1;
    v4 = *(_QWORD *)(a1 + 32);
    goto LABEL_8;
  }
  v19 = dispatch_data_create_subrange(*(dispatch_data_t *)(v5 + 232), buf, 0xFFFFFFFFFFFFFFFFLL);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_BYTE *)(v20 + 240);
  if ((v21 & 1) != 0)
  {
    v22 = *(NSObject **)(v20 + 232);
    if (v22)
    {
      dispatch_release(v22);
      v21 = *(_BYTE *)(v20 + 240);
    }
  }
  v8 = 0;
  *(_QWORD *)(v20 + 232) = v19;
  *(_BYTE *)(v20 + 240) = v21 | 1;
LABEL_41:
  nw_frame_set_metadata(a2, *(NSObject **)(*(_QWORD *)(a1 + 32) + 200), 0, v8);
  return 1;
}

BOOL ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke_2(_QWORD *a1, int a2, int a3, void *__src, unsigned int a5)
{
  unsigned int v6;
  size_t v7;

  v6 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v6 >= a5)
    v7 = a5;
  else
    v7 = v6;
  memcpy(*(void **)(*(_QWORD *)(a1[5] + 8) + 24), __src, v7);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) -= v7;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += v7;
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += v7;
  return *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) != 0;
}

void ___ZL48nw_protocol_http_early_data_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    v1 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v5 = __nwlog_obj();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          v6 = 136446722;
          v7 = "nw_http_early_data_destroy";
          v8 = 2082;
          v9 = v1 + 114;
          v10 = 2080;
          v11 = " ";
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v6, 0x20u);
        }
      }
    }
    if ((*(_BYTE *)(v1 + 240) & 1) != 0)
    {
      v2 = *(NSObject **)(v1 + 232);
      if (v2)
        dispatch_release(v2);
    }
    *(_QWORD *)(v1 + 232) = 0;
    if ((*(_BYTE *)(v1 + 224) & 1) != 0)
    {
      v3 = *(void **)(v1 + 216);
      if (v3)
        os_release(v3);
    }
    *(_QWORD *)(v1 + 216) = 0;
    if ((*(_BYTE *)(v1 + 208) & 1) != 0)
    {
      v4 = *(void **)(v1 + 200);
      if (v4)
        os_release(v4);
    }
    free((void *)v1);
  }
}

uint64_t ___ZL50nw_protocol_http_early_data_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  _BOOL8 v7;
  uint64_t v8;
  char v9;
  void *v10;
  id *metadata_for_request;
  uint64_t v12;
  char v13;
  void *v14;
  NSObject *v15;
  NSObject *subrange;
  const void *v17;
  uint64_t v18;
  NSObject *v19;
  dispatch_data_t concat;
  uint64_t v21;
  char v22;
  _BYTE *v23;
  NSObject *v24;
  char v25;
  char v26;
  _DWORD size[3];

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200))
  {
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v4 = (id)nw_protocol_copy_http_definition_http_definition;
    v5 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v4);
    if (v4)
      os_release(v4);
    v6 = nw_http_metadata_copy_request(v5);
    v7 = nw_http_request_copy(v6);
    nw_http_fields_append((void *)v7, (uint64_t)"Early-Data", (uint64_t)"1");
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_BYTE *)(v8 + 208);
    if ((v9 & 1) != 0)
    {
      v10 = *(void **)(v8 + 200);
      if (v10)
      {
        os_release(v10);
        v9 = *(_BYTE *)(v8 + 208);
      }
    }
    *(_QWORD *)(v8 + 200) = v5;
    *(_BYTE *)(v8 + 208) = v9 | 1;
    metadata_for_request = nw_http_create_metadata_for_request((void *)v7);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_BYTE *)(v12 + 224);
    if ((v13 & 1) != 0)
    {
      v14 = *(void **)(v12 + 216);
      if (v14)
      {
        os_release(v14);
        v13 = *(_BYTE *)(v12 + 224);
      }
    }
    *(_QWORD *)(v12 + 216) = metadata_for_request;
    *(_BYTE *)(v12 + 224) = v13 | 1;
    if (v7)
      os_release((void *)v7);
    if (v6)
      os_release(v6);
  }
  if (nw_frame_uses_external_data(a2))
  {
    *(_QWORD *)&size[1] = 0;
    v15 = nw_frame_copy_external_data(a2, &size[2], &size[1]);
    subrange = dispatch_data_create_subrange(v15, size[2], size[1]);
    if (v15)
      dispatch_release(v15);
  }
  else
  {
    size[0] = 0;
    v17 = (const void *)nw_frame_unclaimed_bytes(a2, size);
    subrange = dispatch_data_create(v17, size[0], 0, 0);
  }
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(NSObject **)(v18 + 232);
  if (v19)
  {
    concat = dispatch_data_create_concat(v19, subrange);
    v21 = *(_QWORD *)(a1 + 32);
    v23 = (_BYTE *)(v21 + 240);
    v22 = *(_BYTE *)(v21 + 240);
    if ((v22 & 1) != 0)
    {
      v24 = *(NSObject **)(v21 + 232);
      if (v24)
      {
        dispatch_release(v24);
        v22 = *v23;
      }
    }
    *(_QWORD *)(v21 + 232) = concat;
  }
  else
  {
    v25 = *(_BYTE *)(v18 + 240);
    v23 = (_BYTE *)(v18 + 240);
    v22 = v25;
    *((_QWORD *)v23 - 1) = subrange;
    subrange = 0;
  }
  *v23 = v22 | 1;
  if (nw_frame_is_metadata_complete(a2))
    v26 = 8;
  else
    v26 = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 256) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 256) & 0xF7 | v26;
  nw_frame_set_metadata(a2, *(NSObject **)(*(_QWORD *)(a1 + 32) + 216), 0, (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 256) >> 3) & 1);
  if (subrange)
    dispatch_release(subrange);
  return 1;
}

double __nw_protocol_http_early_data_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http_early_data_identifier::protocol_identifier, "http_early_data");
  *(_QWORD *)&result = 0x100000004;
  qword_1EDCF2340 = 0x100000004;
  return result;
}

nw_path_monitor_t nw_path_monitor_create_with_type(nw_interface_type_t required_interface_type)
{
  NSObject *v2;
  NSObject *evaluator_for_endpoint_no_evaluate;

  v2 = nw_parameters_create();
  nw_parameters_set_multipath_service(v2, nw_multipath_service_handover);
  nw_parameters_set_required_interface_type(v2, required_interface_type);
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(0, v2);

  return evaluator_for_endpoint_no_evaluate;
}

void sub_1839891D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_path_monitor_t nw_path_monitor_create_for_ethernet_channel(void)
{
  nw_parameters_t v0;
  NSObject *v1;

  v0 = nw_parameters_create();
  nw_path_create_evaluator_for_all_custom_ether_interfaces(v0);
  v1 = objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_183989218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_path_monitor_prohibit_interface_type(nw_path_monitor_t monitor, nw_interface_type_t interface_type)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = monitor;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)&v5[12]);
    v6 = v5[1].isa;
    os_unfair_lock_unlock((os_unfair_lock_t)&v5[12]);

    if (v6)
    {
      nw_parameters_prohibit_interface_type(v6, interface_type);
LABEL_4:

      goto LABEL_5;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_monitor_prohibit_interface_type";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_monitor_prohibit_interface_type";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_path_monitor_prohibit_interface_type";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_monitor_prohibit_interface_type";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_monitor_prohibit_interface_type";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v12)
      free(v12);
    goto LABEL_4;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_path_monitor_prohibit_interface_type";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_monitor_prohibit_interface_type";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null monitor", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_monitor_prohibit_interface_type";
          v27 = 2082;
          v28 = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_35;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_monitor_prohibit_interface_type";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_monitor_prohibit_interface_type";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v8)
    free(v8);
LABEL_5:

}

void sub_1839896F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1839898A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_183989D48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183989F58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __nw_socket_set_connected_fd_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 196) = a2;
  return 1;
}

__int128 *nw_socket_protocol_identifier()
{
  if (nw_socket_protocol_identifier::onceToken != -1)
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_63760);
  return &nw_socket_protocol_identifier::identifier;
}

_QWORD *nw_protocol_socket_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  _QWORD *v4;

  if (nw_socket_protocol_identifier::onceToken != -1)
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_63760);
  if (nw_socket_protocol_callbacks(void)::onceToken != -1)
    dispatch_once(&nw_socket_protocol_callbacks(void)::onceToken, &__block_literal_global_14_63764);
  v4 = (_QWORD *)nw_protocol_new(424, (uint64_t)a3, (uint64_t)&nw_socket_protocol_identifier::identifier, nw_socket_protocol_callbacks(void)::callbacks);
  v4[29] = 0;
  v4 += 29;
  *(v4 - 21) = 0;
  *((_DWORD *)v4 - 9) = -1;
  *((_DWORD *)v4 - 7) = 6159;
  v4[2] = 0;
  v4[3] = v4 + 2;
  v4[4] = 0;
  v4[5] = v4 + 4;
  v4[6] = 0;
  v4[7] = v4 + 6;
  v4[8] = 0;
  v4[9] = v4 + 8;
  v4[10] = 0;
  v4[11] = v4 + 10;
  v4[1] = v4;
  return v4 - 41;
}

void ___ZL28nw_socket_protocol_callbacksv_block_invoke()
{
  nw_socket_protocol_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((_QWORD *)nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_remove_input_handler);
  nw_protocol_callbacks_set_input_available(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_input_available);
  nw_protocol_callbacks_set_input_finished(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_input_finished);
  nw_protocol_callbacks_set_output_available(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_output_available);
  nw_protocol_callbacks_set_output_finished(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_output_finished);
  nw_protocol_callbacks_set_get_input_frames(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_finalize_output_frames);
  nw_protocol_callbacks_set_get_parameters(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_parameters);
  nw_protocol_callbacks_set_get_path(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_path);
  nw_protocol_callbacks_set_updated_path(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_updated_path);
  nw_protocol_callbacks_set_get_local_endpoint(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_local);
  nw_protocol_callbacks_set_get_remote_endpoint(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_remote);
  nw_protocol_callbacks_set_get_output_local_endpoint(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_output_local);
  nw_protocol_callbacks_set_get_output_interface(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_output_interface);
  nw_protocol_callbacks_set_waiting_for_output(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_waiting_for_output);
  nw_protocol_callbacks_set_connect(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_connect);
  nw_protocol_callbacks_set_disconnect(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_disconnect);
  nw_protocol_callbacks_set_error(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_error);
  nw_protocol_callbacks_set_reset(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_reset);
  nw_protocol_callbacks_set_copy_info(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_copy_info);
  nw_protocol_callbacks_set_register_notification(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_register_notification);
  nw_protocol_callbacks_set_unregister_notification(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_unregister_notification);
  nw_protocol_callbacks_set_notify(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_protocol_socket_notify);
  nw_protocol_callbacks_set_get_message_properties(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_protocol_socket_get_message_properties);
}

BOOL nw_socket_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol_identifier *a3)
{
  NSObject *v6;
  _BOOL8 result;
  nw_protocol_identifier *identifier;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v17;
  uint64_t (*supports_external_data)(nw_protocol_identifier *);
  int v19;
  _BOOL4 v20;
  nw_protocol_callbacks *v21;
  unsigned __int16 *v22;
  int v23;
  __int16 v24;
  nw_protocol_callbacks *v25;
  nw_protocol_callbacks *v26;
  void (**v27)(_QWORD);
  const void *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  nw_protocol_identifier *v38;
  __int16 v39;
  nw_protocol *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_socket_replace_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v9, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_socket_replace_input_handler";
          v12 = "%{public}s called with null protocol";
          goto LABEL_53;
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v29 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (!v29)
            goto LABEL_35;
          *(_DWORD *)buf = 136446466;
          v34 = "nw_socket_replace_input_handler";
          v35 = 2082;
          v36 = backtrace_string;
          v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_34;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_socket_replace_input_handler";
          v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_53;
        }
      }
      else
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_socket_replace_input_handler";
          v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_53;
        }
      }
    }
LABEL_54:
    if (v9)
      free(v9);
    return 0;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_socket_replace_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v9, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_socket_replace_input_handler";
          v12 = "%{public}s called with null socket_handler";
          goto LABEL_53;
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v30 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (!v30)
            goto LABEL_35;
          *(_DWORD *)buf = 136446466;
          v34 = "nw_socket_replace_input_handler";
          v35 = 2082;
          v36 = backtrace_string;
          v15 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
          goto LABEL_34;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_socket_replace_input_handler";
          v12 = "%{public}s called with null socket_handler, no backtrace";
          goto LABEL_53;
        }
      }
      else
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_socket_replace_input_handler";
          v12 = "%{public}s called with null socket_handler, backtrace limit exceeded";
          goto LABEL_53;
        }
      }
    }
    goto LABEL_54;
  }
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_socket_replace_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31))
      goto LABEL_54;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v31)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_54;
        *(_DWORD *)buf = 136446210;
        v34 = "nw_socket_replace_input_handler";
        v12 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
        goto LABEL_53;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      v14 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v14)
          goto LABEL_54;
        *(_DWORD *)buf = 136446210;
        v34 = "nw_socket_replace_input_handler";
        v12 = "%{public}s called with null old_input_handler, no backtrace";
        goto LABEL_53;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "nw_socket_replace_input_handler";
        v35 = 2082;
        v36 = backtrace_string;
        v15 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x16u);
      }
LABEL_35:
      free(backtrace_string);
      goto LABEL_54;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_54;
    *(_DWORD *)buf = 136446210;
    v34 = "nw_socket_replace_input_handler";
    v12 = "%{public}s called with null old_input_handler";
LABEL_53:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_54;
  }
  if (!a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_socket_replace_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_54;
      *(_DWORD *)buf = 136446210;
      v34 = "nw_socket_replace_input_handler";
      v12 = "%{public}s called with null new_input_handler";
      goto LABEL_53;
    }
    if (!v31)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_54;
      *(_DWORD *)buf = 136446210;
      v34 = "nw_socket_replace_input_handler";
      v12 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v20)
        goto LABEL_54;
      *(_DWORD *)buf = 136446210;
      v34 = "nw_socket_replace_input_handler";
      v12 = "%{public}s called with null new_input_handler, no backtrace";
      goto LABEL_53;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_socket_replace_input_handler";
      v35 = 2082;
      v36 = backtrace_string;
      v15 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if ((nw_protocol *)a1[2].identifier == a2)
  {
    a1[2].identifier = a3;
    if (!*(_QWORD *)&a3->level)
    {
      *(_QWORD *)&a3->level = a1;
      callbacks = a1[1].callbacks;
      if (callbacks)
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
    v17 = *(nw_protocol_callbacks **)&a3->name[24];
    if (v17
      && (supports_external_data = (uint64_t (*)(nw_protocol_identifier *))v17->supports_external_data) != 0)
    {
      if (*(_UNKNOWN **)a3[1].name == &nw_protocol_ref_counted_handle)
      {
        v21 = *(nw_protocol_callbacks **)&a3[2].name[8];
        if (v21)
          *(_QWORD *)&a3[2].name[8] = (char *)&v21->add_input_handler + 1;
        v19 = supports_external_data(a3);
        if (*(_UNKNOWN **)a3[1].name == &nw_protocol_ref_counted_handle)
        {
          v25 = *(nw_protocol_callbacks **)&a3[2].name[8];
          if (v25)
          {
            v26 = (nw_protocol_callbacks *)((char *)v25 - 1);
            *(_QWORD *)&a3[2].name[8] = v26;
            if (!v26)
            {
              v27 = *(void (***)(_QWORD))&a3[1].name[24];
              if (v27)
              {
                *(_QWORD *)&a3[1].name[24] = 0;
                v27[2](v27);
                _Block_release(v27);
              }
              if ((a3[1].level & 1) != 0)
              {
                v28 = *(const void **)&a3[1].name[24];
                if (v28)
                  _Block_release(v28);
              }
              free(a3);
            }
          }
        }
      }
      else
      {
        v19 = supports_external_data(a3);
      }
      v22 = (unsigned __int16 *)((char *)&a1[6].handle + 5);
      if (((((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x1000) == 0) ^ v19) & 1) != 0)
        return 1;
      nw_socket_release_frame_array((nw_frame_array_s *)&a1[5].flow_id[8]);
      v23 = *(unsigned __int16 *)((char *)&a1[6].handle + 5) | (HIBYTE(a1[6].handle) << 16);
      if (v19)
        v24 = 4096;
      else
        v24 = 0;
    }
    else
    {
      v22 = (unsigned __int16 *)((char *)&a1[6].handle + 5);
      if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x1000) == 0)
        return 1;
      nw_socket_release_frame_array((nw_frame_array_s *)&a1[5].flow_id[8]);
      v24 = 0;
      v23 = *v22 | (HIBYTE(a1[6].handle) << 16);
    }
    *((_BYTE *)v22 + 2) = BYTE2(v23);
    *v22 = v23 & 0xEFFF | v24;
    return 1;
  }
  if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) != 0)
    return 0;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v6 = gconnectionLogObj;
  result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    identifier = a1[2].identifier;
    *(_DWORD *)buf = 136446978;
    v34 = "nw_socket_replace_input_handler";
    v35 = 2082;
    v36 = (char *)&a1[6].default_input_handler + 4;
    v37 = 2048;
    v38 = identifier;
    v39 = 2048;
    v40 = a2;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Old input handler does not match (%p != %p)", buf, 0x2Au);
    return 0;
  }
  return result;
}

void nw_socket_input_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  uint64_t v4;
  void (*v5)(void);
  NSObject *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_input_available";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_input_available";
      v10 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_socket_input_available";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v7)
          return;
LABEL_42:
        free(v7);
        return;
      }
      if (!v12)
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_input_available";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_input_available";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_41;
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    identifier = a1[2].identifier;
    if (identifier)
    {
      v4 = *(_QWORD *)&identifier->name[24];
      if (v4)
      {
        v5 = *(void (**)(void))(v4 + 64);
        if (v5)
          v5();
      }
    }
    else if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_socket_input_available";
        v19 = 2082;
        v20 = (char *)&a1[6].default_input_handler + 4;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_socket_input_available";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_input_available";
    v10 = "%{public}s called with null socket_handler";
    goto LABEL_40;
  }
  if (!v15)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_input_available";
    v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_40;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = type;
  v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_input_available";
    v10 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_40;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_socket_input_available";
    v19 = 2082;
    v20 = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
    goto LABEL_42;
}

void nw_socket_output_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  uint64_t v4;
  void (*v5)(void);
  NSObject *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_output_available";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_output_available";
      v10 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_socket_output_available";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v7)
          return;
LABEL_42:
        free(v7);
        return;
      }
      if (!v12)
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_output_available";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_socket_output_available";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_41;
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    identifier = a1[2].identifier;
    if (identifier)
    {
      v4 = *(_QWORD *)&identifier->name[24];
      if (v4)
      {
        v5 = *(void (**)(void))(v4 + 72);
        if (v5)
          v5();
      }
    }
    else if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_socket_output_available";
        v19 = 2082;
        v20 = (char *)&a1[6].default_input_handler + 4;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_socket_output_available";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_output_available";
    v10 = "%{public}s called with null socket_handler";
    goto LABEL_40;
  }
  if (!v15)
  {
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_output_available";
    v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_40;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = type;
  v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_output_available";
    v10 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_40;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_socket_output_available";
    v19 = 2082;
    v20 = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
    goto LABEL_42;
}

void *nw_socket_get_output_interface(nw_protocol *a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  const char *v8;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
      return a1[2].output_handler_context;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_socket_get_output_interface";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_socket_get_output_interface";
        v5 = "%{public}s called with null socket_handler";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_socket_get_output_interface";
        v5 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v9 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_socket_get_output_interface";
        v5 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_socket_get_output_interface";
      v14 = 2082;
      v15 = backtrace_string;
      v8 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_socket_get_output_interface";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (!__nwlog_fault(v2, &type, &v10))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_socket_get_output_interface";
        v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_socket_get_output_interface";
        v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v13 = "nw_socket_get_output_interface";
      v14 = 2082;
      v15 = backtrace_string;
      v8 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v3, v4, v8, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v3 = __nwlog_obj();
  v4 = type;
  if (os_log_type_enabled(v3, type))
  {
    *(_DWORD *)buf = 136446210;
    v13 = "nw_socket_get_output_interface";
    v5 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
  }
LABEL_32:
  if (v2)
    free(v2);
  return 0;
}

void nw_socket_error(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  uint64_t v4;
  void (*v5)(void);
  nw_protocol_identifier *v6;
  const char *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  nw_protocol_identifier *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  nw_protocol_identifier *v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  nw_protocol_identifier *v23;
  const char *v24;
  const char *v25;
  char *v26;
  _BOOL4 v27;
  const char *v28;
  _BOOL4 v29;
  nw_protocol_identifier *v30;
  const char *v31;
  const char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint32_t v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      identifier = a1[2].identifier;
      if (identifier)
      {
        v4 = *(_QWORD *)&identifier->name[24];
        if (v4)
        {
          v5 = *(void (**)(void))(v4 + 56);
          if (v5)
          {
            v5();
            return;
          }
        }
      }
      __nwlog_obj();
      v6 = a1[2].identifier;
      v7 = "invalid";
      if (v6)
      {
        v8 = *(const char **)&v6->name[16];
        if (v8)
          v7 = v8;
      }
      *(_DWORD *)buf = 136446466;
      v39 = "nw_socket_error";
      v40 = 2082;
      v41 = (void *)v7;
      v9 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v36 = 0;
      if (__nwlog_fault(v9, &type, &v36))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v10 = __nwlog_obj();
          v11 = type;
          if (!os_log_type_enabled(v10, type))
            goto LABEL_65;
          v12 = a1[2].identifier;
          v13 = "invalid";
          if (v12)
          {
            v14 = *(const char **)&v12->name[16];
            if (v14)
              v13 = v14;
          }
          *(_DWORD *)buf = 136446466;
          v39 = "nw_socket_error";
          v40 = 2082;
          v41 = (void *)v13;
          v15 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_54:
          v33 = v10;
          v34 = v11;
          v35 = 22;
LABEL_64:
          _os_log_impl(&dword_182FBE000, v33, v34, v15, buf, v35);
          goto LABEL_65;
        }
        if (!v36)
        {
          v10 = __nwlog_obj();
          v11 = type;
          if (!os_log_type_enabled(v10, type))
            goto LABEL_65;
          v23 = a1[2].identifier;
          v24 = "invalid";
          if (v23)
          {
            v25 = *(const char **)&v23->name[16];
            if (v25)
              v24 = v25;
          }
          *(_DWORD *)buf = 136446466;
          v39 = "nw_socket_error";
          v40 = 2082;
          v41 = (void *)v24;
          v15 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
          goto LABEL_54;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v17 = os_log_type_enabled(v10, type);
        if (!backtrace_string)
        {
          if (!v17)
            goto LABEL_65;
          v30 = a1[2].identifier;
          v31 = "invalid";
          if (v30)
          {
            v32 = *(const char **)&v30->name[16];
            if (v32)
              v31 = v32;
          }
          *(_DWORD *)buf = 136446466;
          v39 = "nw_socket_error";
          v40 = 2082;
          v41 = (void *)v31;
          v15 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
          goto LABEL_54;
        }
        if (v17)
        {
          v18 = a1[2].identifier;
          v19 = "invalid";
          if (v18)
          {
            v20 = *(const char **)&v18->name[16];
            if (v20)
              v19 = v20;
          }
          *(_DWORD *)buf = 136446722;
          v39 = "nw_socket_error";
          v40 = 2082;
          v41 = (void *)v19;
          v42 = 2082;
          v43 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
      }
LABEL_65:
      if (!v9)
        return;
      goto LABEL_66;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_socket_error";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v9, &type, &v36))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_socket_error";
      v15 = "%{public}s called with null socket_handler";
      goto LABEL_63;
    }
    if (!v36)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_socket_error";
      v15 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_63;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v29 = os_log_type_enabled(v21, type);
    if (!v26)
    {
      if (!v29)
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_socket_error";
      v15 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_63;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_socket_error";
      v40 = 2082;
      v41 = v26;
      v28 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_46;
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_socket_error";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v9, &type, &v36))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_socket_error";
      v15 = "%{public}s called with null protocol";
LABEL_63:
      v33 = v21;
      v34 = v22;
      v35 = 12;
      goto LABEL_64;
    }
    if (!v36)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_socket_error";
      v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_63;
    }
    v26 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v27 = os_log_type_enabled(v21, type);
    if (!v26)
    {
      if (!v27)
        goto LABEL_65;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_socket_error";
      v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_63;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_socket_error";
      v40 = 2082;
      v41 = v26;
      v28 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
      _os_log_impl(&dword_182FBE000, v21, v22, v28, buf, 0x16u);
    }
  }
  free(v26);
  if (v9)
LABEL_66:
    free(v9);
}

uint64_t nw_socket_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v4;
  void *output_handler_context;
  uint64_t v6;
  int v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_socket_reset";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_39;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_39;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_socket_reset";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13)
          goto LABEL_39;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_socket_reset";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_socket_reset";
        v20 = 2082;
        v21 = backtrace_string;
        v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v9, v10, v14, buf, 0x16u);
      }
LABEL_29:
      free(backtrace_string);
      goto LABEL_39;
    }
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_socket_reset";
    v11 = "%{public}s called with null protocol";
LABEL_38:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
LABEL_39:
    if (v8)
      free(v8);
    return 0;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_socket_reset";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_socket_reset";
      v11 = "%{public}s called with null socket_handler";
      goto LABEL_38;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_socket_reset";
      v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_socket_reset";
        v20 = 2082;
        v21 = backtrace_string;
        v14 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    if (!v15)
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_socket_reset";
    v11 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_38;
  }
  if ((nw_protocol *)a1[2].identifier != a2)
    return 0;
  nw_socket_cancel_input_source((uint64_t)&a1[1].output_handler, (uint64_t)a2);
  output_handler_context = a1[3].output_handler_context;
  if (output_handler_context)
  {
    nw_queue_cancel_source((uint64_t)a1[3].output_handler_context, v4);
    a1[3].output_handler_context = 0;
    if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x800) == 0)
    {
      nw_queue_resume_source((uint64_t)output_handler_context, v4);
      *(_WORD *)((char *)&a1[6].handle + 5) |= 0x800u;
    }
  }
  v6 = *(_QWORD *)&a1[3].flow_id[8];
  if (v6)
  {
    nw_queue_cancel_source(v6, v4);
    *(_QWORD *)&a1[3].flow_id[8] = 0;
  }
  nw_protocol_socket_cancel((uint64_t)&a1[1].output_handler);
  HIDWORD(a1[4].output_handler) = -1;
  HIDWORD(a1[4].handle) = 6159;
  a1[4].identifier = (nw_protocol_identifier *)0x100000001;
  v7 = (*(unsigned __int16 *)((char *)&a1[6].handle + 5) | (HIBYTE(a1[6].handle) << 16)) & 0xFC31C0;
  *(_WORD *)((char *)&a1[6].handle + 5) = *(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x31C0 | 0x20;
  HIBYTE(a1[6].handle) = BYTE2(v7);
  nw_socket_initialize_socket(a1);
  return 1;
}

uint64_t nw_socket_register_notification(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  const char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v18;
  char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  NSObject *v27;
  os_log_type_t v28;
  uint32_t v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  _BOOL4 v33;
  const char *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_socket_register_notification";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v8, &type, &v38))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_socket_register_notification";
      v11 = "%{public}s called with null protocol";
      goto LABEL_143;
    }
    if (!v38)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_socket_register_notification";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_143;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v33 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v33)
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_socket_register_notification";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_143;
    }
    if (!v33)
    {
LABEL_109:
      free(backtrace_string);
      if (!v8)
        return 0;
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446466;
    v41 = "nw_socket_register_notification";
    v42 = 2082;
    v43 = backtrace_string;
    v34 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_108:
    _os_log_impl(&dword_182FBE000, v30, v31, v34, buf, 0x16u);
    goto LABEL_109;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    v6 = a1 + 96;
    switch(a3)
    {
      case 0:
        if ((*(_WORD *)(a1 + 429) & 0x80) != 0)
          return 0;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (char *)(a1 + 436);
        *(_DWORD *)buf = 136446722;
        v41 = "nw_socket_register_notification";
        v42 = 2082;
        v43 = (char *)(a1 + 436);
        v44 = 2082;
        v45 = "undefined";
        v8 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v38 = 0;
        if (!__nwlog_fault(v8, &type, &v38))
          goto LABEL_83;
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = gconnectionLogObj;
          v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v41 = "nw_socket_register_notification";
            v42 = 2082;
            v43 = v7;
            v44 = 2082;
            v45 = "undefined";
            v11 = "%{public}s %{public}s invalid registration notification: %{public}s";
            goto LABEL_80;
          }
          goto LABEL_83;
        }
        if (!v38)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = gconnectionLogObj;
          v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v41 = "nw_socket_register_notification";
            v42 = 2082;
            v43 = v7;
            v44 = 2082;
            v45 = "undefined";
            v11 = "%{public}s %{public}s invalid registration notification: %{public}s, backtrace limit exceeded";
            goto LABEL_80;
          }
          goto LABEL_83;
        }
        v20 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v21 = gconnectionLogObj;
        v22 = type;
        v23 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v20)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446978;
            v41 = "nw_socket_register_notification";
            v42 = 2082;
            v43 = v7;
            v44 = 2082;
            v45 = "undefined";
            v46 = 2082;
            v47 = v20;
            _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s %{public}s invalid registration notification: %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v20);
          goto LABEL_83;
        }
        if (!v23)
          goto LABEL_83;
        *(_DWORD *)buf = 136446722;
        v41 = "nw_socket_register_notification";
        v42 = 2082;
        v43 = v7;
        v44 = 2082;
        v45 = "undefined";
        v11 = "%{public}s %{public}s invalid registration notification: %{public}s, no backtrace";
        goto LABEL_91;
      case 1:
        if (!a4)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v41 = "nw_socket_register_notification";
          v8 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v38 = 0;
          if (!__nwlog_fault(v8, &type, &v38))
            goto LABEL_83;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v30 = __nwlog_obj();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_83;
            *(_DWORD *)buf = 136446210;
            v41 = "nw_socket_register_notification";
            v11 = "%{public}s called with null val";
            goto LABEL_143;
          }
          if (v38)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            v30 = __nwlog_obj();
            v31 = type;
            v36 = os_log_type_enabled(v30, type);
            if (backtrace_string)
            {
              if (!v36)
                goto LABEL_109;
              goto LABEL_130;
            }
            if (!v36)
              goto LABEL_83;
            *(_DWORD *)buf = 136446210;
            v41 = "nw_socket_register_notification";
            v11 = "%{public}s called with null val, no backtrace";
          }
          else
          {
            v30 = __nwlog_obj();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_83;
            *(_DWORD *)buf = 136446210;
            v41 = "nw_socket_register_notification";
            v11 = "%{public}s called with null val, backtrace limit exceeded";
          }
          goto LABEL_143;
        }
        if (a5)
        {
          v12 = *a4;
          v13 = *(_DWORD *)(a1 + 320);
          if (!*a4)
            v12 = 5;
          *(_DWORD *)(a1 + 320) = v12;
          v14 = 1;
          if ((nw_socket_add_socket_events(v6, 1, 1024, 0) & 1) == 0)
          {
            v14 = 0;
            *(_DWORD *)(a1 + 320) = v13;
          }
          return v14;
        }
        if ((*(_WORD *)(a1 + 429) & 0x80) != 0)
          return 0;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = (char *)(a1 + 436);
        *(_DWORD *)buf = 136446722;
        v41 = "nw_socket_register_notification";
        v42 = 2082;
        v43 = (char *)(a1 + 436);
        v44 = 2082;
        v45 = "read_timeout";
        v8 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v38 = 0;
        if (!__nwlog_fault(v8, &type, &v38))
          goto LABEL_83;
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = gconnectionLogObj;
          v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v41 = "nw_socket_register_notification";
            v42 = 2082;
            v43 = v18;
            v44 = 2082;
            v45 = "read_timeout";
            v11 = "%{public}s %{public}s register notification for %{public}s called with zero length";
            goto LABEL_80;
          }
          goto LABEL_83;
        }
        if (!v38)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = gconnectionLogObj;
          v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v41 = "nw_socket_register_notification";
            v42 = 2082;
            v43 = v18;
            v44 = 2082;
            v45 = "read_timeout";
            v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, backtrace limit exceeded";
            goto LABEL_80;
          }
          goto LABEL_83;
        }
        v24 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v21 = gconnectionLogObj;
        v22 = type;
        v25 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v24)
        {
          if (!v25)
            goto LABEL_68;
          *(_DWORD *)buf = 136446978;
          v41 = "nw_socket_register_notification";
          v42 = 2082;
          v43 = v18;
          v44 = 2082;
          v45 = "read_timeout";
          v46 = 2082;
          v47 = v24;
          goto LABEL_67;
        }
        if (!v25)
          goto LABEL_83;
        *(_DWORD *)buf = 136446722;
        v41 = "nw_socket_register_notification";
        v42 = 2082;
        v43 = v18;
        v44 = 2082;
        v45 = "read_timeout";
        v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, no backtrace";
        goto LABEL_91;
      case 2:
        if (a4)
        {
          if (a5)
          {
            v15 = *a4;
            v16 = *(_DWORD *)(a1 + 324);
            if (!*a4)
              v15 = 5;
            *(_DWORD *)(a1 + 324) = v15;
            v14 = 1;
            if ((nw_socket_add_socket_events(v6, 1, 512, 0) & 1) == 0)
            {
              v14 = 0;
              *(_DWORD *)(a1 + 324) = v16;
            }
            return v14;
          }
          if ((*(_WORD *)(a1 + 429) & 0x80) != 0)
            return 0;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v19 = (char *)(a1 + 436);
          *(_DWORD *)buf = 136446722;
          v41 = "nw_socket_register_notification";
          v42 = 2082;
          v43 = (char *)(a1 + 436);
          v44 = 2082;
          v45 = "write_timeout";
          v8 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v38 = 0;
          if (!__nwlog_fault(v8, &type, &v38))
            goto LABEL_83;
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v9 = gconnectionLogObj;
            v10 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              *(_DWORD *)buf = 136446722;
              v41 = "nw_socket_register_notification";
              v42 = 2082;
              v43 = v19;
              v44 = 2082;
              v45 = "write_timeout";
              v11 = "%{public}s %{public}s register notification for %{public}s called with zero length";
LABEL_80:
              v27 = v9;
              v28 = v10;
LABEL_81:
              v29 = 32;
              goto LABEL_82;
            }
            goto LABEL_83;
          }
          if (!v38)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v9 = gconnectionLogObj;
            v10 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              *(_DWORD *)buf = 136446722;
              v41 = "nw_socket_register_notification";
              v42 = 2082;
              v43 = v19;
              v44 = 2082;
              v45 = "write_timeout";
              v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, backtrace limit exceeded";
              goto LABEL_80;
            }
            goto LABEL_83;
          }
          v24 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v21 = gconnectionLogObj;
          v22 = type;
          v26 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
          if (!v24)
          {
            if (v26)
            {
              *(_DWORD *)buf = 136446722;
              v41 = "nw_socket_register_notification";
              v42 = 2082;
              v43 = v19;
              v44 = 2082;
              v45 = "write_timeout";
              v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, no backtrace";
LABEL_91:
              v27 = v21;
              v28 = v22;
              goto LABEL_81;
            }
            goto LABEL_83;
          }
          if (v26)
          {
            *(_DWORD *)buf = 136446978;
            v41 = "nw_socket_register_notification";
            v42 = 2082;
            v43 = v19;
            v44 = 2082;
            v45 = "write_timeout";
            v46 = 2082;
            v47 = v24;
LABEL_67:
            _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s %{public}s register notification for %{public}s called with zero length, dumping backtrace:%{public}s", buf, 0x2Au);
          }
LABEL_68:
          free(v24);
          if (v8)
            goto LABEL_84;
          return 0;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v41 = "nw_socket_register_notification";
        v8 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v38 = 0;
        if (!__nwlog_fault(v8, &type, &v38))
          goto LABEL_83;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v30 = __nwlog_obj();
          v31 = type;
          if (!os_log_type_enabled(v30, type))
            goto LABEL_83;
          *(_DWORD *)buf = 136446210;
          v41 = "nw_socket_register_notification";
          v11 = "%{public}s called with null val";
          goto LABEL_143;
        }
        if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v30 = __nwlog_obj();
          v31 = type;
          v37 = os_log_type_enabled(v30, type);
          if (backtrace_string)
          {
            if (v37)
            {
LABEL_130:
              *(_DWORD *)buf = 136446466;
              v41 = "nw_socket_register_notification";
              v42 = 2082;
              v43 = backtrace_string;
              v34 = "%{public}s called with null val, dumping backtrace:%{public}s";
              goto LABEL_108;
            }
            goto LABEL_109;
          }
          if (!v37)
            goto LABEL_83;
          *(_DWORD *)buf = 136446210;
          v41 = "nw_socket_register_notification";
          v11 = "%{public}s called with null val, no backtrace";
        }
        else
        {
          v30 = __nwlog_obj();
          v31 = type;
          if (!os_log_type_enabled(v30, type))
            goto LABEL_83;
          *(_DWORD *)buf = 136446210;
          v41 = "nw_socket_register_notification";
          v11 = "%{public}s called with null val, backtrace limit exceeded";
        }
        break;
      case 3:
        return nw_socket_add_socket_events(v6, 1, 256, 0);
      default:
        return 0;
    }
    goto LABEL_143;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v41 = "nw_socket_register_notification";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (!__nwlog_fault(v8, &type, &v38))
    goto LABEL_83;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v41 = "nw_socket_register_notification";
    v11 = "%{public}s called with null socket_handler";
    goto LABEL_143;
  }
  if (!v38)
  {
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v41 = "nw_socket_register_notification";
    v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_143;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v30 = __nwlog_obj();
  v31 = type;
  v35 = os_log_type_enabled(v30, type);
  if (backtrace_string)
  {
    if (!v35)
      goto LABEL_109;
    *(_DWORD *)buf = 136446466;
    v41 = "nw_socket_register_notification";
    v42 = 2082;
    v43 = backtrace_string;
    v34 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
    goto LABEL_108;
  }
  if (!v35)
    goto LABEL_83;
  *(_DWORD *)buf = 136446210;
  v41 = "nw_socket_register_notification";
  v11 = "%{public}s called with null socket_handler, no backtrace";
LABEL_143:
  v27 = v30;
  v28 = v31;
  v29 = 12;
LABEL_82:
  _os_log_impl(&dword_182FBE000, v27, v28, v11, buf, v29);
LABEL_83:
  if (v8)
LABEL_84:
    free(v8);
  return 0;
}

uint64_t nw_socket_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  os_log_type_t v8;
  const char *v9;
  int v10;
  uint64_t result;
  int v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  _BOOL4 v23;
  const char *v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_socket_unregister_notification";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_socket_unregister_notification";
      v9 = "%{public}s called with null protocol";
LABEL_65:
      v17 = v20;
      v18 = v21;
      v19 = 12;
LABEL_32:
      _os_log_impl(&dword_182FBE000, v17, v18, v9, buf, v19);
      goto LABEL_33;
    }
    if (!v26)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_socket_unregister_notification";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v23 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v23)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_socket_unregister_notification";
      v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_65;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_socket_unregister_notification";
      v30 = 2082;
      v31 = backtrace_string;
      v24 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_54:
      _os_log_impl(&dword_182FBE000, v20, v21, v24, buf, 0x16u);
    }
LABEL_55:
    free(backtrace_string);
    if (!v6)
      return 0;
    goto LABEL_34;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_socket_unregister_notification";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_socket_unregister_notification";
      v9 = "%{public}s called with null socket_handler";
      goto LABEL_65;
    }
    if (!v26)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_socket_unregister_notification";
      v9 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v25 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v25)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_socket_unregister_notification";
      v9 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_65;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_socket_unregister_notification";
      v30 = 2082;
      v31 = backtrace_string;
      v24 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    goto LABEL_55;
  }
  v4 = a1 + 96;
  switch(a3)
  {
    case 0:
      if ((*(_WORD *)(a1 + 429) & 0x80) != 0)
        return 0;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v5 = (char *)(a1 + 436);
      *(_DWORD *)buf = 136446722;
      v29 = "nw_socket_unregister_notification";
      v30 = 2082;
      v31 = (char *)(a1 + 436);
      v32 = 2082;
      v33 = "undefined";
      v6 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (!__nwlog_fault(v6, &type, &v26))
        break;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = gconnectionLogObj;
        v8 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          *(_DWORD *)buf = 136446722;
          v29 = "nw_socket_unregister_notification";
          v30 = 2082;
          v31 = v5;
          v32 = 2082;
          v33 = "undefined";
          v9 = "%{public}s %{public}s invalid registration notification: %{public}s";
LABEL_30:
          v17 = v7;
          v18 = v8;
LABEL_31:
          v19 = 32;
          goto LABEL_32;
        }
      }
      else if (v26)
      {
        v13 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = gconnectionLogObj;
        v15 = type;
        v16 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v13)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446978;
            v29 = "nw_socket_unregister_notification";
            v30 = 2082;
            v31 = v5;
            v32 = 2082;
            v33 = "undefined";
            v34 = 2082;
            v35 = v13;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s %{public}s invalid registration notification: %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v13);
        }
        else if (v16)
        {
          *(_DWORD *)buf = 136446722;
          v29 = "nw_socket_unregister_notification";
          v30 = 2082;
          v31 = v5;
          v32 = 2082;
          v33 = "undefined";
          v9 = "%{public}s %{public}s invalid registration notification: %{public}s, no backtrace";
          v17 = v14;
          v18 = v15;
          goto LABEL_31;
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = gconnectionLogObj;
        v8 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          *(_DWORD *)buf = 136446722;
          v29 = "nw_socket_unregister_notification";
          v30 = 2082;
          v31 = v5;
          v32 = 2082;
          v33 = "undefined";
          v9 = "%{public}s %{public}s invalid registration notification: %{public}s, backtrace limit exceeded";
          goto LABEL_30;
        }
      }
      break;
    case 1:
      v10 = *(_DWORD *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
      if ((nw_socket_add_socket_events(v4, 0, 1024, 0) & 1) != 0)
        return 1;
      result = 0;
      *(_DWORD *)(a1 + 320) = v10;
      return result;
    case 2:
      v12 = *(_DWORD *)(a1 + 324);
      *(_DWORD *)(a1 + 324) = 0;
      if ((nw_socket_add_socket_events(v4, 0, 512, 0) & 1) != 0)
        return 1;
      result = 0;
      *(_DWORD *)(a1 + 324) = v12;
      return result;
    case 3:
      return nw_socket_add_socket_events(v4, 0, 256, 0);
    default:
      return 0;
  }
LABEL_33:
  if (v6)
LABEL_34:
    free(v6);
  return 0;
}

uint64_t __Block_byref_object_copy__63801(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__63802(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL29nw_socket_handle_socket_eventP9nw_socket_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(_QWORD);
  const void *v7;

  nw_socket_update_output_source(*(char **)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 40);
  if ((*(_WORD *)(v2 + 333) & 0x200) != 0)
    nw_socket_update_input_source((char *)v2);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    if (*(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
    {
      v4 = *(_QWORD *)(v3 + 88);
      if (v4)
      {
        v5 = v4 - 1;
        *(_QWORD *)(v3 + 88) = v5;
        if (!v5)
        {
          v6 = *(void (***)(_QWORD))(v3 + 64);
          if (v6)
          {
            *(_QWORD *)(v3 + 64) = 0;
            v6[2](v6);
            _Block_release(v6);
          }
          if ((*(_BYTE *)(v3 + 72) & 1) != 0)
          {
            v7 = *(const void **)(v3 + 64);
            if (v7)
              _Block_release(v7);
          }
          free((void *)v3);
        }
      }
    }
  }
}

void nw_socket_internal_error(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD, uint64_t, uint64_t);
  const char *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  const char *v14;
  const char *v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 56);
      if (v4)
      {
        v4(*(_QWORD *)(a1 + 48), a1 - 96, a2);
        return;
      }
    }
    __nwlog_obj();
    v5 = *(const char **)(v2 + 16);
    if (!v5)
      v5 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v5 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v19 = "nw_socket_internal_error";
  v20 = 2082;
  v21 = v5;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_35;
      v9 = "invalid";
      if (v2 && *(_QWORD *)(v2 + 16))
        v9 = *(const char **)(v2 + 16);
      *(_DWORD *)buf = 136446466;
      v19 = "nw_socket_internal_error";
      v20 = 2082;
      v21 = v9;
      v10 = "%{public}s protocol %{public}s has invalid error callback";
      goto LABEL_34;
    }
    if (!v16)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_35;
      v14 = "invalid";
      if (v2 && *(_QWORD *)(v2 + 16))
        v14 = *(const char **)(v2 + 16);
      *(_DWORD *)buf = 136446466;
      v19 = "nw_socket_internal_error";
      v20 = 2082;
      v21 = v14;
      v10 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v12 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v12)
      {
        v13 = "invalid";
        if (v2 && *(_QWORD *)(v2 + 16))
          v13 = *(const char **)(v2 + 16);
        *(_DWORD *)buf = 136446722;
        v19 = "nw_socket_internal_error";
        v20 = 2082;
        v21 = v13;
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_35;
    }
    if (v12)
    {
      v15 = "invalid";
      if (v2 && *(_QWORD *)(v2 + 16))
        v15 = *(const char **)(v2 + 16);
      *(_DWORD *)buf = 136446466;
      v19 = "nw_socket_internal_error";
      v20 = 2082;
      v21 = v15;
      v10 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v7, v8, v10, buf, 0x16u);
    }
  }
LABEL_35:
  if (v6)
    free(v6);
}

void nw_socket_update_output_source(char *a1)
{
  unsigned __int16 *v2;
  int v3;
  nw_protocol *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (unsigned __int16 *)(a1 + 333);
    v3 = *(unsigned __int16 *)(a1 + 333);
    if ((v3 & 0x4000) == 0)
    {
      if (((v3 | (a1[335] << 16)) & 0x400000) != 0)
        nw_socket_internal_link_state((uint64_t)a1, 0);
      if (nw_socket_service_writes((uint64_t)a1))
      {
        v5 = *v2;
        v6 = v5 | (*((unsigned __int8 *)v2 + 2) << 16);
        if ((v5 & 8) != 0)
        {
          nw_socket_output_finished((nw_protocol *)(a1 - 96), v4);
          v6 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
        }
        if ((v6 & 0x40) != 0)
        {
          if ((v6 & 8) == 0 && (!*((_QWORD *)a1 + 33) || (v6 & 0x40000) != 0))
            nw_socket_internal_disconnect((uint64_t)a1);
        }
        else
        {
          v7 = *((_QWORD *)a1 + 6);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 24);
            if (v8)
            {
              v9 = *(void (**)(void))(v8 + 72);
              if (v9)
                v9();
            }
          }
        }
      }
    }
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_socket_update_output_source";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_31;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_socket_update_output_source";
      v13 = "%{public}s called with null socket_handler";
      goto LABEL_30;
    }
    if (!v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_31;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_socket_update_output_source";
      v13 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_30;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type;
    v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_socket_update_output_source";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_31;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v19 = "nw_socket_update_output_source";
      v13 = "%{public}s called with null socket_handler, no backtrace";
LABEL_30:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_31:
  if (v10)
    free(v10);
}

void nw_socket_internal_link_state(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  int v7;
  NSObject *v8;
  _WORD *v9;
  __int16 v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, _QWORD);
  int v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    v6 = v5;
    v7 = v6[2];
    v6[2] = a2;

    if (v7 == a2)
    {
      if (gLogDatapath)
      {
        v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v16 = 136446466;
          v17 = "nw_socket_internal_link_state";
          v18 = 1024;
          LODWORD(v19) = a2;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Not updating link state because it's the same %d", (uint8_t *)&v16, 0x12u);
        }
      }
      return;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 168) = nw_link_info_create(a2);
  }
  v9 = (_WORD *)(a1 + 333);
  v10 = *(_WORD *)(a1 + 333);
  if (a2)
  {
    if ((v10 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v16 = 136446466;
        v17 = "nw_socket_internal_link_state";
        v18 = 2082;
        v19 = a1 + 340;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s Link is flow controlled", (uint8_t *)&v16, 0x16u);
      }
    }
    v12 = (unsigned __int16)*v9 | (*(unsigned __int8 *)(a1 + 335) << 16) | 0x400000;
  }
  else
  {
    if ((v10 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v13 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v16 = 136446466;
        v17 = "nw_socket_internal_link_state";
        v18 = 2082;
        v19 = a1 + 340;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s %{public}s Link is no longer flow controlled", (uint8_t *)&v16, 0x16u);
      }
    }
    v12 = ((unsigned __int16)*v9 | (*(unsigned __int8 *)(a1 + 335) << 16)) & 0xFFBFFFFF;
  }
  *v9 = v12;
  *(_BYTE *)(a1 + 335) = BYTE2(v12);
  if (v4)
  {
    v14 = *(_QWORD *)(v4 + 24);
    if (v14)
    {
      v15 = *(void (**)(uint64_t, uint64_t, _QWORD))(v14 + 104);
      if (v15)
        v15(v4, a1 - 96, *(_QWORD *)(a1 + 168));
    }
  }
}

void nw_socket_set_send_low_water_mark(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  unsigned int v11;
  char *backtrace_string;
  _BOOL4 v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  const char *v24;
  char *v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  char v30;
  os_log_type_t type;
  socklen_t v32;
  os_log_type_t v33[4];
  unsigned int v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  __int128 v38;
  _BYTE v39[10];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  v34 = v2;
  v3 = *(_DWORD *)(a1 + 180);
  if (v3 == v2)
    return;
  if (v2 > v3)
  {
    v32 = 4;
    *(_DWORD *)v33 = 0;
    if (getsockopt(*(_DWORD *)(a1 + 196), 0xFFFF, 4097, v33, &v32))
    {
      v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v36 = "nw_socket_set_send_low_water_mark";
        v37 = 2080;
        *(_QWORD *)&v38 = a1 + 340;
        WORD4(v38) = 1024;
        *(_DWORD *)((char *)&v38 + 10) = v5;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_SNDBUF failed %{darwin.errno}d", buf, 0x1Cu);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_socket_set_send_low_water_mark";
      v37 = 1024;
      LODWORD(v38) = v5;
      v7 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v30 = 0;
      if (!__nwlog_fault(v7, &type, &v30))
        goto LABEL_31;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_31;
        *(_DWORD *)buf = 136446466;
        v36 = "nw_socket_set_send_low_water_mark";
        v37 = 1024;
        LODWORD(v38) = v5;
        v10 = "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d";
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = type;
        v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446722;
            v36 = "nw_socket_set_send_low_water_mark";
            v37 = 1024;
            LODWORD(v38) = v5;
            WORD2(v38) = 2082;
            *(_QWORD *)((char *)&v38 + 6) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(backtrace_string);
          goto LABEL_31;
        }
        if (!v13)
        {
LABEL_31:
          if (v7)
            free(v7);
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446466;
        v36 = "nw_socket_set_send_low_water_mark";
        v37 = 1024;
        LODWORD(v38) = v5;
        v10 = "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = gLogObj;
        v9 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_31;
        *(_DWORD *)buf = 136446466;
        v36 = "nw_socket_set_send_low_water_mark";
        v37 = 1024;
        LODWORD(v38) = v5;
        v10 = "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0x12u);
      goto LABEL_31;
    }
    if (*(_DWORD *)v33 && v2 > *(_DWORD *)v33 / 3u)
    {
      if (*(_DWORD *)v33 < 3u)
        v11 = 1;
      else
        v11 = *(_DWORD *)v33 / 3u;
      v34 = v11;
    }
  }
LABEL_33:
  if (!setsockopt(*(_DWORD *)(a1 + 196), 0xFFFF, 4099, &v34, 4u))
  {
    *(_DWORD *)(a1 + 180) = v34;
    return;
  }
  v14 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v15 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    v16 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)buf = 136447234;
    v36 = "nw_socket_set_send_low_water_mark";
    v37 = 2080;
    *(_QWORD *)&v38 = a1 + 340;
    WORD4(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 10) = v34;
    HIWORD(v38) = 1024;
    *(_DWORD *)v39 = v16;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v14;
    _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_SNDLOWAT %u fd %d failed %{darwin.errno}d", buf, 0x28u);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = gLogObj;
  if (v14 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_DWORD *)(a1 + 196);
      *(_DWORD *)buf = 136446978;
      v36 = "nw_socket_set_send_low_water_mark";
      v37 = 1024;
      LODWORD(v38) = v34;
      WORD2(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 6) = v18;
      WORD5(v38) = 1024;
      HIDWORD(v38) = 22;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_SNDLOWAT %u fd %d failed %{darwin.errno}d", buf, 0x1Eu);
    }
    return;
  }
  v19 = *(_DWORD *)(a1 + 196);
  *(_DWORD *)buf = 136446978;
  v36 = "nw_socket_set_send_low_water_mark";
  v37 = 1024;
  LODWORD(v38) = v34;
  WORD2(v38) = 1024;
  *(_DWORD *)((char *)&v38 + 6) = v19;
  WORD5(v38) = 1024;
  HIDWORD(v38) = v14;
  v20 = (char *)_os_log_send_and_compose_impl();
  v33[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v32) = 0;
  if (!__nwlog_fault(v20, v33, &v32))
    goto LABEL_56;
  if (v33[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    v22 = v33[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, v33[0]))
      goto LABEL_56;
    v23 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)buf = 136446978;
    v36 = "nw_socket_set_send_low_water_mark";
    v37 = 1024;
    LODWORD(v38) = v34;
    WORD2(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 6) = v23;
    WORD5(v38) = 1024;
    HIDWORD(v38) = v14;
    v24 = "%{public}s setsockopt SO_SNDLOWAT %u fd %d failed %{darwin.errno}d";
    goto LABEL_55;
  }
  if (!(_BYTE)v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    v22 = v33[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, v33[0]))
      goto LABEL_56;
    v28 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)buf = 136446978;
    v36 = "nw_socket_set_send_low_water_mark";
    v37 = 1024;
    LODWORD(v38) = v34;
    WORD2(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 6) = v28;
    WORD5(v38) = 1024;
    HIDWORD(v38) = v14;
    v24 = "%{public}s setsockopt SO_SNDLOWAT %u fd %d failed %{darwin.errno}d, backtrace limit exceeded";
    goto LABEL_55;
  }
  v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v21 = gLogObj;
  v22 = v33[0];
  v26 = os_log_type_enabled((os_log_t)gLogObj, v33[0]);
  if (v25)
  {
    if (v26)
    {
      v27 = *(_DWORD *)(a1 + 196);
      *(_DWORD *)buf = 136447234;
      v36 = "nw_socket_set_send_low_water_mark";
      v37 = 1024;
      LODWORD(v38) = v34;
      WORD2(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 6) = v27;
      WORD5(v38) = 1024;
      HIDWORD(v38) = v14;
      *(_WORD *)v39 = 2082;
      *(_QWORD *)&v39[2] = v25;
      _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s setsockopt SO_SNDLOWAT %u fd %d failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x28u);
    }
    free(v25);
    goto LABEL_56;
  }
  if (v26)
  {
    v29 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)buf = 136446978;
    v36 = "nw_socket_set_send_low_water_mark";
    v37 = 1024;
    LODWORD(v38) = v34;
    WORD2(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 6) = v29;
    WORD5(v38) = 1024;
    HIDWORD(v38) = v14;
    v24 = "%{public}s setsockopt SO_SNDLOWAT %u fd %d failed %{darwin.errno}d, no backtrace";
LABEL_55:
    _os_log_impl(&dword_182FBE000, v21, v22, v24, buf, 0x1Eu);
  }
LABEL_56:
  if (v20)
    free(v20);
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_63955()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

BOOL nw_calloc_type<nw_data_transfer_snapshot>(size_t count)
{
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  if (!count || count >= 0x1642C8590B21643)
  {
    v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v5);
    if (result)
      goto LABEL_9;
    free(v5);
  }
  v2 = malloc_type_calloc(count, 0xB8uLL, 0xEAFB8F1AuLL);
  if (v2)
    return (BOOL)v2;
  v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  v7 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    return (BOOL)v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t nw_protocol_socket_get_receive_buffer_size(_DWORD *a1)
{
  int v2;
  NSObject *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  socklen_t v19;
  os_log_type_t v20[4];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  _BYTE v24[14];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v19 = 4;
    *(_DWORD *)v20 = 0;
    if (!getsockopt(a1[49], 0xFFFF, 4128, v20, &v19))
      return *(unsigned int *)v20;
    v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v3 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "nw_protocol_socket_get_receive_buffer_size";
      v23 = 2080;
      *(_QWORD *)v24 = a1 + 85;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v2;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_NREAD failed %{darwin.errno}d", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_socket_get_receive_buffer_size";
    v23 = 1024;
    *(_DWORD *)v24 = v2;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_21;
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_socket_get_receive_buffer_size";
        v23 = 1024;
        *(_DWORD *)v24 = v2;
        v7 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d";
        goto LABEL_20;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_21;
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_socket_get_receive_buffer_size";
        v23 = 1024;
        *(_DWORD *)v24 = v2;
        v7 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          v22 = "nw_protocol_socket_get_receive_buffer_size";
          v23 = 1024;
          *(_DWORD *)v24 = v2;
          *(_WORD *)&v24[4] = 2082;
          *(_QWORD *)&v24[6] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_socket_get_receive_buffer_size";
        v23 = 1024;
        *(_DWORD *)v24 = v2;
        v7 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, no backtrace";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0x12u);
      }
    }
LABEL_21:
    if (v4)
      free(v4);
    return *(unsigned int *)v20;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_socket_get_receive_buffer_size";
  v11 = (char *)_os_log_send_and_compose_impl();
  v20[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v19) = 0;
  if (__nwlog_fault(v11, v20, &v19))
  {
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v20[0];
      if (os_log_type_enabled(v12, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_socket_get_receive_buffer_size";
        v14 = "%{public}s called with null handle";
LABEL_37:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else if ((_BYTE)v19)
    {
      v15 = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = v20[0];
      v16 = os_log_type_enabled(v12, v20[0]);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_protocol_socket_get_receive_buffer_size";
          v23 = 2082;
          *(_QWORD *)v24 = v15;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v15);
        goto LABEL_38;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_socket_get_receive_buffer_size";
        v14 = "%{public}s called with null handle, no backtrace";
        goto LABEL_37;
      }
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = v20[0];
      if (os_log_type_enabled(v12, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_socket_get_receive_buffer_size";
        v14 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v11)
    free(v11);
  return 0;
}

uint64_t nw_protocol_socket_get_send_buffer_size(_DWORD *a1)
{
  int v2;
  NSObject *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  socklen_t v19;
  os_log_type_t v20[4];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  _BYTE v24[14];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v19 = 4;
    *(_DWORD *)v20 = 0;
    if (!getsockopt(a1[49], 0xFFFF, 4132, v20, &v19))
      return *(unsigned int *)v20;
    v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v3 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "nw_protocol_socket_get_send_buffer_size";
      v23 = 2080;
      *(_QWORD *)v24 = a1 + 85;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v2;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_NWRITE failed %{darwin.errno}d", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v22 = "nw_protocol_socket_get_send_buffer_size";
    v23 = 1024;
    *(_DWORD *)v24 = v2;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_21;
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_socket_get_send_buffer_size";
        v23 = 1024;
        *(_DWORD *)v24 = v2;
        v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d";
        goto LABEL_20;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = gLogObj;
        v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_21;
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_socket_get_send_buffer_size";
        v23 = 1024;
        *(_DWORD *)v24 = v2;
        v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = gLogObj;
      v6 = type;
      v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          v22 = "nw_protocol_socket_get_send_buffer_size";
          v23 = 1024;
          *(_DWORD *)v24 = v2;
          *(_WORD *)&v24[4] = 2082;
          *(_QWORD *)&v24[6] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_socket_get_send_buffer_size";
        v23 = 1024;
        *(_DWORD *)v24 = v2;
        v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, no backtrace";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0x12u);
      }
    }
LABEL_21:
    if (v4)
      free(v4);
    return *(unsigned int *)v20;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_protocol_socket_get_send_buffer_size";
  v11 = (char *)_os_log_send_and_compose_impl();
  v20[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v19) = 0;
  if (__nwlog_fault(v11, v20, &v19))
  {
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v20[0];
      if (os_log_type_enabled(v12, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_socket_get_send_buffer_size";
        v14 = "%{public}s called with null handle";
LABEL_37:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else if ((_BYTE)v19)
    {
      v15 = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = v20[0];
      v16 = os_log_type_enabled(v12, v20[0]);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_protocol_socket_get_send_buffer_size";
          v23 = 2082;
          *(_QWORD *)v24 = v15;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v15);
        goto LABEL_38;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_socket_get_send_buffer_size";
        v14 = "%{public}s called with null handle, no backtrace";
        goto LABEL_37;
      }
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = v20[0];
      if (os_log_type_enabled(v12, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_socket_get_send_buffer_size";
        v14 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v11)
    free(v11);
  return 0;
}

uint64_t nw_protocol_socket_reset_keepalives(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  int v17;
  os_log_type_t type[4];
  int v19;
  int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a5;
  v20 = a4;
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_socket_reset_keepalives";
    v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v17) = 0;
    if (__nwlog_fault(v11, type, &v17))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v12 = __nwlog_obj();
        v13 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_protocol_socket_reset_keepalives";
          v14 = "%{public}s called with null handle";
LABEL_38:
          _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
        }
      }
      else if ((_BYTE)v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v12 = __nwlog_obj();
        v13 = type[0];
        v16 = os_log_type_enabled(v12, type[0]);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_protocol_socket_reset_keepalives";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_39;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_protocol_socket_reset_keepalives";
          v14 = "%{public}s called with null handle, no backtrace";
          goto LABEL_38;
        }
      }
      else
      {
        v12 = __nwlog_obj();
        v13 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_protocol_socket_reset_keepalives";
          v14 = "%{public}s called with null handle, backtrace limit exceeded";
          goto LABEL_38;
        }
      }
    }
LABEL_39:
    if (v11)
      free(v11);
    return 22;
  }
  *(_DWORD *)type = a2;
  if (setsockopt(a1[49], 0xFFFF, 8, type, 4u) < 0)
  {
    v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return v7;
    *(_DWORD *)buf = 136446722;
    v22 = "nw_protocol_socket_reset_keepalives";
    v23 = 2080;
    v24 = (char *)(a1 + 85);
    v25 = 1024;
    v26 = v7;
    v9 = "%{public}s %s setsockopt SO_KEEPALIVE failed %{darwin.errno}d";
LABEL_23:
    _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x1Cu);
    return v7;
  }
  if (setsockopt(a1[49], 6, 16, &v20, 4u) < 0)
  {
    v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return v7;
    *(_DWORD *)buf = 136446722;
    v22 = "nw_protocol_socket_reset_keepalives";
    v23 = 2080;
    v24 = (char *)(a1 + 85);
    v25 = 1024;
    v26 = v7;
    v9 = "%{public}s %s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d";
    goto LABEL_23;
  }
  if (setsockopt(a1[49], 6, 257, &v19, 4u) < 0)
  {
    v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v8 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return v7;
    *(_DWORD *)buf = 136446722;
    v22 = "nw_protocol_socket_reset_keepalives";
    v23 = 2080;
    v24 = (char *)(a1 + 85);
    v25 = 1024;
    v26 = v7;
    v9 = "%{public}s %s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d";
    goto LABEL_23;
  }
  v17 = a3;
  if ((setsockopt(a1[49], 6, 258, &v17, 4u) & 0x80000000) == 0)
    return 0;
  v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v8 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v22 = "nw_protocol_socket_reset_keepalives";
    v23 = 2080;
    v24 = (char *)(a1 + 85);
    v25 = 1024;
    v26 = v7;
    v9 = "%{public}s %s setsockopt TCP_KEEPCNT failed %{darwin.errno}d";
    goto LABEL_23;
  }
  return v7;
}

uint64_t nw_protocol_socket_set_no_delay(uint64_t a1, int a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return nw_socket_set_no_delay(a1, a2);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_protocol_socket_set_no_delay";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_set_no_delay";
        v6 = "%{public}s called with null handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v12 = "nw_protocol_socket_set_no_delay";
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_17;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_set_no_delay";
        v6 = "%{public}s called with null handle, no backtrace";
        goto LABEL_16;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_set_no_delay";
        v6 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if (v3)
    free(v3);
  return 22;
}

uint64_t nw_protocol_socket_set_no_push(uint64_t a1, int a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return nw_socket_set_no_push(a1, a2);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_protocol_socket_set_no_push";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_set_no_push";
        v6 = "%{public}s called with null handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v12 = "nw_protocol_socket_set_no_push";
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_17;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_set_no_push";
        v6 = "%{public}s called with null handle, no backtrace";
        goto LABEL_16;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_set_no_push";
        v6 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if (v3)
    free(v3);
  return 22;
}

uint64_t nw_protocol_socket_set_no_wake_from_sleep(_DWORD *a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t v20[7];
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  _BYTE v25[14];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_DWORD *)v20 = a2;
    if (!setsockopt(a1[49], 0xFFFF, 0x10000, v20, 4u))
      return 0;
    v3 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      v24 = 2080;
      *(_QWORD *)v25 = a1 + 85;
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if ((_DWORD)v3 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        v24 = 1024;
        *(_DWORD *)v25 = 22;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d", buf, 0x12u);
      }
      return v3;
    }
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_socket_set_no_wake_from_sleep";
    v24 = 1024;
    *(_DWORD *)v25 = v3;
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      v24 = 1024;
      *(_DWORD *)v25 = v3;
      v9 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d";
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446722;
          v23 = "nw_protocol_socket_set_no_wake_from_sleep";
          v24 = 1024;
          *(_DWORD *)v25 = v3;
          *(_WORD *)&v25[4] = 2082;
          *(_QWORD *)&v25[6] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_25;
      }
      if (!v11)
      {
LABEL_25:
        if (v6)
          free(v6);
        return v3;
      }
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      v24 = 1024;
      *(_DWORD *)v25 = v3;
      v9 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      v24 = 1024;
      *(_DWORD *)v25 = v3;
      v9 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0x12u);
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_socket_set_no_wake_from_sleep";
  v13 = (char *)_os_log_send_and_compose_impl();
  v20[0] = OS_LOG_TYPE_ERROR;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v13, v20, &type))
  {
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = v20[0];
      if (os_log_type_enabled(v14, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        v16 = "%{public}s called with null handle";
LABEL_41:
        _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
      }
    }
    else if (type)
    {
      v17 = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = v20[0];
      v18 = os_log_type_enabled(v14, v20[0]);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_socket_set_no_wake_from_sleep";
          v24 = 2082;
          *(_QWORD *)v25 = v17;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        goto LABEL_42;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        v16 = "%{public}s called with null handle, no backtrace";
        goto LABEL_41;
      }
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = v20[0];
      if (os_log_type_enabled(v14, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        v16 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_41;
      }
    }
  }
LABEL_42:
  if (v13)
    free(v13);
  return 22;
}

uint64_t nw_socket_set_no_push(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v13;
  os_log_type_t type;
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  _BYTE v19[14];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 200) != 2)
    return 22;
  v15 = a2;
  if (!setsockopt(*(_DWORD *)(a1 + 196), 6, 4, &v15, 4u))
    return 0;
  v3 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v4 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "nw_socket_set_no_push";
    v18 = 2080;
    *(_QWORD *)v19 = a1 + 340;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v3;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_NOPUSH failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = gLogObj;
  if ((_DWORD)v3 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_no_push";
      v18 = 1024;
      *(_DWORD *)v19 = 22;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d", buf, 0x12u);
    }
    return v3;
  }
  *(_DWORD *)buf = 136446466;
  v17 = "nw_socket_set_no_push";
  v18 = 1024;
  *(_DWORD *)v19 = v3;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_no_push";
      v18 = 1024;
      *(_DWORD *)v19 = v3;
      v9 = "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d";
      goto LABEL_25;
    }
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_no_push";
      v18 = 1024;
      *(_DWORD *)v19 = v3;
      v9 = "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446722;
        v17 = "nw_socket_set_no_push";
        v18 = 1024;
        *(_DWORD *)v19 = v3;
        *(_WORD *)&v19[4] = 2082;
        *(_QWORD *)&v19[6] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(backtrace_string);
      goto LABEL_26;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_no_push";
      v18 = 1024;
      *(_DWORD *)v19 = v3;
      v9 = "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0x12u);
    }
  }
LABEL_26:
  if (v6)
    free(v6);
  return v3;
}

void ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke(uint64_t a1)
{
  nw_socket_update_output_source(*(char **)(a1 + 32));
}

BOOL ___ZL17nw_socket_connectP11nw_protocolS0__block_invoke(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 32) + 196) == a2;
}

const sockaddr *NWUtilsCreateNSStringFromSockaddr(const sockaddr *result, int a2)
{
  const sockaddr *v2;
  int v3;
  const char *v4;
  char v5[6];
  char v6[70];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (a2)
    {
      if (getnameinfo(result, result->sa_len, v6, 0x46u, v5, 6u, 10))
      {
        return 0;
      }
      else
      {
        if (v2->sa_family == 30)
          v4 = ".";
        else
          v4 = ":";
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%s%s"), v6, v4, v5);
        return (const sockaddr *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      v3 = getnameinfo(result, result->sa_len, v6, 0x46u, 0, 0, 10);
      result = 0;
      if (!v3)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
        return (const sockaddr *)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  return result;
}

uint64_t NWUtilsStringMatchesPattern(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (objc_msgSend(v4, "hasSuffix:", CFSTR("*")))
    {
      objc_msgSend(v4, "substringWithRange:", 0, objc_msgSend(v4, "length") - 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v3, "hasPrefix:", v5);
    }
    else
    {
      if (!objc_msgSend(v4, "hasPrefix:", CFSTR("*")))
      {
        v7 = objc_msgSend(v3, "isEqualToString:", v4);
        goto LABEL_6;
      }
      objc_msgSend(v4, "substringWithRange:", 1, objc_msgSend(v4, "length") - 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v3, "length");
      if (v9 == objc_msgSend(v5, "length") - 1 && objc_msgSend(v5, "hasPrefix:", CFSTR(".")))
      {
        objc_msgSend(v5, "substringWithRange:", 1, objc_msgSend(v5, "length") - 1);
        v10 = objc_claimAutoreleasedReturnValue();

        v5 = (void *)v10;
      }
      v6 = objc_msgSend(v3, "hasSuffix:", v5);
    }
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
LABEL_6:

  return v7;
}

uint64_t NWUtilsStringMatchesPatternSet(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v5);
          if ((NWUtilsStringMatchesPattern(v3, *(void **)(*((_QWORD *)&v10 + 1) + 8 * i)) & 1) != 0)
          {
            v6 = 1;
            goto LABEL_13;
          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_13:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t NWUtilsAnyStringsMatchPatternSet(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v5);
        if ((NWUtilsStringMatchesPatternSet(*(void **)(*((_QWORD *)&v10 + 1) + 8 * i), v4) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

uint64_t NWUtilsAreNSObjectsEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    if (objc_msgSend(v3, "isMemberOfClass:", objc_opt_class()))
      v6 = objc_msgSend(v3, "isEqual:", v5);
    else
      v6 = 0;
  }

  return v6;
}

id NWUtilsCreateNSDictionaryFromXPCDictionary(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  _QWORD applier[4];
  id v7;

  v1 = (void *)MEMORY[0x1E0C99E08];
  v2 = a1;
  objc_msgSend(v1, "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke;
  applier[3] = &unk_1E14A8E38;
  v4 = v3;
  v7 = v4;
  xpc_dictionary_apply(v2, applier);

  return v4;
}

BOOL NWUtilsCurrentProcessHasEntitlement(void *a1)
{
  __CFString *v1;
  __SecTask *v2;
  __SecTask *v3;
  CFTypeRef v4;
  id v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  CFTypeID v18;
  _BOOL8 v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  CFErrorRef v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "NWUtilsCurrentProcessHasEntitlement";
    v11 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(error) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, &error, &type))
    {
      if (error == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = error;
        if (!os_log_type_enabled(v12, (os_log_type_t)error))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v14 = "%{public}s SecTaskCreateFromSelf failed";
LABEL_44:
        v26 = v12;
        v27 = v13;
        goto LABEL_45;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = error;
        if (!os_log_type_enabled(v12, (os_log_type_t)error))
          goto LABEL_46;
        *(_DWORD *)buf = 136446210;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v14 = "%{public}s SecTaskCreateFromSelf failed, backtrace limit exceeded";
        goto LABEL_44;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v21 = error;
      v22 = os_log_type_enabled(v12, (os_log_type_t)error);
      if (!backtrace_string)
      {
        if (!v22)
        {
LABEL_46:

          if (!v11)
            goto LABEL_34;
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v14 = "%{public}s SecTaskCreateFromSelf failed, no backtrace";
        v26 = v12;
        v27 = v21;
LABEL_45:
        _os_log_impl(&dword_182FBE000, v26, v27, v14, buf, 0xCu);
        goto LABEL_46;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s SecTaskCreateFromSelf failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v11)
    {
LABEL_34:
      v19 = 0;
      goto LABEL_35;
    }
LABEL_33:
    free(v11);
    goto LABEL_34;
  }
  v3 = v2;
  error = 0;
  v4 = SecTaskCopyValueForEntitlement(v2, v1, &error);
  if (error)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v32 = "NWUtilsCurrentProcessHasEntitlement";
    v33 = 2114;
    v34 = v1;
    v35 = 2114;
    v36 = error;
    v6 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault((const char *)v6, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446722;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v33 = 2114;
        v34 = v1;
        v35 = 2114;
        v36 = error;
        v9 = "%{public}s SecTaskCopyValueForEntitlement %{public}@ error %{public}@ failed";
LABEL_38:
        v24 = v7;
        v25 = v8;
        goto LABEL_39;
      }
      if (!v28)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446722;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v33 = 2114;
        v34 = v1;
        v35 = 2114;
        v36 = error;
        v9 = "%{public}s SecTaskCopyValueForEntitlement %{public}@ error %{public}@ failed, backtrace limit exceeded";
        goto LABEL_38;
      }
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v7, type);
      if (!v15)
      {
        if (!v17)
        {
LABEL_40:

          if (!v6)
          {
LABEL_18:
            if (error)
            {
              CFRelease(error);
              error = 0;
            }
            goto LABEL_20;
          }
LABEL_17:
          free(v6);
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446722;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v33 = 2114;
        v34 = v1;
        v35 = 2114;
        v36 = error;
        v9 = "%{public}s SecTaskCopyValueForEntitlement %{public}@ error %{public}@ failed, no backtrace";
        v24 = v7;
        v25 = v16;
LABEL_39:
        _os_log_impl(&dword_182FBE000, v24, v25, v9, buf, 0x20u);
        goto LABEL_40;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446978;
        v32 = "NWUtilsCurrentProcessHasEntitlement";
        v33 = 2114;
        v34 = v1;
        v35 = 2114;
        v36 = error;
        v37 = 2082;
        v38 = v15;
        _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s SecTaskCopyValueForEntitlement %{public}@ error %{public}@ failed, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v15);
    }
    if (!v6)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_20:
  if (v4)
  {
    v18 = CFGetTypeID(v4);
    v19 = v18 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v4) != 0;
    CFRelease(v4);
  }
  else
  {
    v19 = 0;
  }
  CFRelease(v3);
LABEL_35:

  return v19;
}

uint64_t *nw_protocol_recorder_identifier()
{
  if (nw_protocol_recorder_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_recorder_identifier::onceToken, &__block_literal_global_65152);
  return &g_recorder_protocol_identifier;
}

BOOL __nw_protocol_recorder_identifier_block_invoke()
{
  unk_1EDCF2481 = 0;
  unk_1EDCF2479 = 0;
  qword_1EDCF2488 = 0;
  strcpy((char *)&g_recorder_protocol_identifier, "recorder");
  qword_1EDCF24D8 = (uint64_t)nw_protocol_default_input_available;
  unk_1EDCF24E0 = nw_protocol_default_output_available;
  qword_1EDCF2518 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCF2520 = nw_protocol_default_get_remote;
  qword_1EDCF2508 = (uint64_t)nw_protocol_default_get_parameters;
  unk_1EDCF2510 = nw_protocol_default_get_path;
  qword_1EDCF2558 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCF2560 = nw_protocol_default_get_output_local;
  qword_1EDCF24A8 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCF24B0 = nw_protocol_default_connect;
  qword_1EDCF24B8 = (uint64_t)nw_protocol_default_disconnect;
  unk_1EDCF24C0 = nw_protocol_default_connected;
  qword_1EDCF24C8 = (uint64_t)nw_protocol_default_disconnected;
  unk_1EDCF24D0 = nw_protocol_default_error;
  qword_1EDCF2598 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCF25A0 = nw_protocol_default_input_flush;
  qword_1EDCF2548 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_1EDCF2550 = nw_protocol_default_input_finished;
  qword_1EDCF2568 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCF2570 = nw_protocol_default_waiting_for_output;
  qword_1EDCF2528 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCF2530 = nw_protocol_default_unregister_notification;
  qword_1EDCF2538 = (uint64_t)nw_protocol_default_notify;
  unk_1EDCF2540 = nw_protocol_default_updated_path;
  qword_1EDCF2578 = (uint64_t)nw_protocol_default_copy_info;
  unk_1EDCF2580 = nw_protocol_default_add_listen_handler;
  qword_1EDCF2588 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCF2590 = nw_protocol_default_get_message_properties;
  g_recorder_protocol_callbacks = (uint64_t)nw_protocol_recorder_add_input_handler;
  unk_1EDCF24A0 = nw_protocol_recorder_remove_input_handler;
  qword_1EDCF24E8 = (uint64_t)nw_protocol_recorder_get_input_frames;
  unk_1EDCF24F0 = nw_protocol_recorder_get_output_frames;
  qword_1EDCF24F8 = (uint64_t)nw_protocol_recorder_finalize_output_frames;
  unk_1EDCF2500 = nw_protocol_default_link_state;
  qword_1EDCF2490 = 0x100000000;
  return nw_protocol_register(&g_recorder_protocol_identifier, (uint64_t)nw_protocol_recorder_create);
}

uint64_t nw_protocol_recorder_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  unsigned __int8 *handle;
  uint64_t v4;
  uint64_t v5;
  uint64_t delayInitStub;
  double v7;
  double v8;
  uint64_t inited;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint32_t v21;
  char *v22;
  _BOOL4 v23;
  uint8_t *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint32_t v27;
  NSObject *v28;
  char v29;
  _BOOL4 v30;
  _BOOL4 v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  char *v39;
  _OWORD v40[16];
  char __str[128];
  char out[40];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    LODWORD(v40[0]) = 136446210;
    *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
    v11 = (char *)_os_log_send_and_compose_impl();
    __str[0] = 16;
    out[0] = 0;
    if (!__nwlog_fault(v11, __str, out))
      goto LABEL_41;
    if (__str[0] == 17)
    {
      v28 = __nwlog_obj();
      v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0]))
        goto LABEL_41;
      LODWORD(v40[0]) = 136446210;
      *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      v14 = "%{public}s called with null protocol";
      goto LABEL_69;
    }
    if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __str[0];
      v30 = os_log_type_enabled(v28, (os_log_type_t)__str[0]);
      if (backtrace_string)
      {
        if (!v30)
          goto LABEL_24;
        LODWORD(v40[0]) = 136446466;
        *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
        WORD6(v40[0]) = 2082;
        *(_QWORD *)((char *)v40 + 14) = backtrace_string;
        v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_60;
      }
      if (!v30)
        goto LABEL_41;
      LODWORD(v40[0]) = 136446210;
      *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      v14 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0]))
        goto LABEL_41;
      LODWORD(v40[0]) = 136446210;
      *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_69:
    v24 = (uint8_t *)v40;
    v25 = v28;
    v26 = v29;
    v27 = 12;
    goto LABEL_40;
  }
  handle = (unsigned __int8 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    LODWORD(v40[0]) = 136446210;
    *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
    v11 = (char *)_os_log_send_and_compose_impl();
    __str[0] = 16;
    out[0] = 0;
    if (!__nwlog_fault(v11, __str, out))
      goto LABEL_41;
    if (__str[0] == 17)
    {
      v28 = __nwlog_obj();
      v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0]))
        goto LABEL_41;
      LODWORD(v40[0]) = 136446210;
      *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      v14 = "%{public}s called with null recorder";
      goto LABEL_69;
    }
    if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __str[0];
      v31 = os_log_type_enabled(v28, (os_log_type_t)__str[0]);
      if (backtrace_string)
      {
        if (!v31)
          goto LABEL_24;
        LODWORD(v40[0]) = 136446466;
        *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
        WORD6(v40[0]) = 2082;
        *(_QWORD *)((char *)v40 + 14) = backtrace_string;
        v17 = "%{public}s called with null recorder, dumping backtrace:%{public}s";
LABEL_60:
        v18 = (uint8_t *)v40;
        v19 = v28;
        v20 = v29;
        v21 = 22;
        goto LABEL_23;
      }
      if (!v31)
        goto LABEL_41;
      LODWORD(v40[0]) = 136446210;
      *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      v14 = "%{public}s called with null recorder, no backtrace";
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0]))
        goto LABEL_41;
      LODWORD(v40[0]) = 136446210;
      *(_QWORD *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      v14 = "%{public}s called with null recorder, backtrace limit exceeded";
    }
    goto LABEL_69;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
  if (!a2->output_handler)
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
  v4 = mach_continuous_time();
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  *((_QWORD *)handle + 8) = v5;
  memset(out, 0, 37);
  uuid_unparse_upper(handle, out);
  snprintf(__str, 0x80uLL, "/var/tmp/nw-%s-%s.pcap", a2->identifier->name, out);
  __str[127] = 0;
  memset(v40, 0, sizeof(v40));
  delayInitStub = pcap_create_delayInitStub(0.0);
  *((_QWORD *)handle + 9) = delayInitStub;
  if (!delayInitStub)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v35 = "nw_protocol_recorder_add_input_handler";
    v36 = 2082;
    v37 = (char *)v40;
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v11, &type, &v32))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = (char *)v40;
      v14 = "%{public}s pcap_create: %{public}s failed";
LABEL_39:
      v24 = buf;
      v25 = v12;
      v26 = v13;
      v27 = 22;
LABEL_40:
      _os_log_impl(&dword_182FBE000, v25, v26, v14, v24, v27);
      goto LABEL_41;
    }
    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = (char *)v40;
      v14 = "%{public}s pcap_create: %{public}s failed, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    v13 = type;
    v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v16)
        goto LABEL_41;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = (char *)v40;
      v14 = "%{public}s pcap_create: %{public}s failed, no backtrace";
      goto LABEL_39;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446722;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = (char *)v40;
      v38 = 2082;
      v39 = backtrace_string;
      v17 = "%{public}s pcap_create: %{public}s failed, dumping backtrace:%{public}s";
      v18 = buf;
      v19 = v12;
      v20 = v13;
      v21 = 32;
LABEL_23:
      _os_log_impl(&dword_182FBE000, v19, v20, v17, v18, v21);
    }
LABEL_24:
    free(backtrace_string);
    if (!v11)
      return 0;
    goto LABEL_42;
  }
  pcap_activate_delayInitStub(v7);
  inited = pcap_ng_dump_open_delayInitStub(v8);
  *((_QWORD *)handle + 10) = inited;
  if (inited)
    return 1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v35 = "nw_protocol_recorder_add_input_handler";
  v36 = 2082;
  v37 = __str;
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (__nwlog_fault(v11, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = __str;
      v14 = "%{public}s pcap_create: %{public}s failed";
      goto LABEL_39;
    }
    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = __str;
      v14 = "%{public}s pcap_create: %{public}s failed, backtrace limit exceeded";
      goto LABEL_39;
    }
    v22 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    v13 = type;
    v23 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v22)
    {
      if (!v23)
        goto LABEL_41;
      *(_DWORD *)buf = 136446466;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = __str;
      v14 = "%{public}s pcap_create: %{public}s failed, no backtrace";
      goto LABEL_39;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446722;
      v35 = "nw_protocol_recorder_add_input_handler";
      v36 = 2082;
      v37 = __str;
      v38 = 2082;
      v39 = v22;
      _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s pcap_create: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v22);
  }
LABEL_41:
  if (v11)
LABEL_42:
    free(v11);
  return 0;
}

uint64_t nw_protocol_recorder_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _QWORD *handle;
  double v8;
  nw_protocol *output_handler;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_recorder_remove_input_handler";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_44;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_44;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_recorder_remove_input_handler";
        v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v15 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v15)
          goto LABEL_44;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_protocol_recorder_remove_input_handler";
        v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_43;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_protocol_recorder_remove_input_handler";
        v22 = 2082;
        v23 = backtrace_string;
        v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_33:
        _os_log_impl(&dword_182FBE000, v11, v12, v16, buf, 0x16u);
      }
LABEL_34:
      free(backtrace_string);
      goto LABEL_44;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_44;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_recorder_remove_input_handler";
    v13 = "%{public}s called with null protocol";
LABEL_43:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
LABEL_44:
    if (v10)
      free(v10);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_recorder_remove_input_handler";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_44;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_recorder_remove_input_handler";
      v13 = "%{public}s called with null recorder";
      goto LABEL_43;
    }
    if (!v18)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_44;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_protocol_recorder_remove_input_handler";
      v13 = "%{public}s called with null recorder, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_protocol_recorder_remove_input_handler";
        v22 = 2082;
        v23 = backtrace_string;
        v16 = "%{public}s called with null recorder, dumping backtrace:%{public}s";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v17)
      goto LABEL_44;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_protocol_recorder_remove_input_handler";
    v13 = "%{public}s called with null recorder, no backtrace";
    goto LABEL_43;
  }
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler != a2)
    return 0;
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  output_handler = a1->output_handler;
  if (output_handler)
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  if (a3)
  {
    if (handle[10])
    {
      pcap_ng_dump_close_delayInitStub(v8);
      handle[10] = 0;
    }
    if (handle[9])
      pcap_close_delayInitStub(v8);
    a1->handle = 0;
    free(handle);
  }
  return 1;
}

uint64_t nw_protocol_recorder_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  uint64_t v8;
  nw_frame *tqh_first;
  nw_frame *v10;
  char v11;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, uint64_t);
  void *v23;
  _QWORD *v24;
  char v25;
  os_log_type_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 80))();
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 0x40000000;
      v22 = ___ZL37nw_protocol_recorder_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      v23 = &__block_descriptor_tmp_12_65195;
      v24 = handle;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first)
          break;
        v10 = (nw_frame *)*((_QWORD *)tqh_first + 4);
        v11 = ((uint64_t (*)(_QWORD *))v22)(v21);
        tqh_first = v10;
      }
      while ((v11 & 1) != 0);
      return v8;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_recorder_get_input_frames";
    v13 = (char *)_os_log_send_and_compose_impl();
    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v13, &v26, &v25))
      goto LABEL_34;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_recorder_get_input_frames";
        v16 = "%{public}s called with null recorder";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v25)
    {
      v14 = __nwlog_obj();
      v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_recorder_get_input_frames";
        v16 = "%{public}s called with null recorder, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = v26;
    v20 = os_log_type_enabled(v14, v26);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_recorder_get_input_frames";
        v16 = "%{public}s called with null recorder, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_recorder_get_input_frames";
      v29 = 2082;
      v30 = backtrace_string;
      v19 = "%{public}s called with null recorder, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_protocol_recorder_get_input_frames";
  v13 = (char *)_os_log_send_and_compose_impl();
  v26 = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v13, &v26, &v25))
    goto LABEL_34;
  if (v26 != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      v14 = __nwlog_obj();
      v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_recorder_get_input_frames";
        v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = v26;
    v18 = os_log_type_enabled(v14, v26);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_recorder_get_input_frames";
        v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_recorder_get_input_frames";
      v29 = 2082;
      v30 = backtrace_string;
      v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v14, v15, v19, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v14 = __nwlog_obj();
  v15 = v26;
  if (os_log_type_enabled(v14, v26))
  {
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_recorder_get_input_frames";
    v16 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
  }
LABEL_34:
  if (v13)
    free(v13);
  return 0;
}

uint64_t nw_protocol_recorder_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  _BOOL4 v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 88))();
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_recorder_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_recorder_get_output_frames";
        v11 = "%{public}s called with null recorder";
        goto LABEL_31;
      }
      if (!v16)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_recorder_get_output_frames";
        v11 = "%{public}s called with null recorder, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_recorder_get_output_frames";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null recorder, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v8)
          return 0;
        goto LABEL_33;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_recorder_get_output_frames";
        v11 = "%{public}s called with null recorder, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_recorder_get_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_recorder_get_output_frames";
      v11 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_recorder_get_output_frames";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!v12)
    {
      if (!v13)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_recorder_get_output_frames";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_recorder_get_output_frames";
      v20 = 2082;
      v21 = v12;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
  }
LABEL_32:
  if (v8)
LABEL_33:
    free(v8);
  return 0;
}

uint64_t nw_protocol_recorder_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _QWORD *handle;
  nw_frame *tqh_first;
  nw_frame *v4;
  char v5;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  _QWORD *v18;
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_recorder_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    v20 = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v7, &v20, &v19))
      goto LABEL_35;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v20;
      if (!os_log_type_enabled(v8, v20))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v10 = "%{public}s called with null protocol";
      goto LABEL_34;
    }
    if (!v19)
    {
      v8 = __nwlog_obj();
      v9 = v20;
      if (!os_log_type_enabled(v8, v20))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v20;
    v12 = os_log_type_enabled(v8, v20);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_34;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_35:
    if (!v7)
      return 0;
LABEL_36:
    free(v7);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_recorder_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    v20 = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v7, &v20, &v19))
      goto LABEL_35;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v20;
      if (!os_log_type_enabled(v8, v20))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v10 = "%{public}s called with null recorder";
      goto LABEL_34;
    }
    if (!v19)
    {
      v8 = __nwlog_obj();
      v9 = v20;
      if (!os_log_type_enabled(v8, v20))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v10 = "%{public}s called with null recorder, backtrace limit exceeded";
      goto LABEL_34;
    }
    v13 = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v20;
    v14 = os_log_type_enabled(v8, v20);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_protocol_recorder_finalize_output_frames";
        v23 = 2082;
        v24 = v13;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null recorder, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v7)
        return 0;
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_protocol_recorder_finalize_output_frames";
      v10 = "%{public}s called with null recorder, no backtrace";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v16 = ___ZL43nw_protocol_recorder_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  v17 = &__block_descriptor_tmp_13_65168;
  v18 = handle;
  tqh_first = a2->tqh_first;
  do
  {
    if (!tqh_first)
      break;
    v4 = (nw_frame *)*((_QWORD *)tqh_first + 4);
    v5 = ((uint64_t (*)(_QWORD *))v16)(v15);
    tqh_first = v4;
  }
  while ((v5 & 1) != 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 96))();
}

uint64_t nw_protocol_recorder_create(const nw_protocol_identifier *a1)
{
  uint64_t result;
  NSObject *v2;
  void *v3;
  void *memptr;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0x58uLL, 0x68FF3B34uLL))
  {
    result = (uint64_t)memptr;
    if (memptr)
      goto LABEL_3;
  }
  v2 = __nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  v5 = 136446722;
  v6 = "strict_memalign";
  v7 = 2048;
  v8 = 8;
  v9 = 2048;
  v10 = 88;
  v3 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v3);
  if (!(_DWORD)result)
  {
    free(v3);
    result = (uint64_t)memptr;
LABEL_3:
    *(_QWORD *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_QWORD *)(result + 16) = &g_recorder_protocol_identifier;
    *(_QWORD *)(result + 24) = &g_recorder_protocol_callbacks;
    *(_QWORD *)(result + 40) = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL43nw_protocol_recorder_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  uint64_t enhanced_packet_fields_delayInitStub;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v23;
  os_log_type_t type;
  int v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (!nw_frame_unclaimed_bytes(a2, &v25) || !v25)
    return 1;
  if (pcap_ng_block_alloc_delayInitStub(v3))
  {
    pcap_ng_block_reset_delayInitStub(v4);
    enhanced_packet_fields_delayInitStub = pcap_ng_get_enhanced_packet_fields_delayInitStub(v5);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
    v8 = mach_continuous_time();
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + 4) = nw_delta_nanos(v7, v9) / 0x3B9ACA00uLL;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
    v11 = mach_continuous_time();
    if (v11 <= 1)
      v12 = 1;
    else
      v12 = v11;
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + 8) = nw_delta_nanos(v10, v12) / 0xF4240uLL;
    pcap_ng_block_packet_set_data_delayInitStub(v13);
    pcap_ng_dump_block_delayInitStub(v14);
    pcap_ng_free_block_delayInitStub(v15);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
  v28 = 1024;
  v29 = v25 + 2048;
  v16 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
      v28 = 1024;
      v29 = v25 + 2048;
      v19 = "%{public}s pcap_ng_block_alloc(%u) failed";
      goto LABEL_24;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
      v28 = 1024;
      v29 = v25 + 2048;
      v19 = "%{public}s pcap_ng_block_alloc(%u) failed, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    v18 = type;
    v21 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
        v28 = 1024;
        v29 = v25 + 2048;
        v30 = 2082;
        v31 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s pcap_ng_block_alloc(%u) failed, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
      v28 = 1024;
      v29 = v25 + 2048;
      v19 = "%{public}s pcap_ng_block_alloc(%u) failed, no backtrace";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0x12u);
    }
  }
LABEL_25:
  if (v16)
    free(v16);
  return 1;
}

uint64_t ___ZL37nw_protocol_recorder_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  uint64_t enhanced_packet_fields_delayInitStub;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v23;
  os_log_type_t type;
  int v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (!nw_frame_unclaimed_bytes(a2, &v25) || !v25)
    return 1;
  if (pcap_ng_block_alloc_delayInitStub(v3))
  {
    pcap_ng_block_reset_delayInitStub(v4);
    enhanced_packet_fields_delayInitStub = pcap_ng_get_enhanced_packet_fields_delayInitStub(v5);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
    v8 = mach_continuous_time();
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + 4) = nw_delta_nanos(v7, v9) / 0x3B9ACA00uLL;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
    v11 = mach_continuous_time();
    if (v11 <= 1)
      v12 = 1;
    else
      v12 = v11;
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + 8) = nw_delta_nanos(v10, v12) / 0xF4240uLL;
    pcap_ng_block_packet_set_data_delayInitStub(v13);
    pcap_ng_dump_block_delayInitStub(v14);
    pcap_ng_free_block_delayInitStub(v15);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
  v28 = 1024;
  v29 = v25 + 2048;
  v16 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
      v28 = 1024;
      v29 = v25 + 2048;
      v19 = "%{public}s pcap_ng_block_alloc(%u) failed";
      goto LABEL_24;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
      v28 = 1024;
      v29 = v25 + 2048;
      v19 = "%{public}s pcap_ng_block_alloc(%u) failed, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    v18 = type;
    v21 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
        v28 = 1024;
        v29 = v25 + 2048;
        v30 = 2082;
        v31 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s pcap_ng_block_alloc(%u) failed, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
      v28 = 1024;
      v29 = v25 + 2048;
      v19 = "%{public}s pcap_ng_block_alloc(%u) failed, no backtrace";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0x12u);
    }
  }
LABEL_25:
  if (v16)
    free(v16);
  return 1;
}

BOOL nw_http_oblivious_config_is_valid(unsigned __int16 *a1, uint64_t a2)
{
  return nw_http_oblivious_config_select(a1, a2, 0) != 0;
}

unsigned __int16 *nw_http_oblivious_config_select(unsigned __int16 *a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _WORD *v9;
  _WORD *v10;
  int v11;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  unint64_t v17;
  char *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  char *backtrace_string;
  _BOOL4 v24;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v3 = 0;
  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return v3;
  v4 = a2;
  if ((unint64_t)a2 < 0x29)
    return v3;
  if (*(unsigned __int16 *)((char *)a1 + 1) == 0x2000)
  {
    if (*(unsigned __int16 *)((char *)a1 + 37) == 256 && *(unsigned __int16 *)((char *)a1 + 39) == 256)
      goto LABEL_40;
    if (a2 < 45)
      goto LABEL_7;
    v17 = (unint64_t)a1 + a2;
    v18 = (char *)a1 + 45;
    v19 = (unsigned __int16 *)((char *)a1 + 41);
    while (1)
    {
      v20 = v18;
      if (*v19 == 256)
      {
        v21 = (unsigned __int16)v19[1];
        if (v21 == 256 || (unint64_t)v20 >= v17)
        {
          if (v21 != 256)
            goto LABEL_7;
LABEL_40:
          if (a3)
            *a3 = a2;
          return a1;
        }
      }
      else if ((unint64_t)v18 >= v17)
      {
        goto LABEL_7;
      }
      v18 = (char *)(v20 + 2);
      v19 = v20;
      if ((unint64_t)(v20 + 2) > v17)
        goto LABEL_7;
    }
  }
  while (1)
  {
LABEL_7:
    v3 = a1 + 1;
    v5 = bswap32(*a1) >> 16;
    v6 = v4 - 2;
    if (v4 - 2 < v5)
      return 0;
    if (v5 >= 0x29 && *(unsigned __int16 *)((char *)a1 + 3) == 0x2000)
      break;
LABEL_23:
    v4 = v6 - v5;
    if (v6 < v5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446978;
      v29 = "nw_http_oblivious_config_select";
      v30 = 2082;
      v31 = "remaining_length";
      v32 = 2048;
      v33 = v5;
      v34 = 2048;
      v35 = v4;
      v13 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (!__nwlog_fault(v13, &type, &v26))
        goto LABEL_56;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446978;
          v29 = "nw_http_oblivious_config_select";
          v30 = 2082;
          v31 = "remaining_length";
          v32 = 2048;
          v33 = v5;
          v34 = 2048;
          v35 = v4;
          v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
          goto LABEL_55;
        }
        goto LABEL_56;
      }
      if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        v24 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136447234;
            v29 = "nw_http_oblivious_config_select";
            v30 = 2082;
            v31 = "remaining_length";
            v32 = 2048;
            v33 = v5;
            v34 = 2048;
            v35 = v4;
            v36 = 2082;
            v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_56;
        }
        if (!v24)
        {
LABEL_56:
          if (v13)
            free(v13);
          return 0;
        }
        *(_DWORD *)buf = 136446978;
        v29 = "nw_http_oblivious_config_select";
        v30 = 2082;
        v31 = "remaining_length";
        v32 = 2048;
        v33 = v5;
        v34 = 2048;
        v35 = v4;
        v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_56;
        *(_DWORD *)buf = 136446978;
        v29 = "nw_http_oblivious_config_select";
        v30 = 2082;
        v31 = "remaining_length";
        v32 = 2048;
        v33 = v5;
        v34 = 2048;
        v35 = v4;
        v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
LABEL_55:
      _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0x2Au);
      goto LABEL_56;
    }
    a1 = (unsigned __int16 *)((char *)v3 + v5);
    if (v4 <= 2)
      return 0;
  }
  if (*(unsigned __int16 *)((char *)a1 + 39) == 256 && *(unsigned __int16 *)((char *)a1 + 41) == 256)
    goto LABEL_51;
  if (v5 < 0x2D)
    goto LABEL_23;
  v7 = (unint64_t)a1 + v5 + 2;
  v8 = (char *)a1 + 47;
  v9 = (unsigned __int16 *)((char *)a1 + 43);
  while (1)
  {
    v10 = v8;
    if (*v9 != 256)
    {
      if ((unint64_t)v8 >= v7)
        goto LABEL_23;
      goto LABEL_15;
    }
    v11 = (unsigned __int16)v9[1];
    if (v11 == 256 || (unint64_t)v10 >= v7)
      break;
LABEL_15:
    v8 = (char *)(v10 + 2);
    v9 = v10;
    if ((unint64_t)(v10 + 2) > v7)
      goto LABEL_23;
  }
  if (v11 != 256)
    goto LABEL_23;
LABEL_51:
  if (a3)
    *a3 = v5;
  return v3;
}

BOOL nw_http_encrypt_oblivious_request(const void *a1, size_t a2, const char *a3, unsigned __int16 *a4, uint64_t a5, char **a6, _QWORD *a7, _QWORD *a8, size_t *a9, size_t *a10)
{
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  size_t v18;
  NSObject *v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  size_t v27;
  char *v28;
  size_t v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  _BOOL8 result;
  size_t v41;
  void *v42;
  size_t *v43;
  const char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  char *backtrace_string;
  _BOOL4 v49;
  const char *v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  size_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  os_log_type_t type[8];
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v49 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v49)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null message_buffer";
LABEL_168:
    _os_log_impl(&dword_182FBE000, v45, v46, v47, buf, 0xCu);
    goto LABEL_169;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v51 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v51)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null message_length";
    goto LABEL_168;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v52 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v52)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null media_type";
    goto LABEL_168;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null config_buffer, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v53 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null config_buffer, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v53)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null config_buffer, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null config_buffer";
    goto LABEL_168;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null in_config_length, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v54 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null in_config_length, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v54)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null in_config_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null in_config_length";
    goto LABEL_168;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null out_context, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v55 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null out_context, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v55)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null out_context";
    goto LABEL_168;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null out_context_length, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v56 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null out_context_length, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v56)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null out_context_length";
    goto LABEL_168;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v57 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_http_encrypt_oblivious_request";
          v47 = "%{public}s called with null out_request_enc, no backtrace";
          goto LABEL_168;
        }
        goto LABEL_169;
      }
      if (!v57)
        goto LABEL_119;
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
    v45 = __nwlog_obj();
    v46 = type[0];
    if (!os_log_type_enabled(v45, type[0]))
      goto LABEL_169;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v47 = "%{public}s called with null out_request_enc";
    goto LABEL_168;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_169;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_encrypt_oblivious_request";
      v47 = "%{public}s called with null out_request_enc_length";
      goto LABEL_168;
    }
    if (!(_BYTE)v80)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_encrypt_oblivious_request";
        v47 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_168;
      }
      goto LABEL_169;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v58 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_encrypt_oblivious_request";
        v47 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_168;
      }
      goto LABEL_169;
    }
    if (!v58)
      goto LABEL_119;
    *(_DWORD *)buf = 136446466;
    v83 = "nw_http_encrypt_oblivious_request";
    v84 = 2082;
    v85 = (uint64_t)backtrace_string;
    v50 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
LABEL_118:
    _os_log_impl(&dword_182FBE000, v45, v46, v50, buf, 0x16u);
    goto LABEL_119;
  }
  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_encrypt_oblivious_request";
    v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v44, type, &v80))
      goto LABEL_169;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_encrypt_oblivious_request";
        v47 = "%{public}s called with null out_encrypted_length";
        goto LABEL_168;
      }
LABEL_169:
      if (!v44)
        return 0;
      v39 = (char *)v44;
      goto LABEL_32;
    }
    if (!(_BYTE)v80)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_encrypt_oblivious_request";
        v47 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
        goto LABEL_168;
      }
      goto LABEL_169;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v59 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_encrypt_oblivious_request";
        v47 = "%{public}s called with null out_encrypted_length, no backtrace";
        goto LABEL_168;
      }
      goto LABEL_169;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 2082;
      v85 = (uint64_t)backtrace_string;
      v50 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }
LABEL_119:
    free(backtrace_string);
    goto LABEL_169;
  }
  *(_QWORD *)type = 0;
  v16 = nw_http_oblivious_config_select(a4, a5, type);
  if (!v16 || *(_QWORD *)type <= 0x28uLL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_encrypt_oblivious_request";
      v20 = "%{public}s Config parsing failed";
      goto LABEL_18;
    }
    return 0;
  }
  v17 = v16;
  v18 = strlen(a3);
  if (v18 >= 0x101)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_encrypt_oblivious_request";
      v20 = "%{public}s Media type exceeds max length";
LABEL_18:
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0xCu);
      return 0;
    }
    return 0;
  }
  v21 = v18;
  v75 = a7;
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v22 = cchpke_params_sizeof_aead_tag();
  v23 = cchpke_params_sizeof_kem_enc();
  v79 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  v78 = v22;
  if (!v79)
  {
    v60 = v23;
    v61 = __nwlog_obj();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1;
    v86 = 2048;
    v87 = 96;
    v62 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v62);
    if (result)
      goto LABEL_175;
    free(v62);
    v23 = v60;
    v22 = v78;
  }
  v24 = a2 + v22 + v23;
  v25 = v24 + 7;
  v77 = v24 + 7;
  if (v24 == -7)
  {
    v63 = v23;
    v64 = __nwlog_obj();
    os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v83 = "strict_calloc";
    v65 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v65);
    if (result)
      goto LABEL_175;
    free(v65);
    v23 = v63;
    v25 = v77;
  }
  v76 = a8;
  v26 = (char *)malloc_type_calloc(1uLL, v25, 0xEAFB8F1AuLL);
  if (!v26)
  {
    v66 = v23;
    v67 = __nwlog_obj();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1;
    v86 = 2048;
    v87 = v77;
    v68 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v68);
    if (result)
      goto LABEL_175;
    free(v68);
    v23 = v66;
  }
  *v26 = *(_BYTE *)v17;
  *(_WORD *)(v26 + 1) = *(unsigned __int16 *)((char *)v17 + 1);
  *(_DWORD *)(v26 + 3) = 16777472;
  v80 = 0;
  ccrng();
  memcpy(&v26[v23 + 7], a1, a2);
  v27 = v23;
  v28 = (char *)malloc_type_calloc(1uLL, v21 + 16, 0xEAFB8F1AuLL);
  if (!v28)
  {
    v69 = __nwlog_obj();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1;
    v86 = 2048;
    v87 = v21 + 16;
    v70 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v70);
    if (result)
      goto LABEL_175;
    free(v70);
  }
  v29 = v21 + 9;
  snprintf(v28, v29, "%s request", a3);
  v30 = &v28[v29];
  v31 = *(_DWORD *)(v26 + 3);
  *(_DWORD *)v30 = *(_DWORD *)v26;
  *(_DWORD *)(v30 + 3) = v31;
  v32 = cchpke_initiator_setup();
  free(v28);
  if (v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 1024;
      LODWORD(v85) = v32;
      v34 = "%{public}s Setup error: %d";
      v35 = v33;
LABEL_29:
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, v34, buf, 0x12u);
      goto LABEL_30;
    }
    goto LABEL_30;
  }
  v36 = cchpke_initiator_encrypt();
  if (v36)
  {
    v37 = v36;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 1024;
      LODWORD(v85) = v37;
      v34 = "%{public}s Encrypt: %d";
      v35 = v38;
      goto LABEL_29;
    }
LABEL_30:
    free(v26);
    if (!v79)
      return 0;
    v39 = v79;
LABEL_32:
    free(v39);
    return 0;
  }
  *a6 = v79;
  *v75 = 96;
  v41 = v27;
  if (!v27)
  {
    v71 = __nwlog_obj();
    os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v83 = "strict_calloc";
    v72 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v72);
    if (result)
      goto LABEL_175;
    free(v72);
    v41 = 0;
  }
  v42 = malloc_type_calloc(1uLL, v41, 0xEAFB8F1AuLL);
  v43 = a10;
  if (v42)
  {
LABEL_37:
    *v76 = v42;
    memcpy(v42, v26 + 7, v41);
    *a9 = v41;
    *v43 = v77;
    return (BOOL)v26;
  }
  v73 = __nwlog_obj();
  os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v83 = "strict_calloc";
  v84 = 2048;
  v85 = 1;
  v86 = 2048;
  v87 = v41;
  v74 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v74);
  if (!result)
  {
    free(v74);
    v43 = a10;
    v41 = v27;
    goto LABEL_37;
  }
LABEL_175:
  __break(1u);
  return result;
}

BOOL nw_http_encrypt_chunked_oblivious_request_header(const char *a1, unsigned __int16 *a2, uint64_t a3, char **a4, _QWORD *a5, _QWORD *a6, size_t *a7, _QWORD *a8)
{
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  size_t v16;
  NSObject *v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  size_t v24;
  char *v25;
  int v26;
  size_t v27;
  int v28;
  NSObject *v29;
  char *v30;
  _BOOL8 result;
  void *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  char *backtrace_string;
  _BOOL4 v38;
  const char *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  NSObject *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  NSObject *v53;
  NSObject *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  size_t *v59;
  _QWORD *v60;
  char *v61;
  int v62;
  os_log_type_t type[8];
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        v34 = __nwlog_obj();
        v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type[0];
      v38 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      if (!v38)
        goto LABEL_97;
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
    v34 = __nwlog_obj();
    v35 = type[0];
    if (!os_log_type_enabled(v34, type[0]))
      goto LABEL_139;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v36 = "%{public}s called with null media_type";
LABEL_138:
    _os_log_impl(&dword_182FBE000, v34, v35, v36, buf, 0xCu);
    goto LABEL_139;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        v34 = __nwlog_obj();
        v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null config_buffer, backtrace limit exceeded";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type[0];
      v40 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null config_buffer, no backtrace";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      if (!v40)
        goto LABEL_97;
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null config_buffer, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
    v34 = __nwlog_obj();
    v35 = type[0];
    if (!os_log_type_enabled(v34, type[0]))
      goto LABEL_139;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v36 = "%{public}s called with null config_buffer";
    goto LABEL_138;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        v34 = __nwlog_obj();
        v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null in_config_length, backtrace limit exceeded";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type[0];
      v41 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null in_config_length, no backtrace";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      if (!v41)
        goto LABEL_97;
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null in_config_length, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
    v34 = __nwlog_obj();
    v35 = type[0];
    if (!os_log_type_enabled(v34, type[0]))
      goto LABEL_139;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v36 = "%{public}s called with null in_config_length";
    goto LABEL_138;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        v34 = __nwlog_obj();
        v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null out_context, backtrace limit exceeded";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type[0];
      v42 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null out_context, no backtrace";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      if (!v42)
        goto LABEL_97;
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
    v34 = __nwlog_obj();
    v35 = type[0];
    if (!os_log_type_enabled(v34, type[0]))
      goto LABEL_139;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v36 = "%{public}s called with null out_context";
    goto LABEL_138;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        v34 = __nwlog_obj();
        v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null out_context_length, backtrace limit exceeded";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type[0];
      v43 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null out_context_length, no backtrace";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      if (!v43)
        goto LABEL_97;
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
    v34 = __nwlog_obj();
    v35 = type[0];
    if (!os_log_type_enabled(v34, type[0]))
      goto LABEL_139;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v36 = "%{public}s called with null out_context_length";
    goto LABEL_138;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        v34 = __nwlog_obj();
        v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v34 = __nwlog_obj();
      v35 = type[0];
      v44 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          v36 = "%{public}s called with null out_request_enc, no backtrace";
          goto LABEL_138;
        }
        goto LABEL_139;
      }
      if (!v44)
        goto LABEL_97;
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
    v34 = __nwlog_obj();
    v35 = type[0];
    if (!os_log_type_enabled(v34, type[0]))
      goto LABEL_139;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v36 = "%{public}s called with null out_request_enc";
    goto LABEL_138;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type[0];
      if (!os_log_type_enabled(v34, type[0]))
        goto LABEL_139;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v36 = "%{public}s called with null out_request_enc_length";
      goto LABEL_138;
    }
    if (!(_BYTE)v62)
    {
      v34 = __nwlog_obj();
      v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        v36 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_138;
      }
      goto LABEL_139;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type[0];
    v45 = os_log_type_enabled(v34, type[0]);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        v36 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_138;
      }
      goto LABEL_139;
    }
    if (!v45)
      goto LABEL_97;
    *(_DWORD *)buf = 136446466;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v66 = 2082;
    v67 = (uint64_t)backtrace_string;
    v39 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
LABEL_96:
    _os_log_impl(&dword_182FBE000, v34, v35, v39, buf, 0x16u);
    goto LABEL_97;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (!__nwlog_fault(v33, type, &v62))
      goto LABEL_139;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        v36 = "%{public}s called with null out_header_length";
        goto LABEL_138;
      }
LABEL_139:
      if (!v33)
        return 0;
      v30 = (char *)v33;
      goto LABEL_26;
    }
    if (!(_BYTE)v62)
    {
      v34 = __nwlog_obj();
      v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        v36 = "%{public}s called with null out_header_length, backtrace limit exceeded";
        goto LABEL_138;
      }
      goto LABEL_139;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type[0];
    v46 = os_log_type_enabled(v34, type[0]);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        v36 = "%{public}s called with null out_header_length, no backtrace";
        goto LABEL_138;
      }
      goto LABEL_139;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 2082;
      v67 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null out_header_length, dumping backtrace:%{public}s";
      goto LABEL_96;
    }
LABEL_97:
    free(backtrace_string);
    goto LABEL_139;
  }
  *(_QWORD *)type = 0;
  v14 = nw_http_oblivious_config_select(a2, a3, type);
  if (!v14 || *(_QWORD *)type <= 0x28uLL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v18 = "%{public}s Config parsing failed";
      goto LABEL_16;
    }
    return 0;
  }
  v15 = v14;
  v16 = strlen(a1);
  if (v16 >= 0x101)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v18 = "%{public}s Media type exceeds max length";
LABEL_16:
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
      return 0;
    }
    return 0;
  }
  v19 = v16;
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v20 = cchpke_params_sizeof_kem_enc();
  v61 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  if (!v61)
  {
    v47 = __nwlog_obj();
    os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v65 = "strict_calloc";
    v66 = 2048;
    v67 = 1;
    v68 = 2048;
    v69 = 96;
    v48 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v48);
    if (result)
      goto LABEL_145;
    free(v48);
  }
  v21 = v20 + 7;
  if (v20 == -7)
  {
    v49 = __nwlog_obj();
    os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v65 = "strict_calloc";
    v50 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v50);
    if (result)
      goto LABEL_145;
    free(v50);
    v21 = v20 + 7;
  }
  v59 = a7;
  v60 = a8;
  v22 = (char *)malloc_type_calloc(1uLL, v21, 0xEAFB8F1AuLL);
  if (!v22)
  {
    v51 = __nwlog_obj();
    os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v65 = "strict_calloc";
    v66 = 2048;
    v67 = 1;
    v68 = 2048;
    v69 = v20 + 7;
    v52 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v52);
    if (result)
      goto LABEL_145;
    free(v52);
  }
  *v22 = *(_BYTE *)v15;
  *(_WORD *)(v22 + 1) = *(unsigned __int16 *)((char *)v15 + 1);
  *(_DWORD *)(v22 + 3) = 16777472;
  v62 = 0;
  ccrng();
  v23 = (char *)malloc_type_calloc(1uLL, v19 + 24, 0xEAFB8F1AuLL);
  if (!v23)
  {
    v53 = __nwlog_obj();
    os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v65 = "strict_calloc";
    v66 = 2048;
    v67 = 1;
    v68 = 2048;
    v69 = v19 + 24;
    v58 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v58);
    if (result)
      goto LABEL_145;
    free(v58);
  }
  v24 = v19 + 17;
  snprintf(v23, v24, "%s chunked request", a1);
  v25 = &v23[v24];
  v26 = *(_DWORD *)(v22 + 3);
  *(_DWORD *)v25 = *(_DWORD *)v22;
  *(_DWORD *)(v25 + 3) = v26;
  v27 = v20;
  v28 = cchpke_initiator_setup();
  free(v23);
  if (v28)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      v66 = 1024;
      LODWORD(v67) = v28;
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s Setup error: %d", buf, 0x12u);
    }
    free(v22);
    if (!v61)
      return 0;
    v30 = v61;
LABEL_26:
    free(v30);
    return 0;
  }
  *a4 = v61;
  *a5 = 96;
  if (!v20)
  {
    v54 = __nwlog_obj();
    os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v65 = "strict_calloc";
    v55 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v55);
    if (result)
      goto LABEL_145;
    free(v55);
    v27 = v20;
  }
  v32 = malloc_type_calloc(1uLL, v27, 0xEAFB8F1AuLL);
  if (v32)
  {
LABEL_31:
    *a6 = v32;
    memcpy(v32, v22 + 7, v27);
    *v59 = v27;
    *v60 = v20 + 7;
    return (BOOL)v22;
  }
  v56 = __nwlog_obj();
  os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v65 = "strict_calloc";
  v66 = 2048;
  v67 = 1;
  v68 = 2048;
  v69 = v27;
  v57 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v57);
  if (!result)
  {
    free(v57);
    v27 = v20;
    goto LABEL_31;
  }
LABEL_145:
  __break(1u);
  return result;
}

BOOL nw_http_encrypt_chunked_oblivious_request_chunk(const void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t *a8)
{
  size_t v11;
  void *v12;
  int v13;
  int v14;
  NSObject *v15;
  _BOOL8 result;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  size_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (!v26)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v38 = 2082;
      v39 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_108;
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v20 = "%{public}s called with null message_buffer";
LABEL_107:
    _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
    goto LABEL_108;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v28 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (!v28)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v38 = 2082;
      v39 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_108;
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v20 = "%{public}s called with null message_length";
    goto LABEL_107;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v29 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (!v29)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v38 = 2082;
      v39 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_108;
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v20 = "%{public}s called with null request_context";
    goto LABEL_107;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v30 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (!v30)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v38 = 2082;
      v39 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_108;
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v20 = "%{public}s called with null request_context_length";
    goto LABEL_107;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v31 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          v20 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (!v31)
        goto LABEL_78;
      *(_DWORD *)buf = 136446466;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v38 = 2082;
      v39 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
    v18 = __nwlog_obj();
    v19 = type;
    if (!os_log_type_enabled(v18, type))
      goto LABEL_108;
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v20 = "%{public}s called with null request_enc";
    goto LABEL_107;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_108;
      *(_DWORD *)buf = 136446210;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v20 = "%{public}s called with null request_enc_length";
      goto LABEL_107;
    }
    if (!v34)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        v20 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
        goto LABEL_107;
      }
      goto LABEL_108;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v32 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        v20 = "%{public}s called with null request_enc_length, no backtrace";
        goto LABEL_107;
      }
      goto LABEL_108;
    }
    if (!v32)
      goto LABEL_78;
    *(_DWORD *)buf = 136446466;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v38 = 2082;
    v39 = (uint64_t)backtrace_string;
    v27 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
LABEL_77:
    _os_log_impl(&dword_182FBE000, v18, v19, v27, buf, 0x16u);
    goto LABEL_78;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v17, &type, &v34))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        v20 = "%{public}s called with null out_encrypted_length";
        goto LABEL_107;
      }
LABEL_108:
      if (v17)
        free(v17);
      return 0;
    }
    if (!v34)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        v20 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
        goto LABEL_107;
      }
      goto LABEL_108;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v33 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        v20 = "%{public}s called with null out_encrypted_length, no backtrace";
        goto LABEL_107;
      }
      goto LABEL_108;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      v38 = 2082;
      v39 = (uint64_t)backtrace_string;
      v27 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_77;
    }
LABEL_78:
    free(backtrace_string);
    goto LABEL_108;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v11 = cchpke_params_sizeof_aead_tag() + a2;
  if (!v11)
  {
    v21 = __nwlog_obj();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v37 = "strict_calloc";
    v22 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v22);
    if (result)
      goto LABEL_111;
    free(v22);
  }
  v12 = malloc_type_calloc(1uLL, v11, 0xEAFB8F1AuLL);
  if (v12)
    goto LABEL_10;
  v23 = __nwlog_obj();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v37 = "strict_calloc";
  v38 = 2048;
  v39 = 1;
  v40 = 2048;
  v41 = v11;
  v24 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v24);
  if (!result)
  {
    free(v24);
LABEL_10:
    memcpy(v12, a1, a2);
    v13 = cchpke_initiator_encrypt();
    if (v13)
    {
      v14 = v13;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        v38 = 1024;
        LODWORD(v39) = v14;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s Encrypt: %d", buf, 0x12u);
      }
      if (v12)
      {
        free(v12);
        return 0;
      }
    }
    else
    {
      *a8 = v11;
    }
    return (BOOL)v12;
  }
LABEL_111:
  __break(1u);
  return result;
}

BOOL nw_http_decrypt_oblivious_request(uint64_t a1, unint64_t a2, char *__s, uint64_t a4, uint64_t a5, char **a6, _QWORD *a7, _QWORD *a8, size_t *a9, size_t *a10)
{
  size_t v15;
  NSObject *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  char *v22;
  int v23;
  char *v24;
  size_t *v25;
  char *v26;
  size_t v27;
  int v28;
  NSObject *v29;
  void *v30;
  size_t v31;
  void *v32;
  int v33;
  NSObject *v34;
  char *v35;
  _BOOL8 result;
  size_t v37;
  void *v38;
  size_t *v39;
  const char *v40;
  NSObject *v41;
  os_log_type_t v42;
  const char *v43;
  char *backtrace_string;
  _BOOL4 v45;
  const char *v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  NSObject *v57;
  void *v58;
  NSObject *v59;
  void *v60;
  _BOOL4 v61;
  NSObject *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  NSObject *v66;
  void *v67;
  NSObject *v68;
  void *v69;
  NSObject *v70;
  void *v71;
  NSObject *v72;
  void *v73;
  size_t v74;
  size_t size;
  size_t v77;
  unint64_t v78;
  char v79;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null request_buffer, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v45 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v45)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null request_buffer, no backtrace";
        goto LABEL_205;
      }
      if (!v45)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null request_buffer, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null request_buffer";
LABEL_205:
    _os_log_impl(&dword_182FBE000, v41, v42, v43, buf, 0xCu);
    goto LABEL_206;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null request_length, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v47 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v47)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null request_length, no backtrace";
        goto LABEL_205;
      }
      if (!v47)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null request_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null request_length";
    goto LABEL_205;
  }
  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null media_type, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v48 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v48)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null media_type, no backtrace";
        goto LABEL_205;
      }
      if (!v48)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null media_type";
    goto LABEL_205;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null private_key, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v49 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v49)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null private_key, no backtrace";
        goto LABEL_205;
      }
      if (!v49)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null private_key, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null private_key";
    goto LABEL_205;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null private_key_length, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v50 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v50)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null private_key_length, no backtrace";
        goto LABEL_205;
      }
      if (!v50)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null private_key_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null private_key_length";
    goto LABEL_205;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_context, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v51 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v51)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_context, no backtrace";
        goto LABEL_205;
      }
      if (!v51)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null out_context";
    goto LABEL_205;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_context_length, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v52 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v52)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_context_length, no backtrace";
        goto LABEL_205;
      }
      if (!v52)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null out_context_length";
    goto LABEL_205;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v53 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v53)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_request_enc, no backtrace";
        goto LABEL_205;
      }
      if (!v53)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null out_request_enc";
    goto LABEL_205;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v54 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v54)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_205;
      }
      if (!v54)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null out_request_enc_length";
    goto LABEL_205;
  }
  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        v41 = __nwlog_obj();
        v42 = type;
        if (!os_log_type_enabled(v41, type))
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
        goto LABEL_205;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v41 = __nwlog_obj();
      v42 = type;
      v55 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v55)
          goto LABEL_206;
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null out_decrypted_length, no backtrace";
        goto LABEL_205;
      }
      if (!v55)
        goto LABEL_132;
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }
    v41 = __nwlog_obj();
    v42 = type;
    if (!os_log_type_enabled(v41, type))
      goto LABEL_206;
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v43 = "%{public}s called with null out_decrypted_length";
    goto LABEL_205;
  }
  if (a2 <= 7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v41 = __nwlog_obj();
      v42 = type;
      if (!os_log_type_enabled(v41, type))
        goto LABEL_206;
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http_decrypt_oblivious_request";
      v43 = "%{public}s called with null (request_length > hdr_length)";
      goto LABEL_205;
    }
    if (!v79)
    {
      v41 = __nwlog_obj();
      v42 = type;
      if (!os_log_type_enabled(v41, type))
        goto LABEL_206;
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http_decrypt_oblivious_request";
      v43 = "%{public}s called with null (request_length > hdr_length), backtrace limit exceeded";
      goto LABEL_205;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v41 = __nwlog_obj();
    v42 = type;
    v56 = os_log_type_enabled(v41, type);
    if (!backtrace_string)
    {
      if (!v56)
        goto LABEL_206;
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http_decrypt_oblivious_request";
      v43 = "%{public}s called with null (request_length > hdr_length), no backtrace";
      goto LABEL_205;
    }
    if (!v56)
      goto LABEL_132;
    *(_DWORD *)buf = 136446466;
    v82 = "nw_http_decrypt_oblivious_request";
    v83 = 2082;
    v84 = (uint64_t)backtrace_string;
    v46 = "%{public}s called with null (request_length > hdr_length), dumping backtrace:%{public}s";
LABEL_131:
    _os_log_impl(&dword_182FBE000, v41, v42, v46, buf, 0x16u);
    goto LABEL_132;
  }
  if (*(_WORD *)(a1 + 1) != 0x2000 || *(_WORD *)(a1 + 3) != 256 || *(_WORD *)(a1 + 5) != 256)
    return 0;
  v78 = a2 - 7;
  v15 = strlen(__s);
  if (v15 >= 0x101)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v82 = "nw_http_decrypt_oblivious_request";
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Media type exceeds max length", buf, 0xCu);
    }
    return 0;
  }
  v17 = v15;
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v18 = cchpke_params_sizeof_aead_tag();
  v19 = cchpke_params_sizeof_kem_enc();
  v77 = v19;
  size = v18;
  if (v19 + v18 + 7 >= a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v82 = "nw_http_decrypt_oblivious_request";
    v40 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (!__nwlog_fault(v40, &type, &v79))
      goto LABEL_206;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v41 = __nwlog_obj();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length))";
        goto LABEL_205;
      }
LABEL_206:
      if (!v40)
        return 0;
      v35 = (char *)v40;
      goto LABEL_37;
    }
    if (!v79)
    {
      v41 = __nwlog_obj();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length)), backtrace limit exceeded";
        goto LABEL_205;
      }
      goto LABEL_206;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v41 = __nwlog_obj();
    v42 = type;
    v61 = os_log_type_enabled(v41, type);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v82 = "nw_http_decrypt_oblivious_request";
        v43 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length)), no backtrace";
        goto LABEL_205;
      }
      goto LABEL_206;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 2082;
      v84 = (uint64_t)backtrace_string;
      v46 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length)), dumping backtrace:%{public}s";
      goto LABEL_131;
    }
LABEL_132:
    free(backtrace_string);
    goto LABEL_206;
  }
  v74 = v19 + v18;
  v20 = (char *)malloc_type_calloc(1uLL, v17 + 16, 0xEAFB8F1AuLL);
  if (!v20)
  {
    v57 = __nwlog_obj();
    os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v82 = "strict_calloc";
    v83 = 2048;
    v84 = 1;
    v85 = 2048;
    v86 = v17 + 16;
    v58 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v58);
    if (result)
      goto LABEL_208;
    free(v58);
  }
  v21 = v17 + 9;
  snprintf(v20, v21, "%s request", __s);
  v22 = &v20[v21];
  v23 = *(_DWORD *)(a1 + 3);
  *(_DWORD *)v22 = *(_DWORD *)a1;
  *(_DWORD *)(v22 + 3) = v23;
  v24 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
  v25 = a10;
  if (!v24)
  {
    v59 = __nwlog_obj();
    os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v82 = "strict_calloc";
    v83 = 2048;
    v84 = 1;
    v85 = 2048;
    v86 = 96;
    v60 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v60);
    if (result)
      goto LABEL_208;
    free(v60);
    v25 = a10;
  }
  v26 = (char *)(a1 + 7);
  v27 = v77;
  v28 = cchpke_responder_setup();
  free(v20);
  if (v28)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 1024;
      LODWORD(v84) = v28;
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s Setup error: %d", buf, 0x12u);
    }
LABEL_35:
    if (!v24)
      return 0;
    v35 = v24;
LABEL_37:
    free(v35);
    return 0;
  }
  if (!v18)
  {
    v62 = __nwlog_obj();
    os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v82 = "strict_calloc";
    v63 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v63);
    if (result)
      goto LABEL_208;
    free(v63);
    v27 = v77;
    v18 = 0;
    v25 = a10;
  }
  v30 = malloc_type_calloc(1uLL, v18, 0xEAFB8F1AuLL);
  if (!v30)
  {
    v64 = __nwlog_obj();
    os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v82 = "strict_calloc";
    v83 = 2048;
    v84 = 1;
    v85 = 2048;
    v86 = v18;
    v65 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v65);
    if (result)
      goto LABEL_208;
    free(v65);
    v27 = v77;
    v18 = size;
    v25 = a10;
  }
  v31 = v78 - v74;
  memcpy(v30, &v26[v27 + v78 - v74], v18);
  if (v78 == v74)
  {
    v66 = __nwlog_obj();
    os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v82 = "strict_calloc";
    v67 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v67);
    if (result)
      goto LABEL_208;
    free(v67);
    v25 = a10;
  }
  v32 = malloc_type_calloc(1uLL, v31, 0xEAFB8F1AuLL);
  if (!v32)
  {
    v68 = __nwlog_obj();
    os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v82 = "strict_calloc";
    v83 = 2048;
    v84 = 1;
    v85 = 2048;
    v86 = v78 - v74;
    v69 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v69);
    if (result)
      goto LABEL_208;
    free(v69);
    v25 = a10;
  }
  v33 = cchpke_responder_decrypt();
  if (v30)
    free(v30);
  if (v33)
  {
    v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v82 = "nw_http_decrypt_oblivious_request";
      v83 = 1024;
      LODWORD(v84) = v33;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", buf, 0x12u);
    }
    if (v32)
      free(v32);
    goto LABEL_35;
  }
  *a6 = v24;
  *a7 = 96;
  v37 = v77;
  if (!v77)
  {
    v70 = __nwlog_obj();
    os_log_type_enabled(v70, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v82 = "strict_calloc";
    v71 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v71);
    if (result)
      goto LABEL_208;
    free(v71);
    v37 = 0;
    v25 = a10;
  }
  v38 = malloc_type_calloc(1uLL, v37, 0xEAFB8F1AuLL);
  v39 = a9;
  if (v38)
  {
LABEL_42:
    *a8 = v38;
    memcpy(v38, v26, v37);
    *v39 = v37;
    *v25 = v31;
    return (BOOL)v32;
  }
  v72 = __nwlog_obj();
  os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v82 = "strict_calloc";
  v83 = 2048;
  v84 = 1;
  v85 = 2048;
  v86 = v37;
  v73 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v73);
  if (!result)
  {
    free(v73);
    v37 = v77;
    v39 = a9;
    v25 = a10;
    goto LABEL_42;
  }
LABEL_208:
  __break(1u);
  return result;
}

uint64_t nw_http_decrypt_get_chunked_oblivious_request_header_length()
{
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  return cchpke_params_sizeof_kem_enc() + 7;
}

BOOL nw_http_decrypt_chunked_oblivious_request_header(uint64_t a1, unint64_t a2, char *__s, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, size_t *a9)
{
  size_t v15;
  NSObject *v16;
  _BOOL8 result;
  size_t v18;
  char *v19;
  size_t v20;
  char *v21;
  int v22;
  void *v23;
  const void *v24;
  size_t v25;
  int v26;
  NSObject *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  NSObject *v45;
  NSObject *v46;
  void *v47;
  _BOOL4 v48;
  NSObject *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null header_buffer, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v34 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v34)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null header_buffer, no backtrace";
        goto LABEL_172;
      }
      if (!v34)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null header_buffer, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null header_buffer";
LABEL_172:
    _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
    goto LABEL_173;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null header_length, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v36 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v36)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null header_length, no backtrace";
        goto LABEL_172;
      }
      if (!v36)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null header_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null header_length";
    goto LABEL_172;
  }
  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null media_type, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v37 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v37)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null media_type, no backtrace";
        goto LABEL_172;
      }
      if (!v37)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null media_type";
    goto LABEL_172;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null private_key, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v38)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null private_key, no backtrace";
        goto LABEL_172;
      }
      if (!v38)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null private_key, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null private_key";
    goto LABEL_172;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null private_key_length, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v39 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v39)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null private_key_length, no backtrace";
        goto LABEL_172;
      }
      if (!v39)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null private_key_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null private_key_length";
    goto LABEL_172;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_context, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v40 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v40)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_context, no backtrace";
        goto LABEL_172;
      }
      if (!v40)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null out_context";
    goto LABEL_172;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_context_length, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v41)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_context_length, no backtrace";
        goto LABEL_172;
      }
      if (!v41)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null out_context_length";
    goto LABEL_172;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v42 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v42)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_request_enc, no backtrace";
        goto LABEL_172;
      }
      if (!v42)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null out_request_enc";
    goto LABEL_172;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_172;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v43 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v43)
          goto LABEL_173;
        *(_DWORD *)buf = 136446210;
        v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        v32 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_172;
      }
      if (!v43)
        goto LABEL_111;
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_173;
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v32 = "%{public}s called with null out_request_enc_length";
    goto LABEL_172;
  }
  if (a2 <= 7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
      goto LABEL_173;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_173;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v32 = "%{public}s called with null (header_length > hdr_length)";
      goto LABEL_172;
    }
    if (!v55)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_173;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v32 = "%{public}s called with null (header_length > hdr_length), backtrace limit exceeded";
      goto LABEL_172;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v44 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v44)
        goto LABEL_173;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v32 = "%{public}s called with null (header_length > hdr_length), no backtrace";
      goto LABEL_172;
    }
    if (!v44)
      goto LABEL_111;
    *(_DWORD *)buf = 136446466;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v59 = 2082;
    v60 = (uint64_t)backtrace_string;
    v35 = "%{public}s called with null (header_length > hdr_length), dumping backtrace:%{public}s";
LABEL_110:
    _os_log_impl(&dword_182FBE000, v30, v31, v35, buf, 0x16u);
    goto LABEL_111;
  }
  if (*(_WORD *)(a1 + 1) != 0x2000 || *(_WORD *)(a1 + 3) != 256 || *(_WORD *)(a1 + 5) != 256)
    return 0;
  v15 = strlen(__s);
  if (v15 < 0x101)
  {
    v18 = v15;
    cchpke_params_x25519_AESGCM128_HKDF_SHA256();
    v54 = cchpke_params_sizeof_kem_enc();
    if (v54 + 7 == a2)
    {
      v19 = (char *)malloc_type_calloc(1uLL, v18 + 24, 0xEAFB8F1AuLL);
      if (!v19)
      {
        v45 = __nwlog_obj();
        os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        v58 = "strict_calloc";
        v59 = 2048;
        v60 = 1;
        v61 = 2048;
        v62 = v18 + 24;
        v53 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v53);
        if (result)
          goto LABEL_175;
        free(v53);
      }
      v20 = v18 + 17;
      snprintf(v19, v20, "%s chunked request", __s);
      v21 = &v19[v20];
      v22 = *(_DWORD *)(a1 + 3);
      *(_DWORD *)v21 = *(_DWORD *)a1;
      *(_DWORD *)(v21 + 3) = v22;
      v23 = malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL);
      if (!v23)
      {
        v46 = __nwlog_obj();
        os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        v58 = "strict_calloc";
        v59 = 2048;
        v60 = 1;
        v61 = 2048;
        v62 = 96;
        v47 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v47);
        if (result)
          goto LABEL_175;
        free(v47);
      }
      v24 = (const void *)(a1 + 7);
      v25 = v54;
      v26 = cchpke_responder_setup();
      free(v19);
      if (v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v58 = "nw_http_decrypt_chunked_oblivious_request_header";
          v59 = 1024;
          LODWORD(v60) = v26;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s Setup error: %d", buf, 0x12u);
        }
        if (v23)
          free(v23);
        return 0;
      }
      *a6 = v23;
      *a7 = 96;
      if (!v54)
      {
        v49 = __nwlog_obj();
        os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v58 = "strict_calloc";
        v50 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v50);
        if (result)
          goto LABEL_175;
        free(v50);
        v25 = v54;
      }
      v28 = malloc_type_calloc(1uLL, v25, 0xEAFB8F1AuLL);
      if (v28)
      {
LABEL_29:
        *a8 = v28;
        memcpy(v28, v24, v25);
        *a9 = v25;
        return 1;
      }
      v51 = __nwlog_obj();
      os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v58 = "strict_calloc";
      v59 = 2048;
      v60 = 1;
      v61 = 2048;
      v62 = v25;
      v52 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v52);
      if (!result)
      {
        free(v52);
        v25 = v54;
        goto LABEL_29;
      }
LABEL_175:
      __break(1u);
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v29, &type, &v55))
    {
LABEL_173:
      if (v29)
        free(v29);
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_173;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v32 = "%{public}s called with null (header_length == (hdr_length + enc_length))";
      goto LABEL_172;
    }
    if (!v55)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_173;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v32 = "%{public}s called with null (header_length == (hdr_length + enc_length)), backtrace limit exceeded";
      goto LABEL_172;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v48 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v48)
        goto LABEL_173;
      *(_DWORD *)buf = 136446210;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v32 = "%{public}s called with null (header_length == (hdr_length + enc_length)), no backtrace";
      goto LABEL_172;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      v59 = 2082;
      v60 = (uint64_t)backtrace_string;
      v35 = "%{public}s called with null (header_length == (hdr_length + enc_length)), dumping backtrace:%{public}s";
      goto LABEL_110;
    }
LABEL_111:
    free(backtrace_string);
    goto LABEL_173;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  *(_DWORD *)buf = 136446210;
  v58 = "nw_http_decrypt_chunked_oblivious_request_header";
  _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Media type exceeds max length", buf, 0xCu);
  return 0;
}

BOOL nw_http_decrypt_chunked_oblivious_request_chunk(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t *a8)
{
  unint64_t v11;
  size_t v12;
  size_t v13;
  void *v14;
  void *v15;
  int v16;
  NSObject *v17;
  _BOOL8 result;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  char *backtrace_string;
  _BOOL4 v32;
  const char *v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  size_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_buffer, backtrace limit exceeded";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v32 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_buffer, no backtrace";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      if (!v32)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null request_buffer, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_129;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v22 = "%{public}s called with null request_buffer";
LABEL_128:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_129;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_length, backtrace limit exceeded";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v34 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_length, no backtrace";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      if (!v34)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null request_length, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_129;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v22 = "%{public}s called with null request_length";
    goto LABEL_128;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v35 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      if (!v35)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_129;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v22 = "%{public}s called with null request_context";
    goto LABEL_128;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v36 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      if (!v36)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_129;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v22 = "%{public}s called with null request_context_length";
    goto LABEL_128;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v37 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      if (!v37)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_129;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v22 = "%{public}s called with null request_enc";
    goto LABEL_128;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v38 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          v22 = "%{public}s called with null request_enc_length, no backtrace";
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      if (!v38)
        goto LABEL_95;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_94;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_129;
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v22 = "%{public}s called with null request_enc_length";
    goto LABEL_128;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_129;
      *(_DWORD *)buf = 136446210;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v22 = "%{public}s called with null out_decrypted_length";
      goto LABEL_128;
    }
    if (!v41)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        v22 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
        goto LABEL_128;
      }
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v39 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        v22 = "%{public}s called with null out_decrypted_length, no backtrace";
        goto LABEL_128;
      }
      goto LABEL_129;
    }
    if (!v39)
      goto LABEL_95;
    *(_DWORD *)buf = 136446466;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v45 = 2082;
    v46 = (uint64_t)backtrace_string;
    v33 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_182FBE000, v20, v21, v33, buf, 0x16u);
    goto LABEL_95;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v11 = cchpke_params_sizeof_aead_tag();
  v12 = a2 - v11;
  if (a2 <= v11)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v19, &type, &v41))
      goto LABEL_129;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        v22 = "%{public}s called with null (request_length > tag_length)";
        goto LABEL_128;
      }
LABEL_129:
      if (v19)
        free(v19);
      return 0;
    }
    if (!v41)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        v22 = "%{public}s called with null (request_length > tag_length), backtrace limit exceeded";
        goto LABEL_128;
      }
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v40 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        v22 = "%{public}s called with null (request_length > tag_length), no backtrace";
        goto LABEL_128;
      }
      goto LABEL_129;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      v45 = 2082;
      v46 = (uint64_t)backtrace_string;
      v33 = "%{public}s called with null (request_length > tag_length), dumping backtrace:%{public}s";
      goto LABEL_94;
    }
LABEL_95:
    free(backtrace_string);
    goto LABEL_129;
  }
  v13 = v11;
  if (!v11)
  {
    v23 = __nwlog_obj();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v44 = "strict_calloc";
    v24 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v24);
    if (result)
      goto LABEL_132;
    free(v24);
  }
  v14 = malloc_type_calloc(1uLL, v13, 0xEAFB8F1AuLL);
  if (!v14)
  {
    v25 = __nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v44 = "strict_calloc";
    v45 = 2048;
    v46 = 1;
    v47 = 2048;
    v48 = v13;
    v26 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v26);
    if (result)
      goto LABEL_132;
    free(v26);
  }
  memcpy(v14, (const void *)(a1 + v12), v13);
  if (a2 == v13)
  {
    v27 = __nwlog_obj();
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v44 = "strict_calloc";
    v28 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v28);
    if (result)
      goto LABEL_132;
    free(v28);
  }
  v15 = malloc_type_calloc(1uLL, v12, 0xEAFB8F1AuLL);
  if (v15)
  {
LABEL_13:
    v16 = cchpke_responder_decrypt();
    if (v14)
      free(v14);
    if (v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        v45 = 1024;
        LODWORD(v46) = v16;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", buf, 0x12u);
      }
      if (v15)
      {
        free(v15);
        return 0;
      }
    }
    else
    {
      *a8 = v12;
    }
    return (BOOL)v15;
  }
  v29 = __nwlog_obj();
  os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v44 = "strict_calloc";
  v45 = 2048;
  v46 = 1;
  v47 = 2048;
  v48 = v12;
  v30 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v30);
  if (!result)
  {
    free(v30);
    goto LABEL_13;
  }
LABEL_132:
  __break(1u);
  return result;
}

BOOL nw_http_encrypt_oblivious_response(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, _QWORD *a8)
{
  size_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  int v15;
  int v16;
  NSObject *v17;
  char *v18;
  void *v19;
  char *v20;
  size_t v21;
  void *v22;
  int v23;
  NSObject *v24;
  void *v25;
  int v26;
  int v27;
  NSObject *v28;
  void *v29;
  int v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  _BOOL8 result;
  const char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  char *backtrace_string;
  _BOOL4 v43;
  const char *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  NSObject *v58;
  NSObject *v59;
  void *v60;
  NSObject *v61;
  void *v62;
  NSObject *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v74;
  char v76;
  char __str[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int buf;
  const char *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  size_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf != 17)
    {
      if (!v76)
      {
        v36 = __nwlog_obj();
        v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = buf;
      v43 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      if (!v43)
        goto LABEL_136;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    v36 = __nwlog_obj();
    v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf))
      goto LABEL_186;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v38 = "%{public}s called with null message_buffer";
LABEL_185:
    _os_log_impl(&dword_182FBE000, v36, v37, v38, (uint8_t *)__str, 0xCu);
    goto LABEL_186;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf != 17)
    {
      if (!v76)
      {
        v36 = __nwlog_obj();
        v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = buf;
      v45 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      if (!v45)
        goto LABEL_136;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    v36 = __nwlog_obj();
    v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf))
      goto LABEL_186;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v38 = "%{public}s called with null message_length";
    goto LABEL_185;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf != 17)
    {
      if (!v76)
      {
        v36 = __nwlog_obj();
        v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = buf;
      v46 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      if (!v46)
        goto LABEL_136;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    v36 = __nwlog_obj();
    v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf))
      goto LABEL_186;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v38 = "%{public}s called with null media_type";
    goto LABEL_185;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf != 17)
    {
      if (!v76)
      {
        v36 = __nwlog_obj();
        v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = buf;
      v47 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      if (!v47)
        goto LABEL_136;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    v36 = __nwlog_obj();
    v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf))
      goto LABEL_186;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v38 = "%{public}s called with null request_context";
    goto LABEL_185;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf != 17)
    {
      if (!v76)
      {
        v36 = __nwlog_obj();
        v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = buf;
      v48 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      if (!v48)
        goto LABEL_136;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    v36 = __nwlog_obj();
    v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf))
      goto LABEL_186;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v38 = "%{public}s called with null request_context_length";
    goto LABEL_185;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf != 17)
    {
      if (!v76)
      {
        v36 = __nwlog_obj();
        v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = buf;
      v49 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
          v38 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_185;
        }
        goto LABEL_186;
      }
      if (!v49)
        goto LABEL_136;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    v36 = __nwlog_obj();
    v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf))
      goto LABEL_186;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v38 = "%{public}s called with null request_enc";
    goto LABEL_185;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf == 17)
    {
      v36 = __nwlog_obj();
      v37 = buf;
      if (!os_log_type_enabled(v36, (os_log_type_t)buf))
        goto LABEL_186;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      v38 = "%{public}s called with null request_enc_length";
      goto LABEL_185;
    }
    if (!v76)
    {
      v36 = __nwlog_obj();
      v37 = buf;
      if (os_log_type_enabled(v36, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
        v38 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
        goto LABEL_185;
      }
      goto LABEL_186;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v36 = __nwlog_obj();
    v37 = buf;
    v50 = os_log_type_enabled(v36, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
        v38 = "%{public}s called with null request_enc_length, no backtrace";
        goto LABEL_185;
      }
      goto LABEL_186;
    }
    if (!v50)
      goto LABEL_136;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v44 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
LABEL_135:
    _os_log_impl(&dword_182FBE000, v36, v37, v44, (uint8_t *)__str, 0x16u);
    goto LABEL_136;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
    v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v76 = 0;
    if (!__nwlog_fault(v35, &buf, &v76))
      goto LABEL_186;
    if (buf == 17)
    {
      v36 = __nwlog_obj();
      v37 = buf;
      if (os_log_type_enabled(v36, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
        v38 = "%{public}s called with null out_encrypted_length";
        goto LABEL_185;
      }
LABEL_186:
      if (!v35)
        return 0;
      v18 = (char *)v35;
LABEL_63:
      free(v18);
      return 0;
    }
    if (!v76)
    {
      v36 = __nwlog_obj();
      v37 = buf;
      if (os_log_type_enabled(v36, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
        v38 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
        goto LABEL_185;
      }
      goto LABEL_186;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v36 = __nwlog_obj();
    v37 = buf;
    v51 = os_log_type_enabled(v36, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v51)
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
        v38 = "%{public}s called with null out_encrypted_length, no backtrace";
        goto LABEL_185;
      }
      goto LABEL_186;
    }
    if (v51)
    {
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v44 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
LABEL_136:
    free(backtrace_string);
    goto LABEL_186;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v11 = cchpke_params_sizeof_aead_key();
  v12 = cchpke_params_sizeof_aead_nonce();
  v74 = cchpke_params_sizeof_aead_tag();
  if (v11 <= v12)
    v13 = v12;
  else
    v13 = v11;
  if (!v13)
  {
    v39 = __nwlog_obj();
    os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "strict_calloc";
    v40 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v40);
    if (result)
      goto LABEL_192;
    free(v40);
  }
  v14 = (char *)malloc_type_calloc(1uLL, v13, 0xEAFB8F1AuLL);
  if (!v14)
  {
    v41 = __nwlog_obj();
    os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(_QWORD *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(_QWORD *)&__str[14] = 1;
    *(_WORD *)&__str[22] = 2048;
    *(_QWORD *)&__str[24] = v13;
    v72 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v72);
    if (result)
      goto LABEL_192;
    free(v72);
  }
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x100uLL, "%s response", a3);
  strlen(__str);
  v15 = cchpke_responder_export();
  if (v15)
  {
    v16 = v15;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v93 = "nw_http_encrypt_oblivious_response";
      v94 = 1024;
      LODWORD(v95) = v16;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s Export error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!v14)
      return 0;
    v18 = v14;
    goto LABEL_63;
  }
  if (!(v13 + a2 + v74))
  {
    v52 = __nwlog_obj();
    os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v93 = "strict_calloc";
    v53 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v53);
    if (result)
      goto LABEL_192;
    free(v53);
  }
  v19 = malloc_type_calloc(1uLL, v13 + a2 + v74, 0xEAFB8F1AuLL);
  if (!v19)
  {
    v54 = __nwlog_obj();
    os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v93 = "strict_calloc";
    v94 = 2048;
    v95 = 1;
    v96 = 2048;
    v97 = v13 + a2 + v74;
    v55 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v55);
    if (result)
      goto LABEL_192;
    free(v55);
  }
  arc4random_buf(v19, v13);
  if (!(v13 + a7))
  {
    v56 = __nwlog_obj();
    os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v93 = "strict_calloc";
    v57 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v57);
    if (result)
      goto LABEL_192;
    free(v57);
  }
  v20 = (char *)malloc_type_calloc(1uLL, v13 + a7, 0xEAFB8F1AuLL);
  if (!v20)
  {
    v58 = __nwlog_obj();
    os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v93 = "strict_calloc";
    v94 = 2048;
    v95 = 1;
    v96 = 2048;
    v97 = v13 + a7;
    v71 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v71);
    if (result)
      goto LABEL_192;
    free(v71);
  }
  memcpy(v20, a6, a7);
  memcpy(&v20[a7], v19, v13);
  v21 = cchpke_params_sizeof_kdf_hash();
  if (!v21)
  {
    v59 = __nwlog_obj();
    os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v93 = "strict_calloc";
    v60 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v60);
    if (result)
      goto LABEL_192;
    free(v60);
  }
  v22 = malloc_type_calloc(1uLL, v21, 0xEAFB8F1AuLL);
  if (!v22)
  {
    v61 = __nwlog_obj();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v93 = "strict_calloc";
    v94 = 2048;
    v95 = 1;
    v96 = 2048;
    v97 = v21;
    v62 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v62);
    if (result)
      goto LABEL_192;
    free(v62);
  }
  ccsha256_di();
  v23 = cchkdf_extract();
  if (v20)
    free(v20);
  if (v14)
    free(v14);
  if (v23)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v24 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v93 = "nw_http_encrypt_oblivious_response";
      v94 = 1024;
      LODWORD(v95) = v23;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s Extract error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v22)
      free(v22);
LABEL_61:
    if (!v19)
      return (BOOL)v19;
    v18 = (char *)v19;
    goto LABEL_63;
  }
  if (!v11)
  {
    v63 = __nwlog_obj();
    os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v93 = "strict_calloc";
    v64 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v64);
    if (result)
      goto LABEL_192;
    free(v64);
  }
  v25 = malloc_type_calloc(1uLL, v11, 0xEAFB8F1AuLL);
  if (!v25)
  {
    v65 = __nwlog_obj();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v93 = "strict_calloc";
    v94 = 2048;
    v95 = 1;
    v96 = 2048;
    v97 = v11;
    v66 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v66);
    if (result)
      goto LABEL_192;
    free(v66);
  }
  v26 = cchkdf_expand();
  if (v26)
  {
    v27 = v26;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v93 = "nw_http_encrypt_oblivious_response";
      v94 = 1024;
      LODWORD(v95) = v27;
      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s Key expand error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v22)
      free(v22);
    if (v25)
      free(v25);
    goto LABEL_61;
  }
  if (!v12)
  {
    v67 = __nwlog_obj();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v93 = "strict_calloc";
    v68 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v68);
    if (result)
      goto LABEL_192;
    free(v68);
  }
  v29 = malloc_type_calloc(1uLL, v12, 0xEAFB8F1AuLL);
  if (v29)
    goto LABEL_45;
  v69 = __nwlog_obj();
  os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  v93 = "strict_calloc";
  v94 = 2048;
  v95 = 1;
  v96 = 2048;
  v97 = v12;
  v70 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v70);
  if (!result)
  {
    free(v70);
LABEL_45:
    v30 = cchkdf_expand();
    if (v22)
      free(v22);
    if (v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v31 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        buf = 136446466;
        v93 = "nw_http_encrypt_oblivious_response";
        v94 = 1024;
        LODWORD(v95) = v30;
        _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s Nonce expand error: %d", (uint8_t *)&buf, 0x12u);
      }
      if (v25)
        free(v25);
      if (v29)
        free(v29);
    }
    else
    {
      ccaes_gcm_encrypt_mode();
      v32 = ccgcm_one_shot();
      if (v25)
        free(v25);
      if (v29)
        free(v29);
      if (!v32)
      {
        *a8 = v13 + a2 + v74;
        return (BOOL)v19;
      }
      v33 = __nwlog_obj();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        buf = 136446466;
        v93 = "nw_http_encrypt_oblivious_response";
        v94 = 1024;
        LODWORD(v95) = v32;
        _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_ERROR, "%{public}s Encrypt error: %u", (uint8_t *)&buf, 0x12u);
      }
    }
    goto LABEL_61;
  }
LABEL_192:
  __break(1u);
  return result;
}

BOOL nw_http_generate_chunked_oblivious_response_nonce(size_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  void *v5;
  _BOOL8 result;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  size_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_http_generate_chunked_oblivious_response_nonce";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v7, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_http_generate_chunked_oblivious_response_nonce";
          v10 = "%{public}s called with null out_nonce_length";
LABEL_26:
          _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v8 = __nwlog_obj();
        v9 = type;
        v16 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http_generate_chunked_oblivious_response_nonce";
            v21 = 2082;
            v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null out_nonce_length, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_27;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_http_generate_chunked_oblivious_response_nonce";
          v10 = "%{public}s called with null out_nonce_length, no backtrace";
          goto LABEL_26;
        }
      }
      else
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_http_generate_chunked_oblivious_response_nonce";
          v10 = "%{public}s called with null out_nonce_length, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
    }
LABEL_27:
    if (v7)
      free(v7);
    return 0;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v2 = cchpke_params_sizeof_aead_key();
  v3 = cchpke_params_sizeof_aead_nonce();
  if (v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  if (!v4)
  {
    v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v20 = "strict_calloc";
    v12 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v12);
    if (result)
      goto LABEL_30;
    free(v12);
  }
  v5 = malloc_type_calloc(1uLL, v4, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_7:
    arc4random_buf(v5, v4);
    *a1 = v4;
    return (BOOL)v5;
  }
  v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v20 = "strict_calloc";
  v21 = 2048;
  v22 = 1;
  v23 = 2048;
  v24 = v4;
  v14 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_7;
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t nw_http_get_chunked_oblivious_response_nonce_length()
{
  unint64_t v0;
  unint64_t result;

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v0 = cchpke_params_sizeof_aead_key();
  result = cchpke_params_sizeof_aead_nonce();
  if (v0 > result)
    return v0;
  return result;
}

BOOL nw_http_encrypt_chunked_oblivious_response_chunk(uint64_t a1, uint64_t a2, const char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, size_t a9, const void *a10, size_t a11, size_t *a12)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  int v19;
  int v20;
  NSObject *v21;
  void *v22;
  char *v23;
  size_t v24;
  void *v25;
  int v26;
  NSObject *v27;
  void *v28;
  _BOOL8 result;
  int v30;
  int v31;
  NSObject *v32;
  size_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  NSObject *v40;
  size_t v41;
  int v42;
  NSObject *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  NSObject *v48;
  void *v49;
  char *backtrace_string;
  _BOOL4 v51;
  const char *v52;
  _BOOL4 v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  NSObject *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  NSObject *v75;
  void *v76;
  NSObject *v77;
  void *v78;
  NSObject *v79;
  void *v80;
  NSObject *v81;
  void *v82;
  uint64_t v84;
  uint64_t v85;
  size_t size;
  char v88;
  char __str[32];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int buf;
  const char *v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  size_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null message_buffer";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null message_buffer, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v51 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v51)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null message_buffer, no backtrace";
      goto LABEL_219;
    }
    if (!v51)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
LABEL_161:
    _os_log_impl(&dword_182FBE000, v45, v46, v52, (uint8_t *)__str, 0x16u);
    goto LABEL_162;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null message_length";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null message_length, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v53 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v53)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null message_length, no backtrace";
      goto LABEL_219;
    }
    if (!v53)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null media_type";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null media_type, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v54 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v54)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null media_type, no backtrace";
      goto LABEL_219;
    }
    if (!v54)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_context";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_context, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v55 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v55)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_context, no backtrace";
      goto LABEL_219;
    }
    if (!v55)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_context_length";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_context_length, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v56 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v56)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_context_length, no backtrace";
      goto LABEL_219;
    }
    if (!v56)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_enc";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_enc, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v57 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v57)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_enc, no backtrace";
      goto LABEL_219;
    }
    if (!v57)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_enc_length";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v58 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v58)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null request_enc_length, no backtrace";
      goto LABEL_219;
    }
    if (!v58)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null response_nonce";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null response_nonce, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v59 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v59)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null response_nonce, no backtrace";
      goto LABEL_219;
    }
    if (!v59)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null response_nonce, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null response_nonce_length";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null response_nonce_length, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v60 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v60)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null response_nonce_length, no backtrace";
      goto LABEL_219;
    }
    if (!v60)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null response_nonce_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  if (!a12)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null out_encrypted_length";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v61 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v61)
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null out_encrypted_length, no backtrace";
      goto LABEL_219;
    }
    if (!v61)
      goto LABEL_162;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v52 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v14 = cchpke_params_sizeof_aead_key();
  v15 = cchpke_params_sizeof_aead_nonce();
  v85 = cchpke_params_sizeof_aead_tag();
  size = v15;
  if (v14 <= v15)
    v16 = v15;
  else
    v16 = v14;
  if (v16 != a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v88 = 0;
    if (!__nwlog_fault(v44, &buf, &v88))
      goto LABEL_220;
    if (buf == 17)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null (exported_secret_length == response_nonce_length)";
      goto LABEL_219;
    }
    if (!v88)
    {
      v45 = __nwlog_obj();
      v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf))
        goto LABEL_220;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v47 = "%{public}s called with null (exported_secret_length == response_nonce_length), backtrace limit exceeded";
      goto LABEL_219;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = buf;
    v62 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)__str = 136446466;
        *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
        *(_WORD *)&__str[12] = 2082;
        *(_QWORD *)&__str[14] = backtrace_string;
        v52 = "%{public}s called with null (exported_secret_length == response_nonce_length), dumping backtrace:%{public}s";
        goto LABEL_161;
      }
LABEL_162:
      free(backtrace_string);
      goto LABEL_220;
    }
    if (!v62)
      goto LABEL_220;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    v47 = "%{public}s called with null (exported_secret_length == response_nonce_length), no backtrace";
LABEL_219:
    _os_log_impl(&dword_182FBE000, v45, v46, v47, (uint8_t *)__str, 0xCu);
LABEL_220:
    if (v44)
      free(v44);
    return 0;
  }
  v17 = v14;
  v84 = a2;
  v18 = malloc_type_calloc(1uLL, a11, 0xEAFB8F1AuLL);
  if (!v18)
  {
    v48 = __nwlog_obj();
    os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(_QWORD *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(_QWORD *)&__str[14] = 1;
    *(_WORD *)&__str[22] = 2048;
    *(_QWORD *)&__str[24] = a11;
    v49 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v49);
    if (result)
      goto LABEL_230;
    free(v49);
  }
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x100uLL, "%s chunked response", a3);
  strlen(__str);
  v19 = cchpke_responder_export();
  if (v19)
  {
    v20 = v19;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v106 = 1024;
      LODWORD(v107) = v20;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Export error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!v18)
      return 0;
    goto LABEL_20;
  }
  if (!(a11 + a9))
  {
    v63 = __nwlog_obj();
    os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v105 = "strict_calloc";
    v64 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v64);
    if (result)
      goto LABEL_230;
    free(v64);
  }
  v23 = (char *)malloc_type_calloc(1uLL, a11 + a9, 0xEAFB8F1AuLL);
  if (!v23)
  {
    v65 = __nwlog_obj();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v105 = "strict_calloc";
    v106 = 2048;
    v107 = 1;
    v108 = 2048;
    v109 = a11 + a9;
    v66 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v66);
    if (result)
      goto LABEL_230;
    free(v66);
  }
  memcpy(v23, a8, a9);
  memcpy(&v23[a9], a10, a11);
  v24 = cchpke_params_sizeof_kdf_hash();
  if (!v24)
  {
    v67 = __nwlog_obj();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v105 = "strict_calloc";
    v68 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v68);
    if (result)
      goto LABEL_230;
    free(v68);
  }
  v25 = malloc_type_calloc(1uLL, v24, 0xEAFB8F1AuLL);
  if (!v25)
  {
    v69 = __nwlog_obj();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v105 = "strict_calloc";
    v106 = 2048;
    v107 = 1;
    v108 = 2048;
    v109 = v24;
    v70 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v70);
    if (result)
      goto LABEL_230;
    free(v70);
  }
  ccsha256_di();
  v26 = cchkdf_extract();
  if (v23)
    free(v23);
  if (v18)
    free(v18);
  if (v26)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v106 = 1024;
      LODWORD(v107) = v26;
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s Extract error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!v25)
      return 0;
    v22 = v25;
    goto LABEL_34;
  }
  if (!v17)
  {
    v71 = __nwlog_obj();
    os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v105 = "strict_calloc";
    v72 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v72);
    if (result)
      goto LABEL_230;
    free(v72);
  }
  v18 = malloc_type_calloc(1uLL, v17, 0xEAFB8F1AuLL);
  if (!v18)
  {
    v73 = __nwlog_obj();
    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v105 = "strict_calloc";
    v106 = 2048;
    v107 = 1;
    v108 = 2048;
    v109 = v17;
    v74 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v74);
    if (result)
      goto LABEL_230;
    free(v74);
  }
  v30 = cchkdf_expand();
  if (v30)
  {
    v31 = v30;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v106 = 1024;
      LODWORD(v107) = v31;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s Key expand error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v25)
      free(v25);
    if (!v18)
      return 0;
LABEL_20:
    v22 = v18;
LABEL_34:
    free(v22);
    return 0;
  }
  v33 = size;
  if (!size)
  {
    v75 = __nwlog_obj();
    os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v105 = "strict_calloc";
    v76 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v76);
    if (result)
      goto LABEL_230;
    free(v76);
    v33 = 0;
  }
  v34 = (char *)malloc_type_calloc(1uLL, v33, 0xEAFB8F1AuLL);
  if (!v34)
  {
    v77 = __nwlog_obj();
    os_log_type_enabled(v77, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v105 = "strict_calloc";
    v106 = 2048;
    v107 = 1;
    v108 = 2048;
    v109 = v33;
    v78 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v78);
    if (result)
      goto LABEL_230;
    free(v78);
  }
  v35 = cchkdf_expand();
  if (v25)
    free(v25);
  if (v35)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v106 = 1024;
      LODWORD(v107) = v35;
      v37 = "%{public}s Nonce expand error: %d";
      v38 = v36;
      v39 = 18;
LABEL_56:
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_ERROR, v37, (uint8_t *)&buf, v39);
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  if (size <= 7)
  {
    v40 = __nwlog_obj();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v106 = 2048;
      v107 = size;
      v37 = "%{public}s Bad nonce length: %zu";
      v38 = v40;
      v39 = 22;
      goto LABEL_56;
    }
LABEL_57:
    if (v18)
      free(v18);
    if (!v34)
      return 0;
    v22 = v34;
    goto LABEL_34;
  }
  *(_QWORD *)&v34[size - 8] ^= bswap64(a4);
  v41 = v85 + v84;
  if (!(v85 + v84))
  {
    v79 = __nwlog_obj();
    os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v105 = "strict_calloc";
    v80 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v80);
    if (result)
      goto LABEL_230;
    free(v80);
  }
  v28 = malloc_type_calloc(1uLL, v41, 0xEAFB8F1AuLL);
  if (v28)
  {
LABEL_63:
    ccaes_gcm_encrypt_mode();
    v42 = ccgcm_one_shot();
    if (v18)
      free(v18);
    free(v34);
    if (!v42)
    {
      *a12 = v41;
      return (BOOL)v28;
    }
    v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v105 = "nw_http_encrypt_chunked_oblivious_response_chunk";
      v106 = 1024;
      LODWORD(v107) = v42;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s Encrypt error: %u", (uint8_t *)&buf, 0x12u);
    }
    if (!v28)
      return (BOOL)v28;
    v22 = v28;
    goto LABEL_34;
  }
  v81 = __nwlog_obj();
  os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  v105 = "strict_calloc";
  v106 = 2048;
  v107 = 1;
  v108 = 2048;
  v109 = v85 + v84;
  v82 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v82);
  if (!result)
  {
    free(v82);
    goto LABEL_63;
  }
LABEL_230:
  __break(1u);
  return result;
}

BOOL nw_http_decrypt_oblivious_response(char *a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, size_t *a8)
{
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  void *v17;
  int v18;
  int v19;
  NSObject *v20;
  void *v21;
  size_t v22;
  void *v23;
  int v24;
  NSObject *v25;
  void *v26;
  _BOOL8 result;
  size_t v28;
  int v29;
  int v30;
  NSObject *v31;
  void *v32;
  int v33;
  NSObject *v34;
  size_t v35;
  void *v36;
  char *v37;
  size_t v38;
  int v39;
  NSObject *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  NSObject *v48;
  void *v49;
  NSObject *v50;
  void *v51;
  char *backtrace_string;
  _BOOL4 v53;
  const char *v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  NSObject *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  NSObject *v75;
  void *v76;
  NSObject *v77;
  void *v78;
  NSObject *v79;
  void *v80;
  NSObject *v81;
  void *v82;
  void *v83;
  size_t v85;
  unint64_t v86;
  size_t v87;
  size_t size;
  size_t v89;
  char v91;
  char __str[32];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  int buf;
  const char *v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  size_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null response_buffer";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null response_buffer, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v53 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v53)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null response_buffer, no backtrace";
      goto LABEL_200;
    }
    if (!v53)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null response_buffer, dumping backtrace:%{public}s";
LABEL_154:
    _os_log_impl(&dword_182FBE000, v42, v43, v54, (uint8_t *)__str, 0x16u);
    goto LABEL_155;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null response_length";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null response_length, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v55 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v55)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null response_length, no backtrace";
      goto LABEL_200;
    }
    if (!v55)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null response_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null media_type";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null media_type, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v56 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v56)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null media_type, no backtrace";
      goto LABEL_200;
    }
    if (!v56)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_context";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_context, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v57 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v57)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_context, no backtrace";
      goto LABEL_200;
    }
    if (!v57)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_context_length";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_context_length, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v58 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v58)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_context_length, no backtrace";
      goto LABEL_200;
    }
    if (!v58)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_enc";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_enc, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v59 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v59)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_enc, no backtrace";
      goto LABEL_200;
    }
    if (!v59)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_enc_length";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v60 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v60)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null request_enc_length, no backtrace";
      goto LABEL_200;
    }
    if (!v60)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null out_decrypted_length";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v61 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v61)
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null out_decrypted_length, no backtrace";
      goto LABEL_200;
    }
    if (!v61)
      goto LABEL_155;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v54 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v12 = cchpke_params_sizeof_aead_key();
  v13 = cchpke_params_sizeof_aead_nonce();
  v14 = cchpke_params_sizeof_aead_tag();
  size = v14;
  v89 = v13;
  if (v12 <= v13)
    v15 = v13;
  else
    v15 = v12;
  v87 = a2 - (v15 + v14);
  if (a2 <= v15 + v14)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v91 = 0;
    if (!__nwlog_fault(v41, &buf, &v91))
      goto LABEL_201;
    if (buf == 17)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null (response_length > response_nonce_length + tag_length)";
      goto LABEL_200;
    }
    if (!v91)
    {
      v42 = __nwlog_obj();
      v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf))
        goto LABEL_201;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
      v44 = "%{public}s called with null (response_length > response_nonce_length + tag_length), backtrace limit exceeded";
      goto LABEL_200;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v42 = __nwlog_obj();
    v43 = buf;
    v62 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)__str = 136446466;
        *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
        *(_WORD *)&__str[12] = 2082;
        *(_QWORD *)&__str[14] = backtrace_string;
        v54 = "%{public}s called with null (response_length > response_nonce_length + tag_length), dumping backtrace:%{public}s";
        goto LABEL_154;
      }
LABEL_155:
      free(backtrace_string);
      goto LABEL_201;
    }
    if (!v62)
      goto LABEL_201;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_oblivious_response";
    v44 = "%{public}s called with null (response_length > response_nonce_length + tag_length), no backtrace";
LABEL_200:
    _os_log_impl(&dword_182FBE000, v42, v43, v44, (uint8_t *)__str, 0xCu);
LABEL_201:
    if (v41)
      free(v41);
    return 0;
  }
  v85 = v15 + v14;
  v86 = a2;
  if (!(v15 + a7))
  {
    v45 = __nwlog_obj();
    os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "strict_calloc";
    v46 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v46);
    if (result)
      goto LABEL_215;
    free(v46);
  }
  v16 = (char *)malloc_type_calloc(1uLL, v15 + a7, 0xEAFB8F1AuLL);
  if (!v16)
  {
    v47 = __nwlog_obj();
    os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(_QWORD *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(_QWORD *)&__str[14] = 1;
    *(_WORD *)&__str[22] = 2048;
    *(_QWORD *)&__str[24] = v15 + a7;
    v83 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v83);
    if (result)
      goto LABEL_215;
    free(v83);
  }
  memcpy(v16, a6, a7);
  memcpy(&v16[a7], a1, v15);
  if (!v15)
  {
    v48 = __nwlog_obj();
    os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "strict_calloc";
    v49 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v49);
    if (result)
      goto LABEL_215;
    free(v49);
  }
  v17 = malloc_type_calloc(1uLL, v15, 0xEAFB8F1AuLL);
  if (!v17)
  {
    v50 = __nwlog_obj();
    os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(_QWORD *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(_QWORD *)&__str[14] = 1;
    *(_WORD *)&__str[22] = 2048;
    *(_QWORD *)&__str[24] = v15;
    v51 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v51);
    if (result)
      goto LABEL_215;
    free(v51);
  }
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x100uLL, "%s response", a3);
  strlen(__str);
  v18 = cchpke_initiator_export();
  if (v18)
  {
    v19 = v18;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v108 = "nw_http_decrypt_oblivious_response";
      v109 = 1024;
      LODWORD(v110) = v19;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s Export error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v17)
      free(v17);
    if (!v16)
      return 0;
    goto LABEL_23;
  }
  v22 = cchpke_params_sizeof_kdf_hash();
  if (!v22)
  {
    v63 = __nwlog_obj();
    os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v108 = "strict_calloc";
    v64 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v64);
    if (result)
      goto LABEL_215;
    free(v64);
  }
  v23 = malloc_type_calloc(1uLL, v22, 0xEAFB8F1AuLL);
  if (!v23)
  {
    v65 = __nwlog_obj();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v108 = "strict_calloc";
    v109 = 2048;
    v110 = 1;
    v111 = 2048;
    v112 = v22;
    v66 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v66);
    if (result)
      goto LABEL_215;
    free(v66);
  }
  ccsha256_di();
  v24 = cchkdf_extract();
  if (v16)
    free(v16);
  if (v17)
    free(v17);
  if (v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v108 = "nw_http_decrypt_oblivious_response";
      v109 = 1024;
      LODWORD(v110) = v24;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s Extract error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!v23)
      return 0;
    v21 = v23;
    goto LABEL_35;
  }
  v28 = v89;
  if (!v12)
  {
    v67 = __nwlog_obj();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v108 = "strict_calloc";
    v68 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v68);
    if (result)
      goto LABEL_215;
    free(v68);
  }
  v16 = (char *)malloc_type_calloc(1uLL, v12, 0xEAFB8F1AuLL);
  if (!v16)
  {
    v69 = __nwlog_obj();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v108 = "strict_calloc";
    v109 = 2048;
    v110 = 1;
    v111 = 2048;
    v112 = v12;
    v70 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v70);
    if (result)
      goto LABEL_215;
    free(v70);
  }
  v29 = cchkdf_expand();
  if (v29)
  {
    v30 = v29;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v108 = "nw_http_decrypt_oblivious_response";
      v109 = 1024;
      LODWORD(v110) = v30;
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s Key expand error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v23)
      free(v23);
    if (!v16)
      return 0;
LABEL_23:
    v21 = v16;
LABEL_35:
    free(v21);
    return 0;
  }
  if (!v89)
  {
    v71 = __nwlog_obj();
    os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v108 = "strict_calloc";
    v72 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v72);
    if (result)
      goto LABEL_215;
    free(v72);
    v28 = v89;
  }
  v32 = malloc_type_calloc(1uLL, v28, 0xEAFB8F1AuLL);
  if (!v32)
  {
    v73 = __nwlog_obj();
    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v108 = "strict_calloc";
    v109 = 2048;
    v110 = 1;
    v111 = 2048;
    v112 = v28;
    v74 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v74);
    if (result)
      goto LABEL_215;
    free(v74);
  }
  v33 = cchkdf_expand();
  if (v23)
    free(v23);
  if (v33)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v108 = "nw_http_decrypt_oblivious_response";
      v109 = 1024;
      LODWORD(v110) = v33;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_ERROR, "%{public}s Nonce expand error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v16)
      free(v16);
    if (!v32)
      return 0;
    v21 = v32;
    goto LABEL_35;
  }
  v35 = size;
  if (!size)
  {
    v75 = __nwlog_obj();
    os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v108 = "strict_calloc";
    v76 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v76);
    if (result)
      goto LABEL_215;
    free(v76);
    v35 = 0;
  }
  v36 = malloc_type_calloc(1uLL, v35, 0xEAFB8F1AuLL);
  if (!v36)
  {
    v77 = __nwlog_obj();
    os_log_type_enabled(v77, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v108 = "strict_calloc";
    v109 = 2048;
    v110 = 1;
    v111 = 2048;
    v112 = v35;
    v78 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v78);
    if (result)
      goto LABEL_215;
    free(v78);
    v35 = size;
  }
  v37 = &a1[v15];
  v38 = v87;
  memcpy(v36, &v37[v87], v35);
  if (v86 == v85)
  {
    v79 = __nwlog_obj();
    os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v108 = "strict_calloc";
    v80 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v80);
    if (result)
      goto LABEL_215;
    free(v80);
    v38 = v87;
  }
  v26 = malloc_type_calloc(1uLL, v38, 0xEAFB8F1AuLL);
  if (v26)
  {
LABEL_62:
    ccaes_gcm_decrypt_mode();
    v39 = ccgcm_one_shot();
    if (v16)
      free(v16);
    if (v32)
      free(v32);
    if (v36)
      free(v36);
    if (!v39)
    {
      *a8 = v38;
      return (BOOL)v26;
    }
    v40 = __nwlog_obj();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v108 = "nw_http_decrypt_oblivious_response";
      v109 = 1024;
      LODWORD(v110) = v39;
      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!v26)
      return (BOOL)v26;
    v21 = v26;
    goto LABEL_35;
  }
  v81 = __nwlog_obj();
  os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  v108 = "strict_calloc";
  v109 = 2048;
  v110 = 1;
  v111 = 2048;
  v112 = v38;
  v82 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v82);
  if (!result)
  {
    free(v82);
    v38 = v87;
    goto LABEL_62;
  }
LABEL_215:
  __break(1u);
  return result;
}

BOOL nw_http_decrypt_chunked_oblivious_response_chunk(uint64_t a1, uint64_t a2, const char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, size_t a9, const void *a10, size_t a11, _QWORD *a12)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  int v18;
  int v19;
  NSObject *v20;
  char *v21;
  size_t v22;
  char *v23;
  int v24;
  NSObject *v25;
  char *v26;
  int v27;
  int v28;
  NSObject *v29;
  size_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  NSObject *v37;
  _BOOL8 result;
  char *v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  size_t v43;
  int v44;
  NSObject *v45;
  const char *v46;
  NSObject *v47;
  os_log_type_t v48;
  const char *v49;
  NSObject *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  char *backtrace_string;
  _BOOL4 v57;
  const char *v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _BOOL4 v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  NSObject *v75;
  void *v76;
  NSObject *v77;
  void *v78;
  NSObject *v79;
  void *v80;
  NSObject *v81;
  void *v82;
  NSObject *v83;
  void *v84;
  NSObject *v85;
  void *v86;
  NSObject *v87;
  void *v88;
  size_t v92;
  size_t v93;
  size_t size;
  char v96;
  char __str[32];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int buf;
  const char *v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  size_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_buffer, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v57 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v57)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_buffer, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v57)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null response_buffer, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null response_buffer";
LABEL_226:
    _os_log_impl(&dword_182FBE000, v47, v48, v49, (uint8_t *)__str, 0xCu);
    goto LABEL_227;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_length, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v59 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_length, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v59)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null response_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null response_length";
    goto LABEL_226;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v60 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v60)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v60)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null media_type";
    goto LABEL_226;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v61 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v61)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v61)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null request_context";
    goto LABEL_226;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v62 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v62)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null request_context_length";
    goto LABEL_226;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v63 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v63)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v63)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null request_enc";
    goto LABEL_226;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v64 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null request_enc_length, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v64)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null request_enc_length";
    goto LABEL_226;
  }
  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_nonce, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v65 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v65)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_nonce, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v65)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null response_nonce, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null response_nonce";
    goto LABEL_226;
  }
  if (!a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf != 17)
    {
      if (!v96)
      {
        v47 = __nwlog_obj();
        v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_nonce_length, backtrace limit exceeded";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = buf;
      v66 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)__str = 136446210;
          *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          v49 = "%{public}s called with null response_nonce_length, no backtrace";
          goto LABEL_226;
        }
        goto LABEL_227;
      }
      if (!v66)
        goto LABEL_173;
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null response_nonce_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }
    v47 = __nwlog_obj();
    v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf))
      goto LABEL_227;
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v49 = "%{public}s called with null response_nonce_length";
    goto LABEL_226;
  }
  if (!a12)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf == 17)
    {
      v47 = __nwlog_obj();
      v48 = buf;
      if (!os_log_type_enabled(v47, (os_log_type_t)buf))
        goto LABEL_227;
      *(_DWORD *)__str = 136446210;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v49 = "%{public}s called with null out_decrypted_length";
      goto LABEL_226;
    }
    if (!v96)
    {
      v47 = __nwlog_obj();
      v48 = buf;
      if (os_log_type_enabled(v47, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        v49 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
        goto LABEL_226;
      }
      goto LABEL_227;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v47 = __nwlog_obj();
    v48 = buf;
    v67 = os_log_type_enabled(v47, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v67)
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        v49 = "%{public}s called with null out_decrypted_length, no backtrace";
        goto LABEL_226;
      }
      goto LABEL_227;
    }
    if (!v67)
      goto LABEL_173;
    *(_DWORD *)__str = 136446466;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(_QWORD *)&__str[14] = backtrace_string;
    v58 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
LABEL_172:
    _os_log_impl(&dword_182FBE000, v47, v48, v58, (uint8_t *)__str, 0x16u);
    goto LABEL_173;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v13 = cchpke_params_sizeof_aead_key();
  v14 = cchpke_params_sizeof_aead_nonce();
  v92 = cchpke_params_sizeof_aead_tag();
  v93 = v14;
  size = v13;
  if (v13 <= v14)
    v15 = v14;
  else
    v15 = v13;
  if (v15 != a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    v96 = 0;
    if (!__nwlog_fault(v46, &buf, &v96))
      goto LABEL_227;
    if (buf == 17)
    {
      v47 = __nwlog_obj();
      v48 = buf;
      if (os_log_type_enabled(v47, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        v49 = "%{public}s called with null (response_nonce_length == exported_secret_length)";
        goto LABEL_226;
      }
LABEL_227:
      if (!v46)
        return 0;
      v21 = (char *)v46;
LABEL_60:
      free(v21);
      return 0;
    }
    if (!v96)
    {
      v47 = __nwlog_obj();
      v48 = buf;
      if (os_log_type_enabled(v47, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        v49 = "%{public}s called with null (response_nonce_length == exported_secret_length), backtrace limit exceeded";
        goto LABEL_226;
      }
      goto LABEL_227;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v47 = __nwlog_obj();
    v48 = buf;
    v68 = os_log_type_enabled(v47, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v68)
      {
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        v49 = "%{public}s called with null (response_nonce_length == exported_secret_length), no backtrace";
        goto LABEL_226;
      }
      goto LABEL_227;
    }
    if (v68)
    {
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(_QWORD *)&__str[14] = backtrace_string;
      v58 = "%{public}s called with null (response_nonce_length == exported_secret_length), dumping backtrace:%{public}s";
      goto LABEL_172;
    }
LABEL_173:
    free(backtrace_string);
    goto LABEL_227;
  }
  if (!(a11 + a9))
  {
    v50 = __nwlog_obj();
    os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446210;
    *(_QWORD *)&__str[4] = "strict_calloc";
    v51 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v51);
    if (result)
      goto LABEL_241;
    free(v51);
  }
  v16 = (char *)malloc_type_calloc(1uLL, a11 + a9, 0xEAFB8F1AuLL);
  if (!v16)
  {
    v52 = __nwlog_obj();
    os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(_QWORD *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(_QWORD *)&__str[14] = 1;
    *(_WORD *)&__str[22] = 2048;
    *(_QWORD *)&__str[24] = a11 + a9;
    v53 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v53);
    if (result)
      goto LABEL_241;
    free(v53);
  }
  memcpy(v16, a8, a9);
  memcpy(&v16[a9], a10, a11);
  v17 = malloc_type_calloc(1uLL, a11, 0xEAFB8F1AuLL);
  if (!v17)
  {
    v54 = __nwlog_obj();
    os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(_QWORD *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(_QWORD *)&__str[14] = 1;
    *(_WORD *)&__str[22] = 2048;
    *(_QWORD *)&__str[24] = a11;
    v55 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v55);
    if (result)
      goto LABEL_241;
    free(v55);
  }
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x100uLL, "%s chunked response", a3);
  strlen(__str);
  v18 = cchpke_initiator_export();
  if (v18)
  {
    v19 = v18;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v113 = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v114 = 1024;
      LODWORD(v115) = v19;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s Export error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v17)
      free(v17);
LABEL_23:
    if (!v16)
      return (BOOL)v16;
    v21 = v16;
    goto LABEL_60;
  }
  v22 = cchpke_params_sizeof_kdf_hash();
  if (!v22)
  {
    v69 = __nwlog_obj();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v113 = "strict_calloc";
    v70 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v70);
    if (result)
      goto LABEL_241;
    free(v70);
  }
  v23 = (char *)malloc_type_calloc(1uLL, v22, 0xEAFB8F1AuLL);
  if (!v23)
  {
    v71 = __nwlog_obj();
    os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v113 = "strict_calloc";
    v114 = 2048;
    v115 = 1;
    v116 = 2048;
    v117 = v22;
    v72 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v72);
    if (result)
      goto LABEL_241;
    free(v72);
  }
  ccsha256_di();
  v24 = cchkdf_extract();
  if (v16)
    free(v16);
  if (v17)
    free(v17);
  if (v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v113 = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v114 = 1024;
      LODWORD(v115) = v24;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s Extract error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!v23)
      return 0;
    v21 = v23;
    goto LABEL_60;
  }
  if (!size)
  {
    v73 = __nwlog_obj();
    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v113 = "strict_calloc";
    v74 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v74);
    if (result)
      goto LABEL_241;
    free(v74);
  }
  v26 = (char *)malloc_type_calloc(1uLL, size, 0xEAFB8F1AuLL);
  if (!v26)
  {
    v75 = __nwlog_obj();
    os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v113 = "strict_calloc";
    v114 = 2048;
    v115 = 1;
    v116 = 2048;
    v117 = size;
    v76 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v76);
    if (result)
      goto LABEL_241;
    free(v76);
  }
  v27 = cchkdf_expand();
  if (v27)
  {
    v28 = v27;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v113 = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v114 = 1024;
      LODWORD(v115) = v28;
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s Key expand error: %d", (uint8_t *)&buf, 0x12u);
    }
    if (v23)
      free(v23);
    if (!v26)
      return 0;
    v21 = v26;
    goto LABEL_60;
  }
  v30 = v93;
  if (!v93)
  {
    v77 = __nwlog_obj();
    os_log_type_enabled(v77, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v113 = "strict_calloc";
    v78 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v78);
    if (result)
      goto LABEL_241;
    free(v78);
    v30 = 0;
  }
  v31 = (char *)malloc_type_calloc(1uLL, v30, 0xEAFB8F1AuLL);
  if (!v31)
  {
    v79 = __nwlog_obj();
    os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v113 = "strict_calloc";
    v114 = 2048;
    v115 = 1;
    v116 = 2048;
    v117 = v30;
    v80 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v80);
    if (result)
      goto LABEL_241;
    free(v80);
    v30 = v93;
    v31 = 0;
  }
  v32 = cchkdf_expand();
  if (v23)
    free(v23);
  if (v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v113 = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v114 = 1024;
      LODWORD(v115) = v32;
      v34 = "%{public}s Nonce expand error: %d";
      v35 = v33;
      v36 = 18;
LABEL_55:
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&buf, v36);
      goto LABEL_56;
    }
    goto LABEL_56;
  }
  if (v30 <= 7)
  {
    v37 = __nwlog_obj();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v113 = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v114 = 2048;
      v115 = v30;
      v34 = "%{public}s Bad nonce length: %zu";
      v35 = v37;
      v36 = 22;
      goto LABEL_55;
    }
LABEL_56:
    if (v26)
      free(v26);
    if (!v31)
      return 0;
    v21 = v31;
    goto LABEL_60;
  }
  v39 = v31;
  *(_QWORD *)&v31[v30 - 8] ^= bswap64(a4);
  v40 = v92;
  if (!v92)
  {
    v81 = __nwlog_obj();
    os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v113 = "strict_calloc";
    v82 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v82);
    if (result)
      goto LABEL_241;
    free(v82);
    v40 = 0;
  }
  v41 = malloc_type_calloc(1uLL, v40, 0xEAFB8F1AuLL);
  v42 = a1;
  if (!v41)
  {
    v83 = __nwlog_obj();
    os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    v113 = "strict_calloc";
    v114 = 2048;
    v115 = 1;
    v116 = 2048;
    v117 = v40;
    v84 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v84);
    if (result)
      goto LABEL_241;
    free(v84);
    v42 = a1;
    v40 = v92;
  }
  memcpy(v41, (const void *)(v42 + a2 - v40), v40);
  if (a2 == v40)
    v43 = 1;
  else
    v43 = a2 - v40;
  if (!v43)
  {
    v85 = __nwlog_obj();
    os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    v113 = "strict_calloc";
    v86 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v86);
    if (result)
      goto LABEL_241;
    free(v86);
  }
  v16 = (char *)malloc_type_calloc(1uLL, v43, 0xEAFB8F1AuLL);
  if (v16)
  {
LABEL_70:
    ccaes_gcm_decrypt_mode();
    v44 = ccgcm_one_shot();
    if (v26)
      free(v26);
    free(v39);
    if (v41)
      free(v41);
    if (!v44)
    {
      *a12 = a2 - v40;
      return (BOOL)v16;
    }
    v45 = __nwlog_obj();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v113 = "nw_http_decrypt_chunked_oblivious_response_chunk";
      v114 = 1024;
      LODWORD(v115) = v44;
      _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_23;
  }
  v87 = __nwlog_obj();
  os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  v113 = "strict_calloc";
  v114 = 2048;
  v115 = 1;
  v116 = 2048;
  v117 = v43;
  v88 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v88);
  if (!result)
  {
    free(v88);
    goto LABEL_70;
  }
LABEL_241:
  __break(1u);
  return result;
}

uint64_t nw_http_get_standalone_aead_header()
{
  return 256;
}

uint64_t nw_http_get_standalone_aead_nonce_length()
{
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  return cchpke_params_sizeof_aead_nonce();
}

BOOL nw_http_encrypt_standalone_aead_chunk(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, size_t a8, size_t *a9)
{
  char *v14;
  size_t v15;
  void *v16;
  int v17;
  NSObject *v18;
  _BOOL8 result;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  char *backtrace_string;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  size_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v30 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v30)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null message_buffer";
LABEL_136:
    _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
    goto LABEL_137;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v32 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v32)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null message_length";
    goto LABEL_136;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null aead_key, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v33 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null aead_key, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v33)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null aead_key, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null aead_key";
    goto LABEL_136;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v34 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null aead_key_length, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v34)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null aead_key_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null aead_key_length";
    goto LABEL_136;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null input_nonce, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v35 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null input_nonce, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v35)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null input_nonce, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null input_nonce";
    goto LABEL_136;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null aead_nonce_length, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v36 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null aead_nonce_length, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v36)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null aead_nonce_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null aead_nonce_length";
    goto LABEL_136;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = type;
      v37 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_http_encrypt_standalone_aead_chunk";
          v23 = "%{public}s called with null out_encrypted_length, no backtrace";
          goto LABEL_136;
        }
        goto LABEL_137;
      }
      if (!v37)
        goto LABEL_99;
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    v21 = __nwlog_obj();
    v22 = type;
    if (!os_log_type_enabled(v21, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v23 = "%{public}s called with null out_encrypted_length";
    goto LABEL_136;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v42 = cchpke_params_sizeof_aead_tag();
  if (cchpke_params_sizeof_aead_key() != a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v23 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params))";
      goto LABEL_136;
    }
    if (!v43)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_http_encrypt_standalone_aead_chunk";
        v23 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), backtrace limit exceeded";
        goto LABEL_136;
      }
      goto LABEL_137;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v38 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_http_encrypt_standalone_aead_chunk";
        v23 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), no backtrace";
        goto LABEL_136;
      }
      goto LABEL_137;
    }
    if (!v38)
      goto LABEL_99;
    *(_DWORD *)buf = 136446466;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v47 = 2082;
    v48 = (uint64_t)backtrace_string;
    v31 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_182FBE000, v21, v22, v31, buf, 0x16u);
    goto LABEL_99;
  }
  if (cchpke_params_sizeof_aead_nonce() != a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_http_encrypt_standalone_aead_chunk";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v20, &type, &v43))
      goto LABEL_137;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_http_encrypt_standalone_aead_chunk";
        v23 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params))";
        goto LABEL_136;
      }
LABEL_137:
      if (v20)
        free(v20);
      return 0;
    }
    if (!v43)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_http_encrypt_standalone_aead_chunk";
        v23 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), backtrace limit exceeded";
        goto LABEL_136;
      }
      goto LABEL_137;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v39 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_http_encrypt_standalone_aead_chunk";
        v23 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), no backtrace";
        goto LABEL_136;
      }
      goto LABEL_137;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_http_encrypt_standalone_aead_chunk";
      v47 = 2082;
      v48 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), dumping backtrace:%{public}s";
      goto LABEL_98;
    }
LABEL_99:
    free(backtrace_string);
    goto LABEL_137;
  }
  v14 = (char *)malloc_type_calloc(1uLL, a8, 0xEAFB8F1AuLL);
  if (!v14)
  {
    v24 = __nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v46 = "strict_calloc";
    v47 = 2048;
    v48 = 1;
    v49 = 2048;
    v50 = a8;
    v41 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v41);
    if (result)
      goto LABEL_140;
    free(v41);
  }
  memcpy(v14, a7, a8);
  *(_QWORD *)&v14[a8 - 8] ^= bswap64(a3);
  v15 = v42 + a2;
  if (!(v42 + a2))
  {
    v25 = __nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v46 = "strict_calloc";
    v26 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v26);
    if (result)
      goto LABEL_140;
    free(v26);
    v15 = 0;
  }
  v40 = v15;
  v16 = malloc_type_calloc(1uLL, v15, 0xEAFB8F1AuLL);
  if (v16)
    goto LABEL_13;
  v27 = __nwlog_obj();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v46 = "strict_calloc";
  v47 = 2048;
  v48 = 1;
  v49 = 2048;
  v50 = v40;
  v28 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
LABEL_13:
    ccaes_gcm_encrypt_mode();
    v17 = ccgcm_one_shot();
    free(v14);
    if (v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v46 = "nw_http_encrypt_standalone_aead_chunk";
        v47 = 1024;
        LODWORD(v48) = v17;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s Encrypt error: %u", buf, 0x12u);
      }
      if (v16)
      {
        free(v16);
        return 0;
      }
    }
    else
    {
      *a9 = v40;
    }
    return (BOOL)v16;
  }
LABEL_140:
  __break(1u);
  return result;
}

BOOL nw_http_decrypt_standalone_aead_chunk(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, size_t a8, size_t *a9)
{
  unint64_t v15;
  size_t v16;
  size_t v17;
  char *v18;
  void *v19;
  void *v20;
  int v21;
  NSObject *v22;
  _BOOL8 result;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  char *backtrace_string;
  _BOOL4 v38;
  const char *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  void *v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  size_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null encrypted_buffer, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v38 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null encrypted_buffer, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v38)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null encrypted_buffer, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null encrypted_buffer";
LABEL_157:
    _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
    goto LABEL_158;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null encrypted_length, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v40 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null encrypted_length, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v40)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null encrypted_length";
    goto LABEL_157;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null aead_key, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v41 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null aead_key, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v41)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null aead_key, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null aead_key";
    goto LABEL_157;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v42 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null aead_key_length, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v42)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null aead_key_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null aead_key_length";
    goto LABEL_157;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null input_nonce, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v43 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null input_nonce, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v43)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null input_nonce, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null input_nonce";
    goto LABEL_157;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null aead_nonce_length, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v44 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null aead_nonce_length, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v44)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null aead_nonce_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null aead_nonce_length";
    goto LABEL_157;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v45 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null out_decrypted_length, no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v45)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null out_decrypted_length";
    goto LABEL_157;
  }
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  if (cchpke_params_sizeof_aead_key() != a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        v25 = __nwlog_obj();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), backtrace limit exceeded";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v25 = __nwlog_obj();
      v26 = type;
      v46 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_http_decrypt_standalone_aead_chunk";
          v27 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), no backtrace";
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (!v46)
        goto LABEL_116;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), dumping backtrace:%{public}s";
      goto LABEL_115;
    }
    v25 = __nwlog_obj();
    v26 = type;
    if (!os_log_type_enabled(v25, type))
      goto LABEL_158;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v27 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params))";
    goto LABEL_157;
  }
  if (cchpke_params_sizeof_aead_nonce() != a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (!os_log_type_enabled(v25, type))
        goto LABEL_158;
      *(_DWORD *)buf = 136446210;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v27 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params))";
      goto LABEL_157;
    }
    if (!v50)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_decrypt_standalone_aead_chunk";
        v27 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), backtrace limit exceeded";
        goto LABEL_157;
      }
      goto LABEL_158;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type;
    v47 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_decrypt_standalone_aead_chunk";
        v27 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), no backtrace";
        goto LABEL_157;
      }
      goto LABEL_158;
    }
    if (!v47)
      goto LABEL_116;
    *(_DWORD *)buf = 136446466;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v54 = 2082;
    v55 = (uint64_t)backtrace_string;
    v39 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), dumping backtrace:%{public}s";
LABEL_115:
    _os_log_impl(&dword_182FBE000, v25, v26, v39, buf, 0x16u);
    goto LABEL_116;
  }
  v15 = cchpke_params_sizeof_aead_tag();
  v16 = a2 - v15;
  if (a2 <= v15)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_decrypt_standalone_aead_chunk";
    v24 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v24, &type, &v50))
      goto LABEL_158;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_decrypt_standalone_aead_chunk";
        v27 = "%{public}s called with null (encrypted_length > tag_length)";
        goto LABEL_157;
      }
LABEL_158:
      if (v24)
        free(v24);
      return 0;
    }
    if (!v50)
    {
      v25 = __nwlog_obj();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_decrypt_standalone_aead_chunk";
        v27 = "%{public}s called with null (encrypted_length > tag_length), backtrace limit exceeded";
        goto LABEL_157;
      }
      goto LABEL_158;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = type;
    v48 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_decrypt_standalone_aead_chunk";
        v27 = "%{public}s called with null (encrypted_length > tag_length), no backtrace";
        goto LABEL_157;
      }
      goto LABEL_158;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_decrypt_standalone_aead_chunk";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v39 = "%{public}s called with null (encrypted_length > tag_length), dumping backtrace:%{public}s";
      goto LABEL_115;
    }
LABEL_116:
    free(backtrace_string);
    goto LABEL_158;
  }
  v17 = v15;
  v18 = (char *)malloc_type_calloc(1uLL, a8, 0xEAFB8F1AuLL);
  if (!v18)
  {
    v28 = __nwlog_obj();
    os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v53 = "strict_calloc";
    v54 = 2048;
    v55 = 1;
    v56 = 2048;
    v57 = a8;
    v49 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v49);
    if (result)
      goto LABEL_161;
    free(v49);
  }
  memcpy(v18, a7, a8);
  *(_QWORD *)&v18[a8 - 8] ^= bswap64(a3);
  if (!v17)
  {
    v29 = __nwlog_obj();
    os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v53 = "strict_calloc";
    v30 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v30);
    if (result)
      goto LABEL_161;
    free(v30);
  }
  v19 = malloc_type_calloc(1uLL, v17, 0xEAFB8F1AuLL);
  if (!v19)
  {
    v31 = __nwlog_obj();
    os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v53 = "strict_calloc";
    v54 = 2048;
    v55 = 1;
    v56 = 2048;
    v57 = v17;
    v32 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v32);
    if (result)
      goto LABEL_161;
    free(v32);
  }
  memcpy(v19, (const void *)(a1 + v16), v17);
  if (a2 == v17)
  {
    v33 = __nwlog_obj();
    os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v53 = "strict_calloc";
    v34 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v34);
    if (result)
      goto LABEL_161;
    free(v34);
  }
  v20 = malloc_type_calloc(1uLL, v16, 0xEAFB8F1AuLL);
  if (v20)
  {
LABEL_16:
    ccaes_gcm_decrypt_mode();
    v21 = ccgcm_one_shot();
    free(v18);
    if (v19)
      free(v19);
    if (v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v53 = "nw_http_decrypt_standalone_aead_chunk";
        v54 = 1024;
        LODWORD(v55) = v21;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", buf, 0x12u);
      }
      if (v20)
      {
        free(v20);
        return 0;
      }
    }
    else
    {
      *a9 = v16;
    }
    return (BOOL)v20;
  }
  v35 = __nwlog_obj();
  os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v53 = "strict_calloc";
  v54 = 2048;
  v55 = 1;
  v56 = 2048;
  v57 = v16;
  v36 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v36);
  if (!result)
  {
    free(v36);
    goto LABEL_16;
  }
LABEL_161:
  __break(1u);
  return result;
}

void sub_1839A5B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_proxy_hop;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_hop *nw_proxy_hop_create_masque(void *a1)
{
  id v2;
  NWConcrete_nw_proxy_hop *v3;
  NWConcrete_nw_proxy_hop *v4;
  void *v5;
  void *v6;
  NWConcrete_nw_protocol_options *options;
  OS_nw_protocol_options *v8;
  NWConcrete_nw_proxy_hop *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  if (v2)
  {
    v3 = objc_alloc_init(NWConcrete_nw_proxy_hop);
    v4 = v3;
    if (v3)
    {
      objc_storeStrong((id *)&v3->endpoint, a1);
      if (nw_protocol_masque_get_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
      if (nw_protocol_masque_get_definition(void)::definition
        && (v5 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0)
      {
        v6 = os_retain(v5);
      }
      else
      {
        v6 = 0;
      }
      options = nw_proxy_create_options(v6);
      v8 = v4->options;
      v4->options = (OS_nw_protocol_options *)options;

      v9 = v4;
      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_proxy_hop_create_masque";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v11, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_proxy_hop_create_masque";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s [nw_proxy_hop init] failed", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_proxy_hop_create_masque";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s [nw_proxy_hop init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11)
            goto LABEL_29;
          goto LABEL_28;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_proxy_hop_create_masque";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s [nw_proxy_hop init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_proxy_hop_create_masque";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s [nw_proxy_hop init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v11)
    {
LABEL_29:

      goto LABEL_30;
    }
LABEL_28:
    free(v11);
    goto LABEL_29;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_proxy_hop_create_masque";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_proxy_hop_create_masque";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null proxy_endpoint", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v21, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_proxy_hop_create_masque";
          v31 = 2082;
          v32 = v23;
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_47;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_proxy_hop_create_masque";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_proxy_hop_create_masque";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_47:
  if (v20)
    free(v20);
  v4 = 0;
LABEL_30:

  return v4;
}

void sub_1839A6110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_masque_version(void *a1, int a2)
{
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_proxy_hop_set_masque_version";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_masque_version";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_proxy_hop_set_masque_version";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_masque_version";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_masque_version";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (nw_protocol_options_is_masque(v3[5]))
  {
    nw_masque_options_set_version(v4[5], a2);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_hop_set_masque_version";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_masque_version";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_masque_version";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_masque_version";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_hop_set_masque_version";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void nw_proxy_hop_set_supports_raw_ip(void *a1, char a2)
{
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 80) = (_BYTE)v3[10] & 0xFE | a2;
    if (nw_protocol_options_is_masque(v3[5]))
    {
      nw_masque_options_set_allow_connect_ip(v4[5], a2);
      if (nw_masque_options_get_version(v4[5]) == 1)
        nw_masque_options_set_version(v4[5], 2);
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_hop_set_supports_raw_ip";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_supports_raw_ip";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_hop_set_supports_raw_ip";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_supports_raw_ip";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_supports_raw_ip";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
LABEL_5:

}

void nw_proxy_hop_set_supports_udp_listen(void *a1, int a2)
{
  void **v3;
  void **v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 64;
    else
      v5 = 0;
    *((_BYTE *)v3 + 80) = (_BYTE)v3[10] & 0xBF | v5;
    if (nw_protocol_options_is_masque(v3[5]) && nw_masque_options_get_version(v4[5]) == 1)
      nw_masque_options_set_version(v4[5], 2);
    goto LABEL_8;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_set_supports_udp_listen";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_udp_listen";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_set_supports_udp_listen";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_udp_listen";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_udp_listen";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v7)
    free(v7);
LABEL_8:

}

void nw_proxy_hop_set_supports_resumption(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xFD | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_set_supports_resumption";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_resumption";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_set_supports_resumption";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_resumption";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_resumption";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_proxy_hop_set_resumable_session_agent(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 8) = *a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_hop_set_resumable_session_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_resumable_session_agent";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_hop_set_resumable_session_agent";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_resumable_session_agent";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_resumable_session_agent";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_proxy_hop_set_supports_l4s(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 4;
    else
      v5 = 0;
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xFB | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_set_supports_l4s";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_l4s";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_set_supports_l4s";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_l4s";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_supports_l4s";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_proxy_hop_set_enable_multipath(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 8;
    else
      v5 = 0;
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xF7 | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_set_enable_multipath";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_enable_multipath";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_set_enable_multipath";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_enable_multipath";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_enable_multipath";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

NWConcrete_nw_proxy_hop *nw_proxy_hop_create_oblivious_http(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NWConcrete_nw_proxy_hop *v6;
  NWConcrete_nw_protocol_options *options;
  OS_nw_protocol_options *v8;
  NWConcrete_nw_proxy_hop *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_proxy_hop_create_oblivious_http";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v20, &type, &v37))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null oblivious_config", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v37)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null oblivious_config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null oblivious_config, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_proxy_hop_create_oblivious_http";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null oblivious_config, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_56:

    free(backtrace_string);
    goto LABEL_75;
  }
  if (!a2)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_proxy_hop_create_oblivious_http";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v20, &type, &v37))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null oblivious_config_length", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v37)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v35, "%{public}s called with null oblivious_config_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    v31 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null oblivious_config_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_proxy_hop_create_oblivious_http";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_56;
  }
  if (a3)
  {
    v6 = objc_alloc_init(NWConcrete_nw_proxy_hop);
    if (v6)
    {
      options = nw_oblivious_http_create_options(a1, a2, a3);
      v8 = v6->options;
      v6->options = (OS_nw_protocol_options *)options;

      v9 = v6;
LABEL_25:

      return v6;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_proxy_hop_create_oblivious_http";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v11, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_proxy_hop_create_oblivious_http";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s [nw_proxy_hop init] failed", buf, 0xCu);
        }
      }
      else if (v37)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (v14)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_proxy_hop_create_oblivious_http";
            v41 = 2082;
            v42 = v14;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s [nw_proxy_hop init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v14);
          if (!v11)
            goto LABEL_25;
          goto LABEL_24;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_proxy_hop_create_oblivious_http";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s [nw_proxy_hop init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_proxy_hop_create_oblivious_http";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s [nw_proxy_hop init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v11)
      goto LABEL_25;
LABEL_24:
    free(v11);
    goto LABEL_25;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_proxy_hop_create_oblivious_http";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v20, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null request_path", buf, 0xCu);
      }
LABEL_74:

      goto LABEL_75;
    }
    if (!v37)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null request_path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v32 = type;
    v33 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null request_path, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_proxy_hop_create_oblivious_http";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null request_path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_56;
  }
LABEL_75:
  if (v20)
    free(v20);
  return 0;
}

void sub_1839A7F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_hop *nw_proxy_hop_create_oblivious_http_with_context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NWConcrete_nw_proxy_hop *v8;
  NWConcrete_nw_protocol_options *options_with_context;
  OS_nw_protocol_options *options;
  NWConcrete_nw_proxy_hop *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_proxy_hop_create_oblivious_http_with_context";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v22, &type, &v39))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null oblivious_config", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v39)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null oblivious_config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    v31 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null oblivious_config, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_proxy_hop_create_oblivious_http_with_context";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null oblivious_config, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_56:

    free(backtrace_string);
    goto LABEL_75;
  }
  if (!a2)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_proxy_hop_create_oblivious_http_with_context";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v22, &type, &v39))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null oblivious_config_length", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v39)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v37, "%{public}s called with null oblivious_config_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v32 = type;
    v33 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null oblivious_config_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_proxy_hop_create_oblivious_http_with_context";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_56;
  }
  if (a3)
  {
    v8 = objc_alloc_init(NWConcrete_nw_proxy_hop);
    if (v8)
    {
      options_with_context = nw_oblivious_http_create_options_with_context(a1, a2, a3, a4);
      options = v8->options;
      v8->options = (OS_nw_protocol_options *)options_with_context;

      v11 = v8;
LABEL_25:

      return v8;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v42 = "nw_proxy_hop_create_oblivious_http_with_context";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault(v13, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_proxy_hop_create_oblivious_http_with_context";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s [nw_proxy_hop init] failed", buf, 0xCu);
        }
      }
      else if (v39)
      {
        v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (v16)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v42 = "nw_proxy_hop_create_oblivious_http_with_context";
            v43 = 2082;
            v44 = v16;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s [nw_proxy_hop init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v16);
          if (!v13)
            goto LABEL_25;
          goto LABEL_24;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_proxy_hop_create_oblivious_http_with_context";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s [nw_proxy_hop init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_proxy_hop_create_oblivious_http_with_context";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s [nw_proxy_hop init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v13)
      goto LABEL_25;
LABEL_24:
    free(v13);
    goto LABEL_25;
  }
  __nwlog_obj();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v42 = "nw_proxy_hop_create_oblivious_http_with_context";
  v22 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault(v22, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null request_path", buf, 0xCu);
      }
LABEL_74:

      goto LABEL_75;
    }
    if (!v39)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v38, "%{public}s called with null request_path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null request_path, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_proxy_hop_create_oblivious_http_with_context";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null request_path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_56;
  }
LABEL_75:
  if (v22)
    free(v22);
  return 0;
}

void sub_1839A8858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_enable_chunked_oblivious_http(void *a1, char a2)
{
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (nw_protocol_options_is_oblivious_http(v3[5]))
  {
    nw_oblivious_http_set_use_chunks(v4[5], a2);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void sub_1839A8D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_oblivious_http_context_id(void *a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_proxy_hop_set_oblivious_http_context_id";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_oblivious_http_context_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_proxy_hop_set_oblivious_http_context_id";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_oblivious_http_context_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_hop_set_oblivious_http_context_id";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (nw_protocol_options_is_oblivious_http(v3[5]))
  {
    nw_oblivious_http_set_context_id(v4[5], a2);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_hop_set_oblivious_http_context_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_oblivious_http_context_id";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_oblivious_http_context_id";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_hop_set_oblivious_http_context_id";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_hop_set_oblivious_http_context_id";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null nw_protocol_options_is_oblivious_http(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void sub_1839A91E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_next_hop_host(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_proxy_hop_add_next_hop_host";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_proxy_hop_add_next_hop_host";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8)
          goto LABEL_5;
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_proxy_hop_add_next_hop_host";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null next_hop_host", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null next_hop_host, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null next_hop_host, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_proxy_hop_add_next_hop_host";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null next_hop_host, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  v6 = (void *)v3[5];
  if (!v6)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_proxy_hop_add_next_hop_host";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null hop->options", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null hop->options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null hop->options, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_proxy_hop_add_next_hop_host";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null hop->options, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8)
      goto LABEL_5;
    goto LABEL_56;
  }
  nw_protocol_options_add_proxy_next_hop(v6, v5);
LABEL_5:

}

void nw_proxy_hop_add_extra_header(void *a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_proxy_hop_add_extra_header";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v8)
          goto LABEL_6;
LABEL_73:
        free(v8);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v27, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  if (!nw_protocol_options_is_masque(v5[5]))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v31)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v28, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_proxy_hop_add_extra_header";
      v35 = 2082;
      v36 = v20;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_46;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null header", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v31)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v29, "%{public}s called with null header, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null header, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_proxy_hop_add_extra_header";
      v35 = 2082;
      v36 = v20;
      _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null header, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_46;
  }
  if (!a3)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_add_extra_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null value", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v31)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v30, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_proxy_hop_add_extra_header";
      v35 = 2082;
      v36 = v20;
      _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_46:

    free(v20);
    if (!v8)
      goto LABEL_6;
    goto LABEL_73;
  }
  nw_masque_options_add_extra_header(v6[5], a2, a3);
LABEL_6:

}

void nw_proxy_hop_add_token_header_with_agent_type(void *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  void **v11;
  void **v12;
  char *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  os_log_type_t v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  char v59;
  char *v60;
  os_log_type_t v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = v11;
  if (!v11)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v61)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v34 = v60;
      v35 = os_log_type_enabled(v16, (os_log_type_t)v60);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_proxy_hop_add_token_header_with_agent_type";
          v64 = 2082;
          v65 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v34, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_142:
        if (!v15)
          goto LABEL_11;
        goto LABEL_143;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v34, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v51 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v51, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_138:

    goto LABEL_142;
  }
  if (!nw_protocol_options_is_masque(v11[5]))
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v52 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v52, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v37 = v60;
    v38 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v37, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v16, v37, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a2)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null header", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v53 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v53, "%{public}s called with null header, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v39 = v60;
    v40 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v39, "%{public}s called with null header, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v16, v39, "%{public}s called with null header, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null value_prefix", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v54 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v54, "%{public}s called with null value_prefix, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v41 = v60;
    v42 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s called with null value_prefix, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s called with null value_prefix, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a4)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v25 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null value_suffix", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v55 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v55, "%{public}s called with null value_suffix, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v43 = v60;
    v44 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v43, "%{public}s called with null value_suffix, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v16, v43, "%{public}s called with null value_suffix, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a5)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v27 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null agent_domain", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v56 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v56, "%{public}s called with null agent_domain, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v45 = v60;
    v46 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v45, "%{public}s called with null agent_domain, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v16, v45, "%{public}s called with null agent_domain, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a6)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61))
      goto LABEL_142;
    if (v60 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v29 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v29, "%{public}s called with null agent_type", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v57 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v57, "%{public}s called with null agent_type, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v47 = v60;
    v48 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v16, v47, "%{public}s called with null agent_type, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v16, v47, "%{public}s called with null agent_type, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_86:

    goto LABEL_92;
  }
  v60 = 0;
  asprintf(&v60, "%s%s%s%s%s%s%s%s%s%s", a3, "<token=", "{domain=", a5, "}", "[type=", a6, "]", ">", a4);
  if (!v60)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    v15 = (const char *)_os_log_send_and_compose_impl();

    v61 = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v15, &v61, &v59))
      goto LABEL_142;
    if (v61 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = v61;
      if (os_log_type_enabled(v31, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null value", buf, 0xCu);
      }
LABEL_141:

      goto LABEL_142;
    }
    if (!v59)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v58 = v61;
      if (os_log_type_enabled(v31, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v31, v58, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_141;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v31 = objc_claimAutoreleasedReturnValue();
    v49 = v61;
    v50 = os_log_type_enabled(v31, v61);
    if (!v36)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_182FBE000, v31, v49, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_141;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      v64 = 2082;
      v65 = v36;
      _os_log_impl(&dword_182FBE000, v31, v49, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_92:
    free(v36);
    if (!v15)
      goto LABEL_11;
LABEL_143:
    v13 = (char *)v15;
    goto LABEL_10;
  }
  nw_masque_options_add_extra_header(v12[5], a2, (uint64_t)v60);
  v13 = v60;
  if (v60)
LABEL_10:
    free(v13);
LABEL_11:

}

void sub_1839AB254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_token_header(void *a1, uint64_t a2, const char *a3, const char *a4, const unsigned __int8 *a5)
{
  void **v9;
  void **v10;
  char *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  char v52;
  os_log_type_t v53;
  char *v54;
  os_log_type_t type[4];
  const char *v56;
  __int16 v57;
  char *v58;
  uuid_string_t out;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v13, type, &v54))
      goto LABEL_125;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null hop", (uint8_t *)out, 0xCu);
      }
    }
    else if ((_BYTE)v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type[0];
      v31 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
          *(_WORD *)&out[12] = 2082;
          *(_QWORD *)&out[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null hop, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
        }

        free(backtrace_string);
LABEL_125:
        if (!v13)
          goto LABEL_10;
        goto LABEL_126;
      }
      if (v31)
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null hop, no backtrace", (uint8_t *)out, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v45 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v45, "%{public}s called with null hop, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
    }
LABEL_121:

    goto LABEL_125;
  }
  if (!nw_protocol_options_is_masque(v9[5]))
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v13, type, &v54))
      goto LABEL_125;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v46 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v46, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v33 = type[0];
    v34 = os_log_type_enabled(v14, type[0]);
    if (!v32)
    {
      if (v34)
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v33, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (v34)
    {
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
      *(_WORD *)&out[12] = 2082;
      *(_QWORD *)&out[14] = v32;
      _os_log_impl(&dword_182FBE000, v14, v33, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
    }
    goto LABEL_75;
  }
  if (!a2)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v13, type, &v54))
      goto LABEL_125;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null header", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v47 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v47, "%{public}s called with null header, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v35 = type[0];
    v36 = os_log_type_enabled(v14, type[0]);
    if (!v32)
    {
      if (v36)
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v35, "%{public}s called with null header, no backtrace", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (v36)
    {
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
      *(_WORD *)&out[12] = 2082;
      *(_QWORD *)&out[14] = v32;
      _os_log_impl(&dword_182FBE000, v14, v35, "%{public}s called with null header, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
    }
    goto LABEL_75;
  }
  if (!a3)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v13, type, &v54))
      goto LABEL_125;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null value_prefix", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v48 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v48, "%{public}s called with null value_prefix, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v37 = type[0];
    v38 = os_log_type_enabled(v14, type[0]);
    if (!v32)
    {
      if (v38)
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null value_prefix, no backtrace", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (v38)
    {
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
      *(_WORD *)&out[12] = 2082;
      *(_QWORD *)&out[14] = v32;
      _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null value_prefix, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
    }
    goto LABEL_75;
  }
  if (!a4)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v13, type, &v54))
      goto LABEL_125;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null value_suffix", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v49 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v49, "%{public}s called with null value_suffix, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v39 = type[0];
    v40 = os_log_type_enabled(v14, type[0]);
    if (!v32)
    {
      if (v40)
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v39, "%{public}s called with null value_suffix, no backtrace", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (v40)
    {
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
      *(_WORD *)&out[12] = 2082;
      *(_QWORD *)&out[14] = v32;
      _os_log_impl(&dword_182FBE000, v14, v39, "%{public}s called with null value_suffix, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
    }
    goto LABEL_75;
  }
  if (!a5)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v13, type, &v54))
      goto LABEL_125;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null token_agent", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v50 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v50, "%{public}s called with null token_agent, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v41 = type[0];
    v42 = os_log_type_enabled(v14, type[0]);
    if (!v32)
    {
      if (v42)
      {
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v14, v41, "%{public}s called with null token_agent, no backtrace", (uint8_t *)out, 0xCu);
      }
      goto LABEL_121;
    }
    if (v42)
    {
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_proxy_hop_add_token_header";
      *(_WORD *)&out[12] = 2082;
      *(_QWORD *)&out[14] = v32;
      _os_log_impl(&dword_182FBE000, v14, v41, "%{public}s called with null token_agent, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
    }
LABEL_75:

    goto LABEL_81;
  }
  memset(out, 0, sizeof(out));
  uuid_unparse(a5, out);
  v54 = 0;
  asprintf(&v54, "%s%s%s%s%s", a3, "<token=", out, ">", a4);
  if (!v54)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)type = 136446210;
    v56 = "nw_proxy_hop_add_token_header";
    v13 = (const char *)_os_log_send_and_compose_impl();

    v53 = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v13, &v53, &v52))
      goto LABEL_125;
    if (v53 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = v53;
      if (os_log_type_enabled(v27, v53))
      {
        *(_DWORD *)type = 136446210;
        v56 = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null value", (uint8_t *)type, 0xCu);
      }
LABEL_124:

      goto LABEL_125;
    }
    if (!v52)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v51 = v53;
      if (os_log_type_enabled(v27, v53))
      {
        *(_DWORD *)type = 136446210;
        v56 = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v27, v51, "%{public}s called with null value, backtrace limit exceeded", (uint8_t *)type, 0xCu);
      }
      goto LABEL_124;
    }
    v32 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v27 = objc_claimAutoreleasedReturnValue();
    v43 = v53;
    v44 = os_log_type_enabled(v27, v53);
    if (!v32)
    {
      if (v44)
      {
        *(_DWORD *)type = 136446210;
        v56 = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_182FBE000, v27, v43, "%{public}s called with null value, no backtrace", (uint8_t *)type, 0xCu);
      }
      goto LABEL_124;
    }
    if (v44)
    {
      *(_DWORD *)type = 136446466;
      v56 = "nw_proxy_hop_add_token_header";
      v57 = 2082;
      v58 = v32;
      _os_log_impl(&dword_182FBE000, v27, v43, "%{public}s called with null value, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
    }

LABEL_81:
    free(v32);
    if (!v13)
      goto LABEL_10;
LABEL_126:
    v11 = (char *)v13;
    goto LABEL_9;
  }
  nw_masque_options_add_extra_header(v10[5], a2, (uint64_t)v54);
  v11 = v54;
  if (v54)
LABEL_9:
    free(v11);
LABEL_10:

}

void sub_1839AC1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_server_raw_public_key(void *a1, const UInt8 *a2, CFIndex a3)
{
  id v5;
  CFMutableArrayRef *v6;
  const __CFAllocator *v7;
  CFDataRef v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (CFMutableArrayRef *)v5;
  if (!v5)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_proxy_hop_add_server_raw_public_key";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_proxy_hop_add_server_raw_public_key";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_75:
        if (!v10)
          goto LABEL_9;
LABEL_76:
        free(v10);
        goto LABEL_9;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v29, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_74:

    goto LABEL_75;
  }
  if (!nw_protocol_options_is_masque(*((void **)v5 + 5)))
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_proxy_hop_add_server_raw_public_key";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v33)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v30, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_proxy_hop_add_server_raw_public_key";
      v37 = 2082;
      v38 = v22;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_proxy_hop_add_server_raw_public_key";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null key_bytes", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v33)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v31, "%{public}s called with null key_bytes, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null key_bytes, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_proxy_hop_add_server_raw_public_key";
      v37 = 2082;
      v38 = v22;
      _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null key_bytes, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!a3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_proxy_hop_add_server_raw_public_key";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null key_length", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v33)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v32, "%{public}s called with null key_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null key_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_proxy_hop_add_server_raw_public_key";
      v37 = 2082;
      v38 = v22;
      _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null key_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(v22);
    if (!v10)
      goto LABEL_9;
    goto LABEL_76;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!v6[7])
    v6[7] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = CFDataCreate(v7, a2, a3);
  CFArrayAppendValue(v6[7], v8);
  if (v8)
    CFRelease(v8);
LABEL_9:

}

void sub_1839ACAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_server_raw_public_key(void *a1, const UInt8 *a2, CFIndex a3)
{
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_proxy_hop_set_server_raw_public_key";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v8)
          goto LABEL_6;
LABEL_73:
        free(v8);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v27, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  if (!nw_protocol_options_is_masque(v5[5]))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v31)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v28, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_proxy_hop_set_server_raw_public_key";
      v35 = 2082;
      v36 = v20;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_46;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null key_bytes", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v31)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v29, "%{public}s called with null key_bytes, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null key_bytes, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_proxy_hop_set_server_raw_public_key";
      v35 = 2082;
      v36 = v20;
      _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null key_bytes, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_46;
  }
  if (!a3)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_hop_set_server_raw_public_key";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v8, &type, &v31))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null key_length", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v31)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v30, "%{public}s called with null key_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v9, type);
    if (!v20)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null key_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_proxy_hop_set_server_raw_public_key";
      v35 = 2082;
      v36 = v20;
      _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null key_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_46:

    free(v20);
    if (!v8)
      goto LABEL_6;
    goto LABEL_73;
  }
  nw_proxy_hop_add_server_raw_public_key(v6, a2, a3);
LABEL_6:

}

void sub_1839AD3B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_client_identity_reference(void *a1, const void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_proxy_hop_set_client_identity_reference";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_hop_set_client_identity_reference";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_proxy_hop_set_client_identity_reference";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v7)
          goto LABEL_6;
LABEL_41:
        free(v7);
        goto LABEL_6;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_hop_set_client_identity_reference";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_hop_set_client_identity_reference";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    v5 = (const void *)v3[8];
    if (v5)
    {
      CFRelease(v5);
      v4[8] = 0;
    }
    v4[8] = CFRetain(a2);
    goto LABEL_6;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_proxy_hop_set_client_identity_reference";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_hop_set_client_identity_reference";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null persistent_reference", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_hop_set_client_identity_reference";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null persistent_reference, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_hop_set_client_identity_reference";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null persistent_reference, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_proxy_hop_set_client_identity_reference";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null persistent_reference, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_41;
LABEL_6:

}

void sub_1839AD884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_client_certificate_reference(void *a1, const void *a2)
{
  id v3;
  _QWORD *v4;
  __CFArray *Mutable;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_proxy_hop_add_client_certificate_reference";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_hop_add_client_certificate_reference";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_proxy_hop_add_client_certificate_reference";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v7)
          goto LABEL_6;
LABEL_41:
        free(v7);
        goto LABEL_6;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_hop_add_client_certificate_reference";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_hop_add_client_certificate_reference";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    Mutable = (__CFArray *)*((_QWORD *)v3 + 9);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v4[9] = Mutable;
    }
    CFArrayAppendValue(Mutable, a2);
    goto LABEL_6;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_proxy_hop_add_client_certificate_reference";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_hop_add_client_certificate_reference";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null persistent_reference", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_hop_add_client_certificate_reference";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null persistent_reference, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_hop_add_client_certificate_reference";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null persistent_reference, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_proxy_hop_add_client_certificate_reference";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null persistent_reference, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_41;
LABEL_6:

}

void sub_1839ADD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_use_x25519(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 0x80;
    else
      v5 = 0;
    *((_BYTE *)v3 + 80) = v5 & 0x80 | *((_BYTE *)v3 + 80) & 0x7F;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_set_use_x25519";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_use_x25519";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_set_use_x25519";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_use_x25519";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_use_x25519";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_proxy_hop_set_trust_certs(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 16;
    else
      v5 = 0;
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xEF | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_set_trust_certs";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_trust_certs";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_set_trust_certs";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_trust_certs";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_set_trust_certs";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_proxy_hop_set_enable_demux(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 81) = *((_BYTE *)v3 + 81) & 0xFE | a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_hop_set_enable_demux";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_enable_demux";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_hop_set_enable_demux";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_enable_demux";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_hop_set_enable_demux";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_proxy_hop_supports_udp_proxying_over_http2(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *((_BYTE *)v3 + 81) = *((_BYTE *)v3 + 81) & 0xFD | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

NWConcrete_nw_proxy_config *nw_proxy_config_create_default_privacy_proxy(void *a1)
{
  id v1;
  _BOOL4 v2;
  NWConcrete_nw_proxy_config *privacy_proxy_internal;

  v1 = a1;
  v2 = networkd_settings_get_BOOL((const char *)nw_setting_disable_swift_tls_privacy_proxy);
  privacy_proxy_internal = nw_proxy_config_create_privacy_proxy_internal(v1, !v2);

  return privacy_proxy_internal;
}

void sub_1839AE848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_privacy_proxy_internal(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NWConcrete_nw_protocol_stack *v8;
  uint64_t v9;
  NWConcrete_nw_protocol_options *v10;
  uint64_t v11;
  _BOOL4 is_masque;
  void *v13;
  NWConcrete_nw_protocol_options *v14;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  NWConcrete_nw_proxy_config *v21;
  NWConcrete_nw_protocol_options *v22;
  NWConcrete_nw_protocol_options *v23;
  char v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NWConcrete_nw_protocol_options *v29;
  NWConcrete_nw_protocol_options *v30;
  id v31;
  void *v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  NWConcrete_nw_protocol_options *v38;
  NWConcrete_nw_protocol_options *v39;
  id v40;
  id v41;
  id v42;
  char v43;
  NWConcrete_nw_protocol_stack *v44;
  NWConcrete_nw_protocol_options *v45;
  id v46;
  NWConcrete_nw_protocol_options *v47;
  NWConcrete_nw_protocol_options *v48;
  char v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  char v55;
  void *v56;
  id v57;
  uint64_t v58;
  void *v59;
  NWConcrete_nw_protocol_options *v60;
  id v61;
  id v62;
  id v63;
  char v64;
  NWConcrete_nw_protocol_stack *v65;
  NWConcrete_nw_protocol_options *v66;
  id v67;
  id v68;
  NWConcrete_nw_protocol_options *v69;
  id v70;
  id v71;
  void *v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  void *v77;
  os_log_type_t v78;
  char *backtrace_string;
  os_log_type_t v80;
  _BOOL4 v81;
  char *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  os_log_type_t v85;
  os_log_type_t v86;
  NWConcrete_nw_protocol_options *v87;
  NWConcrete_nw_protocol_options *v88;
  NWConcrete_nw_protocol_options *v89;
  NWConcrete_nw_protocol_options *v90;
  NWConcrete_nw_protocol_options *protocol;
  NWConcrete_nw_protocol_options *v92;
  NWConcrete_nw_protocol_options *v93;
  char v94;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v97;
  __int16 v98;
  char *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v97 = "nw_proxy_config_create_privacy_proxy_internal";
    v74 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v94 = 0;
    if (!__nwlog_fault(v74, &type, &v94))
      goto LABEL_207;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v76 = type;
      if (os_log_type_enabled(v75, type))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v94)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v80 = type;
      v81 = os_log_type_enabled(v75, type);
      if (backtrace_string)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446466;
          v97 = "nw_proxy_config_create_privacy_proxy_internal";
          v98 = 2082;
          v99 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v75, v80, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v74)
          goto LABEL_209;
        goto LABEL_208;
      }
      if (v81)
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_182FBE000, v75, v80, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v85 = type;
      if (os_log_type_enabled(v75, type))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_182FBE000, v75, v85, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_206;
  }
  v6 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  v7 = v5 - v6;
  if (v5 == v6)
  {
    __nwlog_obj();
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v97 = "nw_proxy_config_create_privacy_proxy_internal";
    v74 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v94 = 0;
    if (!__nwlog_fault(v74, &type, &v94))
      goto LABEL_207;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v78 = type;
      if (os_log_type_enabled(v75, type))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_182FBE000, v75, v78, "%{public}s called with null (hop_count > 0)", buf, 0xCu);
      }
    }
    else if (v94)
    {
      v82 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v83 = type;
      v84 = os_log_type_enabled(v75, type);
      if (v82)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          v97 = "nw_proxy_config_create_privacy_proxy_internal";
          v98 = 2082;
          v99 = v82;
          _os_log_impl(&dword_182FBE000, v75, v83, "%{public}s called with null (hop_count > 0), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v82);
LABEL_207:
        if (!v74)
        {
LABEL_209:
          v21 = 0;
          goto LABEL_173;
        }
LABEL_208:
        free(v74);
        goto LABEL_209;
      }
      if (v84)
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_182FBE000, v75, v83, "%{public}s called with null (hop_count > 0), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v86 = type;
      if (os_log_type_enabled(v75, type))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_182FBE000, v75, v86, "%{public}s called with null (hop_count > 0), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_206:

    goto LABEL_207;
  }
  v8 = objc_alloc_init(NWConcrete_nw_protocol_stack);
  if (v7 >> 3 == 2)
  {
    nw_array_get_object_at_index((uint64_t)v4, 0);
    v9 = objc_claimAutoreleasedReturnValue();
    nw_array_get_object_at_index((uint64_t)v4, 1uLL);
    v11 = objc_claimAutoreleasedReturnValue();
    v93 = (NWConcrete_nw_protocol_options *)v11;
    if (nw_protocol_options_is_masque(*(void **)(v9 + 40)))
    {
      is_masque = nw_protocol_options_is_masque(*(void **)(v11 + 40));
      v13 = *(void **)(v11 + 40);
      if (is_masque)
      {
        v92 = nw_protocol_options_copy(v13);
        nw_protocol_options_set_proxy_endpoint(v92, *(void **)(v11 + 24), 1);
        v14 = nw_protocol_options_copy(*(void **)(v9 + 40));
        nw_protocol_options_set_proxy_endpoint(v14, *(void **)(v9 + 24), 0);
        nw_masque_options_set_forced_protocol(v14, 2);
        nw_masque_options_set_target_endpoint(v14, *(_QWORD *)(v11 + 24));
        protocol = v14;
        if (nw_protocol_copy_http3_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
        options = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
        v16 = options;
        if ((*(_BYTE *)(v11 + 80) & 2) != 0)
        {
          nw_http3_set_0rtt_enabled(options, 1);
          nw_http3_set_idle_timeout(v16, 30);
          nw_http3_set_keepalive_mode(v16, 2);
          v28 = v11 + 8;
          if (!uuid_is_null((const unsigned __int8 *)&v93->definition))
            nw_http3_set_resumable_session_agent(v16, v28);
        }
        else
        {
          nw_http3_set_idle_timeout(options, 900);
          nw_http3_set_keepalive_mode(v16, 1);
        }
        if (nw_protocol_copy_http3_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
        v29 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
        v90 = v29;
        if ((*(_BYTE *)(v9 + 80) & 2) != 0)
        {
          nw_http3_set_0rtt_enabled(v29, 1);
          nw_http3_set_idle_timeout(v90, 30);
          nw_http3_set_keepalive_mode(v90, 2);
          if (!uuid_is_null((const unsigned __int8 *)(v9 + 8)))
            nw_http3_set_resumable_session_agent(v90, v9 + 8);
        }
        else
        {
          nw_http3_set_idle_timeout(v29, 60);
          nw_http3_set_keepalive_mode(v90, 1);
        }
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        v30 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        v89 = v30;
        v31 = nw_quic_stream_copy_shared_connection_options(v30);
        v32 = v31;
        v33 = v93->log_id_str[32];
        if ((v33 & 4) != 0)
        {
          nw_quic_connection_set_enable_l4s(v31, 1);
          v33 = v93->log_id_str[32];
        }
        if ((v33 & 8) != 0)
          nw_quic_connection_set_enable_multipath(v32, 1);
        nw_quic_connection_set_idle_timeout(v32, 0);
        nw_quic_connection_set_max_datagram_frame_size(v32, 0xFFFF);
        nw_quic_connection_set_max_udp_payload_size(v32, 1472);
        nw_quic_connection_set_datagram_variant_flow_id_enabled(v32, 1);
        if (nw_masque_options_get_version(v92) == 2)
        {
          nw_quic_connection_set_datagram_quarter_stream_id(v32, 1);
          nw_quic_connection_set_datagram_context_id(v32, 1);
        }
        nw_quic_connection_set_source_connection_id_length(v32, 8);
        nw_quic_connection_set_initial_packet_size(v32, 1304);
        v34 = *(void **)v93->log_id_str;
        if (v34)
        {
          v35 = v34;
          nw_quic_connection_set_sec_protocol_options(v32, v35);

          v30 = v89;
        }
        if (*(_QWORD *)&v93->log_id_str[8])
        {
          if (a2)
          {
            nw_quic_connection_set_use_swift_tls(v32, 1);
            if (v93->log_id_str[32] < 0)
              nw_quic_connection_set_use_x25519(v32, 1);
          }
          nw_quic_connection_set_server_raw_public_keys(v32, *(_QWORD *)&v93->log_id_str[8]);
        }
        else
        {
          v36 = *(_QWORD *)&v93->log_id_str[16];
          if (v36)
          {
            nw_quic_connection_set_client_identity_reference(v32, v36, *(_QWORD *)&v93->log_id_str[24]);
          }
          else if ((v93->log_id_str[32] & 0x10) != 0)
          {
            nw_quic_connection_set_override_trust_certs_for_tests(v32, 1);
          }
        }
        nw_quic_connection_add_h3_alpn(v32, 1);
        nw_quic_connection_set_keepalive_count(v32, 3);
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        v88 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        v53 = nw_quic_stream_copy_shared_connection_options(v88);
        v54 = v53;
        v55 = *(_BYTE *)(v9 + 80);
        if ((v55 & 4) != 0)
        {
          nw_quic_connection_set_enable_l4s(v53, 1);
          v55 = *(_BYTE *)(v9 + 80);
        }
        if ((v55 & 8) != 0)
          nw_quic_connection_set_enable_multipath(v54, 1);
        nw_quic_connection_set_idle_timeout(v54, 0);
        nw_quic_connection_set_max_datagram_frame_size(v54, 0xFFFF);
        nw_quic_connection_set_max_udp_payload_size(v54, 1472);
        nw_quic_connection_set_datagram_variant_flow_id_enabled(v54, 1);
        if (nw_masque_options_get_version(protocol) == 2)
        {
          nw_quic_connection_set_datagram_quarter_stream_id(v54, 1);
          nw_quic_connection_set_datagram_context_id(v54, 1);
        }
        nw_quic_connection_set_source_connection_id_length(v54, 8);
        nw_quic_connection_set_initial_packet_size(v54, 1350);
        nw_quic_connection_set_pmtud_for_non_transport(v54, 1);
        nw_quic_connection_set_migration_for_non_transport(v54, 1);
        v56 = *(void **)(v9 + 48);
        if (v56)
        {
          v57 = v56;
          nw_quic_connection_set_sec_protocol_options(v54, v57);

          v30 = v89;
        }
        if (*(_QWORD *)(v9 + 56))
        {
          if (a2)
          {
            nw_quic_connection_set_use_swift_tls(v54, 1);
            if (*(char *)(v9 + 80) < 0)
              nw_quic_connection_set_use_x25519(v54, 1);
          }
          nw_quic_connection_set_server_raw_public_keys(v54, *(_QWORD *)(v9 + 56));
        }
        else
        {
          v58 = *(_QWORD *)(v9 + 64);
          if (v58)
          {
            nw_quic_connection_set_client_identity_reference(v54, v58, *(_QWORD *)(v9 + 72));
          }
          else if ((*(_BYTE *)(v9 + 80) & 0x10) != 0)
          {
            nw_quic_connection_set_override_trust_certs_for_tests(v54, 1);
          }
        }
        nw_quic_connection_add_h3_alpn(v54, 1);
        nw_quic_connection_set_keepalive_count(v54, 3);
        if (nw_protocol_demux_copy_definition::onceToken != -1)
          dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
        if (nw_protocol_demux_copy_definition::definition)
        {
          v59 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
          v87 = nw_protocol_create_options(v59);
          if (v59)
            os_release(v59);
          v30 = v89;
        }
        else
        {
          v87 = nw_protocol_create_options(0);
        }
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v60 = nw_protocol_create_options((void *)g_udp_definition);
        nw_udp_options_set_use_quic_stats(v60, 1);
        nw_udp_options_set_no_metadata(v60, 1);
        nw_protocol_stack_append_application_protocol(v8, v92);
        nw_protocol_stack_append_application_protocol(v8, v16);
        nw_protocol_stack_append_application_protocol(v8, v30);
        nw_protocol_stack_append_application_protocol(v8, protocol);
        nw_protocol_stack_append_application_protocol(v8, v90);
        nw_protocol_stack_append_application_protocol(v8, v88);
        nw_protocol_stack_append_application_protocol(v8, v87);
        nw_protocol_stack_set_transport_protocol(&v8->super, &v60->super);
        v61 = nw_protocol_options_copy_proxy_endpoint_for_stack(protocol);
        v21 = nw_proxy_config_create_with_stack(v61, v8);

        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v62 = (id)g_udp_definition;
        nw_proxy_config_set_alternate_protocol_stack(v21, 0, v62, 4u);

        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        v63 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
        nw_proxy_config_set_alternate_protocol_stack(v21, 0, v63, 3u);

        v64 = v93->log_id_str[32];
        if ((v64 & 1) != 0)
        {
          nw_proxy_config_set_alternate_protocol_stack(v21, 0, 0, 2u);
          v64 = v93->log_id_str[32];
        }
        if ((v64 & 0x40) != 0)
        {
          v65 = objc_alloc_init(NWConcrete_nw_protocol_stack);
          v66 = nw_masque_options_copy_listener_options(v92);
          nw_protocol_stack_append_application_protocol(v65, v66);

          nw_protocol_stack_append_application_protocol(v65, v16);
          nw_protocol_stack_append_application_protocol(v65, v89);
          nw_protocol_stack_append_application_protocol(v65, protocol);
          nw_protocol_stack_append_application_protocol(v65, v90);
          nw_protocol_stack_append_application_protocol(v65, v88);
          nw_protocol_stack_append_application_protocol(v65, v87);
          nw_protocol_stack_set_transport_protocol(&v65->super, &v60->super);
          if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
            dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
          v67 = (id)g_udp_definition;
          nw_proxy_config_set_listener_protocol_stack(v21, v65, v67, 4u);

          v30 = v89;
        }
        nw_proxy_config_set_is_privacy_proxy(v21, 1, 0);
        nw_proxy_config_set_multipath_service(v21, 1);

LABEL_170:
LABEL_171:

        nw_proxy_config_set_type(v21, 3006);
        goto LABEL_172;
      }
      if (nw_protocol_options_is_oblivious_http(v13))
      {
        v92 = nw_protocol_options_copy(*(void **)(v9 + 40));
        nw_protocol_options_set_proxy_endpoint(v92, *(void **)(v9 + 24), 0);
        protocol = nw_protocol_options_copy(*(void **)(v11 + 40));
        if (nw_protocol_copy_http3_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
        v22 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
        v16 = v22;
        if ((*(_BYTE *)(v9 + 80) & 2) != 0)
        {
          nw_http3_set_0rtt_enabled(v22, 1);
          nw_http3_set_idle_timeout(v16, 30);
          nw_http3_set_keepalive_mode(v16, 2);
          if (!uuid_is_null((const unsigned __int8 *)(v9 + 8)))
            nw_http3_set_resumable_session_agent(v16, v9 + 8);
        }
        else
        {
          nw_http3_set_idle_timeout(v22, 60);
          nw_http3_set_keepalive_mode(v16, 1);
        }
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        v90 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        v47 = (NWConcrete_nw_protocol_options *)nw_quic_stream_copy_shared_connection_options(v90);
        v48 = v47;
        v49 = *(_BYTE *)(v9 + 80);
        if ((v49 & 4) != 0)
        {
          nw_quic_connection_set_enable_l4s(v47, 1);
          v49 = *(_BYTE *)(v9 + 80);
        }
        if ((v49 & 8) != 0)
          nw_quic_connection_set_enable_multipath(v48, 1);
        nw_quic_connection_set_idle_timeout(v48, 0);
        nw_quic_connection_set_max_datagram_frame_size(v48, 0xFFFF);
        nw_quic_connection_set_datagram_variant_flow_id_enabled(v48, 1);
        if (nw_masque_options_get_version(v92) == 2)
        {
          nw_quic_connection_set_datagram_quarter_stream_id(v48, 1);
          nw_quic_connection_set_datagram_context_id(v48, 1);
        }
        nw_quic_connection_set_source_connection_id_length(v48, 8);
        nw_quic_connection_set_initial_packet_size(v48, 1350);
        v50 = *(void **)(v9 + 48);
        if (v50)
        {
          v51 = v50;
          nw_quic_connection_set_sec_protocol_options(v48, v51);

        }
        if (*(_QWORD *)(v9 + 56))
        {
          if (a2)
          {
            nw_quic_connection_set_use_swift_tls(v48, 1);
            if (*(char *)(v9 + 80) < 0)
              nw_quic_connection_set_use_x25519(v48, 1);
          }
          nw_quic_connection_set_server_raw_public_keys(v48, *(_QWORD *)(v9 + 56));
        }
        else
        {
          v52 = *(_QWORD *)(v9 + 64);
          if (v52)
          {
            nw_quic_connection_set_client_identity_reference(v48, v52, *(_QWORD *)(v9 + 72));
          }
          else if ((*(_BYTE *)(v9 + 80) & 0x10) != 0)
          {
            nw_quic_connection_set_override_trust_certs_for_tests(v48, 1);
          }
        }
        nw_quic_connection_add_h3_alpn(v48, 1);
        nw_quic_connection_set_keepalive_count(v48, 3);
        nw_protocol_stack_append_application_protocol(v8, protocol);
        nw_protocol_stack_append_application_protocol(v8, v92);
        nw_protocol_stack_append_application_protocol(v8, v16);
        nw_protocol_stack_set_transport_protocol(&v8->super, &v90->super);
        v68 = nw_protocol_options_copy_proxy_endpoint_for_stack(v92);
        v21 = nw_proxy_config_create_with_stack(v68, v8);

        nw_proxy_config_set_is_privacy_proxy(v21, 1, 0);
        v69 = v48;
        if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
        v70 = (id)nw_protocol_copy_http_messaging_definition_definition;
        nw_proxy_config_add_required_protocol(v21, v70);

        if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
        v71 = (id)nw_protocol_copy_http_messaging_definition_definition;
        nw_proxy_config_add_protocol_to_remove(v21, v71);

        v30 = v69;
        v32 = (void *)nw_protocol_boringssl_copy_definition();
        nw_proxy_config_add_protocol_to_remove(v21, v32);
        goto LABEL_170;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        v20 = "%{public}s Second hop must be MASQUE or OHTTP";
        goto LABEL_24;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_proxy_config_create_privacy_proxy_internal";
        v20 = "%{public}s First hop must be MASQUE";
LABEL_24:
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0xCu);
      }
    }

    goto LABEL_26;
  }
  if (v7 >> 3 == 1)
  {
    nw_array_get_object_at_index((uint64_t)v4, 0);
    v9 = objc_claimAutoreleasedReturnValue();
    if (nw_protocol_options_is_masque(*(void **)(v9 + 40)))
    {
      v93 = nw_protocol_options_copy(*(void **)(v9 + 40));
      nw_protocol_options_set_proxy_endpoint(v93, *(void **)(v9 + 24), 0);
      if (nw_protocol_copy_http3_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
      v10 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
      v92 = v10;
      if ((*(_BYTE *)(v9 + 80) & 2) != 0)
      {
        nw_http3_set_0rtt_enabled(v10, 1);
        nw_http3_set_idle_timeout(v92, 30);
        nw_http3_set_keepalive_mode(v92, 2);
        if (!uuid_is_null((const unsigned __int8 *)(v9 + 8)))
          nw_http3_set_resumable_session_agent(v92, v9 + 8);
      }
      else
      {
        nw_http3_set_idle_timeout(v10, 60);
        nw_http3_set_keepalive_mode(v92, 1);
      }
      if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
      protocol = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
      v23 = (NWConcrete_nw_protocol_options *)nw_quic_stream_copy_shared_connection_options(protocol);
      v16 = v23;
      v24 = *(_BYTE *)(v9 + 80);
      if ((v24 & 4) != 0)
      {
        nw_quic_connection_set_enable_l4s(v23, 1);
        v24 = *(_BYTE *)(v9 + 80);
      }
      if ((v24 & 8) != 0)
        nw_quic_connection_set_enable_multipath(v16, 1);
      nw_quic_connection_set_idle_timeout(v16, 0);
      nw_quic_connection_set_max_datagram_frame_size(v16, 0xFFFF);
      nw_quic_connection_set_datagram_variant_flow_id_enabled(v16, 1);
      if (nw_masque_options_get_version(v93) == 2)
      {
        nw_quic_connection_set_datagram_quarter_stream_id(v16, 1);
        nw_quic_connection_set_datagram_context_id(v16, 1);
      }
      nw_quic_connection_set_source_connection_id_length(v16, 8);
      nw_quic_connection_set_initial_packet_size(v16, 1350);
      v25 = *(void **)(v9 + 48);
      if (v25)
      {
        v26 = v25;
        nw_quic_connection_set_sec_protocol_options(v16, v26);

      }
      if (*(_QWORD *)(v9 + 56))
      {
        if (a2)
        {
          nw_quic_connection_set_use_swift_tls(v16, 1);
          if (*(char *)(v9 + 80) < 0)
            nw_quic_connection_set_use_x25519(v16, 1);
        }
        nw_quic_connection_set_server_raw_public_keys(v16, *(_QWORD *)(v9 + 56));
      }
      else
      {
        v27 = *(_QWORD *)(v9 + 64);
        if (v27)
        {
          nw_quic_connection_set_client_identity_reference(v16, v27, *(_QWORD *)(v9 + 72));
        }
        else if ((*(_BYTE *)(v9 + 80) & 0x10) != 0)
        {
          nw_quic_connection_set_override_trust_certs_for_tests(v16, 1);
        }
      }
      nw_quic_connection_add_h3_alpn(v16, 1);
      nw_quic_connection_set_keepalive_count(v16, 3);
      nw_protocol_stack_append_application_protocol(v8, v93);
      nw_protocol_stack_append_application_protocol(v8, v92);
      if ((*(_BYTE *)(v9 + 81) & 1) != 0)
      {
        nw_protocol_stack_append_application_protocol(v8, protocol);
        if (nw_protocol_demux_copy_definition::onceToken != -1)
          dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
        if (nw_protocol_demux_copy_definition::definition)
        {
          v37 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
          v38 = nw_protocol_create_options(v37);
          if (v37)
            os_release(v37);
        }
        else
        {
          v38 = nw_protocol_create_options(0);
        }
        nw_protocol_stack_append_application_protocol(v8, v38);
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v39 = nw_protocol_create_options((void *)g_udp_definition);
        nw_udp_options_set_use_quic_stats(v39, 1);
        nw_udp_options_set_no_metadata(v39, 1);
        nw_protocol_stack_set_transport_protocol(&v8->super, &v39->super);

      }
      else
      {
        nw_protocol_stack_set_transport_protocol(&v8->super, &protocol->super);
      }
      v40 = nw_protocol_options_copy_proxy_endpoint_for_stack(v93);
      v21 = nw_proxy_config_create_with_stack(v40, v8);

      if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
        dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
      v41 = (id)g_udp_definition;
      nw_proxy_config_set_alternate_protocol_stack(v21, 0, v41, 4u);

      if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
      v42 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
      nw_proxy_config_set_alternate_protocol_stack(v21, 0, v42, 3u);

      v43 = *(_BYTE *)(v9 + 80);
      if ((v43 & 1) != 0)
      {
        nw_proxy_config_set_alternate_protocol_stack(v21, 0, 0, 2u);
        v43 = *(_BYTE *)(v9 + 80);
      }
      if ((v43 & 0x40) != 0)
      {
        v44 = objc_alloc_init(NWConcrete_nw_protocol_stack);
        v45 = nw_masque_options_copy_listener_options(v93);
        nw_protocol_stack_append_application_protocol(v44, v45);

        nw_protocol_stack_append_application_protocol(v44, v92);
        nw_protocol_stack_set_transport_protocol(&v44->super, &protocol->super);
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v46 = (id)g_udp_definition;
        nw_proxy_config_set_listener_protocol_stack(v21, v44, v46, 4u);

      }
      nw_proxy_config_set_is_privacy_proxy(v21, 1, 0);
      nw_proxy_config_set_multipath_service(v21, 1);
      goto LABEL_171;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v97 = "nw_proxy_config_create_privacy_proxy_internal";
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s First hop must be MASQUE", buf, 0xCu);
    }

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v97 = "nw_proxy_config_create_privacy_proxy_internal";
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s No more than two hops are currently supported", buf, 0xCu);
    }

  }
LABEL_26:
  v21 = 0;
LABEL_172:

LABEL_173:
  return v21;
}

void sub_1839AFFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1839B0220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_boringssl_quic_privacy_proxy(void *a1)
{
  return nw_proxy_config_create_privacy_proxy_internal(a1, 0);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_swift_tls_quic_privacy_proxy(void *a1)
{
  return nw_proxy_config_create_privacy_proxy_internal(a1, 1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_fallback_privacy_proxy(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NWConcrete_nw_protocol_stack *v6;
  uint64_t v7;
  NWConcrete_nw_protocol_options *v8;
  uint64_t v9;
  void *v10;
  NWConcrete_nw_protocol_options *v11;
  id v12;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v14;
  void *v15;
  id v16;
  NWConcrete_nw_protocol_options *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  NWConcrete_nw_proxy_config *v22;
  NWConcrete_nw_protocol_options *v23;
  void *v24;
  id v25;
  NWConcrete_nw_protocol_options *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NWConcrete_nw_protocol_options *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NWConcrete_nw_protocol_options *v35;
  NWConcrete_nw_protocol_options *v36;
  void *v37;
  NWConcrete_nw_protocol_options *v38;
  id v39;
  NWConcrete_nw_protocol_options *v40;
  NWConcrete_nw_protocol_options *v41;
  NWConcrete_nw_protocol_options *v42;
  NWConcrete_nw_protocol_options *v43;
  char v44;
  void *v45;
  id v46;
  uint64_t v47;
  NWConcrete_nw_protocol_options *serializable_options;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NWConcrete_nw_protocol_options *v52;
  NWConcrete_nw_protocol_options *v53;
  id v54;
  id v55;
  id v56;
  NWConcrete_nw_protocol_options *v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  NWConcrete_nw_protocol_options *v63;
  id v64;
  id v65;
  id v66;
  void *v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  void *v72;
  os_log_type_t v73;
  char *backtrace_string;
  os_log_type_t v75;
  _BOOL4 v76;
  char *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  os_log_type_t v80;
  os_log_type_t v81;
  NWConcrete_nw_protocol_options *v82;
  NSObject *p_super;
  char v84;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v87;
  __int16 v88;
  char *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v87 = "nw_proxy_config_create_fallback_privacy_proxy";
    v69 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v84 = 0;
    if (!__nwlog_fault(v69, &type, &v84))
      goto LABEL_177;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v71 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v84)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v75 = type;
      v76 = os_log_type_enabled(v70, type);
      if (backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446466;
          v87 = "nw_proxy_config_create_fallback_privacy_proxy";
          v88 = 2082;
          v89 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v70, v75, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v69)
          goto LABEL_179;
        goto LABEL_178;
      }
      if (v76)
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v70, v75, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v80 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v70, v80, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_176;
  }
  v4 = *((_QWORD *)v1 + 2);
  v3 = *((_QWORD *)v1 + 3);
  v5 = v3 - v4;
  if (v3 == v4)
  {
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v87 = "nw_proxy_config_create_fallback_privacy_proxy";
    v69 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v84 = 0;
    if (!__nwlog_fault(v69, &type, &v84))
      goto LABEL_177;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v73 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v70, v73, "%{public}s called with null (hop_count > 0)", buf, 0xCu);
      }
    }
    else if (v84)
    {
      v77 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v78 = type;
      v79 = os_log_type_enabled(v70, type);
      if (v77)
      {
        if (v79)
        {
          *(_DWORD *)buf = 136446466;
          v87 = "nw_proxy_config_create_fallback_privacy_proxy";
          v88 = 2082;
          v89 = v77;
          _os_log_impl(&dword_182FBE000, v70, v78, "%{public}s called with null (hop_count > 0), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v77);
LABEL_177:
        if (!v69)
        {
LABEL_179:
          v22 = 0;
          goto LABEL_143;
        }
LABEL_178:
        free(v69);
        goto LABEL_179;
      }
      if (v79)
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v70, v78, "%{public}s called with null (hop_count > 0), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      v81 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v70, v81, "%{public}s called with null (hop_count > 0), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_176:

    goto LABEL_177;
  }
  v6 = objc_alloc_init(NWConcrete_nw_protocol_stack);
  if (v5 >> 3 == 2)
  {
    nw_array_get_object_at_index((uint64_t)v2, 0);
    v7 = objc_claimAutoreleasedReturnValue();
    nw_array_get_object_at_index((uint64_t)v2, 1uLL);
    v9 = objc_claimAutoreleasedReturnValue();
    if (nw_protocol_options_is_masque(*(void **)(v7 + 40)))
    {
      if (nw_protocol_options_is_masque(*(void **)(v9 + 40)))
      {
        v14 = nw_protocol_options_copy(*(void **)(v7 + 40));
        v11 = v14;
        v15 = *(void **)(v7 + 32);
        if (!v15)
          v15 = *(void **)(v7 + 24);
        nw_protocol_options_set_proxy_endpoint(v14, v15, 0);
        if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
          dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
        options = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
        nw_http2_set_idle_timeout(options, 60);
        v16 = *(id *)(v7 + 48);
        if (v16)
        {
          v17 = (NWConcrete_nw_protocol_options *)v16;
          sec_protocol_options_add_tls_application_protocol(&v17->super, "h2");
          sec_protocol_options_set_min_tls_protocol_version(&v17->super, tls_protocol_version_TLSv13);

        }
        else
        {
          if (nw_protocol_copy_serializable_tls_definition::onceToken != -1)
            dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72016);
          v17 = nw_protocol_create_options((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
          nw_serializable_tls_set_add_h2_alpn(v17);
          nw_serializable_tls_set_require_tls13(v17);
          v28 = *(_QWORD *)(v7 + 56);
          if (v28)
          {
            nw_serializable_tls_set_server_raw_public_keys(v17, v28);
          }
          else
          {
            v32 = *(_QWORD *)(v7 + 64);
            if (v32)
            {
              nw_serializable_tls_set_client_identity_reference(v17, v32, *(_QWORD *)(v7 + 72));
            }
            else if ((*(_BYTE *)(v7 + 80) & 0x10) != 0)
            {
              nw_serializable_tls_set_trust_certs(v17);
            }
          }
        }
        v82 = v17;
        v34 = *(_QWORD *)(v9 + 32);
        if (!v34)
          v34 = *(_QWORD *)(v9 + 24);
        nw_masque_options_set_target_endpoint(v11, v34);
        v35 = nw_protocol_options_copy(*(void **)(v9 + 40));
        v36 = v35;
        v37 = *(void **)(v9 + 32);
        if (!v37)
          v37 = *(void **)(v9 + 24);
        nw_protocol_options_set_proxy_endpoint(v35, v37, 1);
        p_super = &v36->super;
        if ((*(_BYTE *)(v7 + 81) & 2) != 0)
        {
          nw_masque_options_set_forced_protocol(v11, 2);
          if (nw_protocol_copy_http3_definition_onceToken != -1)
            dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
          v41 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
          v38 = v41;
          if ((*(_BYTE *)(v9 + 80) & 2) != 0)
          {
            nw_http3_set_0rtt_enabled(v41, 1);
            nw_http3_set_idle_timeout(v38, 30);
            nw_http3_set_keepalive_mode(v38, 2);
            if (!uuid_is_null((const unsigned __int8 *)(v9 + 8)))
              nw_http3_set_resumable_session_agent(v38, v9 + 8);
          }
          else
          {
            nw_http3_set_idle_timeout(v41, 900);
            nw_http3_set_keepalive_mode(v38, 1);
          }
          if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
          v40 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
          v42 = (NWConcrete_nw_protocol_options *)nw_quic_stream_copy_shared_connection_options(v40);
          v43 = v42;
          v44 = *(_BYTE *)(v9 + 80);
          if ((v44 & 4) != 0)
          {
            nw_quic_connection_set_enable_l4s(v42, 1);
            v44 = *(_BYTE *)(v9 + 80);
          }
          if ((v44 & 8) != 0)
            nw_quic_connection_set_enable_multipath(v43, 1);
          nw_quic_connection_set_idle_timeout(v43, 0);
          nw_quic_connection_set_max_datagram_frame_size(v43, 0xFFFF);
          nw_quic_connection_set_max_udp_payload_size(v43, 1472);
          nw_quic_connection_set_datagram_variant_flow_id_enabled(v43, 1);
          if (nw_masque_options_get_version(v36) == 2)
          {
            nw_quic_connection_set_datagram_quarter_stream_id(v43, 1);
            nw_quic_connection_set_datagram_context_id(v43, 1);
          }
          nw_quic_connection_set_source_connection_id_length(v43, 8);
          nw_quic_connection_set_initial_packet_size(v43, 1304);
          v45 = *(void **)(v9 + 48);
          if (v45)
          {
            v46 = v45;
            nw_quic_connection_set_sec_protocol_options(v43, v46);

          }
          v47 = *(_QWORD *)(v9 + 56);
          if (v47)
          {
            nw_quic_connection_set_server_raw_public_keys(v43, v47);
          }
          else
          {
            v50 = *(_QWORD *)(v9 + 64);
            if (v50)
            {
              nw_quic_connection_set_client_identity_reference(v43, v50, *(_QWORD *)(v9 + 72));
            }
            else if ((*(_BYTE *)(v9 + 80) & 0x10) != 0)
            {
              nw_quic_connection_set_override_trust_certs_for_tests(v43, 1);
            }
          }
          nw_quic_connection_add_h3_alpn(v43, 1);
          nw_quic_connection_set_keepalive_count(v43, 3);
          nw_protocol_stack_append_application_protocol(v6, p_super);
          nw_protocol_stack_append_application_protocol(v6, v38);
          nw_protocol_stack_append_application_protocol(v6, v40);
          nw_protocol_stack_append_application_protocol(v6, v11);
          nw_protocol_stack_append_application_protocol(v6, options);
          nw_protocol_stack_append_application_protocol(v6, v82);
          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
          v52 = nw_protocol_create_options((void *)g_tcp_definition);
          nw_protocol_stack_set_transport_protocol(&v6->super, &v52->super);

        }
        else
        {
          nw_masque_options_set_forced_protocol(v11, 1);
          if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
            dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
          v38 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
          nw_http2_set_idle_timeout(v38, 900);
          v39 = *(id *)(v9 + 48);
          if (v39)
          {
            v40 = (NWConcrete_nw_protocol_options *)v39;
            sec_protocol_options_add_tls_application_protocol(&v40->super, "h2");
            sec_protocol_options_set_min_tls_protocol_version(&v40->super, tls_protocol_version_TLSv13);

          }
          else
          {
            serializable_options = nw_tls_create_serializable_options();
            nw_serializable_tls_set_add_h2_alpn(serializable_options);
            nw_serializable_tls_set_require_tls13(serializable_options);
            v49 = *(_QWORD *)(v9 + 56);
            if (v49)
            {
              v40 = serializable_options;
              nw_serializable_tls_set_server_raw_public_keys(serializable_options, v49);
            }
            else
            {
              v51 = *(_QWORD *)(v9 + 64);
              if (v51)
              {
                v40 = serializable_options;
                nw_serializable_tls_set_client_identity_reference(serializable_options, v51, *(_QWORD *)(v9 + 72));
              }
              else
              {
                v40 = serializable_options;
                if ((*(_BYTE *)(v9 + 80) & 0x10) != 0)
                  nw_serializable_tls_set_trust_certs(serializable_options);
              }
            }
          }
          nw_protocol_stack_append_application_protocol(v6, v36);
          nw_protocol_stack_append_application_protocol(v6, v38);
          nw_protocol_stack_append_application_protocol(v6, v40);
          nw_protocol_stack_append_application_protocol(v6, v11);
          nw_protocol_stack_append_application_protocol(v6, options);
          nw_protocol_stack_append_application_protocol(v6, v82);
          if (nw_protocol_demux_copy_definition::onceToken != -1)
            dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
          if (nw_protocol_demux_copy_definition::definition)
          {
            v62 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
            v63 = nw_protocol_create_options(v62);
            if (v62)
              os_release(v62);
          }
          else
          {
            v63 = nw_protocol_create_options(0);
          }
          nw_protocol_stack_append_application_protocol(v6, v63);

          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
          v43 = nw_protocol_create_options((void *)g_tcp_definition);
          nw_protocol_stack_set_transport_protocol(&v6->super, &v43->super);
        }
        v61 = v38;

        v64 = nw_protocol_options_copy_proxy_endpoint_for_stack(v11);
        v22 = nw_proxy_config_create_with_stack(v64, v6);

        if (nw_masque_options_get_version(p_super) == 2 || (*(_BYTE *)(v7 + 81) & 2) != 0)
        {
          if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
            dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
          v65 = (id)g_udp_definition;
          nw_proxy_config_set_alternate_protocol_stack(v22, 0, v65, 4u);

          if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
          v66 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          nw_proxy_config_set_alternate_protocol_stack(v22, 0, v66, 3u);

          if ((*(_BYTE *)(v9 + 80) & 1) != 0)
            nw_proxy_config_set_alternate_protocol_stack(v22, 0, 0, 2u);
        }
        nw_proxy_config_set_is_privacy_proxy(v22, 1, 0);
LABEL_140:

LABEL_141:
        nw_proxy_config_set_type(v22, 3006);
        goto LABEL_142;
      }
      if (nw_protocol_options_is_oblivious_http(*(void **)(v9 + 40)))
      {
        v23 = nw_protocol_options_copy(*(void **)(v7 + 40));
        v11 = v23;
        v24 = *(void **)(v7 + 32);
        if (!v24)
          v24 = *(void **)(v7 + 24);
        nw_protocol_options_set_proxy_endpoint(v23, v24, 0);
        options = nw_protocol_options_copy(*(void **)(v9 + 40));
        if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
          dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
        v82 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
        nw_http2_set_idle_timeout(v82, 60);
        v25 = *(id *)(v7 + 48);
        if (v25)
        {
          p_super = v25;
          sec_protocol_options_add_tls_application_protocol(p_super, "h2");
          sec_protocol_options_set_min_tls_protocol_version(p_super, tls_protocol_version_TLSv13);

        }
        else
        {
          v30 = nw_tls_create_serializable_options();
          nw_serializable_tls_set_add_h2_alpn(v30);
          nw_serializable_tls_set_require_tls13(v30);
          v31 = *(_QWORD *)(v7 + 56);
          if (v31)
          {
            p_super = &v30->super;
            nw_serializable_tls_set_server_raw_public_keys(v30, v31);
          }
          else
          {
            v33 = *(_QWORD *)(v7 + 64);
            if (v33)
            {
              p_super = &v30->super;
              nw_serializable_tls_set_client_identity_reference(v30, v33, *(_QWORD *)(v7 + 72));
            }
            else
            {
              p_super = &v30->super;
              if ((*(_BYTE *)(v7 + 80) & 0x10) != 0)
                nw_serializable_tls_set_trust_certs(v30);
            }
          }
        }
        nw_protocol_stack_append_application_protocol(v6, options);
        nw_protocol_stack_append_application_protocol(v6, v11);
        nw_protocol_stack_append_application_protocol(v6, v82);
        nw_protocol_stack_append_application_protocol(v6, p_super);
        if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
          dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
        v57 = nw_protocol_create_options((void *)g_tcp_definition);
        nw_protocol_stack_set_transport_protocol(&v6->super, &v57->super);

        v58 = nw_protocol_options_copy_proxy_endpoint_for_stack(v11);
        v22 = nw_proxy_config_create_with_stack(v58, v6);

        nw_proxy_config_set_is_privacy_proxy(v22, 1, 0);
        if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
        v59 = (id)nw_protocol_copy_http_messaging_definition_definition;
        nw_proxy_config_add_required_protocol(v22, v59);

        if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
        v60 = (id)nw_protocol_copy_http_messaging_definition_definition;
        nw_proxy_config_add_protocol_to_remove(v22, v60);

        v61 = (void *)nw_protocol_boringssl_copy_definition();
        nw_proxy_config_add_protocol_to_remove(v22, v61);
        goto LABEL_140;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        v21 = "%{public}s Second hop must be MASQUE or OHTTP";
        goto LABEL_28;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        v21 = "%{public}s First hop must be MASQUE";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
      }
    }

    goto LABEL_30;
  }
  if (v5 >> 3 == 1)
  {
    nw_array_get_object_at_index((uint64_t)v2, 0);
    v7 = objc_claimAutoreleasedReturnValue();
    if (nw_protocol_options_is_masque(*(void **)(v7 + 40)))
    {
      v8 = nw_protocol_options_copy(*(void **)(v7 + 40));
      v9 = (uint64_t)v8;
      v10 = *(void **)(v7 + 32);
      if (!v10)
        v10 = *(void **)(v7 + 24);
      nw_protocol_options_set_proxy_endpoint(v8, v10, 0);
      if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
        dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
      v11 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
      nw_http2_set_idle_timeout(v11, 60);
      v12 = *(id *)(v7 + 48);
      if (v12)
      {
        options = (NWConcrete_nw_protocol_options *)v12;
        sec_protocol_options_add_tls_application_protocol(&options->super, "h2");
        sec_protocol_options_set_min_tls_protocol_version(&options->super, tls_protocol_version_TLSv13);

      }
      else
      {
        if (nw_protocol_copy_serializable_tls_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72016);
        v26 = nw_protocol_create_options((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
        nw_serializable_tls_set_add_h2_alpn(v26);
        nw_serializable_tls_set_require_tls13(v26);
        v27 = *(_QWORD *)(v7 + 56);
        if (v27)
        {
          options = v26;
          nw_serializable_tls_set_server_raw_public_keys(v26, v27);
        }
        else
        {
          v29 = *(_QWORD *)(v7 + 64);
          if (v29)
          {
            options = v26;
            nw_serializable_tls_set_client_identity_reference(v26, v29, *(_QWORD *)(v7 + 72));
          }
          else
          {
            options = v26;
            if ((*(_BYTE *)(v7 + 80) & 0x10) != 0)
              nw_serializable_tls_set_trust_certs(v26);
          }
        }
      }
      nw_protocol_stack_append_application_protocol(v6, (void *)v9);
      nw_protocol_stack_append_application_protocol(v6, v11);
      nw_protocol_stack_append_application_protocol(v6, options);
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
      v53 = nw_protocol_create_options((void *)g_tcp_definition);
      nw_protocol_stack_set_transport_protocol(&v6->super, &v53->super);

      v54 = nw_protocol_options_copy_proxy_endpoint_for_stack((void *)v9);
      v22 = nw_proxy_config_create_with_stack(v54, v6);

      if (nw_masque_options_get_version((void *)v9) == 2)
      {
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
        v55 = (id)g_udp_definition;
        nw_proxy_config_set_alternate_protocol_stack(v22, 0, v55, 4u);

        if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
        v56 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
        nw_proxy_config_set_alternate_protocol_stack(v22, 0, v56, 3u);

        if ((*(_BYTE *)(v7 + 80) & 1) != 0)
          nw_proxy_config_set_alternate_protocol_stack(v22, 0, 0, 2u);
      }
      nw_proxy_config_set_is_privacy_proxy(v22, 1, 0);
      goto LABEL_141;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v87 = "nw_proxy_config_create_fallback_privacy_proxy";
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s First hop must be MASQUE", buf, 0xCu);
    }

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v87 = "nw_proxy_config_create_fallback_privacy_proxy";
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s No more than two hops are currently supported", buf, 0xCu);
    }

  }
LABEL_30:
  v22 = 0;
LABEL_142:

LABEL_143:
  return v22;
}

void sub_1839B1604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1839B179C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__66400(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__66401(uint64_t a1)
{

}

NSObject *nw_listener_socket_inbox_create_socket(void *a1, const unsigned __int8 *a2, int *a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  NSObject *v8;
  int required_address_family;
  const sockaddr *v10;
  int sa_family;
  int v12;
  BOOL v13;
  __int16 v14;
  int v15;
  nw_endpoint_t v16;
  const sockaddr *v17;
  const sockaddr *v18;
  int ip_protocol;
  int v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  int v26;
  NSObject *posix_error;
  int error_code;
  id v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  NSObject *v38;
  int v39;
  void *v40;
  os_log_type_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  _QWORD *v49;
  BOOL v50;
  int v51;
  void *v52;
  os_log_type_t v53;
  _QWORD *v54;
  BOOL v55;
  int v56;
  void *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  os_log_type_t v61;
  os_log_type_t v62;
  os_log_type_t v64;
  _BOOL4 v65;
  os_log_type_t v66;
  _BOOL4 v67;
  char *v68;
  NSObject *v69;
  _BOOL4 v70;
  os_log_type_t v71;
  os_log_type_t v72;
  os_log_type_t v73;
  int v74;
  NSObject *v75;
  void *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  void *v81;
  const char *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  const char *v86;
  int v87;
  void *v88;
  os_log_type_t v89;
  int v90;
  void *v91;
  os_log_type_t v92;
  unsigned int v93;
  NSObject *v94;
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  const char *v99;
  char *v100;
  os_log_type_t v101;
  _BOOL4 v102;
  os_log_type_t v103;
  const char *v104;
  const char *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  os_log_type_t v108;
  void *v109;
  const char *v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  void *v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  void *v118;
  os_log_type_t v119;
  os_log_type_t v120;
  char *v121;
  NSObject *v122;
  _BOOL4 v123;
  char *backtrace_string;
  os_log_type_t v125;
  _BOOL4 v126;
  char *v127;
  os_log_type_t v128;
  _BOOL4 v129;
  os_log_type_t v130;
  os_log_type_t v131;
  os_log_type_t v132;
  NSObject *v133;
  unsigned int v134;
  unsigned int v135;
  NSObject *v136;
  int v137;
  void *v138;
  os_log_type_t v139;
  int v140;
  int v141;
  void *v142;
  char *v143;
  NSObject *v144;
  os_log_type_t v145;
  void *v146;
  os_log_type_t v147;
  int v148;
  void *v149;
  char *v150;
  NSObject *v151;
  os_log_type_t v152;
  char *v153;
  os_log_type_t v154;
  _BOOL4 v155;
  os_log_type_t v156;
  _BOOL4 v157;
  int v158;
  void *v159;
  os_log_type_t v160;
  int v161;
  void *v162;
  os_log_type_t v163;
  os_log_type_t v164;
  os_log_type_t v165;
  int v166;
  void *v167;
  os_log_type_t v168;
  os_log_type_t v169;
  _BOOL4 v170;
  os_log_type_t v171;
  _BOOL4 v172;
  char *v173;
  os_log_type_t v174;
  _BOOL4 v175;
  os_log_type_t v176;
  _BOOL4 v177;
  char *v178;
  _BOOL4 v179;
  os_log_type_t v180;
  os_log_type_t v181;
  os_log_type_t v182;
  os_log_type_t v183;
  NSObject *v184;
  nw_interface_t v185;
  _DWORD *v186;
  int v187;
  NSObject *v188;
  NSObject *v189;
  NSObject *v190;
  char *v191;
  NSObject *v192;
  os_log_type_t v193;
  os_log_type_t v194;
  char *v195;
  _BOOL4 v196;
  NSObject *v197;
  nw_interface_t v198;
  nw_endpoint_t host;
  NSObject *v200;
  NSObject *v201;
  int v202;
  NSObject *v203;
  NSObject *v204;
  NSObject *v205;
  char *v206;
  NSObject *v207;
  os_log_type_t v208;
  char *v209;
  _BOOL4 v210;
  os_log_type_t v211;
  NSObject *v212;
  NSObject *v213;
  nw_protocol_options_t v214;
  nw_protocol_options_t v215;
  int *v216;
  int v217;
  void *v218;
  int v219;
  char *v220;
  NSObject *v221;
  os_log_type_t v222;
  unint64_t StatusReg;
  int v224;
  void *v225;
  char *v226;
  NSObject *v227;
  os_log_type_t v228;
  char *v229;
  os_log_type_t v230;
  _BOOL4 v231;
  char *v232;
  NSObject *v233;
  _BOOL4 v234;
  os_log_type_t v235;
  os_log_type_t v236;
  os_log_type_t v237;
  NSObject *v238;
  NSObject *v239;
  nw_protocol_options_t v240;
  nw_protocol_options_t v241;
  int *v242;
  int v243;
  void *v244;
  int v245;
  char *v246;
  NSObject *v247;
  os_log_type_t v248;
  unint64_t v249;
  int v250;
  void *v251;
  NSObject *v252;
  os_log_type_t v253;
  char *v254;
  os_log_type_t v255;
  _BOOL4 v256;
  char *v257;
  NSObject *v258;
  _BOOL4 v259;
  os_log_type_t v260;
  os_log_type_t v261;
  os_log_type_t v262;
  os_log_type_t v263;
  os_log_type_t v264;
  os_log_type_t v265;
  os_log_type_t v266;
  os_log_type_t v267;
  os_log_type_t v268;
  int v269;
  NSObject *v270;
  const char *v271;
  id v272;
  int *v273;
  int v274;
  NSObject *endpoint;
  os_log_type_t type[16];
  int v277;
  char v278;
  os_log_type_t v279;
  int v280;
  int v281;
  int v282;
  _WORD address[19];
  __int16 v284;
  unsigned int v285;
  __int16 v286;
  char *v287;
  uint64_t v288;

  v288 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)address = 136446210;
    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
    v115 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v282) = 0;
    if (!__nwlog_fault(v115, type, &v282))
      goto LABEL_375;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v117 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v116, v117, "%{public}s called with null parameters", (uint8_t *)address, 0xCu);
      }
    }
    else if ((_BYTE)v282)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v125 = type[0];
      v126 = os_log_type_enabled(v116, type[0]);
      if (backtrace_string)
      {
        if (v126)
        {
          *(_DWORD *)address = 136446466;
          *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 2082;
          *(_QWORD *)&address[7] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v116, v125, "%{public}s called with null parameters, dumping backtrace:%{public}s", (uint8_t *)address, 0x16u);
        }

        free(backtrace_string);
        if (!v115)
          goto LABEL_377;
        goto LABEL_376;
      }
      if (v126)
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v116, v125, "%{public}s called with null parameters, no backtrace", (uint8_t *)address, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v131 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v116, v131, "%{public}s called with null parameters, backtrace limit exceeded", (uint8_t *)address, 0xCu);
      }
    }
    goto LABEL_374;
  }
  if (!a3)
  {
    __nwlog_obj();
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)address = 136446210;
    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
    v115 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v282) = 0;
    if (!__nwlog_fault(v115, type, &v282))
      goto LABEL_375;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v119 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v116, v119, "%{public}s called with null outFD", (uint8_t *)address, 0xCu);
      }
    }
    else if ((_BYTE)v282)
    {
      v127 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v128 = type[0];
      v129 = os_log_type_enabled(v116, type[0]);
      if (v127)
      {
        if (v129)
        {
          *(_DWORD *)address = 136446466;
          *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 2082;
          *(_QWORD *)&address[7] = v127;
          _os_log_impl(&dword_182FBE000, v116, v128, "%{public}s called with null outFD, dumping backtrace:%{public}s", (uint8_t *)address, 0x16u);
        }

        free(v127);
LABEL_375:
        if (!v115)
        {
LABEL_377:
          v24 = 0;
          goto LABEL_111;
        }
LABEL_376:
        free(v115);
        goto LABEL_377;
      }
      if (v129)
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v116, v128, "%{public}s called with null outFD, no backtrace", (uint8_t *)address, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v132 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v116, v132, "%{public}s called with null outFD, backtrace limit exceeded", (uint8_t *)address, 0xCu);
      }
    }
LABEL_374:

    goto LABEL_375;
  }
  *a3 = -1;
  v7 = v5;
  v8 = *(id *)(v7[13] + 160);

  required_address_family = nw_parameters_get_required_address_family(v7);
  if (!v8)
  {
    endpoint = 0;
    v14 = 0;
    goto LABEL_21;
  }
  v10 = nw_endpoint_get_address(v8);
  if ((nw_endpoint_is_multicast(v8) & 1) != 0)
  {
    endpoint = v8;
    sa_family = v10->sa_family;
    required_address_family = sa_family;
    if (sa_family != 30)
    {
LABEL_6:
      if (sa_family != 2)
        goto LABEL_29;
      v12 = *(_DWORD *)&v10->sa_data[2];
LABEL_8:
      if (v12)
        v13 = endpoint == 0;
      else
        v13 = 0;
      if (!v13)
        goto LABEL_20;
LABEL_13:
      endpoint = 0;
      goto LABEL_29;
    }
  }
  else
  {
    endpoint = 0;
    sa_family = v10->sa_family;
    if (sa_family != 30)
      goto LABEL_6;
  }
  if (!*(_DWORD *)&v10->sa_data[6] && !*(_DWORD *)&v10->sa_data[10] && !*(_DWORD *)&v10[1].sa_len)
  {
    v12 = *(_DWORD *)&v10[1].sa_data[2];
    goto LABEL_8;
  }
  if (!endpoint)
    goto LABEL_13;
LABEL_20:
  v14 = *(_WORD *)v10->sa_data;

LABEL_21:
  if (required_address_family)
    v15 = required_address_family;
  else
    v15 = 30;
  if (v15 == 30)
  {
    memset(&address[2], 0, 24);
    address[0] = 7708;
    address[1] = v14;
    v16 = nw_endpoint_create_address((const sockaddr *)address);
  }
  else
  {
    if (v15 != 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)address = 136446210;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s listener created without a local address specified", (uint8_t *)address, 0xCu);
      }

      v24 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      v8 = 0;
      goto LABEL_110;
    }
    address[0] = 528;
    address[1] = v14;
    *(_DWORD *)&address[2] = 0;
    *(_QWORD *)&address[4] = 0;
    v16 = nw_endpoint_create_address((const sockaddr *)address);
  }
  v8 = v16;
  if (!v16)
    goto LABEL_34;
LABEL_29:
  v17 = nw_endpoint_get_address(v8);
  v18 = v17;
  if (!v17)
  {
LABEL_34:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)address = 136446210;
      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s listener created without a local address specified", (uint8_t *)address, 0xCu);
    }
    goto LABEL_59;
  }
  if (required_address_family && v17->sa_family != required_address_family)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)address = 136446210;
      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s Required address family doesn't match local address", (uint8_t *)address, 0xCu);
    }
  }
  else
  {
    ip_protocol = nw_parameters_get_ip_protocol(v7);
    v20 = ip_protocol;
    if (ip_protocol == 6)
    {
      v21 = 1;
      goto LABEL_42;
    }
    if (ip_protocol == 17)
    {
      v21 = 2;
LABEL_42:
      v25 = socket(v18->sa_family, v21, 0);
      v26 = v25;
      if ((v25 & 0x80000000) == 0)
      {
        v282 = 1;
        v281 = 0;
        v274 = v25;
        v273 = a3;
        if (setsockopt(v25, 0xFFFF, 4, &v282, 4u))
        {
          posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                            + 8));
          error_code = nw_error_get_error_code(posix_error);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = (id)gLogObj;
          *(_DWORD *)address = 136446466;
          *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 1024;
          *(_DWORD *)&address[7] = error_code;
          v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v280) = 0;
          if (!__nwlog_fault(v30, type, &v280))
            goto LABEL_142;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v31 = (id)gLogObj;
            v32 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = error_code;
              _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s SO_REUSEADDR failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
            }
LABEL_132:

            goto LABEL_142;
          }
          if (!(_BYTE)v280)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v61 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = error_code;
              _os_log_impl(&dword_182FBE000, v31, v61, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
            }
            goto LABEL_132;
          }
          v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v44 = type[0];
          v45 = os_log_type_enabled(v43, type[0]);
          if (v42)
          {
            if (v45)
            {
              *(_DWORD *)address = 136446722;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = error_code;
              address[9] = 2082;
              *(_QWORD *)&address[10] = v42;
              _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
            }
            goto LABEL_71;
          }
          if (v45)
          {
            *(_DWORD *)address = 136446466;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = error_code;
            _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
          }
LABEL_141:

LABEL_142:
          if (!v30)
            goto LABEL_144;
          goto LABEL_143;
        }
        if (v20 != 6 && setsockopt(v26, 0xFFFF, 512, &v282, 4u))
        {
          posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                            + 8));
          v39 = nw_error_get_error_code(posix_error);
          __nwlog_obj();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)address = 136446466;
          *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 1024;
          *(_DWORD *)&address[7] = v39;
          v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v280) = 0;
          if (!__nwlog_fault(v30, type, &v280))
            goto LABEL_142;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v41 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v39;
              _os_log_impl(&dword_182FBE000, v31, v41, "%{public}s SO_REUSEPORT failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
            }
            goto LABEL_132;
          }
          if (!(_BYTE)v280)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v71 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v39;
              _os_log_impl(&dword_182FBE000, v31, v71, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
            }
            goto LABEL_132;
          }
          v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v64 = type[0];
          v65 = os_log_type_enabled(v43, type[0]);
          if (!v42)
          {
            if (v65)
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v39;
              _os_log_impl(&dword_182FBE000, v43, v64, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
            }
            goto LABEL_141;
          }
          if (v65)
          {
            *(_DWORD *)address = 136446722;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v39;
            address[9] = 2082;
            *(_QWORD *)&address[10] = v42;
            _os_log_impl(&dword_182FBE000, v43, v64, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
          }
LABEL_71:

          free(v42);
          if (!v30)
          {
LABEL_144:
            v74 = v274;
            if (posix_error)
            {
LABEL_145:
              close(v74);
LABEL_434:
              v24 = posix_error;

              goto LABEL_110;
            }
LABEL_433:
            *v273 = v74;
            goto LABEL_434;
          }
LABEL_143:
          free(v30);
          goto LABEL_144;
        }
        v49 = v7;
        v50 = (*(_WORD *)(v7[13] + 108) & 8) == 0;

        if (!v50 && setsockopt(v274, 0xFFFF, 4356, &v282, 4u))
        {
          posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                            + 8));
          v51 = nw_error_get_error_code(posix_error);
          __nwlog_obj();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)address = 136446466;
          *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 1024;
          *(_DWORD *)&address[7] = v51;
          v30 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v280) = 0;
          if (!__nwlog_fault(v30, type, &v280))
            goto LABEL_142;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v53 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v51;
              _os_log_impl(&dword_182FBE000, v31, v53, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
            }
            goto LABEL_132;
          }
          if (!(_BYTE)v280)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v72 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v51;
              _os_log_impl(&dword_182FBE000, v31, v72, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
            }
            goto LABEL_132;
          }
          v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v66 = type[0];
          v67 = os_log_type_enabled(v43, type[0]);
          if (!v42)
          {
            if (v67)
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v51;
              _os_log_impl(&dword_182FBE000, v43, v66, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
            }
            goto LABEL_141;
          }
          if (v67)
          {
            *(_DWORD *)address = 136446722;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v51;
            address[9] = 2082;
            *(_QWORD *)&address[10] = v42;
            _os_log_impl(&dword_182FBE000, v43, v66, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
          }
          goto LABEL_71;
        }
        v54 = v49;
        v55 = (*(_WORD *)(v7[13] + 108) & 0x80) == 0;

        if (v55 || !setsockopt(v274, 0xFFFF, 0x10000, &v282, 4u))
        {
LABEL_152:
          v75 = v54;
          v272 = *(id *)(v7[13] + 168);

          v76 = v272;
          if (v272)
            v77 = *((_DWORD *)v272 + 2);
          else
            v77 = 0;
          v78 = v274;
          v280 = v77;
          v79 = v18->sa_family;
          if (v79 == 30)
          {
            *(_DWORD *)type = required_address_family == 30;
            if (setsockopt(v274, 41, 27, type, 4u))
            {
              v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              v80 = nw_error_get_error_code(v270);
              __nwlog_obj();
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446722;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              if (*(_DWORD *)type)
                v82 = "on";
              else
                v82 = "off";
              address[6] = 2082;
              *(_QWORD *)&address[7] = v82;
              address[11] = 1024;
              *(_DWORD *)&address[12] = v80;
              v83 = (char *)_os_log_send_and_compose_impl();

              v279 = OS_LOG_TYPE_ERROR;
              v278 = 0;
              if (__nwlog_fault(v83, &v279, &v278))
              {
                if (v279 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v84 = objc_claimAutoreleasedReturnValue();
                  v85 = v279;
                  if (os_log_type_enabled(v84, v279))
                  {
                    v86 = "on";
                    if (!*(_DWORD *)type)
                      v86 = "off";
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2082;
                    *(_QWORD *)&address[7] = v86;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v80;
                    _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d", (uint8_t *)address, 0x1Cu);
                  }
LABEL_400:

                  goto LABEL_429;
                }
                if (!v278)
                {
                  __nwlog_obj();
                  v84 = objc_claimAutoreleasedReturnValue();
                  v103 = v279;
                  if (os_log_type_enabled(v84, v279))
                  {
                    v104 = "on";
                    if (!*(_DWORD *)type)
                      v104 = "off";
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2082;
                    *(_QWORD *)&address[7] = v104;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v80;
                    _os_log_impl(&dword_182FBE000, v84, v103, "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x1Cu);
                  }
                  goto LABEL_400;
                }
                v95 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v96 = objc_claimAutoreleasedReturnValue();
                v97 = v279;
                v98 = os_log_type_enabled(v96, v279);
                if (v95)
                {
                  if (v98)
                  {
                    v99 = "on";
                    if (!*(_DWORD *)type)
                      v99 = "off";
                    *(_DWORD *)address = 136446978;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2082;
                    *(_QWORD *)&address[7] = v99;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v80;
                    address[14] = 2082;
                    *(_QWORD *)&address[15] = v95;
                    _os_log_impl(&dword_182FBE000, v96, v97, "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x26u);
                  }
                  goto LABEL_195;
                }
                if (v98)
                {
                  v105 = "on";
                  if (!*(_DWORD *)type)
                    v105 = "off";
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 2082;
                  *(_QWORD *)&address[7] = v105;
                  address[11] = 1024;
                  *(_DWORD *)&address[12] = v80;
                  _os_log_impl(&dword_182FBE000, v96, v97, "%{public}s IPV6_V6ONLY %{public}s failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x1Cu);
                }
                goto LABEL_428;
              }
LABEL_429:
              if (!v83)
              {
LABEL_431:
                v76 = v272;
                goto LABEL_432;
              }
LABEL_430:
              free(v83);
              goto LABEL_431;
            }
            if (v280 && setsockopt(v274, 41, 125, &v280, 4u))
            {
              v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              v90 = nw_error_get_error_code(v270);
              __nwlog_obj();
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446722;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v280;
              address[9] = 1024;
              *(_DWORD *)&address[10] = v90;
              v83 = (char *)_os_log_send_and_compose_impl();

              v279 = OS_LOG_TYPE_ERROR;
              v278 = 0;
              if (!__nwlog_fault(v83, &v279, &v278))
                goto LABEL_429;
              if (v279 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v92 = v279;
                if (os_log_type_enabled(v84, v279))
                {
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v280;
                  address[9] = 1024;
                  *(_DWORD *)&address[10] = v90;
                  _os_log_impl(&dword_182FBE000, v84, v92, "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d", (uint8_t *)address, 0x18u);
                }
                goto LABEL_400;
              }
              if (!v278)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v120 = v279;
                if (os_log_type_enabled(v84, v279))
                {
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v280;
                  address[9] = 1024;
                  *(_DWORD *)&address[10] = v90;
                  _os_log_impl(&dword_182FBE000, v84, v120, "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x18u);
                }
                goto LABEL_400;
              }
              v95 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v96 = objc_claimAutoreleasedReturnValue();
              v106 = v279;
              v107 = os_log_type_enabled(v96, v279);
              if (v95)
              {
                if (v107)
                {
                  *(_DWORD *)address = 136446978;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v280;
                  address[9] = 1024;
                  *(_DWORD *)&address[10] = v90;
                  address[12] = 2082;
                  *(_QWORD *)&address[13] = v95;
                  _os_log_impl(&dword_182FBE000, v96, v106, "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x22u);
                }
                goto LABEL_195;
              }
              if (v107)
              {
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v90;
                _os_log_impl(&dword_182FBE000, v96, v106, "%{public}s IPV6_BOUND_IF %d failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x18u);
              }
              goto LABEL_428;
            }
          }
          else if (v79 == 2 && v77 && setsockopt(v274, 0, 25, &v280, 4u))
          {
            v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
            v87 = nw_error_get_error_code(v270);
            __nwlog_obj();
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)address = 136446722;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v280;
            address[9] = 1024;
            *(_DWORD *)&address[10] = v87;
            v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v279 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v83, type, &v279))
              goto LABEL_429;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v89 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v87;
                _os_log_impl(&dword_182FBE000, v84, v89, "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d", (uint8_t *)address, 0x18u);
              }
              goto LABEL_400;
            }
            if (v279 == OS_LOG_TYPE_DEFAULT)
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v108 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v87;
                _os_log_impl(&dword_182FBE000, v84, v108, "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x18u);
              }
              goto LABEL_400;
            }
            v100 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v96 = objc_claimAutoreleasedReturnValue();
            v101 = type[0];
            v102 = os_log_type_enabled(v96, type[0]);
            if (v100)
            {
              if (v102)
              {
                *(_DWORD *)address = 136446978;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v280;
                address[9] = 1024;
                *(_DWORD *)&address[10] = v87;
                address[12] = 2082;
                *(_QWORD *)&address[13] = v100;
                _os_log_impl(&dword_182FBE000, v96, v101, "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x22u);
              }

              free(v100);
              goto LABEL_429;
            }
            if (v102)
            {
              *(_DWORD *)address = 136446722;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v280;
              address[9] = 1024;
              *(_DWORD *)&address[10] = v87;
              _os_log_impl(&dword_182FBE000, v96, v101, "%{public}s IP_BOUND_IF %d failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x18u);
            }
            goto LABEL_428;
          }
          if (uuid_is_null(a2) || !setsockopt(v274, 0xFFFF, 4384, a2, 0x10u))
          {
LABEL_276:
            if (bind(v78, v18, v18->sa_len))
            {
              v133 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              v134 = nw_error_get_error_code(v133);
              v135 = v134;
              v270 = v133;
              if (v134 <= 0x31 && ((1 << v134) & 0x3000000002006) != 0)
              {
                __nwlog_obj();
                v136 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)address = 136447235;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v78;
                  address[9] = 2113;
                  *(_QWORD *)&address[10] = v8;
                  address[14] = 2114;
                  *(_QWORD *)&address[15] = v75;
                  v284 = 1024;
                  v285 = v135;
                  _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_ERROR, "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d", (uint8_t *)address, 0x2Cu);
                }

                goto LABEL_431;
              }
              __nwlog_obj();
              v146 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136447235;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v78;
              address[9] = 2113;
              *(_QWORD *)&address[10] = v8;
              address[14] = 2114;
              *(_QWORD *)&address[15] = v75;
              v284 = 1024;
              v285 = v135;
              v83 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v279 = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v83, type, &v279))
                goto LABEL_429;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v147 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136447235;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v274;
                  address[9] = 2113;
                  *(_QWORD *)&address[10] = v8;
                  address[14] = 2114;
                  *(_QWORD *)&address[15] = v75;
                  v284 = 1024;
                  v285 = v135;
                  _os_log_impl(&dword_182FBE000, v84, v147, "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d", (uint8_t *)address, 0x2Cu);
                }
                goto LABEL_400;
              }
              if (v279 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v165 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136447235;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v274;
                  address[9] = 2113;
                  *(_QWORD *)&address[10] = v8;
                  address[14] = 2114;
                  *(_QWORD *)&address[15] = v75;
                  v284 = 1024;
                  v285 = v135;
                  _os_log_impl(&dword_182FBE000, v84, v165, "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x2Cu);
                }
                goto LABEL_400;
              }
              v95 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v96 = objc_claimAutoreleasedReturnValue();
              v156 = type[0];
              v157 = os_log_type_enabled(v96, type[0]);
              if (v95)
              {
                if (v157)
                {
                  *(_DWORD *)address = 136447491;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v274;
                  address[9] = 2113;
                  *(_QWORD *)&address[10] = v8;
                  address[14] = 2114;
                  *(_QWORD *)&address[15] = v75;
                  v284 = 1024;
                  v285 = v135;
                  v286 = 2082;
                  v287 = v95;
                  _os_log_impl(&dword_182FBE000, v96, v156, "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x36u);
                }
LABEL_195:

                free(v95);
                if (!v83)
                  goto LABEL_431;
                goto LABEL_430;
              }
              if (v157)
              {
                *(_DWORD *)address = 136447235;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v274;
                address[9] = 2113;
                *(_QWORD *)&address[10] = v8;
                address[14] = 2114;
                *(_QWORD *)&address[15] = v75;
                v284 = 1024;
                v285 = v135;
                _os_log_impl(&dword_182FBE000, v96, v156, "%{public}s bind(%d, %{private}@) %{public}@ failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x2Cu);
              }
LABEL_428:

              goto LABEL_429;
            }
            if (v20 == 6)
            {
              if (listen(v78, 1024))
              {
                v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                           + 8));
                v137 = nw_error_get_error_code(v270);
                __nwlog_obj();
                v138 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v137;
                v83 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                v279 = OS_LOG_TYPE_DEFAULT;
                if (!__nwlog_fault(v83, type, &v279))
                  goto LABEL_429;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v84 = objc_claimAutoreleasedReturnValue();
                  v139 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v137;
                    _os_log_impl(&dword_182FBE000, v84, v139, "%{public}s listen failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                  }
                  goto LABEL_400;
                }
                if (v279 == OS_LOG_TYPE_DEFAULT)
                {
                  __nwlog_obj();
                  v84 = objc_claimAutoreleasedReturnValue();
                  v164 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v137;
                    _os_log_impl(&dword_182FBE000, v84, v164, "%{public}s listen failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                  }
                  goto LABEL_400;
                }
                v153 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v96 = objc_claimAutoreleasedReturnValue();
                v154 = type[0];
                v155 = os_log_type_enabled(v96, type[0]);
                if (!v153)
                {
                  if (v155)
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v137;
                    _os_log_impl(&dword_182FBE000, v96, v154, "%{public}s listen failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                  }
                  goto LABEL_428;
                }
                if (v155)
                {
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v137;
                  address[9] = 2082;
                  *(_QWORD *)&address[10] = v153;
                  _os_log_impl(&dword_182FBE000, v96, v154, "%{public}s listen failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                }
LABEL_315:

                free(v153);
                if (!v83)
                  goto LABEL_431;
                goto LABEL_430;
              }
LABEL_463:
              v270 = 0;
LABEL_432:

              v74 = v274;
              posix_error = v270;
              if (v270)
                goto LABEL_145;
              goto LABEL_433;
            }
            v140 = v18->sa_family;
            if (v140 != 2)
            {
              if (v140 != 30)
                goto LABEL_463;
              if (setsockopt(v78, 41, 61, &v282, 4u) < 0)
              {
                v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                           + 8));
                v158 = nw_error_get_error_code(v270);
                __nwlog_obj();
                v159 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v158;
                v83 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                v279 = OS_LOG_TYPE_DEFAULT;
                if (!__nwlog_fault(v83, type, &v279))
                  goto LABEL_429;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v84 = objc_claimAutoreleasedReturnValue();
                  v160 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v158;
                    _os_log_impl(&dword_182FBE000, v84, v160, "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                  }
                  goto LABEL_400;
                }
                if (v279 == OS_LOG_TYPE_DEFAULT)
                {
                  __nwlog_obj();
                  v84 = objc_claimAutoreleasedReturnValue();
                  v180 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v158;
                    _os_log_impl(&dword_182FBE000, v84, v180, "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                  }
                  goto LABEL_400;
                }
                v153 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v96 = objc_claimAutoreleasedReturnValue();
                v169 = type[0];
                v170 = os_log_type_enabled(v96, type[0]);
                if (!v153)
                {
                  if (v170)
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v158;
                    _os_log_impl(&dword_182FBE000, v96, v169, "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                  }
                  goto LABEL_428;
                }
                if (v170)
                {
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v158;
                  address[9] = 2082;
                  *(_QWORD *)&address[10] = v153;
                  _os_log_impl(&dword_182FBE000, v96, v169, "%{public}s IPV6_RECVPKTINFO failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                }
                goto LABEL_315;
              }
              if ((setsockopt(v78, 41, 35, &v282, 4u) & 0x80000000) == 0)
                goto LABEL_407;
              v141 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              __nwlog_obj();
              v142 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v141;
              v143 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v279 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v143, type, &v279))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v144 = objc_claimAutoreleasedReturnValue();
                  v145 = type[0];
                  if (os_log_type_enabled(v144, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v141;
                    _os_log_impl(&dword_182FBE000, v144, v145, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                  }
                }
                else if (v279)
                {
                  v173 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v144 = objc_claimAutoreleasedReturnValue();
                  v174 = type[0];
                  v175 = os_log_type_enabled(v144, type[0]);
                  if (v173)
                  {
                    if (v175)
                    {
                      *(_DWORD *)address = 136446722;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v141;
                      address[9] = 2082;
                      *(_QWORD *)&address[10] = v173;
                      _os_log_impl(&dword_182FBE000, v144, v174, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                    }

                    free(v173);
                    goto LABEL_404;
                  }
                  if (v175)
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v141;
                    _os_log_impl(&dword_182FBE000, v144, v174, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v144 = objc_claimAutoreleasedReturnValue();
                  v182 = type[0];
                  if (os_log_type_enabled(v144, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v141;
                    _os_log_impl(&dword_182FBE000, v144, v182, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                  }
                }

              }
LABEL_404:
              if (v143)
                free(v143);
              v76 = v272;
LABEL_407:
              if (!endpoint)
                goto LABEL_463;
              __nwlog_obj();
              v184 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(_QWORD *)&address[7] = endpoint;
                _os_log_impl(&dword_182FBE000, v184, OS_LOG_TYPE_DEBUG, "%{public}s Joining multicast group %@", (uint8_t *)address, 0x16u);
              }

              memset(type, 0, sizeof(type));
              v277 = 0;
              *(sockaddr *)type = *(sockaddr *)&nw_endpoint_get_address(endpoint)->sa_data[6];
              v185 = nw_parameters_copy_required_interface(v75);
              v186 = v185;
              if (!v185)
              {
LABEL_413:
                if ((setsockopt(v274, 41, 13, type, 0x14u) & 0x80000000) == 0)
                  goto LABEL_488;
                v187 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                __nwlog_obj();
                v188 = objc_claimAutoreleasedReturnValue();
                v189 = v188;
                if (v187 == 49)
                {
                  if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(_QWORD *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = 49;
                    _os_log_impl(&dword_182FBE000, v189, OS_LOG_TYPE_ERROR, "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d", (uint8_t *)address, 0x1Cu);
                  }

                  goto LABEL_488;
                }
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(_QWORD *)&address[7] = endpoint;
                address[11] = 1024;
                *(_DWORD *)&address[12] = v187;
                v191 = (char *)_os_log_send_and_compose_impl();

                v279 = OS_LOG_TYPE_ERROR;
                v278 = 0;
                if (__nwlog_fault(v191, &v279, &v278))
                {
                  if (v279 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v192 = objc_claimAutoreleasedReturnValue();
                    v193 = v279;
                    if (os_log_type_enabled(v192, v279))
                    {
                      *(_DWORD *)address = 136446722;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(_QWORD *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v187;
                      _os_log_impl(&dword_182FBE000, v192, v193, "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d", (uint8_t *)address, 0x1Cu);
                    }
                  }
                  else if (v278)
                  {
                    v195 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v192 = objc_claimAutoreleasedReturnValue();
                    v265 = v279;
                    v196 = os_log_type_enabled(v192, v279);
                    if (v195)
                    {
                      if (v196)
                      {
                        *(_DWORD *)address = 136446978;
                        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                        address[6] = 2112;
                        *(_QWORD *)&address[7] = endpoint;
                        address[11] = 1024;
                        *(_DWORD *)&address[12] = v187;
                        address[14] = 2082;
                        *(_QWORD *)&address[15] = v195;
                        _os_log_impl(&dword_182FBE000, v192, v265, "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x26u);
                      }

                      free(v195);
                      goto LABEL_486;
                    }
                    if (v196)
                    {
                      *(_DWORD *)address = 136446722;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(_QWORD *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v187;
                      _os_log_impl(&dword_182FBE000, v192, v265, "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x1Cu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v192 = objc_claimAutoreleasedReturnValue();
                    v211 = v279;
                    if (os_log_type_enabled(v192, v279))
                    {
                      *(_DWORD *)address = 136446722;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(_QWORD *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v187;
                      _os_log_impl(&dword_182FBE000, v192, v211, "%{public}s IPV6_LEAVE_GROUP %@ failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x1Cu);
                    }
                  }

                }
LABEL_486:
                if (v191)
                  free(v191);
LABEL_488:
                if ((setsockopt(v274, 41, 12, type, 0x14u) & 0x80000000) == 0)
                {
                  v212 = nw_parameters_copy_default_protocol_stack(v75);
                  v213 = v212;
                  if (v212)
                  {
                    v214 = nw_protocol_stack_copy_internet_protocol(v212);
                    v215 = v214;
                    if (v214)
                    {
                      v216 = nw_ip_options_get_disable_multicast_loopback(v214) ? &v281 : &v282;
                      if (setsockopt(v274, 41, 11, v216, 4u))
                      {
                        v217 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                        __nwlog_obj();
                        v218 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)address = 136446466;
                        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                        address[6] = 1024;
                        v219 = v217;
                        *(_DWORD *)&address[7] = v217;
                        v220 = (char *)_os_log_send_and_compose_impl();

                        v279 = OS_LOG_TYPE_ERROR;
                        v278 = 0;
                        if (__nwlog_fault(v220, &v279, &v278))
                        {
                          if (v279 == OS_LOG_TYPE_FAULT)
                          {
                            __nwlog_obj();
                            v221 = objc_claimAutoreleasedReturnValue();
                            v222 = v279;
                            if (os_log_type_enabled(v221, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v219;
                              _os_log_impl(&dword_182FBE000, v221, v222, "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                            }
                          }
                          else
                          {
                            if (v278)
                            {
                              v232 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v233 = objc_claimAutoreleasedReturnValue();
                              v267 = v279;
                              v234 = os_log_type_enabled(v233, v279);
                              if (v232)
                              {
                                if (v234)
                                {
                                  *(_DWORD *)address = 136446722;
                                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v219;
                                  address[9] = 2082;
                                  *(_QWORD *)&address[10] = v232;
                                  _os_log_impl(&dword_182FBE000, v233, v267, "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                                }

                                free(v232);
                              }
                              else
                              {
                                if (v234)
                                {
                                  *(_DWORD *)address = 136446466;
                                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v219;
                                  _os_log_impl(&dword_182FBE000, v233, v267, "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                                }

                              }
                              goto LABEL_533;
                            }
                            __nwlog_obj();
                            v221 = objc_claimAutoreleasedReturnValue();
                            v236 = v279;
                            if (os_log_type_enabled(v221, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v219;
                              _os_log_impl(&dword_182FBE000, v221, v236, "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                            }
                          }

                        }
LABEL_533:
                        if (v220)
                          free(v220);
                      }
                    }
                  }
                  else
                  {
                    v215 = 0;
                  }

                  v270 = 0;
                  goto LABEL_536;
                }
                StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v270 = nw_error_create_posix_error(**(_DWORD **)(StatusReg + 8));
                v224 = **(_DWORD **)(StatusReg + 8);
                __nwlog_obj();
                v225 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v224;
                v226 = (char *)_os_log_send_and_compose_impl();

                v279 = OS_LOG_TYPE_ERROR;
                v278 = 0;
                if (__nwlog_fault(v226, &v279, &v278))
                {
                  if (v279 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v227 = objc_claimAutoreleasedReturnValue();
                    v228 = v279;
                    if (os_log_type_enabled(v227, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v224;
                      _os_log_impl(&dword_182FBE000, v227, v228, "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                    }
LABEL_521:

                    goto LABEL_522;
                  }
                  if (!v278)
                  {
                    __nwlog_obj();
                    v227 = objc_claimAutoreleasedReturnValue();
                    v235 = v279;
                    if (os_log_type_enabled(v227, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v224;
                      _os_log_impl(&dword_182FBE000, v227, v235, "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                    }
                    goto LABEL_521;
                  }
                  v229 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v227 = objc_claimAutoreleasedReturnValue();
                  v230 = v279;
                  v231 = os_log_type_enabled(v227, v279);
                  if (!v229)
                  {
                    if (v231)
                    {
                      *(_DWORD *)address = 136446466;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v224;
                      _os_log_impl(&dword_182FBE000, v227, v230, "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                    }
                    goto LABEL_521;
                  }
                  if (v231)
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v224;
                    address[9] = 2082;
                    *(_QWORD *)&address[10] = v229;
                    _os_log_impl(&dword_182FBE000, v227, v230, "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                  }

                  free(v229);
                }
LABEL_522:
                if (v226)
LABEL_523:
                  free(v226);
LABEL_536:

                goto LABEL_431;
              }
              if (nw_interface_supports_multicast(v185))
              {
                v277 = v186[2];
                goto LABEL_413;
              }
              __nwlog_obj();
              v190 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(_QWORD *)&address[7] = v186;
                _os_log_impl(&dword_182FBE000, v190, OS_LOG_TYPE_ERROR, "%{public}s Interface %@ doesn't support multicast", (uint8_t *)address, 0x16u);
              }
LABEL_420:

              v270 = nw_error_create_posix_error(22);
              goto LABEL_536;
            }
            if (setsockopt(v78, 0, 20, &v282, 4u) < 0)
            {
              v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              v161 = nw_error_get_error_code(v270);
              __nwlog_obj();
              v162 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v161;
              v83 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v279 = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v83, type, &v279))
                goto LABEL_429;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v163 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v161;
                  _os_log_impl(&dword_182FBE000, v84, v163, "%{public}s IP_RECVIF failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                }
                goto LABEL_400;
              }
              if (v279 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v181 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v161;
                  _os_log_impl(&dword_182FBE000, v84, v181, "%{public}s IP_RECVIF failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                }
                goto LABEL_400;
              }
              v153 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v96 = objc_claimAutoreleasedReturnValue();
              v171 = type[0];
              v172 = os_log_type_enabled(v96, type[0]);
              if (!v153)
              {
                if (v172)
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v161;
                  _os_log_impl(&dword_182FBE000, v96, v171, "%{public}s IP_RECVIF failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                }
                goto LABEL_428;
              }
              if (v172)
              {
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v161;
                address[9] = 2082;
                *(_QWORD *)&address[10] = v153;
                _os_log_impl(&dword_182FBE000, v96, v171, "%{public}s IP_RECVIF failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
              }
              goto LABEL_315;
            }
            if (setsockopt(v78, 0, 7, &v282, 4u) < 0)
            {
              v270 = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              v166 = nw_error_get_error_code(v270);
              __nwlog_obj();
              v167 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v166;
              v83 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v279 = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v83, type, &v279))
                goto LABEL_429;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v168 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v166;
                  _os_log_impl(&dword_182FBE000, v84, v168, "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                }
                goto LABEL_400;
              }
              if (v279 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                v84 = objc_claimAutoreleasedReturnValue();
                v183 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v166;
                  _os_log_impl(&dword_182FBE000, v84, v183, "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                }
                goto LABEL_400;
              }
              v153 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v96 = objc_claimAutoreleasedReturnValue();
              v176 = type[0];
              v177 = os_log_type_enabled(v96, type[0]);
              if (!v153)
              {
                if (v177)
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v166;
                  _os_log_impl(&dword_182FBE000, v96, v176, "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                }
                goto LABEL_428;
              }
              if (v177)
              {
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v166;
                address[9] = 2082;
                *(_QWORD *)&address[10] = v153;
                _os_log_impl(&dword_182FBE000, v96, v176, "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
              }
              goto LABEL_315;
            }
            if ((setsockopt(v78, 0, 27, &v282, 4u) & 0x80000000) == 0)
            {
LABEL_449:
              if (!endpoint)
                goto LABEL_463;
              __nwlog_obj();
              v197 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(_QWORD *)&address[7] = endpoint;
                _os_log_impl(&dword_182FBE000, v197, OS_LOG_TYPE_DEBUG, "%{public}s Joining multicast group %@", (uint8_t *)address, 0x16u);
              }

              *(_QWORD *)type = 0;
              *(_DWORD *)type = *(_DWORD *)&nw_endpoint_get_address(endpoint)->sa_data[2];
              *(_DWORD *)&type[4] = 0;
              v198 = nw_parameters_copy_required_interface(v75);
              v186 = v198;
              if (v198)
              {
                if (!nw_interface_supports_multicast(v198))
                {
                  __nwlog_obj();
                  v190 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(_QWORD *)&address[7] = v186;
                    _os_log_impl(&dword_182FBE000, v190, OS_LOG_TYPE_ERROR, "%{public}s Interface %@ doesn't support multicast", (uint8_t *)address, 0x16u);
                  }
                  goto LABEL_420;
                }
                host = nw_endpoint_create_host("0.0.0.0", "0");
                v200 = nw_interface_copy_local_address_for_remote_address(v186, host);
                v201 = v200;
                if (!v200)
                {
                  __nwlog_obj();
                  v205 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)address = 136446466;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(_QWORD *)&address[7] = v186;
                    _os_log_impl(&dword_182FBE000, v205, OS_LOG_TYPE_ERROR, "%{public}s Did not find interface address for %@", (uint8_t *)address, 0x16u);
                  }

                  v270 = nw_error_create_posix_error(2);
                  goto LABEL_536;
                }
                if (nw_endpoint_get_address(v200))
                  *(_DWORD *)&type[4] = *(_DWORD *)&v18->sa_data[2];

              }
              if ((setsockopt(v274, 0, 13, type, 8u) & 0x80000000) == 0)
              {
LABEL_542:
                if ((setsockopt(v274, 0, 12, type, 8u) & 0x80000000) == 0)
                {
                  v238 = nw_parameters_copy_default_protocol_stack(v75);
                  v239 = v238;
                  if (v238)
                  {
                    v240 = nw_protocol_stack_copy_internet_protocol(v238);
                    v241 = v240;
                    if (v240)
                    {
                      v242 = nw_ip_options_get_disable_multicast_loopback(v240) ? &v281 : &v282;
                      if (setsockopt(v274, 0, 11, v242, 4u))
                      {
                        v243 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                        __nwlog_obj();
                        v244 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)address = 136446466;
                        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                        address[6] = 1024;
                        v245 = v243;
                        *(_DWORD *)&address[7] = v243;
                        v246 = (char *)_os_log_send_and_compose_impl();

                        v279 = OS_LOG_TYPE_ERROR;
                        v278 = 0;
                        if (__nwlog_fault(v246, &v279, &v278))
                        {
                          if (v279 == OS_LOG_TYPE_FAULT)
                          {
                            __nwlog_obj();
                            v247 = objc_claimAutoreleasedReturnValue();
                            v248 = v279;
                            if (os_log_type_enabled(v247, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v245;
                              _os_log_impl(&dword_182FBE000, v247, v248, "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                            }
                          }
                          else
                          {
                            if (v278)
                            {
                              v257 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v258 = objc_claimAutoreleasedReturnValue();
                              v268 = v279;
                              v259 = os_log_type_enabled(v258, v279);
                              if (v257)
                              {
                                if (v259)
                                {
                                  *(_DWORD *)address = 136446722;
                                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v245;
                                  address[9] = 2082;
                                  *(_QWORD *)&address[10] = v257;
                                  _os_log_impl(&dword_182FBE000, v258, v268, "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                                }

                                free(v257);
                              }
                              else
                              {
                                if (v259)
                                {
                                  *(_DWORD *)address = 136446466;
                                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v245;
                                  _os_log_impl(&dword_182FBE000, v258, v268, "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                                }

                              }
                              goto LABEL_584;
                            }
                            __nwlog_obj();
                            v247 = objc_claimAutoreleasedReturnValue();
                            v261 = v279;
                            if (os_log_type_enabled(v247, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v245;
                              _os_log_impl(&dword_182FBE000, v247, v261, "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                            }
                          }

                        }
LABEL_584:
                        if (v246)
                          free(v246);
                      }
                    }
                  }
                  else
                  {
                    v241 = 0;
                  }

                  v270 = 0;
                  goto LABEL_536;
                }
                v249 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v270 = nw_error_create_posix_error(**(_DWORD **)(v249 + 8));
                v250 = **(_DWORD **)(v249 + 8);
                __nwlog_obj();
                v251 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v250;
                v226 = (char *)_os_log_send_and_compose_impl();

                v279 = OS_LOG_TYPE_ERROR;
                v278 = 0;
                if (__nwlog_fault(v226, &v279, &v278))
                {
                  if (v279 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v252 = objc_claimAutoreleasedReturnValue();
                    v253 = v279;
                    if (os_log_type_enabled(v252, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v250;
                      _os_log_impl(&dword_182FBE000, v252, v253, "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                    }
LABEL_575:

                    goto LABEL_576;
                  }
                  if (!v278)
                  {
                    __nwlog_obj();
                    v252 = objc_claimAutoreleasedReturnValue();
                    v260 = v279;
                    if (os_log_type_enabled(v252, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v250;
                      _os_log_impl(&dword_182FBE000, v252, v260, "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                    }
                    goto LABEL_575;
                  }
                  v254 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v252 = objc_claimAutoreleasedReturnValue();
                  v255 = v279;
                  v256 = os_log_type_enabled(v252, v279);
                  if (!v254)
                  {
                    if (v256)
                    {
                      *(_DWORD *)address = 136446466;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v250;
                      _os_log_impl(&dword_182FBE000, v252, v255, "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                    }
                    goto LABEL_575;
                  }
                  if (v256)
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v250;
                    address[9] = 2082;
                    *(_QWORD *)&address[10] = v254;
                    _os_log_impl(&dword_182FBE000, v252, v255, "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                  }

                  free(v254);
                }
LABEL_576:
                if (!v226)
                  goto LABEL_536;
                goto LABEL_523;
              }
              v202 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              __nwlog_obj();
              v203 = objc_claimAutoreleasedReturnValue();
              v204 = v203;
              if (v202 == 49)
              {
                if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 2112;
                  *(_QWORD *)&address[7] = endpoint;
                  address[11] = 1024;
                  *(_DWORD *)&address[12] = 49;
                  _os_log_impl(&dword_182FBE000, v204, OS_LOG_TYPE_ERROR, "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d", (uint8_t *)address, 0x1Cu);
                }

                goto LABEL_542;
              }
              *(_DWORD *)address = 136446722;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 2112;
              *(_QWORD *)&address[7] = endpoint;
              address[11] = 1024;
              *(_DWORD *)&address[12] = v202;
              v206 = (char *)_os_log_send_and_compose_impl();

              v279 = OS_LOG_TYPE_ERROR;
              v278 = 0;
              if (__nwlog_fault(v206, &v279, &v278))
              {
                if (v279 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v207 = objc_claimAutoreleasedReturnValue();
                  v208 = v279;
                  if (os_log_type_enabled(v207, v279))
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(_QWORD *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v202;
                    _os_log_impl(&dword_182FBE000, v207, v208, "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d", (uint8_t *)address, 0x1Cu);
                  }
                }
                else if (v278)
                {
                  v209 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v207 = objc_claimAutoreleasedReturnValue();
                  v266 = v279;
                  v210 = os_log_type_enabled(v207, v279);
                  if (v209)
                  {
                    if (v210)
                    {
                      *(_DWORD *)address = 136446978;
                      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(_QWORD *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v202;
                      address[14] = 2082;
                      *(_QWORD *)&address[15] = v209;
                      _os_log_impl(&dword_182FBE000, v207, v266, "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x26u);
                    }

                    free(v209);
                    goto LABEL_540;
                  }
                  if (v210)
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(_QWORD *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v202;
                    _os_log_impl(&dword_182FBE000, v207, v266, "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x1Cu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v207 = objc_claimAutoreleasedReturnValue();
                  v237 = v279;
                  if (os_log_type_enabled(v207, v279))
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(_QWORD *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v202;
                    _os_log_impl(&dword_182FBE000, v207, v237, "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x1Cu);
                  }
                }

              }
LABEL_540:
              if (v206)
                free(v206);
              goto LABEL_542;
            }
            v148 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            __nwlog_obj();
            v149 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)address = 136446466;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v148;
            v150 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v279 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v150, type, &v279))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v151 = objc_claimAutoreleasedReturnValue();
                v152 = type[0];
                if (os_log_type_enabled(v151, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v148;
                  _os_log_impl(&dword_182FBE000, v151, v152, "%{public}s IP_RECVTOS failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
                }
              }
              else if (v279)
              {
                v178 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v151 = objc_claimAutoreleasedReturnValue();
                v264 = type[0];
                v179 = os_log_type_enabled(v151, type[0]);
                if (v178)
                {
                  if (v179)
                  {
                    *(_DWORD *)address = 136446722;
                    *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v148;
                    address[9] = 2082;
                    *(_QWORD *)&address[10] = v178;
                    _os_log_impl(&dword_182FBE000, v151, v264, "%{public}s IP_RECVTOS failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                  }

                  free(v178);
                  goto LABEL_446;
                }
                if (v179)
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v148;
                  _os_log_impl(&dword_182FBE000, v151, v264, "%{public}s IP_RECVTOS failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                }
              }
              else
              {
                __nwlog_obj();
                v151 = objc_claimAutoreleasedReturnValue();
                v194 = type[0];
                if (os_log_type_enabled(v151, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v148;
                  _os_log_impl(&dword_182FBE000, v151, v194, "%{public}s IP_RECVTOS failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
                }
              }

            }
LABEL_446:
            if (v150)
              free(v150);
            v76 = v272;
            goto LABEL_449;
          }
          v93 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (v93 <= 0x2A && ((1 << v93) & 0x40000400004) != 0)
          {
            __nwlog_obj();
            v94 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v93;
              _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
            }

            v78 = v274;
            v76 = v272;
            goto LABEL_276;
          }
          __nwlog_obj();
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)address = 136446466;
          *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 1024;
          *(_DWORD *)&address[7] = v93;
          v110 = (const char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v279 = OS_LOG_TYPE_DEFAULT;
          v111 = (char *)v110;
          if (!__nwlog_fault(v110, type, &v279))
          {
LABEL_273:
            v76 = v272;
            if (v111)
              free(v111);
            v78 = v274;
            goto LABEL_276;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v112 = objc_claimAutoreleasedReturnValue();
            v113 = type[0];
            if (os_log_type_enabled(v112, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v93;
              _os_log_impl(&dword_182FBE000, v112, v113, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
            }
          }
          else
          {
            if (v279)
            {
              v121 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v122 = objc_claimAutoreleasedReturnValue();
              v263 = type[0];
              v123 = os_log_type_enabled(v122, type[0]);
              if (v121)
              {
                if (v123)
                {
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v93;
                  address[9] = 2082;
                  *(_QWORD *)&address[10] = v121;
                  _os_log_impl(&dword_182FBE000, v122, v263, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
                }

                free(v121);
              }
              else
              {
                if (v123)
                {
                  *(_DWORD *)address = 136446466;
                  *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v93;
                  _os_log_impl(&dword_182FBE000, v122, v263, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
                }

              }
              goto LABEL_272;
            }
            __nwlog_obj();
            v112 = objc_claimAutoreleasedReturnValue();
            v130 = type[0];
            if (os_log_type_enabled(v112, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v93;
              _os_log_impl(&dword_182FBE000, v112, v130, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
            }
          }

LABEL_272:
          v111 = (char *)v110;
          goto LABEL_273;
        }
        v56 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        __nwlog_obj();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)address = 136446466;
        *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
        address[6] = 1024;
        v269 = v56;
        *(_DWORD *)&address[7] = v56;
        v271 = (const char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v280) = 0;
        v58 = (char *)v271;
        if (!__nwlog_fault(v271, type, &v280))
        {
LABEL_150:
          if (v58)
            free(v58);
          goto LABEL_152;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v59 = objc_claimAutoreleasedReturnValue();
          v60 = type[0];
          if (os_log_type_enabled(v59, type[0]))
          {
            *(_DWORD *)address = 136446466;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v269;
            _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
          }

        }
        else
        {
          if ((_BYTE)v280)
          {
            v68 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v69 = objc_claimAutoreleasedReturnValue();
            v262 = type[0];
            v70 = os_log_type_enabled(v69, type[0]);
            if (v68)
            {
              if (v70)
              {
                *(_DWORD *)address = 136446722;
                *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v269;
                address[9] = 2082;
                *(_QWORD *)&address[10] = v68;
                _os_log_impl(&dword_182FBE000, v69, v262, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
              }

              free(v68);
              goto LABEL_149;
            }
            if (v70)
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v269;
              _os_log_impl(&dword_182FBE000, v69, v262, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v69 = objc_claimAutoreleasedReturnValue();
            v73 = type[0];
            if (os_log_type_enabled(v69, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v269;
              _os_log_impl(&dword_182FBE000, v69, v73, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
            }
          }

        }
LABEL_149:
        v58 = (char *)v271;
        goto LABEL_150;
      }
      v33 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = (id)gLogObj;
      *(_DWORD *)address = 136446466;
      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
      address[6] = 1024;
      *(_DWORD *)&address[7] = v33;
      v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v282) = 0;
      if (__nwlog_fault(v35, type, &v282))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v36 = (id)gLogObj;
          v37 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            *(_DWORD *)address = 136446466;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v33;
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s socket failed %{darwin.errno}d", (uint8_t *)address, 0x12u);
          }
        }
        else if ((_BYTE)v282)
        {
          v46 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v47 = type[0];
          v48 = os_log_type_enabled(v36, type[0]);
          if (v46)
          {
            if (v48)
            {
              *(_DWORD *)address = 136446722;
              *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v33;
              address[9] = 2082;
              *(_QWORD *)&address[10] = v46;
              _os_log_impl(&dword_182FBE000, v36, v47, "%{public}s socket failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)address, 0x1Cu);
            }

            free(v46);
            if (!v35)
              goto LABEL_108;
            goto LABEL_107;
          }
          if (v48)
          {
            *(_DWORD *)address = 136446466;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v33;
            _os_log_impl(&dword_182FBE000, v36, v47, "%{public}s socket failed %{darwin.errno}d, no backtrace", (uint8_t *)address, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v62 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            *(_DWORD *)address = 136446466;
            *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v33;
            _os_log_impl(&dword_182FBE000, v36, v62, "%{public}s socket failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)address, 0x12u);
          }
        }

      }
      if (!v35)
      {
LABEL_108:
        v38 = nw_error_create_posix_error(v33);
        goto LABEL_109;
      }
LABEL_107:
      free(v35);
      goto LABEL_108;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)address = 136446466;
      *(_QWORD *)&address[2] = "nw_listener_socket_inbox_create_socket";
      address[6] = 1024;
      *(_DWORD *)&address[7] = v20;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s IP Protocol %u unrecognized", (uint8_t *)address, 0x12u);
    }
  }
LABEL_59:

  v38 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
LABEL_109:
  v24 = v38;
LABEL_110:

LABEL_111:
  return v24;
}

void sub_1839B62CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t __33__nw_listener_inbox_socket_start__block_invoke_2(uint64_t a1)
{
  nw_fd_wrapper_close(*(void **)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "handleInboxCancelComplete:");
}

void nw_listener_inbox_socket_handle_new_socket(void *a1, int a2, void *a3, void *a4, int a5, void *a6)
{
  id *v11;
  id v12;
  _DWORD *v13;
  NSObject *v14;
  const char *logging_description;
  NSObject *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id *v22;
  id *v23;
  id v24;
  _BYTE *v25;
  _BOOL4 v26;
  char *v27;
  NSObject *v28;
  NSObject *v29;
  BOOL v30;
  NSObject *v31;
  id v32;
  id v33;
  int v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a3;
  v33 = a4;
  v32 = a6;
  v34 = 1;
  v13 = nw_fd_wrapper_create(a2);
  if (!setsockopt(a2, 0xFFFF, 4130, &v34, 4u))
  {
    v17 = nw_endpoint_create_with_sock_name(a2);
    v18 = v11[6];
    v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v18, 0, 0);

    nw_parameters_set_server_mode(v19, 1);
    if (v17)
      nw_parameters_set_local_endpoint(v19, v17);
    v20 = nw_parameters_copy_context(v19);
    v21 = nw_context_copy_registered_endpoint(v20, v12);

    v22 = nw_endpoint_copy_association_with_evaluator(v21, v19, 0);
    v23 = v22;
    if (v22)
    {
      v24 = nw_association_copy_current_path(v22, v19);
      if (nw_parameters_get_local_only((nw_parameters_t)v11[6]))
      {
        if (!v24)
        {
          v25 = 0;
          goto LABEL_24;
        }
        v25 = v24;
        v26 = (v25[473] & 0x20) == 0;

        if (v26)
        {
LABEL_24:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = (id)gLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {

          }
          else
          {
            v30 = gLogFDOverride == -1;

            if (v30)
            {
LABEL_30:
              v16 = 0;
LABEL_31:

              v12 = v21;
              goto LABEL_32;
            }
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_listener_inbox_socket_handle_new_socket";
            v37 = 2114;
            v38 = (const char *)v21;
            _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring non-local connection from %{public}@", buf, 0x16u);
          }

          goto LABEL_30;
        }
      }
      else
      {
        v25 = v24;
      }
    }
    else
    {
      v25 = 0;
      if (nw_parameters_get_local_only((nw_parameters_t)v11[6]))
        goto LABEL_24;
    }
    objc_msgSend(v11[1], "updateParametersForNewConnection:", v19);
    v27 = (char *)objc_msgSend(v11[1], "getPeerDeviceID");
    if (v27)
    {
      nw_endpoint_set_device_id(v21, v27);
      free(v27);
    }
    v28 = nw_connection_create_with_connected_socket_internal(v13, v19, v17, v21, 1);
    v16 = v28;
    if (v28)
    {
      if (v33)
        nw_connection_add_initial_inbound_data(v28, v33, a5);
      objc_msgSend(v11[1], "handleInbound:addProtocolInbox:", v16, nw_parameters_get_attach_protocol_listener(v19));
      if (v32)
        nw_array_append((uint64_t)v32, v16);
    }
    goto LABEL_31;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    logging_description = nw_endpoint_get_logging_description(v12);
    *(_DWORD *)buf = 136446466;
    v36 = "nw_listener_inbox_socket_handle_new_socket";
    v37 = 2082;
    v38 = logging_description;
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s Failed to set SO_NOSIGPIPE on new connection from %{public}s", buf, 0x16u);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v36 = "nw_listener_inbox_socket_handle_new_socket";
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Failed to set SO_NOSIGPIPE on new connection from <nw_redacted>", buf, 0xCu);
  }
LABEL_32:

}

void sub_1839B6874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

BOOL nw_listener_inbox_accept_udp(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  _DWORD *v4;
  _DWORD *v5;
  sockaddr *v6;
  sockaddr *v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  char *v14;
  unint64_t StatusReg;
  ssize_t v16;
  int v17;
  NSObject *v18;
  void *v19;
  _DWORD *posix_error;
  const sockaddr *v21;
  unsigned int *msg_control;
  const sockaddr *v23;
  int v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  BOOL v28;
  int sa_family;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  nw_endpoint_t v33;
  NWConcrete_nw_interface *v34;
  nw_endpoint_t v35;
  NSObject *v36;
  id v37;
  NSObject *v38;
  id v39;
  NSObject *v40;
  id *v41;
  id *v42;
  id v43;
  void *v44;
  id v45;
  int sa_len;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  int v54;
  os_log_type_t v55;
  int v56;
  void *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  NSObject *v62;
  _BOOL8 result;
  id v64;
  NSObject *v65;
  _BOOL4 v66;
  void *v67;
  int source_connection_id_length;
  NSObject *v69;
  NSObject *v70;
  _BOOL4 v71;
  int v72;
  int v73;
  NSObject *v74;
  int v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  id v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  __int128 *identifier;
  id v85;
  id v86;
  _QWORD *quic_instance_by_id;
  NSObject *v88;
  uint64_t v89;
  void (*v90)(_QWORD *);
  NSObject *v91;
  NWConcrete_nw_interface *v92;
  void *v93;
  NWConcrete_nw_interface *v94;
  NSObject *v95;
  int v96;
  int v97;
  int v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  int v103;
  void *v104;
  char *v105;
  NSObject *v106;
  os_log_type_t v107;
  int v108;
  void *v109;
  os_log_type_t v110;
  char *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  char *v114;
  os_log_type_t v115;
  _BOOL4 v116;
  int v117;
  void *v118;
  os_log_type_t v119;
  os_log_type_t v120;
  os_log_type_t v121;
  os_log_type_t v122;
  _BOOL4 v123;
  os_log_type_t v124;
  int v125;
  void *v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  int v130;
  void *v131;
  os_log_type_t v132;
  os_log_type_t v133;
  NWConcrete_nw_interface_option_details *v134;
  void *v135;
  NSObject *v136;
  os_log_type_t v137;
  void *v138;
  os_log_type_t v139;
  os_log_type_t v140;
  _BOOL4 v141;
  char *backtrace_string;
  os_log_type_t v143;
  _BOOL4 v144;
  char *v145;
  os_log_type_t v146;
  _BOOL4 v147;
  NSObject *v148;
  uint64_t v149;
  _BOOL8 v150;
  uint64_t v151;
  void (*v152)(_QWORD *, _QWORD, _BOOL8);
  void *v153;
  os_log_type_t v154;
  _BOOL4 v155;
  os_log_type_t v156;
  char *v157;
  _BOOL4 v158;
  os_log_type_t v159;
  os_log_type_t v160;
  os_log_type_t v161;
  os_log_type_t v162;
  void *v163;
  int v164;
  void *v165;
  os_log_type_t v166;
  int v167;
  int v168;
  NSObject *v169;
  NSObject *v170;
  int v171;
  NSObject *v172;
  int v173;
  void *v174;
  char *v175;
  NSObject *v176;
  os_log_type_t v177;
  int v178;
  void *v179;
  os_log_type_t v180;
  os_log_type_t v181;
  _BOOL4 v182;
  os_log_type_t v183;
  os_log_type_t v184;
  char *v185;
  _BOOL4 v186;
  char *v187;
  _BOOL4 v188;
  os_log_type_t v189;
  os_log_type_t v190;
  _BOOL4 v191;
  os_log_type_t v192;
  _BOOL4 v193;
  void *v194;
  char *v195;
  NSObject *v196;
  os_log_type_t v197;
  void *v198;
  os_log_type_t v199;
  void *v200;
  os_log_type_t v201;
  os_log_type_t v202;
  os_log_type_t v203;
  os_log_type_t v204;
  os_log_type_t v205;
  unsigned int v206;
  NSObject *v207;
  unsigned int v208;
  NSObject *v209;
  unsigned int v210;
  void *v211;
  os_log_type_t v212;
  os_log_type_t v213;
  _BOOL4 v214;
  void *v215;
  char *v216;
  NSObject *v217;
  os_log_type_t v218;
  void *v219;
  os_log_type_t v220;
  char *v221;
  _BOOL4 v222;
  os_log_type_t v223;
  char *v224;
  os_log_type_t v225;
  _BOOL4 v226;
  char *v227;
  os_log_type_t v228;
  _BOOL4 v229;
  char *v230;
  os_log_type_t v231;
  _BOOL4 v232;
  os_log_type_t v233;
  _BOOL4 v234;
  os_log_type_t v235;
  os_log_type_t v236;
  os_log_type_t v237;
  os_log_type_t v238;
  os_log_type_t v239;
  NSObject *v240;
  void *v241;
  void *v242;
  const char *v243;
  NSObject *v244;
  os_log_type_t v245;
  const char *v246;
  char *v247;
  NSObject *v248;
  _BOOL4 v249;
  const char *v250;
  os_log_type_t v251;
  const char *v252;
  const char *v253;
  os_log_type_t v254;
  char *v255;
  NWConcrete_nw_interface_option_details *v256;
  nw_endpoint_t v257;
  void *v258;
  void *v259;
  NSObject *v260;
  nw_endpoint_t v261;
  os_log_type_t v262;
  id *v263;
  nw_protocol_definition_t v264;
  os_log_type_t v265;
  os_log_type_t v266;
  os_log_type_t v267;
  NSObject *v268;
  id v269;
  int v270;
  NWConcrete_nw_interface *data;
  NSObject *dataa;
  unsigned __int8 *object;
  char v274;
  os_log_type_t v275;
  _QWORD v276[4];
  NWConcrete_nw_interface *v277;
  os_log_type_t *v278;
  os_log_type_t type[8];
  os_log_type_t *v280;
  uint64_t v281;
  void *v282;
  sockaddr v283;
  uint64_t v284;
  int v285;
  void *v286;
  _QWORD v287[4];
  NSObject *v288;
  sockaddr *v289;
  _DWORD *v290;
  _OWORD v291[2];
  _BYTE address[28];
  unsigned int v293;
  msghdr v294;
  _QWORD v295[2];
  _BYTE buf[40];
  _BYTE v297[14];
  __int16 v298;
  int v299;
  __int16 v300;
  _BYTE *v301;
  __int16 v302;
  char *v303;
  _OWORD v304[16];
  _QWORD v305[2];
  char v306;
  int buffer;
  const char *v308;
  __int16 v309;
  char *v310;
  uint64_t v311;

  v1 = (void *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v311 = *MEMORY[0x1E0C80C00];
  v14 = v1;
  object = v3;
  if (!v14)
  {
    __nwlog_obj();
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    buffer = 136446210;
    v308 = "nw_listener_inbox_accept_udp";
    v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v304[0]) = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v47, v304, buf))
      goto LABEL_80;
    if (LOBYTE(v304[0]) == 17)
    {
      __nwlog_obj();
      v136 = objc_claimAutoreleasedReturnValue();
      v137 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_182FBE000, v136, v137, "%{public}s called with null inbox", (uint8_t *)&buffer, 0xCu);
      }
    }
    else if (buf[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v136 = objc_claimAutoreleasedReturnValue();
      v143 = v304[0];
      v144 = os_log_type_enabled(v136, v304[0]);
      if (backtrace_string)
      {
        if (v144)
        {
          buffer = 136446466;
          v308 = "nw_listener_inbox_accept_udp";
          v309 = 2082;
          v310 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v136, v143, "%{public}s called with null inbox, dumping backtrace:%{public}s", (uint8_t *)&buffer, 0x16u);
        }

        free(backtrace_string);
        if (!v47)
          goto LABEL_82;
        goto LABEL_81;
      }
      if (v144)
      {
        buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_182FBE000, v136, v143, "%{public}s called with null inbox, no backtrace", (uint8_t *)&buffer, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v136 = objc_claimAutoreleasedReturnValue();
      v159 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_182FBE000, v136, v159, "%{public}s called with null inbox, backtrace limit exceeded", (uint8_t *)&buffer, 0xCu);
      }
    }
    goto LABEL_299;
  }
  if (v14[88] != 17)
  {
    __nwlog_obj();
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    buffer = 136446210;
    v308 = "nw_listener_inbox_accept_udp";
    v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v304[0]) = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v47, v304, buf))
      goto LABEL_80;
    if (LOBYTE(v304[0]) == 17)
    {
      __nwlog_obj();
      v136 = objc_claimAutoreleasedReturnValue();
      v139 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_182FBE000, v136, v139, "%{public}s called with null (inbox->_ipProtocol == 17)", (uint8_t *)&buffer, 0xCu);
      }
    }
    else if (buf[0])
    {
      v145 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v136 = objc_claimAutoreleasedReturnValue();
      v146 = v304[0];
      v147 = os_log_type_enabled(v136, v304[0]);
      if (v145)
      {
        if (v147)
        {
          buffer = 136446466;
          v308 = "nw_listener_inbox_accept_udp";
          v309 = 2082;
          v310 = v145;
          _os_log_impl(&dword_182FBE000, v136, v146, "%{public}s called with null (inbox->_ipProtocol == 17), dumping backtrace:%{public}s", (uint8_t *)&buffer, 0x16u);
        }

        free(v145);
        goto LABEL_80;
      }
      if (v147)
      {
        buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_182FBE000, v136, v146, "%{public}s called with null (inbox->_ipProtocol == 17), no backtrace", (uint8_t *)&buffer, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v136 = objc_claimAutoreleasedReturnValue();
      v160 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_182FBE000, v136, v160, "%{public}s called with null (inbox->_ipProtocol == 17), backtrace limit exceeded", (uint8_t *)&buffer, 0xCu);
      }
    }
LABEL_299:

    goto LABEL_80;
  }
  bzero(&buffer, 0x2400uLL);
  v305[0] = 0;
  v305[1] = 0;
  v306 = 0;
  *(_QWORD *)&v294.msg_iovlen = 1;
  memset(v304, 0, sizeof(v304));
  v294.msg_name = v7;
  *(_QWORD *)&v294.msg_namelen = 128;
  v295[0] = &buffer;
  v295[1] = 9216;
  v294.msg_iov = (iovec *)v295;
  v294.msg_control = v304;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)&v294.msg_controllen = 0x8000000100;
  while (1)
  {
    v16 = recvmsg(v13, &v294, 0);
    if ((v16 & 0x8000000000000000) == 0)
      break;
    v17 = **(_DWORD **)(StatusReg + 8);
    if (v17 != 4)
    {
      if (v17 != 35)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s UDP listen socket recvmsg %{darwin.errno}d", buf, 0x12u);
        }

        v19 = (void *)*((_QWORD *)v14 + 1);
        posix_error = nw_error_create_posix_error(v17);
        objc_msgSend(v19, "handleInboxFailed:error:", v14, posix_error);

      }
      goto LABEL_82;
    }
  }
  if (v9)
    *v9 = 1;
  v293 = 0;
  v21 = nw_endpoint_get_address(*((nw_endpoint_t *)v14 + 4));
  memset(address, 0, sizeof(address));
  if (v294.msg_controllen < 0xC || (msg_control = (unsigned int *)v294.msg_control) == 0)
  {
LABEL_54:
    if (!if_indextoname(v293, (char *)v305))
      LOBYTE(v305[0]) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v45 = (id)gLogObj;
    sa_len = v7->sa_len;
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v13;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v16;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v305;
    *(_WORD *)&buf[38] = 1040;
    *(_DWORD *)v297 = sa_len;
    *(_WORD *)&v297[4] = 2098;
    *(_QWORD *)&v297[6] = v7;
    v298 = 1040;
    v299 = address[0];
    v300 = 2098;
    v301 = address;
    v47 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.sa_len = 0;
    if (__nwlog_fault(v47, type, &v283))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v48 = (id)gLogObj;
        v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          v50 = v7->sa_len;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v13;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v16;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v305;
          *(_WORD *)&buf[38] = 1040;
          *(_DWORD *)v297 = v50;
          *(_WORD *)&v297[4] = 2098;
          *(_QWORD *)&v297[6] = v7;
          v298 = 1040;
          v299 = address[0];
          v300 = 2098;
          v301 = address;
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P", buf, 0x46u);
        }
LABEL_79:

        goto LABEL_80;
      }
      if (!v283.sa_len)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v48 = (id)gLogObj;
        v55 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          v56 = v7->sa_len;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v13;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v16;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v305;
          *(_WORD *)&buf[38] = 1040;
          *(_DWORD *)v297 = v56;
          *(_WORD *)&v297[4] = 2098;
          *(_QWORD *)&v297[6] = v7;
          v298 = 1040;
          v299 = address[0];
          v300 = 2098;
          v301 = address;
          _os_log_impl(&dword_182FBE000, v48, v55, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P, backtrace limit exceeded", buf, 0x46u);
        }
        goto LABEL_79;
      }
      v51 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v48 = (id)gLogObj;
      v52 = type[0];
      v53 = os_log_type_enabled(v48, type[0]);
      if (!v51)
      {
        if (v53)
        {
          v61 = v7->sa_len;
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v13;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v16;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v305;
          *(_WORD *)&buf[38] = 1040;
          *(_DWORD *)v297 = v61;
          *(_WORD *)&v297[4] = 2098;
          *(_QWORD *)&v297[6] = v7;
          v298 = 1040;
          v299 = address[0];
          v300 = 2098;
          v301 = address;
          _os_log_impl(&dword_182FBE000, v48, v52, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P, no backtrace", buf, 0x46u);
        }
        goto LABEL_79;
      }
      if (v53)
      {
        v54 = v7->sa_len;
        *(_DWORD *)buf = 136448258;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v16;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v305;
        *(_WORD *)&buf[38] = 1040;
        *(_DWORD *)v297 = v54;
        *(_WORD *)&v297[4] = 2098;
        *(_QWORD *)&v297[6] = v7;
        v298 = 1040;
        v299 = address[0];
        v300 = 2098;
        v301 = address;
        v302 = 2082;
        v303 = v51;
        _os_log_impl(&dword_182FBE000, v48, v52, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P, dumping backtrace:%{public}s", buf, 0x50u);
      }

      free(v51);
      if (!v47)
        goto LABEL_82;
LABEL_81:
      free(v47);
      goto LABEL_82;
    }
LABEL_80:
    if (!v47)
      goto LABEL_82;
    goto LABEL_81;
  }
  v23 = v21;
  v24 = 0;
  v25 = 0;
  v26 = (unsigned int *)((char *)v294.msg_control + v294.msg_controllen);
  do
  {
    sa_family = v21->sa_family;
    if (sa_family == 2)
    {
      if (!msg_control[1])
      {
        v32 = msg_control[2];
        if (v32 == 20)
        {
          v293 = *((unsigned __int16 *)msg_control + 7);
        }
        else if (v32 == 7)
        {
          *(_QWORD *)address = 528;
          *(_QWORD *)&address[8] = 0;
          *(_DWORD *)&address[4] = msg_control[3];
          *(_WORD *)&address[2] = *(_WORD *)v21->sa_data;
          v25 = 16;
          v24 = 2;
        }
      }
    }
    else if (sa_family == 30 && msg_control[1] == 41 && msg_control[2] == 46)
    {
      *(_QWORD *)address = 7708;
      memset(&address[8], 0, 20);
      v30 = msg_control[7];
      v293 = v30;
      *(_OWORD *)&address[8] = *(_OWORD *)(msg_control + 3);
      if (address[8] != 254 || (address[9] & 0xC0) != 0x80)
        v30 = 0;
      *(_DWORD *)&address[24] = v30;
      *(_WORD *)&address[2] = *(_WORD *)v21->sa_data;
      v25 = 28;
      v24 = 30;
    }
    if (v5)
    {
      v31 = msg_control[1];
      if (v31 != 41)
      {
        if (v31 || msg_control[2] != 27)
          goto LABEL_16;
LABEL_15:
        *v5 = msg_control[3];
        goto LABEL_16;
      }
      if (msg_control[2] == 36)
        goto LABEL_15;
    }
LABEL_16:
    v27 = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
    if (v27 + 3 <= v26)
    {
      v28 = v27 == msg_control;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    msg_control = v27;
  }
  while (!v28);
  if (!v25 || !v24)
    goto LABEL_54;
  if (!objc_msgSend(v14, "multicast"))
  {
    if (v16)
    {
      dataa = dispatch_data_create(&buffer, v16, 0, 0);

      if (!dataa)
      {
        __nwlog_obj();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        v58 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v283.sa_len = 0;
        if (__nwlog_fault(v58, type, &v283))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v59 = objc_claimAutoreleasedReturnValue();
            v60 = type[0];
            if (os_log_type_enabled(v59, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s dispatch_data_create failed", buf, 0xCu);
            }
          }
          else if (v283.sa_len)
          {
            v76 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v59 = objc_claimAutoreleasedReturnValue();
            v77 = type[0];
            v78 = os_log_type_enabled(v59, type[0]);
            if (v76)
            {
              if (v78)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v76;
                _os_log_impl(&dword_182FBE000, v59, v77, "%{public}s dispatch_data_create failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v76);
              goto LABEL_200;
            }
            if (v78)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_182FBE000, v59, v77, "%{public}s dispatch_data_create failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v59 = objc_claimAutoreleasedReturnValue();
            v120 = type[0];
            if (os_log_type_enabled(v59, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_182FBE000, v59, v120, "%{public}s dispatch_data_create failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_200:
        if (v58)
          free(v58);
        v65 = 0;
        goto LABEL_211;
      }
    }
    else
    {
      dataa = MEMORY[0x1E0C80D00];
      v64 = MEMORY[0x1E0C80D00];
    }
    if (object)
    {
      if (*((_QWORD *)object + 3) != *((_QWORD *)object + 2))
      {
        v287[0] = MEMORY[0x1E0C809B0];
        v287[1] = 3221225472;
        v287[2] = ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke;
        v287[3] = &unk_1E14A8CD0;
        v289 = v7;
        v291[0] = *(_OWORD *)address;
        *(_OWORD *)((char *)v291 + 12) = *(_OWORD *)&address[12];
        v65 = dataa;
        v288 = v65;
        v290 = v5;
        v66 = nw_array_apply(object, (uint64_t)v287);

        if (!v66)
        {
LABEL_211:
          v62 = 0;
LABEL_530:

          goto LABEL_83;
        }
      }
    }
    if (nw_parameters_get_upper_transport_protocol(*((void **)v14 + 6)) != 253)
      goto LABEL_146;
    v286 = 0;
    nw_parameters_get_upper_transport_protocol_options(*((void **)v14 + 6));
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    if (nw_protocol_options_is_quic_stream(v67))
    {
      source_connection_id_length = nw_quic_get_source_connection_id_length(v67);
    }
    else
    {
      if (!nw_protocol_options_is_quic_connection(v67))
      {
        v75 = 0;
        goto LABEL_126;
      }
      source_connection_id_length = nw_quic_connection_get_source_connection_id_length(v67);
    }
    v75 = source_connection_id_length;
LABEL_126:
    __nwlog_obj();
    v82 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v75;
      _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s Using CID length %u", buf, 0x12u);
    }

    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __nw_quic_parse_dispatch_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_tmp_29923;
    v297[0] = v75;
    *(_QWORD *)&buf[32] = &v286;
    if (dispatch_data_apply(dataa, buf) && if_indextoname(v293, (char *)v305))
    {
      __nwlog_obj();
      v83 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v305;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v286;
        _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEFAULT, "%{public}s Received QUIC short header packet on interface %s with CID %@", buf, 0x20u);
      }

      v264 = nw_protocol_copy_quic_definition();
      identifier = (__int128 *)nw_protocol_definition_get_identifier(v264);
      *(_QWORD *)&v283.sa_len = 0;
      *(_QWORD *)&v283.sa_data[6] = 0;
      v285 = 0;
      v284 = 0;
      *(_WORD *)v283.sa_data = __rev16(nw_endpoint_get_port(*((nw_endpoint_t *)v14 + 4)));
      *(_WORD *)&v283.sa_len = 7708;
      v269 = nw_parameters_copy_context(*((void **)v14 + 6));
      v261 = nw_endpoint_create_address(&v283);
      v85 = nw_context_copy_registered_endpoint(v269, v261);
      v86 = nw_endpoint_copy_registrar_for_identifier(v85, identifier, 0);
      if (v86)
      {
        v259 = v86;
        quic_instance_by_id = (_QWORD *)nw_protocol_instance_registrar_find_quic_instance_by_id(v86, v286);
        v86 = v259;
        if (quic_instance_by_id)
        {
          __nwlog_obj();
          v88 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_INFO, "%{public}s Found an existing QUIC connection, adding a new path", buf, 0xCu);
          }

          v89 = quic_instance_by_id[3];
          if (!v89)
            goto LABEL_268;
          v90 = *(void (**)(_QWORD *))(v89 + 120);
          if (!v90)
            goto LABEL_268;
          v90(quic_instance_by_id);
          v258 = (void *)objc_claimAutoreleasedReturnValue();
          __nwlog_obj();
          v91 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v258;
            _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_INFO, "%{public}s QUIC protocol peer path %@", buf, 0x16u);
          }

          v92 = nw_interface_create_with_name((char *)v305);
          v257 = nw_endpoint_create_address(v7);
          *(_QWORD *)type = 0;
          v280 = type;
          v281 = 0x2020000000;
          v282 = 0;
          v93 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
          if (!v93)
          {
            __nwlog_obj();
            v240 = objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v240, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 16;
            v241 = (void *)_os_log_send_and_compose_impl();

            result = __nwlog_abort((uint64_t)v241);
            if (result)
            {
              __break(1u);
              return result;
            }
            free(v241);
          }
          v282 = v93;
          v276[0] = MEMORY[0x1E0C809B0];
          v276[1] = 3221225472;
          v276[2] = ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke_85;
          v276[3] = &unk_1E14A8CF8;
          v94 = v92;
          v277 = v94;
          v278 = type;
          nw_path_enumerate_interface_options(v258, v276);
          if (uuid_is_null(*((const unsigned __int8 **)v280 + 3)))
          {
            __nwlog_obj();
            v95 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_INFO, "%{public}s Did not find a matching interface", buf, 0xCu);
            }
            goto LABEL_265;
          }
          v95 = nw_path_copy_flow_registration(v269, (uint64_t)quic_instance_by_id);
          v134 = nw_interface_option_details_create(v94, *((_OWORD **)v280 + 3), v257, 0, dataa, v13);
          v256 = v134;
          if (v134)
          {
            nw_path_flow_registration_add_extra_interface_option(v95, v134);
          }
          else
          {
            __nwlog_obj();
            v148 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              v149 = *((_QWORD *)v280 + 3);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v94;
              *(_WORD *)&buf[22] = 1042;
              *(_DWORD *)&buf[24] = 16;
              *(_WORD *)&buf[28] = 2098;
              *(_QWORD *)&buf[30] = v149;
              _os_log_impl(&dword_182FBE000, v148, OS_LOG_TYPE_ERROR, "%{public}s Unable to create interface option details with %@ [%{public,uuid_t}.16P]", buf, 0x26u);
            }

          }
          v150 = nw_path_flow_registration_copy_path(v95);
          v151 = quic_instance_by_id[3];
          if (v151)
          {
            v152 = *(void (**)(_QWORD *, _QWORD, _BOOL8))(v151 + 168);
            if (v152)
            {
              v152(quic_instance_by_id, quic_instance_by_id[6], v150);
LABEL_264:

LABEL_265:
              v153 = (void *)*((_QWORD *)v280 + 3);
              if (v153)
              {
                free(v153);
                *((_QWORD *)v280 + 3) = 0;
              }

              _Block_object_dispose(type, 8);
LABEL_268:

LABEL_529:
              v62 = 0;
              v65 = dataa;
              goto LABEL_530;
            }
          }
          __nwlog_obj();
          v242 = (void *)objc_claimAutoreleasedReturnValue();
          v243 = (const char *)quic_instance_by_id[2];
          if (!v243)
            v243 = "invalid";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v243;
          v255 = (char *)_os_log_send_and_compose_impl();

          v275 = OS_LOG_TYPE_ERROR;
          v274 = 0;
          if (__nwlog_fault(v255, &v275, &v274))
          {
            if (v275 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v244 = objc_claimAutoreleasedReturnValue();
              v245 = v275;
              if (os_log_type_enabled(v244, v275))
              {
                v246 = (const char *)quic_instance_by_id[2];
                if (!v246)
                  v246 = "invalid";
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v246;
                _os_log_impl(&dword_182FBE000, v244, v245, "%{public}s protocol %{public}s has invalid updated_path callback", buf, 0x16u);
              }

            }
            else
            {
              if (v274)
              {
                v247 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v248 = objc_claimAutoreleasedReturnValue();
                v254 = v275;
                v249 = os_log_type_enabled(v248, v275);
                if (v247)
                {
                  if (v249)
                  {
                    v250 = (const char *)quic_instance_by_id[2];
                    if (!v250)
                      v250 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v250;
                    *(_WORD *)&buf[22] = 2082;
                    *(_QWORD *)&buf[24] = v247;
                    _os_log_impl(&dword_182FBE000, v248, v254, "%{public}s protocol %{public}s has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x20u);
                  }

                  free(v247);
                  goto LABEL_579;
                }
                if (v249)
                {
                  v253 = (const char *)quic_instance_by_id[2];
                  if (!v253)
                    v253 = "invalid";
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v253;
                  _os_log_impl(&dword_182FBE000, v248, v254, "%{public}s protocol %{public}s has invalid updated_path callback, no backtrace", buf, 0x16u);
                }
              }
              else
              {
                __nwlog_obj();
                v248 = objc_claimAutoreleasedReturnValue();
                v251 = v275;
                if (os_log_type_enabled(v248, v275))
                {
                  v252 = (const char *)quic_instance_by_id[2];
                  if (!v252)
                    v252 = "invalid";
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v252;
                  _os_log_impl(&dword_182FBE000, v248, v251, "%{public}s protocol %{public}s has invalid updated_path callback, backtrace limit exceeded", buf, 0x16u);
                }
              }

            }
          }
LABEL_579:
          if (v255)
            free(v255);
          goto LABEL_264;
        }
      }

    }
LABEL_146:
    v96 = socket(v23->sa_family, 2, 0);
    v97 = v96;
    if ((v96 & 0x80000000) == 0)
    {
      *(_DWORD *)type = 1;
      if (setsockopt(v96, 0xFFFF, 4, type, 4u))
      {
        v98 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        __nwlog_obj();
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v98;
        v100 = (char *)_os_log_send_and_compose_impl();

        v283.sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286))
          goto LABEL_526;
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v102 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v98;
            _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s SO_REUSEADDR failed %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v121 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v98;
            _os_log_impl(&dword_182FBE000, v101, v121, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_525;
        }
        v111 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v112 = v283.sa_len;
        v113 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v113)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v98;
            _os_log_impl(&dword_182FBE000, v101, v112, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v113)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v98;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v111;
          _os_log_impl(&dword_182FBE000, v101, v112, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
LABEL_192:

        free(v111);
        if (!v100)
          goto LABEL_528;
        goto LABEL_527;
      }
      if (setsockopt(v97, 0xFFFF, 512, type, 4u))
      {
        v108 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        __nwlog_obj();
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v108;
        v100 = (char *)_os_log_send_and_compose_impl();

        v283.sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286))
          goto LABEL_526;
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v110 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            _os_log_impl(&dword_182FBE000, v101, v110, "%{public}s SO_REUSEPORT failed %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v133 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            _os_log_impl(&dword_182FBE000, v101, v133, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_525;
        }
        v111 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v122 = v283.sa_len;
        v123 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v123)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            _os_log_impl(&dword_182FBE000, v101, v122, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v123)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v108;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v111;
          _os_log_impl(&dword_182FBE000, v101, v122, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        goto LABEL_192;
      }
      if (ioctl(v97, 0x8004667EuLL, type) < 0)
      {
        v130 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        __nwlog_obj();
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v130;
        v100 = (char *)_os_log_send_and_compose_impl();

        v283.sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286))
          goto LABEL_526;
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v132 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v130;
            _os_log_impl(&dword_182FBE000, v101, v132, "%{public}s FIONBIO failed %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v156 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v130;
            _os_log_impl(&dword_182FBE000, v101, v156, "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_525;
        }
        v111 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v140 = v283.sa_len;
        v141 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v141)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v130;
            _os_log_impl(&dword_182FBE000, v101, v140, "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v141)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v130;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v111;
          _os_log_impl(&dword_182FBE000, v101, v140, "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        goto LABEL_192;
      }
      if (nw_parameters_get_use_awdl(*((void **)v14 + 6)) && setsockopt(v97, 0xFFFF, 4356, type, 4u))
      {
        v117 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        __nwlog_obj();
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v117;
        v100 = (char *)_os_log_send_and_compose_impl();

        v283.sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286))
          goto LABEL_526;
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v119 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v117;
            _os_log_impl(&dword_182FBE000, v101, v119, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v161 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v117;
            _os_log_impl(&dword_182FBE000, v101, v161, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_525;
        }
        v111 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v154 = v283.sa_len;
        v155 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v155)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v117;
            _os_log_impl(&dword_182FBE000, v101, v154, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v155)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v117;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v111;
          _os_log_impl(&dword_182FBE000, v101, v154, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        goto LABEL_192;
      }
      if (!nw_parameters_get_no_wake_from_sleep(*((void **)v14 + 6))
        || !setsockopt(v97, 0xFFFF, 0x10000, type, 4u))
      {
LABEL_311:
        v163 = (void *)*((_QWORD *)v14 + 5);
        if (v163 && nw_interface_get_subtype(v163) == 4001 && setsockopt(v97, 0xFFFF, 4376, type, 4u))
        {
          v164 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          __nwlog_obj();
          v165 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v97;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v164;
          v100 = (char *)_os_log_send_and_compose_impl();

          v283.sa_len = 16;
          LOBYTE(v286) = 0;
          if (!__nwlog_fault(v100, &v283, &v286))
            goto LABEL_526;
          if (v283.sa_len == 17)
          {
            __nwlog_obj();
            v101 = objc_claimAutoreleasedReturnValue();
            v166 = v283.sa_len;
            if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v97;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v164;
              _os_log_impl(&dword_182FBE000, v101, v166, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d", buf, 0x18u);
            }
            goto LABEL_525;
          }
          if (!(_BYTE)v286)
          {
            __nwlog_obj();
            v101 = objc_claimAutoreleasedReturnValue();
            v189 = v283.sa_len;
            if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v97;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v164;
              _os_log_impl(&dword_182FBE000, v101, v189, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x18u);
            }
            goto LABEL_525;
          }
          v111 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v101 = objc_claimAutoreleasedReturnValue();
          v181 = v283.sa_len;
          v182 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
          if (!v111)
          {
            if (v182)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v97;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v164;
              _os_log_impl(&dword_182FBE000, v101, v181, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, no backtrace", buf, 0x18u);
            }
            goto LABEL_525;
          }
          if (v182)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v97;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v164;
            *(_WORD *)&buf[24] = 2082;
            *(_QWORD *)&buf[26] = v111;
            _os_log_impl(&dword_182FBE000, v101, v181, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }
          goto LABEL_192;
        }
        if (v293)
        {
          v167 = v23->sa_family;
          if (v167 == 30)
          {
            if (setsockopt(v97, 41, 125, &v293, 4u))
            {
              v171 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              __nwlog_obj();
              v172 = objc_claimAutoreleasedReturnValue();
              v170 = v172;
              if (v171 != 6)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v293;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v171;
                v100 = (char *)_os_log_send_and_compose_impl();

                v283.sa_len = 16;
                LOBYTE(v286) = 0;
                if (!__nwlog_fault(v100, &v283, &v286))
                  goto LABEL_526;
                if (v283.sa_len == 17)
                {
                  __nwlog_obj();
                  v101 = objc_claimAutoreleasedReturnValue();
                  v184 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v293;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v171;
                    _os_log_impl(&dword_182FBE000, v101, v184, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d", buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (!(_BYTE)v286)
                {
                  __nwlog_obj();
                  v101 = objc_claimAutoreleasedReturnValue();
                  v205 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v293;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v171;
                    _os_log_impl(&dword_182FBE000, v101, v205, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                v111 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v101 = objc_claimAutoreleasedReturnValue();
                v192 = v283.sa_len;
                v193 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                if (!v111)
                {
                  if (v193)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v293;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v171;
                    _os_log_impl(&dword_182FBE000, v101, v192, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d, no backtrace", buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (v193)
                {
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v293;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v171;
                  *(_WORD *)&buf[24] = 2082;
                  *(_QWORD *)&buf[26] = v111;
                  _os_log_impl(&dword_182FBE000, v101, v192, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
                }
                goto LABEL_192;
              }
              if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v293;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = 6;
                _os_log_impl(&dword_182FBE000, v170, OS_LOG_TYPE_ERROR, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d", buf, 0x18u);
              }
              goto LABEL_326;
            }
          }
          else
          {
            if (v167 != 2)
              goto LABEL_333;
            if (setsockopt(v97, 0, 25, &v293, 4u))
            {
              v168 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              __nwlog_obj();
              v169 = objc_claimAutoreleasedReturnValue();
              v170 = v169;
              if (v168 != 6)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v293;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v168;
                v100 = (char *)_os_log_send_and_compose_impl();

                v283.sa_len = 16;
                LOBYTE(v286) = 0;
                if (!__nwlog_fault(v100, &v283, &v286))
                  goto LABEL_526;
                if (v283.sa_len == 17)
                {
                  __nwlog_obj();
                  v101 = objc_claimAutoreleasedReturnValue();
                  v183 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v293;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v168;
                    _os_log_impl(&dword_182FBE000, v101, v183, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d", buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (!(_BYTE)v286)
                {
                  __nwlog_obj();
                  v101 = objc_claimAutoreleasedReturnValue();
                  v204 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v293;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v168;
                    _os_log_impl(&dword_182FBE000, v101, v204, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                v111 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v101 = objc_claimAutoreleasedReturnValue();
                v190 = v283.sa_len;
                v191 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                if (!v111)
                {
                  if (v191)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v293;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v168;
                    _os_log_impl(&dword_182FBE000, v101, v190, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d, no backtrace", buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (v191)
                {
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v293;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v168;
                  *(_WORD *)&buf[24] = 2082;
                  *(_QWORD *)&buf[26] = v111;
                  _os_log_impl(&dword_182FBE000, v101, v190, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
                }
                goto LABEL_192;
              }
              if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v293;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = 6;
                _os_log_impl(&dword_182FBE000, v170, OS_LOG_TYPE_ERROR, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d", buf, 0x18u);
              }
LABEL_326:

              goto LABEL_528;
            }
          }
        }
        v167 = v23->sa_family;
LABEL_333:
        if (v167 == 2)
        {
          if ((setsockopt(v97, 0, 27, type, 4u) & 0x80000000) == 0)
            goto LABEL_424;
          v178 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          __nwlog_obj();
          v179 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v178;
          v175 = (char *)_os_log_send_and_compose_impl();

          v283.sa_len = 16;
          LOBYTE(v286) = 0;
          if (!__nwlog_fault(v175, &v283, &v286))
            goto LABEL_422;
          if (v283.sa_len == 17)
          {
            __nwlog_obj();
            v176 = objc_claimAutoreleasedReturnValue();
            v180 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v178;
              _os_log_impl(&dword_182FBE000, v176, v180, "%{public}s IP_RECVTOS failed %{darwin.errno}d", buf, 0x12u);
            }
          }
          else if ((_BYTE)v286)
          {
            v187 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v176 = objc_claimAutoreleasedReturnValue();
            v266 = v283.sa_len;
            v188 = os_log_type_enabled(v176, (os_log_type_t)v283.sa_len);
            if (v187)
            {
              if (v188)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v178;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v187;
                _os_log_impl(&dword_182FBE000, v176, v266, "%{public}s IP_RECVTOS failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v187);
LABEL_422:
              if (v175)
LABEL_423:
                free(v175);
LABEL_424:
              if (uuid_is_null((const unsigned __int8 *)v14 + 89) || !setsockopt(v97, 0xFFFF, 4384, v14 + 89, 0x10u))
                goto LABEL_431;
              v206 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              if (v206 <= 0x2A && ((1 << v206) & 0x40000400004) != 0)
              {
                __nwlog_obj();
                v207 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v206;
                  _os_log_impl(&dword_182FBE000, v207, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d", buf, 0x12u);
                }

                goto LABEL_431;
              }
              __nwlog_obj();
              v215 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v206;
              v216 = (char *)_os_log_send_and_compose_impl();

              v283.sa_len = 16;
              LOBYTE(v286) = 0;
              if (__nwlog_fault(v216, &v283, &v286))
              {
                if (v283.sa_len == 17)
                {
                  __nwlog_obj();
                  v217 = objc_claimAutoreleasedReturnValue();
                  v218 = v283.sa_len;
                  if (os_log_type_enabled(v217, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v206;
                    _os_log_impl(&dword_182FBE000, v217, v218, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d", buf, 0x12u);
                  }
                }
                else if ((_BYTE)v286)
                {
                  v221 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v217 = objc_claimAutoreleasedReturnValue();
                  v267 = v283.sa_len;
                  v222 = os_log_type_enabled(v217, (os_log_type_t)v283.sa_len);
                  if (v221)
                  {
                    if (v222)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v206;
                      *(_WORD *)&buf[18] = 2082;
                      *(_QWORD *)&buf[20] = v221;
                      _os_log_impl(&dword_182FBE000, v217, v267, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                    }

                    free(v221);
                    goto LABEL_521;
                  }
                  if (v222)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v206;
                    _os_log_impl(&dword_182FBE000, v217, v267, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, no backtrace", buf, 0x12u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v217 = objc_claimAutoreleasedReturnValue();
                  v235 = v283.sa_len;
                  if (os_log_type_enabled(v217, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v206;
                    _os_log_impl(&dword_182FBE000, v217, v235, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
                  }
                }

              }
LABEL_521:
              if (v216)
                free(v216);
LABEL_431:
              if (address[1] == 2)
              {
                if ((address[4] & 0xF0) == 0xE0)
                  goto LABEL_439;
              }
              else if (address[1] == 30 && address[8] == 255)
              {
LABEL_440:
                *(_QWORD *)&address[8] = 0;
                *(_QWORD *)&address[16] = 0;
LABEL_441:
                if (bind(v97, (const sockaddr *)address, address[0]))
                {
                  v208 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v208 > 0x31 || ((1 << v208) & 0x3000000002002) == 0)
                  {
                    __nwlog_obj();
                    v211 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v97;
                    *(_WORD *)&buf[18] = 1040;
                    *(_DWORD *)&buf[20] = address[0];
                    *(_WORD *)&buf[24] = 2098;
                    *(_QWORD *)&buf[26] = address;
                    *(_WORD *)&buf[34] = 1024;
                    *(_DWORD *)&buf[36] = v208;
                    v100 = (char *)_os_log_send_and_compose_impl();

                    v283.sa_len = 16;
                    LOBYTE(v286) = 0;
                    if (!__nwlog_fault(v100, &v283, &v286))
                      goto LABEL_526;
                    if (v283.sa_len == 17)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v212 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v97;
                        *(_WORD *)&buf[18] = 1040;
                        *(_DWORD *)&buf[20] = address[0];
                        *(_WORD *)&buf[24] = 2098;
                        *(_QWORD *)&buf[26] = address;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = v208;
                        _os_log_impl(&dword_182FBE000, v101, v212, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d", buf, 0x28u);
                      }
                      goto LABEL_525;
                    }
                    if (!(_BYTE)v286)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v223 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v97;
                        *(_WORD *)&buf[18] = 1040;
                        *(_DWORD *)&buf[20] = address[0];
                        *(_WORD *)&buf[24] = 2098;
                        *(_QWORD *)&buf[26] = address;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = v208;
                        _os_log_impl(&dword_182FBE000, v101, v223, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x28u);
                      }
                      goto LABEL_525;
                    }
                    v111 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v101 = objc_claimAutoreleasedReturnValue();
                    v213 = v283.sa_len;
                    v214 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                    if (!v111)
                    {
                      if (v214)
                      {
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v97;
                        *(_WORD *)&buf[18] = 1040;
                        *(_DWORD *)&buf[20] = address[0];
                        *(_WORD *)&buf[24] = 2098;
                        *(_QWORD *)&buf[26] = address;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = v208;
                        _os_log_impl(&dword_182FBE000, v101, v213, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, no backtrace", buf, 0x28u);
                      }
                      goto LABEL_525;
                    }
                    if (v214)
                    {
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v97;
                      *(_WORD *)&buf[18] = 1040;
                      *(_DWORD *)&buf[20] = address[0];
                      *(_WORD *)&buf[24] = 2098;
                      *(_QWORD *)&buf[26] = address;
                      *(_WORD *)&buf[34] = 1024;
                      *(_DWORD *)&buf[36] = v208;
                      *(_WORD *)v297 = 2082;
                      *(_QWORD *)&v297[2] = v111;
                      _os_log_impl(&dword_182FBE000, v101, v213, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x32u);
                    }
                    goto LABEL_192;
                  }
                  __nwlog_obj();
                  v209 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v97;
                    *(_WORD *)&buf[18] = 1040;
                    *(_DWORD *)&buf[20] = address[0];
                    *(_WORD *)&buf[24] = 2098;
                    *(_QWORD *)&buf[26] = address;
                    *(_WORD *)&buf[34] = 1024;
                    *(_DWORD *)&buf[36] = v208;
                    _os_log_impl(&dword_182FBE000, v209, OS_LOG_TYPE_ERROR, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d", buf, 0x28u);
                  }
                }
                else
                {
                  if (!connect(v97, v7, v7->sa_len))
                  {
                    *v11 = v97;
                    v65 = dataa;
                    v62 = dataa;
                    goto LABEL_530;
                  }
                  v210 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v210 > 0x31 || ((1 << v210) & 0x3000000002002) == 0)
                  {
                    __nwlog_obj();
                    v219 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v210;
                    v100 = (char *)_os_log_send_and_compose_impl();

                    v283.sa_len = 16;
                    LOBYTE(v286) = 0;
                    if (!__nwlog_fault(v100, &v283, &v286))
                      goto LABEL_526;
                    if (v283.sa_len == 17)
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v220 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v210;
                        _os_log_impl(&dword_182FBE000, v101, v220, "%{public}s connect failed %{darwin.errno}d", buf, 0x12u);
                      }
                    }
                    else if ((_BYTE)v286)
                    {
                      v224 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v225 = v283.sa_len;
                      v226 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                      if (v224)
                      {
                        if (v226)
                        {
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v210;
                          *(_WORD *)&buf[18] = 2082;
                          *(_QWORD *)&buf[20] = v224;
                          _os_log_impl(&dword_182FBE000, v101, v225, "%{public}s connect failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                        }

                        free(v224);
LABEL_526:
                        if (v100)
LABEL_527:
                          free(v100);
LABEL_528:
                        close(v97);
                        goto LABEL_529;
                      }
                      if (v226)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v210;
                        _os_log_impl(&dword_182FBE000, v101, v225, "%{public}s connect failed %{darwin.errno}d, no backtrace", buf, 0x12u);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v101 = objc_claimAutoreleasedReturnValue();
                      v236 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v210;
                        _os_log_impl(&dword_182FBE000, v101, v236, "%{public}s connect failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
                      }
                    }
LABEL_525:

                    goto LABEL_526;
                  }
                  __nwlog_obj();
                  v209 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v210;
                    _os_log_impl(&dword_182FBE000, v209, OS_LOG_TYPE_ERROR, "%{public}s connect failed %{darwin.errno}d", buf, 0x12u);
                  }
                }

                goto LABEL_528;
              }
              if (!nw_ip_is_broadcast((uint64_t)address, *((void **)v14 + 5)))
                goto LABEL_441;
              if (address[1] == 30)
                goto LABEL_440;
              if (address[1] != 2)
                goto LABEL_441;
LABEL_439:
              *(_DWORD *)&address[4] = 0;
              goto LABEL_441;
            }
            if (v188)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v178;
              _os_log_impl(&dword_182FBE000, v176, v266, "%{public}s IP_RECVTOS failed %{darwin.errno}d, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v176 = objc_claimAutoreleasedReturnValue();
            v203 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v178;
              _os_log_impl(&dword_182FBE000, v176, v203, "%{public}s IP_RECVTOS failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }
        else
        {
          if (v167 != 30 || (setsockopt(v97, 41, 35, type, 4u) & 0x80000000) == 0)
            goto LABEL_424;
          v173 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          __nwlog_obj();
          v174 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v173;
          v175 = (char *)_os_log_send_and_compose_impl();

          v283.sa_len = 16;
          LOBYTE(v286) = 0;
          if (!__nwlog_fault(v175, &v283, &v286))
            goto LABEL_422;
          if (v283.sa_len == 17)
          {
            __nwlog_obj();
            v176 = objc_claimAutoreleasedReturnValue();
            v177 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v173;
              _os_log_impl(&dword_182FBE000, v176, v177, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d", buf, 0x12u);
            }
          }
          else if ((_BYTE)v286)
          {
            v185 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v176 = objc_claimAutoreleasedReturnValue();
            v265 = v283.sa_len;
            v186 = os_log_type_enabled(v176, (os_log_type_t)v283.sa_len);
            if (v185)
            {
              if (v186)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v173;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v185;
                _os_log_impl(&dword_182FBE000, v176, v265, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v185);
              if (v175)
                goto LABEL_423;
              goto LABEL_424;
            }
            if (v186)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v173;
              _os_log_impl(&dword_182FBE000, v176, v265, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v176 = objc_claimAutoreleasedReturnValue();
            v202 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v173;
              _os_log_impl(&dword_182FBE000, v176, v202, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }

        goto LABEL_422;
      }
      v125 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
      *(_WORD *)&buf[12] = 1024;
      v270 = v125;
      *(_DWORD *)&buf[14] = v125;
      v127 = (char *)_os_log_send_and_compose_impl();

      v283.sa_len = 16;
      LOBYTE(v286) = 0;
      if (__nwlog_fault(v127, &v283, &v286))
      {
        if (v283.sa_len == 17)
        {
          __nwlog_obj();
          v128 = objc_claimAutoreleasedReturnValue();
          v129 = v283.sa_len;
          if (os_log_type_enabled(v128, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v270;
            _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if ((_BYTE)v286)
        {
          v157 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v128 = objc_claimAutoreleasedReturnValue();
          v262 = v283.sa_len;
          v158 = os_log_type_enabled(v128, (os_log_type_t)v283.sa_len);
          if (v157)
          {
            if (v158)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v270;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v157;
              _os_log_impl(&dword_182FBE000, v128, v262, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v157);
            goto LABEL_309;
          }
          if (v158)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v270;
            _os_log_impl(&dword_182FBE000, v128, v262, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v128 = objc_claimAutoreleasedReturnValue();
          v162 = v283.sa_len;
          if (os_log_type_enabled(v128, (os_log_type_t)v283.sa_len))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v270;
            _os_log_impl(&dword_182FBE000, v128, v162, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
LABEL_309:
      if (v127)
        free(v127);
      goto LABEL_311;
    }
    v103 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    __nwlog_obj();
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v103;
    v105 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.sa_len = 0;
    if (__nwlog_fault(v105, type, &v283))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v106 = objc_claimAutoreleasedReturnValue();
        v107 = type[0];
        if (os_log_type_enabled(v106, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl(&dword_182FBE000, v106, v107, "%{public}s socket() failed %{darwin.errno}d", buf, 0x12u);
        }
      }
      else if (v283.sa_len)
      {
        v114 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v106 = objc_claimAutoreleasedReturnValue();
        v115 = type[0];
        v116 = os_log_type_enabled(v106, type[0]);
        if (v114)
        {
          if (v116)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v103;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v114;
            _os_log_impl(&dword_182FBE000, v106, v115, "%{public}s socket() failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v114);
          goto LABEL_209;
        }
        if (v116)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl(&dword_182FBE000, v106, v115, "%{public}s socket() failed %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v106 = objc_claimAutoreleasedReturnValue();
        v124 = type[0];
        if (os_log_type_enabled(v106, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl(&dword_182FBE000, v106, v124, "%{public}s socket() failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
LABEL_209:
    v65 = dataa;
    if (v105)
      free(v105);
    goto LABEL_211;
  }
  if (v16 < 1)
    goto LABEL_82;
  v33 = nw_endpoint_create_address(v7);
  v34 = nw_interface_create_with_index(v293);
  v35 = nw_endpoint_create_address((const sockaddr *)address);
  v263 = v14;
  v260 = v35;
  v36 = v33;
  data = v34;
  v268 = v36;
  if (!(_WORD)v16)
  {
    __nwlog_obj();
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
    v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.sa_len = 0;
    if (!__nwlog_fault(v195, type, &v283))
      goto LABEL_549;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v197 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v197, "%{public}s called with null packet_length", buf, 0xCu);
      }
    }
    else if (v283.sa_len)
    {
      v227 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v228 = type[0];
      v229 = os_log_type_enabled(v196, type[0]);
      if (v227)
      {
        if (v229)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v227;
          _os_log_impl(&dword_182FBE000, v196, v228, "%{public}s called with null packet_length, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v227);
LABEL_549:
        if (!v195)
          goto LABEL_124;
        goto LABEL_550;
      }
      if (v229)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v228, "%{public}s called with null packet_length, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v237 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v237, "%{public}s called with null packet_length, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_548:

    goto LABEL_549;
  }
  if (!v36)
  {
    __nwlog_obj();
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
    v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.sa_len = 0;
    if (!__nwlog_fault(v195, type, &v283))
      goto LABEL_549;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v199 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v199, "%{public}s called with null peer", buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (!v283.sa_len)
    {
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v238 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v238, "%{public}s called with null peer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_548;
    }
    v230 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v196 = objc_claimAutoreleasedReturnValue();
    v231 = type[0];
    v232 = os_log_type_enabled(v196, type[0]);
    if (!v230)
    {
      if (v232)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v231, "%{public}s called with null peer, no backtrace", buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (v232)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v230;
      _os_log_impl(&dword_182FBE000, v196, v231, "%{public}s called with null peer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_504;
  }
  if (!data)
  {
    __nwlog_obj();
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
    v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.sa_len = 0;
    if (!__nwlog_fault(v195, type, &v283))
      goto LABEL_549;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v201 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v201, "%{public}s called with null interface", buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (!v283.sa_len)
    {
      __nwlog_obj();
      v196 = objc_claimAutoreleasedReturnValue();
      v239 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v239, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_548;
    }
    v230 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v196 = objc_claimAutoreleasedReturnValue();
    v233 = type[0];
    v234 = os_log_type_enabled(v196, type[0]);
    if (!v230)
    {
      if (v234)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_182FBE000, v196, v233, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (v234)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v230;
      _os_log_impl(&dword_182FBE000, v196, v233, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_504:

    free(v230);
    if (!v195)
      goto LABEL_124;
LABEL_550:
    free(v195);
    goto LABEL_124;
  }
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v37 = (id)nw_context_copy_implicit_context::implicit_context;
  v38 = nw_context_copy_registered_endpoint(v37, v268);

  v39 = v263[6];
  v40 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v39, 0, 0);

  v41 = nw_endpoint_copy_association_with_evaluator(v38, v40, 0);
  v42 = v41;
  if (!v41)
  {
    if (nw_parameters_get_local_only(v40))
      goto LABEL_92;
    v44 = 0;
LABEL_116:
    v79 = v263[1];
    if (v79)
    {
      if (v38)
        v80 = v38;
      else
        v80 = v268;
      v81 = v260;
      if (!v260)
        v81 = *((_QWORD *)v14 + 4);
      objc_msgSend(v79, "handleInboundPacket:length:from:to:interface:socket:", &buffer, (unsigned __int16)v16, v80, v81, data, v263[9]);
    }
    goto LABEL_123;
  }
  v43 = nw_association_copy_current_path(v41, v40);
  if (!nw_parameters_get_local_only(v40))
  {
    v44 = v43;
    goto LABEL_116;
  }
  if (!v43)
  {
LABEL_92:
    __nwlog_obj();
    v69 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_ERROR, "%{public}s nw_association has no path", buf, 0xCu);
    }

    v43 = 0;
    goto LABEL_95;
  }
  v44 = v43;
  if ((nw_path_is_direct(v43) & 1) != 0)
    goto LABEL_116;
LABEL_95:
  __nwlog_obj();
  v70 = objc_claimAutoreleasedReturnValue();
  v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG);
  v72 = gLogFDOverride != -1 || v71;

  if (v43)
    v73 = v72;
  else
    v73 = 0;
  if (v73 == 1)
  {
    __nwlog_obj();
    v74 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v38;
      _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring data from non-local endpoint %{public}@", buf, 0x16u);
    }

  }
  v44 = v43;
LABEL_123:

LABEL_124:
LABEL_82:
  v62 = 0;
LABEL_83:

  return (BOOL)v62;
}

void sub_1839BB0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45)
{
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_endpoint_t v5;
  NSObject *v6;
  nw_endpoint_t v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  uint64_t v14;

  v4 = a3;
  v5 = nw_connection_copy_endpoint(v4);
  v6 = nw_connection_copy_parameters(v4);
  v7 = nw_parameters_copy_local_endpoint(v6);
  if (!v5)
    goto LABEL_10;
  v8 = v5;
  v9 = -[NSObject type](v8, "type");

  if (v9 != 1)
    goto LABEL_10;
  v10 = nw_endpoint_address_endpoint_matches_address(v8, *(unsigned __int8 **)(a1 + 40), 0, 0);
  v11 = v7 ? v10 : 0;
  if (v11 == 1
    && (v12 = v7, v13 = -[NSObject type](v12, "type"), v12, v13 == 1)
    && nw_endpoint_address_endpoint_matches_address(v12, (unsigned __int8 *)(a1 + 56), 0, 0))
  {
    nw_connection_add_initial_inbound_data(v4, *(void **)(a1 + 32), **(_DWORD **)(a1 + 48));
    v14 = 0;
  }
  else
  {
LABEL_10:
    v14 = 1;
  }

  return v14;
}

void sub_1839BB3D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke_85(uint64_t a1, void *a2, _OWORD *a3)
{
  char *v5;
  NSObject *v6;
  char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _OWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (nw_interface_shallow_compare(v5, *(void **)(a1 + 32)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = v5 + 104;
      v8 = 136446978;
      v9 = "nw_listener_inbox_accept_udp_block_invoke";
      if (!v5)
        v7 = 0;
      v10 = 2080;
      v11 = v7;
      v12 = 1040;
      v13 = 16;
      v14 = 2096;
      v15 = a3;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s Found interface %s, using agent id %{uuid_t}.16P", (uint8_t *)&v8, 0x26u);
    }

    *(_OWORD *)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *a3;
  }

}

uint64_t nw_ip_is_broadcast(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  int *v6;
  int v7;
  char *v8;
  _BYTE *v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;

  v3 = a2;
  v4 = v3;
  v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 != 30)
  {
    if (v5 == 2)
    {
      v6 = (int *)(a1 + 4);
      goto LABEL_4;
    }
LABEL_12:
    v12 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 16) != -65536)
    goto LABEL_12;
  v6 = (int *)(a1 + 20);
LABEL_4:
  v7 = *v6;
  if (*v6 == -1)
    goto LABEL_19;
  if (!v3)
    goto LABEL_12;
  v8 = (char *)v3;
  v9 = v8;
  v10 = *(_WORD *)(v8 + 85);
  if ((v10 & 0x80) != 0)
    v11 = *((_DWORD *)v8 + 18);
  else
    v11 = 0;

  v13 = v9;
  if ((*(_WORD *)(v9 + 85) & 0x100) == 0)
  {

    v12 = 0;
    goto LABEL_20;
  }
  v14 = v13[19];

  if (v7 == v14 || (v12 = 0, (v10 & 0x80) != 0) && (v14 & v11) == v7)
LABEL_19:
    v12 = 1;
LABEL_20:

  return v12;
}

void __41__nw_listener_inbox_protocol_description__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  CFStringRef v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    v4 = *(_QWORD *)(v2 + 88);
    if (v4)
      v5 = *(const char **)(v4 + 16);
    else
      v5 = "(null)";
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<protocol: %s>"), v5);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 24);
    *(_QWORD *)(v7 + 24) = v6;

    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3);
}

void sub_1839BBD7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1839BC168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_listen_protocol_new_flow(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSObject *v8;
  _QWORD *v9;
  _BOOL8 v10;
  NSObject *v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = (id *)*(id *)(a1 + 24);
    if (v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v32 = "nw_listen_protocol_new_flow";
        v33 = 2114;
        v34 = v7;
        v35 = 2114;
        v36 = v5;
        v37 = 2114;
        v38 = v6;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Listener %{public}@ received new flow %{public}@ : %{public}@", buf, 0x2Au);
      }

      nw_parameters_set_server_mode(v6, 1);
      objc_msgSend(v7[1], "updateParametersForNewConnection:", v6);
      v9 = nw_connection_create_from_protocol_on_nw_queue(v5, v6, *(nw_protocol **)(a1 + 8));
      v10 = v9 != 0;
      if (v9)
      {
        objc_msgSend(v7[1], "handleInbound:addProtocolInbox:", v9, 0);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_listen_protocol_new_flow";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s nw_connection_create_from_protocol_on_nw_queue failed", buf, 0xCu);
        }

      }
LABEL_11:

      goto LABEL_12;
    }
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_listen_protocol_new_flow";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_listen_protocol_new_flow";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null inbox", buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_listen_protocol_new_flow";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null inbox, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_listen_protocol_new_flow";
          _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null inbox, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_listen_protocol_new_flow";
          _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null inbox, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (v18)
      free(v18);
    v10 = 0;
    goto LABEL_11;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_listen_protocol_new_flow";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v14, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_listen_protocol_new_flow";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v29)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v15, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_listen_protocol_new_flow";
          v33 = 2082;
          v34 = v21;
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_42;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_listen_protocol_new_flow";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_listen_protocol_new_flow";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_42:
  if (v14)
    free(v14);
  v10 = 0;
LABEL_12:

  return v10;
}

void sub_1839BC7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2, int a3)
{
  id *v6;
  NSObject *v7;
  _DWORD *posix_error;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = a1->handle;
    if (v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446722;
        v28 = "nw_listen_protocol_disconnected";
        v29 = 2114;
        v30 = v6;
        v31 = 1024;
        v32 = a3;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s Listener %{public}@ disconnected with error %d", buf, 0x1Cu);
      }

      ((void (*)(nw_protocol *, nw_listen_protocol *))a2->callbacks->remove_listen_handler)(a2, a1);
      if (a3)
        posix_error = nw_error_create_posix_error(a3);
      else
        posix_error = 0;
      objc_msgSend(v6[1], "handleInboxFailed:error:", v6, posix_error);

LABEL_9:
      return;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_listen_protocol_disconnected";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_listen_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null inbox", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v22 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            v28 = "nw_listen_protocol_disconnected";
            v29 = 2082;
            v30 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s called with null inbox, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_listen_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s called with null inbox, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_listen_protocol_disconnected";
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null inbox, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_45:
    if (v14)
      free(v14);
    goto LABEL_9;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_listen_protocol_disconnected";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v10, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_listen_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null listener", buf, 0xCu);
      }
    }
    else if (v25)
    {
      v17 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_listen_protocol_disconnected";
          v29 = 2082;
          v30 = v17;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null listener, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v17);
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_listen_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_listen_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null listener, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_40:
  if (v10)
    free(v10);
}

void sub_1839BCD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *nw_path_evaluator_copy_description_level(void *a1, int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  char *v8;
  const char *logging_description;
  char *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t type[8];
  os_log_type_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD out[8];

  out[7] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v20 = 0;
    v5 = (void *)*((_QWORD *)v3 + 2);
    if (v5)
    {
      if (a2 == 1)
      {
        v6 = v5;
        *(_QWORD *)type = 0;
        v22 = type;
        v23 = 0x2020000000;
        v24 = 0;
        v7 = v6 + 45;
        out[0] = MEMORY[0x1E0C809B0];
        out[1] = 3221225472;
        out[2] = __nw_endpoint_get_description_block_invoke;
        out[3] = &unk_1E14ACE40;
        v8 = v6;
        out[4] = v8;
        out[5] = type;
        os_unfair_lock_lock(v7);
        __nw_endpoint_get_description_block_invoke((uint64_t)out);
        os_unfair_lock_unlock(v7);
        logging_description = (const char *)*((_QWORD *)v22 + 3);

        _Block_object_dispose(type, 8);
      }
      else
      {
        logging_description = nw_endpoint_get_logging_description(v5);
      }
      memset(out, 0, 37);
      uuid_unparse(v4 + 80, (char *)out);
      asprintf(&v20, "Evaluator %s to %s", (const char *)out, logging_description);
    }
    else
    {
      asprintf(&v20, "Default evaluator");
    }
    v10 = v20;
    goto LABEL_9;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(out[0]) = 136446210;
  *(_QWORD *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
  v13 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v20) = 0;
  if (__nwlog_fault(v13, type, &v20))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        LODWORD(out[0]) = 136446210;
        *(_QWORD *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null evaluator", (uint8_t *)out, 0xCu);
      }
    }
    else if ((_BYTE)v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      v18 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          LODWORD(out[0]) = 136446466;
          *(_QWORD *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
          WORD2(out[1]) = 2082;
          *(_QWORD *)((char *)&out[1] + 6) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null evaluator, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v18)
      {
        LODWORD(out[0]) = 136446210;
        *(_QWORD *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null evaluator, no backtrace", (uint8_t *)out, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        LODWORD(out[0]) = 136446210;
        *(_QWORD *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null evaluator, backtrace limit exceeded", (uint8_t *)out, 0xCu);
      }
    }

  }
LABEL_26:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_9:

  return v10;
}

void sub_1839BDD98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *nw_path_evaluator_copy_description(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_path_evaluator_copy_description_level(v1, 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_evaluator_copy_description";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_evaluator_copy_description";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_evaluator_copy_description";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_evaluator_copy_description";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_evaluator_copy_description";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_1839BE054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_shared_necp_fd(void *a1)
{
  id v1;
  uint64_t globals_for_path;
  os_unfair_lock_s *v3;
  uint64_t v4;
  int v6;
  int v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  const char *backtrace_string;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  globals_for_path = nw_context_get_globals_for_path(v1);
  v3 = (os_unfair_lock_s *)(globals_for_path + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 120));
  if ((*(_DWORD *)(globals_for_path + 132) & 0x80000000) == 0)
    goto LABEL_2;
  v6 = necp_open();
  if ((v6 & 0x80000000) == 0)
  {
    arc4random_buf((void *)(globals_for_path + 24), 8uLL);
    if (!change_fdguard_np())
    {
      *(_BYTE *)(globals_for_path + 140) |= 2u;
      *(_DWORD *)(globals_for_path + 132) = v6;
      goto LABEL_2;
    }
    v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v23 = "nw_path_shared_necp_fd";
    v24 = 1024;
    v25 = v6;
    v26 = 1024;
    v27 = v7;
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v9, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446722;
          v23 = "nw_path_shared_necp_fd";
          v24 = 1024;
          v25 = v6;
          v26 = 1024;
          v27 = v7;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s Failed to guard necp fd %d %{darwin.errno}d", buf, 0x18u);
        }
      }
      else if (v20)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v15 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446978;
            v23 = "nw_path_shared_necp_fd";
            v24 = 1024;
            v25 = v6;
            v26 = 1024;
            v27 = v7;
            v28 = 2082;
            v29 = v15;
            _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Failed to guard necp fd %d %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v15);
          if (!v9)
            goto LABEL_12;
          goto LABEL_11;
        }
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446722;
          v23 = "nw_path_shared_necp_fd";
          v24 = 1024;
          v25 = v6;
          v26 = 1024;
          v27 = v7;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s Failed to guard necp fd %d %{darwin.errno}d, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446722;
          v23 = "nw_path_shared_necp_fd";
          v24 = 1024;
          v25 = v6;
          v26 = 1024;
          v27 = v7;
          _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s Failed to guard necp fd %d %{darwin.errno}d, backtrace limit exceeded", buf, 0x18u);
        }
      }

    }
    if (!v9)
    {
LABEL_12:
      close(v6);
      goto LABEL_2;
    }
LABEL_11:
    free(v9);
    goto LABEL_12;
  }
  v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_path_shared_necp_fd";
    v24 = 1024;
    v25 = v12;
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s necp_open failed %{darwin.errno}d", buf, 0x12u);
  }

LABEL_2:
  v4 = *(unsigned int *)(globals_for_path + 132);
  os_unfair_lock_unlock(v3);

  return v4;
}

void sub_1839BE508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double ___ZL19nw_path_get_globalsPU24objcproto13OS_nw_context8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_QWORD *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  result = NAN;
  *(_QWORD *)(a2 + 132) = -1;
  return result;
}

uint64_t __Block_byref_object_copy__67271(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__67272(uint64_t a1)
{

}

uint64_t nw_path_is_ultra_constrained(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __int16 v6;
  OS_nw_interface *direct;
  OS_nw_interface *v8;
  __int16 v9;
  OS_nw_interface *delegate;
  OS_nw_interface *v11;
  __int16 v12;
  OS_nw_interface *fallback_interface;
  OS_nw_interface *v14;
  __int16 v15;
  uint64_t v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_path_copy_connected_interface(v1);
    v4 = v3;
    if (v3)
    {
      v5 = v3;
      v6 = *(_WORD *)(v5 + 85);

      if ((v6 & 4) != 0)
        goto LABEL_12;
    }
    if (!nw_path_agents_are_satisfied_update_reason(v2, 0, 0, 0, 0))
      goto LABEL_11;
    direct = v2->direct;
    if (direct)
    {
      v8 = direct;
      v9 = *(_WORD *)((char *)v8 + 85);

      if ((v9 & 4) != 0)
        goto LABEL_12;
    }
    delegate = v2->delegate;
    if (delegate)
    {
      v11 = delegate;
      v12 = *(_WORD *)((char *)v11 + 85);

      if ((v12 & 4) != 0)
        goto LABEL_12;
    }
    fallback_interface = v2->fallback_interface;
    if (fallback_interface
      && (v14 = fallback_interface, v15 = *(_WORD *)((char *)v14 + 85), v14, (v15 & 4) != 0))
    {
LABEL_12:
      v16 = 1;
    }
    else
    {
LABEL_11:
      v16 = 0;
    }

    goto LABEL_14;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_path_is_ultra_constrained";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v19, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_path_is_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_path_is_ultra_constrained";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_path_is_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_path_is_ultra_constrained";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_31:
  if (v19)
    free(v19);
  v16 = 0;
LABEL_14:

  return v16;
}

void sub_1839BEC28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL28nw_path_fallback_descriptionP18NWConcrete_nw_pathPcm_block_invoke(_QWORD *a1, int a2, xpc_object_t xstring)
{
  char *v4;
  size_t v5;
  int v6;
  const char *string_ptr;
  const char *v8;
  int v9;

  v4 = *(char **)(*(_QWORD *)(a1[4] + 8) + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24);
  string_ptr = xpc_string_get_string_ptr(xstring);
  v8 = ", ";
  if (!v6)
    v8 = "";
  v9 = snprintf(v4, v5, "%s%s", v8, string_ptr);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v9)
  {
    **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
  else if (v9 >= 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v9;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v9;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return 1;
}

uint64_t ___ZL28nw_path_fallback_descriptionP18NWConcrete_nw_pathPcm_block_invoke_2(_QWORD *a1, int a2, xpc_object_t xstring)
{
  char *v4;
  size_t v5;
  int v6;
  const char *string_ptr;
  const char *v8;
  int v9;

  v4 = *(char **)(*(_QWORD *)(a1[4] + 8) + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24);
  string_ptr = xpc_string_get_string_ptr(xstring);
  v8 = ", ";
  if (!v6)
    v8 = "";
  v9 = snprintf(v4, v5, "%s%s", v8, string_ptr);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) <= (unint64_t)v9)
  {
    **(_BYTE **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
  else if (v9 >= 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v9;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v9;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return 1;
}

BOOL nw_path_has_unsatisfied_cellular_agent(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[5];
  char v17;
  char v18;
  os_log_type_t type;
  _BYTE buf[24];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v21 = 0;
    v5 = (void *)*((_QWORD *)v3 + 28);
    if (v5)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_path_has_unsatisfied_cellular_agent_block_invoke;
      applier[3] = &unk_1E14A8E60;
      v17 = a2;
      applier[4] = buf;
      xpc_dictionary_apply(v5, applier);
      v6 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    }
    else
    {
      v6 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_has_unsatisfied_cellular_agent";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_has_unsatisfied_cellular_agent";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_has_unsatisfied_cellular_agent";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_has_unsatisfied_cellular_agent";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_has_unsatisfied_cellular_agent";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_6:

  return v6;
}

void sub_1839BF158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_path_has_unsatisfied_cellular_agent_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  const char *data;
  const char *v5;
  uint64_t result;
  size_t length;

  length = 0;
  if (!xdict)
    return 1;
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!data)
    return 1;
  if (length < 0xD8)
    return 1;
  v5 = data;
  if (length != *((unsigned int *)data + 53) + 216
    || strncmp(data + 16, "Cellular", 0x20uLL)
    || *(_BYTE *)(a1 + 40) && strncmp(v5 + 48, "Internet", 0x20uLL))
  {
    return 1;
  }
  result = 1;
  if ((*((_DWORD *)v5 + 52) & 3) == 1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

BOOL nw_path_agents_are_satisfied_update_reason(NWConcrete_nw_path *a1, char a2, char a3, char a4, BOOL *a5)
{
  NWConcrete_nw_path *v9;
  NWConcrete_nw_path *v10;
  _BOOL8 v11;
  OS_xpc_object *network_agent_dictionary;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _QWORD applier[4];
  NWConcrete_nw_path *v23;
  _BYTE *v24;
  BOOL *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  os_log_type_t type;
  _BYTE buf[24];
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (v9)
  {
    if (a5)
      *a5 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v11 = 1;
    v32 = 1;
    network_agent_dictionary = v9->network_agent_dictionary;
    if (network_agent_dictionary)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = ___ZL42nw_path_agents_are_satisfied_update_reasonP18NWConcrete_nw_pathbbbPb_block_invoke;
      applier[3] = &unk_1E14A91C8;
      v26 = a3;
      v27 = a4;
      v23 = v9;
      v24 = buf;
      v25 = a5;
      v28 = a2;
      xpc_dictionary_apply(network_agent_dictionary, applier);

      v11 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_agents_are_satisfied_update_reason";
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v15, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_agents_are_satisfied_update_reason";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_agents_are_satisfied_update_reason";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_agents_are_satisfied_update_reason";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_agents_are_satisfied_update_reason";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v15)
    free(v15);
  v11 = 0;
LABEL_7:

  return v11;
}

void sub_1839BF580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_path_agents_are_satisfied_update_reasonP18NWConcrete_nw_pathbbbPb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const unsigned __int8 *data;
  const unsigned __int8 *v7;
  BOOL is_required;
  unsigned int v9;
  _BOOL4 v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v19;
  char *v20;
  int v21;
  size_t length[2];
  _BYTE v23[21];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  length[0] = 0;
  if (v4)
  {
    data = (const unsigned __int8 *)xpc_dictionary_get_data(v4, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8)
      {
        v7 = data;
        if (length[0] == *((unsigned int *)data + 53) + 216)
        {
          is_required = nw_path_netagent_is_required(*(void **)(a1 + 32), v5);
          v9 = *((_DWORD *)v7 + 52);
          v10 = is_required || *(_BYTE *)(a1 + 56) != 0;
          if ((*((_DWORD *)v7 + 52) & 3) == 1
            && ((v9 & 0x40) != 0 || !*(_BYTE *)(a1 + 57))
            && (!v10 & (v9 >> 4) & 1) == 0)
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
            v11 = *(_BYTE **)(a1 + 48);
            if (v11 && !*v11)
              *v11 = v9 & ((v9 & 0xC) != 0);
            if (*(_BYTE *)(a1 + 58))
            {
              v21 = 0;
              ne_session_get_config_id_from_network_agent();
              v20 = 0;
              *(_OWORD *)length = 0u;
              memset(v23, 0, sizeof(v23));
              uuid_unparse_upper(v7, (char *)length);
              asprintf(&v20, "Network Agent [domain: %s, type: %s, description: %s, uuid: %s, flags: %x]", (const char *)v7 + 16, (const char *)v7 + 48, (const char *)v7 + 80, (const char *)length, *((_DWORD *)v7 + 52));
              v17 = *(void **)(a1 + 32);
              if (v20)
              {
                nw_path_set_reason(v17, 4, "%s is unsatisfied", v12, v13, v14, v15, v16, (char)v20);
                if (v20)
                  free(v20);
              }
              else
              {
                nw_path_set_reason(v17, 4, "Unknown network agent is unsatisfied", v12, v13, v14, v15, v16, v19);
              }
            }
          }
        }
      }
    }
  }

  return 1;
}

void sub_1839BF7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_netagent_is_required(void *a1, void *a2)
{
  id v3;
  id v4;
  void **v5;
  id v6;
  void *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  _BYTE *data;
  _BYTE *v16;
  id v17;
  void *v18;
  _BOOL8 v19;
  NSObject *v20;
  os_log_type_t v21;
  id v23;
  id v24;
  void *v25;
  size_t count;
  xpc_object_t v27;
  xpc_object_t v28;
  void *v29;
  size_t v30;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t type[8];
  uint64_t v38;
  uint64_t (*v39)(uint64_t, size_t, xpc_object_t);
  void *v40;
  id v41;
  uint64_t *v42;
  _BYTE *v43;
  _QWORD applier[6];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  _BYTE buf[24];
  void *v50;
  id v51;
  uint64_t *v52;
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void **)v3;
  v6 = v4;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(applier[0]) = 0;
    if (__nwlog_fault(v9, type, applier))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v32 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
          _os_log_impl(&dword_182FBE000, v10, v32, "%{public}s called with null path", buf, 0xCu);
        }
LABEL_31:

        goto LABEL_32;
      }
      if (!LOBYTE(applier[0]))
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v36 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
          _os_log_impl(&dword_182FBE000, v10, v36, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v34 = type[0];
      v35 = os_log_type_enabled(v10, type[0]);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
          _os_log_impl(&dword_182FBE000, v10, v34, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_31;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v34, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_32:
    if (v9)
LABEL_33:
      free(v9);
LABEL_34:
    v19 = 0;
    goto LABEL_35;
  }
  if (!v6 || object_getClass(v6) != (Class)MEMORY[0x1E0C812F8])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(applier[0]) = 0;
    if (!__nwlog_fault(v9, type, applier))
      goto LABEL_32;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null netagent_dict", buf, 0xCu);
      }
    }
    else if (LOBYTE(applier[0]))
    {
      v12 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v13 = type[0];
      v14 = os_log_type_enabled(v10, type[0]);
      if (v12)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null netagent_dict, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v12);
        if (!v9)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null netagent_dict, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v21 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
        _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null netagent_dict, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_31;
  }
  *(_QWORD *)buf = 0;
  data = xpc_dictionary_get_data(v7, "data", (size_t *)buf);
  if (!data || *(_QWORD *)buf < 0xD8uLL || (v16 = data, *(_QWORD *)buf != *((unsigned int *)data + 53) + 216))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_path_netagent_applies_to_path";
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s Failed to get agent from dictionary", buf, 0xCu);
    }

    goto LABEL_34;
  }
  if ((data[208] & 1) == 0)
    goto LABEL_34;
  v45 = 0;
  v46 = &v45;
  v47 = 0x2020000000;
  v48 = 0;
  v17 = nw_parameters_copy_required_netagent_uuids(v5[2]);
  v18 = v17;
  if (v17)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke;
    applier[3] = &unk_1E14A91F0;
    applier[4] = &v45;
    applier[5] = v16;
    xpc_array_apply(v17, applier);
  }
  if (*((_BYTE *)v46 + 24))
  {
    v19 = 1;
  }
  else
  {
    v23 = nw_parameters_copy_required_netagent_domains(v5[2]);
    v24 = nw_parameters_copy_required_netagent_types(v5[2]);
    v25 = v24;
    if (v23)
    {
      if (v24)
      {
        count = xpc_array_get_count(v23);
        if (count == xpc_array_get_count(v25))
        {
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke_2;
          v50 = &unk_1E14A9218;
          v51 = v25;
          v52 = &v45;
          v53 = v16;
          xpc_array_apply(v23, buf);

        }
      }
    }
    if (*((_BYTE *)v46 + 24))
    {
      v19 = 1;
    }
    else
    {
      v27 = nw_parameters_copy_preferred_netagent_domains(v5[2]);
      v28 = nw_parameters_copy_preferred_netagent_types(v5[2]);
      v29 = v28;
      if (v27)
      {
        if (v28)
        {
          v30 = xpc_array_get_count(v27);
          if (v30 == xpc_array_get_count(v29))
          {
            *(_QWORD *)type = MEMORY[0x1E0C809B0];
            v38 = 3221225472;
            v39 = ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke_3;
            v40 = &unk_1E14A9218;
            v41 = v29;
            v42 = &v45;
            v43 = v16;
            xpc_array_apply(v27, type);

          }
        }
      }
      v19 = *((_BYTE *)v46 + 24) != 0;

    }
  }

  _Block_object_dispose(&v45, 8);
LABEL_35:

  return v19;
}

void sub_1839BFF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const unsigned __int8 *bytes;
  int v6;
  _BOOL8 v7;

  v4 = a3;
  bytes = xpc_uuid_get_bytes(v4);
  v6 = uuid_compare(bytes, *(const unsigned __int8 **)(a1 + 40));
  if (!v6)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v7 = v6 != 0;

  return v7;
}

void sub_1839C0078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke_2(uint64_t a1, size_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *string;
  uint64_t result;
  uint64_t v8;
  int v9;

  string_ptr = xpc_string_get_string_ptr(xstring);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  result = 1;
  if (string_ptr && string)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (!strncmp(string_ptr, (const char *)(v8 + 16), 0x20uLL))
    {
      v9 = strncmp(string, (const char *)(v8 + 48), 0x20uLL);
      result = 1;
      if (!v9)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke_3(uint64_t a1, size_t a2, xpc_object_t xstring)
{
  const char *string_ptr;
  const char *string;
  uint64_t result;
  uint64_t v8;
  int v9;

  string_ptr = xpc_string_get_string_ptr(xstring);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  result = 1;
  if (string_ptr && string)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (!strncmp(string_ptr, (const char *)(v8 + 16), 0x20uLL))
    {
      v9 = strncmp(string, (const char *)(v8 + 48), 0x20uLL);
      result = 1;
      if (!v9)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;
  _QWORD applier[4];
  id v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(char *)(v1 + 474);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *(void **)(v1 + 224);
    if (v3)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke_2;
      applier[3] = &unk_1E14A8E38;
      v6 = (id)v1;
      xpc_dictionary_apply(v3, applier);

      v1 = *(_QWORD *)(a1 + 32);
      LOBYTE(v2) = *(_BYTE *)(v1 + 474);
    }
    *(_BYTE *)(v1 + 474) = v2 | 0x80;
  }
}

void sub_1839C0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  unsigned int *data;
  _OWORD *v7;
  void *v8;
  void *v9;
  NWConcrete_nw_resolver_config *v10;
  unsigned int uint64;
  NWConcrete_nw_resolver_config *v12;
  NWConcrete_nw_resolver_config *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  size_t length;

  v4 = a3;
  v5 = v4;
  length = 0;
  if (v4)
  {
    data = (unsigned int *)xpc_dictionary_get_data(v4, "data", &length);
    v7 = 0;
    if (data && length >= 0xD8)
    {
      if (length == data[53] + 216)
        v7 = data;
      else
        v7 = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  if (is_config_agent_type_dns())
  {
    config_agent_copy_dns_information();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = nw_resolver_config_create_with_dictionary(v8);
      if (v10)
      {
        uint64 = xpc_dictionary_get_uint64(v5, "generation");
        v12 = v10;
        v12->generation = uint64;

        v13 = v12;
        *(_OWORD *)v13->identifier = *v7;

        nw_resolver_config_set_provider_description(v13, (uint64_t)(v7 + 5));
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184);
        if (!v14)
        {
          v15 = nw_array_create();
          v16 = *(_QWORD *)(a1 + 32);
          v17 = *(void **)(v16 + 184);
          *(_QWORD *)(v16 + 184) = v15;

          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184);
        }
        nw_array_append(v14, v13);
      }
      config_agent_free_dns_information();

    }
  }

  return 1;
}

void sub_1839C03AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_path_uses_nexus_internal(NWConcrete_nw_path *a1, char a2)
{
  NWConcrete_nw_path *v3;
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_uses_nexus_internal";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_uses_nexus_internal";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_uses_nexus_internal";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_uses_nexus_internal";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_uses_nexus_internal";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_33:
    if (v8)
      free(v8);
    goto LABEL_35;
  }
  if (nw_path_can_use_channel_syscalls(void)::onceToken != -1)
    dispatch_once(&nw_path_can_use_channel_syscalls(void)::onceToken, &__block_literal_global_463);
  if ((nw_path_can_use_channel_syscalls(void)::can_use_channel_syscalls & 1) == 0
    || (nw_parameters_get_allow_socket_access(v3->parameters) & 1) != 0
    || nw_parameters_get_ip_protocol(v3->parameters) == 6 && nw_parameters_get_multipath(v3->parameters)
    || v3->policy_result.flow_divert_aggregate_unit
    || v3->policy_result.routing_result == 4
    || (*((_BYTE *)v3 + 473) & 0x10) != 0)
  {
LABEL_35:
    v6 = 0;
    goto LABEL_36;
  }
  v4 = v3->endpoint;
  v5 = v4;
  v6 = (!v4 || nw_endpoint_get_type(v4) != nw_endpoint_type_address || (nw_endpoint_is_multicast(v5) & 1) == 0)
    && nw_path_get_nexus_agent(v3, a2) != 0;

LABEL_36:
  return v6;
}

void sub_1839C0730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_agent(NWConcrete_nw_path *a1, char a2)
{
  NWConcrete_nw_path *v3;
  NWConcrete_nw_path *v4;
  unint64_t v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  void *v8;
  void *v9;
  _DWORD *data;
  int v11;
  char v12;
  uint64_t v13;
  OS_xpc_object *network_agent_dictionary;
  _QWORD applier[5];
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  size_t length;
  char out[40];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  if (v3->network_agent_dictionary)
  {
    if (v3->policy_result.num_interface_options)
    {
      v5 = 0;
      v6 = 8;
      do
      {
        v7 = (const unsigned __int8 *)v4->policy_result.interface_options + v6;
        if (!uuid_is_null(v7))
        {
          memset(out, 0, 37);
          uuid_unparse(v7, out);
          xpc_dictionary_get_value(v4->network_agent_dictionary, out);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = v8;
          if (v8)
          {
            length = 0;
            data = xpc_dictionary_get_data(v8, "data", &length);
            if (data)
            {
              if (length >= 0xD8 && length == data[53] + 216)
              {
                v11 = data[52];
                if ((v11 & 0xE080) != 0)
                {
                  v12 = (v11 & 0x40) != 0 ? 0 : a2;
                  if ((data[52] & 0x13) != 1 && (v12 & 1) == 0)
                  {
                    v19[3] = (uint64_t)data;

                    break;
                  }
                }
              }
            }

          }
        }
        ++v5;
        v6 += 24;
      }
      while (v5 < v4->policy_result.num_interface_options);
    }
    v13 = v19[3];
    if (!v13)
    {
      network_agent_dictionary = v4->network_agent_dictionary;
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = ___ZL23nw_path_get_nexus_agentP18NWConcrete_nw_pathb_block_invoke;
      applier[3] = &unk_1E14A8E60;
      v17 = a2;
      applier[4] = &v18;
      xpc_dictionary_apply(network_agent_dictionary, applier);
      v13 = v19[3];
    }
  }
  else
  {
    v13 = 0;
  }
  _Block_object_dispose(&v18, 8);

  return v13;
}

void sub_1839C093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_path_get_nexus_agentP18NWConcrete_nw_pathb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  _DWORD *data;
  int v7;
  BOOL v9;
  uint64_t v10;
  size_t length;

  v4 = a3;
  v5 = v4;
  length = 0;
  if (v4
    && (data = xpc_dictionary_get_data(v4, "data", &length)) != 0
    && length >= 0xD8
    && length == data[53] + 216
    && (v7 = data[52], (v7 & 0xE080) != 0))
  {
    v9 = (v7 & 0x40) == 0 && *(_BYTE *)(a1 + 40) != 0;
    v10 = 1;
    if ((data[52] & 0x13) != 1 && !v9)
    {
      v10 = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = data;
    }
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

void ___ZL32nw_path_can_use_channel_syscallsv_block_invoke()
{
  NSObject *v0;
  const char *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  getpid();
  if (sandbox_check())
  {
    nw_path_can_use_channel_syscalls(void)::can_use_channel_syscalls = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v0 = (id)gLogObj;
    if (!os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      return;
    }
    *(_DWORD *)buf = 136446210;
    v5 = "nw_path_can_use_channel_syscalls_block_invoke";
    v1 = "%{public}s Sandbox does not allow access to channel system calls";
    v2 = v0;
    v3 = OS_LOG_TYPE_ERROR;
LABEL_4:
    _os_log_impl(&dword_182FBE000, v2, v3, v1, buf, 0xCu);
    goto LABEL_5;
  }
  nw_path_can_use_channel_syscalls(void)::can_use_channel_syscalls = 1;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v0 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
      goto LABEL_5;
    *(_DWORD *)buf = 136446210;
    v5 = "nw_path_can_use_channel_syscalls_block_invoke";
    v1 = "%{public}s Sandbox allows access to channel system calls";
    v2 = v0;
    v3 = OS_LOG_TYPE_DEBUG;
    goto LABEL_4;
  }
}

void nw_path_release_globals(uint64_t a1, uint64_t a2)
{
  char v2;
  os_unfair_lock_s *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  char *backtrace_string;
  uint64_t v33;
  _BOOL4 v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[9];

  *(_QWORD *)&v40[5] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    v4 = *(os_unfair_lock_s **)(a1 + 40);
    if (v4)
    {
      _nw_hash_table_release(v4, a2);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

    v6 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;

    v7 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

    v8 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;

    v9 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

    v10 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;

    v11 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;

    if (*(_QWORD *)(a1 + 112))
    {
      NEFlowDirectorDestroy_delayInitStub(v13);
      *(_QWORD *)(a1 + 112) = 0;
    }
    if ((v2 & 1) == 0)
    {
      v14 = *(_QWORD *)(a1 + 56);
      if (v14)
      {
        nw_queue_cancel_source(v14, v12);
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
    *(_DWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    v15 = *(_DWORD *)(a1 + 132);
    if ((v15 & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(a1 + 140) & 2) != 0)
      {
        if (guarded_close_np() && (v2 & 1) == 0)
        {
          v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          v17 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v17);
          v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            v19 = *(_DWORD *)(a1 + 132);
            *(_DWORD *)buf = 136446722;
            v38 = "nw_path_close_fd";
            v39 = 1024;
            *(_DWORD *)v40 = v19;
            v40[2] = 1024;
            *(_DWORD *)&v40[3] = v16;
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s Failed to close guarded necp fd %d %{darwin.errno}d", buf, 0x18u);
          }

        }
      }
      else
      {
        close(v15);
      }
      *(_DWORD *)(a1 + 132) = -1;
    }
    v20 = *(_DWORD *)(a1 + 136);
    if ((v20 & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(a1 + 140) & 4) != 0)
      {
        if (guarded_close_np() && (v2 & 1) == 0)
        {
          v21 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          v22 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v22);
          v23 = (id)gLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            v24 = *(_DWORD *)(a1 + 136);
            *(_DWORD *)buf = 136446722;
            v38 = "nw_path_close_fd";
            v39 = 1024;
            *(_DWORD *)v40 = v24;
            v40[2] = 1024;
            *(_DWORD *)&v40[3] = v21;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s Failed to close guarded necp observer fd %d %{darwin.errno}d", buf, 0x18u);
          }

        }
      }
      else
      {
        close(v20);
      }
      *(_DWORD *)(a1 + 136) = -1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    uuid_clear((unsigned __int8 *)a1);

    return;
  }
  __nwlog_obj(0, a2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_path_release_globals";
  v26 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  v27 = __nwlog_fault(v26, &type, &v35);
  if ((_DWORD)v27)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v27, v28);
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_release_globals";
        v31 = "%{public}s called with null globals";
LABEL_42:
        _os_log_impl(&dword_182FBE000, v29, v30, v31, buf, 0xCu);
      }
    }
    else
    {
      if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v33);
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v34 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_path_release_globals";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null globals, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (!v34)
          goto LABEL_43;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_release_globals";
        v31 = "%{public}s called with null globals, no backtrace";
        goto LABEL_42;
      }
      __nwlog_obj(v27, v28);
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_release_globals";
        v31 = "%{public}s called with null globals, backtrace limit exceeded";
        goto LABEL_42;
      }
    }
LABEL_43:

  }
LABEL_44:
  if (v26)
    free(v26);
}

const char *nw_path_status_get_description(unsigned int a1)
{
  if (a1 > 3)
    return "unknown";
  else
    return off_1E14A9340[a1];
}

char *nw_path_flow_registration_copy_description(uint64_t a1)
{
  char *v2;
  char out[40];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(out, 0, 37);
  uuid_unparse_upper((const unsigned __int8 *)(a1 + 32), out);
  v2 = 0;
  asprintf(&v2, "%s", out);
  return v2;
}

NWConcrete_nw_path *nw_path_create(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path *v6;
  NWConcrete_nw_path *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  nw_parameters_t v12;
  OS_nw_parameters *parameters;
  NWConcrete_nw_path *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  id v18;
  os_log_type_t v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = objc_alloc_init(NWConcrete_nw_path);
  v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_create";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (!v25)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v16 = type;
    v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create";
        _os_log_impl(&dword_182FBE000, v10, v16, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_path_create";
      v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v16, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_17;
  }
  if (!v5)
  {
    v12 = nw_parameters_create();
    parameters = v7->parameters;
    v7->parameters = (OS_nw_parameters *)v12;

    if (v7->parameters)
      goto LABEL_10;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_create";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
    {
LABEL_41:
      if (!v9)
      {
LABEL_43:
        v14 = 0;
        goto LABEL_44;
      }
LABEL_42:
      free(v9);
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
LABEL_40:

      goto LABEL_41;
    }
    if (!v25)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create";
        _os_log_impl(&dword_182FBE000, v10, v23, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create";
        _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_path_create";
      v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_17:

    free(backtrace_string);
    if (!v9)
      goto LABEL_43;
    goto LABEL_42;
  }
  objc_storeStrong((id *)&v6->parameters, a2);
LABEL_10:
  if (v4)
    objc_storeStrong((id *)&v7->endpoint, a1);
  v14 = v7;
LABEL_44:

  return v14;
}

void sub_1839C168C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_for_flow_registration_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v6 + 144) == *((_QWORD *)v4 + 4)
    && *(_QWORD *)(v6 + 152) == *((_QWORD *)v4 + 5)
    && (*((_BYTE *)v4 + 149) & 1) == 0)
  {
    nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72), *(void **)(a1 + 48));
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void nw_path_prepare_fork()
{
  id v0;
  os_unfair_lock_s *globals_for_path;

  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v0 = (id)nw_context_copy_implicit_context::implicit_context;
  globals_for_path = (os_unfair_lock_s *)nw_context_get_globals_for_path(v0);

  os_unfair_lock_lock(globals_for_path + 31);
  os_unfair_lock_lock(globals_for_path + 30);
}

void sub_1839C1790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_path_parent_has_forked()
{
  id v0;
  os_unfair_lock_s *globals_for_path;

  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v0 = (id)nw_context_copy_implicit_context::implicit_context;
  globals_for_path = (os_unfair_lock_s *)nw_context_get_globals_for_path(v0);

  os_unfair_lock_unlock(globals_for_path + 30);
  os_unfair_lock_unlock(globals_for_path + 31);
}

void sub_1839C1808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_evaluator_evaluate(NWConcrete_nw_path_evaluator *a1, int *a2)
{
  NWConcrete_nw_path_evaluator *v3;
  void *v4;
  _QWORD *v5;
  id v6;
  NWConcrete_nw_path *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  char *v12;
  NWConcrete_nw_path *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  int v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  id v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  int v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  char *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  os_log_type_t v55;
  void *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  char *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  int v64;
  char v65;
  os_log_type_t type;
  uint64_t v67;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  _BYTE v71[14];
  __int16 v72;
  int v73;
  __int16 v74;
  char *v75;
  uint8_t v76[4];
  const char *v77;
  __int16 v78;
  char *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (void *)*((_QWORD *)v3 + 1);
  if (v4)
  {
    v5 = v4;
    v6 = *(id *)(v5[13] + 136);

    if (nw_path_endpoint_is_always_satisfied(*((void **)v3 + 2)))
    {
      uuid_generate_random((unsigned __int8 *)v3 + 80);
      v7 = nw_path_create(*((void **)v3 + 2), *((void **)v3 + 1));
      v8 = (void *)*((_QWORD *)v3 + 6);
      *((_QWORD *)v3 + 6) = v7;

      v9 = *((_QWORD *)v3 + 6);
      if (v9)
      {
        objc_storeStrong((id *)(v9 + 32), *((id *)v3 + 3));
        v10 = (char *)v3 + 48;
        objc_storeStrong((id *)(*((_QWORD *)v3 + 6) + 40), *((id *)v3 + 4));
        objc_storeStrong((id *)(*((_QWORD *)v3 + 6) + 48), *((id *)v3 + 5));
        *(_BYTE *)(*(_QWORD *)v10 + 475) = *(_BYTE *)(*(_QWORD *)v10 + 475) & 0xFE | ((*((_BYTE *)v3 + 107) & 2) != 0);
        *(_WORD *)(*(_QWORD *)v10 + 384) = *((_WORD *)v3 + 52);
        *(_BYTE *)(*(_QWORD *)v10 + 386) = *((_BYTE *)v3 + 106);
        *(_BYTE *)(*(_QWORD *)v10 + 475) = *(_BYTE *)(*(_QWORD *)v10 + 475) & 0xFD | (*((_BYTE *)v3 + 107) >> 1) & 2;
        *(_OWORD *)(*(_QWORD *)v10 + 120) = *((_OWORD *)v3 + 5);
LABEL_67:
        nw_path_snapshot_path(*((NWConcrete_nw_path **)v3 + 6));
        v44 = 1;
LABEL_86:

        goto LABEL_87;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      *(_DWORD *)v76 = 136446210;
      v77 = "nw_path_evaluator_evaluate";
      v12 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      LOBYTE(v67) = 0;
      if (!__nwlog_fault(v12, buf, &v67))
      {
LABEL_74:
        if (!v12)
          goto LABEL_85;
        goto LABEL_84;
      }
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = (id)gLogObj;
        v24 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s nw_path_create failed", v76, 0xCu);
        }
LABEL_73:

        goto LABEL_74;
      }
      if (!(_BYTE)v67)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = (id)gLogObj;
        v41 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v23, v41, "%{public}s nw_path_create failed, backtrace limit exceeded", v76, 0xCu);
        }
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v32 = buf[0];
      v33 = os_log_type_enabled(v23, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s nw_path_create failed, no backtrace", v76, 0xCu);
        }
        goto LABEL_73;
      }
      if (v33)
      {
        *(_DWORD *)v76 = 136446466;
        v77 = "nw_path_evaluator_evaluate";
        v78 = 2082;
        v79 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", v76, 0x16u);
      }

LABEL_40:
      free(backtrace_string);
      if (!v12)
        goto LABEL_85;
      goto LABEL_84;
    }
    v67 = 0;
    v11 = *((unsigned __int8 *)v3 + 107);
    BYTE2(v64) = (v11 & 8) != 0;
    BYTE1(v64) = (v11 & 4) != 0;
    LOBYTE(v64) = *((_BYTE *)v3 + 106);
    v12 = (char *)nw_path_create_necp_parameters(&v67, *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4), *((_QWORD *)v3 + 5), *((_QWORD *)v3 + 1), (v11 >> 1) & 1, *((unsigned __int16 *)v3 + 52), v64);
    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      *(_DWORD *)v76 = 136446210;
      v77 = "nw_path_evaluator_evaluate";
      v12 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v12, buf, &type))
        goto LABEL_74;
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s nw_path_create_necp_parameters failed", v76, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v30 = buf[0];
        v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)v76 = 136446466;
            v77 = "nw_path_evaluator_evaluate";
            v78 = 2082;
            v79 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s nw_path_create_necp_parameters failed, dumping backtrace:%{public}s", v76, 0x16u);
          }

          goto LABEL_40;
        }
        if (v31)
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s nw_path_create_necp_parameters failed, no backtrace", v76, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v40 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v20, v40, "%{public}s nw_path_create_necp_parameters failed, backtrace limit exceeded", v76, 0xCu);
        }
      }

      goto LABEL_74;
    }
    v13 = nw_path_create(*((void **)v3 + 2), *((void **)v3 + 1));
    v14 = (void *)*((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 6) = v13;

    v15 = *((_QWORD *)v3 + 6);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 32), *((id *)v3 + 3));
      v16 = (char *)v3 + 48;
      objc_storeStrong((id *)(*((_QWORD *)v3 + 6) + 40), *((id *)v3 + 4));
      objc_storeStrong((id *)(*((_QWORD *)v3 + 6) + 48), *((id *)v3 + 5));
      *(_BYTE *)(*(_QWORD *)v16 + 475) = *(_BYTE *)(*(_QWORD *)v16 + 475) & 0xFE | ((*((_BYTE *)v3 + 107) & 2) != 0);
      *(_WORD *)(*(_QWORD *)v16 + 384) = *((_WORD *)v3 + 52);
      *(_BYTE *)(*(_QWORD *)v16 + 386) = *((_BYTE *)v3 + 106);
      *(_BYTE *)(*(_QWORD *)v16 + 475) = *(_BYTE *)(*(_QWORD *)v16 + 475) & 0xFD | (*((_BYTE *)v3 + 107) >> 1) & 2;
      if (nw_path_shared_necp_fd(v6) == -1)
      {
LABEL_66:
        free(v12);
        goto LABEL_67;
      }
      bzero(v76, 0x600uLL);
      if (uuid_is_null((const unsigned __int8 *)v3 + 80) && necp_client_action())
      {
        v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v69 = "nw_path_evaluator_evaluate";
          v70 = 1024;
          *(_DWORD *)v71 = v17;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_ADD error %{darwin.errno}d", buf, 0x12u);
        }

LABEL_13:
        if (a2)
          *a2 = v17;
        goto LABEL_84;
      }
      if (uuid_is_null((const unsigned __int8 *)v3 + 80))
      {
        v34 = 0;
        v35 = 0;
LABEL_58:
        if (uuid_is_null((const unsigned __int8 *)v3 + 80) || !v35 || !v34)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v42 = (id)gLogObj;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            v43 = "failed to parse";
            *(_DWORD *)buf = 136447234;
            v69 = "nw_path_evaluator_evaluate";
            v70 = 2082;
            if (v34)
              v43 = "parsed";
            *(_QWORD *)v71 = v43;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)&v71[10] = v35;
            v72 = 1042;
            v73 = 16;
            v74 = 2098;
            v75 = (char *)v3 + 80;
            _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{public}s %d bytes for id %{public,uuid_t}.16P", buf, 0x2Cu);
          }

        }
        goto LABEL_66;
      }
      *(_OWORD *)(*((_QWORD *)v3 + 6) + 120) = *((_OWORD *)v3 + 5);
      v35 = necp_client_action();
      if (v35 > 0)
      {
        v34 = nw_path_parse_necp_result(*((void **)v3 + 6), (uint64_t)v76, v35);
        goto LABEL_58;
      }
      v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446466;
      v69 = "nw_path_evaluator_evaluate";
      v70 = 1024;
      *(_DWORD *)v71 = v17;
      v49 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v65 = 0;
      if (__nwlog_fault(v49, &type, &v65))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = type;
          if (os_log_type_enabled(v50, type))
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_path_evaluator_evaluate";
            v70 = 1024;
            *(_DWORD *)v71 = v17;
            _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v65)
        {
          v52 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v53 = type;
          v54 = os_log_type_enabled(v50, type);
          if (v52)
          {
            if (v54)
            {
              *(_DWORD *)buf = 136446722;
              v69 = "nw_path_evaluator_evaluate";
              v70 = 1024;
              *(_DWORD *)v71 = v17;
              *(_WORD *)&v71[4] = 2082;
              *(_QWORD *)&v71[6] = v52;
              _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v52);
            goto LABEL_104;
          }
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_path_evaluator_evaluate";
            v70 = 1024;
            *(_DWORD *)v71 = v17;
            _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v55 = type;
          if (os_log_type_enabled(v50, type))
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_path_evaluator_evaluate";
            v70 = 1024;
            *(_DWORD *)v71 = v17;
            _os_log_impl(&dword_182FBE000, v50, v55, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
LABEL_104:
      if (v49)
        free(v49);
      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    *(_DWORD *)v76 = 136446210;
    v77 = "nw_path_evaluator_evaluate";
    v26 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, buf, &type))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        v28 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s nw_path_create failed", v76, 0xCu);
        }
      }
      else if (type)
      {
        v36 = __nw_create_backtrace_string();
        if (v36)
        {
          v37 = (char *)v36;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v38 = (id)gLogObj;
          v39 = buf[0];
          if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v76 = 136446466;
            v77 = "nw_path_evaluator_evaluate";
            v78 = 2082;
            v79 = v37;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", v76, 0x16u);
          }

          free(v37);
          if (!v26)
            goto LABEL_84;
          goto LABEL_83;
        }
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v46 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v27, v46, "%{public}s nw_path_create failed, no backtrace", v76, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        v45 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v76 = 136446210;
          v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_182FBE000, v27, v45, "%{public}s nw_path_create failed, backtrace limit exceeded", v76, 0xCu);
        }
      }

    }
    if (!v26)
    {
LABEL_84:
      free(v12);
LABEL_85:
      v44 = 0;
      goto LABEL_86;
    }
LABEL_83:
    free(v26);
    goto LABEL_84;
  }
  __nwlog_obj();
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v76 = 136446210;
  v77 = "nw_path_evaluator_evaluate";
  v57 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v67) = 0;
  if (__nwlog_fault(v57, buf, &v67))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v59 = buf[0];
      if (os_log_type_enabled(v58, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v76 = 136446210;
        v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null evaluator->parameters", v76, 0xCu);
      }
    }
    else if ((_BYTE)v67)
    {
      v60 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v61 = buf[0];
      v62 = os_log_type_enabled(v58, (os_log_type_t)buf[0]);
      if (v60)
      {
        if (v62)
        {
          *(_DWORD *)v76 = 136446466;
          v77 = "nw_path_evaluator_evaluate";
          v78 = 2082;
          v79 = v60;
          _os_log_impl(&dword_182FBE000, v58, v61, "%{public}s called with null evaluator->parameters, dumping backtrace:%{public}s", v76, 0x16u);
        }

        free(v60);
        goto LABEL_122;
      }
      if (v62)
      {
        *(_DWORD *)v76 = 136446210;
        v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_182FBE000, v58, v61, "%{public}s called with null evaluator->parameters, no backtrace", v76, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v63 = buf[0];
      if (os_log_type_enabled(v58, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v76 = 136446210;
        v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_182FBE000, v58, v63, "%{public}s called with null evaluator->parameters, backtrace limit exceeded", v76, 0xCu);
      }
    }

  }
LABEL_122:
  if (v57)
    free(v57);
  v44 = 0;
LABEL_87:

  return v44;
}

void sub_1839C2844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_path_snapshot_path(NWConcrete_nw_path *a1)
{
  NWConcrete_nw_path *v1;
  OS_nw_interface *direct;
  OS_nw_interface *delegate;
  unsigned int routed_interface_index;
  id v5;
  NWConcrete_nw_interface *v6;
  OS_nw_interface *v7;
  id v8;
  NWConcrete_nw_interface *v9;
  OS_nw_interface *v10;
  NWConcrete_nw_path *v11;
  OS_xpc_object *network_agent_dictionary;
  OS_xpc_object *v13;
  OS_xpc_object *v14;
  unint64_t v15;
  id v16;
  id v17;
  const char *data;
  const char *v19;
  NWConcrete_nw_path *v20;
  void *v21;
  OS_xpc_object *proxy_settings;
  OS_xpc_object *v23;
  OS_xpc_object *v24;
  id v25;
  uint64_t proxy_configs;
  _BOOL8 v27;
  OS_nw_array *v28;
  unsigned int i;
  id v30;
  _BYTE *v31;
  char *v32;
  size_t v33;
  NWConcrete_nw_path_override_info *v34;
  NWConcrete_nw_path_override_info *v35;
  NSObject *v36;
  NWConcrete_nw_path_override_info *v37;
  id v38;
  void *v39;
  NSObject *v40;
  os_log_type_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  void *v45;
  NSObject *v46;
  os_log_type_t v47;
  id v48;
  void *v49;
  NSObject *v50;
  os_log_type_t v51;
  int v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  char *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  os_log_type_t v60;
  unint64_t v61;
  BOOL v62;
  id v63;
  void *v64;
  NSObject *v65;
  os_log_type_t v66;
  const UInt8 *v67;
  const __CFData *v68;
  CFPropertyListRef v69;
  void *v70;
  void *v71;
  NWConcrete_nw_resolver_config *v72;
  uint64_t v73;
  _BOOL8 v74;
  OS_nw_array *v75;
  NSObject *v76;
  char *v77;
  NSObject *v78;
  _BOOL4 v79;
  os_log_type_t v80;
  NWConcrete_nw_path_override_info *v81;
  unint64_t override_flags;
  unsigned __int8 *resolver_configs;
  char *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  _BOOL8 v87;
  OS_nw_array *override_resolver_configs;
  id v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  os_log_type_t v93;
  const char *v94;
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  NSObject *v98;
  os_log_type_t v99;
  void *v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  char *backtrace_string;
  os_log_type_t v105;
  _BOOL4 v106;
  os_log_type_t v107;
  void *v108;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  char *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  os_log_type_t v115;
  NWConcrete_nw_path *v116;
  unsigned __int8 *flows;
  NWConcrete_nw_path *v118;
  void **v119;
  void **v120;
  OS_xpc_object *v121;
  unsigned int v122;
  NWConcrete_nw_interface *v123;
  NSObject *p_super;
  NSObject *v125;
  OS_nw_endpoint *endpoint;
  OS_nw_endpoint *v127;
  int v128;
  NWConcrete_nw_interface *v129;
  void *v130;
  int v131;
  void *v132;
  NSObject *v133;
  int v134;
  void *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  const unsigned __int8 *v139;
  const char *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  const char *v145;
  const char *v146;
  char *v147;
  NSObject *v148;
  os_log_type_t v149;
  const char *v150;
  const char *v151;
  char *v152;
  os_log_type_t v153;
  _BOOL4 v154;
  const char *v155;
  const char *v156;
  os_log_type_t v157;
  const char *v158;
  const char *v159;
  const char *v160;
  const char *v161;
  xpc_object_t v162;
  void *v163;
  xpc_object_t v164;
  void *v165;
  char v166;
  char v167;
  char v168;
  void *v169;
  NWConcrete_nw_path *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  const char *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  NWConcrete_nw_path *v184;
  NWConcrete_nw_path *v185;
  _BOOL4 v186;
  id v187;
  int bridged_flow_director;
  int v189;
  NSObject *v190;
  const char *v191;
  NSObject *v192;
  os_log_type_t v193;
  BOOL updated;
  int v195;
  BOOL v196;
  size_t *v197;
  os_log_type_t v198;
  char *v199;
  unsigned int *v200;
  int v201;
  NWConcrete_nw_path_override_info *v202;
  const __CFAllocator *allocator;
  char *v204;
  unint64_t v205;
  os_log_type_t v206[8];
  os_log_type_t v207;
  unint64_t v208;
  void **v209;
  char v210;
  os_log_type_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  char v239;
  uint64_t type;
  uint64_t *p_type;
  uint64_t v242;
  char v243;
  id v244;
  id *v245;
  uint64_t v246;
  char v247;
  uuid_string_t out;
  _BYTE buf[48];
  __int16 v250;
  const char *v251;
  size_t length[18];

  length[15] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  direct = v1->direct;
  v1->direct = 0;

  delegate = v1->delegate;
  v1->delegate = 0;

  routed_interface_index = v1->policy_result.routed_interface_index;
  if (routed_interface_index
    || (routed_interface_index = v1->policy_result.direct_interface_index) != 0
    || (routed_interface_index = nw_parameters_get_required_interface_index(v1->parameters)) != 0)
  {
    v5 = nw_parameters_copy_context(v1->parameters);
    v6 = nw_path_copy_interface_with_generation(v5, routed_interface_index, v1->policy_result.direct_interface_generation);
    v7 = v1->direct;
    v1->direct = (OS_nw_interface *)v6;

    if (!v1->policy_result.delegate_interface_index)
      goto LABEL_7;
    v8 = nw_parameters_copy_context(v1->parameters);
    v9 = nw_path_copy_interface_with_generation(v8, v1->policy_result.delegate_interface_index, v1->policy_result.delegate_interface_generation);
    v10 = v1->delegate;
    v1->delegate = (OS_nw_interface *)v9;
  }
  else
  {
    endpoint = v1->endpoint;
    if (!endpoint)
      goto LABEL_7;
    v127 = endpoint;
    v128 = -[OS_nw_endpoint type](v127, "type");

    if (v128 != 1 || nw_endpoint_get_address((nw_endpoint_t)v1->endpoint)->sa_family != 1)
      goto LABEL_7;
    v8 = nw_parameters_copy_context(v1->parameters);
    if (nw_interface_get_loopback_index::onceToken[0] != -1)
      dispatch_once(nw_interface_get_loopback_index::onceToken, &__block_literal_global_87884);
    v129 = nw_path_copy_interface_with_generation(v8, nw_interface_get_loopback_index::index, 0);
    v10 = v1->direct;
    v1->direct = (OS_nw_interface *)v129;
  }

LABEL_7:
  v11 = v1;
  network_agent_dictionary = v11->network_agent_dictionary;
  v11->network_agent_dictionary = 0;

  if (!v11->policy_result.netagents)
    goto LABEL_231;
  if (!v11->policy_result.num_netagents)
    goto LABEL_231;
  v13 = (OS_xpc_object *)xpc_dictionary_create(0, 0, 0);
  v14 = v11->network_agent_dictionary;
  v11->network_agent_dictionary = v13;

  if (!v11->policy_result.num_netagents)
    goto LABEL_231;
  v15 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    if (uuid_is_null(v11->policy_result.netagents[v15].netagent_uuid))
      break;
    v16 = nw_parameters_copy_context(v11->parameters);
    v244 = 0;
    v17 = nw_path_copy_dictionary_for_agent_with_generation(v16, v11->policy_result.netagents[v15].netagent_uuid, v11->policy_result.netagents[v15].generation, &v244);
    if (!v17)
      goto LABEL_193;
    memset(out, 0, sizeof(out));
    uuid_unparse(v11->policy_result.netagents[v15].netagent_uuid, out);
    xpc_dictionary_set_value(v11->network_agent_dictionary, out, v17);
    length[0] = 0;
    data = (const char *)xpc_dictionary_get_data(v17, "data", length);
    v19 = 0;
    if (data && length[0] >= 0xD8)
    {
      if (length[0] == *((unsigned int *)data + 53) + 216)
        v19 = data;
      else
        v19 = 0;
    }
    if (is_config_agent_type_proxy())
    {
      v20 = v11;
      config_agent_copy_proxy_information();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
      {
        proxy_settings = v11->proxy_settings;
        if (!proxy_settings)
        {
          v23 = (OS_xpc_object *)xpc_array_create(0, 0);
          v24 = v11->proxy_settings;
          v11->proxy_settings = v23;

          proxy_settings = v11->proxy_settings;
        }
        xpc_array_append_value(proxy_settings, v21);
        config_agent_free_proxy_information();
      }

    }
    v25 = v244;
    if (v244)
    {
      proxy_configs = (uint64_t)v11->proxy_configs;
      if (!proxy_configs)
      {
        v27 = nw_array_create();
        v28 = v11->proxy_configs;
        v11->proxy_configs = (OS_nw_array *)v27;

        proxy_configs = (uint64_t)v11->proxy_configs;
        v25 = v244;
      }
      nw_array_append(proxy_configs, v25);
      length[0] = 0;
      length[1] = 0;
      nw_proxy_config_copy_fallback_proxy_agent(v244, length);
      for (i = 0; !uuid_is_null((const unsigned __int8 *)length) && i <= 7; ++i)
      {
        v30 = nw_path_copy_proxy_config_for_agent_uuid((const unsigned __int8 *)length, v11->policy_result.netagents[v15].generation, v16);
        uuid_clear((unsigned __int8 *)length);
        if (v30)
        {
          v31 = v30;
          v31[171] |= 0x20u;

          nw_array_append((uint64_t)v11->proxy_configs, v31);
          v32 = v31;
          *(_OWORD *)length = *(_OWORD *)(v32 + 72);

        }
      }
    }
    if (!v19)
    {
      __nwlog_obj();
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(length[0]) = 136446210;
      *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
      v197 = length;
      v101 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault(v101, &type, &v236))
      {
        if (type == 17)
        {
          __nwlog_obj();
          v102 = objc_claimAutoreleasedReturnValue();
          v103 = type;
          if (os_log_type_enabled(v102, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
            _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s called with null netagent", (uint8_t *)length, 0xCu);
          }
        }
        else if ((_BYTE)v236)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v102 = objc_claimAutoreleasedReturnValue();
          v105 = type;
          v106 = os_log_type_enabled(v102, (os_log_type_t)type);
          if (backtrace_string)
          {
            if (v106)
            {
              LODWORD(length[0]) = 136446466;
              *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
              WORD2(length[1]) = 2082;
              *(size_t *)((char *)&length[1] + 6) = (size_t)backtrace_string;
              _os_log_impl(&dword_182FBE000, v102, v105, "%{public}s called with null netagent, dumping backtrace:%{public}s", (uint8_t *)length, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_216;
          }
          if (v106)
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
            _os_log_impl(&dword_182FBE000, v102, v105, "%{public}s called with null netagent, no backtrace", (uint8_t *)length, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v102 = objc_claimAutoreleasedReturnValue();
          v107 = type;
          if (os_log_type_enabled(v102, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
            _os_log_impl(&dword_182FBE000, v102, v107, "%{public}s called with null netagent, backtrace limit exceeded", (uint8_t *)length, 0xCu);
          }
        }

      }
LABEL_216:
      if (v101)
        free(v101);
      goto LABEL_193;
    }
    if (strcmp(v19 + 16, "Network") || strcmp(v19 + 48, "PathOverride"))
      goto LABEL_193;
    v33 = *((unsigned int *)v19 + 53);
    if (!(_DWORD)v33)
    {
      __nwlog_obj();
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(length[0]) = 136446210;
      *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
      v197 = length;
      v109 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault(v109, &type, &v236))
      {
        if (type == 17)
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v111 = type;
          if (os_log_type_enabled(v110, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null (data_length > 0)", (uint8_t *)length, 0xCu);
          }
        }
        else if ((_BYTE)v236)
        {
          v112 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v113 = type;
          v114 = os_log_type_enabled(v110, (os_log_type_t)type);
          if (v112)
          {
            if (v114)
            {
              LODWORD(length[0]) = 136446466;
              *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
              WORD2(length[1]) = 2082;
              *(size_t *)((char *)&length[1] + 6) = (size_t)v112;
              _os_log_impl(&dword_182FBE000, v110, v113, "%{public}s called with null (data_length > 0), dumping backtrace:%{public}s", (uint8_t *)length, 0x16u);
            }

            free(v112);
            goto LABEL_229;
          }
          if (v114)
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl(&dword_182FBE000, v110, v113, "%{public}s called with null (data_length > 0), no backtrace", (uint8_t *)length, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v115 = type;
          if (os_log_type_enabled(v110, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl(&dword_182FBE000, v110, v115, "%{public}s called with null (data_length > 0), backtrace limit exceeded", (uint8_t *)length, 0xCu);
          }
        }

      }
LABEL_229:
      if (v109)
        free(v109);
      goto LABEL_191;
    }
    v34 = objc_alloc_init(NWConcrete_nw_path_override_info);
    if (!v34)
    {
      v37 = 0;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      LODWORD(length[0]) = 136446210;
      *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
      v197 = length;
      v39 = (void *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault((const char *)v39, &type, &v236))
      {
        if (type == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (id)gLogObj;
          v41 = type;
          if (os_log_type_enabled(v40, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) nw_path_override_info] init] failed", (uint8_t *)length, 0xCu);
          }
        }
        else if ((_BYTE)v236)
        {
          v84 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (id)gLogObj;
          v85 = type;
          v86 = os_log_type_enabled(v40, (os_log_type_t)type);
          if (v84)
          {
            if (v86)
            {
              LODWORD(length[0]) = 136446466;
              *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
              WORD2(length[1]) = 2082;
              *(size_t *)((char *)&length[1] + 6) = (size_t)v84;
              _os_log_impl(&dword_182FBE000, v40, v85, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) nw_path_override_info] init] failed, dumping backtrace:%{public}s", (uint8_t *)length, 0x16u);
            }

            free(v84);
            if (!v39)
              goto LABEL_190;
LABEL_177:
            free(v39);
            goto LABEL_190;
          }
          if (v86)
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl(&dword_182FBE000, v40, v85, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) nw_path_override_info] init] failed, no backtrace", (uint8_t *)length, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (id)gLogObj;
          v93 = type;
          if (os_log_type_enabled(v40, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl(&dword_182FBE000, v40, v93, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) nw_path_override_info] init] failed, backtrace limit exceeded", (uint8_t *)length, 0xCu);
          }
        }

      }
      if (!v39)
        goto LABEL_190;
      goto LABEL_177;
    }
    if (v33 < 5)
    {
      v35 = v34;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = (id)gLogObj;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(length[0]) = 136446722;
        *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
        WORD2(length[1]) = 2048;
        *(size_t *)((char *)&length[1] + 6) = v33;
        HIWORD(length[2]) = 2048;
        length[3] = 5;
        _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s invalid length for override info %zu != %zu", (uint8_t *)length, 0x20u);
      }

      v37 = v35;
      goto LABEL_190;
    }
    v202 = v34;
    v208 = v33;
    v42 = v33 - 5;
    if (v33 == 5)
    {
LABEL_139:
      v81 = v202;
      override_flags = v202->override_flags;
      if ((override_flags & 1) != 0)
      {
        *((_BYTE *)v11 + 475) |= 0x40u;
        override_flags = v202->override_flags;
        if ((override_flags & 2) == 0)
        {
LABEL_141:
          if ((override_flags & 4) == 0)
            goto LABEL_142;
          goto LABEL_154;
        }
      }
      else if ((override_flags & 2) == 0)
      {
        goto LABEL_141;
      }
      *((_BYTE *)v11 + 475) |= 0x80u;
      override_flags = v202->override_flags;
      if ((override_flags & 4) == 0)
      {
LABEL_142:
        if ((override_flags & 0x10) == 0)
          goto LABEL_143;
        goto LABEL_155;
      }
LABEL_154:
      *((_BYTE *)v11 + 475) |= 8u;
      override_flags = v202->override_flags;
      if ((override_flags & 0x10) == 0)
      {
LABEL_143:
        if ((override_flags & 8) == 0)
          goto LABEL_144;
        goto LABEL_156;
      }
LABEL_155:
      *((_BYTE *)v11 + 475) |= 0x20u;
      if ((v202->override_flags & 8) == 0)
      {
LABEL_144:
        resolver_configs = (unsigned __int8 *)v202->resolver_configs;
        if (!resolver_configs)
          goto LABEL_192;
        goto LABEL_157;
      }
LABEL_156:
      *((_BYTE *)v11 + 475) |= 0x10u;
      resolver_configs = (unsigned __int8 *)v202->resolver_configs;
      if (!resolver_configs)
        goto LABEL_192;
LABEL_157:
      if (!v11->override_resolver_configs)
      {
        v87 = nw_array_create();
        override_resolver_configs = v11->override_resolver_configs;
        v11->override_resolver_configs = (OS_nw_array *)v87;

        resolver_configs = (unsigned __int8 *)v202->resolver_configs;
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL23nw_path_snapshot_agentsP18NWConcrete_nw_path_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14AC200;
      *(_QWORD *)&buf[32] = v11;
      nw_array_apply(resolver_configs, (uint64_t)buf);

      v81 = v202;
      goto LABEL_192;
    }
    v43 = 0;
    v200 = (unsigned int *)(v19 + 216);
    v199 = (char *)(v19 + 221);
    v204 = (char *)(v19 + 217);
    v205 = v33 - 1;
    *(_QWORD *)v206 = v33 - 5;
    while (1)
    {
      if (v42 < v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        LODWORD(length[0]) = 136446722;
        *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
        WORD2(length[1]) = 2048;
        *(size_t *)((char *)&length[1] + 6) = v43;
        HIWORD(length[2]) = 2048;
        length[3] = v208;
        v197 = length;
        v45 = (void *)_os_log_send_and_compose_impl();

        LOBYTE(type) = 16;
        LOBYTE(v236) = 0;
        if (__nwlog_fault((const char *)v45, &type, &v236))
        {
          if (type == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v47 = type;
            if (os_log_type_enabled(v46, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu", (uint8_t *)length, 0x20u);
            }
          }
          else if ((_BYTE)v236)
          {
            v53 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v54 = type;
            v55 = os_log_type_enabled(v46, (os_log_type_t)type);
            if (v53)
            {
              if (v55)
              {
                LODWORD(length[0]) = 136446978;
                *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
                WORD2(length[1]) = 2048;
                *(size_t *)((char *)&length[1] + 6) = v43;
                HIWORD(length[2]) = 2048;
                length[3] = v208;
                LOWORD(length[4]) = 2082;
                *(size_t *)((char *)&length[4] + 2) = (size_t)v53;
                _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s", (uint8_t *)length, 0x2Au);
              }

              free(v53);
              if (!v45)
              {
LABEL_84:
                v52 = 0;
LABEL_105:
                v61 = 0;
                goto LABEL_106;
              }
LABEL_83:
              free(v45);
              goto LABEL_84;
            }
            if (v55)
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace", (uint8_t *)length, 0x20u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v59 = type;
            if (os_log_type_enabled(v46, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              _os_log_impl(&dword_182FBE000, v46, v59, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded", (uint8_t *)length, 0x20u);
            }
          }

        }
        if (!v45)
          goto LABEL_84;
        goto LABEL_83;
      }
      if (v205 >= v43)
      {
        v52 = *((unsigned __int8 *)v200 + v43);
        goto LABEL_94;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v48 = (id)gLogObj;
      LODWORD(length[0]) = 136446722;
      *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
      WORD2(length[1]) = 2048;
      *(size_t *)((char *)&length[1] + 6) = v43;
      HIWORD(length[2]) = 2048;
      length[3] = v208;
      v197 = length;
      v49 = (void *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault((const char *)v49, &type, &v236))
      {
        if (type == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v50 = (id)gLogObj;
          v51 = type;
          if (os_log_type_enabled(v50, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446722;
            *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
            WORD2(length[1]) = 2048;
            *(size_t *)((char *)&length[1] + 6) = v43;
            HIWORD(length[2]) = 2048;
            length[3] = v208;
            _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu", (uint8_t *)length, 0x20u);
          }
        }
        else if ((_BYTE)v236)
        {
          v56 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v50 = (id)gLogObj;
          v57 = type;
          v58 = os_log_type_enabled(v50, (os_log_type_t)type);
          if (v56)
          {
            if (v58)
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              LOWORD(length[4]) = 2082;
              *(size_t *)((char *)&length[4] + 2) = (size_t)v56;
              _os_log_impl(&dword_182FBE000, v50, v57, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s", (uint8_t *)length, 0x2Au);
            }

            free(v56);
            if (!v49)
              goto LABEL_93;
LABEL_92:
            free(v49);
            goto LABEL_93;
          }
          if (v58)
          {
            LODWORD(length[0]) = 136446722;
            *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
            WORD2(length[1]) = 2048;
            *(size_t *)((char *)&length[1] + 6) = v43;
            HIWORD(length[2]) = 2048;
            length[3] = v208;
            _os_log_impl(&dword_182FBE000, v50, v57, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace", (uint8_t *)length, 0x20u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v50 = (id)gLogObj;
          v60 = type;
          if (os_log_type_enabled(v50, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446722;
            *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
            WORD2(length[1]) = 2048;
            *(size_t *)((char *)&length[1] + 6) = v43;
            HIWORD(length[2]) = 2048;
            length[3] = v208;
            _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded", (uint8_t *)length, 0x20u);
          }
        }

      }
      if (v49)
        goto LABEL_92;
LABEL_93:
      v52 = 0;
LABEL_94:
      v61 = *(unsigned int *)&v204[v43];
      if (!(_DWORD)v61)
        goto LABEL_105;
      if (v61 > 0xFFFFFFF9 || (v208 >= v61 + 5 ? (v62 = v208 - (v61 + 5) >= v43) : (v62 = 0), !v62))
      {
        v201 = v52;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v63 = (id)gLogObj;
        LODWORD(length[0]) = 136446978;
        *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
        WORD2(length[1]) = 2048;
        *(size_t *)((char *)&length[1] + 6) = v43;
        HIWORD(length[2]) = 2048;
        length[3] = v208;
        LOWORD(length[4]) = 1024;
        *(_DWORD *)((char *)&length[4] + 2) = v61;
        v197 = length;
        v64 = (void *)_os_log_send_and_compose_impl();

        LOBYTE(type) = 16;
        LOBYTE(v236) = 0;
        if (__nwlog_fault((const char *)v64, &type, &v236))
        {
          if (type == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = (id)gLogObj;
            v66 = type;
            if (os_log_type_enabled(v65, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              LOWORD(length[4]) = 1024;
              *(_DWORD *)((char *)&length[4] + 2) = v61;
              _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", (uint8_t *)length, 0x26u);
            }
            goto LABEL_104;
          }
          if ((_BYTE)v236)
          {
            v77 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v78 = (id)gLogObj;
            v198 = type;
            v79 = os_log_type_enabled(v78, (os_log_type_t)type);
            if (v77)
            {
              if (v79)
              {
                LODWORD(length[0]) = 136447234;
                *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
                WORD2(length[1]) = 2048;
                *(size_t *)((char *)&length[1] + 6) = v43;
                HIWORD(length[2]) = 2048;
                length[3] = v208;
                LOWORD(length[4]) = 1024;
                *(_DWORD *)((char *)&length[4] + 2) = v61;
                HIWORD(length[4]) = 2082;
                length[5] = (size_t)v77;
                _os_log_impl(&dword_182FBE000, v78, v198, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", (uint8_t *)length, 0x30u);
              }

              free(v77);
              v52 = v201;
              if (!v64)
                goto LABEL_106;
LABEL_138:
              free(v64);
LABEL_106:
              v67 = 0;
              goto LABEL_107;
            }
            if (v79)
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              LOWORD(length[4]) = 1024;
              *(_DWORD *)((char *)&length[4] + 2) = v61;
              _os_log_impl(&dword_182FBE000, v78, v198, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", (uint8_t *)length, 0x26u);
            }

          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = (id)gLogObj;
            v80 = type;
            if (os_log_type_enabled(v65, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v43;
              HIWORD(length[2]) = 2048;
              length[3] = v208;
              LOWORD(length[4]) = 1024;
              *(_DWORD *)((char *)&length[4] + 2) = v61;
              _os_log_impl(&dword_182FBE000, v65, v80, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", (uint8_t *)length, 0x26u);
            }
LABEL_104:

          }
        }
        v52 = v201;
        if (v64)
          goto LABEL_138;
        goto LABEL_106;
      }
      v67 = (const UInt8 *)&v199[v43];
LABEL_107:
      v43 += v61 + 5;
      if (v43 > v208)
        break;
      if (v61 && v67)
      {
        if (v52 == 2)
        {
          v68 = CFDataCreate(allocator, v67, v61);
          if (v68)
          {
            v69 = CFPropertyListCreateWithData(allocator, v68, 0, 0, 0);
            if (v69)
            {
              v70 = (void *)_CFXPCCreateXPCObjectFromCFObject();
              v71 = v70;
              if (v70)
              {
                v72 = nw_resolver_config_create_with_dictionary(v70);
                v73 = (uint64_t)v202->resolver_configs;
                if (!v73)
                {
                  v74 = nw_array_create();
                  v75 = v202->resolver_configs;
                  v202->resolver_configs = (OS_nw_array *)v74;

                  v73 = (uint64_t)v202->resolver_configs;
                }
                nw_array_append(v73, v72);

              }
              CFRelease(v69);

            }
            CFRelease(v68);
          }
        }
        else if (v52 == 1)
        {
          if (v61 != 8)
          {
            __nwlog_obj();
            v98 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
              WORD2(length[1]) = 1024;
              *(_DWORD *)((char *)&length[1] + 6) = v61;
              WORD1(length[2]) = 2048;
              *(size_t *)((char *)&length[2] + 4) = 8;
              _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_ERROR, "%{public}s received invalid size for flags (%d != %zu)", (uint8_t *)length, 0x1Cu);
            }

            goto LABEL_189;
          }
          v202->override_flags = *(_QWORD *)v67;
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v76 = (id)gLogObj;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            LODWORD(length[0]) = 136446466;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            WORD2(length[1]) = 1024;
            *(_DWORD *)((char *)&length[1] + 6) = v52;
            _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_ERROR, "%{public}s received unknown TLV (type %d)", (uint8_t *)length, 0x12u);
          }

        }
      }
      v42 = *(_QWORD *)v206;
      if (v43 >= *(_QWORD *)v206)
        goto LABEL_139;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v89 = (id)gLogObj;
    LODWORD(length[0]) = 136446978;
    *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
    WORD2(length[1]) = 1024;
    *(_DWORD *)((char *)&length[1] + 6) = v61;
    WORD1(length[2]) = 2048;
    *(size_t *)((char *)&length[2] + 4) = v43;
    WORD2(length[3]) = 2048;
    *(size_t *)((char *)&length[3] + 6) = v208;
    v197 = length;
    v90 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(type) = 16;
    LOBYTE(v236) = 0;
    if (__nwlog_fault(v90, &type, &v236))
    {
      if (type == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v91 = (id)gLogObj;
        v92 = type;
        if (os_log_type_enabled(v91, (os_log_type_t)type))
        {
          LODWORD(length[0]) = 136446978;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
          WORD2(length[1]) = 1024;
          *(_DWORD *)((char *)&length[1] + 6) = v61;
          WORD1(length[2]) = 2048;
          *(size_t *)((char *)&length[2] + 4) = v43;
          WORD2(length[3]) = 2048;
          *(size_t *)((char *)&length[3] + 6) = v208;
          _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", (uint8_t *)length, 0x26u);
        }
        goto LABEL_186;
      }
      if ((_BYTE)v236)
      {
        v94 = __nw_create_backtrace_string();
        if (v94)
        {
          v95 = (char *)v94;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v96 = (id)gLogObj;
          v207 = type;
          if (os_log_type_enabled(v96, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136447234;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            WORD2(length[1]) = 1024;
            *(_DWORD *)((char *)&length[1] + 6) = v61;
            WORD1(length[2]) = 2048;
            *(size_t *)((char *)&length[2] + 4) = v43;
            WORD2(length[3]) = 2048;
            *(size_t *)((char *)&length[3] + 6) = v208;
            HIWORD(length[4]) = 2082;
            length[5] = (size_t)v95;
            _os_log_impl(&dword_182FBE000, v96, v207, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", (uint8_t *)length, 0x30u);
          }

          free(v95);
          goto LABEL_187;
        }
        __nwlog_obj();
        v91 = objc_claimAutoreleasedReturnValue();
        v99 = type;
        if (os_log_type_enabled(v91, (os_log_type_t)type))
        {
          LODWORD(length[0]) = 136446978;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
          WORD2(length[1]) = 1024;
          *(_DWORD *)((char *)&length[1] + 6) = v61;
          WORD1(length[2]) = 2048;
          *(size_t *)((char *)&length[2] + 4) = v43;
          WORD2(length[3]) = 2048;
          *(size_t *)((char *)&length[3] + 6) = v208;
          _os_log_impl(&dword_182FBE000, v91, v99, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", (uint8_t *)length, 0x26u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v91 = (id)gLogObj;
        v97 = type;
        if (os_log_type_enabled(v91, (os_log_type_t)type))
        {
          LODWORD(length[0]) = 136446978;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
          WORD2(length[1]) = 1024;
          *(_DWORD *)((char *)&length[1] + 6) = v61;
          WORD1(length[2]) = 2048;
          *(size_t *)((char *)&length[2] + 4) = v43;
          WORD2(length[3]) = 2048;
          *(size_t *)((char *)&length[3] + 6) = v208;
          _os_log_impl(&dword_182FBE000, v91, v97, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", (uint8_t *)length, 0x26u);
        }
      }
LABEL_186:

    }
LABEL_187:
    if (v90)
      free(v90);
LABEL_189:
    v37 = v202;
LABEL_190:

LABEL_191:
    v81 = 0;
LABEL_192:

LABEL_193:
    ++v15;
  }
  while (v15 < v11->policy_result.num_netagents);
LABEL_231:

  v116 = v11;
  flows = (unsigned __int8 *)v116->flows;
  length[0] = MEMORY[0x1E0C809B0];
  length[1] = 3221225472;
  length[2] = (size_t)___ZL22nw_path_snapshot_flowsP18NWConcrete_nw_path_block_invoke;
  length[3] = (size_t)&unk_1E14AC200;
  v118 = v116;
  length[4] = (size_t)v118;
  nw_array_apply(flows, (uint64_t)length);

  v119 = v118;
  v120 = v119;
  if ((*((_BYTE *)v119 + 473) & 0x30) != 0
    || nw_parameters_get_required_interface_index(v119[2])
    || nw_parameters_get_multipath(v120[2]) && nw_parameters_multipath_fallback_allowed(v120[2]))
  {
    goto LABEL_351;
  }
  v121 = v11->network_agent_dictionary;
  if (!v121)
    goto LABEL_351;
  *(_QWORD *)out = 0;
  *(_QWORD *)&out[8] = out;
  *(_DWORD *)&out[24] = 0;
  *(_QWORD *)&out[16] = 0x2020000000;
  v244 = 0;
  v245 = &v244;
  v246 = 0x2020000000;
  v247 = 0;
  type = 0;
  p_type = &type;
  v242 = 0x2020000000;
  v243 = 0;
  v236 = 0;
  v237 = &v236;
  v238 = 0x2020000000;
  v239 = 0;
  v232 = 0;
  v233 = &v232;
  v234 = 0x2020000000;
  v235 = 0;
  v228 = 0;
  v229 = &v228;
  v230 = 0x2020000000;
  v231 = 0;
  v224 = 0;
  v225 = &v224;
  v226 = 0x2020000000;
  v227 = 0;
  v220 = 0;
  v221 = &v220;
  v222 = 0x2020000000;
  v223 = 0;
  v216 = 0;
  v217 = &v216;
  v218 = 0x2020000000;
  v219 = 0;
  v212 = 0;
  v213 = &v212;
  v215 = 0;
  v214 = 0x2020000000;
  length[0] = MEMORY[0x1E0C809B0];
  length[1] = 3221225472;
  length[2] = (size_t)___ZL25nw_path_snapshot_fallbackP18NWConcrete_nw_path_block_invoke;
  length[3] = (size_t)&unk_1E14A9060;
  length[5] = (size_t)&v228;
  v209 = v120;
  length[4] = (size_t)v209;
  length[6] = (size_t)&v244;
  length[7] = (size_t)&type;
  length[8] = (size_t)&v236;
  length[9] = (size_t)&v232;
  length[10] = (size_t)out;
  length[11] = (size_t)&v224;
  length[12] = (size_t)&v220;
  length[13] = (size_t)&v216;
  length[14] = (size_t)&v212;
  xpc_dictionary_apply(v121, length);
  if (!*((_BYTE *)v229 + 24))
    goto LABEL_348;
  *((_DWORD *)v209 + 93) = *((_DWORD *)v213 + 6);
  v122 = *(_DWORD *)(*(_QWORD *)&out[8] + 24);
  if (!v122)
  {
    v130 = v209[14];
    v209[14] = 0;
    goto LABEL_275;
  }
  v123 = nw_interface_create_with_index(v122);
  p_super = &v123->super;
  if (!v123)
  {
    __nwlog_obj();
    v125 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
    {
      v131 = *(_DWORD *)(*(_QWORD *)&out[8] + 24);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v131;
      _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_INFO, "%{public}s Unable to create fallback interface using index %d", buf, 0x12u);
    }
    goto LABEL_258;
  }
  if (nw_interface_is_expensive(v123) && nw_parameters_get_prohibit_expensive((nw_parameters_t)v120[2]))
  {
    __nwlog_obj();
    v125 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = p_super;
      _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_INFO, "%{public}s Fallback to expensive interface %{public}@ prohibited by parameters", buf, 0x16u);
    }
    goto LABEL_258;
  }
  if (nw_interface_is_constrained(p_super)
    && nw_parameters_get_prohibit_constrained((nw_parameters_t)v120[2]))
  {
    __nwlog_obj();
    v125 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = p_super;
      _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_INFO, "%{public}s Fallback to constrained interface %{public}@ prohibited by parameters", buf, 0x16u);
    }
    goto LABEL_258;
  }
  if (nw_interface_is_ultra_constrained(p_super)
    && (nw_parameters_get_allow_ultra_constrained(v120[2]) & 1) == 0)
  {
    if (nw_path_is_ultra_constrained_allowed(void)::onceToken != -1)
      dispatch_once(&nw_path_is_ultra_constrained_allowed(void)::onceToken, &__block_literal_global_461);
    if ((nw_path_is_ultra_constrained_allowed(void)::is_allowed & 1) == 0)
    {
      __nwlog_obj();
      v125 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = p_super;
        _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_INFO, "%{public}s Fallback to ultra constrained interface %{public}@ not allowed by parameters", buf, 0x16u);
      }
      goto LABEL_258;
    }
  }
  if (nw_interface_get_type(p_super) == nw_interface_type_cellular
    && (nw_parameters_get_prohibit_cellular(v120[2])
     || !*((_BYTE *)v233 + 24)
     && !*((_BYTE *)v237 + 24)
     && nw_parameters_get_no_cellular_fallback(v120[2])))
  {
    __nwlog_obj();
    v125 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = p_super;
      _os_log_impl(&dword_182FBE000, v125, OS_LOG_TYPE_INFO, "%{public}s Fallback to cellular interface %{public}@ prohibited by parameters", buf, 0x16u);
    }
LABEL_258:

    v132 = (void *)v217[3];
    if (v132)
    {
      free(v132);
      v217[3] = 0;
    }

    goto LABEL_350;
  }
  v130 = v209[14];
  v209[14] = p_super;
LABEL_275:

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v133 = (id)gLogObj;
  if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
  {
    v134 = *((_DWORD *)v209 + 93);
    v135 = v209[14];
    v136 = "";
    if (*((_BYTE *)v245 + 24))
      v137 = ", weak";
    else
      v137 = "";
    if (*((_BYTE *)v237 + 24))
      v138 = ", forced";
    else
      v138 = "";
    if (*((_BYTE *)v233 + 24))
      v136 = ", preferred";
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v134;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v135;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v137;
    *(_WORD *)&buf[38] = 2082;
    *(_QWORD *)&buf[40] = v138;
    v250 = 2082;
    v251 = v136;
    _os_log_impl(&dword_182FBE000, v133, OS_LOG_TYPE_DEBUG, "%{public}s Fallback generation %u index %@%{public}s%{public}s%{public}s", buf, 0x3Au);
  }

  v139 = (const unsigned __int8 *)v217[3];
  if (v139 && !uuid_is_null(v139))
    *(_OWORD *)(v209 + 19) = *(_OWORD *)v217[3];
  v140 = (const char *)v225[3];
  if (v140 && v221[3])
  {
    v141 = v209[21];
    v142 = v209[22];
    if (!v141)
    {
      if (v142)
        goto LABEL_294;
      goto LABEL_345;
    }
    if (!v142)
    {
LABEL_294:
      __nwlog_obj();
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      v144 = v209[22];
      if (v209[21])
        v145 = "non";
      else
        v145 = "";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&buf[12] = 2082;
      if (v144)
        v146 = "non";
      else
        v146 = "";
      *(_QWORD *)&buf[14] = v145;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v146;
      v197 = (size_t *)buf;
      v147 = (char *)_os_log_send_and_compose_impl();

      v211 = OS_LOG_TYPE_ERROR;
      v210 = 0;
      if (!__nwlog_fault(v147, &v211, &v210))
        goto LABEL_343;
      if (v211 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v148 = objc_claimAutoreleasedReturnValue();
        v149 = v211;
        if (os_log_type_enabled(v148, v211))
        {
          if (v209[21])
            v150 = "non";
          else
            v150 = "";
          if (v209[22])
            v151 = "non";
          else
            v151 = "";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v150;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v151;
          _os_log_impl(&dword_182FBE000, v148, v149, "%{public}s Fallback agents are in unexpected state (domains %{public}snull, types %{public}snull)", buf, 0x20u);
        }
        goto LABEL_342;
      }
      if (v210)
      {
        v152 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v148 = objc_claimAutoreleasedReturnValue();
        v153 = v211;
        v154 = os_log_type_enabled(v148, v211);
        if (v152)
        {
          if (v154)
          {
            if (v209[21])
              v155 = "non";
            else
              v155 = "";
            if (v209[22])
              v156 = "non";
            else
              v156 = "";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v155;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v156;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v152;
            _os_log_impl(&dword_182FBE000, v148, v153, "%{public}s Fallback agents are in unexpected state (domains %{public}snull, types %{public}snull), dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v152);
LABEL_343:
          if (v147)
            free(v147);
LABEL_345:
          v162 = xpc_array_create(0, 0);
          v163 = v209[21];
          v209[21] = v162;

          v164 = xpc_array_create(0, 0);
          v165 = v209[22];
          v209[22] = v164;

          v141 = v209[21];
          v140 = (const char *)v225[3];
          goto LABEL_346;
        }
        if (v154)
        {
          if (v209[21])
            v160 = "non";
          else
            v160 = "";
          if (v209[22])
            v161 = "non";
          else
            v161 = "";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v160;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v161;
          _os_log_impl(&dword_182FBE000, v148, v153, "%{public}s Fallback agents are in unexpected state (domains %{public}snull, types %{public}snull), no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v148 = objc_claimAutoreleasedReturnValue();
        v157 = v211;
        if (os_log_type_enabled(v148, v211))
        {
          if (v209[21])
            v158 = "non";
          else
            v158 = "";
          if (v209[22])
            v159 = "non";
          else
            v159 = "";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_path_snapshot_fallback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v158;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v159;
          _os_log_impl(&dword_182FBE000, v148, v157, "%{public}s Fallback agents are in unexpected state (domains %{public}snull, types %{public}snull), backtrace limit exceeded", buf, 0x20u);
        }
      }
LABEL_342:

      goto LABEL_343;
    }
LABEL_346:
    xpc_array_set_string(v141, 0xFFFFFFFFFFFFFFFFLL, v140);
    xpc_array_set_string(v209[22], 0xFFFFFFFFFFFFFFFFLL, (const char *)v221[3]);
  }
  v166 = *((_BYTE *)v120 + 473) & 0xFE | *((_BYTE *)v245 + 24);
  *((_BYTE *)v120 + 473) = v166;
  v167 = v166 & 0xFD | (2 * *((_BYTE *)p_type + 24));
  *((_BYTE *)v120 + 473) = v167;
  v168 = v167 & 0xFB | (4 * *((_BYTE *)v237 + 24));
  *((_BYTE *)v120 + 473) = v168;
  *((_BYTE *)v120 + 473) = v168 & 0xF7 | (8 * *((_BYTE *)v233 + 24));
LABEL_348:
  v169 = (void *)v217[3];
  if (v169)
  {
    free(v169);
    v217[3] = 0;
  }
LABEL_350:

  _Block_object_dispose(&v212, 8);
  _Block_object_dispose(&v216, 8);
  _Block_object_dispose(&v220, 8);
  _Block_object_dispose(&v224, 8);
  _Block_object_dispose(&v228, 8);
  _Block_object_dispose(&v232, 8);
  _Block_object_dispose(&v236, 8);
  _Block_object_dispose(&type, 8);
  _Block_object_dispose(&v244, 8);
  _Block_object_dispose(out, 8);
LABEL_351:

  v170 = v120;
  if (nw_path_endpoint_is_always_satisfied(v170->endpoint))
  {
    v176 = 0;
    v177 = "Endpoint is always satisfied";
    v178 = 1;
    goto LABEL_358;
  }
  if (nw_parameters_are_valid(v170->parameters))
  {
    if (nw_path_network_is_satisfied_update_reason(v170, 1))
    {
      LOBYTE(length[0]) = 0;
      if (nw_path_agents_are_satisfied_update_reason(v170, 1, 0, 0, (BOOL *)length))
      {
        v170->status = 1;
        nw_path_set_reason(v170, 0, "Path is satisfied", v179, v180, v181, v182, v183, (char)v197);
        goto LABEL_359;
      }
      v196 = LOBYTE(length[0]) == 0;
LABEL_381:
      if (v196)
        v195 = 2;
      else
        v195 = 3;
    }
    else
    {
      LOBYTE(length[0]) = 0;
      if (v170->reason == 3)
      {
        updated = nw_path_agents_are_satisfied_update_reason(v170, 1, 1, 1, (BOOL *)length);
        v195 = 2;
        if (!updated)
        {
          v196 = LOBYTE(length[0]) == 0;
          goto LABEL_381;
        }
      }
      else
      {
        v195 = 2;
      }
    }
    v170->status = v195;
  }
  else
  {
    v178 = 0;
    v177 = "Parameters are invalid";
    v176 = 14;
LABEL_358:
    v170->status = v178;
    nw_path_set_reason(v170, v176, v177, v171, v172, v173, v174, v175, (char)v197);
  }
LABEL_359:

  v184 = v170;
  v185 = v184;
  if (v184->policy_result.routing_result == 4)
  {
    v186 = v184->policy_result.routing_result_parameter.tunnel_interface_index == 0xFFFFFFF;

    if (v186)
    {
      buf[0] = 0;
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v187 = (id)nw_context_copy_implicit_context::implicit_context;
      bridged_flow_director = nw_path_create_bridged_flow_director(v187, buf);

      if (buf[0])
        v189 = bridged_flow_director;
      else
        v189 = 0;
      if (v189 == 1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v190 = (id)gLogObj;
        if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(length[0]) = 136446210;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_snapshot_path";
          v191 = "%{public}s In-process flow divert director created due to path result";
          v192 = v190;
          v193 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_376;
        }
        goto LABEL_377;
      }
      if ((bridged_flow_director & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v190 = (id)gLogObj;
        if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
        {
          LODWORD(length[0]) = 136446210;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_snapshot_path";
          v191 = "%{public}s Failed to create in-process flow divert director due to path result";
          v192 = v190;
          v193 = OS_LOG_TYPE_ERROR;
LABEL_376:
          _os_log_impl(&dword_182FBE000, v192, v193, v191, (uint8_t *)length, 0xCu);
        }
LABEL_377:

      }
    }
  }
  else
  {

  }
}

void sub_1839C5264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  char a71;
  void *v71;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);

  _Unwind_Resume(a1);
}

id nw_path_copy_dictionary_for_agent_with_generation(void *a1, const unsigned __int8 *a2, unsigned int a3, id *a4)
{
  id v7;
  uint64_t globals_for_path;
  xpc_object_t v9;
  void *v10;
  xpc_object_t v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int uint64;
  int v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  xpc_object_t v26;
  id v27;
  unsigned int *data;
  unsigned int *v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  xpc_object_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  char *backtrace_string;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t *v49;
  os_log_type_t v50;
  os_unfair_lock_s *lock;
  uint64_t value;
  id v53;
  void *v54;
  xpc_object_t xdict;
  _QWORD v56[4];
  id v57;
  id v58;
  id v59;
  _QWORD applier[4];
  id v61;
  id v62;
  uint64_t v63;
  char v64;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v67;
  _BYTE v68[14];
  __int16 v69;
  int v70;
  __int16 v71;
  unsigned int v72;
  char out[40];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  v54 = v7;
  globals_for_path = nw_context_get_globals_for_path(v7);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  if (*(_QWORD *)(globals_for_path + 64))
  {
    if (*(_QWORD *)(globals_for_path + 72))
      goto LABEL_6;
  }
  else
  {
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = *(void **)(globals_for_path + 64);
    *(_QWORD *)(globals_for_path + 64) = v9;

    if (*(_QWORD *)(globals_for_path + 72))
      goto LABEL_6;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = *(void **)(globals_for_path + 72);
  *(_QWORD *)(globals_for_path + 72) = v11;

LABEL_6:
  lock = (os_unfair_lock_s *)(globals_for_path + 124);
  if (!*(_QWORD *)(globals_for_path + 80))
  {
    v13 = nw_dictionary_create();
    v14 = *(void **)(globals_for_path + 80);
    *(_QWORD *)(globals_for_path + 80) = v13;

  }
  v15 = *(id *)(globals_for_path + 64);
  xdict = *(id *)(globals_for_path + 72);
  v53 = *(id *)(globals_for_path + 80);
  v16 = mach_continuous_time();
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  value = v17;
  memset(out, 0, 37);
  uuid_unparse(a2, out);
  xpc_dictionary_get_value(v15, out);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (a3 == -1 || !v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
    v67 = 1042;
    *(_DWORD *)v68 = 16;
    *(_WORD *)&v68[4] = 2098;
    *(_QWORD *)&v68[6] = a2;
    v23 = "%{public}s Agent for %{public,uuid_t}.16P cache miss";
    v24 = v22;
    v25 = 28;
LABEL_19:
    _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, v23, buf, v25);
LABEL_20:

    nw_path_shared_necp_fd(v7);
    v26 = nw_network_agent_copy_dictionary_from_necp();
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v31 = (id)gLogObj;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        v67 = 1042;
        *(_DWORD *)v68 = 16;
        *(_WORD *)&v68[4] = 2098;
        *(_QWORD *)&v68[6] = a2;
        _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s Unable to lookup agent %{public,uuid_t}.16P dictionary from necp", buf, 0x1Cu);
      }
      v27 = 0;
      goto LABEL_42;
    }
    v27 = v26;
    type = OS_LOG_TYPE_INFO;
    *(_QWORD *)buf = 0;
    data = (unsigned int *)xpc_dictionary_get_data(v26, "data", (size_t *)buf);
    if (!data || *(_QWORD *)buf < 0xD8uLL || (v29 = data, v30 = data[53], *(_QWORD *)buf != v30 + 216))
    {
      v31 = 0;
      goto LABEL_33;
    }
    if (!strcmp((const char *)data + 16, "Network"))
    {
      v31 = 0;
      if (!strcmp((const char *)v29 + 48, "Proxy") && (_DWORD)v30)
      {
        v49 = nw_proxy_config_create_with_agent_data_extended((uint64_t)(v29 + 54), v30, v29, &type);
        v31 = v49;
        if (v49 && type)
        {
          nw_proxy_config_set_generation(v49, a3);
          nw_dictionary_set_value((uint64_t)v53, out, v31);
          v29 = nw_network_agent_truncate_agent_data_in_dictionary(v27);
        }
        if (a4)
          objc_storeStrong(a4, v31);
        if (!v29)
          goto LABEL_33;
      }
    }
    else
    {
      v31 = 0;
    }
    if (!strcmp((const char *)v29 + 16, "Network")
      && !strcmp((const char *)v29 + 48, "Proxy")
      && v29[53]
      && type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        v67 = 1042;
        *(_DWORD *)v68 = 16;
        *(_WORD *)&v68[4] = 2098;
        *(_QWORD *)&v68[6] = a2;
        v33 = "%{public}s Skipping saving agent %{public,uuid_t}.16P to the cache due to incomplete proxy config";
LABEL_35:
        _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, v33, buf, 0x1Cu);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
LABEL_33:
    xpc_dictionary_set_uint64(v27, "generation", a3);
    xpc_dictionary_set_uint64(xdict, out, value);
    xpc_dictionary_set_value(v15, out, v27);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = (id)gLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
      v67 = 1042;
      *(_DWORD *)v68 = 16;
      *(_WORD *)&v68[4] = 2098;
      *(_QWORD *)&v68[6] = a2;
      v33 = "%{public}s Saved agent %{public,uuid_t}.16P to the cache";
      goto LABEL_35;
    }
LABEL_36:

    goto LABEL_42;
  }
  uint64 = xpc_dictionary_get_uint64(v18, "generation");
  if (a3)
  {
    v21 = uint64;
    if (uint64 != a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
      v67 = 1042;
      *(_DWORD *)v68 = 16;
      *(_WORD *)&v68[4] = 2098;
      *(_QWORD *)&v68[6] = a2;
      v69 = 1024;
      v70 = v21;
      v71 = 1024;
      v72 = a3;
      v23 = "%{public}s Agent for %{public,uuid_t}.16P has new generation (%u != %u)";
      v24 = v22;
      v25 = 40;
      goto LABEL_19;
    }
  }
  v27 = v19;
  xpc_dictionary_set_uint64(xdict, out, value);
  if (!a4)
    goto LABEL_43;
  v34 = nw_dictionary_copy_value((uint64_t)v53, (uint64_t)out);
  v31 = *a4;
  *a4 = v34;
LABEL_42:

LABEL_43:
  if (xpc_dictionary_get_count(v15) >= 0x21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = (id)gLogObj;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
      v67 = 1024;
      *(_DWORD *)v68 = 32;
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s Agent cache hit limit (%u), purging all agents not used recently", buf, 0x12u);
    }

    v36 = xpc_array_create(0, 0);
    if (v36)
    {
      v37 = MEMORY[0x1E0C809B0];
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke;
      applier[3] = &unk_1E14A92B8;
      v38 = xdict;
      v61 = v38;
      v63 = value;
      v39 = v36;
      v62 = v39;
      xpc_dictionary_apply(v15, applier);
      v56[0] = v37;
      v56[1] = 3221225472;
      v56[2] = ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke_2;
      v56[3] = &unk_1E14A92E0;
      v57 = v15;
      v58 = v38;
      v59 = v53;
      xpc_array_apply(v39, v56);

LABEL_55:
      goto LABEL_56;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
    v41 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (!__nwlog_fault(v41, &type, &v64))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v42 = (id)gLogObj;
      v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s xpc_array_create failed", buf, 0xCu);
      }
    }
    else
    {
      if (v64)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v46 = (id)gLogObj;
        v47 = type;
        v48 = os_log_type_enabled(v46, type);
        if (backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
            v67 = 2082;
            *(_QWORD *)v68 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v41)
            goto LABEL_55;
          goto LABEL_54;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
        }

LABEL_53:
        if (!v41)
          goto LABEL_55;
LABEL_54:
        free(v41);
        goto LABEL_55;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v42 = (id)gLogObj;
      v50 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        _os_log_impl(&dword_182FBE000, v42, v50, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_53;
  }
LABEL_56:
  os_unfair_lock_unlock(lock);

  return v27;
}

void sub_1839C5E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

id nw_path_copy_proxy_config_for_agent_uuid(const unsigned __int8 *a1, unsigned int a2, void *a3)
{
  id v5;
  id v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!uuid_is_null(a1))
  {
    *(_QWORD *)buf = 0;

    v6 = *(id *)buf;
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null (!uuid_is_null(agent_uuid))", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null (!uuid_is_null(agent_uuid)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null (!uuid_is_null(agent_uuid)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null (!uuid_is_null(agent_uuid)), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_3:

  return v6;
}

void sub_1839C6184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_path_snapshot_agentsP18NWConcrete_nw_path_block_invoke(uint64_t a1, int a2, void *object)
{
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192), object);
  return 1;
}

uint64_t ___ZL22nw_path_snapshot_flowsP18NWConcrete_nw_path_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void ***v11;
  void ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void ***v18;
  id v19;
  id v20;
  void *v21;

  v4 = a3;
  v5 = (void ***)*((_QWORD *)v4 + 6);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(v6 + 56);
    if (v7)
    {
      v8 = nw_array_create();
      std::vector<nw_object_wrapper_t>::reserve(v8 + 16, v5[3] - v5[2] + ((uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 3));
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>((int64_t *)(v8 + 16), *(_QWORD *)(v8 + 16), *(void ***)(v7 + 16), *(void ***)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 3);
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>((int64_t *)(v8 + 16), *(_QWORD *)(v8 + 24), v5[2], v5[3], v5[3] - v5[2]);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void **)(v9 + 56);
      *(_QWORD *)(v9 + 56) = v8;
    }
    else
    {
      v11 = v5;
      v10 = *(void **)(v6 + 56);
      *(_QWORD *)(v6 + 56) = v11;
    }

  }
  v12 = (void ***)*((_QWORD *)v4 + 7);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(v13 + 64);
    if (v14)
    {
      v15 = nw_array_create();
      std::vector<nw_object_wrapper_t>::reserve(v15 + 16, v12[3] - v12[2] + ((uint64_t)(*(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 16)) >> 3));
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>((int64_t *)(v15 + 16), *(_QWORD *)(v15 + 16), *(void ***)(v14 + 16), *(void ***)(v14 + 24), (uint64_t)(*(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 16)) >> 3);
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>((int64_t *)(v15 + 16), *(_QWORD *)(v15 + 24), v12[2], v12[3], v12[3] - v12[2]);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(void **)(v16 + 64);
      *(_QWORD *)(v16 + 64) = v15;
    }
    else
    {
      v18 = v12;
      v17 = *(void **)(v13 + 64);
      *(_QWORD *)(v13 + 64) = v18;
    }

  }
  if (!uuid_is_null((const unsigned __int8 *)v4 + 84))
  {
    v19 = nw_parameters_copy_context(*(void **)(*(_QWORD *)(a1 + 32) + 16));
    v20 = nw_path_copy_dictionary_for_agent_with_generation(v19, (const unsigned __int8 *)v4 + 84, *((_DWORD *)v4 + 20), 0);
    v21 = (void *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = v20;

  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 386))
    *((_BYTE *)v4 + 186) |= 8u;

  return 1;
}

void sub_1839C638C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL25nw_path_snapshot_fallbackP18NWConcrete_nw_path_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  unsigned int *data;
  _OWORD *v7;
  void *v8;
  uint64_t v9;
  _BOOL8 result;
  NSObject *v11;
  void *v12;
  _BYTE length[12];
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  *(_QWORD *)length = 0;
  if (!v4
    || (data = (unsigned int *)xpc_dictionary_get_data(v4, "data", (size_t *)length)) == 0
    || *(_QWORD *)length < 0xD8uLL
    || (v7 = data, *(_QWORD *)length != data[53] + 216)
    || (data[52] & 2) == 0
    || (nw_path_get_interface_index(*(void **)(a1 + 32)),
        (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = ne_session_agent_get_advisory()) == 0)
    || !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
    && (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)
     || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24)))
  {
    v9 = 1;
    goto LABEL_13;
  }
  v8 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v8)
  {
LABEL_9:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v8;
    *(_OWORD *)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = *v7;
    v9 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = xpc_dictionary_get_uint64(v5, "generation");
LABEL_13:

    return v9;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)length = 136446722;
  *(_QWORD *)&length[4] = "strict_calloc";
  v14 = 2048;
  v15 = 1;
  v16 = 2048;
  v17 = 16;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v8 = 0;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1839C6628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_network_is_satisfied_update_reason(NWConcrete_nw_path *a1, _BOOL8 a2)
{
  NWConcrete_nw_path *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NWConcrete_nw_path *v9;
  unsigned int routing_result;
  const char *v11;
  int v12;
  void **v13;
  void **v14;
  void *v15;
  _DWORD *v16;
  int v17;
  void *v18;
  _DWORD *v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  size_t count;
  id v27;
  id v28;
  void *v29;
  size_t v30;
  id v31;
  void **v32;
  id v33;
  void *v34;
  _DWORD *v35;
  int v36;
  void *v37;
  _DWORD *v38;
  int v39;
  id v40;
  NSObject *v41;
  int isa_high;
  nw_interface_type_t required_interface_type;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  int required_interface_subtype;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  int subtype;
  void *v59;
  const char *v60;
  nw_interface_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  int v74;
  void *v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  char *backtrace_string;
  os_log_type_t v81;
  _BOOL4 v82;
  os_log_type_t v83;
  char v84;
  _QWORD v85[4];
  id v86;
  void **v87;
  uint64_t *v88;
  BOOL v89;
  _QWORD v90[4];
  id v91;
  void **v92;
  uint64_t *v93;
  BOOL v94;
  _QWORD v95[4];
  void **v96;
  uint64_t *v97;
  BOOL v98;
  _QWORD applier[4];
  void **v100;
  uint64_t *v101;
  BOOL v102;
  _QWORD v103[4];
  void **v104;
  uint64_t *v105;
  BOOL v106;
  os_log_type_t type[8];
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t, void *);
  void *v110;
  void **v111;
  uint64_t *v112;
  int v113;
  int v114;
  BOOL v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char v119;
  _BYTE buf[24];
  void *v121;
  void **v122;
  uint64_t *v123;
  int v124;
  int v125;
  BOOL v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v9 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_network_is_satisfied_update_reason";
    v77 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (__nwlog_fault(v77, type, v90))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v79 = type[0];
        if (os_log_type_enabled(v78, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_network_is_satisfied_update_reason";
          _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (LOBYTE(v90[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v81 = type[0];
        v82 = os_log_type_enabled(v78, type[0]);
        if (backtrace_string)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_network_is_satisfied_update_reason";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v78, v81, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_141;
        }
        if (v82)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_network_is_satisfied_update_reason";
          _os_log_impl(&dword_182FBE000, v78, v81, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v83 = type[0];
        if (os_log_type_enabled(v78, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_network_is_satisfied_update_reason";
          _os_log_impl(&dword_182FBE000, v78, v83, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_141:
    if (v77)
      free(v77);
    goto LABEL_7;
  }
  routing_result = v3->policy_result.routing_result;
  if (routing_result == 4)
    goto LABEL_12;
  if (routing_result != 3)
  {
    if (!nw_path_uses_nexus_internal(v3, 1)
      && (*((_BYTE *)v9 + 474) & 4) == 0
      && !v9->policy_result.routed_interface_index
      && (nw_path_may_span_multiple_interfaces(v9) & 1) == 0)
    {
      if (!a2)
        goto LABEL_124;
      v11 = "No network route";
      v12 = 3;
      goto LABEL_6;
    }
LABEL_12:
    v13 = v9;
    v14 = v13;
    v15 = v13[12];
    if (v15)
    {
      v16 = v15;
      v17 = v16[24];

      v18 = v14[13];
      if (v18)
      {
LABEL_14:
        v19 = v18;
        v20 = v19[24];

        goto LABEL_17;
      }
    }
    else
    {
      v17 = 0;
      v18 = v13[13];
      if (v18)
        goto LABEL_14;
    }
    v20 = 0;
LABEL_17:
    v116 = 0;
    v117 = &v116;
    v118 = 0x2020000000;
    v119 = 1;
    if ((nw_path_may_span_multiple_interfaces(v14) & 1) != 0)
    {
LABEL_18:
      v21 = nw_parameters_copy_prohibited_netagent_uuids(v14[2]);
      if (v21)
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_4;
        applier[3] = &unk_1E14A90B0;
        v100 = v14;
        v101 = &v116;
        v102 = a2;
        xpc_array_apply(v21, applier);

      }
      if (*((_BYTE *)v117 + 24))
      {
        v22 = nw_parameters_copy_required_netagent_uuids(v14[2]);
        if (v22)
        {
          v95[0] = MEMORY[0x1E0C809B0];
          v95[1] = 3221225472;
          v95[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_5;
          v95[3] = &unk_1E14A90B0;
          v96 = v14;
          v97 = &v116;
          v98 = a2;
          xpc_array_apply(v22, v95);

        }
        if (*((_BYTE *)v117 + 24))
        {
          v23 = nw_parameters_copy_prohibited_netagent_domains(v14[2]);
          v24 = nw_parameters_copy_prohibited_netagent_types(v14[2]);
          v25 = v24;
          if (v23)
          {
            if (v24)
            {
              count = xpc_array_get_count(v23);
              if (count == xpc_array_get_count(v25))
              {
                v90[0] = MEMORY[0x1E0C809B0];
                v90[1] = 3221225472;
                v90[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_6;
                v90[3] = &unk_1E14A9100;
                v91 = v25;
                v94 = a2;
                v92 = v14;
                v93 = &v116;
                xpc_array_apply(v23, v90);

              }
            }
          }
          if (*((_BYTE *)v117 + 24))
          {
            v27 = nw_parameters_copy_required_netagent_domains(v14[2]);
            v28 = nw_parameters_copy_required_netagent_types(v14[2]);
            v29 = v28;
            if (v27)
            {
              if (v28)
              {
                v30 = xpc_array_get_count(v27);
                if (v30 == xpc_array_get_count(v29))
                {
                  v85[0] = MEMORY[0x1E0C809B0];
                  v85[1] = 3221225472;
                  v85[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_8;
                  v85[3] = &unk_1E14A9100;
                  v86 = v29;
                  v87 = v14;
                  v88 = &v116;
                  v89 = a2;
                  xpc_array_apply(v27, v85);

                }
              }
            }
            a2 = *((_BYTE *)v117 + 24) != 0;

          }
          else
          {
            a2 = 0;
          }

        }
        else
        {
          a2 = 0;
        }

      }
      else
      {
        a2 = 0;
      }

      goto LABEL_123;
    }
    if (nw_parameters_has_prohibited_interface_types(v14[2]))
    {
      v31 = nw_parameters_copy_prohibited_interface_types(v14[2]);
      if (v31)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke;
        v121 = &unk_1E14A9088;
        v32 = v14;
        v124 = v17;
        v125 = v20;
        v122 = v32;
        v123 = &v116;
        v126 = a2;
        xpc_array_apply(v31, buf);

      }
    }
    if (!*((_BYTE *)v117 + 24))
      goto LABEL_122;
    if (!nw_parameters_has_prohibited_interface_subtypes(v14[2]))
    {
LABEL_54:
      if (!*((_BYTE *)v117 + 24))
        goto LABEL_122;
      if (nw_parameters_has_prohibited_interfaces(v14[2]))
      {
        v40 = nw_parameters_copy_prohibited_interfaces(v14[2]);
        if (v40)
        {
          v103[0] = MEMORY[0x1E0C809B0];
          v103[1] = 3221225472;
          v103[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_3;
          v103[3] = &unk_1E14A90B0;
          v104 = v14;
          v105 = &v116;
          v106 = a2;
          xpc_array_apply(v40, v103);

        }
      }
      if (!*((_BYTE *)v117 + 24))
        goto LABEL_122;
      v41 = v14;
      if (nw_parameters_get_required_interface_index(v14[2]) && v9->policy_result.routing_result == 6)
      {
        isa_high = HIDWORD(v41[33].isa);
        LOBYTE(isa_high) = isa_high == nw_parameters_get_required_interface_index(v14[2]);

        if ((isa_high & 1) == 0)
        {
LABEL_95:
          if (nw_parameters_get_prohibit_expensive((nw_parameters_t)v14[2]) && nw_path_is_expensive(v41))
          {
            if (a2)
            {
              v73 = "Expensive path prohibited";
LABEL_112:
              v74 = 5;
              goto LABEL_113;
            }
LABEL_122:
            a2 = 0;
            goto LABEL_123;
          }
          if (nw_parameters_get_prohibit_constrained((nw_parameters_t)v14[2]) && nw_path_is_constrained(v41))
          {
            if (a2)
            {
              v73 = "Constrained path prohibited";
              v74 = 26;
LABEL_113:
              nw_path_set_reason(v41, v74, v73, v68, v69, v70, v71, v72, v84);
              goto LABEL_122;
            }
            goto LABEL_122;
          }
          if ((nw_parameters_get_allow_ultra_constrained(v14[2]) & 1) == 0
            && nw_path_is_ultra_constrained(v41))
          {
            if (nw_path_is_ultra_constrained_allowed(void)::onceToken != -1)
              dispatch_once(&nw_path_is_ultra_constrained_allowed(void)::onceToken, &__block_literal_global_461);
            if ((nw_path_is_ultra_constrained_allowed(void)::is_allowed & 1) == 0)
            {
              if (!a2)
                goto LABEL_122;
              v73 = "Ultra constrained path not allowed";
              v74 = 31;
              goto LABEL_113;
            }
          }
          if (!nw_parameters_get_prohibit_roaming(v14[2]) || !nw_path_is_roaming(v41))
            goto LABEL_18;
          if (a2)
          {
            v73 = "Roaming path prohibited";
            goto LABEL_112;
          }
LABEL_123:
          _Block_object_dispose(&v116, 8);

          goto LABEL_124;
        }
      }
      else
      {

      }
      required_interface_type = nw_parameters_get_required_interface_type((nw_parameters_t)v14[2]);
      if ((required_interface_type & 0xFFFFFFFB) != 0
        && required_interface_type != v17
        && required_interface_type != v20)
      {
        if (a2)
        {
          if (required_interface_type > nw_interface_type_loopback)
            v49 = "unknown";
          else
            v49 = off_1E14AD0B0[required_interface_type];
          nw_path_set_reason(v41, 7, "Interface type %s is required by parameters", v44, v45, v46, v47, v48, (char)v49);
          goto LABEL_122;
        }
        goto LABEL_123;
      }
      required_interface_subtype = nw_parameters_get_required_interface_subtype(v14[2]);
      if (!required_interface_subtype)
        goto LABEL_89;
      v56 = required_interface_subtype;
      v57 = v14[12];
      if (v57)
        subtype = nw_interface_get_subtype(v57);
      else
        subtype = 0;
      v59 = v14[13];
      if (v59)
        LODWORD(v59) = nw_interface_get_subtype(v59);
      if (v56 == subtype || v56 == (_DWORD)v59)
      {
LABEL_89:
        v61 = nw_parameters_copy_required_interface((nw_parameters_t)v14[2]);
        if (v61)
        {
          if (!nw_interface_shallow_compare(v14[12], v61) && !nw_interface_shallow_compare(v14[13], v61))
          {
            *((_BYTE *)v117 + 24) = 0;
            if (a2)
              nw_path_set_reason(v41, 9, "Interface %s[%u] is required by parameters", v62, v63, v64, v65, v66, (_BYTE)v61 + 104);
          }
        }
        v67 = *((_BYTE *)v117 + 24) == 0;

        if (v67)
          goto LABEL_122;
        goto LABEL_95;
      }
      if (!a2)
        goto LABEL_123;
      if (v56 <= 1001)
      {
        if (v56 == 1001)
        {
          v60 = "wifi_infrastructure";
          goto LABEL_121;
        }
      }
      else
      {
        switch(v56)
        {
          case 1002:
            v60 = "wifi_awdl";
            goto LABEL_121;
          case 4001:
            v60 = "coprocessor";
            goto LABEL_121;
          case 5001:
            v60 = "companion";
LABEL_121:
            nw_path_set_reason(v41, 7, "Interface subtype %s is required by parameters", v51, v52, v53, v54, v55, (char)v60);
            goto LABEL_122;
        }
      }
      v60 = "unknown";
      goto LABEL_121;
    }
    v33 = nw_parameters_copy_prohibited_interface_subtypes(v14[2]);
    if (!v33)
    {
LABEL_53:

      goto LABEL_54;
    }
    v34 = v14[12];
    if (v34)
    {
      v35 = v34;
      v36 = v35[25];

      v37 = v14[13];
      if (v37)
      {
LABEL_43:
        v38 = v37;
        v39 = v38[25];

LABEL_52:
        *(_QWORD *)type = MEMORY[0x1E0C809B0];
        v108 = 3221225472;
        v109 = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_2;
        v110 = &unk_1E14A9088;
        v113 = v36;
        v114 = v39;
        v112 = &v116;
        v115 = a2;
        v111 = v14;
        xpc_array_apply(v33, type);

        goto LABEL_53;
      }
    }
    else
    {
      v36 = 0;
      v37 = v14[13];
      if (v37)
        goto LABEL_43;
    }
    v39 = 0;
    goto LABEL_52;
  }
  if (a2)
  {
    v11 = "Path was denied by NECP policy";
    v12 = 2;
LABEL_6:
    nw_path_set_reason(v9, v12, v11, v4, v5, v6, v7, v8, v84);
  }
LABEL_7:
  a2 = 0;
LABEL_124:

  return a2;
}

