uint64_t WebKit::WebNotificationManagerProxy::showImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;

  v8 = *a3;
  v11 = *(_QWORD *)(*a3 + 16);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID const&>((uint64_t *)(a1 + 40), &v11, (_OWORD *)(v8 + 176), (uint64_t)v10);
  WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>&>((uint64_t *)(a1 + 48), (_QWORD *)(*a3 + 176), a3, (uint64_t)v10);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *a3, a4);
}

uint64_t WebKit::WebNotificationManagerProxy::showPersistent(uint64_t a1, uint64_t a2, WTF::ThreadSafeWeakPtrControlBlock **a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 208);
  v11 = *(_QWORD *)(v9 + 32);
  v12 = *(_QWORD *)(v9 + 40);
  v10 = (__int128 *)(v9 + 32);
  if (v11 | v12)
  {
    v19 = *v10;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    LOBYTE(v19) = 0;
  }
  v20 = v13;
  v14 = API::Object::newObject(0x150uLL, 80);
  v18 = WebKit::WebNotification::WebNotification(v14, a4, 0, &v19, a3);
  v15 = WebKit::WebNotificationManagerProxy::showImpl(a1, 0, &v18, a5);
  v16 = v18;
  v18 = 0;
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  return v15;
}

void WebKit::WebNotificationManagerProxy::cancel(WebKit::WebNotificationManagerProxy *this, WebKit::WebPageProxy *a2, const WTF::UUID *a3)
{
  uint64_t v5;
  WebKit::WebPageProxy *v6;

  v5 = WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 6, (uint64_t *)a3);
  if (v5)
  {
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), v5);
    WebKit::WebNotificationManagerProxy::didDestroyNotification(this, v6, a3);
  }
}

void WebKit::WebNotificationManagerProxy::didDestroyNotification(WebKit::WebNotificationManagerProxy *this, WebKit::WebPageProxy *a2, const WTF::UUID *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (uint64_t *)((char *)this + 48);
  v5 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 6, (uint64_t *)a3);
  WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::take(v4, v5, &v11);
  if (v11)
  {
    v10 = *(_QWORD *)(v11 + 16);
    v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 5, &v10);
    v7 = *((_QWORD *)this + 5);
    if (v7)
    {
      v8 = (_QWORD *)(v7 + 32 * *(unsigned int *)(v7 - 4));
      if (v8 == v6)
      {
LABEL_9:
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), v11);
        v9 = v11;
        v11 = 0;
        if (v9)
          CFRelease(*(CFTypeRef *)(v9 + 8));
        return;
      }
    }
    else
    {
      if (!v6)
        goto LABEL_9;
      v8 = 0;
    }
    if (v8 != v6)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)this + 5, v6);
    goto LABEL_9;
  }
}

uint64_t *WebKit::WebNotificationManagerProxy::providerDidShowNotification(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  v18 = a2;
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v18);
  v4 = *(uint64_t **)(a1 + 40);
  if (v4)
    v4 += 4 * *((unsigned int *)v4 - 1);
  if (v4 != result)
  {
    v5 = (uint64_t *)(a1 + 48);
    v6 = result + 2;
    result = (uint64_t *)WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v5, result + 2);
    if (result)
    {
      if (result[40])
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)result[40], result[41], &v17);
        result = v17;
        if (v17)
        {
          v19 = v6;
          result = (uint64_t *)IPC::Connection::send<Messages::WebNotificationManager::DidShowNotification>((uint64_t)v17, &v19, 0, 0, 0);
          v7 = (unsigned __int8 **)v17;
          v17 = 0;
          if (v7)
          {
            v8 = *v7;
            if (__ldaxr(*v7))
            {
              __clrex();
            }
            else if (!__stxr(1u, v8))
            {
              goto LABEL_12;
            }
            result = (uint64_t *)MEMORY[0x19AEABB3C](v8);
LABEL_12:
            v10 = *((_QWORD *)v8 + 1);
            v11 = v10 - 1;
            *((_QWORD *)v8 + 1) = v10 - 1;
            if (v10 == 1)
            {
              v16 = *((_QWORD *)v8 + 2);
              v13 = *((_QWORD *)v8 + 3);
              *((_QWORD *)v8 + 3) = 0;
              v12 = v16 == 0;
            }
            else
            {
              v12 = 0;
              v13 = 0;
            }
            v14 = __ldxr(v8);
            if (v14 == 1)
            {
              if (!__stlxr(0, v8))
              {
LABEL_19:
                if (!v11)
                {
                  v15 = WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v15 = off_1E34ACA48;
                  *(_QWORD *)(v15 + 8) = v8;
                  *(_QWORD *)(v15 + 16) = v13;
                  *(_BYTE *)(v15 + 24) = v12;
                  v19 = (uint64_t *)v15;
                  WTF::ensureOnMainRunLoop();
                  result = v19;
                  v19 = 0;
                  if (result)
                    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                }
                return result;
              }
            }
            else
            {
              __clrex();
            }
            result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
            goto LABEL_19;
          }
        }
      }
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebNotificationManager::DidShowNotification>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1831;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void WebKit::WebNotificationManagerProxy::providerDidClickNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit *v5;
  WebKit::WebNotification *v6;
  uint64_t v7;

  v7 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v7);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v4 += 32 * *(unsigned int *)(v4 - 4);
  if (v4 != v3)
  {
    v5 = (WebKit *)WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(a1 + 48), (uint64_t *)(v3 + 16));
    WebKit::dispatchDidClickNotification(v5, v6);
  }
}

void WebKit::dispatchDidClickNotification(WebKit *this, WebKit::WebNotification *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WebKit::WebsiteDataStore *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  _BYTE buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!this)
    return;
  v3 = *((_QWORD *)this + 16);
  if (!v3 || !*(_DWORD *)(v3 + 4))
  {
    v9 = (unsigned __int8 *)*((_QWORD *)this + 40);
    if (!v9)
      return;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v9, *((_QWORD *)this + 41), &v28);
    v10 = (uint64_t)v28;
    if (!v28)
      return;
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1828;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    *(_QWORD *)buf = v11;
    IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v11, (uint64_t *)this + 22);
    IPC::Connection::sendMessageImpl(v10, (uint64_t *)buf, 0, 0);
    v13 = *(IPC::Encoder **)buf;
    *(_QWORD *)buf = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
    v16 = v28;
    v28 = 0;
    if (!v16)
      return;
    v17 = *v16;
    if (__ldaxr(*v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEABB3C](v17);
LABEL_19:
    v21 = *((_QWORD *)v17 + 1);
    v22 = v21 - 1;
    *((_QWORD *)v17 + 1) = v21 - 1;
    if (v21 == 1)
    {
      v27 = *((_QWORD *)v17 + 2);
      v24 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v17 + 3) = 0;
      v23 = v27 == 0;
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_26;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_26:
    if (v22)
      return;
    v26 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v26 = off_1E34ACA48;
    *(_QWORD *)(v26 + 8) = v17;
    *(_QWORD *)(v26 + 16) = v24;
    *(_BYTE *)(v26 + 24) = v23;
    *(_QWORD *)buf = v26;
    WTF::ensureOnMainRunLoop();
    goto LABEL_6;
  }
  *(_QWORD *)buf = *((_QWORD *)this + 28);
  v4 = WebKit::allDataStores(this);
  v5 = (WebKit::WebsiteDataStore *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, buf);
  if (v5)
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(v5);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E34DEBA0;
    *(_QWORD *)buf = v7;
    WebKit::NetworkProcessProxy::processNotificationEvent(v6, (uint64_t)this + 32, 0, (uint64_t *)buf);
LABEL_6:
    v8 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return;
  }
  v19 = qword_1ECE714D8;
  if (os_log_type_enabled((os_log_t)qword_1ECE714D8, OS_LOG_TYPE_ERROR))
  {
    v20 = *((_QWORD *)this + 28);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v20;
    _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "WebsiteDataStore not found from sessionID %llu, dropping notification click", buf, 0xCu);
  }
}

void WebKit::WebNotificationManagerProxy::providerDidCloseNotifications(WebKit::WebNotificationManagerProxy *this, API::Array *a2)
{
  uint64_t v2;
  WTF *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WebKit *v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  WebKit::WebsiteDataStore *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 ***v27;
  unsigned __int8 **v28;
  NSObject *v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  WTF **v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  IPC::Encoder *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  unsigned __int8 **v72;
  WTF *v73;
  uint64_t v74;
  uint8_t buf[16];
  WTF *v76[2];
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v73 = 0;
  v74 = 0;
  v2 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v2)
    return;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = (uint64_t *)((char *)this + 40);
  v8 = (uint64_t *)((char *)this + 48);
  do
  {
    LOBYTE(v76[0]) = 0;
    v77 = 0;
    v9 = API::Array::at<API::UInt64>((uint64_t)a2, v6);
    v11 = v9;
    if (!v9)
    {
      if (v6 >= *((unsigned int *)a2 + 7))
        goto LABEL_98;
      v32 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v6);
      if (!v32 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32) != 8)
        goto LABEL_37;
      if (v6 >= *((unsigned int *)a2 + 7))
      {
        __break(0xC471u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(0xC471u);
        JUMPOUT(0x197456A14);
      }
      v33 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v6);
      if (!v33)
        goto LABEL_37;
      CFRetain(*(CFTypeRef *)(v33 + 8));
      if (*(_QWORD *)(v33 + 24) != 16)
      {
        CFRelease(*(CFTypeRef *)(v33 + 8));
        goto LABEL_37;
      }
      v34 = *(WTF ***)(v33 + 16);
      v36 = *v34;
      v35 = v34[1];
      v76[0] = v36;
      v76[1] = v35;
      if (!v77)
        v77 = 1;
      CFRelease(*(CFTypeRef *)(v33 + 8));
      if (!v77)
        goto LABEL_97;
LABEL_9:
      v14 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v8, (uint64_t *)v76);
      WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::take(v8, v14, &v72);
      if (!v72)
      {
        v23 = 4;
        goto LABEL_34;
      }
      v16 = v72[16];
      if (v16 && *((_DWORD *)v16 + 1))
      {
        *(_QWORD *)buf = v72[28];
        v17 = WebKit::allDataStores(v15);
        v18 = (WebKit::WebsiteDataStore *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v17, buf);
        if (v18)
        {
          v19 = WebKit::WebsiteDataStore::networkProcess(v18);
          v20 = (uint64_t)(v72 + 4);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v21 = off_1E34DECC0;
          *(_QWORD *)buf = v21;
          WebKit::NetworkProcessProxy::processNotificationEvent(v19, v20, 1, (uint64_t *)buf);
          v22 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v23 = 1;
        }
        else
        {
          v29 = qword_1ECE714D8;
          if (os_log_type_enabled((os_log_t)qword_1ECE714D8, OS_LOG_TYPE_ERROR))
          {
            v31 = v72[28];
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v31;
            _os_log_error_impl(&dword_196BCC000, v29, OS_LOG_TYPE_ERROR, "WebsiteDataStore not found from sessionID %llu, dropping notification close", buf, 0xCu);
          }
          v23 = 1;
        }
        goto LABEL_32;
      }
      *(_QWORD *)buf = v72[2];
      v24 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7, buf);
      v10 = v24;
      if (*v7)
      {
        v25 = *v7 + 32 * *(unsigned int *)(*v7 - 4);
        if ((_QWORD *)v25 == v24)
          goto LABEL_25;
      }
      else
      {
        if (!v24)
        {
LABEL_25:
          v26 = v5;
          if (v5 == (_DWORD)v74)
          {
            v27 = (unsigned __int8 ***)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v73, v5 + 1, (unint64_t)&v72);
            v23 = 0;
            v26 = HIDWORD(v74);
            v5 = HIDWORD(v74) + 1;
            v4 = v73;
            v28 = *v27;
            *v27 = 0;
          }
          else
          {
            v23 = 0;
            v28 = v72;
            ++v5;
            v72 = 0;
          }
          *((_QWORD *)v4 + v26) = v28;
          HIDWORD(v74) = v5;
LABEL_32:
          v30 = v72;
          v72 = 0;
          if (v30)
            CFRelease(v30[1]);
LABEL_34:
          if (!v11)
            goto LABEL_36;
          goto LABEL_35;
        }
        v25 = 0;
      }
      if ((_QWORD *)v25 != v24)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v7, v24);
      goto LABEL_25;
    }
    CFRetain(*(CFTypeRef *)(v9 + 8));
    *(_QWORD *)buf = *(_QWORD *)(v11 + 16);
    v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7, buf);
    v13 = *v7;
    if (*v7)
      v13 += 32 * *(unsigned int *)(v13 - 4);
    if (v13 != v12)
    {
      *(_OWORD *)v76 = *(_OWORD *)(v12 + 16);
      if (!v77)
        v77 = 1;
      goto LABEL_9;
    }
    v23 = 4;
LABEL_35:
    CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_36:
    if ((v23 | 4) != 4)
    {
LABEL_87:
      if (v5)
      {
        v69 = 0;
        do
        {
          v70 = *(_QWORD *)((char *)v4 + v69);
          *(_QWORD *)((char *)v4 + v69) = 0;
          if (v70)
            CFRelease(*(CFTypeRef *)(v70 + 8));
          v69 += 8;
        }
        while (8 * v5 != v69);
      }
      goto LABEL_92;
    }
LABEL_37:
    ++v6;
  }
  while (v2 != v6);
  if (v5)
  {
    v37 = (WTF *)((char *)v4 + 8 * v5);
    while (1)
    {
      v38 = *(unsigned __int8 **)(*(_QWORD *)v4 + 320);
      if (!v38)
        goto LABEL_78;
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v38, *(_QWORD *)(*(_QWORD *)v4 + 328), &v72);
      if (!v72)
        goto LABEL_78;
      *(_OWORD *)buf = *(_OWORD *)(*(_QWORD *)v4 + 176);
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v76, (__int128 *)buf, 1uLL);
      v39 = (uint64_t)v72;
      v40 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v40 = 1829;
      *(_QWORD *)(v40 + 8) = 0;
      *(_QWORD *)(v40 + 528) = v40 + 16;
      *(_QWORD *)(v40 + 536) = v40 + 16;
      *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v40 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
      *(_QWORD *)buf = v40;
      v41 = HIDWORD(v76[1]);
      v42 = *(_QWORD *)(v40 + 544);
      v43 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
      v44 = v43 + 8;
      v45 = *(_QWORD *)(v40 + 552);
      if (v45 < v43 + 8)
      {
        v64 = (2 * v45 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v65 = v64;
          v64 *= 2;
        }
        while (v65 < v44);
        v71 = v65;
        v66 = (char *)mmap(0, v65, 3, 4098, -1, 0);
        if (v66 == (char *)-1)
          goto LABEL_98;
        v46 = v66;
        memcpy(v66, *(const void **)(v40 + 528), *(_QWORD *)(v40 + 544));
        v67 = *(void **)(v40 + 528);
        if (v67 != (void *)(v40 + 16))
          munmap(v67, *(_QWORD *)(v40 + 552));
        *(_QWORD *)(v40 + 528) = v46;
        *(_QWORD *)(v40 + 552) = v71;
        v42 = *(_QWORD *)(v40 + 544);
      }
      else
      {
        v46 = *(char **)(v40 + 528);
      }
      bzero(&v46[v42], v43 - v42);
      *(_QWORD *)(v40 + 544) = v44;
      v47 = (_QWORD *)(*(_QWORD *)(v40 + 528) + v43);
      *(_QWORD *)(v40 + 536) = v47 + 1;
      *v47 = v41;
      if (HIDWORD(v76[1]))
      {
        v48 = (uint64_t *)v76[0];
        v49 = 16 * HIDWORD(v76[1]);
        do
        {
          IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v40, v48);
          v48 += 2;
          v49 -= 16;
        }
        while (v49);
      }
      IPC::Connection::sendMessageImpl(v39, (uint64_t *)buf, 0, 0);
      v50 = *(IPC::Encoder **)buf;
      *(_QWORD *)buf = 0;
      if (v50)
      {
        IPC::Encoder::~Encoder(v50, v10);
        WTF::fastFree(v51, v52);
      }
      v53 = v76[0];
      if (v76[0])
      {
        v76[0] = 0;
        LODWORD(v76[1]) = 0;
        WTF::fastFree(v53, v10);
      }
      v54 = v72;
      v72 = 0;
      if (!v54)
        goto LABEL_78;
      v55 = *v54;
      if (__ldaxr(*v54))
      {
        __clrex();
      }
      else if (!__stxr(1u, v55))
      {
        goto LABEL_68;
      }
      MEMORY[0x19AEABB3C](v55);
LABEL_68:
      v57 = *((_QWORD *)v55 + 1);
      v58 = v57 - 1;
      *((_QWORD *)v55 + 1) = v57 - 1;
      if (v57 == 1)
      {
        v68 = *((_QWORD *)v55 + 2);
        v60 = *((_QWORD *)v55 + 3);
        *((_QWORD *)v55 + 3) = 0;
        v59 = v68 == 0;
      }
      else
      {
        v59 = 0;
        v60 = 0;
      }
      v61 = __ldxr(v55);
      if (v61 == 1)
      {
        if (!__stlxr(0, v55))
        {
          if (!v58)
            goto LABEL_76;
          goto LABEL_78;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
      if (!v58)
      {
LABEL_76:
        v62 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v62 = off_1E34ACA48;
        *(_QWORD *)(v62 + 8) = v55;
        *(_QWORD *)(v62 + 16) = v60;
        *(_BYTE *)(v62 + 24) = v59;
        v76[0] = (WTF *)v62;
        WTF::ensureOnMainRunLoop();
        v63 = v76[0];
        v76[0] = 0;
        if (v63)
          (*(void (**)(WTF *))(*(_QWORD *)v63 + 8))(v63);
      }
LABEL_78:
      v4 = (WTF *)((char *)v4 + 8);
      if (v4 == v37)
      {
        v5 = HIDWORD(v74);
        v4 = v73;
        goto LABEL_87;
      }
    }
  }
LABEL_92:
  if (v4)
  {
    v73 = 0;
    LODWORD(v74) = 0;
    WTF::fastFree(v4, v10);
  }
}

uint64_t API::Array::at<API::UInt64>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(unsigned int *)(a1 + 28) <= a2)
    goto LABEL_8;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 16))(result) == 34)
    {
      if (*(unsigned int *)(a1 + 28) > a2)
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x197456A94);
    }
    return 0;
  }
  return result;
}

WebKit::WebNotificationManagerProxy *WebKit::WebNotificationManagerProxy::providerDidUpdateNotificationPolicy(WebKit::WebNotificationManagerProxy *this, const API::SecurityOrigin *a2, int a3)
{
  NSObject *v6;
  char *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WebCore::SecurityOriginData *v11;
  WebKit::WebNotificationManagerProxy *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE buf[36];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE714D8;
  if (os_log_type_enabled((os_log_t)qword_1ECE714D8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::SecurityOriginData::toString((const API::SecurityOrigin *)((char *)a2 + 16));
    WTF::String::utf8();
    if (v29)
      v7 = (char *)v29 + 16;
    else
      v7 = 0;
    *(_DWORD *)buf = 136643075;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Provider did update notification policy for origin %{sensitive}s to %d", buf, 0x12u);
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    v10 = v27;
    v27 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (const API::SecurityOrigin *)((char *)a2 + 16);
  result = (WebKit::WebNotificationManagerProxy *)WebCore::SecurityOriginData::toString(v11);
  if (v26)
  {
    if (*((_DWORD *)v26 + 1))
    {
      if (WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(result) == this)
      {
        v20 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v20 = off_1E34DEBC8;
        *(_QWORD *)(v20 + 8) = v11;
        *(_BYTE *)(v20 + 16) = a3;
        *(_QWORD *)buf = v20;
        WebKit::WebsiteDataStore::forEachWebsiteDataStore((WebKit *)buf);
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        {
          WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
          *(_QWORD *)algn_1ECE73828 = 0;
        }
        WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, buf);
        if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
        {
          v21 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
          v22 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v21;
        }
        else
        {
          v22 = 0;
          v21 = 0;
        }
        v29 = (WTF *)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
        v30 = v22;
        v31 = v22;
        v32 = v22;
        v33 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v21;
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v29);
        for (i = *(_QWORD *)&buf[8]; *(_QWORD *)&buf[8] != v30; i = *(_QWORD *)&buf[8])
        {
          v24 = *(_QWORD *)(*(_QWORD *)i + 8);
          v25 = *(_QWORD *)(v24 + 136);
          if (v25 && *(_BYTE *)(v25 + 104) || *(_QWORD *)(v24 + 144))
          {
            v27 = (WTF::StringImpl *)&v26;
            v28 = a3;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidUpdateNotificationDecision>(v24, (uint64_t)&v27);
          }
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
        }
      }
      else
      {
        v14 = *((_QWORD *)this + 3);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 84);
          if ((_DWORD)v15)
          {
            v16 = *(uint64_t **)(v14 + 72);
            v17 = 8 * v15;
            do
            {
              v18 = *v16;
              v19 = *(_QWORD *)(*v16 + 136);
              if (v19 && *(_BYTE *)(v19 + 104) || *(_QWORD *)(v18 + 144))
              {
                *(_QWORD *)buf = &v26;
                buf[8] = a3;
                WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidUpdateNotificationDecision>(v18, (uint64_t)buf);
              }
              ++v16;
              v17 -= 8;
            }
            while (v17);
          }
        }
      }
    }
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebKit::WebNotificationManagerProxy *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit *WebKit::WebNotificationManagerProxy::providerDidRemoveNotificationPolicies(WebKit *this, API::Array *a2)
{
  WebKit *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 7))
  {
    v3 = this;
    this = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(this);
    if (this == v3)
    {
      v12 = *((unsigned int *)a2 + 7);
      v25 = 0;
      v26 = 0;
      if ((_DWORD)v12)
      {
        if (v12 >> 27)
        {
          __break(0xC471u);
          return this;
        }
        v13 = WTF::fastMalloc((WTF *)(32 * v12));
        v14 = 0;
        LODWORD(v26) = v12;
        v25 = (uint64_t *)v13;
        do
        {
          v15 = API::Array::at<API::SecurityOrigin>((uint64_t)a2, v14);
          LOBYTE(v30) = 0;
          v32 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v30, v15 + 16);
          *(_BYTE *)v13 = 0;
          *(_DWORD *)(v13 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v13, (uint64_t)&v30);
          if (v32 != -1)
            ((void (*)(uint64_t *, _QWORD **))off_1E34DEB80[v32])(v23, &v30);
          ++v14;
          v13 += 32;
        }
        while (v12 != v14);
        HIDWORD(v26) = v12;
      }
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E34DEC18;
      v16[1] = &v25;
      v30 = v16;
      WebKit::WebsiteDataStore::forEachWebsiteDataStore((WebKit *)&v30);
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v17);
      WebKit::apiArrayToSecurityOriginStrings(v23, a2);
      {
        WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
        *(_QWORD *)algn_1ECE73828 = 0;
      }
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v30);
      if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
      {
        v18 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
        v19 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v18;
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      v25 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
      v26 = v19;
      v27 = v19;
      v28 = v19;
      v29 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v18;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
      for (i = v31; v31 != v26; i = v31)
      {
        v21 = *(_QWORD *)(*(_QWORD *)i + 8);
        v22 = *(_QWORD *)(v21 + 136);
        if (v22 && *(_BYTE *)(v22 + 104) || *(_QWORD *)(v21 + 144))
        {
          v24 = v23;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidRemoveNotificationDecisions>(v21, (uint64_t *)&v24);
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v30);
      }
      v11 = v23;
    }
    else
    {
      v4 = *((_QWORD *)v3 + 3);
      if (!v4)
        return this;
      WebKit::apiArrayToSecurityOriginStrings((uint64_t *)&v30, a2);
      v6 = *(unsigned int *)(v4 + 84);
      if ((_DWORD)v6)
      {
        v7 = *(uint64_t **)(v4 + 72);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          v10 = *(_QWORD *)(*v7 + 136);
          if (v10 && *(_BYTE *)(v10 + 104) || *(_QWORD *)(v9 + 144))
          {
            v25 = (uint64_t *)&v30;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidRemoveNotificationDecisions>(v9, (uint64_t *)&v25);
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v11 = (uint64_t *)&v30;
    }
    return (WebKit *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v5);
  }
  return this;
}

uint64_t *WebKit::apiArrayToSecurityOriginStrings(uint64_t *this, API::Array *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if (a2)
  {
    v4 = *((unsigned int *)a2 + 7);
    *this = 0;
    this[1] = 0;
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = WTF::fastMalloc((WTF *)(8 * v4));
        v6 = 0;
        *((_DWORD *)v2 + 2) = v4;
        *v2 = v5;
        do
        {
          v7 = API::Array::at<API::SecurityOrigin>((uint64_t)a2, v6);
          this = (uint64_t *)WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v7 + 16));
          *(_QWORD *)(v5 + 8 * v6) = v8;
          *((_DWORD *)v2 + 3) = ++v6;
        }
        while (v4 != v6);
      }
    }
  }
  else
  {
    *this = 0;
    this[1] = 0;
  }
  return this;
}

uint64_t WebKit::WebNotificationManagerProxy::getNotifications(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t result;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  _DWORD *v30;
  __int128 v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  WTF *v42;
  void *v43;
  char *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _DWORD *v65;
  __int128 v66;
  __int128 v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  char v73;
  _DWORD *v74;
  _DWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  int v83;
  int v84;
  __int16 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v63 = 0;
  v64 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = (_QWORD *)(v8 + 32 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = *(_QWORD **)(a1 + 48);
      if ((_DWORD)v9)
      {
        v12 = 32 * v9;
        v11 = *(_QWORD **)(a1 + 48);
        while (*v11 <= 1uLL)
        {
          v11 += 4;
          v12 -= 32;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v11 = (_QWORD *)(v8 + 32 * v9);
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = (_QWORD *)(v8 + 32 * v9);
  if (v8)
  {
LABEL_8:
    v13 = (_QWORD *)(v8 + 32 * *(unsigned int *)(v8 - 4));
    goto LABEL_13;
  }
  v13 = 0;
LABEL_13:
  if (v13 == v11)
  {
    v21 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v11[2];
      if (WTF::equal(*(WTF **)(v16 + 128), *a2, a3))
      {
        if (*(_QWORD *)(v16 + 224) == a4)
        {
          v17 = *(const WTF::StringImpl **)a3;
          if (!*(_QWORD *)a3 || !*((_DWORD *)v17 + 1) || WTF::equal(*(WTF **)(v16 + 96), v17, a3))
          {
            v18 = v11[2];
            v65 = (_DWORD *)v18;
            if (v15 == (_DWORD)v64)
            {
              v19 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v63, v15 + 1, (unint64_t)&v65);
              v15 = HIDWORD(v64);
              v14 = v63;
              v63[HIDWORD(v64)] = *v19;
            }
            else
            {
              v14[v15] = v18;
            }
            HIDWORD(v64) = ++v15;
          }
        }
      }
      v20 = v11 + 4;
      v11 = v10;
      if (v20 != v10)
      {
        v11 = v20;
        while (*v11 <= 1uLL)
        {
          v11 += 4;
          if (v11 == v10)
          {
            v11 = v10;
            break;
          }
        }
      }
    }
    while (v11 != v13);
    v21 = &v14[v15];
    if (v15)
    {
      v22 = 126 - 2 * __clz(v15);
      goto LABEL_34;
    }
  }
  v22 = 0;
LABEL_34:
  result = (uint64_t)std::__introsort<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **,false>(v14, v21, v22, 1);
  v61 = 0;
  v62 = 0;
  if (HIDWORD(v64))
  {
    if (HIDWORD(v64) >= 0x1111112)
    {
      __break(0xC471u);
      return result;
    }
    v24 = (WTF *)(240 * HIDWORD(v64));
    v25 = 0;
    v26 = 0;
    v60 = WTF::fastMalloc(v24);
    LODWORD(v62) = (v24 & 0xFFFFFFF0) / 0xF0;
    v61 = v60;
    v27 = (WTF *)v63;
    do
    {
      v28 = v27;
      v29 = *((_QWORD *)v27 + v26);
      v30 = *(_DWORD **)(v29 + 32);
      if (v30)
        *v30 += 2;
      v65 = v30;
      v31 = *(_OWORD *)(v29 + 56);
      v66 = *(_OWORD *)(v29 + 40);
      v67 = v31;
      v32 = *(_DWORD **)(v29 + 72);
      if (v32)
        *v32 += 2;
      v68 = v32;
      v33 = *(_DWORD **)(v29 + 80);
      if (v33)
        *v33 += 2;
      v69 = v33;
      v34 = *(_DWORD **)(v29 + 88);
      if (v34)
        *v34 += 2;
      v70 = v34;
      v35 = *(_DWORD **)(v29 + 96);
      if (v35)
        *v35 += 2;
      v71 = v35;
      v36 = *(_DWORD **)(v29 + 104);
      if (v36)
        *v36 += 2;
      v72 = v36;
      v73 = *(_BYTE *)(v29 + 112);
      v37 = *(_DWORD **)(v29 + 120);
      if (v37)
        *v37 += 2;
      v74 = v37;
      v38 = *(_DWORD **)(v29 + 128);
      if (v38)
        *v38 += 2;
      v75 = v38;
      v39 = *(_OWORD *)(v29 + 152);
      v76 = *(_OWORD *)(v29 + 136);
      v77 = v39;
      v40 = *(_OWORD *)(v29 + 192);
      v78 = *(_OWORD *)(v29 + 176);
      v79 = v40;
      v41 = *(_OWORD *)(v29 + 224);
      v80 = *(_OWORD *)(v29 + 208);
      v81 = v41;
      v42 = (WTF *)*(unsigned int *)(v29 + 252);
      v82 = 0;
      v83 = 0;
      v84 = (int)v42;
      if ((_DWORD)v42)
      {
        v43 = (void *)WTF::fastMalloc(v42);
        v83 = (int)v42;
        v82 = v43;
        memcpy(v43, *(const void **)(v29 + 240), *(unsigned int *)(v29 + 252));
      }
      v85 = *(_WORD *)(v29 + 256);
      v44 = (char *)v25 + v60;
      WTF::URL::URL((uint64_t)v25 + v60, (uint64_t *)&v65);
      v45 = v68;
      v68 = 0;
      *((_QWORD *)v44 + 5) = v45;
      v46 = v69;
      v69 = 0;
      *((_QWORD *)v44 + 6) = v46;
      v47 = v70;
      v70 = 0;
      *((_QWORD *)v44 + 7) = v47;
      v48 = v71;
      v71 = 0;
      *((_QWORD *)v44 + 8) = v48;
      v49 = v72;
      v72 = 0;
      *((_QWORD *)v44 + 9) = v49;
      v44[80] = v73;
      v50 = v74;
      v74 = 0;
      *((_QWORD *)v44 + 11) = v50;
      WTF::URL::URL((uint64_t)v25 + v60 + 96, (uint64_t *)&v75);
      v51 = v78;
      v52 = v79;
      v53 = v81;
      *((_OWORD *)v44 + 11) = v80;
      *((_OWORD *)v44 + 12) = v53;
      *((_OWORD *)v44 + 9) = v51;
      *((_OWORD *)v44 + 10) = v52;
      *((_QWORD *)v44 + 27) = 0;
      v54 = v82;
      v82 = 0;
      *((_QWORD *)v44 + 26) = v54;
      LODWORD(v54) = v83;
      v83 = 0;
      *((_DWORD *)v44 + 54) = (_DWORD)v54;
      LODWORD(v54) = v84;
      v84 = 0;
      *((_DWORD *)v44 + 55) = (_DWORD)v54;
      *((_WORD *)v44 + 112) = v85;
      HIDWORD(v62) = ++v26;
      WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v65, v55);
      v25 = (WTF *)((char *)v25 + 240);
      v27 = v28;
    }
    while (v24 != v25);
  }
  else
  {
    v27 = (WTF *)v63;
  }
  v56 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v56 + 16))(v56, &v61);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  result = WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v57);
  if (v27)
    return WTF::fastFree(v27, v58);
  return result;
}

BOOL WebKit::WebNotificationProvider::show(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;

  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 24);
  if (v3)
  {
    if (a2)
      v4 = *(_QWORD *)(a2 + 8);
    else
      v4 = 0;
    v3(v4, *(_QWORD *)(a3 + 8), *(_QWORD *)(a1 + 16));
  }
  return v3 != 0;
}

uint64_t WebKit::WebNotificationProvider::cancel(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(result + 32);
  if (v2)
    return v2(*(_QWORD *)(a2 + 8), *(_QWORD *)(result + 16));
  return result;
}

uint64_t WebKit::WebNotificationProvider::didDestroyNotification(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(result + 40);
  if (v2)
    return v2(*(_QWORD *)(a2 + 8), *(_QWORD *)(result + 16));
  return result;
}

uint64_t WebKit::WebNotificationProvider::clearNotifications(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit *v9;
  void (*v10)(_QWORD, _QWORD);
  uint64_t v11;
  void *v12;
  _QWORD v13[2];

  if (*(_QWORD *)(result + 72))
  {
    v3 = result;
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      if (*(_DWORD *)(a2 + 12))
      {
        v6 = 0;
        do
        {
          v7 = v6;
          v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v6);
          v9 = (WebKit *)API::Object::newObject(0x18uLL, 34);
          *((_QWORD *)v9 + 2) = v8;
          *(_QWORD *)v9 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v9);
          *(_QWORD *)v9 = &off_1E34AD280;
          v6 = v7 + 1;
          *(_QWORD *)(v5 + 8 * v7) = v9;
        }
        while (v7 + 1 < (unint64_t)*(unsigned int *)(a2 + 12));
      }
      else
      {
        LODWORD(v6) = 0;
      }
    }
    else
    {
      LODWORD(v6) = 0;
      v5 = 0;
    }
    v10 = *(void (**)(_QWORD, _QWORD))(v3 + 72);
    v11 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v11 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v11);
    *(_QWORD *)v11 = &off_1E34CC2F8;
    v13[0] = 0;
    v13[1] = 0;
    *(_QWORD *)(v11 + 16) = v5;
    *(_DWORD *)(v11 + 24) = v4;
    *(_DWORD *)(v11 + 28) = v6;
    v10(*(_QWORD *)(v11 + 8), *(_QWORD *)(v3 + 16));
    CFRelease(*(CFTypeRef *)(v11 + 8));
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v12);
  }
  return result;
}

uint64_t WebKit::WebNotificationProvider::addNotificationManager(uint64_t this, WebKit::WebNotificationManagerProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 48);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WebKit::WebNotificationProvider::removeNotificationManager(uint64_t this, WebKit::WebNotificationManagerProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 56);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

void WebKit::WebNotificationProvider::notificationPermissions(WebKit::WebNotificationProvider *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t (*v3)(_QWORD);
  void *v4;
  WebKit *v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl **v17;
  int j;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  CFTypeRef *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WebKit *v35;

  *a2 = 0;
  v3 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 8);
  if (v3)
  {
    v4 = (void *)v3(*((_QWORD *)this + 2));
    if (v4)
    {
      v32 = (CFTypeRef *)objc_msgSend(v4, "_apiObject");
      API::Dictionary::keys((API::Dictionary *)v32, &v35);
      v5 = v35;
      if (*((_DWORD *)v35 + 7))
      {
        for (i = 0; i < *((unsigned int *)v35 + 7); ++i)
        {
          v7 = API::Array::at<API::String>((uint64_t)v5, i);
          v8 = v7;
          if (v7)
            CFRetain(*(CFTypeRef *)(v7 + 8));
          WTF::String::isolatedCopy();
          WTF::String::isolatedCopy();
          v12 = *((_BYTE *)API::Dictionary::get<API::Boolean>((uint64_t)v32, &v33, v9) + 16);
          v13 = *a2;
          if (*a2
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v13 = *a2) != 0))
          {
            v14 = *(_DWORD *)(v13 - 8);
          }
          else
          {
            v14 = 0;
          }
          v15 = *((_DWORD *)v34 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(v34);
          v17 = 0;
          for (j = 1; ; ++j)
          {
            v19 = v16 & v14;
            v20 = (WTF::StringImpl **)(v13 + 16 * v19);
            v21 = *v20;
            if (!*v20)
              break;
            if (v21 != (WTF *)-1)
            {
              v20 = v17;
              if (WTF::equal(v21, v34, v11))
              {
                *(_BYTE *)(v13 + 16 * v19 + 8) = v12;
                goto LABEL_32;
              }
            }
            v16 = j + v19;
            v17 = v20;
          }
          if (v17)
          {
            *v17 = 0;
            v17[1] = 0;
            --*(_DWORD *)(*a2 - 16);
            v20 = v17;
          }
          v22 = v34;
          v34 = 0;
          v23 = *v20;
          *v20 = v22;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          *((_BYTE *)v20 + 8) = v12;
          v24 = *a2;
          if (*a2)
            v25 = *(_DWORD *)(v24 - 12) + 1;
          else
            v25 = 1;
          *(_DWORD *)(v24 - 12) = v25;
          v26 = *a2;
          if (*a2)
            v27 = *(_DWORD *)(v26 - 12);
          else
            v27 = 0;
          v28 = (*(_DWORD *)(v26 - 16) + v27);
          v29 = *(unsigned int *)(v26 - 4);
          if (v29 > 0x400)
          {
            if (v29 > 2 * v28)
              goto LABEL_32;
          }
          else if (3 * v29 > 4 * v28)
          {
            goto LABEL_32;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v20);
LABEL_32:
          v30 = v33;
          v33 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = v34;
          v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::destroy(v31, v10);
              if (!v8)
                goto LABEL_41;
LABEL_40:
              CFRelease(*(CFTypeRef *)(v8 + 8));
              goto LABEL_41;
            }
            *(_DWORD *)v31 -= 2;
          }
          if (v8)
            goto LABEL_40;
LABEL_41:
          v5 = v35;
        }
      }
      CFRelease(*((CFTypeRef *)v5 + 1));
      CFRelease(v32[1]);
    }
  }
}

void WebKit::RemoteScrollingCoordinatorProxy::commitScrollingTreeState(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[4];
  const char *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  buf[0] = 0;
  v17 = 0;
  v8 = (_OWORD *)(a1 + 32);
  std::__optional_storage_base<WebCore::RequestedScrollData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RequestedScrollData,false>>(a1 + 32, (uint64_t)buf);
  v9 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v14 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 184);
  if (!v10 || *(_BYTE *)(v10 + 32) || (v11 = *(_QWORD *)(v10 + 72)) == 0)
  {
LABEL_3:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 44) = 0;
    goto LABEL_4;
  }
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  if ((WebCore::ScrollingTree::commitTreeState() & 1) == 0)
  {
    v13 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = "std::optional<RequestedScrollData> WebKit::RemoteScrollingCoordinatorProxy::commitScrollingTreeState(IPC::Co"
            "nnection &, const RemoteScrollingCoordinatorTransaction &, std::optional<LayerHostingContextIdentifier>)";
      _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.cpp 97: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
    goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v11);
  if (*(_BYTE *)(a3 + 8))
    WebCore::ScrollingTree::clearLatchedNode(*(WebCore::ScrollingTree **)(a1 + 24));
  buf[0] = 0;
  v17 = 0;
  v12 = v8[1];
  *(_OWORD *)a4 = *v8;
  *(_OWORD *)(a4 + 16) = v12;
  *(_OWORD *)(a4 + 32) = v8[2];
  std::__optional_storage_base<WebCore::RequestedScrollData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RequestedScrollData,false>>((uint64_t)v8, (uint64_t)buf);
LABEL_4:
  if (v14)
    WebCore::ScrollingStateTree::operator delete(v14, 0x50uLL);
}

IPC::Encoder *WebKit::RemoteScrollingCoordinatorProxy::handleWheelEvent(IPC::Encoder *result, uint64_t a2)
{
  WebCore::ScrollingTree **v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  __int16 v6;
  unsigned int v7;
  __int16 v8;
  _QWORD v9[16];
  _BYTE v10[136];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 3))
  {
    v3 = (WebCore::ScrollingTree **)result;
    WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v10, a2);
    if (v10[92] == 1)
      WebCore::ScrollingTree::setClientAllowedMainFrameRubberBandableEdges();
    v4 = WebCore::ScrollingTree::determineWheelEventProcessing();
    v5 = v4;
    if ((v4 & 1) != 0)
    {
      WebCore::ScrollingTree::willProcessWheelEvent(v3[3]);
      (*((void (**)(_QWORD *__return_ptr, WebCore::ScrollingTree **, _BYTE *))*v3 + 8))(v9, v3, v10);
      v7 = (*(uint64_t (**)(WebCore::ScrollingTree *, _QWORD *, _QWORD))(*(_QWORD *)v3[3] + 48))(v3[3], v9, v5);
      v8 = v7;
      (*((void (**)(WebCore::ScrollingTree **, _QWORD))*v3 + 28))(v3, (v7 >> 8) & 1);
      v6 = v8;
    }
    else
    {
      v6 = v4;
    }
    return WebKit::RemoteScrollingCoordinatorProxy::continueWheelEventHandling((uint64_t)v3, a2, v6);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteScrollingCoordinatorProxy::continueWheelEventHandling(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 started;
  __int16 v7;
  _BYTE v8[136];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v8, a2);
  started = WebCore::ScrollingTree::willWheelEventStartSwipeGesture();
  return WebKit::WebPageProxy::continueWheelEventHandling(*(IPC::Encoder **)(a1 + 16), a2, (char *)&v7, started | 0x100u);
}

WebCore::ScrollingTree *WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  WebCore::ScrollingTree *result;
  unsigned int *v3;
  unsigned int v4;
  WebCore::ScrollingTree *v5;
  WebCore::ScrollingTree *v6;

  *((_BYTE *)this + 128) = 0;
  result = (WebCore::ScrollingTree *)*((_QWORD *)this + 3);
  if (result)
  {
    result = (WebCore::ScrollingTree *)WebCore::ScrollingTree::hasPendingScrollUpdates(result);
    if ((_DWORD)result)
    {
      WTF::RunLoop::main(result);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      v3 = (unsigned int *)*((_QWORD *)this + 1);
      if (v3)
      {
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
      }
      v5 = (WebCore::ScrollingTree *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = &off_1E34DECE8;
      *((_QWORD *)v5 + 1) = v3;
      v6 = v5;
      WTF::RunLoop::dispatch();
      result = v6;
      if (v6)
        return (WebCore::ScrollingTree *)(*(uint64_t (**)(WebCore::ScrollingTree *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeRequestsScroll(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 48);
    v4 = *(_QWORD *)(v4 + 56);
  }
  else
  {
    v5 = 0;
  }
  v6 = a2 == v5 && a3 == v4;
  v7 = v6;
  if (v6)
  {
    v8 = (_OWORD *)(a1 + 32);
    if (*(_BYTE *)(a1 + 76))
    {
      v9 = *a4;
      *(_DWORD *)(a1 + 47) = *(_DWORD *)((char *)a4 + 15);
      *v8 = v9;
      if (*(unsigned __int8 *)(a1 + 72) == *((unsigned __int8 *)a4 + 40))
      {
        if (*(_BYTE *)(a1 + 72))
        {
          *(_BYTE *)(a1 + 52) = *((_BYTE *)a4 + 20);
          v10 = *((_QWORD *)a4 + 3);
          *(_DWORD *)(a1 + 64) = *((_DWORD *)a4 + 8);
          *(_QWORD *)(a1 + 56) = v10;
          *(_WORD *)(a1 + 68) = *((_WORD *)a4 + 18);
        }
      }
      else if (*(_BYTE *)(a1 + 72))
      {
        *(_BYTE *)(a1 + 72) = 0;
      }
      else
      {
        v13 = *(__int128 *)((char *)a4 + 20);
        *(_DWORD *)(a1 + 68) = *((_DWORD *)a4 + 9);
        *(_OWORD *)(a1 + 52) = v13;
        *(_BYTE *)(a1 + 72) = 1;
      }
    }
    else
    {
      v11 = *a4;
      v12 = a4[1];
      *(_OWORD *)(a1 + 60) = *(__int128 *)((char *)a4 + 28);
      *v8 = v11;
      *(_OWORD *)(a1 + 48) = v12;
      *(_BYTE *)(a1 + 76) = 1;
    }
  }
  return v7;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeNodeRequestsKeyboardScroll()
{
  return 0;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::scrollingTreeAsText@<X0>(WebKit::RemoteScrollingCoordinatorProxy *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v3;

  result = *((_QWORD *)this + 3);
  if (result)
    return WebCore::ScrollingTree::scrollingTreeAsText();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::displayDidRefresh(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3));
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::resetStateAfterProcessExited(WebKit::RemoteScrollingCoordinatorProxy *this, void *a2)
{
  if (!*((_BYTE *)this + 116))
    *((_BYTE *)this + 116) = 1;
  *((_DWORD *)this + 28) = 0;
  if (!*((_BYTE *)this + 124))
    *((_BYTE *)this + 124) = 1;
  *((_DWORD *)this + 30) = 0;
  return WebKit::RemoteScrollingUIState::reset((uint64_t)this + 80, a2);
}

unsigned __int8 *WebKit::RemoteScrollingCoordinatorProxy::scrollbarStateForScrollingNodeID@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  unsigned __int8 *result;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;

  result = (unsigned __int8 *)WebCore::ScrollingTree::nodeForID();
  if (result)
  {
    v5 = result[40];
    v6 = v5 > 5;
    v7 = (1 << v5) & 0x2B;
    if (!v6 && v7 != 0)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)result + 120))(result, a1);
  }
  v9 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  *a2 = v9;
  return result;
}

IPC::Encoder *WebKit::RemoteScrollingTree::scrollingTreeNodeDidStopAnimatedScroll(IPC::Encoder *this, WebCore::ScrollingTreeScrollingNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 208);
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896);
      v12 = *((_OWORD *)a2 + 3);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1339;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v15 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, (uint64_t *)&v12);
      LOBYTE(v13) = 0;
      v14 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v15, 0, (uint64_t)&v13, 1);
      if (v14)
      {
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      this = v15;
      v15 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteScrollingTree::scrollingTreeNodeRequestsScroll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 344);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    return 0;
}

uint64_t WebKit::RemoteScrollingTree::scrollingTreeNodeRequestsKeyboardScroll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 344);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    return 0;
}

_QWORD *WebKit::RemoteScrollingTree::scrollingTreeNodeWillStartScroll(_QWORD *result)
{
  uint64_t v1;

  v1 = result[43];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 88))(result);
  }
  return result;
}

_QWORD *WebKit::RemoteScrollingTree::scrollingTreeNodeDidEndScroll(_QWORD *result)
{
  uint64_t v1;

  v1 = result[43];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 96))(result);
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::clearNodesWithUserScrollInProgress(WebKit::RemoteScrollingTree *this)
{
  uint64_t result;
  uint64_t v3;

  result = WebCore::ScrollingTree::clearNodesWithUserScrollInProgress(this);
  v3 = *((_QWORD *)this + 43);
  if (v3)
  {
    result = *(_QWORD *)(v3 + 8);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
  }
  return result;
}

_QWORD *WebKit::RemoteScrollingTree::scrollingTreeNodeDidBeginScrollSnapping(_QWORD *result)
{
  uint64_t v1;

  v1 = result[43];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 136))(result);
  }
  return result;
}

_QWORD *WebKit::RemoteScrollingTree::scrollingTreeNodeDidEndScrollSnapping(_QWORD *result)
{
  uint64_t v1;

  v1 = result[43];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 144))(result);
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::createScrollingTreeNode(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 2:
      result = WebCore::ScrollingTreeFrameHostingNode::create();
      break;
    case 4:
      result = WebCore::ScrollingTreePluginHostingNode::create();
      break;
    case 6:
      result = WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::create();
      break;
    case 8:
      result = WebCore::ScrollingTreeStickyNodeCocoa::create();
      break;
    case 9:
      result = WebCore::ScrollingTreePositionedNodeCocoa::create();
      break;
    default:
      result = WebCore::ScrollingTreeFixedNodeCocoa::create();
      break;
  }
  return result;
}

IPC::Encoder *WebKit::RemoteScrollingTree::currentSnapPointIndicesDidChange(IPC::Encoder *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  v5 = *((_QWORD *)result + 43);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v7 + 208);
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 1896);
      v17[0] = a2;
      v17[1] = a3;
      v15 = a5;
      v16 = a4;
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 1340;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v20 = (IPC::Encoder *)v10;
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, v17);
      IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)v10, (int *)&v16);
      IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)v10, (int *)&v15);
      LOBYTE(v18) = 0;
      v19 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v20, 0, (uint64_t)&v18, 1);
      if (v19)
      {
        v12 = v18;
        v18 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      result = v20;
      v20 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v11);
        return (IPC::Encoder *)WTF::fastFree(v13, v14);
      }
    }
  }
  return result;
}

__int128 *WebKit::RemoteScrollingTree::reportSynchronousScrollingReasonsChanged(__int128 *result, unsigned __int8 a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)result + 43);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      result = *(__int128 **)(*(_QWORD *)(v4 + 16) + 912);
      if (result)
        return WebKit::RemoteLayerTreeScrollingPerformanceData::appendSynchronousScrollingChange((uint64_t)result, a2, a3);
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteScrollingTree::receivedWheelEventWithPhases(IPC::Encoder *result, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v3 = *((_QWORD *)result + 43);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v7 + 208);
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 1896);
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 1341;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v17 = (IPC::Encoder *)v10;
      *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a2;
      *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a3;
      LOBYTE(v15) = 0;
      v16 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v17, 0, (uint64_t)&v15, 1);
      if (v16)
      {
        v12 = v15;
        v15 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      result = v17;
      v17 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v11);
        return (IPC::Encoder *)WTF::fastFree(v13, v14);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteScrollingTree::deferWheelEventTestCompletionForReason(IPC::Encoder *result, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17[2];
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  v4 = *((_QWORD *)result + 43);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*((_BYTE *)result + 337))
      {
        v17[0] = a2;
        v17[1] = a3;
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 337) && a2 != 0)
          {
            v9 = *(_QWORD *)(v5 + 16);
            v10 = *(_QWORD *)(v9 + 208);
            v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 1896);
            v12 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v12 = 1346;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 528) = v12 + 16;
            *(_QWORD *)(v12 + 536) = v12 + 16;
            *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v12 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
            v20 = (IPC::Encoder *)v12;
            IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, v17);
            *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 2uLL, 2) = a4;
            LOBYTE(v18) = 0;
            v19 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v20, 0, (uint64_t)&v18, 1);
            if (v19)
            {
              v14 = v18;
              v18 = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
            result = v20;
            v20 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder(result, v13);
              return (IPC::Encoder *)WTF::fastFree(v15, v16);
            }
          }
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteScrollingTree::removeWheelEventTestCompletionDeferralForReason(IPC::Encoder *result, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17[2];
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  v4 = *((_QWORD *)result + 43);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*((_BYTE *)result + 337))
      {
        v17[0] = a2;
        v17[1] = a3;
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 337) && a2 != 0)
          {
            v9 = *(_QWORD *)(v5 + 16);
            v10 = *(_QWORD *)(v9 + 208);
            v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 1896);
            v12 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v12 = 1347;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 528) = v12 + 16;
            *(_QWORD *)(v12 + 536) = v12 + 16;
            *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v12 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
            v20 = (IPC::Encoder *)v12;
            IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, v17);
            *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 2uLL, 2) = a4;
            LOBYTE(v18) = 0;
            v19 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v20, 0, (uint64_t)&v18, 1);
            if (v19)
            {
              v14 = v18;
              v18 = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
            result = v20;
            v20 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder(result, v13);
              return (IPC::Encoder *)WTF::fastFree(v15, v16);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTree::propagateSynchronousScrollingReasons(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2)
    LOBYTE(v2) = *(_DWORD *)(v2 - 12) != 0;
  *(_BYTE *)(result + 352) = v2;
  return result;
}

_QWORD *WebKit::RemoteScrollingTreeIOS::scrollingTreeNodeWillStartPanGesture(_QWORD *result)
{
  uint64_t v1;

  v1 = result[43];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
  }
  return result;
}

uint64_t WebKit::RemoteScrollingTreeIOS::createScrollingTreeNode@<X0>(uint64_t a1@<X0>, int a2@<W1>, WebCore::ScrollingTreeScrollingNode **a3@<X8>)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 1:
      result = WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::create(a3);
      break;
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      result = WebKit::RemoteScrollingTree::createScrollingTreeNode(a1, a2);
      break;
    case 3:
      result = (uint64_t)WebKit::ScrollingTreePluginScrollingNodeIOS::create(a3);
      break;
    case 5:
      result = (uint64_t)WebKit::ScrollingTreeOverflowScrollingNodeIOS::create(a3);
      break;
    default:
      result = WebCore::ScrollingTreeFixedNodeCocoa::create();
      break;
  }
  return result;
}

void WebKit::ServiceWorkerNotificationHandler::~ServiceWorkerNotificationHandler(WebKit::ServiceWorkerNotificationHandler *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebNotificationManagerMessageHandler::~WebNotificationManagerMessageHandler(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)81>::type()
{
  return 81;
}

void `non-virtual thunk to'WebKit::WebNotificationManagerProxy::~WebNotificationManagerProxy(WebKit::WebNotificationManagerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 2) = &off_1E34DE620;
  *(_QWORD *)this = &unk_1E34DE660;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 2) = &off_1E34DE620;
  *(_QWORD *)this = &unk_1E34DE660;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::propagatesMainFrameScrolls(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  return 1;
}

uint64_t WebCore::ScrollingTree::isThreadedScrollingTree(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingTreeMac(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebKit::RemoteScrollingTree::isRemoteScrollingTree(WebKit::RemoteScrollingTree *this)
{
  return 1;
}

uint64_t WebCore::ScrollingTree::isScrollingTreeIOS(WebCore::ScrollingTree *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTree::isScrollingSynchronizedWithMainThread(WebCore::ScrollingTree *this)
{
  return 1;
}

uint64_t WebKit::RemoteScrollingTree::handleWheelEventAfterDefaultHandling()
{
  return 0;
}

void WebKit::WebNotification::~WebNotification(WebKit::WebNotification *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DE598;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  WebCore::NotificationData::~NotificationData((WebKit::WebNotification *)((char *)this + 32), a2);
}

{
  unsigned __int8 *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DE598;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  WebCore::NotificationData::~NotificationData((WebKit::WebNotification *)((char *)this + 32), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)80>::type()
{
  return 80;
}

void API::ObjectImpl<(API::Object::Type)80>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  int v17;
  __int16 v18;
  char v19;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v17 = -1640531527;
    v18 = 0;
    v19 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v17, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
    v6 = *a2;
    v7 = a2[1];
    v8 = v5 & v4;
    v9 = (uint64_t *)(v3 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (v11 == v7 && v10 == v6)
    {
      return 1;
    }
    else
    {
      v13 = 1;
      do
      {
        v14 = v10 | v11;
        result = v14 != 0;
        if (!v14)
          break;
        v8 = ((_DWORD)v8 + v13) & v4;
        v15 = (uint64_t *)(v3 + 32 * v8);
        v10 = *v15;
        v11 = v15[1];
        v16 = v11 == v7 && v10 == v6;
        ++v13;
      }
      while (!v16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::setPushesAndNotificationsEnabledForOrigin(WebCore::SecurityOriginData const&,BOOL)::$_0,void,WebKit::WebsiteDataStore &>::call(_QWORD *result, WebKit::WebsiteDataStore *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11[2];
  char v12;
  uint64_t v13;

  v3 = (uint64_t)result;
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
  {
    v5 = WebKit::WebsiteDataStore::networkProcess(this);
    v6 = *((_QWORD *)this + 3);
    v7 = *(uint64_t **)(v3 + 8);
    v8 = *(_BYTE *)(v3 + 16);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E34DEBF0;
    v13 = v6;
    v10 = v9;
    v11[0] = &v13;
    v11[1] = v7;
    v12 = v8;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(v5, v11, (uint64_t *)&v10, 0, 0, 1);
    result = v10;
    v10 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::removePushSubscriptionsForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebKit::WebsiteDataStore &>::call(uint64_t result, WebKit::WebsiteDataStore *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SecurityOriginData *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t *v14[2];
  uint64_t v15;

  v3 = *((_QWORD *)this + 3);
  if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::SecurityOriginData **)v4;
      v7 = 32 * v5;
      do
      {
        v8 = WebKit::WebsiteDataStore::networkProcess(this);
        v9 = *((_QWORD *)this + 3);
        WebCore::SecurityOriginData::toString(v6);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = &off_1E34DEC40;
        v13 = v10;
        v10[1] = v12;
        v14[1] = (uint64_t *)v6;
        v15 = v9;
        v14[0] = &v15;
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()>>(v8, v14, (uint64_t *)&v13, 0, 0, 1);
        v11 = (uint64_t)v13;
        v13 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        result = 0;
        v12 = 0;
        v6 = (WebCore::SecurityOriginData *)((char *)v6 + 32);
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKitL33removePushSubscriptionsForOriginsERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENK3__0clERNS2_16WebsiteDataStoreEEUlOT_E_vJjEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34DEC40;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKitL33removePushSubscriptionsForOriginsERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENK3__0clERNS2_16WebsiteDataStoreEEUlOT_E_vJjEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DEC40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t API::Array::at<API::SecurityOrigin>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(unsigned int *)(a1 + 28) <= a2)
    goto LABEL_8;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 16))(result) == 18)
    {
      if (*(unsigned int *)(a1 + 28) > a2)
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x197458EC0);
    }
    return 0;
  }
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  double v31;
  double v32;
  uint64_t *v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  uint64_t *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t *v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  double v112;
  double v113;
  unint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  double v124;
  uint64_t *v125;
  uint64_t v126;
  double v127;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *(a2 - 1);
        v46 = *i;
        v47 = *(double *)(v45 + 232);
        v48 = *(double *)(*i + 232);
        if (v47 < v48 || v47 == v48 && *(_QWORD *)(v45 + 16) < *(_QWORD *)(v46 + 16))
        {
          *i = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, i + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        v49 = i + 1;
        v50 = i + 2;
        v51 = i + 3;
        result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, i + 1, i + 2, i + 3);
        v52 = *(a2 - 1);
        v53 = i[3];
        v54 = *(double *)(v52 + 232);
        v55 = *(double *)(v53 + 232);
        if (v54 < v55 || v54 == v55 && *(_QWORD *)(v52 + 16) < *(_QWORD *)(v53 + 16))
        {
          *v51 = v52;
          *(a2 - 1) = v53;
          v56 = *v51;
          v57 = *v50;
          v58 = *(double *)(*v51 + 232);
          v59 = *(double *)(*v50 + 232);
          if (v58 < v59 || v58 == v59 && *(_QWORD *)(v56 + 16) < *(_QWORD *)(v57 + 16))
          {
            *v50 = v56;
            *v51 = v57;
            v60 = *v49;
            v61 = *(double *)(*v49 + 232);
            if (v58 < v61 || v58 == v61 && *(_QWORD *)(v56 + 16) < *(_QWORD *)(v60 + 16))
            {
              i[1] = v56;
              i[2] = v60;
              v62 = *i;
              v63 = *(double *)(*i + 232);
              if (v58 < v63 || v58 == v63 && *(_QWORD *)(v56 + 16) < *(_QWORD *)(v62 + 16))
              {
                *i = v56;
                i[1] = v62;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v64 = i + 1;
          v65 = i == a2 || v64 == a2;
          v66 = v65;
          if ((a4 & 1) != 0)
          {
            if ((v66 & 1) == 0)
            {
              v67 = 0;
              v68 = i;
              do
              {
                v69 = v68;
                v68 = v64;
                v71 = *v69;
                v70 = v69[1];
                v72 = *(double *)(v70 + 232);
                v73 = *(double *)(*v69 + 232);
                if (v72 < v73 || v72 == v73 && *(_QWORD *)(v70 + 16) < *(_QWORD *)(v71 + 16))
                {
                  v69[1] = v71;
                  v74 = i;
                  if (v69 != i)
                  {
                    v75 = v67;
                    while (1)
                    {
                      v76 = *(uint64_t *)((char *)i + v75 - 8);
                      v77 = *(double *)(v76 + 232);
                      if (v72 >= v77)
                      {
                        if (v72 != v77)
                        {
                          v74 = v69;
                          goto LABEL_148;
                        }
                        if (*(_QWORD *)(v70 + 16) >= *(_QWORD *)(v76 + 16))
                          break;
                      }
                      --v69;
                      *(uint64_t *)((char *)i + v75) = v76;
                      v75 -= 8;
                      if (!v75)
                      {
                        v74 = i;
                        goto LABEL_148;
                      }
                    }
                    v74 = (uint64_t *)((char *)i + v75);
                  }
LABEL_148:
                  *v74 = v70;
                }
                v64 = v68 + 1;
                v67 += 8;
              }
              while (v68 + 1 != a2);
            }
          }
          else if ((v66 & 1) == 0)
          {
            v118 = 0;
            v119 = 1;
            do
            {
              v120 = v118;
              v118 = v119;
              v121 = *v64;
              v122 = i[v120];
              v123 = *(double *)(*v64 + 232);
              v124 = *(double *)(v122 + 232);
              if (v123 < v124 || v123 == v124 && *(_QWORD *)(v121 + 16) < *(_QWORD *)(v122 + 16))
              {
                *v64 = v122;
                while (1)
                {
                  v125 = &i[v120];
                  v126 = *(v125 - 1);
                  v127 = *(double *)(v126 + 232);
                  if (v123 >= v127 && (v123 != v127 || *(_QWORD *)(v121 + 16) >= *(_QWORD *)(v126 + 16)))
                    break;
                  --v120;
                  *v125 = v126;
                  if (v120 == -1)
                    goto LABEL_213;
                }
                i[v120] = v121;
              }
              v119 = v118 + 1;
              v64 = &i[v118 + 1];
            }
            while (v64 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v78 = (v11 - 2) >> 1;
          v79 = v78;
          do
          {
            v80 = v79;
            if (v78 >= v79)
            {
              v81 = (2 * v79) | 1;
              v82 = &i[v81];
              if (2 * v80 + 2 < (uint64_t)v11)
              {
                v83 = v82[1];
                v84 = *(double *)(*v82 + 232);
                v85 = *(double *)(v83 + 232);
                if (v84 < v85 || v84 == v85 && *(_QWORD *)(*v82 + 16) < *(_QWORD *)(v83 + 16))
                {
                  ++v82;
                  v81 = 2 * v80 + 2;
                }
              }
              v86 = *v82;
              v87 = i[v80];
              v88 = *(double *)(*v82 + 232);
              v89 = *(double *)(v87 + 232);
              if (v88 >= v89 && (v88 != v89 || *(_QWORD *)(v86 + 16) >= *(_QWORD *)(v87 + 16)))
              {
                i[v80] = v86;
                if (v78 >= v81)
                {
                  while (1)
                  {
                    v91 = 2 * v81;
                    v81 = (2 * v81) | 1;
                    v90 = &i[v81];
                    v92 = v91 + 2;
                    if (v92 < (uint64_t)v11)
                    {
                      result = (uint64_t *)v90[1];
                      v93 = *(double *)(*v90 + 232);
                      v94 = *((double *)result + 29);
                      if (v93 < v94
                        || v93 == v94
                        && (result = (uint64_t *)result[2], *(_QWORD *)(*v90 + 16) < (unint64_t)result))
                      {
                        ++v90;
                        v81 = v92;
                      }
                    }
                    v95 = *v90;
                    v96 = *(double *)(*v90 + 232);
                    if (v96 < v89)
                      break;
                    if (v96 == v89)
                    {
                      result = *(uint64_t **)(v87 + 16);
                      if (*(_QWORD *)(v95 + 16) < (unint64_t)result)
                        break;
                    }
                    *v82 = v95;
                    v82 = v90;
                    if (v78 < v81)
                      goto LABEL_164;
                  }
                }
                v90 = v82;
LABEL_164:
                *v90 = v87;
              }
            }
            v79 = v80 - 1;
          }
          while (v80);
          v97 = (unint64_t)v10 >> 3;
          while (2)
          {
            v98 = 0;
            v99 = *i;
            v100 = i;
            do
            {
              v101 = v100;
              v100 += v98 + 1;
              v102 = 2 * v98;
              v98 = (2 * v98) | 1;
              v103 = v102 + 2;
              if (v103 < v97)
              {
                v104 = v100[1];
                v105 = *(double *)(*v100 + 232);
                v106 = *(double *)(v104 + 232);
                if (v105 < v106 || v105 == v106 && *(_QWORD *)(*v100 + 16) < *(_QWORD *)(v104 + 16))
                {
                  ++v100;
                  v98 = v103;
                }
              }
              *v101 = *v100;
            }
            while (v98 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
            if (v100 == --a2)
            {
LABEL_195:
              *v100 = v99;
            }
            else
            {
              *v100 = *a2;
              *a2 = v99;
              v107 = (char *)v100 - (char *)i + 8;
              if (v107 >= 9)
              {
                v108 = ((unint64_t)v107 >> 3) - 2;
                v109 = v108 >> 1;
                v110 = &i[v108 >> 1];
                v111 = *v110;
                v99 = *v100;
                v112 = *(double *)(*v110 + 232);
                v113 = *(double *)(*v100 + 232);
                if (v112 < v113 || v112 == v113 && *(_QWORD *)(v111 + 16) < *(_QWORD *)(v99 + 16))
                {
                  *v100 = v111;
                  if (v108 >= 2)
                  {
                    while (1)
                    {
                      v114 = v109 - 1;
                      v109 = (v109 - 1) >> 1;
                      v100 = &i[v109];
                      v115 = *v100;
                      v116 = *(double *)(*v100 + 232);
                      if (v116 >= v113 && (v116 != v113 || *(_QWORD *)(v115 + 16) >= *(_QWORD *)(v99 + 16)))
                        break;
                      *v110 = v115;
                      v110 = &i[v109];
                      if (v114 <= 1)
                        goto LABEL_195;
                    }
                  }
                  v100 = v110;
                  goto LABEL_195;
                }
              }
            }
            if (v97-- <= 2)
              return result;
            continue;
          }
        }
        v12 = v11 >> 1;
        v13 = &i[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(v7 - 1);
          v17 = *(double *)(v16 + 232);
          v18 = *(double *)(v15 + 232);
          if (v17 >= v18 && (v17 != v18 || *(_QWORD *)(v16 + 16) >= *(_QWORD *)(v15 + 16)))
          {
            v35 = *(double *)(*v8 + 232);
            if (v18 < v35 || v18 == v35 && *(_QWORD *)(v15 + 16) < *(_QWORD *)(*v8 + 16))
            {
              for (i = v7 + 1; i != a2; ++i)
              {
                v36 = *(double *)(*i + 232);
                if (v18 < v36 || v18 == v36 && *(_QWORD *)(v15 + 16) < *(_QWORD *)(*i + 16))
                  goto LABEL_77;
              }
LABEL_213:
              __break(1u);
              return result;
            }
            for (i = v7 + 1; i < a2; ++i)
            {
              v37 = *(double *)(*i + 232);
              if (v18 < v37 || v18 == v37 && *(_QWORD *)(v15 + 16) < *(_QWORD *)(*i + 16))
                break;
            }
LABEL_77:
            v38 = a2;
            if (i < a2)
            {
              v38 = a2 - 1;
              if (a2 == v7)
                goto LABEL_213;
              while (1)
              {
                v39 = *(double *)(*v38 + 232);
                if (v18 >= v39 && (v18 != v39 || *(_QWORD *)(v15 + 16) >= *(_QWORD *)(*v38 + 16)))
                  break;
                v65 = v38-- == v7;
                if (v65)
                  goto LABEL_213;
              }
            }
            if (i < v38)
            {
              v40 = *i;
              v41 = *v38;
              do
              {
                *i++ = v41;
                *v38 = v40;
                while (1)
                {
                  if (i == a2)
                    goto LABEL_213;
                  v40 = *i;
                  v42 = *(double *)(*i + 232);
                  if (v18 < v42 || v18 == v42 && *(_QWORD *)(v15 + 16) < *(_QWORD *)(v40 + 16))
                    break;
                  ++i;
                }
                if (v38 == v7)
                  goto LABEL_213;
                --v38;
                while (1)
                {
                  v41 = *v38;
                  v43 = *(double *)(*v38 + 232);
                  if (v18 >= v43 && (v18 != v43 || *(_QWORD *)(v15 + 16) >= *(_QWORD *)(v41 + 16)))
                    break;
                  v65 = v38-- == v7;
                  if (v65)
                    goto LABEL_213;
                }
              }
              while (i < v38);
            }
            v44 = i - 1;
            if (i - 1 != v7)
              *v7 = *v44;
            a4 = 0;
            *v44 = v15;
            continue;
          }
        }
        if (v7 + 1 == a2)
          goto LABEL_213;
        v19 = *(double *)(v15 + 232);
        v20 = 1;
        while (1)
        {
          v21 = v7[v20];
          v22 = *(double *)(v21 + 232);
          if (v22 >= v19 && (v22 != v19 || *(_QWORD *)(v21 + 16) >= *(_QWORD *)(v15 + 16)))
            break;
          if (&v7[++v20] == a2)
            goto LABEL_213;
        }
        v23 = &v7[v20];
        if (v20 == 1)
        {
          v24 = a2;
          if (v23 < a2)
          {
            v26 = *v8;
            v27 = *(double *)(*v8 + 232);
            v24 = a2 - 1;
            if (v27 >= v19)
            {
              v24 = a2 - 1;
              do
              {
                if (v27 == v19)
                {
                  if (v23 >= v24 || *(_QWORD *)(v26 + 16) < *(_QWORD *)(v15 + 16))
                    break;
                }
                else if (v23 >= v24)
                {
                  break;
                }
                v28 = *--v24;
                v26 = v28;
                v27 = *(double *)(v28 + 232);
              }
              while (v27 >= v19);
            }
          }
        }
        else
        {
          v24 = a2 - 1;
          if (a2 == v7)
            goto LABEL_213;
          while (1)
          {
            v25 = *(double *)(*v24 + 232);
            if (v25 < v19 || v25 == v19 && *(_QWORD *)(*v24 + 16) < *(_QWORD *)(v15 + 16))
              break;
            v65 = v24-- == v7;
            if (v65)
              goto LABEL_213;
          }
        }
        if (v23 < v24)
        {
          v29 = *v24;
          i = v23;
          v30 = v24;
          while (1)
          {
            *i++ = v29;
            *v30 = v21;
            while (1)
            {
              if (i == a2)
                goto LABEL_213;
              v21 = *i;
              v31 = *(double *)(*i + 232);
              if (v31 >= v19 && (v31 != v19 || *(_QWORD *)(v21 + 16) >= *(_QWORD *)(v15 + 16)))
                break;
              ++i;
            }
            if (v30 == v7)
              goto LABEL_213;
            --v30;
            while (1)
            {
              v29 = *v30;
              v32 = *(double *)(*v30 + 232);
              if (v32 < v19 || v32 == v19 && *(_QWORD *)(v29 + 16) < *(_QWORD *)(v15 + 16))
                break;
              v65 = v30-- == v7;
              if (v65)
                goto LABEL_213;
            }
            if (i >= v30)
              goto LABEL_56;
          }
        }
        i = v23;
LABEL_56:
        v33 = i - 1;
        if (i - 1 != v7)
          *v7 = *v33;
        *v33 = v15;
        if (v23 < v24)
        {
LABEL_61:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **,false>(v7, i - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(v7, i - 1);
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(i, a2);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_61;
        }
        a2 = i - 1;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;

  v3 = *a2;
  v4 = *result;
  v5 = *(double *)(*a2 + 232);
  v6 = *(double *)(*result + 232);
  if (v5 < v6 || v5 == v6 && *(_QWORD *)(v3 + 16) < *(_QWORD *)(v4 + 16))
  {
    v7 = *a3;
    v8 = *(double *)(*a3 + 232);
    if (v8 < v5 || v8 == v5 && *(_QWORD *)(v7 + 16) < *(_QWORD *)(v3 + 16))
    {
      *result = v7;
LABEL_19:
      *a3 = v4;
      return result;
    }
    *result = v3;
    *a2 = v4;
    v15 = *a3;
    v16 = *(double *)(*a3 + 232);
    if (v16 < v6 || v16 == v6 && *(_QWORD *)(v15 + 16) < *(_QWORD *)(v4 + 16))
    {
      *a2 = v15;
      goto LABEL_19;
    }
  }
  else
  {
    v9 = *a3;
    v10 = *(double *)(*a3 + 232);
    if (v10 < v5 || v10 == v5 && *(_QWORD *)(v9 + 16) < *(_QWORD *)(v3 + 16))
    {
      *a2 = v9;
      *a3 = v3;
      v11 = *a2;
      v12 = *result;
      v13 = *(double *)(*a2 + 232);
      v14 = *(double *)(*result + 232);
      if (v13 < v14 || v13 == v14 && *(_QWORD *)(v11 + 16) < *(_QWORD *)(v12 + 16))
      {
        *result = v11;
        *a2 = v12;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(double *)(v6 + 232);
      v9 = *(double *)(*a1 + 232);
      if (v8 < v9 || v8 == v9 && *(_QWORD *)(v6 + 16) < *(_QWORD *)(v7 + 16))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v22 = a1 + 1;
      v23 = a1 + 2;
      v24 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v25 = *(a2 - 1);
      v26 = a1[3];
      v27 = *(double *)(v25 + 232);
      v28 = *(double *)(v26 + 232);
      if (v27 < v28 || v27 == v28 && *(_QWORD *)(v25 + 16) < *(_QWORD *)(v26 + 16))
      {
        *v24 = v25;
        *(a2 - 1) = v26;
        v29 = *v24;
        v30 = *v23;
        v31 = *(double *)(*v24 + 232);
        v32 = *(double *)(*v23 + 232);
        if (v31 < v32 || v31 == v32 && *(_QWORD *)(v29 + 16) < *(_QWORD *)(v30 + 16))
        {
          *v23 = v29;
          *v24 = v30;
          v33 = *v22;
          v34 = *(double *)(*v22 + 232);
          if (v31 < v34 || v31 == v34 && *(_QWORD *)(v29 + 16) < *(_QWORD *)(v33 + 16))
          {
            a1[1] = v29;
            a1[2] = v33;
            v35 = *a1;
            v36 = *(double *)(*a1 + 232);
            if (v31 < v36 || v31 == v36 && *(_QWORD *)(v29 + 16) < *(_QWORD *)(v35 + 16))
            {
              *a1 = v29;
              a1[1] = v35;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    v16 = *(double *)(*v11 + 232);
    v17 = *(double *)(*v10 + 232);
    if (v16 < v17 || v16 == v17 && *(_QWORD *)(v14 + 16) < *(_QWORD *)(v15 + 16))
    {
      *v11 = v15;
      v18 = a1;
      if (v10 != a1)
      {
        v19 = v12;
        while (1)
        {
          v20 = *(uint64_t *)((char *)a1 + v19 + 8);
          v21 = *(double *)(v20 + 232);
          if (v16 >= v21)
          {
            if (v16 != v21)
            {
              v18 = (uint64_t *)((char *)a1 + v19 + 16);
              goto LABEL_20;
            }
            if (*(_QWORD *)(v14 + 16) >= *(_QWORD *)(v20 + 16))
              break;
          }
          --v10;
          *(uint64_t *)((char *)a1 + v19 + 16) = v20;
          v19 -= 8;
          if (v19 == -16)
          {
            v18 = a1;
            goto LABEL_20;
          }
        }
        v18 = v10;
      }
LABEL_20:
      *v18 = v14;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::WebNotificationManagerProxy::getNotifications(WTF::URL const&,WTF::String const&,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &,WebKit::WebNotification **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(double *)(*a4 + 232);
  v12 = *(double *)(*a3 + 232);
  if (v11 < v12 || v11 == v12 && *(_QWORD *)(v9 + 16) < *(_QWORD *)(v10 + 16))
  {
    *a3 = v9;
    *a4 = v10;
    v13 = *a3;
    v14 = *a2;
    v15 = *(double *)(*a3 + 232);
    v16 = *(double *)(*a2 + 232);
    if (v15 < v16 || v15 == v16 && *(_QWORD *)(v13 + 16) < *(_QWORD *)(v14 + 16))
    {
      *a2 = v13;
      *a3 = v14;
      v17 = *a2;
      v18 = *a1;
      v19 = *(double *)(*a2 + 232);
      v20 = *(double *)(*a1 + 232);
      if (v19 < v20 || v19 == v20 && *(_QWORD *)(v17 + 16) < *(_QWORD *)(v18 + 16))
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t API::NotificationProvider::show()
{
  return 0;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  int v20;
  __int16 v21;
  char v22;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = v5;
  result = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  if (v5)
  {
    v9 = (_QWORD *)(result + 16);
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = v3;
    do
    {
      v12 = (_OWORD *)(v2 + 32 * v10);
      if (*v12 >= 2uLL)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v20 = -1640531527;
        v21 = 0;
        v22 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v20, (_QWORD *)(v2 + 32 * v10));
        v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        v16 = 0;
        do
        {
          v17 = v15 & v14;
          v18 = (_OWORD *)(v13 + 32 * v17);
          v15 = ++v16 + v17;
        }
        while (*v18 != 0);
        v19 = v12[1];
        *v18 = *v12;
        v18[1] = v19;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = v8 + 32 * v15;
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 32 * v22;
        *(_BYTE *)(a4 + 16) = 0;
        *(_OWORD *)(v16 + 16) = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = (_QWORD *)v16;
      v15 = ((_DWORD)v15 + v19) & v10;
      v16 = v8 + 32 * v15;
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *v18 = 0;
      v18[2] = 0;
      v18[3] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = (uint64_t)v18;
    }
  }
  *(_QWORD *)v16 = v11;
  *(_OWORD *)(v16 + 16) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = (uint64_t)result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v23 + 32 * v26;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = v6;
    do
    {
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2)
      {
        v13 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, (_QWORD *)v12);
        v14 = *(_OWORD *)(v12 + 16);
        *v13 = *(_OWORD *)v12;
        v13[1] = v14;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 32;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  result = v3 + 16;
  if (a1)
  {
    v5 = (_QWORD *)(v3 + 32);
    do
    {
      *(v5 - 2) = 0;
      *v5 = 0;
      v5[1] = 0;
      v5 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 32 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 32 * v9;
}

void WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>&>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v29 = -1640531527;
  v30 = 0;
  v31 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, a2);
  v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29) & v9;
  v11 = (_QWORD *)(v8 + 32 * v10);
  v13 = *v11;
  v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_15:
    *(_OWORD *)v11 = *(_OWORD *)a2;
    v17 = *a3;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    v18 = v11[2];
    v11[2] = v17;
    if (v18)
      CFRelease(*(CFTypeRef *)(v18 + 8));
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_27:
        v11 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (uint64_t)v11);
        v23 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_27;
    }
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = v23 + 32 * v26;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v14 = 0;
  v15 = 1;
  while (v12 != a2[1] || v13 != *a2)
  {
    if (!(v13 ^ 1 | v12))
      v14 = v11;
    v10 = ((_DWORD)v10 + v15) & v9;
    v11 = (_QWORD *)(v8 + 32 * v10);
    v13 = *v11;
    v12 = v11[1];
    ++v15;
    if (*(_OWORD *)v11 == 0)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = v14;
      }
      goto LABEL_15;
    }
  }
  v21 = *a1;
  if (*a1)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v21 + 32 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = *a3;
  CFRetain(*(CFTypeRef *)(*a3 + 8));
  v28 = v11[2];
  v11[2] = v27;
  if (v28)
    CFRelease(*(CFTypeRef *)(v28 + 8));
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int v29;
  __int16 v30;
  char v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v12 = (_QWORD *)(v10 + 16);
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v6 + 32 * v13;
      if (*(_QWORD *)v15 ^ 1 | *(_QWORD *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          v16 = v6 + 32 * v13;
          v17 = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
            CFRelease(*(CFTypeRef *)(v17 + 8));
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v29 = -1640531527;
          v30 = 0;
          v31 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, (_QWORD *)(v6 + 32 * v13));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = v18 + 32 * v22;
            v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v24 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (v24)
            CFRelease(*(CFTypeRef *)(v24 + 8));
          *(_OWORD *)v23 = *(_OWORD *)v15;
          v25 = v6 + 32 * v13;
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)(v23 + 16) = v26;
          v27 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          if (v15 == a3)
            v14 = v23;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

uint64_t WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t *v14;
  BOOL v15;
  int v17;
  __int16 v18;
  char v19;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v17 = -1640531527;
    v18 = 0;
    v19 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v17, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
    v6 = *a2;
    v7 = a2[1];
    v8 = v5 & v4;
    v9 = (uint64_t *)(v2 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (v11 == v7 && v10 == v6)
      return *(_QWORD *)(v2 + 32 * v8 + 16);
    v13 = 1;
    while (v10 | v11)
    {
      v8 = ((_DWORD)v8 + v13) & v4;
      v14 = (uint64_t *)(v2 + 32 * v8);
      v10 = *v14;
      v11 = v14[1];
      v15 = v11 == v7 && v10 == v6;
      ++v13;
      if (v15)
        return *(_QWORD *)(v2 + 32 * v8 + 16);
    }
  }
  return 0;
}

void WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *a1;
  if (*a1)
    v4 = (_QWORD *)(v3 + 32 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return;
  }
  v5 = a2[2];
  if (v5)
  {
    a2[2] = 0;
    v3 = *a1;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 32 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v6 = 0;
  }
  if (v6 != a2)
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(a1, a2);
}

void WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 32 * v7);
  if (v8 == *a2)
    return v2 + 32 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 32 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 32 * v7;
  }
  return v2 + 32 * *(unsigned int *)(v2 - 4);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidUpdateNotificationDecision>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1832;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)a2);
  LOBYTE(a2) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = a2;
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebNotificationManager::DidRemoveNotificationDecisions>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1830;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, *a2);
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DECE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DECE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::ScrollingTree *WTF::Detail::CallableWrapper<WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(void)::$_0,void>::call(WebCore::ScrollingTree *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WebCore::ScrollingTree **)(v1 + 8);
    if (result)
      return WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll(result);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1343;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebScriptMessageHandler::~WebScriptMessageHandler(WebKit::WebScriptMessageHandler *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E34DED10;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebScriptMessageHandler::~WebScriptMessageHandler(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebUserContentControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebUserContentControllerProxy&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 24), a3 + 16);
  v21 = *(unsigned int **)(a3 + 24);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

void `non-virtual thunk to'WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy(WebKit::WebUserContentControllerProxy *this, void *a2)
{
  WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy((WebKit::WebUserContentControllerProxy *)((char *)this - 16), a2);
}

{
  WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy((WebKit::WebUserContentControllerProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *WebKit::WebUserContentControllerProxy::contentWorldDestroyed(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  IPC::Encoder *v46;
  uint64_t v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 10);
  v4 = (uint64_t *)((char *)this + 80);
  v5 = v6;
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 3);
    v8 = *(_DWORD *)(v5 - 8);
    v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v5 + 8 * v12);
    if (v13 != v7)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        ++v14;
        if (v13 == v7)
          goto LABEL_8;
      }
      v12 = *(unsigned int *)(v5 - 4);
    }
LABEL_8:
    if (v12 != *(_DWORD *)(v5 - 4))
    {
      *(_QWORD *)(v5 + 8 * v12) = -1;
      ++*(_DWORD *)(*v4 - 16);
      v15 = *v4;
      v16 = *v4 ? *(_DWORD *)(v15 - 12) - 1 : -1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *v4;
      if (*v4)
      {
        v18 = 6 * *(_DWORD *)(v17 - 12);
        v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, v19 >> 1);
      }
    }
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v42);
  v21 = *((_QWORD *)this + 5);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    v23 = v21 + 8 * v22;
  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
  v37 = (char *)this + 40;
  v38 = v23;
  v39 = v23;
  v40 = v23;
  v41 = v21 + 8 * v22;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v37);
  for (i = v43; v43 != v38; i = v43)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    v47[0] = *((_QWORD *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v35, v47, 1uLL);
    v27 = *((_QWORD *)this + 4);
    v28 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v28 = 2815;
    *(_QWORD *)(v28 + 8) = v27;
    *(_QWORD *)(v28 + 528) = v28 + 16;
    *(_QWORD *)(v28 + 536) = v28 + 16;
    *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v28 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
    v46 = (IPC::Encoder *)v28;
    IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v28, (uint64_t)&v35);
    LOBYTE(v44) = 0;
    v45 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v46, 0, (uint64_t)&v44, 1);
    if (v45)
    {
      v30 = v44;
      v44 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
    v31 = v46;
    v46 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v29);
      WTF::fastFree(v32, v33);
    }
    v34 = v35;
    if (v35)
    {
      v35 = 0;
      v36 = 0;
      WTF::fastFree(v34, v29);
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v42);
  }
  return result;
}

void WebKit::WebUserContentControllerProxy::removeUserScript(WebKit::WebUserContentControllerProxy *this, API::UserScript *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  API::UserScript **v19;
  uint64_t v20;
  API::UserScript **v21;
  int v22;
  uint64_t v23;
  API::UserScript **v24;
  API::UserScript **v25;
  API::UserScript **v26;
  API::UserScript *v27;
  uint64_t v28;
  API::UserScript **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  IPC::Encoder *v41;

  v4 = *((_QWORD *)a2 + 14);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v37);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v32 = (char *)this + 40;
  v33 = v7;
  v34 = v7;
  v35 = v7;
  v36 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
  for (i = v38; v38 != v33; i = v38)
  {
    v9 = *(_QWORD *)(*(_QWORD *)i + 8);
    v10 = *(_QWORD *)(v4 + 24);
    v30 = *((_QWORD *)a2 + 2);
    v31 = v10;
    v11 = *((_QWORD *)this + 4);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2816;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v41 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v31);
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v30);
    LOBYTE(v39) = 0;
    v40 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v41, 0, (uint64_t)&v39, 1);
    if (v40)
    {
      v14 = v39;
      v39 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v15 = v41;
    v41 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v13);
      WTF::fastFree(v16, v17);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v37);
  }
  v18 = *((_QWORD *)this + 7);
  v19 = *(API::UserScript ***)(v18 + 16);
  v20 = *(unsigned int *)(v18 + 28);
  v21 = &v19[v20];
  if ((_DWORD)v20)
  {
    v22 = 0;
    v23 = *(_QWORD *)(v18 + 16);
    v24 = &v19[v20];
    v25 = v24;
    while (*v19 != a2)
    {
LABEL_22:
      ++v19;
      v23 += 8;
      if (v19 >= v21)
      {
        v19 = *(API::UserScript ***)(v18 + 16);
        v28 = *(unsigned int *)(v18 + 28);
        LODWORD(v20) = *(_DWORD *)(v18 + 28);
        v21 = v25;
        goto LABEL_25;
      }
    }
    v26 = v19;
    if (v25 != (API::UserScript **)(*(_QWORD *)(v18 + 16) + 8 * *(unsigned int *)(v18 + 28)))
    {
      if (v19 != v24)
      {
        memmove(v25, v24, v23 - (_QWORD)v24);
        v26 = (API::UserScript **)((char *)v25 + v23 - (_QWORD)v24);
        v27 = *v19;
        *v19 = 0;
        v24 = v19 + 1;
        if (!v27)
          goto LABEL_21;
        goto LABEL_20;
      }
      v26 = v25;
    }
    *v19 = 0;
    v24 = v19 + 1;
    v27 = a2;
LABEL_20:
    CFRelease(*((CFTypeRef *)v27 + 1));
LABEL_21:
    ++v22;
    v25 = v26;
    goto LABEL_22;
  }
  v28 = 0;
  v22 = 0;
  v24 = &v19[v20];
LABEL_25:
  v29 = &v19[v28];
  if (v24 != v29)
  {
    memmove(v21, v24, (char *)v29 - (char *)v24);
    LODWORD(v20) = *(_DWORD *)(v18 + 28);
  }
  *(_DWORD *)(v18 + 28) = v20 - v22;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WebKit::WebUserContentControllerProxy::removeAllUserScripts(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  API::ContentWorld *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  WTF *v25;
  int v26;
  WTF **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v33);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v28 = v4;
  v29 = v7;
  v30 = v7;
  v31 = v7;
  v32 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
  for (i = v34; v34 != v29; i = v34)
  {
    v9 = *(_QWORD *)(*(_QWORD *)i + 8);
    v35[0] = *((_QWORD *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, v35, 1uLL);
    v27 = &v25;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScripts>(v9, (uint64_t *)&v27, *((_QWORD *)this + 4));
    v11 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v11, v10);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
  }
  v12 = *((_QWORD *)this + 7);
  v13 = *(char **)(v12 + 16);
  v14 = *(unsigned int *)(v12 + 28);
  v15 = &v13[8 * v14];
  v16 = 0;
  if ((_DWORD)v14)
  {
    v17 = *(_QWORD *)(v12 + 16);
    v18 = &v13[8 * v14];
    v19 = v18;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v13 + 16))(*(_QWORD *)v13) == 28)
      {
        v20 = *(_QWORD *)v13;
        if (*(_QWORD *)v13)
          CFRetain(*(CFTypeRef *)(v20 + 8));
        v21 = *(API::ContentWorld **)(v20 + 112);
        CFRelease(*(CFTypeRef *)(v20 + 8));
        if (v21 == a2)
        {
          v22 = v13;
          if (v19 != (char *)(*(_QWORD *)(v12 + 16) + 8 * *(unsigned int *)(v12 + 28)))
          {
            if (v13 == v18)
            {
              v22 = v19;
            }
            else
            {
              memmove(v19, v18, v17 - (_QWORD)v18);
              v22 = &v19[v17 - (_QWORD)v18];
            }
          }
          v23 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          v18 = v13 + 8;
          if (v23)
            CFRelease(*(CFTypeRef *)(v23 + 8));
          ++v16;
          v19 = v22;
        }
      }
      v13 += 8;
      v17 += 8;
    }
    while (v13 < v15);
    v13 = *(char **)(v12 + 16);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
    v15 = v19;
  }
  else
  {
    v18 = &v13[8 * v14];
  }
  v24 = &v13[8 * v14];
  if (v18 != v24)
  {
    memmove(v15, v18, v24 - v18);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
  }
  *(_DWORD *)(v12 + 28) = v14 - v16;
}

void WebKit::WebUserContentControllerProxy::addUserStyleSheet(WebKit::WebUserContentControllerProxy *this, API::UserStyleSheet *a2)
{
  CFTypeRef *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  void *v38;
  void *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  CFTypeRef *v43;
  WebKit::WebUserContentControllerProxy *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  IPC::Encoder *v56;
  __int128 v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[16];
  _BYTE v63[16];
  __int128 v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = (CFTypeRef *)*((_QWORD *)a2 + 16);
  CFRetain(v4[1]);
  v43 = v4;
  WebKit::WebUserContentControllerProxy::addContentWorld((uint64_t)this, (API::ContentWorld *)v4);
  v44 = this;
  v5 = *((_QWORD *)this + 8);
  v6 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v6 == *(_DWORD *)(v5 + 24))
  {
    v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6 + 1)
      v9 = v6 + 1;
    else
      v9 = v8;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v9);
    v10 = *(unsigned int *)(v5 + 28);
    v11 = *(_QWORD *)(v5 + 16);
    CFRetain(*((CFTypeRef *)a2 + 1));
    v12 = *(_DWORD *)(v5 + 28);
    *(_QWORD *)(v11 + 8 * v10) = a2;
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 16);
    CFRetain(*((CFTypeRef *)a2 + 1));
    *(_QWORD *)(v13 + 8 * v6) = a2;
    v12 = *(_DWORD *)(v5 + 28);
  }
  *(_DWORD *)(v5 + 28) = v12 + 1;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v44 + 5, &v52);
  v14 = *((_QWORD *)v44 + 5);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    v16 = v14 + 8 * v15;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v47 = (char *)v44 + 40;
  v48 = v16;
  v49 = v16;
  v50 = v16;
  v51 = v14 + 8 * v15;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v47);
  for (i = v53; v53 != v48; i = v53)
  {
    v18 = *(_QWORD *)(*(_QWORD *)i + 8);
    v19 = v43[3];
    v20 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
    *(_QWORD *)&v57 = *((_QWORD *)a2 + 2);
    *((_QWORD *)&v57 + 1) = v19;
    if (v20)
      *(_DWORD *)v20 += 2;
    v58 = v20;
    v21 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
    if (v21)
      *(_DWORD *)v21 += 2;
    v59 = v21;
    v22 = *(_OWORD *)((char *)a2 + 56);
    v60 = *(_OWORD *)((char *)a2 + 40);
    v61 = v22;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v62, (uint64_t)a2 + 72);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v63, (uint64_t)a2 + 88);
    v64 = *(_OWORD *)((char *)a2 + 104);
    v65 = *((_BYTE *)a2 + 120);
    v45 = 0;
    v46 = 0;
    v23 = WTF::fastMalloc((WTF *)0x78);
    LODWORD(v46) = 1;
    v45 = v23;
    v24 = HIDWORD(v46);
    v25 = v23 + 120 * HIDWORD(v46);
    *(_OWORD *)v25 = v57;
    v26 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    *(_QWORD *)(v25 + 16) = v26;
    v27 = v59;
    if (v59)
      *(_DWORD *)v59 += 2;
    v28 = v23 + 120 * v24;
    *(_QWORD *)(v28 + 24) = v27;
    v29 = v61;
    *(_OWORD *)(v28 + 32) = v60;
    *(_OWORD *)(v28 + 48) = v29;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v28 + 64, (uint64_t)v62);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v28 + 80, (uint64_t)v63);
    v30 = v65;
    *(_OWORD *)(v28 + 96) = v64;
    *(_BYTE *)(v28 + 112) = v30;
    ++HIDWORD(v46);
    v31 = *((_QWORD *)v44 + 4);
    v32 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v32 = 2808;
    *(_QWORD *)(v32 + 8) = v31;
    *(_QWORD *)(v32 + 528) = v32 + 16;
    *(_QWORD *)(v32 + 536) = v32 + 16;
    *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v32 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
    v56 = (IPC::Encoder *)v32;
    IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v32, (uint64_t)&v45);
    LOBYTE(v54) = 0;
    v55 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v56, 0, (uint64_t)&v54, 1);
    if (v55)
    {
      v34 = v54;
      v54 = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
    v35 = v56;
    v56 = 0;
    if (v35)
    {
      IPC::Encoder::~Encoder(v35, v33);
      WTF::fastFree(v36, v37);
    }
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v33);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v38);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v39);
    v41 = v59;
    v59 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v40);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v58;
    v58 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v40);
      else
        *(_DWORD *)v42 -= 2;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v52);
  }
  CFRelease(v43[1]);
}

void WebKit::WebUserContentControllerProxy::removeUserStyleSheet(WebKit::WebUserContentControllerProxy *this, API::UserStyleSheet *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  API::UserStyleSheet **v19;
  uint64_t v20;
  API::UserStyleSheet **v21;
  int v22;
  uint64_t v23;
  API::UserStyleSheet **v24;
  API::UserStyleSheet **v25;
  API::UserStyleSheet **v26;
  API::UserStyleSheet *v27;
  uint64_t v28;
  API::UserStyleSheet **v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  IPC::Encoder *v40;

  v4 = *((_QWORD *)a2 + 16);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v36);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v31 = (char *)this + 40;
  v32 = v7;
  v33 = v7;
  v34 = v7;
  v35 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
  for (i = v37; v37 != v32; i = v37)
  {
    v9 = *(_QWORD *)(*(_QWORD *)i + 8);
    v30 = *(_QWORD *)(v4 + 24);
    v10 = *((_QWORD *)a2 + 2);
    v11 = *((_QWORD *)this + 4);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2818;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v40 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v30);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v10;
    LOBYTE(v38) = 0;
    v39 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v40, 0, (uint64_t)&v38, 1);
    if (v39)
    {
      v14 = v38;
      v38 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v15 = v40;
    v40 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v13);
      WTF::fastFree(v16, v17);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
  }
  v18 = *((_QWORD *)this + 8);
  v19 = *(API::UserStyleSheet ***)(v18 + 16);
  v20 = *(unsigned int *)(v18 + 28);
  v21 = &v19[v20];
  if ((_DWORD)v20)
  {
    v22 = 0;
    v23 = *(_QWORD *)(v18 + 16);
    v24 = &v19[v20];
    v25 = v24;
    while (*v19 != a2)
    {
LABEL_22:
      ++v19;
      v23 += 8;
      if (v19 >= v21)
      {
        v19 = *(API::UserStyleSheet ***)(v18 + 16);
        v28 = *(unsigned int *)(v18 + 28);
        LODWORD(v20) = *(_DWORD *)(v18 + 28);
        v21 = v25;
        goto LABEL_25;
      }
    }
    v26 = v19;
    if (v25 != (API::UserStyleSheet **)(*(_QWORD *)(v18 + 16) + 8 * *(unsigned int *)(v18 + 28)))
    {
      if (v19 != v24)
      {
        memmove(v25, v24, v23 - (_QWORD)v24);
        v26 = (API::UserStyleSheet **)((char *)v25 + v23 - (_QWORD)v24);
        v27 = *v19;
        *v19 = 0;
        v24 = v19 + 1;
        if (!v27)
          goto LABEL_21;
        goto LABEL_20;
      }
      v26 = v25;
    }
    *v19 = 0;
    v24 = v19 + 1;
    v27 = a2;
LABEL_20:
    CFRelease(*((CFTypeRef *)v27 + 1));
LABEL_21:
    ++v22;
    v25 = v26;
    goto LABEL_22;
  }
  v28 = 0;
  v22 = 0;
  v24 = &v19[v20];
LABEL_25:
  v29 = &v19[v28];
  if (v24 != v29)
  {
    memmove(v21, v24, (char *)v29 - (char *)v24);
    LODWORD(v20) = *(_DWORD *)(v18 + 28);
  }
  *(_DWORD *)(v18 + 28) = v20 - v22;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WebKit::WebUserContentControllerProxy::removeAllUserStyleSheets(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  API::ContentWorld *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  WTF *v25;
  int v26;
  WTF **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v33);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v28 = v4;
  v29 = v7;
  v30 = v7;
  v31 = v7;
  v32 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
  for (i = v34; v34 != v29; i = v34)
  {
    v9 = *(_QWORD *)(*(_QWORD *)i + 8);
    v35[0] = *((_QWORD *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, v35, 1uLL);
    v27 = &v25;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserStyleSheets>(v9, (uint64_t *)&v27, *((_QWORD *)this + 4));
    v11 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v11, v10);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
  }
  v12 = *((_QWORD *)this + 8);
  v13 = *(char **)(v12 + 16);
  v14 = *(unsigned int *)(v12 + 28);
  v15 = &v13[8 * v14];
  v16 = 0;
  if ((_DWORD)v14)
  {
    v17 = *(_QWORD *)(v12 + 16);
    v18 = &v13[8 * v14];
    v19 = v18;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v13 + 16))(*(_QWORD *)v13) == 29)
      {
        v20 = *(_QWORD *)v13;
        if (*(_QWORD *)v13)
          CFRetain(*(CFTypeRef *)(v20 + 8));
        v21 = *(API::ContentWorld **)(v20 + 128);
        CFRelease(*(CFTypeRef *)(v20 + 8));
        if (v21 == a2)
        {
          v22 = v13;
          if (v19 != (char *)(*(_QWORD *)(v12 + 16) + 8 * *(unsigned int *)(v12 + 28)))
          {
            if (v13 == v18)
            {
              v22 = v19;
            }
            else
            {
              memmove(v19, v18, v17 - (_QWORD)v18);
              v22 = &v19[v17 - (_QWORD)v18];
            }
          }
          v23 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          v18 = v13 + 8;
          if (v23)
            CFRelease(*(CFTypeRef *)(v23 + 8));
          ++v16;
          v19 = v22;
        }
      }
      v13 += 8;
      v17 += 8;
    }
    while (v13 < v15);
    v13 = *(char **)(v12 + 16);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
    v15 = v19;
  }
  else
  {
    v18 = &v13[8 * v14];
  }
  v24 = &v13[8 * v14];
  if (v18 != v24)
  {
    memmove(v15, v18, v24 - v18);
    LODWORD(v14) = *(_DWORD *)(v12 + 28);
  }
  *(_DWORD *)(v12 + 28) = v14 - v16;
}

void WebKit::WebUserContentControllerProxy::removeAllUserStyleSheets(WebKit::WebUserContentControllerProxy *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  void *v28;
  WTF *v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t *v40;

  v40 = 0;
  v2 = *((_QWORD *)this + 8);
  v3 = *(uint64_t **)(v2 + 16);
  v4 = *(unsigned int *)(v2 + 28);
  v5 = &v3[v4];
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v3 + 16))(*v3) != 29)
    {
      ++v3;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        break;
      }
    }
    v7 = v3;
    v3 = *(uint64_t **)(v2 + 16);
    v8 = *(unsigned int *)(v2 + 28);
  }
  else
  {
    v8 = 0;
    v7 = *(uint64_t **)(v2 + 16);
  }
  v9 = &v3[v8];
  if (v7 == v9)
  {
    v38 = 0;
    v39 = 0;
    v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    v16 = 0;
    v14 = 0;
LABEL_26:
    v19 = 0;
    v20 = 1;
    goto LABEL_29;
  }
  do
  {
    v10 = *(_QWORD *)(*v7 + 128);
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v31 = v10;
    LODWORD(v38) = 0;
    WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)&v36, (uint64_t *)&v40, &v31, &v38);
    ++*(_DWORD *)(v36 + 8);
    if (v31)
      CFRelease(*(CFTypeRef *)(v31 + 8));
    v11 = v7 + 1;
    while (v11 - 1 != v5 && v11 != v5)
    {
      v13 = *v11++;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) == 29)
      {
        v7 = v11 - 1;
        goto LABEL_19;
      }
    }
    v7 = v5;
LABEL_19:
    ;
  }
  while (v7 != v9);
  v14 = v40;
  v38 = 0;
  v39 = 0;
  if (!v40)
  {
    v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    v16 = 0;
    goto LABEL_26;
  }
  v15 = *((unsigned int *)v40 - 3);
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    LODWORD(v39) = v15;
    v38 = (WTF *)v16;
  }
  else
  {
    v16 = 0;
  }
  v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v14);
  v20 = 0;
  v19 = &v14[2 * *((unsigned int *)v14 - 1)];
LABEL_29:
  if (v19 != v17)
  {
    v21 = 0;
    do
    {
      v22 = *v17;
      v17 += 2;
      *(_QWORD *)(v16 + 8 * v21) = *(_QWORD *)(v22 + 24);
      while (v17 != v18)
      {
        if ((unint64_t)(*v17 + 1) > 1)
          goto LABEL_36;
        v17 += 2;
      }
      v17 = v18;
LABEL_36:
      ++v21;
    }
    while (v17 != v19);
    HIDWORD(v39) = v21;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v36);
  v23 = *((_QWORD *)this + 5);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    v25 = v23 + 8 * v24;
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  v31 = (uint64_t)this + 40;
  v32 = v25;
  v33 = v25;
  v34 = v25;
  v35 = v23 + 8 * v24;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
  for (i = v37; v37 != v32; i = v37)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    v30 = &v38;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserStyleSheets>(v27, (uint64_t *)&v30, *((_QWORD *)this + 4));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*((_QWORD *)this + 8) + 16, 0);
  v29 = v38;
  if (v38)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v29, v28);
  }
  if ((v20 & 1) == 0)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v14, v28);
}

uint64_t WebKit::WebUserContentControllerProxy::removeUserMessageHandlerForName(uint64_t this, const WTF::StringImpl **a2, API::ContentWorld *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  IPC::Encoder *v47;

  v5 = this;
  v7 = (uint64_t *)(this + 72);
  v6 = *(_QWORD *)(this + 72);
  if (v6)
  {
    v8 = *(unsigned int *)(v6 - 4);
    v9 = (_QWORD *)(v6 + 16 * v8);
    if (*(_DWORD *)(v6 - 12))
    {
      v10 = *(_QWORD **)(this + 72);
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = *(_QWORD **)(this + 72);
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v10 = (_QWORD *)(v6 + 16 * v8);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (_QWORD *)(v6 + 16 * v8);
  if (v6)
  {
LABEL_8:
    v12 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_13;
  }
  v12 = 0;
LABEL_13:
  if (v12 == v10)
    return this;
  while (1)
  {
    v13 = *(WTF **)(v10[1] + 32);
    if (v13)
      break;
    this = WTF::equal(0, *a2, a3);
    if ((this & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v10[1] + 40) + 24) == *((_QWORD *)a3 + 3))
      goto LABEL_33;
LABEL_24:
    v17 = v10 + 2;
    v10 = v9;
    if (v17 != v9)
    {
      v10 = v17;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
    if (v10 == v12)
      return this;
  }
  *(_DWORD *)v13 += 2;
  this = WTF::equal(v13, *a2, a3);
  if (!(_DWORD)this)
  {
    if (*(_DWORD *)v13 == 2)
      this = WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v10[1] + 40) + 24);
  v16 = *((_QWORD *)a3 + 3);
  if (*(_DWORD *)v13 == 2)
    this = WTF::StringImpl::destroy(v13, v14);
  else
    *(_DWORD *)v13 -= 2;
  if (v15 != v16)
    goto LABEL_24;
LABEL_33:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v5 + 40), &v43);
  v18 = *(_QWORD *)(v5 + 40);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    v20 = v18 + 8 * v19;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v38 = v5 + 40;
  v39 = v20;
  v40 = v20;
  v41 = v20;
  v42 = v18 + 8 * v19;
  this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v38);
  for (i = v44; v44 != v39; i = v44)
  {
    v22 = *(_QWORD *)(*(_QWORD *)i + 8);
    v37 = *((_QWORD *)a3 + 3);
    v23 = *(_QWORD *)(v10[1] + 16);
    v24 = *(_QWORD *)(v5 + 32);
    v25 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v25 = 2817;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 528) = v25 + 16;
    *(_QWORD *)(v25 + 536) = v25 + 16;
    *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v25 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
    v47 = (IPC::Encoder *)v25;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v25, &v37);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v23;
    LOBYTE(v45) = 0;
    v46 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v22, &v47, 0, (uint64_t)&v45, 1);
    if (v46)
    {
      v27 = v45;
      v45 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v28 = v47;
    v47 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v26);
      WTF::fastFree(v29, v30);
    }
    this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v43);
  }
  v31 = *v7;
  if (!*v7 || (v31 += 16 * *(unsigned int *)(v31 - 4), (_QWORD *)v31 != v10))
  {
    if ((_QWORD *)v31 != v10)
    {
      this = v10[1];
      *v10 = -1;
      v10[1] = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
      ++*(_DWORD *)(*v7 - 16);
      v32 = *v7;
      if (*v7)
        v33 = *(_DWORD *)(v32 - 12) - 1;
      else
        v33 = -1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v7;
      if (*v7)
      {
        v35 = 6 * *(_DWORD *)(v34 - 12);
        v36 = *(_DWORD *)(v34 - 4);
        if (v35 < v36 && v36 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7, v36 >> 1);
      }
    }
  }
  return this;
}

_DWORD *WebKit::WebUserContentControllerProxy::removeAllUserMessageHandlers(WebKit::WebUserContentControllerProxy *this, API::ContentWorld *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *result;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  unsigned int v42;
  WTF *v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  IPC::Encoder *v54;
  uint64_t v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v50);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v45 = v4;
  v46 = v7;
  v47 = v7;
  v48 = v7;
  v49 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v45);
  for (i = v51; v51 != v46; i = v51)
  {
    v10 = *(_QWORD *)(*(_QWORD *)i + 8);
    v55[0] = *((_QWORD *)a2 + 3);
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v43, v55, 1uLL);
    v11 = *((_QWORD *)this + 4);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2811;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v54 = (IPC::Encoder *)v12;
    IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v12, (uint64_t)&v43);
    LOBYTE(v52) = 0;
    v53 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v54, 0, (uint64_t)&v52, 1);
    if (v53)
    {
      v14 = v52;
      v52 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v15 = v54;
    v54 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v13);
      WTF::fastFree(v16, v17);
    }
    v18 = v43;
    if (v43)
    {
      v43 = 0;
      v44 = 0;
      WTF::fastFree(v18, v13);
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v50);
  }
  v21 = *((_QWORD *)this + 9);
  v19 = (uint64_t *)((char *)this + 72);
  v20 = v21;
  if (v21)
  {
    v22 = *(_DWORD *)(v20 - 4);
    if (v22)
    {
      v23 = 0;
      v24 = v22 - 1;
      do
      {
        v25 = v24;
        v26 = (_QWORD *)(v20 + 16 * v24);
        if ((unint64_t)(*v26 + 1) >= 2)
        {
          v27 = v20 + 16 * v24;
          v29 = *(_DWORD **)(v27 + 8);
          v28 = (_QWORD *)(v27 + 8);
          result = v29;
          if (*(_QWORD *)(*((_QWORD *)v29 + 5) + 24) == *((_QWORD *)a2 + 3))
          {
            *v26 = -1;
            *v28 = 0;
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
            ++v23;
          }
        }
        --v24;
      }
      while (v25);
      v30 = *v19;
      if (v23)
      {
        *(_DWORD *)(v30 - 16) += v23;
        v31 = *v19;
        if (*v19)
          v32 = *(_DWORD *)(v31 - 12);
        else
          v32 = 0;
        *(_DWORD *)(v31 - 12) = v32 - v23;
        v30 = *v19;
      }
      if (v30)
      {
        v33 = *(_DWORD *)(v30 - 4);
        v34 = *(unsigned int *)(v30 - 12);
        if (v33 >= 9 && 6 * (int)v34 < v33)
        {
          v36 = (v34 - 1) | ((v34 - 1) >> 1) | ((((_DWORD)v34 - 1) | ((v34 - 1) >> 1)) >> 2);
          v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
          v38 = (v37 | HIWORD(v37)) + 1;
          if (v38 > 0x400)
          {
            if (v38 > 2 * v34)
              goto LABEL_38;
          }
          else if (3 * v38 > 4 * v34)
          {
LABEL_36:
            v39 = (double)v34;
            v40 = (double)v38;
            v41 = 0.604166667;
LABEL_39:
            if (v40 * v41 <= v39)
              LODWORD(v38) = 2 * v38;
            if (v38 <= 8)
              v42 = 8;
            else
              v42 = v38;
            return (_DWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v19, v42);
          }
          LODWORD(v38) = 2 * v38;
          if (v38 <= 0x400)
            goto LABEL_36;
LABEL_38:
          v39 = (double)v34;
          v40 = (double)v38;
          v41 = 0.416666667;
          goto LABEL_39;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebUserContentControllerProxy::removeAllUserMessageHandlers(WebKit::WebUserContentControllerProxy *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v15);
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v10 = v2;
  v11 = v5;
  v12 = v5;
  v13 = v5;
  v14 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
  while (v16 != v11)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    v9 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScriptMessageHandlers>(v7, (uint64_t)&v9, *((_QWORD *)this + 4), 0);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v15);
  }
  result = *((_QWORD *)this + 9);
  if (result)
  {
    *((_QWORD *)this + 9) = 0;
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(result, v6);
  }
  return result;
}

void WebKit::WebUserContentControllerProxy::didPostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, WTF *a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::SerializedScriptValue *v30;
  void *v31;
  WebCore::SerializedScriptValue *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  int v49;
  unsigned int *v50;
  uint64_t v51;
  WebCore::SerializedScriptValue *v52;

  WebKit::WebProcessProxy::webPage(a2, &v51);
  v13 = v51;
  if (v51)
  {
    if ((unint64_t)(a4 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_40:
      CFRelease(*(CFTypeRef *)(v13 + 8));
      return;
    }
    v14 = *(_QWORD *)(a1 + 72);
    if (!v14)
    {
LABEL_39:
      v13 = v51;
      if (!v51)
        return;
      goto LABEL_40;
    }
    v15 = *(_DWORD *)(v14 - 8);
    v16 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(_QWORD *)(v14 + 16 * v19);
    if (v20 != a4)
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(_QWORD *)(v14 + 16 * v19);
        ++v21;
        if (v20 == a4)
          goto LABEL_8;
      }
      goto LABEL_39;
    }
LABEL_8:
    v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
    if (!v22)
      goto LABEL_39;
    ++*(_DWORD *)(v22 + 8);
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 24) + 24))(*(_QWORD *)(v22 + 24));
    v24 = *(_QWORD *)(v22 + 24);
    v25 = *(_QWORD *)(v22 + 40);
    if ((v23 & 1) != 0)
    {
      v47 = 0;
      v48 = 0;
      v49 = (int)a6;
      if (!a6)
      {
LABEL_14:
        WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v50);
        v28 = (uint64_t)v50;
        v29 = *a7;
        *a7 = 0;
        v30 = (WebCore::SerializedScriptValue *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v30 = &off_1E34DEE10;
        *((_QWORD *)v30 + 1) = v29;
        v52 = v30;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, WebCore::SerializedScriptValue **))(*(_QWORD *)v24 + 32))(v24, v13, a3, v25, v28, &v52);
        v32 = v52;
        v52 = 0;
        if (v32)
          (*(void (**)(WebCore::SerializedScriptValue *))(*(_QWORD *)v32 + 8))(v32);
        v33 = v50;
        v50 = 0;
        if (v33)
        {
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            v52 = (WebCore::SerializedScriptValue *)v33;
            WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v52);
          }
        }
        v36 = v47;
        if (v47)
        {
          v47 = 0;
          v48 = 0;
          WTF::fastFree(v36, v31);
        }
LABEL_36:
        if (*(_DWORD *)(v22 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        else
          --*(_DWORD *)(v22 + 8);
        goto LABEL_39;
      }
      if (!((unint64_t)a6 >> 32))
      {
        v26 = (WTF::StringImpl *)WTF::fastMalloc(a6);
        v48 = (int)a6;
        v47 = v26;
        do
        {
          v27 = *a5++;
          *(_BYTE *)v26 = v27;
          v26 = (WTF::StringImpl *)((char *)v26 + 1);
          a6 = (WTF *)((char *)a6 - 1);
        }
        while (a6);
        goto LABEL_14;
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x19745CD6CLL);
    }
    v47 = 0;
    v48 = 0;
    v49 = (int)a6;
    if (a6)
    {
      if ((unint64_t)a6 >> 32)
        goto LABEL_42;
      v37 = (WTF::StringImpl *)WTF::fastMalloc(a6);
      v48 = (int)a6;
      v47 = v37;
      do
      {
        v38 = *a5++;
        *(_BYTE *)v37 = v38;
        v37 = (WTF::StringImpl *)((char *)v37 + 1);
        a6 = (WTF *)((char *)a6 - 1);
      }
      while (a6);
    }
    WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v24 + 16))(v24, v13, a3, v25, v50);
    v40 = v50;
    v50 = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        v52 = (WebCore::SerializedScriptValue *)v40;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v52);
      }
    }
    v43 = v47;
    if (v47)
    {
      v47 = 0;
      v48 = 0;
      WTF::fastFree(v43, v39);
    }
    v47 = 0;
    v44 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v44 + 16))(v44, 0, 0, &v47);
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v46 = v47;
    v47 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    goto LABEL_36;
  }
}

_QWORD *WebKit::WebUserContentControllerProxy::removeContentRuleList(WebKit::WebUserContentControllerProxy *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  char v56;
  IPC::Encoder *v57;

  v5 = (uint64_t *)((char *)this + 104);
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      v12 = v6 + 56 * (v9 & v7);
      v13 = *(WTF **)v12;
      if (*(_QWORD *)v12 != -1)
      {
        if (!v13)
        {
          v14 = *v5;
          if (!*v5)
            goto LABEL_28;
          v12 = v14 + 56 * *(unsigned int *)(v14 - 4);
          goto LABEL_13;
        }
        if ((WTF::equal(v13, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v14 = *v5;
    if (!*v5)
      goto LABEL_14;
LABEL_13:
    v14 += 56 * *(unsigned int *)(v14 - 4);
    if (v14 == v12)
      goto LABEL_28;
LABEL_14:
    if (v14 != v12)
    {
      WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)a2);
      v16 = *(WTF::StringImpl **)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v17)
        CFRelease(*(CFTypeRef *)(v17 + 8));
      ++*(_DWORD *)(*v5 - 16);
      v18 = *v5;
      if (*v5)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v5;
      if (*v5)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v22 >> 1);
      }
    }
  }
LABEL_28:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v53);
  v23 = *((_QWORD *)this + 5);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    v25 = v23 + 8 * v24;
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  v48 = (char *)this + 40;
  v49 = v25;
  v50 = v25;
  v51 = v25;
  v52 = v23 + 8 * v24;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v48);
  for (j = v54; v54 != v49; j = v54)
  {
    v27 = *(_QWORD *)(*(_QWORD *)j + 8);
    v28 = *((_QWORD *)this + 4);
    v29 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v29 = 2814;
    *(_QWORD *)(v29 + 8) = v28;
    *(_QWORD *)(v29 + 528) = v29 + 16;
    *(_QWORD *)(v29 + 536) = v29 + 16;
    *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v29 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
    v57 = (IPC::Encoder *)v29;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)a2);
    LOBYTE(v55[0]) = 0;
    v56 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v27, &v57, 0, (uint64_t)v55, 1);
    if (v56)
    {
      v31 = v55[0];
      v55[0] = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    v32 = v57;
    v57 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v30);
      WTF::fastFree(v33, v34);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v53);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 11, &v53);
  v35 = *((_QWORD *)this + 11);
  if (v35)
  {
    v36 = *(unsigned int *)(v35 - 4);
    v37 = v35 + 8 * v36;
  }
  else
  {
    v37 = 0;
    v36 = 0;
  }
  v48 = (char *)this + 88;
  v49 = v37;
  v50 = v37;
  v51 = v37;
  v52 = v35 + 8 * v36;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v48);
  for (k = v54; v54 != v49; k = v54)
  {
    v40 = *(_QWORD *)(*(_QWORD *)k + 8);
    v47 = *((_QWORD *)this + 4);
    v41 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v41 = 284;
    *(_QWORD *)(v41 + 8) = 0;
    *(_QWORD *)(v41 + 528) = v41 + 16;
    *(_QWORD *)(v41 + 536) = v41 + 16;
    *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v41 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
    v57 = (IPC::Encoder *)v41;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v41, &v47);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)a2);
    LOBYTE(v55[0]) = 0;
    v56 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v40, &v57, 0, (uint64_t)v55, 1);
    if (v56)
    {
      v43 = v55[0];
      v55[0] = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    v44 = v57;
    v57 = 0;
    if (v44)
    {
      IPC::Encoder::~Encoder(v44, v42);
      WTF::fastFree(v45, v46);
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v53);
  }
  return result;
}

uint64_t WebKit::Authenticator::handleRequest(uint64_t a1, uint64_t a2)
{
  WTF::RunLoop *v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = (WTF::RunLoop *)WebKit::WebAuthenticationRequestData::operator=(a1 + 32, a2);
  WTF::RunLoop::main(v3);
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a1 + 16), a1);
  v4 = *(unsigned int **)(a1 + 16);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E34DEE38;
  v6[1] = v4;
  v6[2] = a1;
  v8 = v6;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::WebAuthenticationRequestData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  __int128 v9;
  __int128 v10;

  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a1, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1> const&>(a1 + 24, a2 + 24);
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 328), (unsigned int **)(a2 + 328));
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  v4 = *(_QWORD *)(a2 + 344);
  if (v4)
    CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v4;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 361) = *(_OWORD *)(a2 + 361);
  *(_OWORD *)(a1 + 352) = v6;
  *(_WORD *)(a1 + 384) = *(_WORD *)(a2 + 384);
  WebCore::ResourceRequestBase::operator=(a1 + 392, a2 + 392);
  v7 = *(_QWORD *)(a2 + 584);
  if (v7)
    CFRetain(*(CFTypeRef *)(a2 + 584));
  v8 = *(const void **)(a1 + 584);
  *(_QWORD *)(a1 + 584) = v7;
  if (v8)
    CFRelease(v8);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 592, a2 + 592);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 624), (WTF::StringImpl *)(a2 + 624));
  v9 = *(_OWORD *)(a2 + 662);
  v10 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v10;
  *(_OWORD *)(a1 + 662) = v9;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 680), (WTF::StringImpl *)(a2 + 680));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 688), (unsigned int **)(a2 + 688));
  *(_WORD *)(a1 + 696) = *(_WORD *)(a2 + 696);
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SecurityOriginData,false> const&>(a1 + 704, a2 + 704);
  return a1;
}

_QWORD *WebKit::Authenticator::receiveRespond(_QWORD *result)
{
  uint64_t v1;

  v1 = result[3];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

void *WebKit::AuthenticatorTransportService::create@<X0>(int a1@<W0>, uint64_t *a2@<X1>, WebKit::HidService **a3@<X8>)
{
  WebKit::HidService *v5;
  void *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  switch(a1)
  {
    case 0:
      v5 = (WebKit::HidService *)WTF::fastMalloc((WTF *)0x28);
      result = WebKit::HidService::HidService(v5, (WebKit::AuthenticatorTransportServiceObserver *)a2);
      break;
    case 1:
      v5 = (WebKit::HidService *)WTF::fastMalloc((WTF *)0x48);
      result = WebKit::NfcService::NfcService(v5, (WebKit::AuthenticatorTransportServiceObserver *)a2);
      break;
    case 3:
      v5 = (WebKit::HidService *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v5 = off_1E34AE8F8;
      *((_QWORD *)v5 + 1) = 0;
      result = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 1, (uint64_t)a2);
      v7 = (unsigned int *)a2[1];
      if (v7)
      {
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 + 1, v7));
      }
      goto LABEL_9;
    case 6:
      v5 = (WebKit::HidService *)WTF::fastMalloc((WTF *)0x58);
      result = WebKit::CcidService::CcidService(v5, (WebKit::AuthenticatorTransportServiceObserver *)a2);
      break;
    default:
      v5 = (WebKit::HidService *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v5 = off_1E34AE8F8;
      *((_QWORD *)v5 + 1) = 0;
      result = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 1, (uint64_t)a2);
      v7 = (unsigned int *)a2[1];
      if (v7)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
LABEL_9:
      *((_QWORD *)v5 + 2) = v7;
      *(_QWORD *)v5 = off_1E34CC410;
      break;
  }
  *a3 = v5;
  return result;
}

uint64_t WebKit::AuthenticatorTransportService::createMock@<X0>(int a1@<W0>, WebKit::AuthenticatorTransportServiceObserver *a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  WebKit::NfcService *v10;
  WebKit::CcidService *v11;

  switch(a1)
  {
    case 0:
      v9 = WTF::fastMalloc((WTF *)0xC8);
      result = WebKit::MockHidService::MockHidService(v9, a2, (uint64_t)a3);
      break;
    case 1:
      v10 = (WebKit::NfcService *)WTF::fastMalloc((WTF *)0xE8);
      result = (uint64_t)WebKit::MockNfcService::MockNfcService(v10, a2, a3);
      break;
    case 6:
      v11 = (WebKit::CcidService *)WTF::fastMalloc((WTF *)0xF8);
      result = (uint64_t)WebKit::MockCcidService::MockCcidService(v11, a2, a3);
      break;
    default:
      v7 = WTF::fastMalloc((WTF *)0xB8);
      result = WebKit::MockLocalService::MockLocalService(v7, (uint64_t)a2, a3);
      break;
  }
  *a4 = result;
  return result;
}

uint64_t WebKit::AuthenticatorTransportService::startDiscovery(WebKit::AuthenticatorTransportService *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34DEE60;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::AuthenticatorTransportService::restartDiscovery(WebKit::AuthenticatorTransportService *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34DEE88;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)104>::type()
{
  return 104;
}

void API::ObjectImpl<(API::Object::Type)104>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*(_QWORD *)v4 != -1)
      {
        v5 = *(WTF::StringImpl **)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
          CFRelease(*(CFTypeRef *)(v6 + 8));
        v7 = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v4 += 56;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 296);
  v4 = *(unsigned int *)(a2 + 296);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 296) = -1;
    return result;
  }
  v5 = result;
  return (*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRSA_SG_EEEDcmSI_DpOT0____fdiagonal
          + v4))((int)&v5, result, (PublicKeyCredentialCreationOptions *)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(WebCore::PublicKeyCredentialCreationOptions **a1, uint64_t a2, PublicKeyCredentialCreationOptions *a3)
{
  WebCore::PublicKeyCredentialCreationOptions *v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int var2;
  uint64_t v9;
  unsigned int val;
  uint64_t v11;
  char v12;

  v4 = *a1;
  v5 = *((unsigned int *)*a1 + 74);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, WebCore::PublicKeyCredentialCreationOptions *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v5])(&v12, v4);
LABEL_7:
    *((_DWORD *)v4 + 74) = -1;
    WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(v4, a3);
    *((_DWORD *)v4 + 74) = 0;
    return;
  }
  WTF::String::operator=((WTF::StringImpl **)a2, (WTF::StringImpl *)a3);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)&a3->var0.var1);
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((WTF::StringImpl **)(a2 + 16), (WTF::StringImpl *)&a3->var0.var2);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 32), (WTF::StringImpl *)&a3->var1);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 40), (WTF::StringImpl *)&a3->var1.var1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a2 + 48, (uint64_t)&a3->var1.var2);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 64), (WTF::StringImpl *)&a3->var1.var3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a2 + 72, (uint64_t)&a3->var2);
  if (a3 != (PublicKeyCredentialCreationOptions *)a2)
  {
    v7 = *(_DWORD *)(a2 + 100);
    var2 = a3->var3.var2;
    if (v7 <= var2)
    {
      if (var2 > *(_DWORD *)(a2 + 96))
      {
        WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a2 + 88), 0);
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2 + 88, a3->var3.var2);
        v7 = *(_DWORD *)(a2 + 100);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 100) = var2;
      v7 = var2;
    }
    if (v7)
    {
      memmove(*(void **)(a2 + 88), a3->var3.var0, 16 * v7);
      v9 = *(unsigned int *)(a2 + 100);
    }
    else
    {
      v9 = 0;
    }
    memcpy((void *)(*(_QWORD *)(a2 + 88) + 16 * v9), (char *)a3->var3.var0 + 16 * v9, 16 * a3->var3.var2 - 16 * v9);
    *(_DWORD *)(a2 + 100) = a3->var3.var2;
  }
  val = a3->var4.var0.__val_;
  *(_BYTE *)(a2 + 108) = a3->var4.__engaged_;
  *(_DWORD *)(a2 + 104) = val;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 112, (uint64_t)&a3->var5);
  v11 = *(_QWORD *)&a3->var6.var0.var0;
  *(_BYTE *)(a2 + 136) = a3->var8.var0.var0;
  *(_QWORD *)(a2 + 128) = v11;
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false> const&>(a2 + 144, (uint64_t)&a3->var8.var0.var1.var1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  _DWORD *v8;
  char v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 296);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a2, a3);
      v7 = *(_DWORD *)(a3 + 16);
      *(_BYTE *)(a2 + 20) = *(_BYTE *)(a3 + 20);
      *(_DWORD *)(a2 + 16) = v7;
      WTF::String::operator=((WTF::StringImpl **)(a2 + 24), (WTF::StringImpl *)(a3 + 24));
      WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 32, a3 + 32);
      *(_BYTE *)(a2 + 48) = *(_BYTE *)(a3 + 48);
      std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false> const&>(a2 + 56, a3 + 56);
      *(_WORD *)(a2 + 208) = *(_WORD *)(a3 + 208);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 296) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(v4, a3);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
  v8 = *(_DWORD **)(a3 + 24);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v4 + 24) = v8;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 32, a3 + 32);
  v9 = *(_BYTE *)(a3 + 48);
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 48) = v9;
  *(_BYTE *)(v4 + 200) = 0;
  if (*(_BYTE *)(a3 + 200))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>(v4 + 56, a3 + 56);
    *(_BYTE *)(v4 + 200) = 1;
  }
  *(_WORD *)(v4 + 208) = *(_WORD *)(a3 + 208);
  *(_DWORD *)(v4 + 296) = 1;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::PublicKeyCredentialDescriptor>::destruct((WebCore::PublicKeyCredentialDescriptor *)(*(_QWORD *)a1 + 40 * v5), (WebCore::PublicKeyCredentialDescriptor *)(*(_QWORD *)a1 + 40 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    v6 = *(_BYTE **)a2;
    v7 = *(_QWORD *)a1;
    if (v4)
    {
      v8 = &v6[40 * v4];
      do
      {
        *(_BYTE *)v7 = *v6;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(v7 + 8, (uint64_t)(v6 + 8));
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 24), (uint64_t)(v6 + 24));
        v6 += 40;
        v7 += 40;
      }
      while (v6 != v8);
      v6 = *(_BYTE **)a2;
      v9 = *(unsigned int *)(a1 + 12);
      v7 = *(_QWORD *)a1;
    }
    else
    {
      v9 = 0;
    }
    WTF::VectorCopier<false,WebCore::PublicKeyCredentialDescriptor>::uninitializedCopy<WebCore::PublicKeyCredentialDescriptor>((uint64_t)&v6[40 * v9], (uint64_t)&v6[40 * *(unsigned int *)(a2 + 12)], v7 + 40 * v9);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34DEDC0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34DEDE0[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      if (*a3)
        ++*v6;
      result = *a2;
      *a2 = (uint64_t)v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)result;
      }
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DEDC0[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    ++*v7;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, WTF::DeferrableRefCountedBase **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::DeferrableRefCountedBase *v6;
  WTF::DeferrableRefCountedBase *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *(_DWORD *)v6 += 2;
      result = *a2;
      *a2 = v6;
      if (result)
        return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
      return result;
    }
    result = (WTF::DeferrableRefCountedBase *)((uint64_t (*)(char *, uint64_t))off_1E34DEDC0[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false> const&>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::AuthenticationExtensionsClientInputs::PRFValues *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  unsigned int v9;
  unsigned int v10;
  WTF::ASCIILiteral *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v4 = (WTF::StringImpl **)(a1 + 16);
      v5 = (WTF::StringImpl *)(a2 + 16);
      if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
      {
        if (*(_BYTE *)(a1 + 56))
        {
          WTF::String::operator=(v4, v5);
          *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
          std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(a1 + 32, a2 + 32);
        }
      }
      else if (*(_BYTE *)(a1 + 56))
      {
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::reset[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v4);
      }
      else
      {
        std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs const&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>((uint64_t)v4, (uint64_t)v5);
        *(_BYTE *)(a1 + 56) = 1;
      }
      v6 = (WebCore::AuthenticationExtensionsClientInputs::PRFValues *)(a1 + 64);
      v7 = a2 + 64;
      if (*(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136))
      {
        if (*(_BYTE *)(a1 + 136))
        {
          if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104))
          {
            if (*(_BYTE *)(a1 + 104))
            {
              std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v6, v7);
              std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(a1 + 80, a2 + 80);
            }
          }
          else if (*(_BYTE *)(a1 + 104))
          {
            std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::reset[abi:sn180100](v6);
          }
          else
          {
            std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues const&,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>((uint64_t)v6, v7);
            *(_BYTE *)(a1 + 104) = 1;
          }
          v8 = (WTF::StringImpl **)(a2 + 112);
          if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
          {
            if (a2 != a1 && *(_BYTE *)(a1 + 128))
            {
              v9 = *(_DWORD *)(a1 + 124);
              v10 = *(_DWORD *)(a2 + 124);
              if (v9 <= v10)
              {
                if (v10 > *(_DWORD *)(a1 + 120))
                {
                  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 112), 0);
                  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 112, *(unsigned int *)(a2 + 124));
                  v9 = *(_DWORD *)(a1 + 124);
                }
              }
              else
              {
                WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct((uint64_t *)(*(_QWORD *)(a1 + 112) + 48 * v10), (uint64_t *)(*(_QWORD *)(a1 + 112) + 48 * v9));
                *(_DWORD *)(a1 + 124) = v10;
                v9 = v10;
              }
              v12 = *v8;
              v13 = *(WTF::StringImpl ***)(a1 + 112);
              if (v9)
              {
                v14 = (WTF::StringImpl *)((char *)v12 + 48 * v9);
                do
                {
                  WTF::String::operator=(v13, v12);
                  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v13 + 1), (uint64_t)v12 + 8);
                  std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>((uint64_t)(v13 + 3), (uint64_t)v12 + 24);
                  v12 = (WTF::StringImpl *)((char *)v12 + 48);
                  v13 += 6;
                }
                while (v12 != v14);
                v12 = *v8;
                v15 = *(unsigned int *)(a1 + 124);
                v13 = *(WTF::StringImpl ***)(a1 + 112);
              }
              else
              {
                v15 = 0;
              }
              WTF::VectorCopier<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::uninitializedCopy<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>((_BYTE *)v12 + 48 * v15, (_BYTE *)v12 + 48 * *(unsigned int *)(a2 + 124), (uint64_t)&v13[6 * v15]);
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
            }
          }
          else
          {
            v11 = (WTF::ASCIILiteral *)(a1 + 112);
            if (*(_BYTE *)(a1 + 128))
            {
              WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11);
              *(_BYTE *)(a1 + 128) = 0;
            }
            else
            {
              WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v11, a2 + 112);
              *(_BYTE *)(a1 + 128) = 1;
            }
          }
        }
      }
      else if (*(_BYTE *)(a1 + 136))
      {
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::reset[abi:sn180100](v6);
      }
      else
      {
        std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs const&,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(v6, v7);
        *(_BYTE *)(a1 + 136) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 144))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::reset[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)a1);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
    *(_BYTE *)(a1 + 144) = 1;
  }
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
  }
  else if (*(_BYTE *)(result + 16))
  {
    v3 = *(unsigned int *)(result + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E34DEDC0[v3])(&v4, result);
    *(_DWORD *)(v2 + 8) = -1;
    *(_BYTE *)(v2 + 16) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
    *(_BYTE *)(v2 + 16) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SecurityOriginData,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
  }
  else if (*(_BYTE *)(result + 32))
  {
    v3 = *(unsigned int *)(result + 24);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v3])(&v4, result);
    *(_DWORD *)(v2 + 24) = -1;
    *(_BYTE *)(v2 + 32) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 24) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
    *(_BYTE *)(v2 + 32) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v8 = *(void **)(v11 + 8 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v8);
        *(_QWORD *)(v11 + 8 * v18) = v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8) = v9;
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  void *v17;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 8;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 8)
  {
    v14 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v15 = v14;
      v14 *= 2;
    }
    while (v15 < v7);
    v16 = (char *)mmap(0, v15, 3, 4098, -1, 0);
    if (v16 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v9 = v16;
    memcpy(v16, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v17 = *(void **)(a1 + 528);
    if (v17 != (void *)(a1 + 16))
      munmap(v17, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v15;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)a2;
    v13 = 8 * v11;
    do
    {
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, v12++);
      v13 -= 8;
    }
    while (v13);
  }
}

void WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = v8 + 16 * v15;
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = (_QWORD *)v16;
      v15 = (v15 + v19) & v10;
      v16 = v8 + 16 * v15;
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = (uint64_t)v18;
    }
  }
  *a3 = 0;
  v20 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v11;
  if (v20)
    CFRelease(*(CFTypeRef *)(v20 + 8));
  *(_DWORD *)(v16 + 8) = *a4;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      v16 = WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::expand(a2, (uint64_t *)v16);
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_31:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v28;
}

uint64_t WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          *(_QWORD *)v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *(_QWORD *)v23 = v24;
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v4 + 16 * v10 + 8);
          v25 = *v12;
          *v12 = 0;
          if (v25)
            CFRelease(*(CFTypeRef *)(v25 + 8));
          if (v12 == a2)
            v11 = v23;
        }
        else
        {
          *v12 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserStyleSheets>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2813;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *a2);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            else
              --v24[2];
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_DWORD **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_25;
          if (v13[2] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            goto LABEL_25;
          }
          --v13[2];
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_DWORD **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[2] == 1)
              goto LABEL_24;
            --v13[2];
          }
        }
      }
LABEL_25:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScriptMessageHandlers>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2810;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebUserContentControllerProxy::didPostMessage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)::$_0,void,API::SerializedScriptValue *,WTF::String const>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DEE10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebUserContentControllerProxy::didPostMessage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)::$_0,void,API::SerializedScriptValue *,WTF::String const>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DEE10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebUserContentControllerProxy::didPostMessage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)::$_0,void,API::SerializedScriptValue *,WTF::String const>::call(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)v3 + 16))(v3, 0, 0, a3);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 20);
    v10 = 0;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, v6, v7, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  WTF::URL::operator=((uint64_t)(a1 + 1), (WTF::StringImpl *)(a2 + 1));
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(56 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v8 = 0;
    v9 = v4;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v3 + 56 * v8);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v20 = (WTF::StringImpl **)(v14 + 56 * (v17 & v15));
            v17 = ++v18 + (v17 & v15);
          }
          while (*v20);
          v21 = v14 + 56 * v19;
          v24 = *(WTF::StringImpl **)(v21 + 16);
          v23 = (_QWORD *)(v21 + 16);
          v22 = v24;
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v7);
            else
              *(_DWORD *)v22 -= 2;
          }
          v27 = *(v23 - 1);
          *(v23 - 1) = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          v28 = *v20;
          *v20 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v7);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v10;
          *v10 = 0;
          *v20 = v29;
          v30 = v3 + 56 * v8;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (uint64_t *)(v30 + 8);
          *v31 = 0;
          *(v23 - 1) = v32;
          WTF::URL::URL((uint64_t)v23, v31 + 1);
          v33 = (WTF::StringImpl *)v31[1];
          v31[1] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v7);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = *v31;
          *v31 = 0;
          if (v34)
            CFRelease(*(CFTypeRef *)(v34 + 8));
          v26 = *v10;
          *v10 = 0;
          if (!v26)
            goto LABEL_46;
          if (*(_DWORD *)v26 == 2)
            goto LABEL_45;
          *(_DWORD *)v26 -= 2;
        }
        else
        {
          v12 = v3 + 56 * v8;
          v13 = *(WTF::StringImpl **)(v12 + 16);
          *(_QWORD *)(v12 + 16) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v7);
            else
              *(_DWORD *)v13 -= 2;
          }
          v25 = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v25)
            CFRelease(*(CFTypeRef *)(v25 + 8));
          v26 = *v10;
          *v10 = 0;
          if (!v26)
            goto LABEL_46;
          if (*(_DWORD *)v26 == 2)
          {
LABEL_45:
            WTF::StringImpl::destroy(v26, v7);
            goto LABEL_46;
          }
          *(_DWORD *)v26 -= 2;
        }
      }
LABEL_46:
      if (++v8 == v9)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t *WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  __int128 v19;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x2222223)
  {
    v5 = 120 * a3;
    v6 = WTF::fastMalloc((WTF *)(120 * a3));
    *((_DWORD *)v3 + 2) = (v5 & 0xFFFFFFF8) / 0x78;
    *v3 = v6;
    v7 = a2 + v5;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *v3;
      v10 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v10 += 2;
      v11 = v9 + 120 * v8;
      *(_QWORD *)v11 = v10;
      v12 = *(unsigned int **)(a2 + 8);
      if (v12)
      {
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
      *(_QWORD *)(v11 + 8) = v12;
      v14 = *(_OWORD *)(a2 + 16);
      v15 = *(_OWORD *)(a2 + 32);
      v16 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v11 + 64) = v16;
      *(_OWORD *)(v11 + 16) = v14;
      *(_OWORD *)(v11 + 32) = v15;
      v17 = *(_DWORD **)(a2 + 80);
      if (v17)
        *v17 += 2;
      v18 = v9 + 120 * v8;
      *(_QWORD *)(v18 + 80) = v17;
      v19 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(v18 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(v18 + 88) = v19;
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      a2 += 120;
    }
    while (a2 != v7);
    return v3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::Authenticator::handleRequest(WebKit::WebAuthenticationRequestData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DEE38;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Authenticator::handleRequest(WebKit::WebAuthenticationRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DEE38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Authenticator::handleRequest(WebKit::WebAuthenticationRequestData const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(result + 16);
    v3 = 24;
    if (!*(_DWORD *)(v2 + 352))
      v3 = 16;
    return (*(uint64_t (**)(void))(*(_QWORD *)v2 + v3))();
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::startDiscovery(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DEE60;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::startDiscovery(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DEE60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::startDiscovery(void)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::restartDiscovery(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DEE88;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::restartDiscovery(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DEE88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorTransportService::restartDiscovery(void)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  return result;
}

BOOL WebKit::getClientDataType(uint64_t a1)
{
  return *(_DWORD *)(a1 + 304) != 0;
}

void WebKit::WebAuthenticatorCoordinatorProxy::makeCredential(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD v25[76];
  unsigned int *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int16 v33;
  uint64_t v34;
  _QWORD v35[6];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE v49[24];
  int v50;
  uint64_t v51;
  __int128 v52;
  _OWORD v53[3];
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v24[0] = 0;
  v24[1] = 0;
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v25, a5);
  v25[74] = 0;
  v13 = *(_QWORD *)(a1 + 16);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 24), v13 + 16);
  v14 = *(unsigned int **)(v13 + 24);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v26 = v14;
  v27 = 0;
  v28 = 0;
  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 1896);
  v30 = a2;
  v31 = a3;
  v32 = 1;
  v33 = *a4;
  WTF::URL::URL((uint64_t)&v34, (uint64_t *)a4 + 1);
  WTF::URL::URL((uint64_t)v35, (uint64_t *)a4 + 6);
  v35[5] = *((_QWORD *)a4 + 11);
  v16 = *((_OWORD *)a4 + 6);
  *((_OWORD *)a4 + 6) = 0u;
  v36 = v16;
  *(_QWORD *)&v16 = *((_QWORD *)a4 + 14);
  *((_QWORD *)a4 + 14) = 0;
  v37 = v16;
  v17 = *((_QWORD *)a4 + 15);
  *((_QWORD *)a4 + 15) = 0;
  v38 = v17;
  *(_QWORD *)&v16 = *((_QWORD *)a4 + 16);
  *((_QWORD *)a4 + 16) = 0;
  v39 = v16;
  v18 = *((_QWORD *)a4 + 17);
  *((_QWORD *)a4 + 17) = 0;
  v40 = v18;
  *(_QWORD *)&v16 = *((_QWORD *)a4 + 18);
  *((_QWORD *)a4 + 18) = 0;
  v41 = v16;
  LODWORD(v18) = *((_DWORD *)a4 + 38);
  v43 = *((_BYTE *)a4 + 156);
  v42 = v18;
  v19 = *((_OWORD *)a4 + 10);
  *((_OWORD *)a4 + 10) = 0u;
  v44 = v19;
  v20 = *((_QWORD *)a4 + 22);
  v21 = *((_QWORD *)a4 + 23);
  *((_QWORD *)a4 + 22) = 0;
  v45 = v20;
  v47 = *((_BYTE *)a4 + 192);
  v46 = v21;
  v22 = *((_QWORD *)a4 + 25);
  *((_QWORD *)a4 + 25) = 0;
  v48 = v22;
  v49[0] = 0;
  v50 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v49, (uint64_t)(a4 + 104));
  v23 = *((_QWORD *)a4 + 30);
  *((_QWORD *)a4 + 30) = 0;
  v51 = v23;
  v52 = *(_OWORD *)(a4 + 124);
  v53[0] = *(_OWORD *)(a4 + 132);
  *(_OWORD *)((char *)v53 + 14) = *(_OWORD *)(a4 + 139);
  v53[2] = 0u;
  v54 = a6;
  v55 = 1;
  v56 = 0;
  v57 = 0;
  WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(a1, (uint64_t)v24, a7);
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v24);
}

void WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::SecurityOriginData *v6;
  _DWORD **v7;
  _DWORD **v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  WTF *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32[93];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = (WebCore::SecurityOriginData *)(a2 + 592);
  v7 = (_DWORD **)WebCore::SecurityOriginData::protocol((WebCore::SecurityOriginData *)(a2 + 592));
  v8 = (_DWORD **)WebCore::SecurityOriginData::host(v6);
  v9 = WebCore::SecurityOriginData::port(v6);
  API::SecurityOrigin::create(v7, v8, v9, &v29);
  if (*(_DWORD *)(a2 + 320))
  {
    v10 = 0;
    v28 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *(unsigned __int8 *)(a2 + 697);
    v12 = *(unsigned __int8 *)(a2 + 696);
    v28 = 0;
    if (v11 && v12 == 3)
    {
      WTF::String::operator=(&v28, (WTF::StringImpl *)(a2 + 56));
      v10 = 1;
    }
  }
  v30 = a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v13 = *(unsigned int **)(a1 + 8);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v31 = (WTF *)v13;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((uint64_t)v32, (uint64_t *)a2);
  v15 = *a3;
  *a3 = 0;
  v33 = v15;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x308);
  *v16 = off_1E34DF180;
  v16[1] = v30;
  v17 = v31;
  v31 = 0;
  v16[2] = v17;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((uint64_t)(v16 + 3), v32);
  v16[96] = v33;
  v27 = v16;
  v33 = 0;
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v32);
  v19 = (unsigned int *)v31;
  v31 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
      if (v10)
        goto LABEL_12;
LABEL_14:
      v23 = v27;
      (*(void (**)(_QWORD *, uint64_t))(*v27 + 16))(v27, 1);
LABEL_15:
      (*(void (**)(_QWORD *))(*v23 + 8))(v23);
      goto LABEL_16;
    }
  }
  if (!v10)
    goto LABEL_14;
LABEL_12:
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 264) + 360);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22))
  {
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, WTF::StringImpl **, _QWORD **))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 104) + 560))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104), &v28, &v27);
  v23 = v27;
  v27 = 0;
  if (v23)
    goto LABEL_15;
LABEL_16:
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v29;
  v29 = 0;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
}

void WebKit::WebAuthenticatorCoordinatorProxy::getAssertion(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, char a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _DWORD v27[76];
  unsigned int *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int16 v35;
  uint64_t v36;
  _QWORD v37[6];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE v51[24];
  int v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[3];
  char v56;
  char v57;
  _BYTE v58[24];
  int v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v26[0] = 0;
  v26[1] = 0;
  std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>((uint64_t)v27, a5);
  v27[74] = 1;
  v15 = *(_QWORD *)(a1 + 16);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v15 + 24), v15 + 16);
  v16 = *(unsigned int **)(v15 + 24);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v28 = v16;
  v29 = 0;
  v30 = 0;
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 1896);
  v32 = a2;
  v33 = a3;
  v34 = 1;
  v35 = *a4;
  WTF::URL::URL((uint64_t)&v36, (uint64_t *)a4 + 1);
  WTF::URL::URL((uint64_t)v37, (uint64_t *)a4 + 6);
  v37[5] = *((_QWORD *)a4 + 11);
  v18 = *((_OWORD *)a4 + 6);
  *((_OWORD *)a4 + 6) = 0u;
  v38 = v18;
  *(_QWORD *)&v18 = *((_QWORD *)a4 + 14);
  *((_QWORD *)a4 + 14) = 0;
  v39 = v18;
  v19 = *((_QWORD *)a4 + 15);
  *((_QWORD *)a4 + 15) = 0;
  v40 = v19;
  *(_QWORD *)&v18 = *((_QWORD *)a4 + 16);
  *((_QWORD *)a4 + 16) = 0;
  v41 = v18;
  v20 = *((_QWORD *)a4 + 17);
  *((_QWORD *)a4 + 17) = 0;
  v42 = v20;
  *(_QWORD *)&v18 = *((_QWORD *)a4 + 18);
  *((_QWORD *)a4 + 18) = 0;
  v43 = v18;
  LODWORD(v20) = *((_DWORD *)a4 + 38);
  v45 = *((_BYTE *)a4 + 156);
  v44 = v20;
  v21 = *((_OWORD *)a4 + 10);
  *((_OWORD *)a4 + 10) = 0u;
  v46 = v21;
  v22 = *((_QWORD *)a4 + 22);
  v23 = *((_QWORD *)a4 + 23);
  *((_QWORD *)a4 + 22) = 0;
  v47 = v22;
  v49 = *((_BYTE *)a4 + 192);
  v48 = v23;
  v24 = *((_QWORD *)a4 + 25);
  *((_QWORD *)a4 + 25) = 0;
  v50 = v24;
  v51[0] = 0;
  v52 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v51, (uint64_t)(a4 + 104));
  v25 = *((_QWORD *)a4 + 30);
  *((_QWORD *)a4 + 30) = 0;
  v53 = v25;
  v54 = *(_OWORD *)(a4 + 124);
  v55[0] = *(_OWORD *)(a4 + 132);
  *(_OWORD *)((char *)v55 + 14) = *(_OWORD *)(a4 + 139);
  v55[2] = 0u;
  v56 = a6;
  v57 = 1;
  v58[0] = 0;
  v60 = 0;
  if (*(_BYTE *)(a7 + 32))
  {
    v59 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v58, a7);
    v60 = 1;
  }
  WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(a1, (uint64_t)v26, a8);
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v26);
}

uint64_t WebKit::MockAuthenticatorManager::MockAuthenticatorManager(uint64_t a1, uint64_t a2)
{
  WebKit::AuthenticatorManager *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WebKit::AuthenticatorManager::AuthenticatorManager((WebKit::AuthenticatorManager *)a1);
  *(_QWORD *)v4 = off_1E34DEEE8;
  *((_QWORD *)v4 + 2) = &unk_1E34DEF90;
  *((_BYTE *)v4 + 856) = *(_BYTE *)a2;
  std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v4 + 864, a2 + 8);
  *(_BYTE *)(a1 + 912) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_QWORD *)(a1 + 912) = 0;
    *(_QWORD *)(a1 + 920) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 912) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a1 + 920) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    *(_DWORD *)(a1 + 924) = v5;
    v6 = *(_QWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 935) = *(_DWORD *)(a2 + 79);
    *(_QWORD *)(a1 + 928) = v6;
    *(_BYTE *)(a1 + 944) = 1;
  }
  std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_assign_base[abi:sn180100](a1 + 952, a2 + 96);
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_QWORD *)(a1 + 992) = 0;
    *(_QWORD *)(a1 + 1000) = 0;
    v7 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a1 + 992) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(a1 + 1000) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *(_DWORD *)(a1 + 1004) = v7;
    *(_BYTE *)(a1 + 1008) = 1;
  }
  return a1;
}

uint64_t WebKit::MockAuthenticatorManager::createService@<X0>(uint64_t a1@<X0>, int a2@<W1>, WebKit::AuthenticatorTransportServiceObserver *a3@<X2>, uint64_t *a4@<X8>)
{
  return WebKit::AuthenticatorTransportService::createMock(a2, a3, (_BYTE *)(a1 + 856), a4);
}

uint64_t WebKit::MockAuthenticatorManager::respondReceivedInternal(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(result + 856))
  {
    v2 = result;
    WebKit::AuthenticatorManager::invokePendingCompletionHandler(result, a2);
    WebKit::AuthenticatorManager::clearStateAsync((WebKit::AuthenticatorManager *)v2);
    return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v2 + 784));
  }
  return result;
}

WTF *WebKit::MockAuthenticatorManager::filterTransports(_BYTE *a1, uint64_t *a2)
{
  WTF *result;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  if (!a1[984])
  {
    v15 = 1;
    v6 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v15);
    if (*a2)
    {
      v7 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
      if (v7 == v6)
        goto LABEL_2;
    }
    else
    {
      if (!v6)
        goto LABEL_2;
      v7 = 0;
    }
    if (v7 != v6)
      WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, v6);
  }
LABEL_2:
  if (a1[904])
    goto LABEL_3;
  v14 = 3;
  v8 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v14);
  if (*a2)
  {
    v9 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
    if (v9 == v8)
      goto LABEL_3;
  }
  else
  {
    if (!v8)
      goto LABEL_3;
    v9 = 0;
  }
  if (v9 != v8)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, v8);
LABEL_3:
  if (a1[1008])
    goto LABEL_4;
  v13 = 6;
  v10 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v13);
  if (*a2)
  {
    v11 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
    if (v11 == v10)
      goto LABEL_4;
  }
  else
  {
    if (!v10)
      goto LABEL_4;
    v11 = 0;
  }
  if (v11 != v10)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, v10);
LABEL_4:
  v12 = 2;
  result = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a2, &v12);
  if (*a2)
  {
    v5 = (WTF *)(*a2 + *(unsigned int *)(*a2 - 4));
    if (v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if (v5 != result)
    return (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove((WTF *)a2, result);
  return result;
}

uint64_t WebKit::MockHidConnection::initialize(uint64_t this)
{
  *(_BYTE *)(this + 72) = 1;
  return this;
}

uint64_t WebKit::MockHidConnection::terminate(uint64_t this)
{
  *(_BYTE *)(this + 72) = 0;
  return this;
}

uint64_t WebKit::MockHidConnection::sendSync(uint64_t result)
{
  _BYTE v1[56];

  if (*(_BYTE *)(result + 176))
  {
    if (*(_BYTE *)(result + 168))
    {
      fido::FidoHidMessage::createFromSerializedData();
      std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)v1);
    }
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebKit::MockHidConnection::send(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *global_queue;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 80), a1);
  v6 = *(unsigned int **)(a1 + 80);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *a3;
  *a3 = 0;
  v10 = a2[1];
  a2[1] = 0;
  v11 = malloc_type_malloc(0x40uLL, 0x10F00406E16C9EAuLL);
  *v11 = MEMORY[0x1E0C809A0];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::descriptor;
  v11[4] = v6;
  v11[5] = v8;
  v11[6] = v10;
  v11[7] = v9;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, v11);
  _Block_release(v11);
}

WTF *WebKit::MockHidConnection::registerDataReceivedCallbackInternal(WTF *this)
{
  WTF *v1;
  void *v2;
  WTF *v3;
  uint64_t v4;

  if (!*((_BYTE *)this + 176))
    goto LABEL_13;
  v1 = this;
  if ((*((_BYTE *)this + 160) == 0) != (*((_BYTE *)this + 304) != 0)
    && (*((_BYTE *)this + 161) == 0) != (*((_BYTE *)this + 305) != 0)
    && *((_BYTE *)this + 162) == 2)
  {
    v3 = 0;
    v4 = 0;
    WebKit::HidConnection::receiveReport((uint64_t)this, (uint64_t *)&v3);
    this = v3;
    if (v3)
    {
      v3 = 0;
      LODWORD(v4) = 0;
      this = (WTF *)WTF::fastFree(this, v2);
    }
    if (*((_BYTE *)v1 + 176))
    {
      if (*((_BYTE *)v1 + 166))
      {
        *((_BYTE *)v1 + 166) = 0;
        *((_BYTE *)v1 + 162) = 0;
        return (WTF *)WebKit::MockHidConnection::continueFeedReports(v1);
      }
      return this;
    }
LABEL_13:
    __break(1u);
    return this;
  }
  if (!*((_BYTE *)this + 165))
    return WebKit::MockHidConnection::feedReports(this);
  return this;
}

WTF *WebKit::MockHidConnection::feedReports(WebKit::MockHidConnection *this)
{
  WTF *result;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  const fido::AuthenticatorGetInfoResponse *v12;
  void *v13;
  WTF *v14;
  size_t v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  WTF **v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  const fido::AuthenticatorGetInfoResponse *v34;
  void *v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  unsigned int v40;
  void **v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  WTF *v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF *v50;
  char v51;
  WTF *Packet;
  void *v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  unsigned int *v59;
  unsigned int v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  WTF *v64;
  WTF *v65;
  size_t v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  void *v70;
  WTF *v71;
  int v72;
  WTF *v73;
  int v74;
  WTF *v75;
  int v76;
  char v77;
  _BYTE v78[16];
  char v79;
  WTF *v80;
  int v81;
  char v82;
  WTF *v83;
  size_t v84;
  WTF *v85;
  size_t v86;
  WTF *v87;
  uint64_t v88;
  char v89;
  _QWORD v90[2];

  v90[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 305))
  {
    LOBYTE(v87) = 0;
    v89 = 0;
    if (!*((_BYTE *)this + 304))
    {
      v85 = 0;
      v86 = 0;
      if (!*((_BYTE *)this + 176))
        goto LABEL_114;
      if (*((_BYTE *)this + 167))
      {
        v11 = 0;
        v90[0] = 0x100000000;
        v68 = 0;
        v69 = 0;
        v67 = (WTF *)&v68;
        do
        {
          std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>((uint64_t **)&v67, (uint64_t *)&v68, (int *)((char *)v90 + v11), (_QWORD *)((char *)v90 + v11));
          v11 += 4;
        }
        while (v11 != 8);
        v66 = 0x1000000010;
        v65 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        bzero(v65, 0x10uLL);
        fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse();
        fido::encodeAsCBOR((fido *)&v70, v12);
        v14 = v85;
        if (v85)
        {
          v85 = 0;
          LODWORD(v86) = 0;
          WTF::fastFree(v14, v13);
        }
        v85 = v83;
        v15 = v84;
        v83 = 0;
        v84 = 0;
        v86 = v15;
        if (v82)
        {
          v16 = v80;
          if (v80)
          {
            v80 = 0;
            v81 = 0;
            WTF::fastFree(v16, v13);
          }
        }
        if (v79)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v78, v13);
        if (v77)
        {
          v17 = v75;
          if (v75)
          {
            v75 = 0;
            v76 = 0;
            WTF::fastFree(v17, v13);
          }
        }
        v18 = v73;
        if (v73)
        {
          v73 = 0;
          v74 = 0;
          WTF::fastFree(v18, v13);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v70, v71);
        v20 = v65;
        if (v65)
        {
          v65 = 0;
          LODWORD(v66) = 0;
          WTF::fastFree(v20, v19);
        }
        v21 = v68;
        v22 = &v67;
      }
      else
      {
        LODWORD(v65) = 0;
        v68 = 0;
        v69 = 0;
        v67 = (WTF *)&v68;
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>((uint64_t **)&v67, (uint64_t *)&v68, (int *)&v65, &v65);
        v83 = 0;
        v84 = 0x1000000000;
        v29 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        LODWORD(v84) = 16;
        v83 = v29;
        bzero(v29, HIDWORD(v84));
        fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse();
        v31 = v83;
        if (v83)
        {
          v83 = 0;
          LODWORD(v84) = 0;
          WTF::fastFree(v31, v30);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v67, v68);
        LOWORD(v67) = 256;
        HIDWORD(v67) = 2;
        LOBYTE(v68) = 1;
        HIDWORD(v68) = 2;
        if (!*((_BYTE *)this + 176))
          goto LABEL_140;
        if (*((_BYTE *)this + 169))
        {
          LOBYTE(v65) = 1;
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v83, (char *)&v65, (WTF *)1);
          fido::AuthenticatorGetInfoResponse::setPinProtocols();
          v33 = v83;
          if (v83)
          {
            v83 = 0;
            LODWORD(v84) = 0;
            WTF::fastFree(v33, v32);
          }
          fido::AuthenticatorSupportedOptions::setClientPinAvailability();
          if (!*((_BYTE *)this + 176))
            goto LABEL_140;
        }
        if (*((_BYTE *)this + 170))
          fido::AuthenticatorSupportedOptions::setUserVerificationAvailability();
        fido::AuthenticatorGetInfoResponse::setOptions();
        fido::encodeAsCBOR((fido *)&v70, v34);
        v36 = v85;
        if (v85)
        {
          v85 = 0;
          LODWORD(v86) = 0;
          WTF::fastFree(v36, v35);
        }
        v85 = v83;
        v86 = v84;
        if (v82)
        {
          v37 = v80;
          if (v80)
          {
            v80 = 0;
            v81 = 0;
            WTF::fastFree(v37, v35);
          }
        }
        if (v79)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v78, v35);
        if (v77)
        {
          v38 = v75;
          if (v75)
          {
            v75 = 0;
            v76 = 0;
            WTF::fastFree(v38, v35);
          }
        }
        v39 = v73;
        if (v73)
        {
          v73 = 0;
          v74 = 0;
          WTF::fastFree(v39, v35);
        }
        v21 = v71;
        v22 = (WTF **)&v70;
      }
      std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)v22, v21);
      LOBYTE(v70) = 0;
      v40 = HIDWORD(v86);
      if (HIDWORD(v86) == (_DWORD)v86)
      {
        v41 = (void **)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v85, (WTF::FastMalloc *)(HIDWORD(v86) + 1), (unint64_t)&v70);
        v40 = HIDWORD(v86);
      }
      else
      {
        v41 = &v70;
      }
      v42 = v85;
      memmove((char *)v85 + 1, v85, v40);
      *(_BYTE *)v42 = *(_BYTE *)v41;
      ++HIDWORD(v86);
      if (!*((_BYTE *)this + 176))
      {
LABEL_114:
        do
        {
          while (1)
          {
            while (1)
            {
LABEL_140:
              __break(1u);
LABEL_104:
              WTF::base64Decode();
              if (*((_BYTE *)this + 176))
              {
                v48 = (WTF::StringImpl **)*((_QWORD *)this + 18);
                v49 = *v48;
                *v48 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, v47);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                memmove(v48, v48 + 1, *((_QWORD *)this + 18) + 8 * *((unsigned int *)this + 39) - (_QWORD)(v48 + 1));
                --*((_DWORD *)this + 39);
                if (*((_BYTE *)this + 176))
                  break;
              }
            }
            if (!*((_BYTE *)this + 163))
              break;
            if ((_BYTE)v69)
              goto LABEL_115;
          }
        }
        while (!(_BYTE)v69);
LABEL_115:
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v87, (uint64_t)&v70);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v70);
        if (!(_BYTE)v69)
          goto LABEL_118;
        goto LABEL_116;
      }
      if (((*((_BYTE *)this + 160) == 0) == (*((_BYTE *)this + 304) != 0)
         || (*((_BYTE *)this + 161) == 0) == (*((_BYTE *)this + 305) != 0)
         || *((_BYTE *)this + 162) != 3)
        && *((_BYTE *)this + 163))
      {
        LOBYTE(v83) = 1;
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v67, (char *)&v83, (WTF *)1);
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v87, (uint64_t)&v70);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v70);
        v44 = v67;
        if (v67)
        {
          v67 = 0;
          LODWORD(v68) = 0;
          WTF::fastFree(v44, v43);
        }
      }
      else
      {
        fido::FidoHidMessage::create();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v87, (uint64_t)&v70);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v70);
      }
      v45 = v85;
      if (v85)
      {
        v85 = 0;
        LODWORD(v86) = 0;
        WTF::fastFree(v45, v43);
      }
      if (!*((_BYTE *)this + 304) || !*((_BYTE *)this + 305))
        goto LABEL_118;
    }
    if (!*((_BYTE *)this + 176))
      goto LABEL_140;
    if (*((_BYTE *)this + 168))
      return std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v87);
    if (*((_BYTE *)this + 164))
    {
      *((_BYTE *)this + 164) = 0;
      LOBYTE(v85) = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v67, (char *)&v85, (WTF *)1);
      fido::FidoHidInitPacket::FidoHidInitPacket();
      v24 = v67;
      if (v67)
      {
        v67 = 0;
        LODWORD(v68) = 0;
        WTF::fastFree(v24, v23);
      }
      fido::FidoHidInitPacket::getSerializedData((fido::FidoHidInitPacket *)&v70);
      WebKit::HidConnection::receiveReport((uint64_t)this, (uint64_t *)&v67);
      v26 = v67;
      if (v67)
      {
        v67 = 0;
        LODWORD(v68) = 0;
        WTF::fastFree(v26, v25);
      }
      WebKit::MockHidConnection::continueFeedReports(this);
      v70 = &unk_1E34DF130;
      v28 = v71;
      if (v71)
      {
        v71 = 0;
        v72 = 0;
        WTF::fastFree(v28, v27);
      }
      return std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v87);
    }
    if (!*((_BYTE *)this + 160)
      || !*((_BYTE *)this + 161)
      || *((_BYTE *)this + 162) != 5
      || !*((_BYTE *)this + 312) && !*((_BYTE *)this + 313))
    {
      if (!*((_DWORD *)this + 39))
      {
        __break(0xC471u);
        JUMPOUT(0x197460B04);
      }
      goto LABEL_104;
    }
    LOBYTE(v85) = 43;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v67, (char *)&v85, (WTF *)1);
    fido::FidoHidMessage::create();
    std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)&v87, (uint64_t)&v70);
    std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v70);
LABEL_116:
    v50 = v67;
    if (v67)
    {
      v67 = 0;
      LODWORD(v68) = 0;
      WTF::fastFree(v50, v46);
    }
LABEL_118:
    if (!v89)
      goto LABEL_140;
    v51 = 1;
    while (fido::FidoHidMessage::numPackets((fido::FidoHidMessage *)&v87))
    {
      if (!v89)
        goto LABEL_140;
      Packet = (WTF *)fido::FidoHidMessage::popNextPacket((fido::FidoHidMessage *)&v87);
      if ((v51 & 1) == 0)
      {
        if (!*((_BYTE *)this + 176))
          goto LABEL_140;
        if ((*((_BYTE *)this + 160) == 0) != (*((_BYTE *)this + 304) != 0)
          && (*((_BYTE *)this + 161) == 0) != (*((_BYTE *)this + 305) != 0)
          && *((_BYTE *)this + 162) == 3)
        {
          v83 = 0;
          v84 = 0;
          fido::FidoHidContinuationPacket::FidoHidContinuationPacket();
          fido::FidoHidContinuationPacket::getSerializedData((fido::FidoHidContinuationPacket *)&v70);
          v54 = v67;
          if (v67)
          {
            v67 = 0;
            LODWORD(v68) = 0;
            WTF::fastFree(v54, v53);
          }
          v67 = v85;
          v55 = (WTF *)v86;
          v85 = 0;
          v86 = 0;
          v68 = v55;
          v70 = &unk_1E34DF130;
          v56 = v71;
          if (v71)
          {
            v71 = 0;
            v72 = 0;
            WTF::fastFree(v56, v53);
          }
          Packet = v83;
          if (v83)
          {
            v83 = 0;
            LODWORD(v84) = 0;
            Packet = (WTF *)WTF::fastFree(Packet, v53);
          }
        }
      }
      WTF::RunLoop::main(Packet);
      v57 = v67;
      v58 = v68;
      v67 = 0;
      v68 = 0;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 20, (uint64_t)this);
      v59 = (unsigned int *)*((_QWORD *)this + 10);
      if (v59)
      {
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 + 1, v59));
      }
      v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v61 = &off_1E34DF1F0;
      v61[1] = v57;
      v61[2] = v58;
      v61[3] = v59;
      v70 = v61;
      WTF::RunLoop::dispatch();
      v63 = v70;
      v70 = 0;
      if (v63)
        (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
      v64 = v67;
      if (v67)
      {
        v67 = 0;
        LODWORD(v68) = 0;
        WTF::fastFree(v64, v62);
      }
      v51 = 0;
      if (!v89)
        goto LABEL_140;
    }
    return std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v87);
  }
  v88 = 17;
  v3 = WTF::fastMalloc((WTF *)0x11);
  v87 = (WTF *)v3;
  v4 = *((unsigned int *)this + 83);
  if ((_DWORD)v4)
  {
    v5 = (const void *)*((_QWORD *)this + 40);
    if (v4 < 0x12)
    {
      v7 = 0;
    }
    else
    {
      if (v4 <= 0x16)
        v6 = 22;
      else
        v6 = *((unsigned int *)this + 83);
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v87, (WTF::FastMalloc *)v6);
      v7 = HIDWORD(v88);
      if (v4 < HIDWORD(v88))
        goto LABEL_143;
      v3 = (uint64_t)v87;
    }
    memcpy((void *)(v3 + v7), v5, v4);
    HIDWORD(v88) = v4;
  }
  if (!*((_BYTE *)this + 176))
    goto LABEL_140;
  if ((*((_BYTE *)this + 160) == 0) == (*((_BYTE *)this + 304) != 0)
    || (*((_BYTE *)this + 161) == 0) == (*((_BYTE *)this + 305) != 0)
    || *((_BYTE *)this + 162) != 6)
  {
    goto LABEL_20;
  }
  if (!(_DWORD)v4)
  {
LABEL_143:
    __break(0xC471u);
    JUMPOUT(0x197460AFCLL);
  }
  --*(_BYTE *)v87;
LABEL_20:
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((unsigned int *)&v87, (WTF::FastMalloc *)0x11);
  if (HIDWORD(v88) < v4)
    goto LABEL_140;
  if (HIDWORD(v88) - v4 <= 3)
    goto LABEL_140;
  WTF::cryptographicallyRandomValues();
  if (!*((_BYTE *)this + 176))
    goto LABEL_140;
  fido::FidoHidInitPacket::FidoHidInitPacket();
  fido::FidoHidInitPacket::getSerializedData((fido::FidoHidInitPacket *)&v70);
  WebKit::HidConnection::receiveReport((uint64_t)this, (uint64_t *)&v67);
  v9 = v67;
  if (v67)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree(v9, v8);
  }
  if (!*((_BYTE *)this + 176))
    goto LABEL_140;
  if (*((_BYTE *)this + 166))
  {
    *((_BYTE *)this + 166) = 0;
    *((_BYTE *)this + 162) = 0;
    WebKit::MockHidConnection::continueFeedReports(this);
  }
  v70 = &unk_1E34DF130;
  v10 = v71;
  if (v71)
  {
    v71 = 0;
    v72 = 0;
    WTF::fastFree(v10, v8);
  }
  result = v87;
  if (v87)
  {
    v87 = 0;
    LODWORD(v88) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

uint64_t WebKit::MockHidConnection::continueFeedReports(WebKit::MockHidConnection *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::main(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 20, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 10);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34DF218;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::MockHidService::MockHidService(uint64_t a1, WebKit::AuthenticatorTransportServiceObserver *a2, uint64_t a3)
{
  WebKit::HidService *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = WebKit::HidService::HidService((WebKit::HidService *)a1, a2);
  *(_QWORD *)v5 = off_1E34DF038;
  *((_BYTE *)v5 + 40) = *(_BYTE *)a3;
  *((_BYTE *)v5 + 48) = 0;
  v6 = (uint64_t)v5 + 48;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>(v6, a3 + 8);
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 96, a3 + 56);
    v7 = *(_QWORD *)(a3 + 72);
    *(_DWORD *)(a1 + 119) = *(_DWORD *)(a3 + 79);
    *(_QWORD *)(a1 + 112) = v7;
    *(_BYTE *)(a1 + 128) = 1;
  }
  std::__optional_move_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_move_base[abi:sn180100](a1 + 136, a3 + 96);
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*(_BYTE *)(a3 + 152))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 176, a3 + 136);
    *(_BYTE *)(a1 + 192) = 1;
  }
  return a1;
}

WebKit::HidService *WebKit::MockHidService::platformStartDiscovery(WebKit::HidService *this)
{
  if (*((_BYTE *)this + 128))
    return (WebKit::HidService *)WebKit::HidService::deviceAdded(this, 0);
  return this;
}

uint64_t WebKit::MockHidService::createHidConnection@<X0>(WebKit::MockHidService *this@<X0>, __IOHIDDevice *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x150);
  *(_QWORD *)(v6 + 80) = 0;
  v7 = WebKit::HidConnection::HidConnection((CFTypeRef *)v6, a2);
  *v7 = off_1E34DEFF0;
  *((_BYTE *)v7 + 88) = *((_BYTE *)this + 40);
  *((_BYTE *)v7 + 96) = 0;
  v8 = (uint64_t)(v7 + 12);
  *(_BYTE *)(v6 + 136) = 0;
  if (*((_BYTE *)this + 88))
  {
    std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>(v8, (uint64_t)this + 48);
    *(_BYTE *)(v6 + 136) = 1;
  }
  *(_BYTE *)(v6 + 144) = 0;
  *(_BYTE *)(v6 + 176) = 0;
  if (*((_BYTE *)this + 128))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v6 + 144, (uint64_t)this + 96);
    v9 = *((_QWORD *)this + 14);
    *(_DWORD *)(v6 + 167) = *(_DWORD *)((char *)this + 119);
    *(_QWORD *)(v6 + 160) = v9;
    *(_BYTE *)(v6 + 176) = 1;
  }
  std::__optional_move_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_move_base[abi:sn180100](v6 + 184, (uint64_t)this + 136);
  *(_BYTE *)(v6 + 224) = 0;
  result = v6 + 224;
  *(_BYTE *)(v6 + 240) = 0;
  if (*((_BYTE *)this + 192))
  {
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, (uint64_t)this + 176);
    *(_BYTE *)(v6 + 240) = 1;
  }
  *(_BYTE *)(v6 + 248) = 0;
  *(_BYTE *)(v6 + 296) = 0;
  *(_WORD *)(v6 + 304) = 0;
  *(_DWORD *)(v6 + 308) = -1;
  *(_WORD *)(v6 + 312) = 0;
  *(_QWORD *)(v6 + 320) = 0;
  *(_QWORD *)(v6 + 328) = 0;
  *a3 = v6;
  return result;
}

WTF *WebKit::CtapNfcDriver::transact(uint64_t a1, WTF **a2, WTF::RunLoop *a3)
{
  void *v4;
  WTF *result;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  int v19;
  unsigned __int16 v20;
  char v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;

  if (*(_DWORD *)(a1 + 16))
  {
    WebKit::NfcConnection::transact(*(_QWORD *)(a1 + 24), (uint64_t)a2, (uint64_t)&v22);
    (*(void (**)(_QWORD, WTF **))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, &v22);
    result = v22;
    if (!v22)
      return result;
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  LODWORD(v22) = 4224;
  v6 = *a2;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v25 = v7;
  v23 = 0x10000;
  v24 = v6;
  v8 = *(_QWORD *)(a1 + 24);
  apdu::ApduCommand::getEncodedCommand((apdu::ApduCommand *)&v22);
  WebKit::NfcConnection::transact(v8, (uint64_t)&v14, (uint64_t)&v16);
  apdu::ApduResponse::createFromMessage();
  v10 = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v10, v9);
  }
  v11 = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    WTF::fastFree(v11, v9);
  }
  if (!v21)
    goto LABEL_13;
  if (v20 != 36864)
  {
    if (v20 == 27904)
    {
      LOBYTE(v14) = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v16, (char *)&v14, (WTF *)1);
      WebKit::CtapNfcDriver::respondAsync(a3, (uint64_t *)&v16);
      v12 = v16;
      if (!v16)
        goto LABEL_16;
      v16 = 0;
      LODWORD(v17) = 0;
LABEL_14:
      WTF::fastFree(v12, v4);
      goto LABEL_16;
    }
LABEL_13:
    v16 = 0;
    v17 = 0;
    WebKit::CtapNfcDriver::respondAsync(a3, (uint64_t *)&v16);
    v12 = v16;
    if (!v16)
      goto LABEL_16;
    goto LABEL_14;
  }
  WebKit::CtapNfcDriver::respondAsync(a3, (uint64_t *)&v18);
LABEL_16:
  if (v21)
  {
    v13 = v18;
    if (v18)
    {
      v18 = 0;
      v19 = 0;
      WTF::fastFree(v13, v4);
    }
  }
  result = v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::CtapNfcDriver::respondAsync(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WTF::RunLoop::main(a1);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34DF240;
  v7[1] = v4;
  v7[2] = v5;
  v7[3] = v6;
  v9 = v7;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

WebKit::Authenticator *WebKit::FidoAuthenticator::FidoAuthenticator(WebKit::Authenticator *a1, uint64_t *a2)
{
  WebKit::Authenticator *result;
  uint64_t v4;

  result = WebKit::Authenticator::Authenticator(a1);
  *(_QWORD *)result = off_1E34DF0A8;
  v4 = *a2;
  *a2 = 0;
  *((_QWORD *)result + 97) = v4;
  return result;
}

void WebKit::FidoAuthenticator::~FidoAuthenticator(WebKit::FidoAuthenticator *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E34DF0A8;
  v2 = *((_QWORD *)this + 97);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    v3 = *((_QWORD *)this + 97);
    *((_QWORD *)this + 97) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *((_QWORD *)this + 97) = 0;
  }
  WebKit::Authenticator::~Authenticator(this);
}

uint64_t WebKit::FidoAuthenticator::driver(WebKit::FidoAuthenticator *this)
{
  return *((_QWORD *)this + 97);
}

uint64_t WebKit::FidoAuthenticator::releaseDriver@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 776);
  *(_QWORD *)(this + 776) = 0;
  *a2 = v2;
  return this;
}

uint64_t WebKit::FidoAuthenticator::transportForDebugging(WebKit::FidoAuthenticator *this)
{
  return WebCore::toString();
}

WebKit::FidoService *WebKit::FidoService::FidoService(WebKit::FidoService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34AE8F8;
  *((_QWORD *)this + 1) = 0;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)a2 + 1, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)this = off_1E34AE928;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = 0;
  return this;
}

uint64_t *WebKit::FidoService::getInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  WTF *v13;
  WTF *v15;
  int v16;
  _QWORD *v17;

  v4 = *a2;
  fido::encodeEmptyAuthenticatorRequest();
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *a2;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(*a2 + 8), *a2);
  v8 = *(unsigned int **)(v7 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34DF268;
  v10[1] = v5;
  v10[2] = v8;
  v17 = v10;
  (*(void (**)(uint64_t, WTF **, _QWORD **))(*(_QWORD *)v4 + 16))(v4, &v15, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree(v13, v11);
  }
  return WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::add((uint64_t *)(a1 + 24), a2, (uint64_t)&v15);
}

void WebKit::MockAuthenticatorManager::~MockAuthenticatorManager(WebKit::MockAuthenticatorManager *this, void *a2)
{
  if (*((_BYTE *)this + 1008))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 992, a2);
  if (*((_BYTE *)this + 984))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 960, a2);
  if (*((_BYTE *)this + 944))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 912, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 864, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 1008))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 992, a2);
  if (*((_BYTE *)this + 984))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 960, a2);
  if (*((_BYTE *)this + 944))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 912, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 864, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebKit::MockAuthenticatorManager::isMock(WebKit::MockAuthenticatorManager *this)
{
  return 1;
}

void `non-virtual thunk to'WebKit::MockAuthenticatorManager::~MockAuthenticatorManager(WebKit::MockAuthenticatorManager *this, void *a2)
{
  if (*((_BYTE *)this + 992))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 976, a2);
  if (*((_BYTE *)this + 968))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 944, a2);
  if (*((_BYTE *)this + 928))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 896, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 848, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::MockAuthenticatorManager *)((char *)this - 16));
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 992))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 976, a2);
  if (*((_BYTE *)this + 968))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 944, a2);
  if (*((_BYTE *)this + 928))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 896, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 848, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::MockAuthenticatorManager *)((char *)this - 16));
  WTF::fastFree(v3, v4);
}

void WebKit::MockHidConnection::~MockHidConnection(WebKit::MockHidConnection *this, void *a2)
{
  WTF *v3;
  void *v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 40);
  if (v3)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((WebKit::MockHidConnection *)((char *)this + 248));
  if (*((_BYTE *)this + 240))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, v4);
  if (*((_BYTE *)this + 216))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, v4);
  if (*((_BYTE *)this + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, v4);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)v4);
  WebKit::HidConnection::~HidConnection(this);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v5);
}

{
  WTF *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (WTF *)*((_QWORD *)this + 40);
  if (v3)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((WebKit::MockHidConnection *)((char *)this + 248));
  if (*((_BYTE *)this + 240))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, v4);
  if (*((_BYTE *)this + 216))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, v4);
  if (*((_BYTE *)this + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, v4);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)v4);
  WebKit::HidConnection::~HidConnection(this);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v5);
  WTF::fastFree(this, v6);
}

void WebKit::MockHidService::~MockHidService(WebKit::MockHidService *this, void *a2)
{
  if (*((_BYTE *)this + 192))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  if (*((_BYTE *)this + 168))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  if (*((_BYTE *)this + 128))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48, (WTF::StringImpl *)a2);
  WebKit::HidService::~HidService(this);
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 192))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  if (*((_BYTE *)this + 168))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  if (*((_BYTE *)this + 128))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48, (WTF::StringImpl *)a2);
  WebKit::HidService::~HidService(this);
  WTF::fastFree(v3, v4);
}

void WebKit::CtapNfcDriver::~CtapNfcDriver(WebKit::CtapNfcDriver *this, void *a2)
{
  WebKit::NfcConnection *v3;

  *(_QWORD *)this = off_1E34DF078;
  v3 = (WebKit::NfcConnection *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::NfcConnection>::deref(v3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::NfcConnection *v3;
  void *v4;

  *(_QWORD *)this = off_1E34DF078;
  v3 = (WebKit::NfcConnection *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::NfcConnection>::deref(v3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

uint64_t WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 320) = -1;
  v5 = *((unsigned int *)a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E34DF0C8[v5])(&v24, a1 + 24, a2 + 3);
    *(_DWORD *)(a1 + 320) = v5;
  }
  v6 = a2[41];
  a2[41] = 0;
  *(_QWORD *)(a1 + 328) = v6;
  *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
  v7 = a2[43];
  a2[43] = 0;
  *(_QWORD *)(a1 + 344) = v7;
  v8 = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v8;
  *(_WORD *)(a1 + 384) = *((_WORD *)a2 + 192);
  WTF::URL::URL(a1 + 392, a2 + 49);
  WTF::URL::URL(a1 + 432, a2 + 54);
  *(_QWORD *)(a1 + 472) = a2[59];
  v9 = a2[60];
  a2[60] = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = v9;
  v10 = a2[61];
  a2[61] = 0;
  *(_QWORD *)(a1 + 488) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 124);
  *((_DWORD *)a2 + 124) = 0;
  *(_DWORD *)(a1 + 496) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 125);
  *((_DWORD *)a2 + 125) = 0;
  *(_DWORD *)(a1 + 500) = v10;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  v11 = a2[63];
  a2[63] = 0;
  *(_QWORD *)(a1 + 504) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 128);
  *((_DWORD *)a2 + 128) = 0;
  *(_DWORD *)(a1 + 512) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 129);
  *((_DWORD *)a2 + 129) = 0;
  *(_DWORD *)(a1 + 516) = v11;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  v12 = a2[65];
  a2[65] = 0;
  *(_QWORD *)(a1 + 520) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 132);
  *((_DWORD *)a2 + 132) = 0;
  *(_DWORD *)(a1 + 528) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 133);
  *((_DWORD *)a2 + 133) = 0;
  *(_DWORD *)(a1 + 532) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 134);
  *(_BYTE *)(a1 + 540) = *((_BYTE *)a2 + 540);
  *(_DWORD *)(a1 + 536) = v12;
  v13 = a2[68];
  a2[68] = 0;
  *(_QWORD *)(a1 + 544) = v13;
  v14 = a2[69];
  a2[69] = 0;
  *(_QWORD *)(a1 + 552) = v14;
  v15 = a2[70];
  a2[70] = 0;
  *(_QWORD *)(a1 + 560) = v15;
  v16 = a2[71];
  *(_BYTE *)(a1 + 576) = *((_BYTE *)a2 + 576);
  *(_QWORD *)(a1 + 568) = v16;
  v17 = a2[73];
  a2[73] = 0;
  *(_QWORD *)(a1 + 584) = v17;
  *(_BYTE *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 616) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 592, (uint64_t)(a2 + 74));
  v18 = a2[78];
  a2[78] = 0;
  *(_QWORD *)(a1 + 624) = v18;
  v19 = *(_OWORD *)(a2 + 79);
  v20 = *(_OWORD *)(a2 + 81);
  *(_OWORD *)(a1 + 662) = *(_OWORD *)((char *)a2 + 662);
  *(_OWORD *)(a1 + 648) = v20;
  *(_OWORD *)(a1 + 632) = v19;
  v21 = a2[85];
  a2[85] = 0;
  *(_QWORD *)(a1 + 680) = v21;
  v22 = a2[86];
  a2[86] = 0;
  *(_QWORD *)(a1 + 688) = v22;
  *(_WORD *)(a1 + 696) = *((_WORD *)a2 + 348);
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  if (*((_BYTE *)a2 + 736))
  {
    *(_DWORD *)(a1 + 728) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 704, (uint64_t)(a2 + 88));
    *(_BYTE *)(a1 + 736) = 1;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>(a2, a3);
}

uint64_t std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_assign_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    *(_WORD *)result = *(_WORD *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_assign_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(result + 16) = v2;
    LODWORD(v2) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(result + 20) = v2;
    *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_move_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 8, a2 + 8);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WTF::RunLoop::main(a1);
  v2 = (unsigned int *)*((_QWORD *)a1 + 4);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = *((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34DF108;
  v7[1] = v2;
  v7[2] = v4;
  v7[3] = v6;
  v7[4] = v5;
  v9 = v7;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E34DF108;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34DF108;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::MockHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  _BYTE *v19;
  _BOOL8 v20;
  uint64_t Map;
  _QWORD *v22;
  uint64_t v23;
  WTF *v24;
  _QWORD v25[4];
  char v26;
  _QWORD v27[4];
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
LABEL_58:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return;
  }
  if (*(_BYTE *)(v3 + 296))
  {
    fido::FidoHidMessage::addContinuationPacket();
  }
  else
  {
    fido::FidoHidMessage::createFromSerializedData();
    std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)(v3 + 248), (uint64_t)v25);
    std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)v25);
  }
  if (!*(_BYTE *)(v3 + 296))
    goto LABEL_69;
  if (!fido::FidoHidMessage::messageComplete((fido::FidoHidMessage *)(v3 + 248)))
    goto LABEL_46;
  if (!*(_BYTE *)(v3 + 296))
    goto LABEL_69;
  v5 = *(unsigned __int8 *)(v3 + 252);
  if (v5 == 3)
  {
    v6 = 0;
  }
  else
  {
    if (v5 != 16)
    {
      if (v5 == 6)
      {
        v6 = *(unsigned __int8 *)(v3 + 305);
        *(_BYTE *)(v3 + 305) = 0;
        if (v6)
        {
          v6 = 0;
          *(_BYTE *)(v3 + 304) = 1;
        }
      }
      else
      {
        v6 = 0;
      }
      goto LABEL_19;
    }
    v6 = 1;
  }
  *(_BYTE *)(v3 + 305) = 1;
LABEL_19:
  if (!*(_BYTE *)(v3 + 304) || !*(_BYTE *)(v3 + 305))
    goto LABEL_36;
  if (!*(_BYTE *)(v3 + 176))
    goto LABEL_69;
  if (*(_BYTE *)(v3 + 167) && !*(_BYTE *)(v3 + 163))
    *(_BYTE *)(v3 + 163) = v5 == 3;
  if (!v6)
  {
LABEL_36:
    v15 = 1;
LABEL_37:
    if (!*(_BYTE *)(v3 + 305))
    {
      if (!v15)
        goto LABEL_69;
      fido::FidoHidMessage::getMessagePayload((fido::FidoHidMessage *)(v3 + 248));
      v17 = *(WTF **)(v3 + 320);
      if (v17)
      {
        *(_QWORD *)(v3 + 320) = 0;
        *(_DWORD *)(v3 + 328) = 0;
        WTF::fastFree(v17, v16);
      }
      *(_QWORD *)(v3 + 320) = v25[0];
      *(_QWORD *)(v3 + 328) = v25[1];
      v15 = *(unsigned __int8 *)(v3 + 296);
    }
    if (v15)
    {
      *(_DWORD *)(v3 + 308) = *(_DWORD *)(v3 + 248);
      std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100]((fido::FidoHidMessage *)(v3 + 248));
      if (*(_BYTE *)(v3 + 176))
      {
        if (*(_BYTE *)(v3 + 165))
          WebKit::MockHidConnection::feedReports((WebKit::MockHidConnection *)v3);
LABEL_46:
        v18 = *(_QWORD *)(a1 + 8);
        if (v18)
          v19 = *(_BYTE **)(v18 + 8);
        else
          v19 = 0;
        if (v19[176])
        {
          if ((v19[160] == 0) == (v19[304] != 0) || (v19[161] == 0) == (v19[305] != 0))
          {
            v20 = 1;
            goto LABEL_57;
          }
          if (v18)
            v18 = *(_QWORD *)(v18 + 8);
          if (*(_BYTE *)(v18 + 176))
          {
            v20 = *(unsigned __int8 *)(v18 + 162) != 1;
LABEL_57:
            v4 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = 0;
            (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 16))(v4, v20);
            goto LABEL_58;
          }
        }
      }
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  *(_WORD *)(v3 + 312) = 0;
  fido::FidoHidMessage::getMessagePayload((fido::FidoHidMessage *)(v3 + 248));
  if (v30)
  {
    v7 = *v28;
    memmove(v28, v28 + 1, --v30);
    v27[0] = v28;
    v27[1] = v30;
    cbor::CBORReader::read();
    if (v7 == 2)
    {
      if (!v26)
        goto LABEL_69;
      Map = cbor::CBORValue::getMap((cbor::CBORValue *)v25);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v27);
      v22 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v27);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v27);
      if (!v26)
        goto LABEL_69;
      if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)v25) + 8) == v22)
        goto LABEL_64;
      v23 = cbor::CBORValue::getMap((cbor::CBORValue *)(v22 + 8));
      cbor::CBORValue::CBORValue();
      v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v23, (cbor::CBORValue *)v27);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v27);
      if ((_QWORD *)(v23 + 8) == v14)
        goto LABEL_64;
    }
    else
    {
      if (v7 != 1)
        goto LABEL_64;
      if (!v26)
        goto LABEL_69;
      v9 = cbor::CBORValue::getMap((cbor::CBORValue *)v25);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v27);
      v10 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v9, (cbor::CBORValue *)v27);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v27);
      if (!v26)
        goto LABEL_69;
      if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)v25) + 8) == v10)
        goto LABEL_64;
      v11 = cbor::CBORValue::getMap((cbor::CBORValue *)(v10 + 8));
      cbor::CBORValue::CBORValue();
      v12 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v11, (cbor::CBORValue *)v27);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v27);
      v13 = (_QWORD *)(v11 + 8);
      if ((_QWORD *)(v11 + 8) != v12)
        *(_BYTE *)(v3 + 312) = cbor::CBORValue::getBool((cbor::CBORValue *)(v12 + 8));
      cbor::CBORValue::CBORValue();
      v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v11, (cbor::CBORValue *)v27);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v27);
      if (v13 == v14)
        goto LABEL_64;
    }
    *(_BYTE *)(v3 + 313) = cbor::CBORValue::getBool((cbor::CBORValue *)(v14 + 8));
LABEL_64:
    if (v26)
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v25);
    v24 = (WTF *)v28;
    if (v28)
    {
      v28 = 0;
      v29 = 0;
      WTF::fastFree(v24, v8);
    }
    v15 = *(unsigned __int8 *)(v3 + 296);
    goto LABEL_37;
  }
LABEL_70:
  __break(0xC471u);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E34DF180;
  v2 = a1[96];
  a1[96] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)(a1 + 3));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E34DF180;
  v2 = a1[96];
  a1[96] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)(a1 + 3));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  WebKit::WebAuthenticatorCoordinatorProxy *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  const char *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  const JSC::ArrayBuffer *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  WebCore *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::DeferrableRefCountedBase *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BOOL4 v30;
  WebCore *v31;
  uint8_t *v32;
  WTF::StringImpl *v33;
  uint8_t buf[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return;
  if (a2)
  {
    v4 = *(WebKit::WebAuthenticatorCoordinatorProxy **)(a1 + 8);
    v5 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)v4 + 2) + 264) + 360);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5) & 1) != 0
      || ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 40))(v5) & 1) != 0)
    {
      v31 = 0;
      v6 = a1 + 24;
      v7 = *(unsigned __int8 *)(a1 + 760);
      v30 = *(_BYTE *)(a1 + 760) == 0;
      if (v7)
      {
        WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a1 + 728));
      }
      else
      {
        v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          *(_DWORD *)v13 += 2;
        v29 = v13;
      }
      *(_QWORD *)buf = &v31;
      *(_QWORD *)&buf[8] = a1 + 24;
      *(_QWORD *)&v35 = &v30;
      *((_QWORD *)&v35 + 1) = &v29;
      *(_QWORD *)&v36 = &v31;
      *((_QWORD *)&v36 + 1) = a1 + 24;
      *(_QWORD *)&v37 = &v30;
      *((_QWORD *)&v37 + 1) = &v29;
      v14 = *(unsigned int *)(a1 + 344);
      if ((_DWORD)v14 == -1)
      {
        v28 = std::__throw_bad_variant_access[abi:sn180100]();
        std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(WTF::CompletionHandler::PublicKeyCredentialCreationOptions const&)#1},WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)>)::WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &::operator()(BOOL)::{lambda(WTF::CompletionHandler::PublicKeyCredentialRequestOptions const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&,WTF::CompletionHandler::PublicKeyCredentialCreationOptions const&> &>(v28);
      }
      else
      {
        v32 = buf;
        ((void (*)(uint8_t **, uint64_t))off_1E34DF198[v14])(&v32, a1 + 48);
        WebCore::buildClientDataJsonHash(v31, v15);
        v17 = *(WTF **)(a1 + 24);
        if (v17)
        {
          *(_QWORD *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 32) = 0;
          WTF::fastFree(v17, v16);
        }
        *(_QWORD *)(a1 + 24) = *(_QWORD *)buf;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)&buf[8];
        v18 = *(_QWORD *)(a1 + 768);
        *(_QWORD *)(a1 + 768) = 0;
        v19 = v31;
        v31 = 0;
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v20 = &off_1E34DF1B8;
        v20[1] = v18;
        v20[2] = v19;
        *(_QWORD *)buf = v20;
        WebKit::AuthenticatorManager::handleRequest(v5, v6, (uint64_t)buf);
        v22 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v23 = v29;
        v29 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v21);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = v31;
        v31 = 0;
        if (v24)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v24);
      }
      return;
    }
    if (WebKit::WebAuthenticatorCoordinatorProxy::isASCAvailable(v4))
    {
      WebKit::WebAuthenticatorCoordinatorProxy::performRequest((uint64_t)v4, a1 + 24, a1 + 768);
      return;
    }
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    LOBYTE(v32) = 6;
    *(_OWORD *)buf = 0u;
    v35 = 0u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = *(_QWORD *)(a1 + 768);
    *(_QWORD *)(a1 + 768) = 0;
    (*(void (**)(uint64_t, uint8_t *, _QWORD, uint8_t **))(*(_QWORD *)v25 + 16))(v25, buf, 0, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v27 = v33;
    v33 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)buf, v26);
    v11 = qword_1ECE71AC8;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v12 = "Web Authentication is not currently supported in this environment.";
      goto LABEL_14;
    }
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    LOBYTE(v32) = 31;
    *(_OWORD *)buf = 0u;
    v35 = 0u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = *(_QWORD *)(a1 + 768);
    *(_QWORD *)(a1 + 768) = 0;
    (*(void (**)(uint64_t, uint8_t *, _QWORD, uint8_t **))(*(_QWORD *)v8 + 16))(v8, buf, 0, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v10 = v33;
    v33 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)buf, v9);
    v11 = qword_1ECE71AC8;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v12 = "Request cancelled due to rejected prompt after lack of user gesture.";
LABEL_14:
      _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
    }
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(WTF::CompletionHandler::PublicKeyCredentialCreationOptions const&)#1},WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)>)::WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &::operator()(BOOL)::{lambda(WTF::CompletionHandler::PublicKeyCredentialRequestOptions const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&,WTF::CompletionHandler::PublicKeyCredentialCreationOptions const&> &>(WTF::DeferrableRefCountedBase ****a1)
{
  WTF::DeferrableRefCountedBase ***v1;
  WTF::StringImpl *v2;
  WTF::DeferrableRefCountedBase *v3;
  uint64_t result;
  WTF *v5;
  WTF::DeferrableRefCountedBase *v6;

  v1 = *a1;
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)((*a1)[1] + 74));
  WebCore::buildClientDataJson();
  v3 = **v1;
  **v1 = v6;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  result = (uint64_t)v5;
  if (v5)
    return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v5, v2);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(WTF::CompletionHandler::PublicKeyCredentialCreationOptions const&)#1},WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)>)::WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &::operator()(BOOL)::{lambda(WTF::CompletionHandler::PublicKeyCredentialRequestOptions const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&,WTF::CompletionHandler::PublicKeyCredentialCreationOptions const&> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::DeferrableRefCountedBase **v3;
  WTF::DeferrableRefCountedBase *v4;
  uint64_t result;
  WTF *v6;
  WTF::DeferrableRefCountedBase *v7;

  v1 = *a1;
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(*(_QWORD *)(*a1 + 40) + 592));
  WebCore::buildClientDataJson();
  v3 = *(WTF::DeferrableRefCountedBase ***)(v1 + 32);
  v4 = *v3;
  *v3 = v7;
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  result = (uint64_t)v6;
  if (v6)
    return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v6, v2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::~CallableWrapper(_QWORD *a1)
{
  WTF::DeferrableRefCountedBase *v2;
  uint64_t v3;

  *a1 = &off_1E34DF1B8;
  v2 = (WTF::DeferrableRefCountedBase *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF::DeferrableRefCountedBase *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DF1B8;
  v3 = (WTF::DeferrableRefCountedBase *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1},void,WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = a1 + 16;
  v5[1] = a1 + 8;
  v5[2] = a1 + 8;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1}::operator()(WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>)::{lambda(WTF::DefaultRefDerefTraits const&)#1},WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)>)::WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &::operator()(BOOL)::std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment>::operator()(WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>)::{lambda(WTF::CompletionHandler::ExceptionData const)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WTF::CompletionHandler::AuthenticatorAttachment> &>(v4);
  }
  else
  {
    v6 = v5;
    return ((uint64_t (*)(_QWORD **))off_1E34DF1D0[v2])(&v6);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1}::operator()(WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>)::{lambda(WTF::DefaultRefDerefTraits const&)#1},WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)>)::WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &::operator()(BOOL)::std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment>::operator()(WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>)::{lambda(WTF::CompletionHandler::ExceptionData const)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WTF::CompletionHandler::AuthenticatorAttachment> &>(uint64_t *a1, WebCore::AuthenticatorResponse **a2)
{
  uint64_t v3;
  WTF::DeferrableRefCountedBase *v4;
  WTF::DeferrableRefCountedBase *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11[8];
  WTF::StringImpl *v12;
  _QWORD v13[13];
  WTF::DeferrableRefCountedBase *v14;

  v3 = *a1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a2 + 24))(v13);
  v4 = **(WTF::DeferrableRefCountedBase ***)v3;
  **(_QWORD **)v3 = 0;
  v5 = v14;
  v14 = v4;
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  v6 = *(uint64_t **)(v3 + 8);
  v7 = WebCore::AuthenticatorResponse::attachment(*a2);
  v11[0] = 0;
  v12 = 0;
  v8 = *v6;
  *v6 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *))(*(_QWORD *)v8 + 16))(v8, v13, v7, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v13, v9);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(BOOL)::{lambda(std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment> &&)#1}::operator()(WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>)::{lambda(WTF::DefaultRefDerefTraits const&)#1},WebKit::WebAuthenticatorCoordinatorProxy::handleRequest(WebKit::WebAuthenticationRequestData &,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)>)::WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &::operator()(BOOL)::std::variant<WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>,WTF::CompletionHandler::AuthenticatorAttachment>::operator()(WTF::Ref<WTF::CompletionHandler::AuthenticatorResponse,WTF::RawPtrTraits<std::variant>,WTF::DefaultRefDerefTraits<std::variant>>)::{lambda(WTF::CompletionHandler::ExceptionData const)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WTF::CompletionHandler::AuthenticatorAttachment> &>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  _OWORD v5[10];

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  memset(v5, 0, sizeof(v5));
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _OWORD *, _QWORD, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5, 0, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v5, v4);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(unsigned int *a1, WTF::FastMalloc *a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[2];
  if (v4 < (unint64_t)a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > (unint64_t)a2)
      a2 = (WTF::FastMalloc *)v6;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, a2);
  }
  a1[3] = v2;
  return 1;
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__find_equal<fido::ProtocolVersion>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v7 + 28) = *a4;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__find_equal<fido::ProtocolVersion>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

unint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, WTF::FastMalloc *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > (unint64_t)a2)
      a2 = (WTF::FastMalloc *)v10;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > (unint64_t)a2)
      a2 = (WTF::FastMalloc *)v8;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::feedReports(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)a1 = &off_1E34DF1F0;
  v3 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::feedReports(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E34DF1F0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::MockHidConnection::feedReports(void)::$_0,void>::call(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return WebKit::HidConnection::receiveReport(v2, (uint64_t *)(result + 8));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MockHidConnection::continueFeedReports(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF218;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockHidConnection::continueFeedReports(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF218;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::MockHidConnection::continueFeedReports(void)::$_0,void>::call(WTF *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WTF **)(v1 + 8);
    if (result)
      return WebKit::MockHidConnection::feedReports(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapNfcDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34DF240;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapNfcDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DF240;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapNfcDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FidoService::getInfo(std::unique_ptr<WebKit::CtapDriver> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34DF268;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FidoService::getInfo(std::unique_ptr<WebKit::CtapDriver> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34DF268;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::FidoService::getInfo(std::unique_ptr<WebKit::CtapDriver> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD **v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  WTF *v25;
  WTF **v26;
  WTF *v27;
  WTF **v28;
  int v29;
  WTF **v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  WTF *v44[2];
  WTF *v45;
  int v46;
  WTF *v47;
  int v48;
  char v49;
  _BYTE v50[40];
  WTF *v51;
  int v52;
  char v53;
  char v54;
  _DWORD *v55;

  v2 = result[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result[2];
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          result = (uint64_t *)(v3 + 24);
          v6 = *(_QWORD *)(v3 + 24);
          if (v6)
          {
            v8 = *(_DWORD *)(v6 - 8);
            v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
            v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
            v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
            v12 = v8 & ((v11 >> 31) ^ v11);
            v13 = *(_QWORD *)(v6 + 8 * v12);
            if (v13 != v5)
            {
              v14 = 1;
              while (v13)
              {
                v12 = ((_DWORD)v12 + v14) & v8;
                v13 = *(_QWORD *)(v6 + 8 * v12);
                ++v14;
                if (v13 == v5)
                  goto LABEL_12;
              }
              v12 = *(unsigned int *)(v6 - 4);
            }
LABEL_12:
            if (v12 != *(_DWORD *)(v6 - 4))
            {
              v15 = (_DWORD **)(v6 + 8 * v12);
              v16 = *v15;
              *v15 = 0;
              v55 = v16;
              v17 = *result;
              if (!*result || (v17 += 8 * *(unsigned int *)(v17 - 4), (_DWORD **)v17 != v15))
              {
                if ((_DWORD **)v17 != v15)
                {
                  *v15 = (_DWORD *)-1;
                  ++*(_DWORD *)(*result - 16);
                  v18 = *result;
                  v19 = *result ? *(_DWORD *)(v18 - 12) - 1 : -1;
                  *(_DWORD *)(v18 - 12) = v19;
                  v20 = *result;
                  if (*result)
                  {
                    v21 = 6 * *(_DWORD *)(v20 - 12);
                    v22 = *(_DWORD *)(v20 - 4);
                    if (v21 < v22 && v22 >= 9)
                      result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(result, v22 >> 1, 0);
                  }
                }
              }
              if (v16)
              {
                v24 = *(_QWORD *)(v3 + 16);
                if (!v24 || !*(_QWORD *)(v24 + 8) || !*(_DWORD *)(a2 + 12))
                {
                  v55 = 0;
                  return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
                }
                fido::readCTAPGetInfoResponse();
                if (!v54)
                  goto LABEL_41;
                v25 = v44[0];
                if (!v44[0])
                  goto LABEL_41;
                v26 = v44;
                do
                {
                  v27 = v25;
                  v28 = v26;
                  v29 = *((_DWORD *)v25 + 7);
                  v30 = (WTF **)((char *)v25 + 8);
                  if (v29 >= 0)
                  {
                    v30 = (WTF **)v27;
                    v26 = (WTF **)v27;
                  }
                  v25 = *v30;
                }
                while (v25);
                if (v26 != v44 && (v29 >= 0 ? (v31 = (int *)v27) : (v31 = (int *)v28), v31[7] <= 0))
                {
                  v40 = *(_QWORD *)(v3 + 16);
                  if (v40)
                    v33 = *(_QWORD *)(v40 + 8);
                  else
                    v33 = 0;
                  v41 = WTF::fastMalloc((WTF *)0x3D0);
                  v35 = WebKit::CtapAuthenticator::CtapAuthenticator(v41, (uint64_t *)&v55, &v43);
                }
                else
                {
LABEL_41:
                  v16[4] = 1;
                  v32 = *(_QWORD *)(v3 + 16);
                  if (v32)
                    v33 = *(_QWORD *)(v32 + 8);
                  else
                    v33 = 0;
                  v34 = WTF::fastMalloc((WTF *)0x358);
                  v35 = WebKit::U2fAuthenticator::U2fAuthenticator(v34, (uint64_t *)&v55);
                }
                v42 = (uint64_t *)v35;
                (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v33 + 16))(v33, &v42);
                result = v42;
                v42 = 0;
                if (result)
                {
                  if (*((_DWORD *)result + 2) == 1)
                    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
                  else
                    --*((_DWORD *)result + 2);
                }
                if (v54)
                {
                  if (v53)
                  {
                    v37 = v51;
                    if (v51)
                    {
                      v51 = 0;
                      v52 = 0;
                      WTF::fastFree(v37, v36);
                    }
                  }
                  if (v50[16])
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v36);
                  if (v49)
                  {
                    v38 = v47;
                    if (v47)
                    {
                      v47 = 0;
                      v48 = 0;
                      WTF::fastFree(v38, v36);
                    }
                  }
                  v39 = v45;
                  if (v45)
                  {
                    v45 = 0;
                    v46 = 0;
                    WTF::fastFree(v39, v36);
                  }
                  result = (uint64_t *)std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v43, v44[0]);
                }
                v16 = v55;
                v55 = 0;
                if (v16)
                  return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(v4, v14);
      v14 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_31:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t WebKit::U2fAuthenticator::U2fAuthenticator(uint64_t a1, uint64_t *a2)
{
  WebKit::Authenticator *v4;
  uint64_t v5;
  WTF::RunLoop::TimerBase *v6;
  WTF::RunLoop *v7;
  _QWORD *v8;

  v4 = WebKit::Authenticator::Authenticator((WebKit::Authenticator *)a1);
  v5 = *a2;
  *a2 = 0;
  *((_QWORD *)v4 + 97) = v5;
  *(_QWORD *)v4 = off_1E34DF290;
  v6 = (WebKit::Authenticator *)((char *)v4 + 784);
  v7 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34DF3F0;
  v8[1] = WebKit::U2fAuthenticator::retryLastCommand;
  v8[2] = 0;
  v8[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v6, v7);
  *(_QWORD *)(a1 + 784) = off_1E34ABE00;
  *(_QWORD *)(a1 + 808) = v8;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  return a1;
}

WTF *WebKit::U2fAuthenticator::retryLastCommand(WebKit::U2fAuthenticator *this)
{
  return WebKit::U2fAuthenticator::issueCommand((uint64_t)this, (uint64_t)this + 816, *((_BYTE *)this + 832));
}

WTF *WebKit::U2fAuthenticator::makeCredential(WebKit::U2fAuthenticator *this)
{
  NSObject *v2;
  PublicKeyCredentialCreationOptions *v3;
  char *v4;
  WTF *result;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint8_t buf[4];
  WebKit::U2fAuthenticator *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71AC8;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v8)
      v4 = (char *)v8 + 16;
    else
      v4 = 0;
    *(_DWORD *)buf = 134218242;
    v10 = this;
    v11 = 2080;
    v12 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::makeCredential", buf, 0x16u);
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v3);
      else
        --*(_DWORD *)v8;
    }
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  if (*((_DWORD *)this + 88))
    std::__throw_bad_variant_access[abi:sn180100]();
  result = (WTF *)fido::isConvertibleToU2fRegisterCommand((WebKit::U2fAuthenticator *)((char *)this + 56), v3);
  if ((_DWORD)result)
  {
    if (*((_DWORD *)this + 45))
    {
      v6 = *((_QWORD *)this + 105);
      *((_QWORD *)this + 105) = v6 + 1;
      return WebKit::U2fAuthenticator::checkExcludeList(this, v6);
    }
    else
    {
      return (WTF *)WebKit::U2fAuthenticator::issueRegisterCommand(this);
    }
  }
  return result;
}

WTF *WebKit::U2fAuthenticator::checkExcludeList(WebKit::U2fAuthenticator *this, unint64_t a2)
{
  NSObject *v4;
  char *v5;
  void *v6;
  WTF *result;
  void *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint8_t buf[12];
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71AC8;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v10)
      v5 = (char *)v10 + 16;
    else
      v5 = 0;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = this;
    v12 = 2080;
    v13 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::checkExcludeList", buf, 0x16u);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v6);
      else
        --*(_DWORD *)v10;
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  if (*((_DWORD *)this + 88))
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
  if (*((unsigned int *)this + 45) <= a2)
    return (WTF *)WebKit::U2fAuthenticator::issueRegisterCommand(this);
  fido::convertToU2fCheckOnlySignCommand();
  if (!BYTE2(v13))
  {
    __break(1u);
    goto LABEL_22;
  }
  result = WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)buf, 1);
  if (BYTE2(v13))
  {
    result = *(WTF **)buf;
    if (*(_QWORD *)buf)
    {
      memset(buf, 0, sizeof(buf));
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

uint64_t WebKit::U2fAuthenticator::issueRegisterCommand(WebKit::U2fAuthenticator *this)
{
  NSObject *v2;
  uint64_t result;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;
  int v14;
  char v15;
  uint8_t buf[4];
  WebKit::U2fAuthenticator *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 88))
    goto LABEL_46;
  fido::convertToU2fRegisterCommand();
  v2 = qword_1ECE71AC8;
  result = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (!(_DWORD)result)
      goto LABEL_35;
    WebCore::toString();
    WTF::String::utf8();
    if (v12)
      v4 = (char *)v12 + 16;
    else
      v4 = 0;
    WTF::base64EncodeToString();
    WTF::String::utf8();
    if (v10)
      v5 = (char *)v10 + 16;
    else
      v5 = 0;
    *(_DWORD *)buf = 134218498;
    v17 = this;
    v18 = 2080;
    v19 = v4;
    v20 = 2080;
    v21 = v5;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueRegisterCommand: Sending %s", buf, 0x20u);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v6);
      else
        --*(_DWORD *)v10;
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v6);
      else
        --*(_DWORD *)v12;
    }
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v15)
    {
LABEL_35:
      result = (uint64_t)WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)&v13, 0);
      goto LABEL_36;
    }
    __break(1u);
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (!(_DWORD)result)
    return result;
  WebCore::toString();
  WTF::String::utf8();
  if (v12)
    v7 = (char *)v12 + 16;
  else
    v7 = 0;
  *(_DWORD *)buf = 134218242;
  v17 = this;
  v18 = 2080;
  v19 = v7;
  _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueRegisterCommand: request not convertible to U2F.", buf, 0x16u);
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v8);
    else
      --*(_DWORD *)v12;
  }
  result = (uint64_t)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      result = WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_36:
  if (v15)
  {
    result = (uint64_t)v13;
    if (v13)
    {
      v13 = 0;
      v14 = 0;
      return WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

WTF *WebKit::U2fAuthenticator::issueNewCommand(uint64_t a1, uint64_t *a2, char a3)
{
  NSObject *v6;
  char *v7;
  void *v8;
  WTF::StringImpl *v10;
  WTF *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71AC8;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v11)
      v7 = (char *)v11 + 16;
    else
      v7 = 0;
    *(_DWORD *)buf = 134218242;
    v13 = a1;
    v14 = 2080;
    v15 = v7;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueNewCommand", buf, 0x16u);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v8);
      else
        --*(_DWORD *)v11;
    }
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 816, a2);
  *(_BYTE *)(a1 + 832) = a3;
  return WebKit::U2fAuthenticator::issueCommand(a1, a1 + 816, a3);
}

uint64_t WebKit::U2fAuthenticator::getAssertion(WebKit::U2fAuthenticator *this)
{
  NSObject *v2;
  PublicKeyCredentialRequestOptions *v3;
  char *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  uint64_t result;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint8_t buf[4];
  WebKit::U2fAuthenticator *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71AC8;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v13)
      v4 = (char *)v13 + 16;
    else
      v4 = 0;
    *(_DWORD *)buf = 134218242;
    v15 = this;
    v16 = 2080;
    v17 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::getAssertion: Sending bogus sign.", buf, 0x16u);
    v5 = v13;
    v13 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, v3);
      else
        --*(_DWORD *)v5;
    }
    v6 = v12;
    v12 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  if (*((_DWORD *)this + 88) != 1)
    std::__throw_bad_variant_access[abi:sn180100]();
  if ((fido::isConvertibleToU2fSignCommand((WebKit::U2fAuthenticator *)((char *)this + 56), v3) & 1) != 0)
  {
    v7 = *((_QWORD *)this + 105);
    *((_QWORD *)this + 105) = v7 + 1;
    return WebKit::U2fAuthenticator::issueSignCommand(this, v7);
  }
  else
  {
    v9 = qword_1ECE71AC8;
    result = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)result)
    {
      WebCore::toString();
      WTF::String::utf8();
      if (v13)
        v10 = (char *)v13 + 16;
      else
        v10 = 0;
      *(_DWORD *)buf = 134218242;
      v15 = this;
      v16 = 2080;
      v17 = v10;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::getAssertion: command not convertible.", buf, 0x16u);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v11);
        else
          --*(_DWORD *)v13;
      }
      result = (uint64_t)v12;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          return WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::U2fAuthenticator::issueSignCommand(WebKit::U2fAuthenticator *this, unint64_t a2)
{
  NSObject *v4;
  uint64_t result;
  char *v6;
  char *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  WTF *v13;
  char *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int v22;
  char v23;
  WTF::StringImpl *v24;
  uint8_t buf[12];
  __int16 v26;
  char *v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 88) != 1)
    goto LABEL_62;
  if (*((unsigned int *)this + 25) > a2)
  {
    fido::convertToU2fSignCommand();
    v4 = qword_1ECE71AC8;
    result = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT);
    if (!v23)
    {
      if (!(_DWORD)result)
        return result;
      WebCore::toString();
      WTF::String::utf8();
      if (v24)
        v14 = (char *)v24 + 16;
      else
        v14 = 0;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = this;
      v26 = 2080;
      v27 = v14;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueSignCommand: request not convertible to U2F.", buf, 0x16u);
      v16 = v24;
      v24 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v15);
        else
          --*(_DWORD *)v16;
      }
      result = (uint64_t)v20;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          result = WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v20 -= 2;
      }
LABEL_51:
      if (v23)
      {
        result = (uint64_t)v21;
        if (v21)
        {
          v21 = 0;
          v22 = 0;
          return WTF::fastFree((WTF *)result, v15);
        }
      }
      return result;
    }
    if (!(_DWORD)result)
      goto LABEL_50;
    WebCore::toString();
    WTF::String::utf8();
    if (v24)
      v6 = (char *)v24 + 16;
    else
      v6 = 0;
    WTF::base64EncodeToString();
    WTF::String::utf8();
    if (v19)
      v7 = (char *)v19 + 16;
    else
      v7 = 0;
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = this;
    v26 = 2080;
    v27 = v6;
    v28 = 2048;
    v29 = a2;
    v30 = 2080;
    v31 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueSignCommand: index: %lu Sending %s", buf, 0x2Au);
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        WTF::fastFree(v19, v8);
      else
        --*(_DWORD *)v19;
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v18 -= 2;
    }
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v8);
      else
        --*(_DWORD *)v17;
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v23)
    {
LABEL_50:
      result = (uint64_t)WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)&v21, 4);
      goto LABEL_51;
    }
    __break(1u);
LABEL_62:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v9 = qword_1ECE71AC8;
  v10 = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v10)
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v21)
      v11 = (char *)v21 + 16;
    else
      v11 = 0;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = this;
    v26 = 2080;
    v27 = v11;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueSignCommand: Sending bogus sign.", buf, 0x16u);
    v13 = v21;
    v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v10 = (uint64_t)v24;
    v24 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        v10 = WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  fido::constructBogusU2fRegistrationCommand((fido *)v10);
  WebKit::U2fAuthenticator::issueNewCommand((uint64_t)this, (uint64_t *)buf, 3);
  result = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    memset(buf, 0, sizeof(buf));
    return WTF::fastFree((WTF *)result, v15);
  }
  return result;
}

WTF *WebKit::U2fAuthenticator::issueCommand(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v6;
  char *v7;
  char *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  WTF *result;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint8_t buf[12];
  _BYTE v25[10];
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71AC8;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v23)
      v7 = (char *)v23 + 16;
    else
      v7 = 0;
    WTF::base64EncodeToString();
    WTF::String::utf8();
    if (v21)
      v8 = (char *)v21 + 16;
    else
      v8 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)v25 = 2080;
    *(_QWORD *)&v25[2] = v7;
    v26 = 2080;
    v27 = v8;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::issueCommand: Sending %s", buf, 0x20u);
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v9);
      else
        --*(_DWORD *)v21;
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v20 -= 2;
    }
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v11 = *(_QWORD *)(a1 + 776);
  v12 = (WTF *)*(unsigned int *)(a2 + 12);
  memset(buf, 0, sizeof(buf));
  *(_DWORD *)v25 = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v13 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)&buf[8] = (_DWORD)v12;
    *(_QWORD *)buf = v13;
    memcpy(v13, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a1 + 16), a1);
  v14 = *(unsigned int **)(a1 + 16);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = &off_1E34DF418;
  *(_QWORD *)(v16 + 8) = v14;
  *(_BYTE *)(v16 + 16) = a3;
  v23 = (WTF *)v16;
  (*(void (**)(uint64_t, uint8_t *, WTF **))(*(_QWORD *)v11 + 16))(v11, buf, &v23);
  v18 = v23;
  v23 = 0;
  if (v18)
    (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
  result = *(WTF **)buf;
  if (*(_QWORD *)buf)
  {
    memset(buf, 0, sizeof(buf));
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

unsigned int *WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int *a6)
{
  const WTF::String *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  int v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *result;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  char v60;
  WTF *v61;
  WTF *v62;
  _BYTE v63[24];
  int v64;
  _BYTE v65[24];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 968), &v59);
  WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v59, v12);
  v65[0] = 0;
  v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v65, (uint64_t)v61 + 8);
  v14 = v61;
  v61 = 0;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v14, v13);
  v15 = v59;
  v59 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = WebKit::WebDeviceOrientationAndMotionAccessController::cachedDeviceOrientationPermission((WebKit::WebDeviceOrientationAndMotionAccessController *)a1, (const WebCore::SecurityOriginData *)v65);
  if ((_DWORD)v16 != 2 || (a5 & 1) == 0)
  {
    v33 = *(_QWORD *)a6;
    *(_QWORD *)a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v16);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    goto LABEL_56;
  }
  v17 = a1 + 2;
  v18 = a1[2];
  v57 = a3;
  v58 = a4;
  v56 = a2;
  if (v18
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1 + 2, 0), (v18 = *v17) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  LODWORD(v61) = -1640531527;
  WORD2(v61) = 0;
  BYTE6(v61) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v61, (uint64_t)v65);
  v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v61) & v19;
  v21 = (unsigned int *)(v18 + 48 * v20);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21) & 1) == 0)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v21);
      if ((v24 & 1) != 0)
      {
        v22 = v21;
      }
      else if ((WebCore::operator==() & 1) != 0)
      {
        goto LABEL_37;
      }
      v20 = (v20 + v23) & v19;
      v21 = (unsigned int *)(v18 + 48 * v20);
      ++v23;
    }
    while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21));
    if (v22)
    {
      *((_OWORD *)v22 + 1) = 0u;
      *((_OWORD *)v22 + 2) = 0u;
      *(_OWORD *)v22 = 0u;
      --*(_DWORD *)(*v17 - 16);
      v21 = v22;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v21, (uint64_t)v65);
  v26 = v21[11];
  if ((_DWORD)v26)
  {
    v27 = (uint64_t *)*((_QWORD *)v21 + 4);
    v28 = 8 * v26;
    do
    {
      v29 = *v27;
      *v27 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      ++v27;
      v28 -= 8;
    }
    while (v28);
  }
  v30 = (WTF *)*((_QWORD *)v21 + 4);
  if (v30)
  {
    *((_QWORD *)v21 + 4) = 0;
    v21[10] = 0;
    WTF::fastFree(v30, v25);
  }
  v61 = 0;
  *((_QWORD *)v21 + 4) = 0;
  v62 = 0;
  *((_QWORD *)v21 + 5) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v25);
  v31 = *v17;
  if (*v17)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v35 = *v17;
  if (*v17)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 <= 0x400)
  {
    if (3 * v38 > 4 * v37)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v38 <= 2 * v37)
LABEL_36:
    v21 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1 + 2, v21);
LABEL_37:
  result = v21 + 8;
  v39 = v21[11];
  if ((_DWORD)v39 == v21[10])
  {
    result = (unsigned int *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v39 + 1, (unint64_t)a6);
    a6 = result;
    v39 = v21[11];
    v40 = (_QWORD *)(*((_QWORD *)v21 + 4) + 8 * v39);
  }
  else
  {
    v40 = (_QWORD *)(*(_QWORD *)result + 8 * v39);
  }
  v41 = *(_QWORD *)a6;
  *(_QWORD *)a6 = 0;
  *v40 = v41;
  v42 = v39 + 1;
  v21[11] = v42;
  if (v42 <= 1)
  {
    v43 = *(_QWORD *)(v56 + 104);
    v61 = (WTF *)a1;
    v44 = *a1;
    if (*a1)
      goto LABEL_64;
    v44 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v44 = 1;
    *(_QWORD *)(v44 + 8) = a1;
    v46 = (unsigned int *)*a1;
    *a1 = v44;
    if (!v46)
      goto LABEL_64;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, v45);
    }
    v44 = *a1;
    if (*a1)
    {
LABEL_64:
      do
        v49 = __ldaxr((unsigned int *)v44);
      while (__stlxr(v49 + 1, (unsigned int *)v44));
    }
    v62 = (WTF *)v44;
    v63[0] = 0;
    v64 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v63, (uint64_t)v65);
    v50 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v50 = &off_1E34DF440;
    *(_QWORD *)(v50 + 8) = v61;
    v51 = v62;
    v62 = 0;
    *(_QWORD *)(v50 + 16) = v51;
    *(_BYTE *)(v50 + 24) = 0;
    *(_DWORD *)(v50 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v50 + 24, (uint64_t)v63);
    v59 = (WTF::StringImpl *)v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v43 + 504))(v43, v56, v57, v58, &v59);
    v53 = v59;
    v59 = 0;
    if (v53)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 8))(v53);
    if (v64 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v64])(&v60, v63);
    v64 = -1;
    result = (unsigned int *)v62;
    v62 = 0;
    if (result)
    {
      do
      {
        v54 = __ldaxr(result);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, result));
      if (!v55)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v52);
      }
    }
  }
LABEL_56:
  if (v66 != -1)
    return (unsigned int *)((uint64_t (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v66])(&v61, v65);
  return result;
}

uint64_t WebKit::WebsiteDataRecord::displayNameForHostName(WebKit::WebsiteDataRecord *this, const WTF::String *a2)
{
  WebCore::PublicSuffixStore::singleton(this);
  return WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
}

uint64_t WebKit::WebsiteDataStore::createNonPersistent@<X0>(WebKit::WebsiteDataStore **a1@<X8>)
{
  WebKit::WebsiteDataStore *v3;
  uint64_t v4;
  uint64_t EphemeralSessionID;
  CFTypeRef *v7;

  v3 = (WebKit::WebsiteDataStore *)API::Object::newObject(0x1F8uLL, 121);
  v4 = API::Object::newObject(0x220uLL, 122);
  v7 = (CFTypeRef *)WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v4, 0, 1);
  EphemeralSessionID = PAL::SessionID::generateEphemeralSessionID((PAL::SessionID *)v7);
  WebKit::WebsiteDataStore::WebsiteDataStore((uint64_t)v3, (uint64_t *)&v7, EphemeralSessionID);
  *a1 = v3;
  if (v7)
    CFRelease(v7[1]);
  return WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(v3);
}

uint64_t WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(WebKit::WebsiteDataStore *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)this + 34))
  {
    result = 490;
    __break(0xC471u);
  }
  else
  {
    *((_BYTE *)this + 34) = 1;
    WTF::WorkQueue::create();
    v2 = v29;
    CFRetain(*((CFTypeRef *)this + 1));
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    v27 = *(_OWORD *)(*((_QWORD *)this + 26) + 32) != 0;
    v3 = WTF::fastMalloc((WTF *)0xB8);
    *(_QWORD *)v3 = off_1E34DF530;
    *(_QWORD *)(v3 + 8) = this;
    *(_QWORD *)(v3 + 16) = this;
    v4 = *((_QWORD *)&v17 + 1);
    v17 = 0u;
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)(v3 + 32) = v18;
    v5 = *((_QWORD *)&v18 + 1);
    v18 = 0u;
    *(_QWORD *)(v3 + 40) = v5;
    *(_QWORD *)(v3 + 48) = v19;
    v6 = *((_QWORD *)&v19 + 1);
    v19 = 0u;
    *(_QWORD *)(v3 + 56) = v6;
    *(_QWORD *)(v3 + 64) = v20;
    v7 = *((_QWORD *)&v20 + 1);
    v20 = 0u;
    *(_QWORD *)(v3 + 72) = v7;
    *(_QWORD *)(v3 + 80) = v21;
    v8 = *((_QWORD *)&v21 + 1);
    v21 = 0u;
    *(_QWORD *)(v3 + 88) = v8;
    *(_QWORD *)(v3 + 96) = v22;
    v9 = *((_QWORD *)&v22 + 1);
    v22 = 0u;
    *(_QWORD *)(v3 + 104) = v9;
    *(_QWORD *)(v3 + 112) = v23;
    v10 = *((_QWORD *)&v23 + 1);
    v23 = 0u;
    *(_QWORD *)(v3 + 120) = v10;
    *(_QWORD *)(v3 + 128) = v24;
    v11 = *((_QWORD *)&v24 + 1);
    v24 = 0u;
    *(_QWORD *)(v3 + 136) = v11;
    *(_QWORD *)(v3 + 144) = v25;
    v12 = *((_QWORD *)&v25 + 1);
    v25 = 0u;
    *(_QWORD *)(v3 + 152) = v12;
    *(_QWORD *)(v3 + 160) = v26;
    v13 = *((_QWORD *)&v26 + 1);
    v26 = 0u;
    *(_QWORD *)(v3 + 168) = v13;
    *(_BYTE *)(v3 + 176) = v27;
    v28 = v3;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v28);
    v15 = v28;
    v28 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)((char *)&v17 + 8), v14);
    if ((_QWORD)v17)
      CFRelease(*(CFTypeRef *)(v17 + 8));
    result = v29;
    v29 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, WebKit::WebsiteDataStore **a3@<X8>)
{
  uint64_t v6;
  WebKit::WebsiteDataStore *v7;

  v6 = API::Object::newObject(0x1F8uLL, 121);
  v7 = (WebKit::WebsiteDataStore *)WebKit::WebsiteDataStore::WebsiteDataStore(v6, a1, a2);
  *a3 = v7;
  return WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(v7);
}

uint64_t WebKit::WebsiteDataStore::WebsiteDataStore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  WebKit::AuthenticatorManager *v7;
  _QWORD *v8;
  WebCore::LocalWebLockRegistry *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL8 v12;
  WTF *v13;
  WTF *v14;
  WebKit *v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WebKit *v37;
  WTF::StringImpl *v38;
  const WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  WTF **v46;
  int i;
  unsigned int v48;
  WTF **v49;
  WTF *v50;
  int v51;
  NSObject *v52;
  const WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int j;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint8_t buf[4];
  uint64_t v69;
  __int16 v70;
  WTF *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34DF2C0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 208) = v6;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(v6 + 482);
  *(_BYTE *)(a1 + 265) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  WTF::WorkQueue::create();
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  v7 = (WebKit::AuthenticatorManager *)WTF::fastMalloc((WTF *)0x358);
  *(_QWORD *)(a1 + 360) = WebKit::AuthenticatorManager::AuthenticatorManager(v7);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = off_1E34DF468;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 392) = v8;
  *(_QWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 424) = 0;
  v9 = (WebCore::LocalWebLockRegistry *)WTF::fastMalloc((WTF *)0x20);
  v10 = WebCore::LocalWebLockRegistry::LocalWebLockRegistry(v9);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = v10;
  *(_WORD *)(a1 + 456) = 1;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  v11 = qword_1ECE718E8;
  v12 = os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    v13 = *(WTF **)(a1 + 24);
    *(_DWORD *)buf = 134218240;
    v69 = a1;
    v70 = 2048;
    v71 = v13;
    _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - WebsiteDataStore::WebsiteDataStore sessionID=%llu", buf, 0x16u);
  }
  WebKit::determineTrackingPreventionState((WebKit *)v12);
  WTF::allPrivileges(v14);
  v15 = (WebKit *)WTF::setProcessPrivileges();
  v16 = (unsigned int *)WebKit::allDataStores(v15);
  v17 = WebKit::allDataStores(void)::map;
  if (WebKit::allDataStores(void)::map
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(),
        (v17 = WebKit::allDataStores(void)::map) != 0))
  {
    v18 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = *(_QWORD *)(a1 + 24);
  v20 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v18 & ((v22 >> 31) ^ v22);
  v24 = (_QWORD *)(v17 + 16 * v23);
  v25 = *v24;
  if (!*v24)
  {
LABEL_14:
    *v24 = v19;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
    v29 = *(unsigned int **)(a1 + 16);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
    v16 = (unsigned int *)v24[1];
    v24[1] = v29;
    if (v16)
    {
      do
      {
        v32 = __ldaxr(v16);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v16));
      if (!v33)
      {
        atomic_store(1u, v16);
        v16 = (unsigned int *)WTF::fastFree((WTF *)v16, v28);
      }
    }
    if (WebKit::allDataStores(void)::map)
      v31 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(WebKit::allDataStores(void)::map - 12) = v31;
    if (WebKit::allDataStores(void)::map)
      v34 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(WebKit::allDataStores(void)::map - 16) + v34);
    v36 = *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
        goto LABEL_29;
    }
    else if (3 * v36 > 4 * v35)
    {
      goto LABEL_29;
    }
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand();
    goto LABEL_29;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != v19)
  {
    if (v25 == -1)
      v26 = v24;
    v23 = (v23 + v27) & v18;
    v24 = (_QWORD *)(v17 + 16 * v23);
    v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(v17 - 16);
        v19 = *(_QWORD *)(a1 + 24);
        v24 = v26;
      }
      goto LABEL_14;
    }
  }
LABEL_29:
  v37 = WebKit::WebsiteDataStore::initializeAppBoundDomains((WebKit *)v16, 0);
  WebKit::WebsiteDataStore::initializeManagedDomains(v37, 0);
  v40 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 208) + 112);
  if (v40)
    *(_DWORD *)v40 += 2;
  v67 = v40;
  v41 = *(_QWORD *)(a1 + 24);
  if (v41 < 0 && v41 != -1)
    goto LABEL_65;
  if (!v40 || !*((_DWORD *)v40 + 1))
    goto LABEL_64;
  if ((_MergedGlobals_98 & 1) != 0)
  {
    v42 = qword_1ECE72E50;
    if (qword_1ECE72E50)
      goto LABEL_37;
  }
  else
  {
    qword_1ECE72E50 = 0;
    _MergedGlobals_98 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
  v42 = qword_1ECE72E50;
  if (!qword_1ECE72E50)
  {
    v43 = 0;
    goto LABEL_38;
  }
LABEL_37:
  v43 = *(_DWORD *)(v42 - 8);
LABEL_38:
  v44 = *((_DWORD *)v40 + 4);
  if (v44 >= 0x100)
    v45 = v44 >> 8;
  else
    v45 = WTF::StringImpl::hashSlowCase(v40);
  v46 = 0;
  for (i = 1; ; ++i)
  {
    v48 = v45 & v43;
    v49 = (WTF **)(v42 + 16 * (v45 & v43));
    v50 = *v49;
    if (*v49 == (WTF *)-1)
    {
      v46 = (WTF **)(v42 + 16 * v48);
      goto LABEL_47;
    }
    if (!v50)
    {
      if (v46)
      {
        *v46 = 0;
        v46[1] = 0;
        --*(_DWORD *)(qword_1ECE72E50 - 16);
        v49 = v46;
      }
      WTF::String::operator=(v49, (WTF::StringImpl *)&v67);
      v49[1] = *(WTF **)(a1 + 24);
      if (qword_1ECE72E50)
        v51 = *(_DWORD *)(qword_1ECE72E50 - 12) + 1;
      else
        v51 = 1;
      *(_DWORD *)(qword_1ECE72E50 - 12) = v51;
      if (qword_1ECE72E50)
        v58 = *(_DWORD *)(qword_1ECE72E50 - 12);
      else
        v58 = 0;
      v59 = (*(_DWORD *)(qword_1ECE72E50 - 16) + v58);
      v60 = *(unsigned int *)(qword_1ECE72E50 - 4);
      if (v60 > 0x400)
      {
        if (v60 > 2 * v59)
          goto LABEL_64;
      }
      else if (3 * v60 > 4 * v59)
      {
        goto LABEL_64;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
      goto LABEL_64;
    }
    if ((WTF::equal(v50, v40, v39) & 1) != 0)
      break;
LABEL_47:
    v45 = i + v48;
  }
  v52 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_FAULT))
  {
    v55 = *(_QWORD *)(a1 + 24);
    if ((_MergedGlobals_98 & 1) != 0)
    {
      v56 = qword_1ECE72E50;
      if (qword_1ECE72E50)
      {
        v62 = *(_DWORD *)(qword_1ECE72E50 - 8);
        v63 = *((_DWORD *)v40 + 4);
        if (v63 >= 0x100)
          v64 = v63 >> 8;
        else
          v64 = WTF::StringImpl::hashSlowCase(v40);
        for (j = 0; ; v64 = j + v66)
        {
          v66 = v64 & v62;
          v57 = *(WTF **)(v56 + 16 * v66);
          if (v57 != (WTF *)-1)
          {
            if (!v57)
              goto LABEL_84;
            if ((WTF::equal(v57, v40, v54) & 1) != 0)
              break;
          }
          ++j;
        }
        v57 = *(WTF **)(v56 + 16 * v66 + 8);
      }
      else
      {
        v57 = 0;
      }
    }
    else
    {
      v57 = 0;
      qword_1ECE72E50 = 0;
      _MergedGlobals_98 = 1;
    }
LABEL_84:
    *(_DWORD *)buf = 134218240;
    v69 = v55;
    v70 = 2048;
    v71 = v57;
    _os_log_fault_impl(&dword_196BCC000, v52, OS_LOG_TYPE_FAULT, "GeneralStorageDirectory for session %llu is already in use by session %llu", buf, 0x16u);
  }
LABEL_64:
  v40 = v67;
LABEL_65:
  v67 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  return a1;
}

void WebKit::WebsiteDataStore::~WebsiteDataStore(WebKit::WebsiteDataStore *this)
{
  NSObject *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unsigned int *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  WebCore::SecurityOriginData *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE v86[12];
  __int16 v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E34DF2C0;
  v2 = qword_1ECE718E8;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v3)
  {
    v6 = *((_QWORD *)this + 3);
    *(_DWORD *)v86 = 134218240;
    *(_QWORD *)&v86[4] = this;
    v87 = 2048;
    v88 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebsiteDataStore::~WebsiteDataStore sessionID=%llu", v86, 0x16u);
  }
  v7 = *((_QWORD *)this + 3);
  if ((unint64_t)(v7 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197465A28);
  }
  v8 = *(WTF::StringImpl **)(*((_QWORD *)this + 26) + 112);
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    if ((v7 & 0x8000000000000000) == 0 && *((_DWORD *)v8 + 1))
    {
      if ((_MergedGlobals_98 & 1) != 0)
      {
        v9 = qword_1ECE72E50;
        if (qword_1ECE72E50)
        {
          v10 = *(_DWORD *)(qword_1ECE72E50 - 8);
          v11 = *((_DWORD *)v8 + 4);
          if (v11 >= 0x100)
            v12 = v11 >> 8;
          else
            v12 = WTF::StringImpl::hashSlowCase(v8);
          for (i = 0; ; v12 = i + v14)
          {
            v14 = v12 & v10;
            v3 = *(_QWORD *)(v9 + 16 * v14);
            if (v3 != -1)
            {
              if (!v3)
              {
                v15 = qword_1ECE72E50;
                if (!qword_1ECE72E50)
                  goto LABEL_32;
                v3 = qword_1ECE72E50 + 16 * *(unsigned int *)(qword_1ECE72E50 - 4);
                goto LABEL_20;
              }
              if ((WTF::equal((WTF *)v3, v8, v5) & 1) != 0)
                break;
            }
            ++i;
          }
          v3 = v9 + 16 * v14;
          v15 = qword_1ECE72E50;
          if (!qword_1ECE72E50)
            goto LABEL_21;
LABEL_20:
          v15 += 16 * *(unsigned int *)(v15 - 4);
          if (v15 == v3)
            goto LABEL_32;
LABEL_21:
          if (v15 != v3)
          {
            v3 = (uint64_t)WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v3, v4);
            v16 = qword_1ECE72E50;
            ++*(_DWORD *)(qword_1ECE72E50 - 16);
            v17 = v16 ? *(_DWORD *)(v16 - 12) - 1 : -1;
            *(_DWORD *)(v16 - 12) = v17;
            if (qword_1ECE72E50)
            {
              v18 = *(_DWORD *)(qword_1ECE72E50 - 4);
              if (6 * *(_DWORD *)(qword_1ECE72E50 - 12) < v18 && v18 >= 9)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,PAL::SessionID>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,PAL::SessionID,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v18 >> 1);
            }
          }
        }
      }
      else
      {
        qword_1ECE72E50 = 0;
        _MergedGlobals_98 = 1;
      }
    }
LABEL_32:
    if (*(_DWORD *)v8 == 2)
      v3 = WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebKit::allDataStores((WebKit *)v3);
  if (WebKit::allDataStores(void)::map)
  {
    v21 = *((_QWORD *)this + 3);
    v22 = *(_DWORD *)(WebKit::allDataStores(void)::map - 8);
    v23 = (v21 + ~(v21 << 32)) ^ ((unint64_t)(v21 + ~(v21 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(_QWORD *)(WebKit::allDataStores(void)::map + 16 * v26);
    if (v27 != v21)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(_QWORD *)(WebKit::allDataStores(void)::map + 16 * v26);
        ++v28;
        if (v27 == v21)
          goto LABEL_42;
      }
      v26 = *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    }
LABEL_42:
    if (v26 != *(_DWORD *)(WebKit::allDataStores(void)::map - 4))
    {
      v29 = (_QWORD *)(WebKit::allDataStores(void)::map + 16 * v26);
      v30 = (unsigned int *)v29[1];
      *v29 = -1;
      v29[1] = 0;
      if (v30)
      {
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v20);
        }
      }
      ++*(_DWORD *)(WebKit::allDataStores(void)::map - 16);
      if (WebKit::allDataStores(void)::map)
        v31 = *(_DWORD *)(WebKit::allDataStores(void)::map - 12) - 1;
      else
        v31 = -1;
      *(_DWORD *)(WebKit::allDataStores(void)::map - 12) = v31;
      if (WebKit::allDataStores(void)::map)
      {
        v34 = *(_DWORD *)(WebKit::allDataStores(void)::map - 4);
        if (6 * *(_DWORD *)(WebKit::allDataStores(void)::map - 12) < v34 && v34 >= 9)
          WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::WeakRef<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v34 >> 1);
      }
    }
  }
  v36 = (unsigned int *)*((_QWORD *)this + 51);
  if (v36)
  {
    v37 = v36 + 4;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
    *(_QWORD *)v86 = *((_QWORD *)this + 56);
    *((_QWORD *)this + 56) = 0;
    WebKit::NetworkProcessProxy::removeSession((uint64_t)v36, this, (uint64_t *)v86);
    v39 = *(_QWORD *)v86;
    *(_QWORD *)v86 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v36 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v37);
  }
  if (*((_QWORD *)this + 56))
  {
    WTF::RunLoop::main((WTF::RunLoop *)v36);
    v40 = *((_QWORD *)this + 56);
    *((_QWORD *)this + 56) = 0;
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v41 = &off_1E34DF508;
    v41[1] = v40;
    *(_QWORD *)v86 = v41;
    WTF::RunLoop::dispatch();
    v42 = *(_QWORD *)v86;
    *(_QWORD *)v86 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  {
    if (WebKit::singleton(void)::singleton)
    {
      v43 = *(_QWORD **)(WebKit::singleton(void)::singleton + 8);
      if (v43)
      {
        v44 = (unsigned int *)(v43 + 2);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 + 1, v44));
        WebKit::GPUProcessProxy::removeSession(v43, *((_QWORD *)this + 3));
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v44);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  if (*((_BYTE *)this + 488))
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 472, v20);
  v46 = (WTF::StringImpl **)*((_QWORD *)this + 58);
  if (v46)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v46, (WTF::StringImpl *)v20);
  v47 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v48)
    CFRelease(*(CFTypeRef *)(v48 + 8));
  v49 = (_DWORD *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v49)
  {
    if (v49[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
    else
      --v49[2];
  }
  v50 = (WTF *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v50)
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((_DWORD)this + 416, v50);
  v51 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v51)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v51 + 16));
  v52 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v52)
    CFRelease(*(CFTypeRef *)(v52 + 8));
  v53 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *((_QWORD *)this + 48);
  if (v54)
  {
    v55 = *(unsigned int *)(v54 - 4);
    if ((_DWORD)v55)
    {
      v56 = v54 + 32;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v56 - 32));
        if ((v57 & 1) == 0)
        {
          WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v56, v50);
          v58 = *(unsigned int *)(v56 - 8);
          if ((_DWORD)v58 != -1)
            ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v58])(v86, v56 - 32);
          *(_DWORD *)(v56 - 8) = -1;
        }
        v56 += 48;
        --v55;
      }
      while (v55);
    }
    WTF::fastFree((WTF *)(v54 - 16), v50);
  }
  v59 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 47);
  if (v59)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v59, v50);
  v60 = *((_QWORD *)this + 46);
  if (v60)
  {
    *(_QWORD *)(v60 + 8) = 0;
    v61 = (unsigned int *)*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (v61)
    {
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        atomic_store(1u, v61);
        WTF::fastFree((WTF *)v61, v50);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 46) = 0;
  }
  v64 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *((unsigned int *)this + 89);
  if ((_DWORD)v65)
  {
    v66 = (uint64_t *)*((_QWORD *)this + 43);
    v67 = 8 * v65;
    do
    {
      v68 = *v66;
      *v66 = 0;
      if (v68)
        WTF::RefCounted<WebKit::SecKeyProxyStore>::deref(v68, v50);
      ++v66;
      v67 -= 8;
    }
    while (v67);
  }
  v69 = (WTF *)*((_QWORD *)this + 43);
  if (v69)
  {
    *((_QWORD *)this + 43) = 0;
    *((_DWORD *)this + 88) = 0;
    WTF::fastFree(v69, v50);
  }
  v70 = *((_QWORD *)this + 41);
  if (v70)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v70, v50);
  v71 = *((_QWORD *)this + 39);
  if (v71)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v71, v50);
  v72 = (const void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v72)
    CFRelease(v72);
  v73 = (WTF *)*((_QWORD *)this + 36);
  if (v73)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v73, v50);
  }
  v74 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 56))(v74);
  v75 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v50);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v50);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v50);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v50);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v80)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v80);
  v81 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v81)
    CFRelease(*(CFTypeRef *)(v81 + 8));
  if (*((_BYTE *)this + 192))
    WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStore *)((char *)this + 40), v50);
  v82 = *((_QWORD *)this + 2);
  if (v82)
  {
    *(_QWORD *)(v82 + 8) = 0;
    v83 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v83)
    {
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        atomic_store(1u, v83);
        WTF::fastFree((WTF *)v83, v50);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::WebsiteDataStore::~WebsiteDataStore(this);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebsiteDataStore::deleteDefaultDataStoreForTesting(WebKit::WebsiteDataStore *this)
{
  uint64_t v1;

  {
    v1 = WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore;
    WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = 0;
    if (v1)
      CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  else
  {
    WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = 0;
  }
}

_QWORD *WebKit::WebsiteDataStore::existingDataStoreForIdentifier@<X0>(WebKit::WebsiteDataStore *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  WebKit::allDataStores(this);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::allDataStores(void)::map);
  v7 = WebKit::allDataStores(void)::map;
  if (WebKit::allDataStores(void)::map)
    v7 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
  if ((_QWORD *)v7 == result)
  {
LABEL_15:
    v10 = 0;
  }
  else
  {
    v9 = *(_QWORD *)this;
    v8 = *((_QWORD *)this + 1);
    while (1)
    {
      v10 = *(_QWORD *)(result[1] + 8);
      if (*(_OWORD *)(*(_QWORD *)(v10 + 208) + 32) != 0
        && *(_QWORD *)(*(_QWORD *)(v10 + 208) + 40) == v8
        && *(_QWORD *)(*(_QWORD *)(v10 + 208) + 32) == v9)
      {
        break;
      }
      while (1)
      {
        result += 2;
        if (result == v6)
          break;
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_14;
      }
      result = v6;
LABEL_14:
      if (result == (_QWORD *)v7)
        goto LABEL_15;
    }
    result = CFRetain(*(CFTypeRef *)(v10 + 8));
  }
  *a2 = v10;
  return result;
}

void WebKit::WebsiteDataStore::dataStoreForIdentifier(WebKit::WebsiteDataStore *this@<X0>, WebKit::WebsiteDataStore **a2@<X8>)
{
  WebKit *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebsiteDataStoreConfiguration *v11;
  uint64_t PersistentSessionID;
  CFTypeRef *v13;

  if (*(_QWORD *)this <= 1uLL)
  {
    __break(0xC471u);
  }
  else
  {
    WebKit::InitializeWebKit2(this);
    WebKit::allDataStores(v5);
    v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::allDataStores(void)::map);
    v8 = WebKit::allDataStores(void)::map;
    if (WebKit::allDataStores(void)::map)
      v8 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    if ((_QWORD *)v8 == v6)
    {
LABEL_15:
      v11 = (WebKit::WebsiteDataStoreConfiguration *)API::Object::newObject(0x220uLL, 122);
      v13 = (CFTypeRef *)WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v11, this);
      PersistentSessionID = PAL::SessionID::generatePersistentSessionID((PAL::SessionID *)v13);
      WebKit::WebsiteDataStore::create((uint64_t *)&v13, PersistentSessionID, a2);
      if (v13)
        CFRelease(v13[1]);
    }
    else
    {
      while (1)
      {
        v9 = *(_QWORD *)(v6[1] + 8);
        if (*(_OWORD *)(*(_QWORD *)(v9 + 208) + 32) != 0
          && *(_QWORD *)(*(_QWORD *)(v9 + 208) + 40) == *((_QWORD *)this + 1)
          && *(_QWORD *)(*(_QWORD *)(v9 + 208) + 32) == *(_QWORD *)this)
        {
          break;
        }
        while (1)
        {
          v6 += 2;
          if (v6 == v7)
            break;
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_14;
        }
        v6 = v7;
LABEL_14:
        if (v6 == (_QWORD *)v8)
          goto LABEL_15;
      }
      CFRetain(*(CFTypeRef *)(v9 + 8));
      *a2 = (WebKit::WebsiteDataStore *)v9;
    }
  }
}

uint64_t WebKit::WebsiteDataStore::resolvedDirectories(WebKit::WebsiteDataStore *this)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 32);
LABEL_5:
  if (*((_BYTE *)this + 192))
    goto LABEL_8;
  if (*((_BYTE *)this + 34))
  {
    do
    {
      v6 = 0x7FF0000000000000;
      v7 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 33, v2, (WTF::TimeWithDynamicClockType *)&v6);
    }
    while (!*((_BYTE *)this + 192));
LABEL_8:
    v4 = __ldxr(v2);
    if (v4 == 1)
    {
      if (!__stlxr(0, v2))
        return (uint64_t)this + 40;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    return (uint64_t)this + 40;
  }
  result = 470;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebsiteDataStore::mediaKeysStorageSalt(WebKit::WebsiteDataStore *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  uint64_t result;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 32);
LABEL_5:
  if (*((_BYTE *)this + 192))
  {
    v4 = *((_QWORD *)this + 25);
    v5 = __ldxr(v2);
    if (v5 == 1)
    {
      if (!__stlxr(0, v2))
        return v4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    return v4;
  }
  result = 481;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebsiteDataStore::fetchData(WTF::WorkQueue *a1, int a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = WTF::WorkQueue::main(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = v8;
  WebKit::WebsiteDataStore::fetchDataAndApply((uint64_t)a1, a2, a3, &v10, a4);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  return result;
}

unsigned int **WebKit::WebsiteDataStore::fetchDataAndApply(uint64_t a1, int a2, char a3, uint64_t *a4, uint64_t *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  _QWORD *v73;
  unsigned int *v74;
  char v75;
  int v76;
  __int128 buf;
  char *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 24);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::fetchDataAndApply started to fetch data for session %llu", (uint8_t *)&buf, 0xCu);
  }
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v12 = 1;
  *(_BYTE *)(v12 + 4) = a3;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 8) = v13;
  v14 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 24) = 0;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(_QWORD *)(v12 + 32) = a1;
  v74 = (unsigned int *)v12;
  if ((a2 & 2) != 0)
  {
    v15 = *(_QWORD *)(a1 + 280);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
    WTF::String::isolatedCopy();
    do
      v16 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v16 + 1, (unsigned int *)v12));
    *((_QWORD *)&buf + 1) = v12;
    v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v17 = off_1E34DF5F8;
    *((_QWORD *)v17 + 1) = buf;
    v18 = *((_QWORD *)&buf + 1);
    buf = 0uLL;
    *((_QWORD *)v17 + 2) = v18;
    v67 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 32))(v15, &v67);
    v19 = v67;
    v67 = 0;
    if (v19)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&buf + 1);
    v21 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
  }
  v22 = *(_QWORD *)(a1 + 24);
  v23 = v22 >= 0 || v22 == -1;
  if (a2)
  {
    v24 = a2;
    while (WebKit::WebsiteData::ownerProcess(v24 & -v24))
    {
      v24 &= v24 - 1;
      if (!v24)
        goto LABEL_31;
    }
    if (v23)
      WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
    v25 = *(_QWORD *)(a1 + 408);
    if (v25)
    {
      v26 = (unsigned int *)(v25 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      v28 = *(WTF::StringImpl **)(a1 + 24);
      v29 = v74;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      v72 = v29;
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = off_1E34DF648;
      v32 = v72;
      v72 = 0;
      v73 = v31;
      v31[1] = v32;
      v67 = v28;
      v76 = a2;
      v75 = a3;
      *(_QWORD *)&buf = &v67;
      *((_QWORD *)&buf + 1) = &v76;
      v78 = &v75;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(v25, (uint64_t **)&buf, (uint64_t *)&v73, 0, 0, 1);
      v33 = (uint64_t)v73;
      v73 = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(&v72);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v25 + 16));
    }
  }
LABEL_31:
  if ((a2 & 4) != 0)
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 312), &buf);
    v34 = *(_QWORD *)(a1 + 312);
    if (v34)
    {
      v35 = *(unsigned int *)(v34 - 4);
      v36 = v34 + 8 * v35;
    }
    else
    {
      v36 = 0;
      v35 = 0;
    }
    v67 = (WTF::StringImpl *)(a1 + 312);
    v68 = v36;
    v69 = v36;
    v70 = v36;
    v71 = v34 + 8 * v35;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v67);
    for (i = *((_QWORD *)&buf + 1); *((_QWORD *)&buf + 1) != v68; i = *((_QWORD *)&buf + 1))
    {
      v38 = *(_QWORD *)(*(_QWORD *)i + 8);
      v39 = (unsigned int *)(v38 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      v41 = *(_QWORD *)(v38 + 136);
      if ((!v41 || !*(_BYTE *)(v41 + 104)) && *(_QWORD *)(v38 + 144))
      {
        v42 = *(_QWORD *)(a1 + 24);
        v43 = v74;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
        v72 = v43;
        v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v45 = off_1E34DF670;
        v46 = v72;
        v72 = 0;
        v73 = v45;
        v45[1] = v46;
        WebKit::WebProcessProxy::fetchWebsiteData(v38, v42, a2, (uint64_t *)&v73);
        v47 = (uint64_t)v73;
        v73 = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(&v72);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v38 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&buf);
    }
  }
  if ((a2 & 0x10000) != 0)
  {
    v48 = (unsigned int *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage((WebKit::WebsiteDataStore *)a1);
    v49 = v48;
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 + 1, v48));
    v51 = v74;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v53 = off_1E34DF698;
    v53[1] = v51;
    v67 = 0;
    *(_QWORD *)&buf = v53;
    WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins((uint64_t)v49, (uint64_t *)&buf);
    if ((_QWORD)buf)
      (*(void (**)(_QWORD))(*(_QWORD *)buf + 8))(buf);
    WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&v67);
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v49);
  }
  if ((a2 & 0x100) != 0)
  {
    v54 = *(_QWORD *)(a1 + 24);
    if ((v54 & 0x8000000000000000) == 0 || v54 == -1)
    {
      v55 = *(WTF::StringImpl **)(WebKit::WebsiteDataStore::resolvedDirectories((WebKit::WebsiteDataStore *)a1) + 96);
      if (v55)
        *(_DWORD *)v55 += 2;
      v67 = v55;
      v56 = *(_QWORD *)(a1 + 280);
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56);
      WTF::String::isolatedCopy();
      v57 = v74;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 + 1, v57));
      *((_QWORD *)&buf + 1) = v57;
      v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v59 = off_1E34DF6C0;
      v59[1] = buf;
      v60 = *((_QWORD *)&buf + 1);
      buf = 0uLL;
      v59[2] = v60;
      v73 = v59;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v56 + 32))(v56, &v73);
      v61 = (uint64_t)v73;
      v73 = 0;
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)&buf + 1);
      v63 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v62);
        else
          *(_DWORD *)v63 -= 2;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 56))(v56);
      v65 = v67;
      v67 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v64);
        else
          *(_DWORD *)v65 -= 2;
      }
    }
  }
  return WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(&v74);
}

unsigned int **WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34DF5A8;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainRunLoop();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(uint64_t a1, int a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v10 = *(_QWORD *)(a1 + 280);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v22 = v10;
  v18 = 0;
  v19 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((WTF::StringImpl *)&v18, a4);
  v11 = *a5;
  *a5 = 0;
  v20 = v11;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E34DF6E8;
  v12[1] = v18;
  v13 = v19;
  v18 = 0;
  v19 = 0;
  v12[2] = v13;
  v14 = v20;
  v20 = 0;
  v21 = v12;
  v12[3] = v14;
  WebKit::WebsiteDataStore::fetchDataAndApply(a1, a2, a3, &v22, (uint64_t *)&v21);
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v15);
  result = v22;
  if (v22)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 56))(v22);
  return result;
}

uint64_t WebKit::WebsiteDataStore::computeWebProcessAccessTypeForDataRemoval(unsigned int a1)
{
  return (a1 >> 2) & 1;
}

unsigned int *WebKit::WebsiteDataStore::removeData(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  const WTF::StringImpl *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  unsigned int *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  _QWORD *v84;
  WTF::StringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  double v92;
  int v93;
  _BYTE buf[24];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData started to delete data modified since %f for session %llu", buf, 0x16u);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = &off_1E34DF738;
  v12[1] = a1;
  v12[2] = v10;
  v12[3] = v11;
  v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v12;
  if ((a2 & 2) != 0)
  {
    v14 = *(_QWORD *)(a1 + 280);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    *(double *)buf = a4;
    WTF::String::isolatedCopy();
    do
      v15 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v15 + 1, (unsigned int *)v13));
    *(_QWORD *)&buf[16] = v13;
    v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v16 = &off_1E34DF760;
    *((_QWORD *)v16 + 1) = *(_QWORD *)buf;
    *((_QWORD *)v16 + 2) = *(_QWORD *)&buf[8];
    v17 = *(_QWORD *)&buf[16];
    *(_OWORD *)&buf[8] = 0uLL;
    *((_QWORD *)v16 + 3) = v17;
    v86 = v16;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 32))(v14, &v86);
    v19 = v86;
    v86 = 0;
    if (v19)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    v20 = *(unsigned int **)&buf[16];
    *(_QWORD *)&buf[16] = 0;
    if (v20)
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v20);
    v21 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
  }
  v22 = *(_QWORD *)(a1 + 24);
  v23 = v22 >= 0 || v22 == -1;
  v24 = WebKit::computeNetworkProcessAccessTypeForDataRemoval(a2, !v23);
  if (v24 != 1)
  {
    if (v24 != 2)
      goto LABEL_30;
    WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  }
  v25 = *(_QWORD *)(a1 + 408);
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 16);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = *(WTF::StringImpl **)(a1 + 24);
    do
      v29 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v29 + 1, (unsigned int *)v13));
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = &off_1E34DF788;
    v30[1] = v13;
    v91 = v30;
    v86 = v28;
    v93 = a2;
    v92 = a4;
    *(_QWORD *)buf = &v86;
    *(_QWORD *)&buf[8] = &v93;
    *(_QWORD *)&buf[16] = &v92;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(v25, (uint64_t **)buf, (uint64_t *)&v91, 0, 0, 1);
    v31 = (uint64_t)v91;
    v91 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v25 + 16));
    v32 = 1;
    if ((a2 & 4) == 0)
      goto LABEL_62;
    goto LABEL_31;
  }
LABEL_30:
  v32 = 0;
  if ((a2 & 4) == 0)
    goto LABEL_62;
LABEL_31:
  WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)a1, -1, (uint64_t *)buf);
  v34 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)buf);
  v35 = v33;
  v36 = *(uint64_t **)buf;
  if (*(_QWORD *)buf)
    v37 = *(_QWORD *)buf + 8 * *(unsigned int *)(*(_QWORD *)buf - 4);
  else
    v37 = 0;
  if ((uint64_t *)v37 != v34)
  {
    do
    {
      v38 = *v34;
      if (*v34)
        CFRetain(*(CFTypeRef *)(v38 + 8));
      v39 = *(_DWORD **)(v38 + 760);
      ++*v39;
      WebKit::WebBackForwardCache::removeEntriesForSession((uint64_t)v39, *(_QWORD *)(a1 + 24));
      if (!*v39)
      {
        __break(0xC471u);
        JUMPOUT(0x197466E28);
      }
      --*v39;
      v41 = *(_DWORD **)(v38 + 768);
      ++*v41;
      WebKit::WebProcessCache::clearAllProcessesForSession((uint64_t)v41, *(WTF::StringImpl ***)(a1 + 24), v40);
      if (!*v41)
      {
        __break(0xC471u);
        JUMPOUT(0x197466E48);
      }
      --*v41;
      CFRelease(*(CFTypeRef *)(v38 + 8));
      while (++v34 != v35)
      {
        if ((unint64_t)(*v34 + 1) > 1)
          goto LABEL_44;
      }
      v34 = v35;
LABEL_44:
      ;
    }
    while (v34 != (uint64_t *)v37);
    v36 = *(uint64_t **)buf;
  }
  if (v36)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v36, v33);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 312), buf);
  v42 = *(_QWORD *)(a1 + 312);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 - 4);
    v44 = v42 + 8 * v43;
  }
  else
  {
    v44 = 0;
    v43 = 0;
  }
  v86 = (WTF::StringImpl *)(a1 + 312);
  v87 = v44;
  v88 = v44;
  v89 = v44;
  v90 = v42 + 8 * v43;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v86);
  for (i = *(_QWORD *)&buf[8]; *(_QWORD *)&buf[8] != v87; i = *(_QWORD *)&buf[8])
  {
    v46 = *(_QWORD *)(*(_QWORD *)i + 8);
    v47 = (unsigned int *)(v46 + 16);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    v49 = *(_QWORD *)(v46 + 136);
    if (!v49 || !*(_BYTE *)(v49 + 104))
    {
      if (*(_QWORD *)(v46 + 144))
      {
        v50 = *(_QWORD *)(a1 + 24);
        do
          v51 = __ldaxr((unsigned int *)v13);
        while (__stlxr(v51 + 1, (unsigned int *)v13));
        v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v52 = &off_1E34DF7B0;
        v52[1] = v13;
        v92 = *(double *)&v52;
        WebKit::WebProcessProxy::deleteWebsiteData(v46, a4, v50, a2, (uint64_t *)&v92);
        v53 = *(_QWORD *)&v92;
        v92 = 0.0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v46 + 16));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
LABEL_62:
  if ((a2 & 0x10001) != 0)
  {
    v54 = (unsigned int *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage((WebKit::WebsiteDataStore *)a1);
    v55 = v54;
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 + 1, v54));
    do
      v57 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v57 + 1, (unsigned int *)v13));
    v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v58 = &off_1E34DF7D8;
    v58[1] = v13;
    *(_QWORD *)buf = v58;
    WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince((uint64_t)v55, (uint64_t *)buf, a4);
    v59 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v55);
  }
  if ((a2 & 0x100) != 0)
  {
    v60 = *(_QWORD *)(a1 + 24);
    if ((v60 & 0x8000000000000000) == 0 || v60 == -1)
    {
      v61 = *(WTF::StringImpl **)(WebKit::WebsiteDataStore::resolvedDirectories((WebKit::WebsiteDataStore *)a1) + 96);
      if (v61)
        *(_DWORD *)v61 += 2;
      v86 = v61;
      v62 = *(_QWORD *)(a1 + 280);
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62);
      WTF::String::isolatedCopy();
      do
        v63 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v63 + 1, (unsigned int *)v13));
      *(_QWORD *)&buf[8] = v13;
      *(double *)&buf[16] = a4;
      v64 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v64 = &off_1E34DF800;
      *(_QWORD *)(v64 + 8) = *(_QWORD *)buf;
      v65 = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_OWORD *)(v64 + 16) = __PAIR128__(*(unint64_t *)&buf[16], v65);
      v92 = *(double *)&v64;
      (*(void (**)(uint64_t, double *))(*(_QWORD *)v62 + 32))(v62, &v92);
      v67 = *(_QWORD *)&v92;
      v92 = 0.0;
      if (v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
      v68 = *(unsigned int **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v68)
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v68);
      v69 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v66);
        else
          *(_DWORD *)v69 -= 2;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 56))(v62);
      v71 = v86;
      v86 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
          WTF::StringImpl::destroy(v71, v70);
        else
          *(_DWORD *)v71 -= 2;
      }
    }
  }
  if ((a2 & 0x400) != 0)
  {
    v72 = *(_QWORD *)(a1 + 24);
    if ((v72 & 0x8000000000000000) == 0 || v72 == -1)
    {
      do
        v73 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v73 + 1, (unsigned int *)v13));
      v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v74 = &off_1E34DF828;
      v74[1] = v13;
      *(_QWORD *)buf = v74;
      WebKit::WebsiteDataStore::removeRecentSearches((WebKit::WebsiteDataStore *)a1, (uint64_t *)buf, a4);
      v75 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v75)
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    }
  }
  if ((a2 & 0x1000) != 0)
  {
    if ((v32 & 1) == 0)
    {
      v76 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
      v77 = (unsigned int *)(v76 + 16);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 + 1, v77));
      v79 = *(WTF::StringImpl **)(a1 + 24);
      do
        v80 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v80 + 1, (unsigned int *)v13));
      v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v81 = &off_1E34DF850;
      v81[1] = v13;
      v91 = v81;
      v86 = v79;
      v93 = a2;
      v92 = a4;
      *(_QWORD *)buf = &v86;
      *(_QWORD *)&buf[8] = &v93;
      *(_QWORD *)&buf[16] = &v92;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(v76, (uint64_t **)buf, (uint64_t *)&v91, 0, 0, 1);
      v82 = (uint64_t)v91;
      v91 = 0;
      if (v82)
        (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v77);
    }
    do
      v83 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v83 + 1, (unsigned int *)v13));
    v84 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v84 = &off_1E34DF878;
    v84[1] = v13;
    *(_QWORD *)buf = v84;
    WebKit::WebsiteDataStore::clearResourceLoadStatisticsInWebProcesses((WebKit::WebsiteDataStore *)a1, (uint64_t *)buf);
    if (*(_QWORD *)buf)
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v13);
}

uint64_t WebKit::computeNetworkProcessAccessTypeForDataRemoval(int a1, int a2)
{
  char v2;
  unsigned __int8 v4;
  int v5;

  v2 = a1;
  if (a1)
  {
    v4 = 0;
    v5 = a1;
    while (1)
    {
      if ((v2 & 4) != 0)
        v4 = 1;
      if (!WebKit::WebsiteData::ownerProcess(v5 & -v5))
      {
        v4 = 2;
        if ((v5 & -v5) != 1 || !a2)
          return v4;
        v4 = 1;
      }
      v5 &= v5 - 1;
      if (!v5)
        return v4;
    }
  }
  return 0;
}

uint64_t WebKit::WebsiteDataStore::clearResourceLoadStatisticsInWebProcesses(WebKit::WebsiteDataStore *this, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t *v13;

  if (*((_BYTE *)this + 265) != 2)
  {
    if (*((_BYTE *)this + 265))
      goto LABEL_22;
    if (*(unsigned __int16 *)(*((_QWORD *)this + 26) + 536) >= 0x100u)
    {
      if (!*(_WORD *)(*((_QWORD *)this + 26) + 536))
        goto LABEL_22;
    }
    else if (!WebKit::doesAppHaveTrackingPreventionEnabled(this))
    {
      goto LABEL_22;
    }
  }
  WebKit::WebsiteDataStore::processPools(this, -1, (uint64_t *)&v13);
  v5 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v13);
  v6 = v4;
  v7 = v13;
  if (v13)
    v8 = &v13[*((unsigned int *)v13 - 1)];
  else
    v8 = 0;
  if (v8 != v5)
  {
    do
    {
      v9 = *v5;
      if (*v5)
      {
        CFRetain(*(CFTypeRef *)(v9 + 8));
        v12 = 0;
        WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>((unsigned int *)v9, (uint64_t)&v12, *((_QWORD *)this + 3), 0);
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
      else
      {
        v12 = 0;
        WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>(0, (uint64_t)&v12, *((_QWORD *)this + 3), 0);
      }
      while (++v5 != v6)
      {
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_17;
      }
      v5 = v6;
LABEL_17:
      ;
    }
    while (v5 != v8);
    v7 = v13;
  }
  if (v7)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v7, v4);
LABEL_22:
  v10 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

unsigned int *WebKit::WebsiteDataStore::removeData(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::SecurityOriginData *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::SecurityOriginData *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::SecurityOriginData *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::SecurityOriginData *v28;
  uint64_t v29;
  WebCore::SecurityOriginData *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  WTF::StringImpl *v38;
  void *v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  CFTypeRef *v45;
  WebKit *v46;
  WebKit::WebProcessPool *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  _DWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  const WTF::StringImpl *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  WebCore::SecurityOriginData *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  const WTF::StringImpl *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WebCore::SecurityOriginData *v82;
  _DWORD *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  WebCore::SecurityOriginData *v106;
  WebCore::SecurityOriginData *v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  WebCore::SecurityOriginData *v118;
  uint64_t v119;
  uint64_t v120;
  WebCore::SecurityOriginData *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  unsigned int v124;
  WebCore::SecurityOriginData *v125;
  uint64_t v126;
  WTF::StringImpl **v127;
  void *v128;
  WebCore::SecurityOriginData *v129;
  unsigned int *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t *v135;
  WebKit::WebsiteDataStore *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  WebCore::SecurityOriginData *v143;
  uint64_t v144;
  _QWORD *v145;
  WebCore::SecurityOriginData *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  __int128 buf;
  unsigned int *v153;
  WTF::StringImpl **v154;
  WebCore::SecurityOriginData **v155;
  WebCore::SecurityOriginData **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 24);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData started to delete data for session %llu", (uint8_t *)&buf, 0xCu);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E34DF8A0;
  v11[1] = a1;
  v136 = (WebKit::WebsiteDataStore *)a1;
  v11[2] = v9;
  v11[3] = v10;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v11;
  v148 = 0;
  v149 = 0;
  v13 = *((_DWORD *)a3 + 3);
  if (v13)
  {
    v14 = *a3;
    v15 = *a3 + 80 * v13;
    do
    {
      v16 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v14 + 40));
      v17 = (unint64_t)v16;
      *(_QWORD *)&buf = v16;
      *((_QWORD *)&buf + 1) = v18;
      v19 = *(_QWORD *)(v14 + 40);
      if (v19)
        v20 = (WebCore::SecurityOriginData *)(v19 + 32 * *(unsigned int *)(v19 - 4));
      else
        v20 = 0;
      if (v20 != v16)
      {
        do
        {
          if (HIDWORD(v149) == (_DWORD)v149)
          {
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>((uint64_t)&v148, v17);
          }
          else
          {
            v21 = v148 + 32 * HIDWORD(v149);
            *(_BYTE *)v21 = 0;
            *(_DWORD *)(v21 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v21, v17);
            ++HIDWORD(v149);
          }
          *(_QWORD *)&buf = buf + 32;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets((WebCore::SecurityOriginData **)&buf);
          v17 = buf;
        }
        while ((WebCore::SecurityOriginData *)buf != v20);
      }
      v14 += 80;
    }
    while (v14 != v15);
  }
  if ((a2 & 2) != 0)
  {
    v143 = 0;
    v22 = *((_DWORD *)a3 + 3);
    if (v22)
    {
      v23 = *a3;
      v24 = *a3 + 80 * v22;
      do
      {
        v25 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v23 + 40));
        v146 = v25;
        v147 = v26;
        v27 = *(_QWORD *)(v23 + 40);
        if (v27)
          v28 = (WebCore::SecurityOriginData *)(v27 + 32 * *(unsigned int *)(v27 - 4));
        else
          v28 = 0;
        if (v28 != v25)
        {
          do
          {
            WebCore::SecurityOriginData::isolatedCopy();
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v143, (uint64_t)&buf, (uint64_t)&v137);
            if ((_DWORD)v154 != -1)
              ((void (*)(WTF::StringImpl **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v154])(&v137, &buf);
            v146 = (WebCore::SecurityOriginData *)((char *)v146 + 32);
            WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(&v146);
          }
          while (v146 != v28);
        }
        v23 += 80;
      }
      while (v23 != v24);
    }
    v29 = *(_QWORD *)(a1 + 280);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29);
    v30 = v143;
    v143 = 0;
    *(_QWORD *)&buf = v30;
    WTF::String::isolatedCopy();
    do
      v31 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v31 + 1, (unsigned int *)v12));
    v153 = (unsigned int *)v12;
    v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v32 = &off_1E34DF8C8;
    *((_QWORD *)v32 + 1) = buf;
    v33 = *((_QWORD *)&buf + 1);
    buf = 0uLL;
    *((_QWORD *)v32 + 2) = v33;
    v34 = v153;
    v153 = 0;
    *((_QWORD *)v32 + 3) = v34;
    v137 = v32;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v29 + 32))(v29, &v137);
    v36 = v137;
    v137 = 0;
    if (v36)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v36 + 8))(v36);
    v37 = v153;
    v153 = 0;
    if (v37)
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v37);
    v38 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v35);
      else
        *(_DWORD *)v38 -= 2;
    }
    if ((_QWORD)buf)
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)buf, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29);
    if (v143)
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v143, v39);
  }
  v40 = *(_QWORD *)(a1 + 24);
  v41 = v40 >= 0 || v40 == -1;
  v42 = WebKit::computeNetworkProcessAccessTypeForDataRemoval(a2, !v41);
  if ((_DWORD)v42)
  {
    v44 = v42;
    v135 = a3;
    if ((_DWORD)v42 == 2)
    {
      WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)a1, -1, (uint64_t *)&v145);
      if (!v145 || !*((_DWORD *)v145 - 3))
      {
        v45 = (CFTypeRef *)API::Object::newObject(0xA8uLL, 90);
        v46 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v45);
        WebKit::InitializeWebKit2(v46);
        v47 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
        v137 = WebKit::WebProcessPool::WebProcessPool(v47, (API::ProcessPoolConfiguration *)v45);
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)&buf, (uint64_t *)&v145, (uint64_t *)&v137);
        if (v137)
          CFRelease(*((CFTypeRef *)v137 + 1));
        CFRelease(v45[1]);
      }
    }
    else
    {
      WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)a1, -1, (uint64_t *)&v145);
    }
    v48 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v145);
    v49 = v43;
    v50 = v145;
    if (v145)
      v51 = &v145[*((unsigned int *)v145 - 1)];
    else
      v51 = 0;
    if (v51 != v48)
    {
      do
      {
        v52 = v44;
        if ((_DWORD)v44 == 2)
          WebKit::WebsiteDataStore::networkProcess(v136);
        v137 = 0;
        v138 = 0;
        v146 = 0;
        v147 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *((_DWORD *)v135 + 3);
        if (v53)
        {
          v54 = *v135;
          v55 = *v135 + 80 * v53;
          do
          {
            v56 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v54 + 48));
            v57 = v56;
            v59 = v58;
            v60 = *(_QWORD *)(v54 + 48);
            if (v60)
              v61 = (_QWORD *)(v60 + 8 * *(unsigned int *)(v60 - 4));
            else
              v61 = 0;
            if (v61 != v56)
            {
              do
              {
                v62 = HIDWORD(v138);
                if (HIDWORD(v138) == (_DWORD)v138)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v137, (unint64_t)v57);
                }
                else
                {
                  v63 = v137;
                  v64 = (_DWORD *)*v57;
                  if (*v57)
                    *v64 += 2;
                  *((_QWORD *)v63 + v62) = v64;
                  HIDWORD(v138) = v62 + 1;
                }
                while (++v57 != v59)
                {
                  if ((unint64_t)(*v57 + 1) > 1)
                    goto LABEL_72;
                }
                v57 = v59;
LABEL_72:
                ;
              }
              while (v57 != v61);
            }
            v65 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v54 + 56));
            v68 = v65;
            v69 = (_QWORD *)v66;
            v70 = *(_QWORD *)(v54 + 56);
            if (v70)
              v71 = (_QWORD *)(v70 + 8 * *(unsigned int *)(v70 - 4));
            else
              v71 = 0;
            if (v71 != v65)
            {
              do
              {
                v72 = HIDWORD(v147);
                if (HIDWORD(v147) == (_DWORD)v147)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v146, (unint64_t)v68);
                }
                else
                {
                  v73 = v146;
                  v74 = (_DWORD *)*v68;
                  if (*v68)
                    *v74 += 2;
                  *((_QWORD *)v73 + v72) = v74;
                  HIDWORD(v147) = v72 + 1;
                }
                while (++v68 != v69)
                {
                  if ((unint64_t)(*v68 + 1) > 1)
                    goto LABEL_85;
                }
                v68 = v69;
LABEL_85:
                ;
              }
              while (v68 != v71);
            }
            v75 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v54 + 72), v66, v67);
            v78 = (_QWORD *)v75;
            v79 = *(_QWORD *)(v54 + 72);
            if (v79)
              v80 = v79 + 8 * *(unsigned int *)(v79 - 4);
            else
              v80 = 0;
            *(_QWORD *)&buf = v75;
            *((_QWORD *)&buf + 1) = v76;
            if (v80 != v75)
            {
              do
              {
                v81 = HIDWORD(v144);
                if (HIDWORD(v144) == (_DWORD)v144)
                {
                  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v143, (unint64_t)v78);
                  v78 = (_QWORD *)buf;
                }
                else
                {
                  v82 = v143;
                  v83 = (_DWORD *)*v78;
                  if (*v78)
                    *v83 += 2;
                  *((_QWORD *)v82 + v81) = v83;
                  HIDWORD(v144) = v81 + 1;
                }
                *(_QWORD *)&buf = v78 + 1;
                WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&buf, v76, v77);
                v78 = (_QWORD *)buf;
              }
              while ((_QWORD)buf != v80);
            }
            v54 += 80;
          }
          while (v54 != v55);
        }
        v84 = WebKit::WebsiteDataStore::networkProcess(v136);
        v85 = (unsigned int *)(v84 + 16);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 + 1, v85));
        v87 = *((_QWORD *)v136 + 3);
        do
          v88 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v88 + 1, (unsigned int *)v12));
        v89 = *v48;
        if (*v48)
        {
          CFRetain(*(CFTypeRef *)(v89 + 8));
          v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v90 = &off_1E34DF8F0;
          v90[1] = v12;
          CFRetain(*(CFTypeRef *)(v89 + 8));
        }
        else
        {
          v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v90 = &off_1E34DF8F0;
          v90[1] = v12;
        }
        v90[2] = v89;
        v142 = v90;
        v151 = v87;
        v150 = a2;
        *(_QWORD *)&buf = &v151;
        *((_QWORD *)&buf + 1) = &v150;
        v153 = (unsigned int *)&v148;
        v154 = &v137;
        v155 = &v146;
        v156 = &v143;
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(v84, (uint64_t **)&buf, (uint64_t *)&v142, 0, 0, 1);
        v91 = (uint64_t)v142;
        v142 = 0;
        if (v91)
          (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
        if (v89)
          CFRelease(*(CFTypeRef *)(v89 + 8));
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v85);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v143, v92);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v146, v93);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v137, v94);
        if (++v48 == v49)
        {
          v48 = v49;
          v44 = v52;
        }
        else
        {
          v44 = v52;
          while ((unint64_t)(*v48 + 1) <= 1)
          {
            if (++v48 == v49)
            {
              v48 = v49;
              break;
            }
          }
        }
      }
      while (v48 != v51);
      v50 = v145;
    }
    if (v50)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v50, v43);
    a3 = v135;
  }
  if ((a2 & 4) != 0)
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v136 + 39, &buf);
    v95 = *((_QWORD *)v136 + 39);
    v96 = a3;
    if (v95)
    {
      v97 = *(unsigned int *)(v95 - 4);
      v98 = v95 + 8 * v97;
    }
    else
    {
      v98 = 0;
      v97 = 0;
    }
    v137 = (WebKit::WebsiteDataStore *)((char *)v136 + 312);
    v138 = v98;
    v139 = v98;
    v140 = v98;
    v141 = v95 + 8 * v97;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v137);
    for (i = *((_QWORD *)&buf + 1); *((_QWORD *)&buf + 1) != v138; i = *((_QWORD *)&buf + 1))
    {
      v100 = *(_QWORD *)(*(_QWORD *)i + 8);
      v101 = (unsigned int *)(v100 + 16);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 + 1, v101));
      v103 = *(_QWORD *)(v100 + 136);
      if (!v103 || !*(_BYTE *)(v103 + 104))
      {
        if (*(_QWORD *)(v100 + 144))
        {
          v104 = *((_QWORD *)v136 + 3);
          do
            v105 = __ldaxr((unsigned int *)v12);
          while (__stlxr(v105 + 1, (unsigned int *)v12));
          v106 = (WebCore::SecurityOriginData *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v106 = &off_1E34DF918;
          *((_QWORD *)v106 + 1) = v12;
          v146 = v106;
          WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(v100, v104, a2, (uint64_t)&v148, (uint64_t *)&v146);
          v107 = v146;
          v146 = 0;
          if (v107)
            (*(void (**)(WebCore::SecurityOriginData *))(*(_QWORD *)v107 + 8))(v107);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v100 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&buf);
    }
    a3 = v96;
  }
  if ((a2 & 0x10001) != 0)
  {
    v108 = (unsigned int *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(v136);
    v109 = v108;
    do
      v110 = __ldaxr(v108);
    while (__stlxr(v110 + 1, v108));
    do
      v111 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v111 + 1, (unsigned int *)v12));
    v112 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v112 = &off_1E34DF940;
    v112[1] = v12;
    *(_QWORD *)&buf = v112;
    WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins((uint64_t)v109, (unsigned int *)&v148, (uint64_t *)&buf);
    v113 = buf;
    *(_QWORD *)&buf = 0;
    if (v113)
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v109);
  }
  if ((a2 & 0x100) != 0)
  {
    v114 = *((_QWORD *)v136 + 3);
    if ((v114 & 0x8000000000000000) == 0 || v114 == -1)
    {
      v143 = 0;
      v115 = *((_DWORD *)a3 + 3);
      if (v115)
      {
        v116 = *a3;
        v117 = *a3 + 80 * v115;
        do
        {
          v118 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v116 + 40));
          v146 = v118;
          v147 = v119;
          v120 = *(_QWORD *)(v116 + 40);
          if (v120)
            v121 = (WebCore::SecurityOriginData *)(v120 + 32 * *(unsigned int *)(v120 - 4));
          else
            v121 = 0;
          if (v121 != v118)
          {
            do
            {
              WebCore::SecurityOriginData::isolatedCopy();
              WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v143, (uint64_t)&buf, (uint64_t)&v137);
              if ((_DWORD)v154 != -1)
                ((void (*)(WTF::StringImpl **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v154])(&v137, &buf);
              v146 = (WebCore::SecurityOriginData *)((char *)v146 + 32);
              WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(&v146);
            }
            while (v146 != v121);
          }
          v116 += 80;
        }
        while (v116 != v117);
      }
      v122 = *(WTF::StringImpl **)(WebKit::WebsiteDataStore::resolvedDirectories(v136) + 96);
      if (v122)
        *(_DWORD *)v122 += 2;
      v137 = v122;
      v123 = *((_QWORD *)v136 + 35);
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 48))(v123);
      WTF::String::isolatedCopy();
      *((_QWORD *)&buf + 1) = WebKit::WebsiteDataStore::mediaKeysStorageSalt(v136);
      do
        v124 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v124 + 1, (unsigned int *)v12));
      v125 = v143;
      v143 = 0;
      v153 = (unsigned int *)v12;
      v154 = (WTF::StringImpl **)v125;
      v126 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v126 = &off_1E34DF968;
      *(_OWORD *)(v126 + 8) = buf;
      *(_QWORD *)(v126 + 24) = v153;
      v127 = v154;
      *(_QWORD *)&buf = 0;
      v153 = 0;
      v154 = 0;
      *(_QWORD *)(v126 + 32) = v127;
      v146 = (WebCore::SecurityOriginData *)v126;
      (*(void (**)(uint64_t, WebCore::SecurityOriginData **))(*(_QWORD *)v123 + 32))(v123, &v146);
      v129 = v146;
      v146 = 0;
      if (v129)
        (*(void (**)(WebCore::SecurityOriginData *))(*(_QWORD *)v129 + 8))(v129);
      if (v154)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v154, v128);
      v130 = v153;
      v153 = 0;
      if (v130)
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v130);
      v131 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2)
          WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v128);
        else
          *(_DWORD *)v131 -= 2;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 56))(v123);
      v132 = v137;
      v137 = 0;
      if (v132)
      {
        if (*(_DWORD *)v132 == 2)
          WTF::StringImpl::destroy(v132, (WTF::StringImpl *)v43);
        else
          *(_DWORD *)v132 -= 2;
      }
      if (v143)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v143, v43);
    }
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v148, v43);
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
}

uint64_t WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(WebKit::WebsiteDataStore *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  WebKit::DeviceIdHashSaltStorage *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF::StringImpl *v8;

  result = *((_QWORD *)this + 28);
  if (!result)
  {
    v3 = *((_QWORD *)this + 3);
    if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
    {
      v4 = *(WTF::StringImpl **)(*((_QWORD *)this + 26) + 104);
      if (v4)
        *(_DWORD *)v4 += 2;
    }
    else
    {
      v4 = 0;
    }
    v8 = v4;
    v5 = (WebKit::DeviceIdHashSaltStorage *)WTF::fastMalloc((WTF *)0x38);
    WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(v5, (const WTF::String *)&v8);
    v7 = (unsigned int *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v5;
    if (v7)
      WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v7);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v6);
      else
        *(_DWORD *)v4 -= 2;
    }
    return *((_QWORD *)this + 28);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setServiceWorkerTimeoutForTesting(WebKit::WebsiteDataStore *a1, double a2)
{
  WTF::ApproximateTime *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  double v6;
  double *v8;
  _BYTE v9[16];
  int v10;
  double v11;
  char v12;

  v11 = a2;
  v2 = (WTF::ApproximateTime *)WebKit::WebsiteDataStore::networkProcess(a1);
  v3 = (uint64_t)v2;
  v4 = (unsigned int *)((char *)v2 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v8 = &v11;
  WTF::ApproximateTime::now(v2);
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>(v3, (uint64_t **)&v8, 0, 0, (uint64_t)v9, v6 + 1.0);
  if (v10 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(&v12, v9);
  v10 = -1;
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;

  if (*(_QWORD *)(result + 144))
  {
    v11 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>(*(_QWORD *)(v11 + 144), a2, a3, a4, a5, a6);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::resetServiceWorkerTimeoutForTesting(WebKit::WebsiteDataStore *this)
{
  WTF::ApproximateTime *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  double v5;
  _BYTE v7[16];
  int v8;
  char v9;

  v1 = (WTF::ApproximateTime *)WebKit::WebsiteDataStore::networkProcess(this);
  v2 = (uint64_t)v1;
  v3 = (unsigned int *)((char *)v1 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WTF::ApproximateTime::now(v1);
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>(v2, 0, 0, (uint64_t)v7, v5 + 1.0);
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v8])(&v9, v7);
  v8 = -1;
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;

  if (*(_QWORD *)(result + 144))
  {
    v9 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>(*(_QWORD *)(v9 + 144), a2, a3, a4, a5);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a4 = 1;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::hasServiceWorkerBackgroundActivityForTesting(WebKit::WebsiteDataStore *this)
{
  void *v1;
  WebKit::WebProcessPool **v2;
  uint64_t v3;
  WebKit::WebProcessPool *v4;
  uint64_t hasServiceWorkerBackgroundActivityForTesting;
  uint64_t v6;
  WebKit::WebProcessPool **v8;
  unsigned int v9;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    v2 = v8;
    v3 = 8 * v9 - 8;
    do
    {
      v4 = *v2++;
      hasServiceWorkerBackgroundActivityForTesting = WebKit::WebProcessPool::hasServiceWorkerBackgroundActivityForTesting(v4);
      if ((hasServiceWorkerBackgroundActivityForTesting & 1) != 0)
        break;
      v6 = v3;
      v3 -= 8;
    }
    while (v6);
  }
  else
  {
    hasServiceWorkerBackgroundActivityForTesting = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  return hasServiceWorkerBackgroundActivityForTesting;
}

unsigned int *WebKit::WebsiteDataStore::setMaxStatisticsEntries(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setMaxStatisticsEntries(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setPruneEntriesDownTo(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setPruneEntriesDownTo(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setGrandfatheringTime(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setGrandfatheringTime(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setMinimumTimeBetweenDataRecordsRemoval(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setMinimumTimeBetweenDataRecordsRemoval(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::dumpResourceLoadStatistics(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v4 = WebKit::WebsiteDataStore::networkProcess(a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *((_QWORD *)a1 + 3);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v9 = *a2;
  *a2 = 0;
  *v8 = &off_1E34DF9A0;
  v8[1] = v9;
  v12 = v8;
  WebKit::NetworkProcessProxy::dumpResourceLoadStatistics(v4, v7, (uint64_t *)&v12);
  v10 = (uint64_t)v12;
  v12 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::isPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::isPrevalentResource(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::isGrandfathered(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::isGrandfathered(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::setPrevalentResource(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setPrevalentResourceForDebugMode(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::setPrevalentResourceForDebugMode(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::isVeryPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::isVeryPrevalentResource(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setVeryPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::setVeryPrevalentResource(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setShouldClassifyResourcesBeforeDataRecordsRemoval(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setSubframeUnderTopFrameDomain(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    WebKit::NetworkProcessProxy::setSubframeUnderTopFrameDomain(v8, v11, (uint64_t *)&v18, (uint64_t *)&v17, a4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRegisteredAsSubFrameUnder(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v17, a2);
  WebCore::RegistrableDomain::RegistrableDomain(&v16, a3);
  WebKit::NetworkProcessProxy::isRegisteredAsSubFrameUnder(v8, v11, (uint64_t *)&v17, (uint64_t *)&v16, a4);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::setSubresourceUnderTopFrameDomain(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    WebKit::NetworkProcessProxy::setSubresourceUnderTopFrameDomain(v8, v11, (uint64_t *)&v18, (uint64_t *)&v17, a4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRegisteredAsSubresourceUnder(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v17, a2);
  WebCore::RegistrableDomain::RegistrableDomain(&v16, a3);
  WebKit::NetworkProcessProxy::isRegisteredAsSubresourceUnder(v8, v11, (uint64_t *)&v17, (uint64_t *)&v16, a4);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::setSubresourceUniqueRedirectTo(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectTo(v8, v11, (uint64_t *)&v18, (uint64_t *)&v17, a4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::setSubresourceUniqueRedirectFrom(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectFrom(v8, v11, (uint64_t *)&v18, (uint64_t *)&v17, a4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::setTopFrameUniqueRedirectTo(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectTo(v8, v11, (uint64_t *)&v18, (uint64_t *)&v17, a4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::setTopFrameUniqueRedirectFrom(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectFrom(v8, v11, (uint64_t *)&v18, (uint64_t *)&v17, a4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRegisteredAsRedirectingTo(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v17, a2);
  WebCore::RegistrableDomain::RegistrableDomain(&v16, a3);
  WebKit::NetworkProcessProxy::isRegisteredAsRedirectingTo(v8, v11, (uint64_t *)&v17, (uint64_t *)&v16, a4);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::clearPrevalentResource(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::clearPrevalentResource(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::resetParametersToDefaultValues(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::resetParametersToDefaultValues(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(uint64_t *a1, char a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v8 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  WebKit::NetworkProcessProxy::scheduleClearInMemoryAndPersistent(v8, a1[3], *(uint64_t *)&a4, 1, a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

WTF **WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(WTF **a1)
{
  WTF *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, (_QWORD *)v2 + 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 16, v4);
      v6 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v2, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

unsigned int *WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::scheduleClearInMemoryAndPersistent(v6, a1[3], 0, 0, a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::scheduleCookieBlockingUpdate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::scheduleCookieBlockingUpdate(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::scheduleStatisticsAndDataRecordsProcessing(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::scheduleStatisticsAndDataRecordsProcessing(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::statisticsDatabaseHasAllTables(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::statisticsDatabaseHasAllTables(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::setLastSeen(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v16, a2);
    WebKit::NetworkProcessProxy::setLastSeen(v8, v11, (uint64_t *)&v16, a3, a4);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::domainIDExistsInDatabase(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::domainIDExistsInDatabase(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::mergeStatisticForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, const WTF::URL *a4, char a5, char a6, char a7, char a8, double a9, double a10, unsigned int a11, uint64_t *a12)
{
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v32 = a7;
    v31 = WebKit::WebsiteDataStore::networkProcess(a1);
    v22 = (unsigned int *)(v31 + 16);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    v24 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v35, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v34, a3);
    WebCore::RegistrableDomain::RegistrableDomain(&v33, a4);
    WebKit::NetworkProcessProxy::mergeStatisticForTesting(v31, v24, (uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33, a5, a6, v32, a9, a10, a8, a11, a12);
    v26 = v33;
    v33 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v29 = v34;
    v34 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v25);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v35;
    v35 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v25);
      else
        *(_DWORD *)v30 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v22);
  }
  else
  {
    v27 = *a12;
    *a12 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

unsigned int *WebKit::WebsiteDataStore::insertExpiredStatisticForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, unsigned int a3, char a4, char a5, char a6, uint64_t *a7)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  uint64_t *v23[3];
  char v24;
  char v25;
  char v26;
  uint64_t v27;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v14 = WebKit::WebsiteDataStore::networkProcess(a1);
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v22, a2);
    v27 = v17;
    v23[0] = &v27;
    v23[1] = (uint64_t *)&v22;
    v23[2] = (uint64_t *)a3;
    v24 = a4;
    v25 = a5;
    v26 = a6;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(v14, v23, a7, 0, 0, 1);
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
  }
  else
  {
    v20 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

unsigned int *WebKit::WebsiteDataStore::setNotifyPagesWhenDataRecordsWereScanned(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setNotifyPagesWhenDataRecordsWereScanned(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsTimeAdvanceForTesting(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setResourceLoadStatisticsTimeAdvanceForTesting(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

uint64_t WebKit::WebsiteDataStore::setStorageAccessPromptQuirkForTesting(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  int v25;
  WTF::StringImpl **v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  void *v45;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2 && *((_DWORD *)v7 + 1))
  {
    *a2 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v64;
    if (!v64)
      goto LABEL_6;
  }
  *(_DWORD *)v7 += 2;
LABEL_6:
  v8 = *(unsigned int *)(a3 + 12);
  v54 = a5;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      goto LABEL_72;
    }
    v9 = WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v10) = *(_DWORD *)(a3 + 12);
    if ((_DWORD)v10)
    {
      v10 = 0;
      do
      {
        v11 = v10;
        v12 = *(WTF::StringImpl **)(*(_QWORD *)a3 + 8 * v10);
        if (v12)
        {
          v13 = *((_DWORD *)v12 + 1);
          *(_DWORD *)v12 += 2;
          if (!v13)
          {
            v14 = v12;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v12 = v64;
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v15);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v12 = v64;
        }
        v10 = v11 + 1;
        *(_QWORD *)(v9 + 8 * v11) = v12;
      }
      while (v11 + 1 < (unint64_t)*(unsigned int *)(a3 + 12));
    }
  }
  else
  {
    LODWORD(v10) = 0;
    v9 = 0;
  }
  v56[0] = 0;
  v56[1] = 0;
  v60 = v7;
  v61 = v9;
  v62 = v8;
  v63 = v10;
  v16 = WTF::fastZeroedMalloc((WTF *)0xD0);
  v57 = v16 + 16;
  *(_QWORD *)(v16 + 8) = 0x800000007;
  *(_DWORD *)v16 = 0;
  *(_DWORD *)(v57 - 12) = 0;
  v18 = v57;
  if (v57
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v57, 0), (v18 = v57) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = WTF::ASCIICaseInsensitiveHash::hash(v60, v17) & v19;
  v21 = (WTF::StringImpl **)(v18 + 24 * v20);
  if ((WTF::equal(*v21, 0, v22) & 1) != 0)
  {
LABEL_29:
    WTF::String::operator=(v21, (WTF::StringImpl *)&v60);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v21 + 1), (uint64_t)&v61);
    if (v57)
      v27 = *(_DWORD *)(v57 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v57 - 12) = v27;
    if (v57)
      v28 = *(_DWORD *)(v57 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v57 - 16) + v28);
    v30 = *(unsigned int *)(v57 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_38;
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_38;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v57, v21);
    goto LABEL_38;
  }
  v24 = 0;
  v25 = 1;
  while (1)
  {
    v26 = v21;
    if (*v21 != (WTF::StringImpl *)-1)
    {
      v26 = v24;
      if ((WTF::equalIgnoringASCIICase(*v21, v60, v23) & 1) != 0)
        break;
    }
    v20 = (v20 + v25) & v19;
    v21 = (WTF::StringImpl **)(v18 + 24 * v20);
    ++v25;
    v24 = v26;
    if (WTF::equal(*v21, 0, v23))
    {
      if (v26)
      {
        v26[1] = 0;
        v26[2] = 0;
        *v26 = 0;
        --*(_DWORD *)(v57 - 16);
        v21 = v26;
      }
      goto LABEL_29;
    }
  }
LABEL_38:
  v31 = *(unsigned int *)(a4 + 12);
  if (!(_DWORD)v31)
  {
    LODWORD(v32) = 0;
    v33 = 0;
    v34 = 0;
    goto LABEL_40;
  }
  if (v31 >= 0x6666667)
  {
    __break(0xC471u);
LABEL_72:
    JUMPOUT(0x19746A308);
  }
  v47 = 40 * v31;
  v48 = WTF::fastMalloc((WTF *)(40 * v31));
  v34 = v48;
  v33 = (v47 & 0xFFFFFFF8) / 0x28;
  if (*(_DWORD *)(a4 + 12))
  {
    v49 = 0;
    v32 = 0;
    v50 = v48;
    do
    {
      WTF::URL::URL((uint64_t)&v64, (WTF::StringImpl **)(*(_QWORD *)a4 + v49));
      WTF::URL::URL(v50, (uint64_t *)&v64);
      v52 = v64;
      v64 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v51);
        else
          *(_DWORD *)v52 -= 2;
      }
      ++v32;
      v50 += 40;
      v49 += 8;
    }
    while (v32 < *(unsigned int *)(a4 + 12));
  }
  else
  {
    LODWORD(v32) = 0;
  }
LABEL_40:
  v35 = v57;
  v57 = 0;
  v64 = v7;
  v65 = v35;
  v55[0] = 0;
  v55[1] = 0;
  v66 = v34;
  v67 = v33;
  v68 = v32;
  v59 = 0;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  LODWORD(v59) = 1;
  v58 = v36;
  if (v7)
    *(_DWORD *)v7 += 2;
  *v36 = v7;
  v37 = (uint64_t)(v36 + 2);
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v36 + 1, &v65);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v37, &v66);
  HIDWORD(v59) = 1;
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v38);
  if (v65)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v65, v39);
  v40 = v64;
  v64 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v39);
  if (v57)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v57, v41);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v41);
  v43 = v60;
  v60 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v42);
  {
    xmmword_1ECE73558 = 0u;
    unk_1ECE73568 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WebKit::StorageAccessPromptQuirkController::setCachedQuirksForTesting((uint64_t)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance, &v58);
  v44 = *v54;
  *v54 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v45);
}

unsigned int *WebKit::WebsiteDataStore::grantStorageAccessForTesting(WebKit::WebsiteDataStore *a1, WebCore::RegistrableDomain *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24[3];

  result = (unsigned int *)WebKit::WebsiteDataStore::networkProcess(a1);
  v9 = (uint64_t)result;
  v10 = result + 4;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *((_QWORD *)a1 + 3);
  v22 = 0;
  v23 = v12;
  v21 = 0;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v14 = WTF::fastMalloc((WTF *)(8 * v13));
    LODWORD(v22) = v13;
    v21 = v14;
    if (*(_DWORD *)(a3 + 12))
    {
      v15 = v14;
      v16 = 0;
      v17 = 0;
      do
      {
        WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)(*(_QWORD *)a3 + v16), v24);
        ++v17;
        *(WTF::StringImpl **)(v15 + v16) = v24[0];
        v16 += 8;
      }
      while (v17 < *(unsigned int *)(a3 + 12));
      HIDWORD(v22) = v17;
    }
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(a2, &v20);
  v24[0] = (WTF::StringImpl *)&v23;
  v24[1] = (WTF::StringImpl *)&v21;
  v24[2] = (WTF::StringImpl *)&v20;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)v24, a4, 0, 0, 1);
  v19 = v20;
  v20 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 394;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DFA40;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

unsigned int *WebKit::WebsiteDataStore::setIsRunningResourceLoadStatisticsTest(uint64_t *a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setIsRunningResourceLoadStatisticsTest(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::getAllStorageAccessEntries(WebKit::WebsiteDataStore *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15[2];

  WebKit::WebProcessProxy::webPage(a2, v15);
  if (v15[0])
  {
    CFRelease(*(CFTypeRef *)(v15[0] + 8));
    v5 = WebKit::WebsiteDataStore::networkProcess(a1);
    v6 = (unsigned int *)(v5 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *((_QWORD *)a1 + 3);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34DFA68;
    v10 = *a3;
    *a3 = 0;
    v9[1] = v10;
    v15[0] = (uint64_t)v9;
    WebKit::NetworkProcessProxy::getAllStorageAccessEntries(v5, v8, v15);
    v11 = v15[0];
    v15[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0;
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::setTimeToLiveUserInteraction(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setTimeToLiveUserInteraction(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::logUserInteraction(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::logUserInteraction(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::hasHadUserInteraction(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::hasHadUserInteraction(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::isRelationshipOnlyInDatabaseOnce(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t *v19[3];
  uint64_t v20;

  if ((WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && (WTF::URL::protocolIs() & 1) == 0
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v18, a2);
    WebCore::RegistrableDomain::RegistrableDomain(&v17, a3);
    v19[2] = (uint64_t *)&v17;
    v20 = v11;
    v19[0] = &v20;
    v19[1] = (uint64_t *)&v18;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(v8, v19, a4, 0, 0, 1);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::clearUserInteraction(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(a1);
    v7 = (unsigned int *)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v14, a2);
    WebKit::NetworkProcessProxy::clearUserInteraction(v6, v9, (uint64_t *)&v14, a3);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unsigned int *WebKit::WebsiteDataStore::setGrandfathered(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  if ((WTF::URL::protocolIs() & 1) == 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(a1);
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)a1 + 3);
    WebCore::RegistrableDomain::RegistrableDomain(&v16, a2);
    WebKit::NetworkProcessProxy::setGrandfathered(v8, v11, (uint64_t *)&v16, a3, a4);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

unsigned int *WebKit::WebsiteDataStore::setCrossSiteLoadWithLinkDecorationForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, const WTF::URL *a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v10 = WebKit::WebsiteDataStore::networkProcess(a1);
  v11 = (unsigned int *)(v10 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v19, a2);
  WebCore::RegistrableDomain::RegistrableDomain(&v18, a3);
  WebKit::NetworkProcessProxy::setCrossSiteLoadWithLinkDecorationForTesting(v10, v13, (uint64_t *)&v19, (uint64_t *)&v18, a4, a5);
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

unsigned int *WebKit::WebsiteDataStore::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::deleteCookiesForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;

  v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v15, a2);
  WebKit::NetworkProcessProxy::deleteCookiesForTesting(v8, v11, (uint64_t *)&v15, a3, a4);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::hasLocalStorageForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v13, a2);
  WebKit::NetworkProcessProxy::hasLocalStorage(v6, v9, (uint64_t *)&v13, a3);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::hasIsolatedSessionForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v13, a2);
  WebKit::NetworkProcessProxy::hasIsolatedSession(v6, v9, (uint64_t *)&v13, a3);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldDowngradeReferrerForTesting(WebKit::WebsiteDataStore *a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = WebKit::WebsiteDataStore::networkProcess(a1);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(v5, a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
}

unsigned int *WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;

  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(v6 + 8) = v7;
  if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode((WebKit::WebsiteDataStore *)a1) != a2)
  {
    *(_WORD *)(a1 + 424) = a2 | 0x100;
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 312), &v33);
    v8 = *(_QWORD *)(a1 + 312);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 8 * v9;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    v28 = a1 + 312;
    v29 = v10;
    v30 = v10;
    v31 = v10;
    v32 = v8 + 8 * v9;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
    for (i = v34; v34 != v29; i = v34)
    {
      v12 = *(_QWORD *)(*(_QWORD *)i + 8);
      v13 = (unsigned int *)(v12 + 16);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      do
        v15 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v15 + 1, (unsigned int *)v6));
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E34DFA90;
      v16[1] = v6;
      v27 = v16;
      v35 = a2;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(v12, &v35, (uint64_t *)&v27, 0, 0, 1);
      v17 = (uint64_t)v27;
      v27 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (v12)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v33);
    }
  }
  v18 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v19 = (unsigned int *)(v18 + 16);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = *(_QWORD *)(a1 + 24);
  do
    v22 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v22 + 1, (unsigned int *)v6));
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = off_1E34DFAB8;
  v23[1] = v6;
  v33 = v23;
  WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(v18, v21, a2, (uint64_t *)&v33);
  if (v33)
    (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v19);
  do
  {
    v25 = __ldaxr((unsigned int *)v6);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)v6));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)v6);
    v33 = (_QWORD *)v6;
    return (unsigned int *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v33);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldEnbleSameSiteStrictEnforcementForTesting(WebKit::WebsiteDataStore *a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v10;
  char v11;
  uint64_t v12;

  v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v12 = *((_QWORD *)a1 + 3);
  v10 = &v12;
  v11 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(v6, &v10, a3, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting(uint64_t *a1, char a2, uint64_t *a3)
{
  char v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v5 = a2 ^ 1;
  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setFirstPartyWebsiteDataRemovalModeForTesting(v6, a1[3], v5, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsToSameSiteStrictCookiesForTesting(WebKit::WebsiteDataStore *a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v13, a2);
  WebKit::NetworkProcessProxy::setToSameSiteStrictCookiesForTesting(v6, v9, (uint64_t *)&v13, a3);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting(WebKit::WebsiteDataStore *a1, WTF::URL *a2, WTF::URL *this, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int16x8_t *v27;
  uint64_t v28;
  uint16x8_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t *v33[3];
  uint64_t v34;

  v8 = WTF::URL::host(this);
  if ((char *)v8 != "testwebkit.org" && v9 == 14)
  {
    if ((v9 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v8 == 116
        && *(_QWORD *)(v8 + 1) == 0x696B626577747365
        && *(_QWORD *)(v8 + 6) == 0x67726F2E74696B62)
      {
        goto LABEL_15;
      }
    }
    else if (*(_WORD *)v8 == 116)
    {
      v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1978D0BD0);
      v24.i16[0] = vminvq_u16(v24);
      if (v24.i32[0])
      {
        v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 12), (int16x8_t)xmmword_1978D0BE0);
        v25.i16[0] = vminvq_u16(v25);
        if (v25.i32[0])
          goto LABEL_15;
      }
    }
  }
  else if ((char *)v8 == "testwebkit.org" && v9 == 14)
  {
    goto LABEL_15;
  }
  v11 = WTF::URL::host(this);
  if ((char *)v11 == "3rdpartytestwebkit.org" || v12 != 22)
  {
    if ((char *)v11 == "3rdpartytestwebkit.org" && v12 == 22)
      goto LABEL_15;
    goto LABEL_33;
  }
  if ((v12 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)v11 == 51)
    {
      v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v11 + 2), (int16x8_t)xmmword_1978D0C10);
      v26.i16[0] = vminvq_u16(v26);
      if (v26.i32[0])
      {
        v27 = (int16x8_t *)(v11 + 12);
        v28 = 6u;
        while (1)
        {
          v29 = (uint16x8_t)vceqq_s16(*v27, (int16x8_t)vmovl_u8(*(uint8x8_t *)&str_14_5[v28]));
          v29.i16[0] = vminvq_u16(v29);
          if (!v29.i32[0])
            break;
          v30 = v28 - 1;
          v28 += 8;
          ++v27;
          if (v30 > 0xC)
            goto LABEL_15;
        }
      }
    }
    goto LABEL_33;
  }
  if (*(_BYTE *)v11 != 51
    || (v13 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v11 + 6), (int8x16_t)xmmword_1978D0C00), vceqq_s8(*(int8x16_t *)(v11 + 1), (int8x16_t)xmmword_1978D0BF0)), v13.i8[0] = vminvq_u8(v13), !v13.i32[0]))
  {
LABEL_33:
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
LABEL_15:
  v14 = WebKit::WebsiteDataStore::networkProcess(a1);
  v15 = (unsigned int *)(v14 + 16);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *((_QWORD *)a1 + 3);
  WTF::URL::host(a2);
  if ((v18 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::RegistrableDomain::RegistrableDomain(&v31, this);
  v33[2] = (uint64_t *)&v31;
  v34 = v17;
  v33[0] = &v34;
  v33[1] = (uint64_t *)&v32;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(v14, v33, a4, 0, 0, 1);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v32;
  v32 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsThirdPartyCNAMEDomainForTesting(WebKit::WebsiteDataStore *a1, WTF::URL *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int16x8_t *v23;
  uint64_t v24;
  uint16x8_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t *v28[2];
  uint64_t v29;

  v6 = WTF::URL::host(this);
  if ((char *)v6 != "testwebkit.org" && v7 == 14)
  {
    if ((v7 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v6 == 116
        && *(_QWORD *)(v6 + 1) == 0x696B626577747365
        && *(_QWORD *)(v6 + 6) == 0x67726F2E74696B62)
      {
        goto LABEL_15;
      }
    }
    else if (*(_WORD *)v6 == 116)
    {
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1978D0BD0);
      v20.i16[0] = vminvq_u16(v20);
      if (v20.i32[0])
      {
        v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 12), (int16x8_t)xmmword_1978D0BE0);
        v21.i16[0] = vminvq_u16(v21);
        if (v21.i32[0])
          goto LABEL_15;
      }
    }
  }
  else if ((char *)v6 == "testwebkit.org" && v7 == 14)
  {
    goto LABEL_15;
  }
  v9 = WTF::URL::host(this);
  if ((char *)v9 == "3rdpartytestwebkit.org" || v10 != 22)
  {
    if ((char *)v9 == "3rdpartytestwebkit.org" && v10 == 22)
      goto LABEL_15;
    goto LABEL_27;
  }
  if ((v10 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)v9 == 51)
    {
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v9 + 2), (int16x8_t)xmmword_1978D0C10);
      v22.i16[0] = vminvq_u16(v22);
      if (v22.i32[0])
      {
        v23 = (int16x8_t *)(v9 + 12);
        v24 = 6u;
        while (1)
        {
          v25 = (uint16x8_t)vceqq_s16(*v23, (int16x8_t)vmovl_u8(*(uint8x8_t *)&str_14_5[v24]));
          v25.i16[0] = vminvq_u16(v25);
          if (!v25.i32[0])
            break;
          v26 = v24 - 1;
          v24 += 8;
          ++v23;
          if (v26 > 0xC)
            goto LABEL_15;
        }
      }
    }
    goto LABEL_27;
  }
  if (*(_BYTE *)v9 != 51
    || (v11 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v9 + 6), (int8x16_t)xmmword_1978D0C00), vceqq_s8(*(int8x16_t *)(v9 + 1), (int8x16_t)xmmword_1978D0BF0)), v11.i8[0] = vminvq_u8(v11), !v11.i32[0]))
  {
LABEL_27:
    v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
LABEL_15:
  v12 = WebKit::WebsiteDataStore::networkProcess(a1);
  v13 = (unsigned int *)(v12 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *((_QWORD *)a1 + 3);
  WebCore::RegistrableDomain::RegistrableDomain(&v27, this);
  v28[1] = (uint64_t *)&v27;
  v29 = v15;
  v28[0] = &v29;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(v12, v28, a3, 0, 0, 1);
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
}

unsigned int *WebKit::WebsiteDataStore::syncLocalStorage(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v7;

  v3 = WebKit::WebsiteDataStore::networkProcess(a1);
  v4 = (unsigned int *)(v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(v3, (uint64_t)&v7, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 496;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34DFAE0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

unsigned int *WebKit::WebsiteDataStore::storeServiceWorkerRegistrations(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v8;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = a1 + 3;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(v4, &v8, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 495;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DFB08;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

unsigned int *WebKit::WebsiteDataStore::setCacheMaxAgeCapForPrevalentResources(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setCacheMaxAgeCapForPrevalentResources(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::resetCacheMaxAgeCapForPrevalentResources(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::allowTLSCertificateChainForLocalPCMTesting(WebKit::WebsiteDataStore *this, const WebCore::CertificateInfo *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t *v9[2];

  v4 = WebKit::WebsiteDataStore::networkProcess(this);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = *((_QWORD *)this + 3);
  v9[0] = &v8;
  v9[1] = (uint64_t *)a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AllowTLSCertificateChainForLocalPCMTesting>(v4, v9, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AllowTLSCertificateChainForLocalPCMTesting>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 355;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v8);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::computeMediaKeyFile(WebKit *this, const WTF::String *a2)
{
  return WTF::FileSystemImpl::pathByAppendingComponent();
}

_QWORD *WebKit::WebsiteDataStore::networkProcessDidTerminate(_QWORD *this, WebKit::NetworkProcessProxy *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v2 = this;
  v3 = this[51];
  this[51] = 0;
  if (v3)
    this = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = v2[56];
  v2[56] = 0;
  if (v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    this = v6;
    v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

unsigned int *WebKit::WebsiteDataStore::terminateNetworkProcess(unsigned int *this)
{
  unsigned int *v1;

  v1 = (unsigned int *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v1)
  {
    WebKit::NetworkProcessProxy::terminate((WebKit::NetworkProcessProxy *)v1);
    WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)v1, (void *)2);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1 + 4);
  }
  return this;
}

unsigned int *WebKit::WebsiteDataStore::sendNetworkProcessPrepareToSuspendForTesting(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  WTF::MonotonicTime *v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = (WTF::MonotonicTime *)WebKit::WebsiteDataStore::networkProcess(a1);
  v4 = (unsigned int *)((char *)v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebKit::NetworkProcessProxy::sendPrepareToSuspend(v3, 0, a2, 0.0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::WebsiteDataStore::sendNetworkProcessWillSuspendImminentlyForTesting(WebKit::WebsiteDataStore *this)
{
  WTF::ApproximateTime *v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = (WTF::ApproximateTime *)WebKit::WebsiteDataStore::networkProcess(this);
  v2 = (unsigned int *)((char *)v1 + 16);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebKit::NetworkProcessProxy::sendProcessWillSuspendImminentlyForTesting(v1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
}

unsigned int *WebKit::WebsiteDataStore::sendNetworkProcessDidResume(WebKit::WebsiteDataStore *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = WebKit::WebsiteDataStore::networkProcess(this);
  v2 = (unsigned int *)(v1 + 16);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebKit::NetworkProcessProxy::sendProcessDidResume(v1, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
}

uint64_t WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v8;
  char v9;

  v9 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DFB80;
  v6[1] = &v9;
  v6[2] = a2;
  v8 = v6;
  WebKit::WebProcessPool::forEachProcessForSession(a1, a3, &v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

uint64_t WebKit::WebsiteDataStore::setStatisticsTestingCallback(WebKit::WebsiteDataStore *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  char v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = WebKit::WebsiteDataStore::networkProcess(this);
    v6 = (unsigned int *)(v5 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v9 = 1;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetResourceLoadStatisticsLogTestingEvent>(v5, &v9, 0, 0);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
    v4 = *a2;
  }
  *a2 = 0;
  result = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetResourceLoadStatisticsLogTestingEvent>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 472;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(WebKit::WebsiteDataStore *this, char a2)
{
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DFBA8;
  v6 = v4;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode((uint64_t)this, a2, (uint64_t *)&v6);
  result = v6;
  v6 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_BYTE *)(a1 + 264) = a2;
  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setResourceLoadStatisticsDebugMode(v6, *(_QWORD *)(a1 + 24), a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::isResourceLoadStatisticsEphemeral(WebKit::WebsiteDataStore *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;

  if (*((_BYTE *)this + 265) == 2)
    goto LABEL_7;
  if (*((_BYTE *)this + 265))
  {
LABEL_8:
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*(unsigned __int16 *)(*((_QWORD *)this + 26) + 536) >= 0x100u)
  {
    if (*(_WORD *)(*((_QWORD *)this + 26) + 536))
      goto LABEL_7;
    goto LABEL_8;
  }
  if (!WebKit::doesAppHaveTrackingPreventionEnabled(this))
    goto LABEL_8;
LABEL_7:
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
    goto LABEL_8;
  v7 = WebKit::WebsiteDataStore::networkProcess(this);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *((_QWORD *)this + 3);
  v11 = (unsigned int *)(v7 + 16);
  WebKit::NetworkProcessProxy::isResourceLoadStatisticsEphemeral(v7, v10, a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

unsigned int *WebKit::WebsiteDataStore::setPrivateClickMeasurementDebugMode(WebKit::WebsiteDataStore *this, char a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess(this);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::setPrivateClickMeasurementDebugMode(v4, *((_QWORD *)this + 3), a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::storePrivateClickMeasurement(WebKit::WebsiteDataStore *this, const WebCore::PrivateClickMeasurement *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  _QWORD v9[2];

  v4 = WebKit::WebsiteDataStore::networkProcess(this);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = *((_QWORD *)this + 3);
  v9[0] = &v8;
  v9[1] = a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::StorePrivateClickMeasurement>(v4, (uint64_t)v9, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::StorePrivateClickMeasurement>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 494;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::encode((IPC::Encoder *)v8, *(_QWORD *)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::WebsiteDataStore::setStorageSiteValidationEnabled(unsigned int *this, int a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;

  if (*((unsigned __int8 *)this + 496) != a2)
  {
    v2 = this;
    *((_BYTE *)this + 496) = a2;
    this = (unsigned int *)*((_QWORD *)this + 51);
    if (this)
    {
      v3 = this + 4;
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = *((_QWORD *)v2 + 3);
      v6 = *((_BYTE *)v2 + 496);
      v7 = v5;
      v8 = &v7;
      v9 = v6;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetStorageSiteValidationEnabled>((uint64_t)this, (uint64_t)&v8, 0, 0);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetStorageSiteValidationEnabled>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 479;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::WebsiteDataStore::closeDatabases(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  unsigned int *result;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  IPC::Encoder *v33;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = (uint64_t *)((char *)a1 + 24);
  do
    v10 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v10 + 1, (unsigned int *)v4));
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 372;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v33 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, v9);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E34DFBD0;
  v12[1] = v4;
  v30 = v12;
  v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v32 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v33, 0, (uint64_t)&v30, 1);
  if (v32)
  {
    v14 = (uint64_t)v30;
    v30 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = v33;
  v33 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  do
    v18 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v18 + 1, (unsigned int *)v4));
  v19 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v19 = 371;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 528) = v19 + 16;
  *(_QWORD *)(v19 + 536) = v19 + 16;
  *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v19 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
  v33 = (IPC::Encoder *)v19;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v19, v9);
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = off_1E34DFBF8;
  v20[1] = v4;
  v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v30 = v20;
  v31 = v21;
  v32 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v33, 0, (uint64_t)&v30, 1);
  if (v32)
  {
    v23 = (uint64_t)v30;
    v30 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v25, v26);
  }
  result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  do
  {
    v28 = __ldaxr((unsigned int *)v4);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v4));
  if (!v29)
  {
    atomic_store(1u, (unsigned int *)v4);
    v30 = (_QWORD *)v4;
    return (unsigned int *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v30);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>(unsigned int *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v9;
  char v10;

  v10 = a4;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = off_1E34DFC20;
  v7[1] = &v10;
  v7[2] = a2;
  v9 = v7;
  WebKit::WebProcessPool::forEachProcessForSession(a1, a3, &v9);
  return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
}

uint64_t WebKit::WebsiteDataStore::setUserAgentStringQuirkForTesting(int a1, WebCore::RegistrableDomain *this, WTF::StringImpl **a3, uint64_t *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  {
    qword_1ECE735A0 = 0;
    WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
    *(_OWORD *)algn_1ECE73590 = 0u;
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(this, &v14);
  v6 = v14;
  v14 = 0;
  v16 = v6;
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v17 = v7;
  WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap((uint64_t *)&v15, &v16, 1);
  WebKit::StorageAccessUserAgentStringQuirkController::setCachedQuirksForTesting((uint64_t)&WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance, (WTF::StringImpl *)&v15);
  if (v15)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v8);
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

unsigned int *WebKit::WebsiteDataStore::setPrivateTokenIPCForTesting(WebKit::WebsiteDataStore *this, char a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t *v9;
  char v10;

  v4 = WebKit::WebsiteDataStore::networkProcess(this);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = *((_QWORD *)this + 3);
  v9 = &v8;
  v10 = a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetShouldSendPrivateTokenIPCForTesting>(v4, (uint64_t)&v9, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetShouldSendPrivateTokenIPCForTesting>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 478;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebsiteDataStore::setCacheModelSynchronouslyForTesting(uint64_t a1, char a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    v4 = v8;
    v5 = 8 * v9;
    do
    {
      v6 = *v4++;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebKit::WebProcessPool::setCacheModelSynchronouslyForTesting(v6, a2);
      CFRelease(*(CFTypeRef *)(v6 + 8));
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

uint64_t *WebKit::WebsiteDataStore::addSecKeyProxyStore(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 344);
  v5 = *(unsigned int *)(a1 + 356);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 352))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 356);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 356) = v5 + 1;
  return result;
}

WTF *WebKit::WebsiteDataStore::setMockWebAuthenticationConfiguration(uint64_t a1, uint64_t a2)
{
  WTF *result;
  uint64_t v5;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360)) & 1) != 0)
    return WebKit::MockAuthenticatorManager::setTestConfiguration(*(_QWORD *)(a1 + 360), a2);
  v5 = WTF::fastMalloc((WTF *)0x3F8);
  WebKit::MockAuthenticatorManager::MockAuthenticatorManager(v5, a2);
  result = *(WTF **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v5;
  if (result)
    return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebsiteDataStore::virtualAuthenticatorManager(WebKit::WebsiteDataStore *this)
{
  WebKit::AuthenticatorManager *v2;
  WebKit::AuthenticatorManager *v3;
  uint64_t v4;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 45) + 40))(*((_QWORD *)this + 45)) & 1) == 0)
  {
    v2 = (WebKit::AuthenticatorManager *)WTF::fastMalloc((WTF *)0x368);
    v3 = WebKit::AuthenticatorManager::AuthenticatorManager(v2);
    *(_QWORD *)v3 = off_1E34F3168;
    *((_QWORD *)v3 + 2) = &unk_1E34F3210;
    *(_OWORD *)((char *)v3 + 856) = 0u;
    v4 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = v2;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return *((_QWORD *)this + 45);
}

unsigned int *WebKit::WebsiteDataStore::resetQuota(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  v4 = WebKit::WebsiteDataStore::networkProcess(a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *((_QWORD *)a1 + 3);
  v9 = &v10;
  v10 = v7;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(v4, &v9, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::resetStoragePersistedState(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  v4 = WebKit::WebsiteDataStore::networkProcess(a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *((_QWORD *)a1 + 3);
  v9 = &v10;
  v10 = v7;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(v4, &v9, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::renameOriginInWebsiteData(WebKit::WebsiteDataStore *a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v14[4];
  int v15;
  uint64_t v16;

  v10 = WebKit::WebsiteDataStore::networkProcess(a1);
  v11 = (unsigned int *)(v10 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v16 = *((_QWORD *)a1 + 3);
  v15 = a4;
  v14[0] = &v16;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = (uint64_t *)&v15;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(v10, v14, a5, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

unsigned int *WebKit::WebsiteDataStore::originDirectoryForTesting(WebKit::WebsiteDataStore *a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v12[3];
  int v13;
  uint64_t v14;

  v8 = WebKit::WebsiteDataStore::networkProcess(a1);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v14 = *((_QWORD *)a1 + 3);
  v13 = a3;
  v12[0] = &v14;
  v12[1] = a2;
  v12[2] = (uint64_t *)&v13;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(v8, v12, a4, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
}

unsigned int *WebKit::WebsiteDataStore::hasAppBoundSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::hasAppBoundSession(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

unsigned int *WebKit::WebsiteDataStore::clearAppBoundSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::NetworkProcessProxy::clearAppBoundSession(v4, a1[3], a2);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

void WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  WebKit::WebsiteDataStore *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  CFTypeRef *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  char v26;
  uint64_t *v27;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  v3 = *a1;
  *a1 = 0;
  *(_QWORD *)(v2 + 8) = v3;
  v4 = WebKit::WebsiteDataStore::appBoundDomainsIfInitialized((uint64_t *)&v25);
  if (v26)
  {
    do
      v5 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v5 + 1, (unsigned int *)v2));
    {
      if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore)
        v6 = *(WebKit::WebsiteDataStore **)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8);
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
      WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
    }
    if (!v26)
    {
LABEL_43:
      __break(1u);
LABEL_44:
      atomic_store(1u, (unsigned int *)v2);
      v25 = (WTF::StringImpl **)v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v25);
      return;
    }
    if (v6)
    {
      if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(v6) != 1)
      {
        do
          v7 = __ldaxr((unsigned int *)v2);
        while (__stlxr(v7 + 1, (unsigned int *)v2));
        v8 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        *v8 = (uint64_t)off_1E34DF350;
        v8[1] = v2;
        v27 = v8;
        WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)v6, 1, (uint64_t *)&v27);
        if (v27)
          (*(void (**)(uint64_t *))(*v27 + 8))(v27);
      }
      do
        v9 = __ldaxr((unsigned int *)v2);
      while (__stlxr(v9 + 1, (unsigned int *)v2));
      v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v10 = (uint64_t)off_1E34DF378;
      v10[1] = v2;
      v27 = v10;
      WebKit::WebsiteDataStore::setAppBoundDomainsForITP((uint64_t *)v6, (uint64_t *)&v25, (uint64_t *)&v27);
      v4 = v27;
      if (v27)
        v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v27 + 8))(v27);
    }
    WebKit::allDataStores((WebKit *)v4);
    v11 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::allDataStores(void)::map);
    v13 = v11;
    v14 = v12;
    if (WebKit::allDataStores(void)::map)
      v15 = WebKit::allDataStores(void)::map + 16 * *(unsigned int *)(WebKit::allDataStores(void)::map - 4);
    else
      v15 = 0;
    if ((WTF::StringImpl *)v15 != v11)
    {
      while (1)
      {
        v16 = *(CFTypeRef **)(*((_QWORD *)v13 + 1) + 8);
        CFRetain(v16[1]);
        if (!v26)
          goto LABEL_43;
        if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode((WebKit::WebsiteDataStore *)v16) != 1)
        {
          do
            v17 = __ldaxr((unsigned int *)v2);
          while (__stlxr(v17 + 1, (unsigned int *)v2));
          v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          *v18 = (uint64_t)off_1E34DF350;
          v18[1] = v2;
          v27 = v18;
          WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)v16, 1, (uint64_t *)&v27);
          if (v27)
            (*(void (**)(uint64_t *))(*v27 + 8))(v27);
        }
        do
          v19 = __ldaxr((unsigned int *)v2);
        while (__stlxr(v19 + 1, (unsigned int *)v2));
        v20 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        *v20 = (uint64_t)off_1E34DF378;
        v20[1] = v2;
        v27 = v20;
        WebKit::WebsiteDataStore::setAppBoundDomainsForITP((uint64_t *)v16, (uint64_t *)&v25, (uint64_t *)&v27);
        if (v27)
          (*(void (**)(uint64_t *))(*v27 + 8))(v27);
        CFRelease(v16[1]);
        while (1)
        {
          v13 = (WTF::StringImpl *)((char *)v13 + 16);
          if (v13 == v14)
            break;
          if ((unint64_t)(*(_QWORD *)v13 + 1) > 1)
            goto LABEL_33;
        }
        v13 = v14;
LABEL_33:
        if (v13 == (WTF::StringImpl *)v15)
          goto LABEL_34;
      }
    }
    do
    {
LABEL_34:
      v21 = __ldaxr((unsigned int *)v2);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v2));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v2);
      v27 = (uint64_t *)v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v27);
    }
    if (v26 && v25)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v12);
  }
  do
  {
    v23 = __ldaxr((unsigned int *)v2);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)v2));
  if (!v24)
    goto LABEL_44;
}

unsigned int *WebKit::WebsiteDataStore::setAppBoundDomainsForITP(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int **WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(unsigned int **result, WebKit::WebsiteDataStore *this, uint64_t *a3)
{
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int **v11;
  unsigned int **v12;

  if (this)
  {
    v5 = result;
    if (WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this) != 1
      && WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this) != 2)
    {
      v6 = *v5;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
      *v8 = (unsigned int *)off_1E34DF3A0;
      v8[1] = v6;
      v12 = v8;
      WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)this, 2, (uint64_t *)&v12);
      if (v12)
        (*((void (**)(unsigned int **))*v12 + 1))(v12);
    }
    v9 = *v5;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
    *v11 = (unsigned int *)off_1E34DF3C8;
    v11[1] = v9;
    v12 = v11;
    WebKit::WebsiteDataStore::setManagedDomainsForITP((uint64_t *)this, a3, (uint64_t *)&v12);
    result = v12;
    if (v12)
      return (unsigned int **)(*((uint64_t (**)(unsigned int **))*v12 + 1))(v12);
  }
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setManagedDomainsForITP(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(v6, a1[3], a2, a3);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

unsigned int *WebKit::WebsiteDataStore::updateBundleIdentifierInNetworkProcess(WebKit::WebsiteDataStore *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *v9;

  v5 = WebKit::WebsiteDataStore::networkProcess(a1);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v9 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(v5, &v9, a3, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
}

unsigned int *WebKit::WebsiteDataStore::clearBundleIdentifierInNetworkProcess(WebKit::WebsiteDataStore *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v7;

  v3 = WebKit::WebsiteDataStore::networkProcess(a1);
  v4 = (unsigned int *)(v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(v3, (uint64_t)&v7, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::WebsiteDataStore::countNonDefaultSessionSets(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v8;

  v4 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = a1 + 3;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(v4, &v8, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 373;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DFC48;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::WebsiteDataStore::showPersistentNotification(WebKit::WebsiteDataStore *this, WTF::ThreadSafeWeakPtrControlBlock **a2, WTF::StringImpl **a3)
{
  WebKit::WebNotificationManagerProxy *v6;
  uint64_t v7;
  WebKit *v8;
  void *v9;
  WTF *v10;
  WTF *v12;

  v6 = (WebKit::WebNotificationManagerProxy *)(*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 49) + 48))(*((_QWORD *)this + 49), a3);
  if ((v6 & 1) != 0)
    return 1;
  v8 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v6);
  v12 = 0;
  v7 = WebKit::WebNotificationManagerProxy::showPersistent((uint64_t)v8, (uint64_t)this, a2, a3, (uint64_t)&v12);
  v10 = v12;
  v12 = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v10, v9);
  return v7;
}

WTF *WebKit::WebsiteDataStore::clearServiceWorkerNotification(WebKit::WebsiteDataStore *this, const WTF::UUID *a2)
{
  uint64_t *v2;
  WTF *v3;
  void *v4;
  WTF *result;
  WTF *v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)a2;
  v2 = WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v6, &v8, 1uLL);
  v3 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager((WebKit::WebNotificationManagerProxy *)v2);
  WebKit::WebNotificationManagerProxy::clearNotifications(v3, 0, (uint64_t)&v6);
  result = v6;
  if (v6)
  {
    v6 = 0;
    v7 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::openWindowFromServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v6 = *a4;
  *a4 = 0;
  v7 = *(_QWORD *)(a1 + 392);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34DFC70;
  v8[1] = v6;
  v10 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v7 + 32))(v7, a2, a3, &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebsiteDataStore::getNotifications(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  _BYTE v7[24];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 392);
  WebCore::SecurityOriginData::fromURL(this, this);
  result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v4 + 72))(v4, v7, a3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v8])(&v6, v7);
  return result;
}

unsigned int *WebKit::WebsiteDataStore::createDownloadProxy@<X0>(WebKit::WebsiteDataStore *a1@<X0>, uint64_t *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  WebKit::DownloadProxyMap **v12;
  unsigned int *v13;
  unsigned int v14;

  v12 = (WebKit::DownloadProxyMap **)WebKit::WebsiteDataStore::networkProcess(a1);
  v13 = (unsigned int *)(v12 + 2);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  WebKit::NetworkProcessProxy::createDownloadProxy(v12, (uint64_t)a1, a2, a3, a5, a4, a6);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
}

void WebKit::WebsiteDataStore::download(WebKit::WebsiteDataStore *this, const WebKit::DownloadProxy *a2, const WTF::String *a3)
{
  WebCore::ResourceRequestBase *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::URL *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  IPC::Encoder *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WTF::StringImpl *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  CFTypeRef v33;
  WTF::StringImpl *v34[2];
  char v35;
  CFTypeRef v36[24];
  CFTypeRef cf;
  __int16 v38;
  IPC::Encoder *v39;
  _BYTE v40[24];
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v38 = 256;
  v6 = (const WebKit::DownloadProxy *)((char *)a2 + 72);
  WebCore::ResourceRequest::ResourceRequest(v36, (const WebKit::DownloadProxy *)((char *)a2 + 72));
  v40[0] = 0;
  v42 = 0;
  v7 = *((_QWORD *)a2 + 36);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v8 - 8));
    v38 = *(_WORD *)(v8 + 1242);
    WTF::URL::URL((uint64_t)v34, (WTF::StringImpl **)(*(_QWORD *)(v8 + 16) + 1000));
    WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v36, (const WTF::URL *)v34);
    v9 = (WTF::URL *)WebCore::ResourceRequestBase::url(v6);
    WebCore::RegistrableDomain::RegistrableDomain(&v39, (const WTF::URL *)v34);
    v10 = WTF::URL::host(v9);
    WebCore::RegistrableDomain::matches(&v39, v10, v11);
    v13 = v39;
    v39 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebCore::ResourceRequestBase::setIsSameSite((WebCore::ResourceRequestBase *)v36);
    std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]<WebCore::SecurityOriginData const&,void>((uint64_t)v40, *(_QWORD *)(v8 + 16) + 1008);
    if ((WebCore::ResourceRequestBase::hasHTTPHeaderField() & 1) == 0)
    {
      WebCore::ResourceRequestBase::url(v6);
      v19 = *(IPC::Encoder **)(v8 + 288);
      if (v19)
        *(_DWORD *)v19 += 2;
      v39 = v19;
      WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v36, (const WTF::String *)&v39);
      v20 = v39;
      v39 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    v22 = v34[0];
    v34[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v18);
      else
        *(_DWORD *)v22 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
  else
  {
    v34[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v34);
    WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v36, (const WTF::URL *)v34);
    v15 = v34[0];
    v34[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::ResourceRequestBase::setIsSameSite((WebCore::ResourceRequestBase *)v36);
    if ((WebCore::ResourceRequestBase::hasHTTPHeaderField() & 1) == 0)
    {
      v39 = 0;
      WebCore::standardUserAgentWithApplicationName();
      WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v36, (const WTF::String *)v34);
      v17 = v34[0];
      v34[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v21 = v39;
      v39 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v16);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  WebCore::ResourceRequestBase::setIsTopSite((WebCore::ResourceRequestBase *)v36);
  v23 = WebKit::WebsiteDataStore::networkProcess(this);
  v24 = (unsigned int *)(v23 + 16);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v26 = *((_QWORD *)a2 + 7);
  v27 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v27 = 384;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 528) = v27 + 16;
  *(_QWORD *)(v27 + 536) = v27 + 16;
  *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v27 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
  v39 = (IPC::Encoder *)v27;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v27, (uint64_t *)this + 3);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v27, 8uLL, 8) = v26;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v27, (WebCore::ResourceRequest *)v36);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v27, (uint64_t)v40);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v27, (char *)&v38);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, (uint64_t *)a3);
  LOBYTE(v34[0]) = 0;
  v35 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v23, &v39, 0, (uint64_t)v34, 1);
  if (v35)
  {
    v29 = v34[0];
    v34[0] = 0;
    if (v29)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
  }
  v30 = v39;
  v39 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v28);
    WTF::fastFree(v31, v32);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v24);
  if (v42 && v41 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v41])(v34, v40);
  v33 = cf;
  cf = 0;
  if (v33)
    CFRelease(v33);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v36);
}

void WebKit::WebsiteDataStore::resumeDownload(WebKit::WebsiteDataStore *this, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  const char **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  const char **v16;
  uint64_t *v17;
  __int128 *v18;
  uint64_t v19;
  const char ***v20;
  char v21;
  const char **v22;

  v22 = 0;
  if (*(_QWORD *)a4)
  {
    if (*(_DWORD *)(*(_QWORD *)a4 + 4))
    {
      WebKit::SandboxExtension::createHandle(1, (uint64_t)&v16);
      if ((_BYTE)v17)
      {
        v10 = v16;
        v16 = 0;
        v22 = v10;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
      }
    }
  }
  v11 = WebKit::WebsiteDataStore::networkProcess(this);
  v12 = (unsigned int *)(v11 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v15 = *(_QWORD *)(a2 + 56);
  v16 = (const char **)((char *)this + 24);
  v14 = *(_OWORD *)(a3 + 16);
  v17 = &v15;
  v18 = &v14;
  v19 = a4;
  v20 = &v22;
  v21 = a5;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ResumeDownload>(v11, (uint64_t **)&v16, 0, 0);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ResumeDownload>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 436;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WebKit::SandboxExtensionHandle &&,WebKit::CallDownloadDidStart>,void>::encode<IPC::Encoder,WebKit::CallDownloadDidStart,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

BOOL WebKit::WebsiteDataStore::hasActivePages(WebKit::WebsiteDataStore *this)
{
  void *v2;
  WebKit::WebProcessPool **v3;
  uint64_t v4;
  WebKit::WebProcessPool *v5;
  _BOOL8 hasPagesUsingWebsiteDataStore;
  uint64_t v7;
  WebKit::WebProcessPool **v9;
  unsigned int v10;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v9);
  if (v10)
  {
    v3 = v9;
    v4 = 8 * v10 - 8;
    do
    {
      v5 = *v3++;
      hasPagesUsingWebsiteDataStore = WebKit::WebProcessPool::hasPagesUsingWebsiteDataStore(v5, this);
      if (hasPagesUsingWebsiteDataStore)
        break;
      v7 = v4;
      v4 -= 8;
    }
    while (v7);
  }
  else
  {
    hasPagesUsingWebsiteDataStore = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
  return hasPagesUsingWebsiteDataStore;
}

unsigned int *WebKit::WebsiteDataStore::clearProxyConfigData(WebKit::WebsiteDataStore *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v6;

  v2 = WebKit::WebsiteDataStore::networkProcess(this);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v6 = (uint64_t *)((char *)this + 24);
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ClearProxyConfigData>(v2, &v6, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ClearProxyConfigData>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 366;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::WebsiteDataStore::setProxyConfigData(WebKit::WebsiteDataStore *this, _DWORD *a2)
{
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *v9[2];

  v4 = (char *)this + 472;
  if (*((_BYTE *)this + 488))
  {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 472, a2);
    *((_BYTE *)this + 488) = 0;
  }
  v5 = WebKit::WebsiteDataStore::networkProcess(this);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v9[0] = (uint64_t *)((char *)this + 24);
  v9[1] = (uint64_t *)a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetProxyConfigData>(v5, v9, 0, 0);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
  return std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v4, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetProxyConfigData>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 468;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  IPC::VectorArgumentCoder<false,std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)a1;
      v6 = 32 * v4;
      do
      {
        v7 = *(WTF **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
          WTF::fastFree(v7, a2);
        }
        v5 += 32;
        v6 -= 32;
      }
      while (v6);
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v8;
    LODWORD(v8) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v8;
    LODWORD(v8) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::setCompletionHandlerForRemovalFromNetworkProcess(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t result;
  WTF::StringImpl *v9;

  if (*(_QWORD *)(a1 + 448))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  v7 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebKit::WebsiteDataStore::setOriginQuotaRatioEnabledForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a1 + 408);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 16);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v9 = a1 + 24;
    v10 = a2;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(v4, (uint64_t)&v9, a3, 0, 0, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 457;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DFC98;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::WebsiteDataStore::processPushMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  WTF *v7;
  _DWORD *v8;
  _DWORD *v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  NSObject *v15;
  WebKit *v16;
  unsigned int *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  char v34;
  _DWORD *v35;
  _DWORD *v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[136];
  char v40;
  uint64_t v41;

  v6 = *(_BYTE *)(a2 + 208);
  v29 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v30 = a1;
  v31 = v6;
  LOBYTE(v32) = 0;
  v34 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v7 = (WTF *)*(unsigned int *)(a2 + 12);
    v32 = 0;
    LODWORD(v33) = 0;
    HIDWORD(v33) = (_DWORD)v7;
    if ((_DWORD)v7)
    {
      LODWORD(v33) = (_DWORD)v7;
      v32 = (void *)WTF::fastMalloc(v7);
      memcpy(v32, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    v34 = 1;
  }
  v8 = *(_DWORD **)(a2 + 24);
  if (v8)
    *v8 += 2;
  v35 = v8;
  v9 = *(_DWORD **)(a2 + 32);
  if (v9)
    *v9 += 2;
  v36 = v9;
  v10 = *(_OWORD *)(a2 + 56);
  v37 = *(_OWORD *)(a2 + 40);
  v38 = v10;
  v39[0] = 0;
  v40 = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>((uint64_t)v39, a2 + 72);
    v40 = 1;
    v11 = *(unsigned __int8 *)(a2 + 208);
    v12 = *a3;
    *a3 = 0;
    v41 = v12;
    if (v11 && !*(_BYTE *)(a2 + 200) && *(_BYTE *)(*(_QWORD *)(a1 + 208) + 483))
    {
      WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((uint64_t)&v29, 1, a2 + 72);
      return WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)&v29, v13);
    }
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    v41 = v14;
  }
  v15 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v28) = 0;
    _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "Sending push message to network process to handle", (uint8_t *)&v28, 2u);
  }
  v16 = (WebKit *)WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1);
  v17 = (unsigned int *)((char *)v16 + 16);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = *(WTF::StringImpl **)(a1 + 24);
  v20 = WTF::fastMalloc((WTF *)0x100);
  v21 = v20;
  *(_QWORD *)v20 = off_1E34DFCC0;
  *(_QWORD *)(v20 + 8) = v29;
  v22 = v30;
  v30 = 0;
  *(_QWORD *)(v20 + 16) = v22;
  *(_BYTE *)(v20 + 24) = v31;
  *(_BYTE *)(v20 + 32) = 0;
  *(_BYTE *)(v20 + 48) = 0;
  if (v34)
  {
    *(_QWORD *)(v20 + 32) = v32;
    v23 = v33;
    v32 = 0;
    v33 = 0;
    *(_QWORD *)(v20 + 40) = v23;
    *(_BYTE *)(v20 + 48) = 1;
  }
  v24 = v35;
  v35 = 0;
  *(_QWORD *)(v20 + 56) = v24;
  WTF::URL::URL(v20 + 64, (uint64_t *)&v36);
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v21 + 104, (uint64_t)v39);
  v25 = v41;
  v41 = 0;
  *(_QWORD *)(v21 + 248) = v25;
  v28 = v21;
  WebKit::NetworkProcessProxy::processPushMessage(v16, v19, a2, &v28);
  v26 = v28;
  v28 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
  return WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)&v29, v13);
}

uint64_t WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v4;
  uint64_t v6;
  char v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const WTF::URL *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19[3];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16)
    || (v4 = *(WebKit::WebsiteDataStore **)a1, !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 208) + 483)))
  {
    v10 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!*(_BYTE *)(a3 + 136))
  {
    __break(0xC471u);
    goto LABEL_16;
  }
  v6 = a1 + 96;
  if (*(_BYTE *)(a1 + 232))
  {
    WTF::URL::operator=(v6, (WTF::StringImpl *)a3);
    WTF::String::operator=((WTF::StringImpl **)(a1 + 136), (WTF::StringImpl *)(a3 + 40));
    v7 = *(_BYTE *)(a3 + 56);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 48);
    *(_BYTE *)(a1 + 152) = v7;
    std::__optional_storage_base<WebCore::NotificationOptionsPayload,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NotificationOptionsPayload,false>>((WTF::StringImpl **)(a1 + 160), a3 + 64);
    v9 = *(_BYTE *)(a3 + 128);
  }
  else
  {
    WTF::URL::URL(v6, (uint64_t *)a3);
    v12 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a1 + 136) = v12;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a3 + 48);
    std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](a1 + 160, a3 + 64);
    v9 = *(_BYTE *)(a3 + 128);
    *(_BYTE *)(a1 + 232) = 1;
  }
  *(_BYTE *)(a1 + 224) = v9;
  WebKit::WebPushMessage::notificationPayloadToCoreData((WebKit::WebPushMessage *)(a1 + 24), v8, (uint64_t)v19);
  v13 = WebKit::WebsiteDataStore::showPersistentNotification(v4, 0, v19);
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v19, v14);
  if (!*(_BYTE *)(a1 + 232))
LABEL_16:
    __break(1u);
  if (*(_BYTE *)(a1 + 152))
  {
    v16 = *((_QWORD *)v4 + 49);
    WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)(a1 + 56), v15);
    if (*(_BYTE *)(a1 + 232) && *(_BYTE *)(a1 + 152))
    {
      (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD, uint64_t))(*(_QWORD *)v16 + 80))(v16, v19, *(_QWORD *)(a1 + 144), 1);
      if (v20 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v20])(&v18, v19);
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_14:
  v17 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

uint64_t WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 96, a2);
  v5 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v7 = *(WTF **)(a1 + 24);
    if (v7)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v7, v4);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return a1;
}

uint64_t WebKit::WebsiteDataStore::openerTypeForDomain(WebKit::WebsiteDataStore *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::RegistrableDomain *v7;

  v2 = *((_QWORD *)this + 58);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v4 = (uint64_t *)((char *)this + 464);
    v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 58, a2);
    v6 = *v4;
    if (*v4)
      v6 += 16 * *(unsigned int *)(v6 - 4);
    if (v6 == v5)
      return 0;
    else
      return *(unsigned __int8 *)(v5 + 8);
  }
  else
  {
    {
      v7 = (const WebCore::RegistrableDomain *)a2;
      WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance);
      a2 = (WTF::ASCIICaseInsensitiveHash **)v7;
    }
    return WebKit::RestrictedOpenerDomainsController::lookup((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance, a2);
  }
}

uint64_t WebKit::WebsiteDataStore::setRestrictedOpenerTypeForDomainForTesting(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, char a3)
{
  uint64_t result;
  uint64_t v6;
  char v7;

  v7 = a3;
  result = (uint64_t)*a2;
  if (*a2 && *(_DWORD *)(result + 4))
  {
    result = MEMORY[0x19AEABBCC]();
    if ((result & 1) == 0)
      return WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::inlineSet<WebCore::RegistrableDomain const&,WebKit::RestrictedOpenerType&>((uint64_t *)(a1 + 464), a2, &v7, (uint64_t)&v6);
  }
  return result;
}

WebKit::WebsiteDataStoreConfiguration *WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(WebKit::WebsiteDataStoreConfiguration *this, const WTF::UUID *a2)
{
  const WTF::UUID *v4;
  const WTF::UUID *v5;
  WebKit *v6;
  WebKit *isFullWebBrowserOrRunningTest;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const WTF::String *v11;
  uint64_t v13;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34DF2E8;
  *((_WORD *)this + 8) = 513;
  *((_OWORD *)this + 2) = *(_OWORD *)a2;
  WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(a2, v4);
  WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(a2, v5);
  v6 = (WebKit *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 8) = v13;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 27) = 1048576000;
  isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v6);
  v8 = 0x3FC3333333333333;
  if ((_DWORD)isFullWebBrowserOrRunningTest)
    v8 = 0x3FE3333333333333;
  *((_QWORD *)this + 28) = v8;
  *((_QWORD *)this + 29) = 1;
  v9 = WebKit::isFullWebBrowserOrRunningTest(isFullWebBrowserOrRunningTest);
  v10 = 0x3FC999999999999ALL;
  if (v9)
    v10 = 0x3FE999999999999ALL;
  *((_QWORD *)this + 30) = v10;
  *(_OWORD *)((char *)this + 248) = xmmword_1978D0C20;
  *((_BYTE *)this + 264) = 1;
  *((_BYTE *)this + 272) = 0;
  *((_BYTE *)this + 280) = 0;
  *((_WORD *)this + 144) = 256;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 328));
  *((_QWORD *)this + 46) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 368));
  *((_QWORD *)this + 51) = 0x1000101000000;
  *((_DWORD *)this + 104) = 256;
  *((_BYTE *)this + 420) = 0;
  *((_BYTE *)this + 424) = 0;
  *((_BYTE *)this + 428) = 0;
  *((_DWORD *)this + 108) = 1;
  *((_QWORD *)this + 55) = 0;
  WTF::URL::invalidate((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 440));
  *((_DWORD *)this + 120) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 61) = v13;
  *(_OWORD *)((char *)this + 522) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  WebKit::WebsiteDataStoreConfiguration::initializePaths(this, v11);
  return this;
}

void WebKit::FullscreenTouchSecheuristic::scoreOfNextTouch(WebKit::FullscreenTouchSecheuristic *this, CGPoint a2)
{
  CGFloat y;
  CGFloat x;
  double v5;
  double v6;
  double v7;
  CGPoint v8;

  y = a2.y;
  x = a2.x;
  WTF::MonotonicTime::now(this);
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
  {
    *((double *)this + 10) = v5;
  }
  else
  {
    v7 = v5 - v6;
    *((double *)this + 10) = v5;
    v8.x = x;
    v8.y = y;
    WebKit::FullscreenTouchSecheuristic::scoreOfNextTouch(this, v8, (const WTF::Seconds *)&v7);
  }
}

void WebKit::FullscreenTouchSecheuristic::scoreOfNextTouch(WebKit::FullscreenTouchSecheuristic *this, CGPoint a2, const WTF::Seconds *a3)
{
  CGPoint *v3;
  double v4;
  double v5;
  CGPoint v6;

  v6 = a2;
  v3 = (CGPoint *)((char *)this + 88);
  if (*((double *)this + 11) != -1.0 || *((double *)this + 12) != -1.0)
  {
    v4 = *(double *)a3 / *((double *)this + 2) * *(double *)this;
    if (v4 > 1.0)
      v4 = 1.0;
    if (v4 >= 0.0)
      v5 = v4;
    else
      v5 = 0.0;
    *((double *)this + 13) = *((double *)this + 13) * (1.0 - v5)
                           + v5
                           * WebKit::FullscreenTouchSecheuristic::distanceScore(this, &v6, (const CGPoint *)((char *)this + 88), a3);
  }
  *v3 = v6;
}

double WebKit::FullscreenTouchSecheuristic::attenuationFactor(double *a1, double a2)
{
  double result;

  result = a2 / a1[2] * *a1;
  if (result > 1.0)
    result = 1.0;
  if (result < 0.0)
    return 0.0;
  return result;
}

double WebKit::FullscreenTouchSecheuristic::distanceScore(WebKit::FullscreenTouchSecheuristic *this, const CGPoint *a2, const CGPoint *a3, const WTF::Seconds *a4)
{
  CGFloat v6;
  double v7;
  double v8;

  v6 = a2->y - a3->y;
  v7 = sqrt(*((double *)this + 4) * (v6 * v6) + *((double *)this + 3) * ((a2->x - a3->x) * (a2->x - a3->x)))
     / sqrt(*((double *)this + 4) * (*((double *)this + 9) * *((double *)this + 9))+ *((double *)this + 3) * (*((double *)this + 8) * *((double *)this + 8)));
  v8 = *((double *)this + 6);
  if (v7 > v8)
    v7 = v8 + pow((v7 - v8) / (1.0 - v8), *((long double *)this + 5));
  return v7 * (*((double *)this + 1) / *(double *)a4);
}

double WebKit::FullscreenTouchSecheuristic::reset(WebKit::FullscreenTouchSecheuristic *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 5) = xmmword_1978D0440;
  *((_OWORD *)this + 6) = xmmword_1978D0450;
  return result;
}

void WebKit::U2fAuthenticator::~U2fAuthenticator(WebKit::U2fAuthenticator *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  v3 = (WTF *)*((_QWORD *)this + 102);
  if (v3)
  {
    *((_QWORD *)this + 102) = 0;
    *((_DWORD *)this + 206) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 98) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::U2fAuthenticator *)((char *)this + 784));
  WebKit::FidoAuthenticator::~FidoAuthenticator(this);
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = (WTF *)*((_QWORD *)this + 102);
  if (v3)
  {
    *((_QWORD *)this + 102) = 0;
    *((_DWORD *)this + 206) = 0;
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 98) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::U2fAuthenticator *)((char *)this + 784));
  WebKit::FidoAuthenticator::~FidoAuthenticator(this);
  WTF::fastFree(v5, v6);
}

uint64_t API::ObjectImpl<(API::Object::Type)121>::type()
{
  return 121;
}

uint64_t API::ObjectImpl<(API::Object::Type)122>::type()
{
  return 122;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(WebCore::SecurityOriginData *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  double v5;
  char v6;
  uint64_t v7;
  char v9;

  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)this;
    do
    {
      v5 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v4);
      if ((v6 & 1) == 0)
      {
        v7 = v4[6];
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, unsigned int *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v7])(&v9, v4, v5);
        v4[6] = -1;
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::SecurityOriginData *)((char *)this - 16), a2);
}

void WebKit::WebsiteDataStoreConfiguration::Directories::~Directories(WebKit::WebsiteDataStoreConfiguration::Directories *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WTF *v4;
  void *v5;

  v4 = (WTF *)*(unsigned int *)(a2 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v4;
  if ((_DWORD)v4)
  {
    v5 = (void *)WTF::fastMalloc(v4);
    *(_DWORD *)(a1 + 8) = (_DWORD)v4;
    *(_QWORD *)a1 = v5;
    memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF350;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF350;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF378;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF378;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF3A0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#1},void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF3A0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF3C8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator() const(WebKit::WebsiteDataStore*,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&)::{lambda(void)#2},void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF3C8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  __int128 v7;
  uint64_t v8;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *(_QWORD *)result = v4;
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 8) = v5;
    v6 = *(_DWORD **)(a2 + 40);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 40) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(result + 64) = 0;
    v8 = result + 64;
    *(_OWORD *)(v3 + 48) = v7;
    *(_BYTE *)(v3 + 120) = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      std::construct_at[abi:sn180100]<WebCore::NotificationOptionsPayload,WebCore::NotificationOptionsPayload const&,WebCore::NotificationOptionsPayload*>(v8, a2 + 64);
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = *(_BYTE *)(a2 + 128);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NotificationOptionsPayload,WebCore::NotificationOptionsPayload const&,WebCore::NotificationOptionsPayload*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  if (result)
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v2 = *(_DWORD **)(a2 + 8);
    if (v2)
      *v2 += 2;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_DWORD **)(a2 + 32);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(result + 32) = v5;
    v6 = *(_DWORD **)(a2 + 40);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 40) = v6;
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void std::__optional_storage_base<WebCore::NotificationOptionsPayload,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NotificationOptionsPayload,false>>(WTF::StringImpl **this, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*((unsigned __int8 *)this + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*((_BYTE *)this + 56))
    {
      *(_BYTE *)this = *(_BYTE *)a2;
      WTF::String::operator=(this + 1, (WTF::StringImpl *)(a2 + 8));
      WTF::String::operator=(this + 2, (WTF::StringImpl *)(a2 + 16));
      WTF::String::operator=(this + 3, (WTF::StringImpl *)(a2 + 24));
      WTF::String::operator=(this + 4, (WTF::StringImpl *)(a2 + 32));
      WTF::String::operator=(this + 5, (WTF::StringImpl *)(a2 + 40));
      *((_WORD *)this + 24) = *(_WORD *)(a2 + 48);
    }
  }
  else if (*((_BYTE *)this + 56))
  {
    WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem((WebCore::ApplePayInstallmentItem *)this, (WTF::StringImpl *)a2);
    *((_BYTE *)this + 56) = 0;
  }
  else
  {
    *(_BYTE *)this = *(_BYTE *)a2;
    v4 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    this[1] = v4;
    v5 = *(WTF::StringImpl **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    this[2] = v5;
    v6 = *(WTF::StringImpl **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    this[3] = v6;
    v7 = *(WTF::StringImpl **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    this[4] = v7;
    v8 = *(WTF::StringImpl **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    this[5] = v8;
    *((_WORD *)this + 24) = *(_WORD *)(a2 + 48);
    *((_BYTE *)this + 56) = 1;
  }
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload,WebCore::NotificationPayload*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    WTF::URL::URL(result, (uint64_t *)a2);
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(v5 + 40) = v4;
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
    std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](v5 + 64, a2 + 64);
    *(_BYTE *)(v3 + 128) = *(_BYTE *)(a2 + 128);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::U2fAuthenticator::*&)(void),WebKit::U2fAuthenticator*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::U2fAuthenticator::issueCommand(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::U2fAuthenticator::CommandType)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF418;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::U2fAuthenticator::issueCommand(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::U2fAuthenticator::CommandType)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF418;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::U2fAuthenticator::issueCommand(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::U2fAuthenticator::CommandType)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  void *v5;
  char *v6;
  WTF *v7;
  char *v8;
  char *v9;
  void *v10;
  NSObject *v11;
  char *v12;
  void *v13;
  WTF *v14;
  NSObject *v15;
  char *v16;
  void *v17;
  WTF *v18;
  NSObject *v19;
  char *v20;
  void *v21;
  WTF *v22;
  NSObject *v23;
  char *v24;
  void *v25;
  WTF *v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  WTF *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::DeferrableRefCountedBase *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  WTF *v60;
  unsigned __int16 v61;
  char v62;
  WTF *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  _BYTE buf[24];
  char *v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = *(unsigned __int8 *)(result + 16);
  apdu::ApduResponse::createFromMessage();
  v4 = qword_1ECE71AC8;
  result = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT);
  if (!v62)
  {
    if ((_DWORD)result)
    {
      WebCore::toString();
      WTF::String::utf8();
      if (v63)
        v8 = (char *)v63 + 16;
      else
        v8 = 0;
      WTF::base64EncodeToString();
      WTF::String::utf8();
      if (v59)
        v9 = (char *)v59 + 16;
      else
        v9 = 0;
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2080;
      v67 = v9;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::responseReceived: Failed to parse response: %s", buf, 0x20u);
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
          WTF::fastFree(v59, v10);
        else
          --*(_DWORD *)v59;
      }
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v58 -= 2;
      }
      v32 = v63;
      v63 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, v10);
        else
          --*(_DWORD *)v32;
      }
      v33 = v65;
      v65 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
    goto LABEL_75;
  }
  if ((_DWORD)result)
  {
    WebCore::toString();
    WTF::String::utf8();
    if (v63)
      v6 = (char *)v63 + 16;
    else
      v6 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v67) = v3;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::responseReceived: Got response for command type: %hhu", buf, 0x1Cu);
    v7 = v63;
    v63 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v5);
      else
        --*(_DWORD *)v7;
    }
    result = (uint64_t)v65;
    v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  switch(v3)
  {
    case 0:
      v11 = qword_1ECE71AC8;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63)
          v12 = (char *)v63 + 16;
        else
          v12 = 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueRegisterCommandAfterResponseReceived: Status %hu", buf, 0x1Cu);
        v14 = v63;
        v63 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v13);
          else
            --*(_DWORD *)v14;
        }
        v41 = v65;
        v65 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v13);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
      if (v61 == 27013)
        goto LABEL_141;
      if (v61 != 36864)
      {
        LOBYTE(v63) = 24;
        *(_QWORD *)buf = "Unknown internal error. Error code: ";
        *(_QWORD *)&buf[8] = 37;
        LODWORD(v65) = v61;
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t *)buf, (unsigned int *)&v65, &v64);
        v43 = v64;
        if (v64)
        {
LABEL_143:
          buf[0] = (_BYTE)v63;
          v64 = 0;
          *(_QWORD *)&buf[8] = v43;
          v51 = 1;
          *(_DWORD *)&buf[16] = 1;
          v52 = *(_QWORD *)(v2 + 24);
          if (!v52
            || (v53 = *(_QWORD *)(v52 + 8)) == 0
            || ((*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v53 + 16))(v53, buf),
                v51 = *(_DWORD *)&buf[16],
                *(_DWORD *)&buf[16] != -1))
          {
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34DF300[v51])(&v65, buf);
          }
          *(_DWORD *)&buf[16] = -1;
          result = (uint64_t)v64;
          v64 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_162;
        }
LABEL_181:
        __break(0xC471u);
        JUMPOUT(0x1974708C0);
      }
      if (*(_DWORD *)(v2 + 352))
      {
LABEL_180:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_181;
      }
      if (!*(_BYTE *)(v2 + 80))
LABEL_179:
        __break(1u);
      LOBYTE(v65) = *(_BYTE *)(*(_QWORD *)(v2 + 776) + 20);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)buf, (uint64_t)&v65, 1);
      fido::readU2fRegisterResponse();
      v47 = *(WTF **)buf;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)buf = 0;
        *(_DWORD *)&buf[8] = 0;
        WTF::fastFree(v47, v46);
      }
      v48 = v63;
      if (v63)
      {
        v63 = 0;
        *(_QWORD *)buf = v48;
        *(_DWORD *)&buf[16] = 0;
        v49 = *(_QWORD *)(v2 + 24);
        if (!v49)
        {
LABEL_160:
          ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34DF300[v49])(&v65, buf);
          goto LABEL_161;
        }
        v50 = *(_QWORD *)(v49 + 8);
        if (!v50)
        {
          LODWORD(v49) = 0;
          goto LABEL_160;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        buf[0] = 24;
        LODWORD(v49) = 1;
        *(_DWORD *)&buf[16] = 1;
        v55 = *(_QWORD *)(v2 + 24);
        if (!v55)
          goto LABEL_160;
        v50 = *(_QWORD *)(v55 + 8);
        if (!v50)
          goto LABEL_160;
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v50 + 16))(v50, buf);
      LODWORD(v49) = *(_DWORD *)&buf[16];
      if (*(_DWORD *)&buf[16] != -1)
        goto LABEL_160;
LABEL_161:
      result = (uint64_t)v63;
      v63 = 0;
LABEL_162:
      if (v62)
      {
        result = (uint64_t)v60;
        if (v60)
          return WTF::fastFree(v60, v5);
      }
      return result;
    case 1:
      v27 = qword_1ECE71AC8;
      v28 = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v28)
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63)
          v29 = (char *)v63 + 16;
        else
          v29 = 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v29;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueCheckOnlyCommandAfterResponseReceived: Status %hu", buf, 0x1Cu);
        v31 = v63;
        v63 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
            WTF::fastFree(v31, v30);
          else
            --*(_DWORD *)v31;
        }
        v28 = (uint64_t)v65;
        v65 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            v28 = WTF::StringImpl::destroy((WTF::StringImpl *)v28, (WTF::StringImpl *)v30);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
      if (v61 == 36864 || v61 == 27013)
      {
        fido::constructBogusU2fRegistrationCommand((fido *)v28);
        WebKit::U2fAuthenticator::issueNewCommand(v2, (uint64_t *)buf, 2);
        result = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)buf = 0;
          *(_DWORD *)&buf[8] = 0;
          result = WTF::fastFree((WTF *)result, v5);
        }
      }
      else
      {
        v54 = *(_QWORD *)(v2 + 840);
        *(_QWORD *)(v2 + 840) = v54 + 1;
        result = (uint64_t)WebKit::U2fAuthenticator::checkExcludeList((WebKit::U2fAuthenticator *)v2, v54);
      }
      goto LABEL_162;
    case 2:
      v19 = qword_1ECE71AC8;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63)
          v20 = (char *)v63 + 16;
        else
          v20 = 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueBogusCommandExcludeCredentialsMatchAfterResponseReceived: Status %hu", buf, 0x1Cu);
        v22 = v63;
        v63 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
            WTF::fastFree(v22, v21);
          else
            --*(_DWORD *)v22;
        }
        v39 = v65;
        v65 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      if (v61 == 27013)
        goto LABEL_141;
      if (v61 == 36864)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v34 = 8;
        goto LABEL_76;
      }
      LOBYTE(v63) = 24;
      *(_QWORD *)buf = "Unknown internal error. Error code: ";
      *(_QWORD *)&buf[8] = 37;
      LODWORD(v65) = v61;
      WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t *)buf, (unsigned int *)&v65, &v64);
      v43 = v64;
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x19747045CLL);
      }
      goto LABEL_143;
    case 3:
      v23 = qword_1ECE71AC8;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63)
          v24 = (char *)v63 + 16;
        else
          v24 = 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueBogusCommandNoCredentialsAfterResponseReceived: Status %hu", buf, 0x1Cu);
        v26 = v63;
        v63 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            WTF::fastFree(v26, v25);
          else
            --*(_DWORD *)v26;
        }
        v40 = v65;
        v65 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v25);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      if (v61 == 27013)
        goto LABEL_141;
      if (v61 == 36864)
      {
        v44 = *(_QWORD *)(v2 + 24);
        if (v44)
        {
          v45 = *(_QWORD *)(v44 + 8);
          if (v45)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 32))(v45, 1);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v34 = 31;
        goto LABEL_76;
      }
      LOBYTE(v63) = 24;
      *(_QWORD *)buf = "Unknown internal error. Error code: ";
      *(_QWORD *)&buf[8] = 37;
      LODWORD(v65) = v61;
      WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t *)buf, (unsigned int *)&v65, &v64);
      v43 = v64;
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x1974704F8);
      }
      goto LABEL_143;
    case 4:
      v15 = qword_1ECE71AC8;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::toString();
        WTF::String::utf8();
        if (v63)
          v16 = (char *)v63 + 16;
        else
          v16 = 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v16;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v67) = v61;
        _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p [transport=%s] - U2fAuthenticator::continueSignCommandAfterResponseReceived: Status %hu", buf, 0x1Cu);
        v18 = v63;
        v63 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            WTF::fastFree(v18, v17);
          else
            --*(_DWORD *)v18;
        }
        v38 = v65;
        v65 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      if (*(_DWORD *)(v2 + 352) != 1)
        goto LABEL_180;
      switch(v61)
      {
        case 0x6985u:
LABEL_141:
          result = WTF::RunLoop::TimerBase::start();
          goto LABEL_162;
        case 0x6A80u:
          if (*(_BYTE *)(v2 + 256) && *(_QWORD *)(v2 + 112))
          {
            if (!*(_BYTE *)(v2 + 848))
            {
              *(_BYTE *)(v2 + 848) = 1;
              v42 = *(_QWORD *)(v2 + 840) - 1;
              goto LABEL_114;
            }
            *(_BYTE *)(v2 + 848) = 0;
          }
          break;
        case 0x9000u:
          if (*(_BYTE *)(v2 + 848))
          {
            if (!*(_BYTE *)(v2 + 256))
              goto LABEL_179;
            if (*(_QWORD *)(v2 + 840) - 1 >= (unint64_t)*(unsigned int *)(v2 + 100))
            {
              __break(0xC471u);
              JUMPOUT(0x1974708C8);
            }
          }
          else if (*(_QWORD *)(v2 + 840) - 1 >= (unint64_t)*(unsigned int *)(v2 + 100))
          {
            __break(0xC471u);
            JUMPOUT(0x1974708D0);
          }
          fido::readU2fSignResponse();
          v56 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            if (*(_BYTE *)(v2 + 848))
            {
              *(_DWORD *)buf = 257;
              buf[8] = 0;
              v68 = 0;
              v69 = 0;
              v71 = 0;
              WebCore::AuthenticatorResponse::setExtensions();
              if (v71)
                std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v70);
              if (v68)
              {
                v57 = *(WTF::DeferrableRefCountedBase **)&buf[16];
                *(_QWORD *)&buf[16] = 0;
                if (v57)
                  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v57);
              }
            }
            *(_QWORD *)buf = v56;
            *(_DWORD *)&buf[16] = 0;
            v35 = *(_QWORD *)(v2 + 24);
            if (!v35)
              goto LABEL_79;
            v37 = *(_QWORD *)(v35 + 8);
            if (!v37)
            {
              LODWORD(v35) = 0;
LABEL_79:
              result = ((uint64_t (*)(WTF **, _BYTE *))off_1E34DF300[v35])(&v63, buf);
              goto LABEL_162;
            }
LABEL_78:
            result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v37 + 16))(v37, buf);
            LODWORD(v35) = *(_DWORD *)&buf[16];
            if (*(_DWORD *)&buf[16] == -1)
              goto LABEL_162;
            goto LABEL_79;
          }
LABEL_75:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v34 = 24;
LABEL_76:
          buf[0] = v34;
          LODWORD(v35) = 1;
          *(_DWORD *)&buf[16] = 1;
          v36 = *(_QWORD *)(v2 + 24);
          if (!v36)
            goto LABEL_79;
          v37 = *(_QWORD *)(v36 + 8);
          if (!v37)
            goto LABEL_79;
          goto LABEL_78;
      }
      v42 = *(_QWORD *)(v2 + 840);
      *(_QWORD *)(v2 + 840) = v42 + 1;
LABEL_114:
      result = WebKit::U2fAuthenticator::issueSignCommand((WebKit::U2fAuthenticator *)v2, v42);
      goto LABEL_162;
    default:
      goto LABEL_162;
  }
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  void *v24;
  int isNull;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  unsigned int *v38;
  char v39;
  char v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 48 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (!v5)
  {
    v12 = 0;
    if (!v4)
      return v12;
    goto LABEL_26;
  }
  v11 = 0;
  v12 = 0;
  v13 = v5;
  do
  {
    v14 = (unsigned int *)(v4 + 48 * v11);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
    if ((v15 & 1) == 0)
    {
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 48 * v11)))
      {
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 48 * v11 + 32, v16);
        v17 = v14[6];
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v17])(&v39, v4 + 48 * v11);
        v14[6] = -1;
      }
      else
      {
        v18 = *a1;
        v38 = v12;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        v42 = -1640531527;
        v43 = 0;
        v44 = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v42, v4 + 48 * v11);
        v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
        v21 = 0;
        do
        {
          v22 = v20 & v19;
          v23 = (unsigned int *)(v18 + 48 * (v20 & v19));
          isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23);
          v20 = ++v21 + v22;
        }
        while (!isNull);
        v26 = (_QWORD *)(v18 + 48 * v22 + 32);
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v24);
        v27 = v23[6];
        if ((_DWORD)v27 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v27])(&v40, v18 + 48 * v22);
        *(_BYTE *)v23 = 0;
        v23[6] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 48 * v22, v4 + 48 * v11);
        v28 = v4 + 48 * v11;
        *v26 = 0;
        *(_QWORD *)(v18 + 48 * v22 + 40) = 0;
        v29 = *(_QWORD *)(v28 + 32);
        v28 += 32;
        *(_QWORD *)v28 = 0;
        *v26 = v29;
        v30 = *(_DWORD *)(v28 + 8);
        *(_DWORD *)(v28 + 8) = 0;
        v31 = v18 + 48 * v22;
        *(_DWORD *)(v31 + 40) = v30;
        v32 = *(_DWORD *)(v28 + 12);
        *(_DWORD *)(v28 + 12) = 0;
        *(_DWORD *)(v31 + 44) = v32;
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, v33);
        v34 = v14[6];
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v34])(&v41, v4 + 48 * v11);
        v14[6] = -1;
        v12 = v38;
        if (v14 == a3)
          v12 = v23;
      }
    }
    ++v11;
  }
  while (v11 != v13);
  if (v4)
LABEL_26:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,BOOL,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_1,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  *(_QWORD *)a1 = &off_1E34DF440;
  v3 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v3])(&v8, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,BOOL,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  *(_QWORD *)this = &off_1E34DF440;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v3])(&v8, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,BOOL,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&)::$_1,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  int v10;
  uint64_t v11;
  WebCore::SecurityOriginData *v12;
  int v13;
  char v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD v47[2];

  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v44 = *(_QWORD *)(result + 8);
    v4 = (uint64_t *)(v44 + 8);
    v5 = *(_QWORD *)(v44 + 8);
    v6 = result + 24;
    if (v5
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)(v44 + 8), 0), (v5 = *v4) != 0))
    {
      v7 = *(_DWORD *)(v5 - 8);
    }
    else
    {
      v7 = 0;
    }
    LODWORD(v47[0]) = -1640531527;
    WORD2(v47[0]) = 0;
    BYTE6(v47[0]) = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v47, v6);
    v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v47) & v7;
    v9 = (WebCore::SecurityOriginData *)(v5 + 40 * v8);
    if ((WebCore::SecurityOriginData::isNull(v9) & 1) != 0)
    {
      v10 = a2;
      v11 = v44;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v9);
        if ((v14 & 1) != 0)
        {
          v12 = v9;
        }
        else if (WebCore::operator==())
        {
          v22 = v5 + 40 * v8;
          v10 = a2;
          *(_BYTE *)(v22 + 32) = a2;
          v11 = v44;
          goto LABEL_25;
        }
        v8 = ((_DWORD)v8 + v13) & v7;
        v9 = (WebCore::SecurityOriginData *)(v5 + 40 * v8);
        ++v13;
      }
      while (!WebCore::SecurityOriginData::isNull(v9));
      v10 = a2;
      v11 = v44;
      if (v12)
      {
        *((_BYTE *)v12 + 32) = 0;
        *(_OWORD *)v12 = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        --*(_DWORD *)(*v4 - 16);
        v9 = v12;
      }
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, v6);
    *((_BYTE *)v9 + 32) = v10;
    v16 = *v4;
    if (*v4)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
      {
LABEL_25:
        v25 = *(_QWORD *)(v11 + 16);
        v23 = (uint64_t *)(v11 + 16);
        v24 = v25;
        if (!v25)
          goto LABEL_42;
        v26 = *(_DWORD *)(v24 - 8);
        LODWORD(v47[0]) = -1640531527;
        WORD2(v47[0]) = 0;
        BYTE6(v47[0]) = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v47, v6);
        v27 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v47) & v26;
        v28 = v24 + 48 * v27;
        if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v28) & 1) != 0)
        {
LABEL_31:
          v31 = *v23;
          if (!*v23)
            goto LABEL_42;
          v28 = v31 + 48 * *(unsigned int *)(v31 - 4);
        }
        else
        {
          v29 = 1;
          while (1)
          {
            WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v28);
            if ((v30 & 1) == 0 && (WebCore::operator==() & 1) != 0)
              break;
            v27 = (v27 + v29) & v26;
            v28 = v24 + 48 * v27;
            ++v29;
            if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v28))
              goto LABEL_31;
          }
          v31 = *v23;
          if (!*v23)
          {
LABEL_34:
            if (v31 != v28)
            {
              v32 = *(_QWORD **)(v28 + 32);
              v45 = v32;
              v33 = *(_DWORD *)(v28 + 40);
              v34 = *(unsigned int *)(v28 + 44);
              *(_QWORD *)(v28 + 32) = 0;
              *(_QWORD *)(v28 + 40) = 0;
              v46 = __PAIR64__(v34, v33);
              v35 = *v23;
              if (!*v23 || (v35 += 48 * *(unsigned int *)(v35 - 4), v35 != v28))
              {
                if (v35 != v28)
                {
                  v36 = *(unsigned int *)(v28 + 24);
                  if ((_DWORD)v36 != -1)
                    ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v36])(v47, v28);
                  *(_QWORD *)v28 = -1;
                  *(_QWORD *)(v28 + 8) = 0;
                  *(_DWORD *)(v28 + 16) = 0;
                  *(_DWORD *)(v28 + 24) = 0;
                  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28 + 32, v15);
                  ++*(_DWORD *)(*v23 - 16);
                  v37 = *v23;
                  if (*v23)
                    v38 = *(_DWORD *)(v37 - 12) - 1;
                  else
                    v38 = -1;
                  *(_DWORD *)(v37 - 12) = v38;
                  v39 = *v23;
                  if (*v23)
                  {
                    v40 = 6 * *(_DWORD *)(v39 - 12);
                    v41 = *(_DWORD *)(v39 - 4);
                    if (v40 < v41 && v41 >= 9)
                      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v23, v41 >> 1, 0);
                  }
                }
              }
              if ((_DWORD)v34)
              {
                v42 = 8 * v34;
                do
                {
                  v43 = *v32;
                  *v32++ = 0;
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 16))(v43, v10 ^ 1u);
                  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
                  v42 -= 8;
                }
                while (v42);
              }
              return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v15);
            }
LABEL_42:
            v47[0] = 0;
            v45 = 0;
            v47[1] = 0;
            v46 = 0;
            WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v15);
            return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v15);
          }
        }
        v31 += 48 * *(unsigned int *)(v31 - 4);
        goto LABEL_34;
      }
    }
    else if (3 * v21 > 4 * v20)
    {
      goto LABEL_25;
    }
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v4, (unsigned int *)v9);
    goto LABEL_25;
  }
  return result;
}

void WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  int isNull;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v27;
  char v28;
  char v29;
  char v30;
  int v31;
  __int16 v32;
  char v33;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = v6 + 16;
    do
    {
      *(_BYTE *)(v9 + 32) = 0;
      *(_OWORD *)v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      v9 += 40;
      --v8;
    }
    while (v8);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = v3;
    do
    {
      v13 = (unsigned int *)(v2 + 40 * v10);
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
      if ((v14 & 1) == 0)
      {
        if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10)))
        {
          v15 = v13[6];
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v15])(&v28, v2 + 40 * v10);
          v13[6] = -1;
        }
        else
        {
          v16 = *a1;
          v27 = v11;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v31 = -1640531527;
          v32 = 0;
          v33 = 0;
          WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v31, v2 + 40 * v10);
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          v19 = 0;
          do
          {
            v20 = v18 & v17;
            v21 = (unsigned int *)(v16 + 40 * (v18 & v17));
            isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21);
            v18 = ++v19 + v20;
          }
          while (!isNull);
          v23 = v21[6];
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v23])(&v29, v16 + 40 * v20);
          *(_BYTE *)v21 = 0;
          v21[6] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v16 + 40 * v20, v2 + 40 * v10);
          *(_BYTE *)(v16 + 40 * v20 + 32) = *(_BYTE *)(v2 + 40 * v10 + 32);
          v24 = v13[6];
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v24])(&v30, v2 + 40 * v10);
          v13[6] = -1;
          v11 = v27;
          if (v13 == a2)
            v11 = v21;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  if (v2)
    WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WebKit::WebsiteDataStoreClient::requestStorageSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;

  v7 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

WTF::StringImpl *WebKit::WebsiteDataStoreClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v8);
  cf = 0;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    *(_QWORD *)(v2 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, 1, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebsiteDataStoreClient::openWindowFromServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::WebsiteDataStoreClient::showNotification()
{
  return 0;
}

uint64_t WebKit::WebsiteDataStoreClient::hasGetDisplayedNotifications(WebKit::WebsiteDataStoreClient *this)
{
  return 0;
}

uint64_t WebKit::WebsiteDataStoreClient::getDisplayedNotifications(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t WebKit::WebsiteDataStoreClient::requestBackgroundFetchPermission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

WTF *WebKit::WebsiteDataStoreClient::webCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF *result;
  void *v4;
  WTF *v5;
  int v6;
  char v7;

  LOBYTE(v5) = 0;
  v7 = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 16))(v2, &v5);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v7)
  {
    result = v5;
    if (v5)
    {
      v5 = 0;
      v6 = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::~WebsiteDataStore()::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DF508;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::~WebsiteDataStore()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF508;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::~WebsiteDataStore()::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  v4 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34DF530;
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)(a1 + 3), a2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E34DF530;
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)(a1 + 3), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0,void>::call(WTF::FileSystemImpl *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  const WTF::String *v11;
  uint64_t Salt;
  const WTF::String *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WTF::String *v19;
  const WTF::String *v20;
  const WTF::String *v21;
  const WebCore::ClientOrigin *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  int v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  int v116;
  uint64_t v117;
  WTF::FileSystemImpl *v118;
  uint64_t v119;
  unint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  void *v130;
  WTF::StringImpl *v131;
  uint64_t i;
  WTF::StringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  void *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  void *v144;
  unsigned __int8 *v145;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *result;
  WTF::StringImpl *v201;
  WTF::StringImpl **v202;
  WTF::StringImpl **v203;
  WTF::StringImpl **v204;
  WTF::StringImpl **v205;
  uint64_t v206;
  WTF::FileSystemImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  char v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218[5];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _QWORD v226[3];
  int v227;
  char v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl **)((char *)this + 112);
  v3 = *((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 1);
  if (v3)
  {
    v6 = *(unsigned int *)(v3 + 4);
    if ((_DWORD)v6)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v3 + 8), v6 | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32), v218);
      v7 = v218[0];
      v218[0] = 0;
      v8 = *v4;
      *v4 = v7;
      if (v8)
      {
        v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 != 2)
        {
LABEL_7:
          *(_DWORD *)v8 = v9;
          goto LABEL_8;
        }
        WTF::StringImpl::destroy(v8, a2);
        v8 = v218[0];
        v218[0] = 0;
        if (v8)
        {
          v9 = *(_DWORD *)v8 - 2;
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::destroy(v8, a2);
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
    }
  }
LABEL_8:
  v10 = *((_QWORD *)this + 15);
  v207 = (WTF::FileSystemImpl *)((char *)this + 120);
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::pathByAppendingComponent();
    Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v213, v11);
    if ((_BYTE)v13)
      v14 = Salt;
    else
      v14 = 0;
    v206 = v14;
    WTF::FileSystemImpl::listDirectory(v207, v13);
    if (HIDWORD(v217))
    {
      v16 = v216;
      v17 = 8 * HIDWORD(v217);
      while (1)
      {
        v18 = *(WTF::StringImpl **)v16;
        if (*(_QWORD *)v16)
          break;
        if ((MEMORY[0x19AEABBCC](0, "v1", 2) & 1) == 0)
          goto LABEL_17;
LABEL_55:
        v16 = (WTF::StringImpl *)((char *)v16 + 8);
        v17 -= 8;
        if (!v17)
          goto LABEL_60;
      }
      *(_DWORD *)v18 += 2;
      if ((MEMORY[0x19AEABBCC](v18, "v1", 2) & 1) == 0)
      {
LABEL_17:
        WebCore::SecurityOriginData::fromDatabaseIdentifier();
        if (v228)
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          WebKit::computeMediaKeyFile((WebKit *)&v211, v212);
          if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v211, v19) & 1) != 0)
          {
            if (!v228)
              goto LABEL_334;
            WebCore::StorageUtilities::encodeSecurityOriginForFileName();
            WTF::FileSystemImpl::pathByAppendingComponent();
            if (WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v212, (const WTF::String *)&v209, v21))
            {
              WTF::FileSystemImpl::pathByAppendingComponent();
              if (!v228
                || (LOBYTE(v218[0]) = 0,
                    LODWORD(v218[3]) = -1,
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v218, (uint64_t)v226), !v228))
              {
LABEL_334:
                __break(1u);
              }
              LOBYTE(v218[4]) = 0;
              LODWORD(v220) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v218[4], (uint64_t)v226);
              WebCore::StorageUtilities::writeOriginToFile((WebCore::StorageUtilities *)&v208, (const WTF::String *)v218, v22);
              if ((_DWORD)v220 != -1)
                ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v220])(&v215, &v218[4]);
              LODWORD(v220) = -1;
              if (LODWORD(v218[3]) != -1)
                ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[LODWORD(v218[3])])(&v215, v218);
              v23 = v208;
              v208 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v15);
                else
                  *(_DWORD *)v23 -= 2;
              }
            }
            v24 = v209;
            v209 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v15);
              else
                *(_DWORD *)v24 -= 2;
            }
            v25 = v210;
            v210 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v15);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v212, v20);
          }
          v26 = v211;
          v211 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v15);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v212;
          v212 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v15);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v228 && v227 != -1)
            ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v227])(v218, v226);
        }
        if (!v18)
          goto LABEL_55;
      }
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
      goto LABEL_55;
    }
LABEL_60:
    v28 = v214;
    if (v214)
      *(_DWORD *)v214 += 2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v216, v15);
    v30 = v213;
    v213 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v214;
    v214 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v29);
        if (v28)
          goto LABEL_70;
        goto LABEL_80;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (v28)
    {
LABEL_70:
      v32 = *((_QWORD *)v28 + 1);
      v33 = *((_DWORD *)v28 + 1);
      v34 = ((unint64_t)*((unsigned int *)v28 + 4) >> 2) & 1;
      goto LABEL_71;
    }
LABEL_80:
    v32 = 0;
    v33 = 0;
    v34 = 1;
LABEL_71:
    WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v32, v33 | (v34 << 32), v218);
    v35 = v218[0];
    v218[0] = 0;
    v36 = *(WTF::StringImpl **)v207;
    *(_QWORD *)v207 = v35;
    if (!v36)
      goto LABEL_76;
    v37 = *(_DWORD *)v36 - 2;
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, a2);
      v36 = v218[0];
      v218[0] = 0;
      if (!v36)
        goto LABEL_76;
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, a2);
        if (!v28)
          goto LABEL_82;
LABEL_77:
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, a2);
        else
          *(_DWORD *)v28 -= 2;
        goto LABEL_82;
      }
    }
    *(_DWORD *)v36 = v37;
LABEL_76:
    if (!v28)
      goto LABEL_82;
    goto LABEL_77;
  }
LABEL_82:
  v39 = (WTF::StringImpl **)((char *)this + 88);
  v38 = *((_QWORD *)this + 11);
  if (v38)
  {
    v40 = *(unsigned int *)(v38 + 4);
    if ((_DWORD)v40)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v38 + 8), v40 | ((unint64_t)((*(_DWORD *)(v38 + 16) >> 2) & 1) << 32), v218);
      v41 = v218[0];
      v218[0] = 0;
      v42 = *v39;
      *v39 = v41;
      if (v42)
      {
        v43 = *(_DWORD *)v42 - 2;
        if (*(_DWORD *)v42 != 2)
        {
LABEL_88:
          *(_DWORD *)v42 = v43;
          goto LABEL_89;
        }
        WTF::StringImpl::destroy(v42, a2);
        v42 = v218[0];
        v218[0] = 0;
        if (v42)
        {
          v43 = *(_DWORD *)v42 - 2;
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::destroy(v42, a2);
            goto LABEL_89;
          }
          goto LABEL_88;
        }
      }
    }
  }
LABEL_89:
  v45 = (WTF::StringImpl **)((char *)this + 40);
  v44 = *((_QWORD *)this + 5);
  if (v44)
  {
    v46 = *(unsigned int *)(v44 + 4);
    if ((_DWORD)v46)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v44 + 8), v46 | ((unint64_t)((*(_DWORD *)(v44 + 16) >> 2) & 1) << 32), v218);
      v47 = v218[0];
      v218[0] = 0;
      v48 = *v45;
      *v45 = v47;
      if (v48)
      {
        v49 = *(_DWORD *)v48 - 2;
        if (*(_DWORD *)v48 != 2)
        {
LABEL_95:
          *(_DWORD *)v48 = v49;
          goto LABEL_96;
        }
        WTF::StringImpl::destroy(v48, a2);
        v48 = v218[0];
        v218[0] = 0;
        if (v48)
        {
          v49 = *(_DWORD *)v48 - 2;
          if (*(_DWORD *)v48 == 2)
          {
            WTF::StringImpl::destroy(v48, a2);
            goto LABEL_96;
          }
          goto LABEL_95;
        }
      }
    }
  }
LABEL_96:
  v51 = (WTF::StringImpl **)((char *)this + 104);
  v50 = *((_QWORD *)this + 13);
  if (v50)
  {
    v52 = *(unsigned int *)(v50 + 4);
    if ((_DWORD)v52)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v50 + 8), v52 | ((unint64_t)((*(_DWORD *)(v50 + 16) >> 2) & 1) << 32), v218);
      v53 = v218[0];
      v218[0] = 0;
      v54 = *v51;
      *v51 = v53;
      if (v54)
      {
        v55 = *(_DWORD *)v54 - 2;
        if (*(_DWORD *)v54 != 2)
        {
LABEL_102:
          *(_DWORD *)v54 = v55;
          goto LABEL_103;
        }
        WTF::StringImpl::destroy(v54, a2);
        v54 = v218[0];
        v218[0] = 0;
        if (v54)
        {
          v55 = *(_DWORD *)v54 - 2;
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::destroy(v54, a2);
            goto LABEL_103;
          }
          goto LABEL_102;
        }
      }
    }
  }
LABEL_103:
  v57 = (WTF::StringImpl **)((char *)this + 64);
  v56 = *((_QWORD *)this + 8);
  if (v56)
  {
    v58 = *(unsigned int *)(v56 + 4);
    if ((_DWORD)v58)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v56 + 8), v58 | ((unint64_t)((*(_DWORD *)(v56 + 16) >> 2) & 1) << 32), v218);
      v59 = v218[0];
      v218[0] = 0;
      v60 = *v57;
      *v57 = v59;
      if (v60)
      {
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 != 2)
        {
LABEL_109:
          *(_DWORD *)v60 = v61;
          goto LABEL_110;
        }
        WTF::StringImpl::destroy(v60, a2);
        v60 = v218[0];
        v218[0] = 0;
        if (v60)
        {
          v61 = *(_DWORD *)v60 - 2;
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::destroy(v60, a2);
            goto LABEL_110;
          }
          goto LABEL_109;
        }
      }
    }
  }
LABEL_110:
  v63 = (WTF::StringImpl **)((char *)this + 128);
  v62 = *((_QWORD *)this + 16);
  if (v62)
  {
    v64 = *(unsigned int *)(v62 + 4);
    if ((_DWORD)v64)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v62 + 8), v64 | ((unint64_t)((*(_DWORD *)(v62 + 16) >> 2) & 1) << 32), v218);
      v65 = v218[0];
      v218[0] = 0;
      v66 = *v63;
      *v63 = v65;
      if (v66)
      {
        v67 = *(_DWORD *)v66 - 2;
        if (*(_DWORD *)v66 != 2)
        {
LABEL_116:
          *(_DWORD *)v66 = v67;
          goto LABEL_117;
        }
        WTF::StringImpl::destroy(v66, a2);
        v66 = v218[0];
        v218[0] = 0;
        if (v66)
        {
          v67 = *(_DWORD *)v66 - 2;
          if (*(_DWORD *)v66 == 2)
          {
            WTF::StringImpl::destroy(v66, a2);
            goto LABEL_117;
          }
          goto LABEL_116;
        }
      }
    }
  }
LABEL_117:
  v69 = (WTF::StringImpl **)((char *)this + 136);
  v68 = *((_QWORD *)this + 17);
  if (v68)
  {
    v70 = *(unsigned int *)(v68 + 4);
    if ((_DWORD)v70)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v68 + 8), v70 | ((unint64_t)((*(_DWORD *)(v68 + 16) >> 2) & 1) << 32), v218);
      v71 = v218[0];
      v218[0] = 0;
      v72 = *v69;
      *v69 = v71;
      if (v72)
      {
        v73 = *(_DWORD *)v72 - 2;
        if (*(_DWORD *)v72 != 2)
        {
LABEL_123:
          *(_DWORD *)v72 = v73;
          goto LABEL_124;
        }
        WTF::StringImpl::destroy(v72, a2);
        v72 = v218[0];
        v218[0] = 0;
        if (v72)
        {
          v73 = *(_DWORD *)v72 - 2;
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::destroy(v72, a2);
            goto LABEL_124;
          }
          goto LABEL_123;
        }
      }
    }
  }
LABEL_124:
  v75 = (WTF::StringImpl **)((char *)this + 152);
  v74 = *((_QWORD *)this + 19);
  if (v74)
  {
    v76 = *(unsigned int *)(v74 + 4);
    if ((_DWORD)v76)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v74 + 8), v76 | ((unint64_t)((*(_DWORD *)(v74 + 16) >> 2) & 1) << 32), v218);
      v77 = v218[0];
      v218[0] = 0;
      v78 = *v75;
      *v75 = v77;
      if (v78)
      {
        v79 = *(_DWORD *)v78 - 2;
        if (*(_DWORD *)v78 != 2)
        {
LABEL_130:
          *(_DWORD *)v78 = v79;
          goto LABEL_131;
        }
        WTF::StringImpl::destroy(v78, a2);
        v78 = v218[0];
        v218[0] = 0;
        if (v78)
        {
          v79 = *(_DWORD *)v78 - 2;
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::destroy(v78, a2);
            goto LABEL_131;
          }
          goto LABEL_130;
        }
      }
    }
  }
LABEL_131:
  v80 = *((_QWORD *)this + 12);
  v205 = (WTF::StringImpl **)((char *)this + 96);
  if (v80)
  {
    v81 = *(unsigned int *)(v80 + 4);
    if ((_DWORD)v81)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v80 + 8), v81 | ((unint64_t)((*(_DWORD *)(v80 + 16) >> 2) & 1) << 32), v218);
      v82 = v218[0];
      v218[0] = 0;
      v83 = *v205;
      *v205 = v82;
      if (v83)
      {
        v84 = *(_DWORD *)v83 - 2;
        if (*(_DWORD *)v83 != 2)
        {
LABEL_137:
          *(_DWORD *)v83 = v84;
          goto LABEL_138;
        }
        WTF::StringImpl::destroy(v83, a2);
        v83 = v218[0];
        v218[0] = 0;
        if (v83)
        {
          v84 = *(_DWORD *)v83 - 2;
          if (*(_DWORD *)v83 == 2)
          {
            WTF::StringImpl::destroy(v83, a2);
            goto LABEL_138;
          }
          goto LABEL_137;
        }
      }
    }
  }
LABEL_138:
  v85 = *((_QWORD *)this + 6);
  v204 = (WTF::StringImpl **)((char *)this + 48);
  if (v85)
  {
    v86 = *(unsigned int *)(v85 + 4);
    if ((_DWORD)v86)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v85 + 8), v86 | ((unint64_t)((*(_DWORD *)(v85 + 16) >> 2) & 1) << 32), v218);
      v87 = v218[0];
      v218[0] = 0;
      v88 = *v204;
      *v204 = v87;
      if (v88)
      {
        v89 = *(_DWORD *)v88 - 2;
        if (*(_DWORD *)v88 != 2)
        {
LABEL_144:
          *(_DWORD *)v88 = v89;
          goto LABEL_145;
        }
        WTF::StringImpl::destroy(v88, a2);
        v88 = v218[0];
        v218[0] = 0;
        if (v88)
        {
          v89 = *(_DWORD *)v88 - 2;
          if (*(_DWORD *)v88 == 2)
          {
            WTF::StringImpl::destroy(v88, a2);
            goto LABEL_145;
          }
          goto LABEL_144;
        }
      }
    }
  }
LABEL_145:
  v90 = *((_QWORD *)this + 10);
  v203 = (WTF::StringImpl **)((char *)this + 80);
  if (v90)
  {
    v91 = *(unsigned int *)(v90 + 4);
    if ((_DWORD)v91)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v90 + 8), v91 | ((unint64_t)((*(_DWORD *)(v90 + 16) >> 2) & 1) << 32), v218);
      v92 = v218[0];
      v218[0] = 0;
      v93 = *v203;
      *v203 = v92;
      if (v93)
      {
        v94 = *(_DWORD *)v93 - 2;
        if (*(_DWORD *)v93 != 2)
        {
LABEL_151:
          *(_DWORD *)v93 = v94;
          goto LABEL_152;
        }
        WTF::StringImpl::destroy(v93, a2);
        v93 = v218[0];
        v218[0] = 0;
        if (v93)
        {
          v94 = *(_DWORD *)v93 - 2;
          if (*(_DWORD *)v93 == 2)
          {
            WTF::StringImpl::destroy(v93, a2);
            goto LABEL_152;
          }
          goto LABEL_151;
        }
      }
    }
  }
LABEL_152:
  v96 = (WTF::StringImpl **)((char *)this + 72);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v97 = *(unsigned int *)(v95 + 4);
    if ((_DWORD)v97)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v95 + 8), v97 | ((unint64_t)((*(_DWORD *)(v95 + 16) >> 2) & 1) << 32), v218);
      v98 = v218[0];
      v218[0] = 0;
      v99 = *v96;
      *v96 = v98;
      if (v99)
      {
        v100 = *(_DWORD *)v99 - 2;
        if (*(_DWORD *)v99 != 2)
        {
LABEL_158:
          *(_DWORD *)v99 = v100;
          goto LABEL_159;
        }
        WTF::StringImpl::destroy(v99, a2);
        v99 = v218[0];
        v218[0] = 0;
        if (v99)
        {
          v100 = *(_DWORD *)v99 - 2;
          if (*(_DWORD *)v99 == 2)
          {
            WTF::StringImpl::destroy(v99, a2);
            goto LABEL_159;
          }
          goto LABEL_158;
        }
      }
    }
  }
LABEL_159:
  v101 = *((_QWORD *)this + 18);
  v202 = (WTF::StringImpl **)((char *)this + 144);
  if (v101)
  {
    v102 = *(unsigned int *)(v101 + 4);
    if ((_DWORD)v102)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v101 + 8), v102 | ((unint64_t)((*(_DWORD *)(v101 + 16) >> 2) & 1) << 32), v218);
      v103 = v218[0];
      v218[0] = 0;
      v104 = *v202;
      *v202 = v103;
      if (v104)
      {
        v105 = *(_DWORD *)v104 - 2;
        if (*(_DWORD *)v104 != 2)
        {
LABEL_165:
          *(_DWORD *)v104 = v105;
          goto LABEL_166;
        }
        WTF::StringImpl::destroy(v104, a2);
        v104 = v218[0];
        v218[0] = 0;
        if (v104)
        {
          v105 = *(_DWORD *)v104 - 2;
          if (*(_DWORD *)v104 == 2)
          {
            WTF::StringImpl::destroy(v104, a2);
            goto LABEL_166;
          }
          goto LABEL_165;
        }
      }
    }
  }
LABEL_166:
  v106 = *v96;
  if (*v96)
  {
    v107 = *((unsigned int *)v106 + 1);
    if ((_DWORD)v107)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*((_QWORD *)v106 + 1), v107 | ((unint64_t)((*((_DWORD *)v106 + 4) >> 2) & 1) << 32), v218);
      v108 = v218[0];
      v218[0] = 0;
      v109 = *v96;
      *v96 = v108;
      if (v109)
      {
        v110 = *(_DWORD *)v109 - 2;
        if (*(_DWORD *)v109 != 2)
        {
LABEL_172:
          *(_DWORD *)v109 = v110;
          goto LABEL_173;
        }
        WTF::StringImpl::destroy(v109, a2);
        v109 = v218[0];
        v218[0] = 0;
        if (v109)
        {
          v110 = *(_DWORD *)v109 - 2;
          if (*(_DWORD *)v109 == 2)
          {
            WTF::StringImpl::destroy(v109, a2);
            goto LABEL_173;
          }
          goto LABEL_172;
        }
      }
    }
  }
LABEL_173:
  v112 = (WTF::StringImpl **)((char *)this + 168);
  v111 = *((_QWORD *)this + 21);
  if (v111)
  {
    v113 = *(unsigned int *)(v111 + 4);
    if ((_DWORD)v113)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(_QWORD *)(v111 + 8), v113 | ((unint64_t)((*(_DWORD *)(v111 + 16) >> 2) & 1) << 32), v218);
      v114 = v218[0];
      v218[0] = 0;
      v115 = *v112;
      *v112 = v114;
      if (v115)
      {
        v116 = *(_DWORD *)v115 - 2;
        if (*(_DWORD *)v115 != 2)
        {
LABEL_179:
          *(_DWORD *)v115 = v116;
          goto LABEL_180;
        }
        WTF::StringImpl::destroy(v115, a2);
        v115 = v218[0];
        v218[0] = 0;
        if (v115)
        {
          v116 = *(_DWORD *)v115 - 2;
          if (*(_DWORD *)v115 == 2)
          {
            WTF::StringImpl::destroy(v115, a2);
            goto LABEL_180;
          }
          goto LABEL_179;
        }
      }
    }
  }
LABEL_180:
  v118 = (WTF::FileSystemImpl *)((char *)this + 56);
  v117 = *((_QWORD *)this + 7);
  if (v117 && *(_DWORD *)(v117 + 4))
  {
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)((char *)this + 56), a2);
    if (v226[0])
    {
      v119 = *(_QWORD *)(v226[0] + 8);
      v120 = *(unsigned int *)(v226[0] + 4) | ((unint64_t)((*(_DWORD *)(v226[0] + 16) >> 2) & 1) << 32);
    }
    else
    {
      v119 = 0;
      v120 = 0x100000000;
    }
    WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v119, v120, v218);
    v122 = (WTF::StringImpl *)v226[0];
    v226[0] = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
        WTF::StringImpl::destroy(v122, v121);
      else
        *(_DWORD *)v122 -= 2;
    }
    WTF::FileSystemImpl::pathFileName(v118, v121);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v124 = v226[0];
    v226[0] = 0;
    v125 = *(WTF::StringImpl **)v118;
    *(_QWORD *)v118 = v124;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
      {
        WTF::StringImpl::destroy(v125, v123);
        v126 = (WTF::StringImpl *)v226[0];
        v226[0] = 0;
        if (v126)
        {
          if (*(_DWORD *)v126 == 2)
            WTF::StringImpl::destroy(v126, v123);
          else
            *(_DWORD *)v126 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v125 -= 2;
        v226[0] = 0;
      }
    }
    v127 = v216;
    v216 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2)
        WTF::StringImpl::destroy(v127, v123);
      else
        *(_DWORD *)v127 -= 2;
    }
    v128 = v218[0];
    v218[0] = 0;
    if (v128)
    {
      if (*(_DWORD *)v128 == 2)
        WTF::StringImpl::destroy(v128, v123);
      else
        *(_DWORD *)v128 -= 2;
    }
  }
  if (*((_BYTE *)this + 176))
  {
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v216, (_DWORD **)v218, 3uLL);
    v129 = v216;
    v201 = v217;
    v216 = 0;
    v217 = 0;
    v226[0] = v129;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v216, v130);
    for (i = 2; i != -1; --i)
    {
      v133 = v218[i];
      v218[i] = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
          WTF::StringImpl::destroy(v133, v131);
        else
          *(_DWORD *)v133 -= 2;
      }
    }
  }
  else
  {
    v129 = 0;
    v201 = 0;
  }
  v134 = *(_QWORD *)(v5 + 280);
  (*(void (**)(uint64_t))(*(_QWORD *)v134 + 48))(v134);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v226[0] = 0;
  v218[3] = v129;
  v226[1] = 0;
  v218[4] = v201;
  v135 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v135 = off_1E34DF580;
  *(WTF::StringImpl **)(v135 + 8) = v218[0];
  *(WTF::StringImpl **)(v135 + 16) = v218[1];
  *(WTF::StringImpl **)(v135 + 24) = v218[2];
  v136 = v218[3];
  memset(v218, 0, 32);
  *(_QWORD *)(v135 + 32) = v136;
  v137 = v218[4];
  v218[4] = 0;
  *(_QWORD *)(v135 + 40) = v137;
  v216 = (WTF::StringImpl *)v135;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v134 + 32))(v134, &v216);
  v139 = v216;
  v216 = 0;
  if (v139)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v139 + 8))(v139);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v218[3], v138);
  v141 = v218[2];
  v218[2] = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
      WTF::StringImpl::destroy(v141, v140);
    else
      *(_DWORD *)v141 -= 2;
  }
  v142 = v218[1];
  v218[1] = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, v140);
    else
      *(_DWORD *)v142 -= 2;
  }
  v143 = v218[0];
  v218[0] = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
      WTF::StringImpl::destroy(v143, v140);
    else
      *(_DWORD *)v143 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v134 + 56))(v134);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v226, v144);
  v145 = (unsigned __int8 *)(v5 + 32);
  if (__ldaxr((unsigned __int8 *)(v5 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v145))
  {
    goto LABEL_245;
  }
  MEMORY[0x19AEABB3C](v5 + 32);
LABEL_245:
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v148 = *(unsigned __int8 *)(v5 + 192);
  v149 = v218[0];
  v218[0] = 0;
  if (v148)
  {
    v150 = *(WTF::StringImpl **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v149;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, v147);
      else
        *(_DWORD *)v150 -= 2;
    }
    v160 = v218[1];
    v218[1] = 0;
    v161 = *(WTF::StringImpl **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = v160;
    if (v161)
    {
      if (*(_DWORD *)v161 == 2)
        WTF::StringImpl::destroy(v161, v147);
      else
        *(_DWORD *)v161 -= 2;
    }
    v162 = v218[2];
    v218[2] = 0;
    v163 = *(WTF::StringImpl **)(v5 + 56);
    *(_QWORD *)(v5 + 56) = v162;
    if (v163)
    {
      if (*(_DWORD *)v163 == 2)
        WTF::StringImpl::destroy(v163, v147);
      else
        *(_DWORD *)v163 -= 2;
    }
    v164 = v218[3];
    v218[3] = 0;
    v165 = *(WTF::StringImpl **)(v5 + 64);
    *(_QWORD *)(v5 + 64) = v164;
    if (v165)
    {
      if (*(_DWORD *)v165 == 2)
        WTF::StringImpl::destroy(v165, v147);
      else
        *(_DWORD *)v165 -= 2;
    }
    v166 = v218[4];
    v218[4] = 0;
    v167 = *(WTF::StringImpl **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = v166;
    if (v167)
    {
      if (*(_DWORD *)v167 == 2)
        WTF::StringImpl::destroy(v167, v147);
      else
        *(_DWORD *)v167 -= 2;
    }
    v168 = v219;
    *(_QWORD *)&v219 = 0;
    v169 = *(WTF::StringImpl **)(v5 + 80);
    *(_QWORD *)(v5 + 80) = v168;
    if (v169)
    {
      if (*(_DWORD *)v169 == 2)
        WTF::StringImpl::destroy(v169, v147);
      else
        *(_DWORD *)v169 -= 2;
    }
    v170 = *((_QWORD *)&v219 + 1);
    *((_QWORD *)&v219 + 1) = 0;
    v171 = *(WTF::StringImpl **)(v5 + 88);
    *(_QWORD *)(v5 + 88) = v170;
    if (v171)
    {
      if (*(_DWORD *)v171 == 2)
        WTF::StringImpl::destroy(v171, v147);
      else
        *(_DWORD *)v171 -= 2;
    }
    v172 = v220;
    *(_QWORD *)&v220 = 0;
    v173 = *(WTF::StringImpl **)(v5 + 96);
    *(_QWORD *)(v5 + 96) = v172;
    if (v173)
    {
      if (*(_DWORD *)v173 == 2)
        WTF::StringImpl::destroy(v173, v147);
      else
        *(_DWORD *)v173 -= 2;
    }
    v174 = *((_QWORD *)&v220 + 1);
    *((_QWORD *)&v220 + 1) = 0;
    v175 = *(WTF::StringImpl **)(v5 + 104);
    *(_QWORD *)(v5 + 104) = v174;
    if (v175)
    {
      if (*(_DWORD *)v175 == 2)
        WTF::StringImpl::destroy(v175, v147);
      else
        *(_DWORD *)v175 -= 2;
    }
    v176 = v221;
    *(_QWORD *)&v221 = 0;
    v177 = *(WTF::StringImpl **)(v5 + 112);
    *(_QWORD *)(v5 + 112) = v176;
    if (v177)
    {
      if (*(_DWORD *)v177 == 2)
        WTF::StringImpl::destroy(v177, v147);
      else
        *(_DWORD *)v177 -= 2;
    }
    v178 = *((_QWORD *)&v221 + 1);
    *((_QWORD *)&v221 + 1) = 0;
    v179 = *(WTF::StringImpl **)(v5 + 120);
    *(_QWORD *)(v5 + 120) = v178;
    if (v179)
    {
      if (*(_DWORD *)v179 == 2)
        WTF::StringImpl::destroy(v179, v147);
      else
        *(_DWORD *)v179 -= 2;
    }
    v180 = v222;
    *(_QWORD *)&v222 = 0;
    v181 = *(WTF::StringImpl **)(v5 + 128);
    *(_QWORD *)(v5 + 128) = v180;
    if (v181)
    {
      if (*(_DWORD *)v181 == 2)
        WTF::StringImpl::destroy(v181, v147);
      else
        *(_DWORD *)v181 -= 2;
    }
    v182 = *((_QWORD *)&v222 + 1);
    *((_QWORD *)&v222 + 1) = 0;
    v183 = *(WTF::StringImpl **)(v5 + 136);
    *(_QWORD *)(v5 + 136) = v182;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2)
        WTF::StringImpl::destroy(v183, v147);
      else
        *(_DWORD *)v183 -= 2;
    }
    v184 = v223;
    *(_QWORD *)&v223 = 0;
    v185 = *(WTF::StringImpl **)(v5 + 144);
    *(_QWORD *)(v5 + 144) = v184;
    if (v185)
    {
      if (*(_DWORD *)v185 == 2)
        WTF::StringImpl::destroy(v185, v147);
      else
        *(_DWORD *)v185 -= 2;
    }
    v186 = *((_QWORD *)&v223 + 1);
    *((_QWORD *)&v223 + 1) = 0;
    v187 = *(WTF::StringImpl **)(v5 + 152);
    *(_QWORD *)(v5 + 152) = v186;
    if (v187)
    {
      if (*(_DWORD *)v187 == 2)
        WTF::StringImpl::destroy(v187, v147);
      else
        *(_DWORD *)v187 -= 2;
    }
    v188 = v224;
    *(_QWORD *)&v224 = 0;
    v189 = *(WTF::StringImpl **)(v5 + 160);
    *(_QWORD *)(v5 + 160) = v188;
    if (v189)
    {
      if (*(_DWORD *)v189 == 2)
        WTF::StringImpl::destroy(v189, v147);
      else
        *(_DWORD *)v189 -= 2;
    }
    v190 = *((_QWORD *)&v224 + 1);
    *((_QWORD *)&v224 + 1) = 0;
    v191 = *(WTF::StringImpl **)(v5 + 168);
    *(_QWORD *)(v5 + 168) = v190;
    if (v191)
    {
      if (*(_DWORD *)v191 == 2)
        WTF::StringImpl::destroy(v191, v147);
      else
        *(_DWORD *)v191 -= 2;
    }
    v192 = v225;
    *(_QWORD *)&v225 = 0;
    v193 = *(WTF::StringImpl **)(v5 + 176);
    *(_QWORD *)(v5 + 176) = v192;
    if (v193)
    {
      if (*(_DWORD *)v193 == 2)
        WTF::StringImpl::destroy(v193, v147);
      else
        *(_DWORD *)v193 -= 2;
    }
    v194 = *((_QWORD *)&v225 + 1);
    *((_QWORD *)&v225 + 1) = 0;
    v195 = *(WTF::StringImpl **)(v5 + 184);
    *(_QWORD *)(v5 + 184) = v194;
    if (v195)
    {
      if (*(_DWORD *)v195 == 2)
        WTF::StringImpl::destroy(v195, v147);
      else
        *(_DWORD *)v195 -= 2;
    }
  }
  else
  {
    *(_QWORD *)(v5 + 40) = v149;
    v151 = *(_OWORD *)&v218[1];
    memset(&v218[1], 0, 32);
    v152 = *(_OWORD *)&v218[3];
    *(_OWORD *)(v5 + 48) = v151;
    *(_OWORD *)(v5 + 64) = v152;
    v153 = v219;
    v219 = 0u;
    v154 = v220;
    v220 = 0u;
    *(_OWORD *)(v5 + 80) = v153;
    *(_OWORD *)(v5 + 96) = v154;
    v155 = v221;
    v221 = 0u;
    v156 = v222;
    v222 = 0u;
    *(_OWORD *)(v5 + 112) = v155;
    *(_OWORD *)(v5 + 128) = v156;
    v157 = v223;
    v223 = 0u;
    v158 = v224;
    v224 = 0u;
    *(_OWORD *)(v5 + 144) = v157;
    *(_OWORD *)(v5 + 160) = v158;
    v159 = v225;
    v225 = 0u;
    *(_OWORD *)(v5 + 176) = v159;
    *(_BYTE *)(v5 + 192) = 1;
  }
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)v218, v147);
  *(_QWORD *)(v5 + 200) = v206;
  v196 = WTF::Condition::notifyOne((WTF::Condition *)(v5 + 33));
  v197 = __ldxr(v145);
  if (v197 != 1)
  {
    __clrex();
    goto LABEL_327;
  }
  if (__stlxr(0, v145))
LABEL_327:
    v196 = WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 32));
  WTF::RunLoop::main((WTF::RunLoop *)v196);
  v198 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  v199 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v199 = &off_1E34DF558;
  *((_QWORD *)v199 + 1) = v198;
  v218[0] = v199;
  WTF::RunLoop::dispatch();
  result = v218[0];
  v218[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DF558;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF558;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::handleResolvedDirectoriesAsynchronously(WebKit::WebsiteDataStoreConfiguration::Directories const&,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = off_1E34DF580;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::handleResolvedDirectoriesAsynchronously(WebKit::WebsiteDataStoreConfiguration::Directories const&,BOOL)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = off_1E34DF580;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::handleResolvedDirectoriesAsynchronously(WebKit::WebsiteDataStoreConfiguration::Directories const&,BOOL)::$_0,void>::call(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::FileSystemImpl *v4;
  void *v5;
  WTF::StringImpl *v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WTF *v31;
  void *v32;
  void *v33;
  WTF *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  double v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  WebCore::ApplicationCacheStorage *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  const WTF::String *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  const WTF::String *v58;
  const WTF::String *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::FileSystemImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  char v65;

  v2 = this;
  v4 = (WTF::FileSystemImpl *)(this + 8);
  v3 = *(_QWORD *)(this + 8);
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    WebCore::DatabaseTracker::trackerWithDatabasePath((WebCore::DatabaseTracker *)(this + 8), a2);
    WebCore::DatabaseTracker::deleteAllDatabasesImmediately(v64);
    v6 = v64;
    v64 = 0;
    if (v6)
    {
      v7 = (WebCore::SecurityOriginData *)*((_QWORD *)v6 + 16);
      if (v7)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v7, v5);
      v8 = *((_QWORD *)v6 + 15);
      if (v8)
      {
        v9 = *(unsigned int *)(v8 - 4);
        if ((_DWORD)v9)
        {
          v10 = *((_QWORD *)v6 + 15);
          do
          {
            v11.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v10);
            if ((v12 & 1) == 0)
            {
              v13 = *(WTF::StringImpl ***)(v10 + 32);
              if (v13)
                WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v13, (WTF::StringImpl *)*(unsigned int *)(v10 + 40));
              v14 = *(unsigned int *)(v10 + 24);
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v14])(&v65, v10, v11);
              *(_DWORD *)(v10 + 24) = -1;
            }
            v10 += 56;
            --v9;
          }
          while (v9);
        }
        WTF::fastFree((WTF *)(v8 - 16), v5);
      }
      v15 = *((_QWORD *)v6 + 14);
      if (v15)
      {
        v16 = *(unsigned int *)(v15 - 4);
        if ((_DWORD)v16)
        {
          v17 = *((_QWORD *)v6 + 14);
          do
          {
            v18.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v17);
            if ((v19 & 1) == 0)
            {
              v20 = *(WTF::StringImpl ***)(v17 + 32);
              if (v20)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, (WTF::StringImpl *)v5);
              v21 = *(unsigned int *)(v17 + 24);
              if ((_DWORD)v21 != -1)
                ((void (*)(char *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v21])(&v65, v17, v18);
              *(_DWORD *)(v17 + 24) = -1;
            }
            v17 += 40;
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((WTF *)(v15 - 16), v5);
      }
      v22 = (WTF::StringImpl *)*((_QWORD *)v6 + 12);
      *((_QWORD *)v6 + 12) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *((_QWORD *)v6 + 11);
      if (v23)
      {
        v24 = *(unsigned int *)(v23 - 4);
        if ((_DWORD)v24)
        {
          for (i = 0; i != v24; ++i)
          {
            v26 = v23 + 16 * i;
            v27 = *(WTF::StringImpl **)v26;
            if (*(_QWORD *)v26 != -1)
            {
              v28 = *(unsigned int **)(v26 + 8);
              *(_QWORD *)(v26 + 8) = 0;
              if (v28)
              {
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                {
                  atomic_store(1u, v28);
                  WebCore::OriginLock::~OriginLock((WebCore::OriginLock *)v28);
                  WTF::fastFree(v31, v32);
                }
                v27 = *(WTF::StringImpl **)v26;
              }
              *(_QWORD *)v26 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v5);
                else
                  *(_DWORD *)v27 -= 2;
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v23 - 16), v5);
      }
      WebCore::SQLiteDatabase::~SQLiteDatabase((WTF::StringImpl *)((char *)v6 + 24));
      v34 = (WTF *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v34)
      {
        v35 = *(unsigned int **)v34;
        if (*(_QWORD *)v34)
        {
          v36 = *(v35 - 1);
          if ((_DWORD)v36)
          {
            v37 = *(unsigned int **)v34;
            do
            {
              v38 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v37);
              if ((v39 & 1) == 0)
              {
                v40 = v37[6];
                if ((_DWORD)v40 != -1)
                  ((void (*)(char *, unsigned int *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v40])(&v65, v37, v38);
                v37[6] = -1;
              }
              v37 += 10;
              --v36;
            }
            while (v36);
          }
          WTF::fastFree((WTF *)(v35 - 4), v33);
        }
        WTF::fastFree(v34, v33);
      }
      WTF::fastFree(v6, v33);
    }
    this = WTF::FileSystemImpl::deleteEmptyDirectory(v4, (const WTF::String *)v5);
  }
  v41 = *(_QWORD *)(v2 + 16);
  if (v41 && *(_DWORD *)(v41 + 4))
  {
    v42 = v2 + 24;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x88);
    v44 = (WebCore::ApplicationCacheStorage *)MEMORY[0x19AEB264C](v43, v2 + 16, v2 + 24);
    WebCore::ApplicationCacheStorage::deleteAllCaches(v44);
    if (*(_DWORD *)v43 == 1)
    {
      v46 = v43[16];
      if (v46)
      {
        v47 = *(unsigned int *)(v46 - 4);
        if ((_DWORD)v47)
        {
          v48 = (WTF::StringImpl **)v43[16];
          do
          {
            v49 = *v48;
            if (*v48 != (WTF::StringImpl *)-1)
            {
              *v48 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v45);
                else
                  *(_DWORD *)v49 -= 2;
              }
            }
            v48 += 2;
            --v47;
          }
          while (v47);
        }
        WTF::fastFree((WTF *)(v46 - 16), v45);
      }
      v50 = v43[15];
      if (v50)
        WTF::fastFree((WTF *)(v50 - 16), v45);
      WebCore::SQLiteDatabase::~SQLiteDatabase((WebCore::SQLiteDatabase *)(v43 + 7));
      v52 = (WTF::StringImpl *)v43[3];
      v43[3] = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v51);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = (WTF::StringImpl *)v43[2];
      v43[2] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v51);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = (WTF::StringImpl *)v43[1];
      v43[1] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v51);
        else
          *(_DWORD *)v54 -= 2;
      }
      WTF::fastFree((WTF *)v43, v51);
    }
    else
    {
      --*(_DWORD *)v43;
    }
    if (*(_QWORD *)v42)
    {
      if (*(_DWORD *)(*(_QWORD *)v42 + 4))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v64, v55);
        v57 = v64;
        v64 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v56);
          else
            *(_DWORD *)v57 -= 2;
        }
      }
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebCore::SQLiteFileSystem::deleteDatabaseFile((WebCore::SQLiteFileSystem *)&v64, v58);
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v2 + 16), v59);
    this = (uint64_t)v64;
    v64 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v60);
      else
        *(_DWORD *)this -= 2;
    }
  }
  v61 = *(unsigned int *)(v2 + 44);
  if ((_DWORD)v61)
  {
    v62 = *(WTF::FileSystemImpl **)(v2 + 32);
    v63 = 8 * v61;
    do
    {
      this = WTF::FileSystemImpl::setExcludedFromBackup(v62, (const WTF::String *)1);
      v62 = (WTF::FileSystemImpl *)((char *)v62 + 8);
      v63 -= 8;
    }
    while (v63);
  }
  return this;
}

WTF::WorkQueue *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(WTF::WorkQueue *result)
{
  WTF *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::WorkQueue *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::SecurityOriginData **v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl **v23;
  WebCore::SecurityOriginData *v24;
  WebCore::SecurityOriginData *v25;
  WebCore::SecurityOriginData *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::SecurityOriginData *v29;
  int v30;
  WebCore::SecurityOriginData *v31;
  unsigned int v32;
  unsigned int v33;
  char *v35;
  _QWORD *v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  WebCore::SecurityOriginData *v41;
  WebCore::SecurityOriginData *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WebKit::WebsiteDataRecord *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::WorkQueue *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  WebCore::SecurityOriginData *v69[2];
  __int128 v70;
  WTF::StringImpl **v71;
  _BYTE v72[24];
  _BYTE v73[24];
  int v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v1 = (WTF *)*((_QWORD *)result + 1);
  if (!v1)
    return result;
  v62 = 0;
  v63 = 0;
  v2 = *((_QWORD *)v1 + 3);
  if (!v2)
  {
    v7 = 0;
    v6 = 0;
    v5 = 0;
    goto LABEL_80;
  }
  v3 = *(unsigned int *)(v2 - 12);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    v4 = 80 * v3;
    result = (WTF::WorkQueue *)WTF::fastMalloc((WTF *)(80 * v3));
    v5 = result;
    v6 = (v4 & 0xFFFFFFF0) / 0x50;
    LODWORD(v63) = v6;
    v62 = result;
    v2 = *((_QWORD *)v1 + 3);
    if (!v2)
      goto LABEL_79;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_79;
  v8 = *(_DWORD *)(v2 - 4);
  v9 = v2;
  if (v8)
  {
    v10 = 88 * v8;
    v9 = v2;
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 88;
      v10 -= 88;
      if (!v10)
        goto LABEL_79;
    }
  }
  v11 = v2 + 88 * v8;
  if (v11 == v9)
  {
LABEL_79:
    v7 = 0;
    goto LABEL_80;
  }
  v7 = 0;
LABEL_17:
  v12 = *((_QWORD *)v1 + 1);
  if (v12 == WTF::WorkQueue::main(result))
  {
    v17 = *(WTF::StringImpl **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    v18 = *(_DWORD *)(v9 + 16);
    LODWORD(v65) = v18;
    LOBYTE(v66) = 0;
    v68 = 0;
    if (*(_BYTE *)(v9 + 40))
    {
      v19 = *(_QWORD *)(v9 + 24);
      v20 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      v66 = v19;
      v67 = v20;
      v68 = 1;
    }
    v21 = *(_OWORD *)(v9 + 48);
    v22 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)v69 = v21;
    v70 = v22;
    v23 = *(WTF::StringImpl ***)(v9 + 80);
    *(_QWORD *)(v9 + 80) = 0;
    v71 = v23;
    goto LABEL_56;
  }
  WTF::String::isolatedCopy();
  LODWORD(v65) = *(_DWORD *)(v9 + 16);
  LOBYTE(v66) = 0;
  v68 = 0;
  if (*(_BYTE *)(v9 + 40))
  {
    v66 = *(_QWORD *)(v9 + 24);
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable(&v67, (_DWORD **)(v9 + 32));
    v68 = 1;
  }
  v15 = (WebCore::SecurityOriginData **)(v9 + 48);
  v14 = *(_QWORD *)(v9 + 48);
  v69[0] = 0;
  if (v14)
    v16 = *(_DWORD *)(v14 - 12);
  else
    v16 = 0;
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reserveInitialCapacity(v69, v16);
  while (*v15 && *((_DWORD *)*v15 - 3))
  {
    v24 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v9 + 48));
    v25 = v24;
    v26 = *v15;
    if (*v15)
      v26 = (WebCore::SecurityOriginData *)((char *)v26 + 32 * *((unsigned int *)v26 - 1));
    if (v26 == v24)
    {
      v75 = 0u;
      v76 = 0u;
      v73[0] = 0;
      v74 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v73, (uint64_t)&v75);
      if (DWORD2(v76) != -1)
        ((void (*)(_BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[DWORD2(v76)])(v72, &v75);
    }
    else
    {
      v73[0] = 0;
      v74 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v73, (uint64_t)v24);
      if (*v15)
      {
        v27 = (uint64_t)*v15 + 32 * *((unsigned int *)*v15 - 1);
        if ((WebCore::SecurityOriginData *)v27 == v25)
          goto LABEL_51;
      }
      else
      {
        if (!v25)
          goto LABEL_51;
        v27 = 0;
      }
      if ((WebCore::SecurityOriginData *)v27 != v25)
      {
        v28 = *((unsigned int *)v25 + 6);
        if ((_DWORD)v28 != -1)
          ((void (*)(__int128 *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v28])(&v75, v25);
        *(_QWORD *)v25 = -1;
        *((_QWORD *)v25 + 1) = 0;
        *((_DWORD *)v25 + 4) = 0;
        *((_DWORD *)v25 + 6) = 0;
        ++*((_DWORD *)*v15 - 4);
        v29 = *v15;
        if (*v15)
          v30 = *((_DWORD *)v29 - 3) - 1;
        else
          v30 = -1;
        *((_DWORD *)v29 - 3) = v30;
        v31 = *v15;
        if (*v15)
        {
          v32 = 6 * *((_DWORD *)v31 - 3);
          v33 = *((_DWORD *)v31 - 1);
          if (v32 < v33 && v33 >= 9)
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)(v9 + 48), v33 >> 1, 0);
        }
      }
    }
LABEL_51:
    WebCore::SecurityOriginData::isolatedCopy();
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)v69, (uint64_t)&v75, (uint64_t)v72);
    if (DWORD2(v76) != -1)
      ((void (*)(_BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[DWORD2(v76)])(v72, &v75);
    DWORD2(v76) = -1;
    if (v74 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v74])(v72, v73);
  }
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 56), (uint64_t *)&v69[1]);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 64), (uint64_t *)&v70);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 72), (uint64_t *)&v70 + 1);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)(v9 + 80), (uint64_t *)&v71);
  v7 = HIDWORD(v63);
  v5 = v62;
  v17 = v64;
  v18 = v65;
LABEL_56:
  v35 = (char *)v5 + 80 * v7;
  v64 = 0;
  *(_QWORD *)v35 = v17;
  *((_DWORD *)v35 + 2) = v18;
  v35[16] = 0;
  v36 = v35 + 16;
  v35[32] = 0;
  v37 = v35 + 32;
  if (v68)
  {
    *v36 = v66;
    v38 = (char *)v5 + 80 * v7;
    *((_QWORD *)v38 + 3) = 0;
    v39 = v67;
    v67 = 0;
    *((_QWORD *)v38 + 3) = v39;
    *v37 = 1;
  }
  v40 = (_QWORD *)((char *)v5 + 80 * v7);
  v40[5] = 0;
  v41 = v69[0];
  v69[0] = 0;
  v40[5] = v41;
  v40[6] = 0;
  v42 = v69[1];
  v69[1] = 0;
  v40[6] = v42;
  v40[7] = 0;
  v43 = v70;
  *(_QWORD *)&v70 = 0;
  v40[7] = v43;
  v40[8] = 0;
  v44 = *((_QWORD *)&v70 + 1);
  *((_QWORD *)&v70 + 1) = 0;
  v40[8] = v44;
  v40[9] = 0;
  v45 = v71;
  v71 = 0;
  v40[9] = v45;
  v7 = ++HIDWORD(v63);
  if (v71)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v71, v13);
  if (*((_QWORD *)&v70 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v70 + 1), v13);
  if ((_QWORD)v70)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v70, v13);
  if (v69[1])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v69[1], v13);
  if (v69[0])
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v69[0], v13);
  if (v68 && v67)
    WTF::fastFree((WTF *)(v67 - 16), v13);
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::WorkQueue *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  while (1)
  {
    v9 += 88;
    if (v9 == v11)
      break;
    if ((unint64_t)(*(_QWORD *)v9 + 1) > 1)
    {
      if (v9 != v11)
        goto LABEL_17;
      break;
    }
  }
  v5 = v62;
  v6 = v63;
LABEL_80:
  v46 = *((_QWORD *)v1 + 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
  v47 = *((_QWORD *)v1 + 2);
  *((_QWORD *)v1 + 2) = 0;
  v62 = 0;
  v63 = 0;
  v67 = *(_QWORD *)(*((_QWORD *)v1 + 4) + 24);
  v48 = v67;
  v49 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v49 = off_1E34DF5D0;
  *(_QWORD *)(v49 + 8) = v47;
  v64 = 0;
  v65 = 0;
  *(_QWORD *)(v49 + 16) = v5;
  v66 = 0;
  *(_DWORD *)(v49 + 24) = v6;
  *(_DWORD *)(v49 + 28) = v7;
  *(_QWORD *)(v49 + 32) = v48;
  *(_QWORD *)&v75 = v49;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v46 + 32))(v46, &v75);
  v51 = v75;
  *(_QWORD *)&v75 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v50);
  v52 = v64;
  v64 = 0;
  if (v52)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 8))(v52);
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 56))(v46);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v53);
  v55 = *((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 4) = 0;
  if (v55)
    CFRelease(*(CFTypeRef *)(v55 + 8));
  v56 = *((_QWORD *)v1 + 3);
  if (v56)
  {
    v57 = *(unsigned int *)(v56 - 4);
    if ((_DWORD)v57)
    {
      v58 = (WebKit::WebsiteDataRecord *)(v56 + 8);
      do
      {
        if (*((_QWORD *)v58 - 1) != -1)
        {
          WebKit::WebsiteDataRecord::~WebsiteDataRecord(v58, v54);
          v59 = (WTF::StringImpl *)*((_QWORD *)v58 - 1);
          *((_QWORD *)v58 - 1) = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v54);
            else
              *(_DWORD *)v59 -= 2;
          }
        }
        v58 = (WebKit::WebsiteDataRecord *)((char *)v58 + 88);
        --v57;
      }
      while (v57);
    }
    WTF::fastFree((WTF *)(v56 - 16), v54);
  }
  v60 = *((_QWORD *)v1 + 2);
  *((_QWORD *)v1 + 2) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)v1 + 1);
  *((_QWORD *)v1 + 1) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 56))(v61);
  return (WTF::WorkQueue *)WTF::fastFree(v1, v54);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34DF5D0;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34DF5D0;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[2];
  __int128 buf;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 1;
  v2 = a1[1];
  v3 = v4[1];
  a1[2] = 0;
  v10[0] = 0;
  *(_QWORD *)&buf = v3;
  v10[1] = 0;
  v5 = a1[3];
  a1[3] = 0;
  *((_QWORD *)&buf + 1) = v5;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 16))(v2, &buf);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v6);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  v8 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a1[4];
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::fetchDataAndApply finished fetching data for session %llu", (uint8_t *)&buf, 0xCu);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E34DF5F8;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E34DF5F8;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  WebCore::SecurityOriginData *v9;
  unsigned int v10;
  uint64_t v11;
  __n128 v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  WebCore::SecurityOriginData *v21;
  WTF *v22[2];
  __int128 v23;
  WTF::StringImpl **v24;
  WebCore::SecurityOriginData *v25[2];
  char v26;
  _BYTE v27[24];
  int v28;
  __int128 v29;
  _BYTE v30[24];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  result = MEMORY[0x19AEAF1C0](&v21, a1 + 8);
  v19 = 0;
  v20 = 0;
  if (v21 && (v3 = *((unsigned int *)v21 - 3), (_DWORD)v3))
  {
    if (v3 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v4 = 48 * v3;
    v5 = WTF::fastMalloc((WTF *)(48 * v3));
    LODWORD(v20) = (v4 & 0xFFFFFFF0) / 0x30;
    v19 = (WTF *)v5;
  }
  else
  {
    v5 = 0;
  }
  v6 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)&v21);
  v8 = v6;
  v25[0] = v6;
  v25[1] = v7;
  if (v21)
    v9 = (WebCore::SecurityOriginData *)((char *)v21 + 32 * *((unsigned int *)v21 - 1));
  else
    v9 = 0;
  if (v9 == v6)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v30[0] = 0;
      v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, (uint64_t)v8);
      v27[0] = 0;
      v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, (uint64_t)v30);
      LODWORD(v29) = 2;
      *((_QWORD *)&v29 + 1) = 0;
      if (v31 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v31])(&v26, v30);
      v11 = v5 + 48 * v10;
      *(_BYTE *)v11 = 0;
      *(_DWORD *)(v11 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v27);
      *(_OWORD *)(v11 + 32) = v29;
      if (v28 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v28])(v30, v27);
      v25[0] = (WebCore::SecurityOriginData *)((char *)v25[0] + 32);
      v12.n128_f64[0] = WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v25);
      v8 = v25[0];
      ++v10;
    }
    while (v25[0] != v9);
    v13 = v22[0];
    if (HIDWORD(v22[1]))
    {
      v14 = 48 * HIDWORD(v22[1]);
      v15 = v22[0];
      do
      {
        v16 = *((unsigned int *)v15 + 6);
        if ((_DWORD)v16 != -1)
          ((void (*)(_BYTE *, WTF *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v16])(v27, v15, v12);
        *((_DWORD *)v15 + 6) = -1;
        v15 = (WTF *)((char *)v15 + 48);
        v14 -= 48;
      }
      while (v14);
    }
    if (v13)
      WTF::fastFree(v13, v7);
  }
  v22[0] = v19;
  v17 = v20;
  v19 = 0;
  v20 = 0;
  v22[1] = (WTF *)__PAIR64__(v10, v17);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v7);
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(_QWORD *)(a1 + 16), (uint64_t)v22);
  if (v21)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v21, v18);
  if (v24)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, (WTF::StringImpl *)v18);
  if (*((_QWORD *)&v23 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v23 + 1), (WTF::StringImpl *)v18);
  if ((_QWORD)v23)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v23, (WTF::StringImpl *)v18);
  return (_QWORD *)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v18);
}

unsigned int **WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(uint64_t a1, uint64_t a2)
{
  WTF::RunLoop *v4;
  uint64_t isCurrent;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int **result;
  WTF **v56;
  WTF **v57;
  WTF **v58;
  WTF **v59;
  uint64_t v60;
  WTF **v61;
  uint64_t v62;
  const WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  const WTF::String *v74;
  WTF::StringImpl *v75;
  const WTF::StringImpl *v76;
  const WTF::String *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  const WTF::String *v80;
  WTF::StringImpl *v81;
  const WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  const WTF::String *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t *v91;
  WTF::StringImpl *v92;
  const WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100[2];
  WTF::StringImpl *v101[2];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  WTF::StringImpl **v106;
  uint64_t v107[3];
  WTF::StringImpl *v108;
  WTF::StringImpl *v109[2];

  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  isCurrent = WTF::RunLoop::isCurrent(v4);
  if ((isCurrent & 1) != 0)
  {
    v99 = a2;
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)a2 + 48 * v6;
      do
      {
        v9 = (_QWORD *)WebCore::SecurityOriginData::protocol((WebCore::SecurityOriginData *)v7);
        if (MEMORY[0x19AEABBCC](*v9, "file", 4))
        {
          WebCore::localizedString((WebCore *)CFSTR("Local documents on your computer"), v10);
        }
        else
        {
          v11 = MEMORY[0x19AEABBCC](*v9, "http", 4);
          if ((v11 & 1) == 0)
          {
            v11 = MEMORY[0x19AEABBCC](*v9, "https", 5);
            if (!(_DWORD)v11)
            {
              v100[0] = 0;
              goto LABEL_12;
            }
          }
          WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v11);
          WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)v7);
          WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
        }
        if (v100[0])
          goto LABEL_49;
LABEL_12:
        if (WebKit::allowsWebsiteDataRecordsForAllOrigins == 1)
        {
          v12 = WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)v7);
          if (*(_QWORD *)v12 && *(_DWORD *)(*(_QWORD *)v12 + 4))
          {
            v13 = *(WTF::StringImpl **)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)v7);
            if (v13)
              *(_DWORD *)v13 += 2;
            LOBYTE(v107[0]) = 32;
            v101[0] = v13;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v107, (uint64_t *)v101, (uint64_t *)v109);
            if (!v109[0])
            {
LABEL_220:
              __break(0xC471u);
              JUMPOUT(0x197474A80);
            }
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v14);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
          else
          {
            v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v15 += 2;
            v109[0] = v15;
          }
          v16 = *(WTF::StringImpl **)WebCore::SecurityOriginData::protocol((WebCore::SecurityOriginData *)v7);
          if (v16)
            *(_DWORD *)v16 += 2;
          v17 = v109[0];
          if (v109[0])
            *(_DWORD *)v109[0] += 2;
          v101[0] = v16;
          v107[0] = (uint64_t)v17;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)v101, v107, &v108);
          v19 = v108;
          if (!v108)
            goto LABEL_220;
          v108 = 0;
          v20 = v100[0];
          v100[0] = v19;
          if (v20)
          {
            if (*(_DWORD *)v20 != 2)
            {
              *(_DWORD *)v20 -= 2;
              v108 = 0;
              if (!v17)
                goto LABEL_41;
LABEL_38:
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v18);
              else
                *(_DWORD *)v17 -= 2;
              goto LABEL_41;
            }
            WTF::StringImpl::destroy(v20, v18);
            v21 = v108;
            v108 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
              {
                WTF::StringImpl::destroy(v21, v18);
                if (!v17)
                  goto LABEL_41;
                goto LABEL_38;
              }
              *(_DWORD *)v21 -= 2;
            }
          }
          if (v17)
            goto LABEL_38;
LABEL_41:
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v18);
            else
              *(_DWORD *)v16 -= 2;
          }
          v22 = v109[0];
          v109[0] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v18);
            else
              *(_DWORD *)v22 -= 2;
          }
LABEL_49:
          v101[0] = 0;
          LODWORD(v101[1]) = 0;
          LOBYTE(v102) = 0;
          BYTE8(v103) = 0;
          v104 = 0u;
          v105 = 0u;
          v106 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v107, (uint64_t *)(a1 + 24), v100, (uint64_t)v101);
          v24 = v107[0];
          if (v106)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v23);
          if (*((_QWORD *)&v105 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v23);
          if ((_QWORD)v105)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v105, v23);
          if (*((_QWORD *)&v104 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v104 + 1), v23);
          if ((_QWORD)v104)
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v104, v23);
          if (BYTE8(v103) && (_QWORD)v103)
            WTF::fastFree((WTF *)(v103 - 16), v23);
          v25 = v101[0];
          v101[0] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v23);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (!*(_QWORD *)(v24 + 8))
          {
            v26 = v100[0];
            v100[0] = 0;
            *(_QWORD *)(v24 + 8) = v26;
          }
          *(_DWORD *)(v24 + 16) |= *(_DWORD *)(v7 + 32);
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)(v24 + 48), v7, (uint64_t)v101);
          if ((*(_BYTE *)(a1 + 4) & 1) != 0)
          {
            if (!*(_BYTE *)(v24 + 40))
            {
              *(_QWORD *)(v24 + 24) = 0;
              *(_QWORD *)(v24 + 32) = 0;
              *(_BYTE *)(v24 + 40) = 1;
              v31 = *(_QWORD *)(v7 + 40);
              *(_QWORD *)(v24 + 24) = v31;
              v29 = (uint64_t *)(v24 + 32);
              v32 = *(_DWORD *)(v7 + 32);
              goto LABEL_73;
            }
            v30 = *(_QWORD *)(v24 + 32);
            v29 = (uint64_t *)(v24 + 32);
            v28 = v30;
            v31 = *(_QWORD *)(v7 + 40);
            *(v29 - 1) += v31;
            v32 = *(_DWORD *)(v7 + 32);
            if (v30)
            {
LABEL_74:
              v33 = *(_DWORD *)(v28 - 8);
            }
            else
            {
LABEL_73:
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v29, 0);
              v28 = *v29;
              if (*v29)
                goto LABEL_74;
              v33 = 0;
            }
            v34 = 9 * ((v32 + ~(v32 << 15)) ^ ((v32 + ~(v32 << 15)) >> 10));
            v35 = (v34 ^ (v34 >> 6)) + ~((v34 ^ (v34 >> 6)) << 11);
            v36 = v33 & (v35 ^ HIWORD(v35));
            v27 = (_OWORD *)(v28 + 16 * v36);
            v37 = *(_DWORD *)v27;
            if (!*(_DWORD *)v27)
            {
LABEL_84:
              *(_DWORD *)v27 = v32;
              *((_QWORD *)v27 + 1) = 0;
              v40 = *v29;
              if (*v29)
                v41 = *(_DWORD *)(v40 - 12) + 1;
              else
                v41 = 1;
              *(_DWORD *)(v40 - 12) = v41;
              v42 = *v29;
              if (*v29)
                v43 = *(_DWORD *)(v42 - 12);
              else
                v43 = 0;
              v44 = (*(_DWORD *)(v42 - 16) + v43);
              v45 = *(unsigned int *)(v42 - 4);
              if (v45 > 0x400)
              {
                if (v45 > 2 * v44)
                  goto LABEL_93;
              }
              else if (3 * v45 > 4 * v44)
              {
                goto LABEL_93;
              }
              v27 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v29, v27);
              goto LABEL_93;
            }
            v38 = 0;
            v39 = 1;
            while (v37 != v32)
            {
              if (v37 == -1)
                v38 = v27;
              v36 = (v36 + v39) & v33;
              v27 = (_OWORD *)(v28 + 16 * v36);
              v37 = *(_DWORD *)v27;
              ++v39;
              if (!*(_DWORD *)v27)
              {
                if (v38)
                {
                  *v38 = 0;
                  v38[1] = 0;
                  --*(_DWORD *)(*v29 - 16);
                  v27 = v38;
                }
                goto LABEL_84;
              }
            }
LABEL_93:
            *((_QWORD *)v27 + 1) += v31;
          }
          v46 = v100[0];
          v100[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v27);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
        v7 += 48;
      }
      while (v7 != v8);
    }
    v56 = (WTF **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v99 + 16));
    v57 = v56;
    v59 = v58;
    v60 = *(_QWORD *)(v99 + 16);
    if (v60)
      v61 = (WTF **)(v60 + 8 * *(unsigned int *)(v60 - 4));
    else
      v61 = 0;
    if (v61 != v56)
    {
      v62 = *MEMORY[0x1E0C930D8];
      while (1)
      {
        MEMORY[0x19AEABCC8](v101, v62);
        v65 = WTF::equal(*v57, v101[0], v63);
        v66 = v101[0];
        v101[0] = 0;
        if (!v66)
          goto LABEL_122;
        if (*(_DWORD *)v66 != 2)
          break;
        WTF::StringImpl::destroy(v66, v64);
        if (!v65)
        {
LABEL_125:
          WebKit::WebsiteDataRecord::displayNameForHostName((WebKit::WebsiteDataRecord *)v100, (const WTF::String *)v57);
          goto LABEL_126;
        }
LABEL_123:
        WebCore::localizedString((WebCore *)CFSTR("Local documents on your computer"), (const __CFString *)v64);
LABEL_126:
        if (v100[0])
        {
          v101[0] = 0;
          LODWORD(v101[1]) = 0;
          LOBYTE(v102) = 0;
          BYTE8(v103) = 0;
          v104 = 0u;
          v105 = 0u;
          v106 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v107, (uint64_t *)(a1 + 24), v100, (uint64_t)v101);
          v69 = v107[0];
          if (v106)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v67);
          if (*((_QWORD *)&v105 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v67);
          if ((_QWORD)v105)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v105, v67);
          if (*((_QWORD *)&v104 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v104 + 1), v67);
          if ((_QWORD)v104)
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v104, v67);
          if (BYTE8(v103) && (_QWORD)v103)
            WTF::fastFree((WTF *)(v103 - 16), v67);
          v70 = v101[0];
          v101[0] = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
              WTF::StringImpl::destroy(v70, v67);
            else
              *(_DWORD *)v70 -= 2;
          }
          if (!*(_QWORD *)(v69 + 8))
          {
            v71 = v100[0];
            v100[0] = 0;
            *(_QWORD *)(v69 + 8) = v71;
          }
          *(_DWORD *)(v69 + 16) |= 1u;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v69 + 56), v57, v68, (uint64_t)v101);
          v73 = v100[0];
          v100[0] = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v72);
            else
              *(_DWORD *)v73 -= 2;
          }
        }
        while (++v57 != v59)
        {
          if ((unint64_t)*v57 + 1 > 1)
            goto LABEL_154;
        }
        v57 = v59;
LABEL_154:
        if (v57 == v61)
          goto LABEL_155;
      }
      *(_DWORD *)v66 -= 2;
LABEL_122:
      if (!v65)
        goto LABEL_125;
      goto LABEL_123;
    }
LABEL_155:
    v74 = (const WTF::String *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v99 + 24));
    v77 = v74;
    v78 = v75;
    v79 = *(_QWORD *)(v99 + 24);
    if (v79)
      v80 = (const WTF::String *)(v79 + 8 * *(unsigned int *)(v79 - 4));
    else
      v80 = 0;
    if (v80 != v74)
    {
      do
      {
        WebKit::WebsiteDataRecord::displayNameForHostName((WebKit::WebsiteDataRecord *)v100, v77);
        if (v100[0])
        {
          v101[0] = 0;
          LODWORD(v101[1]) = 0;
          LOBYTE(v102) = 0;
          BYTE8(v103) = 0;
          v104 = 0u;
          v105 = 0u;
          v106 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v107, (uint64_t *)(a1 + 24), v100, (uint64_t)v101);
          v83 = v107[0];
          if (v106)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v81);
          if (*((_QWORD *)&v105 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v81);
          if ((_QWORD)v105)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v105, v81);
          if (*((_QWORD *)&v104 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v104 + 1), v81);
          if ((_QWORD)v104)
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v104, v81);
          if (BYTE8(v103) && (_QWORD)v103)
            WTF::fastFree((WTF *)(v103 - 16), v81);
          v84 = v101[0];
          v101[0] = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, v81);
            else
              *(_DWORD *)v84 -= 2;
          }
          if (!*(_QWORD *)(v83 + 8))
          {
            v85 = v100[0];
            v100[0] = 0;
            *(_QWORD *)(v83 + 8) = v85;
          }
          *(_DWORD *)(v83 + 16) |= 0x200u;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v83 + 64), (WTF::StringImpl **)v77, v82, (uint64_t)v101);
          v86 = v100[0];
          v100[0] = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, v75);
            else
              *(_DWORD *)v86 -= 2;
          }
        }
        while (1)
        {
          v77 = (const WTF::String *)((char *)v77 + 8);
          if (v77 == v78)
            break;
          if ((unint64_t)(*(_QWORD *)v77 + 1) > 1)
            goto LABEL_186;
        }
        v77 = v78;
LABEL_186:
        ;
      }
      while (v77 != v80);
    }
    result = (unsigned int **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v99 + 32), (uint64_t)v75, v76);
    v87 = (const WTF::String *)result;
    v100[0] = (WTF::StringImpl *)result;
    v100[1] = v88;
    v89 = *(_QWORD *)(v99 + 32);
    if (v89)
      v90 = (WTF::StringImpl *)(v89 + 8 * *(unsigned int *)(v89 - 4));
    else
      v90 = 0;
    if (v90 != (WTF::StringImpl *)result)
    {
      v91 = (uint64_t *)(a1 + 24);
      do
      {
        WebKit::WebsiteDataRecord::displayNameForHostName((WebKit::WebsiteDataRecord *)v109, v87);
        if (v109[0])
        {
          v101[0] = 0;
          LODWORD(v101[1]) = 0;
          LOBYTE(v102) = 0;
          BYTE8(v103) = 0;
          v104 = 0u;
          v105 = 0u;
          v106 = 0;
          WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>((uint64_t)v107, v91, v109, (uint64_t)v101);
          v95 = v107[0];
          if (v106)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v94);
          if (*((_QWORD *)&v105 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v105 + 1), v94);
          if ((_QWORD)v105)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v105, v94);
          if (*((_QWORD *)&v104 + 1))
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v104 + 1), v94);
          if ((_QWORD)v104)
            WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v104, v94);
          if (BYTE8(v103) && (_QWORD)v103)
            WTF::fastFree((WTF *)(v103 - 16), v94);
          v96 = v101[0];
          v101[0] = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 2)
              WTF::StringImpl::destroy(v96, v94);
            else
              *(_DWORD *)v96 -= 2;
          }
          if (!*(_QWORD *)(v95 + 8))
          {
            v97 = v109[0];
            v109[0] = 0;
            *(_QWORD *)(v95 + 8) = v97;
          }
          *(_DWORD *)(v95 + 16) |= 0x1000u;
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v95 + 80), (WTF::ASCIICaseInsensitiveHash **)v87, (uint64_t)v101);
          v98 = v109[0];
          v109[0] = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, v92);
            else
              *(_DWORD *)v98 -= 2;
          }
        }
        v100[0] = (WTF::StringImpl *)((char *)v100[0] + 8);
        result = (unsigned int **)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v100, (uint64_t)v92, v93);
        v87 = v100[0];
      }
      while (v100[0] != v90);
    }
  }
  else
  {
    WTF::RunLoop::main((WTF::RunLoop *)isCurrent);
    do
      v47 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v47 + 1, (unsigned int *)a1));
    v101[0] = (WTF::StringImpl *)a1;
    WebKit::WebsiteData::isolatedCopy(a2, (uint64_t *)&v101[1]);
    v48 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v48 = off_1E34DF620;
    *(WTF::StringImpl **)(v48 + 8) = v101[0];
    v49 = v101[1];
    *(_OWORD *)v101 = 0u;
    *(_QWORD *)(v48 + 16) = v49;
    v50 = v102;
    v102 = 0;
    *(_QWORD *)(v48 + 24) = v50;
    *(_QWORD *)(v48 + 32) = v103;
    v51 = *((_QWORD *)&v103 + 1);
    v103 = 0u;
    *(_QWORD *)(v48 + 40) = v51;
    v52 = v104;
    *(_QWORD *)&v104 = 0;
    *(_QWORD *)(v48 + 48) = v52;
    v107[0] = v48;
    WTF::RunLoop::dispatch();
    v54 = v107[0];
    v107[0] = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    if ((_QWORD)v104)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v104, v53);
    if (*((_QWORD *)&v103 + 1))
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v103 + 1), v53);
    if ((_QWORD)v103)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v103, v53);
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101[1], v53);
    return WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)v101);
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::add<WebKit::WebsiteDataRecord>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  WTF::StringImpl **result;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::SecurityOriginData *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 >= 0x100)
    v10 = v9 >> 8;
  else
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl **)(v7 + 88 * (v10 & v8));
    v15 = *v14;
    if (*v14 != (WTF::StringImpl *)-1)
      break;
    v11 = v7 + 88 * v13;
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)(v11 + 80) = 0;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)v11 = 0u;
      --*(_DWORD *)(*a2 - 16);
      v14 = (WTF::StringImpl **)v11;
    }
    WTF::String::operator=(v14, (WTF::StringImpl *)a3);
    WTF::String::operator=(v14 + 1, (WTF::StringImpl *)a4);
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a4 + 8);
    if (*((unsigned __int8 *)v14 + 40) == *(unsigned __int8 *)(a4 + 32))
    {
      if (*((_BYTE *)v14 + 40))
      {
        v18 = *(WTF::StringImpl **)(a4 + 16);
        v19 = *(WTF::StringImpl **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
        v20 = v14[4];
        v14[3] = v18;
        v14[4] = v19;
        if (v20)
          WTF::fastFree((WTF::StringImpl *)((char *)v20 - 16), v17);
      }
    }
    else if (*((_BYTE *)v14 + 40))
    {
      v23 = v14[4];
      if (v23)
        WTF::fastFree((WTF::StringImpl *)((char *)v23 - 16), v17);
      *((_BYTE *)v14 + 40) = 0;
    }
    else
    {
      v14[3] = *(WTF::StringImpl **)(a4 + 16);
      v14[4] = 0;
      v27 = *(WTF::StringImpl **)(a4 + 24);
      *(_QWORD *)(a4 + 24) = 0;
      v14[4] = v27;
      *((_BYTE *)v14 + 40) = 1;
    }
    v28 = *(WTF::StringImpl **)(a4 + 40);
    *(_QWORD *)(a4 + 40) = 0;
    v29 = v14[6];
    v14[6] = v28;
    if (v29)
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v29, v17);
    v30 = *(WTF::StringImpl **)(a4 + 48);
    *(_QWORD *)(a4 + 48) = 0;
    v31 = (WTF::StringImpl **)v14[7];
    v14[7] = v30;
    if (v31)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)v17);
    v32 = *(WTF::StringImpl **)(a4 + 56);
    *(_QWORD *)(a4 + 56) = 0;
    v33 = (WTF::StringImpl **)v14[8];
    v14[8] = v32;
    if (v33)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v17);
    v34 = *(WTF::StringImpl **)(a4 + 64);
    *(_QWORD *)(a4 + 64) = 0;
    v35 = (WTF::StringImpl **)v14[9];
    v14[9] = v34;
    if (v35)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v35, (WTF::StringImpl *)v17);
    v36 = *(WTF::StringImpl **)(a4 + 72);
    *(_QWORD *)(a4 + 72) = 0;
    result = (WTF::StringImpl **)v14[10];
    v14[10] = v36;
    if (result)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, (WTF::StringImpl *)v17);
    v37 = *a2;
    if (*a2)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v39 = *a2;
    if (*a2)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 <= 2 * v41)
      {
LABEL_48:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v14);
        v14 = result;
        v39 = *a2;
        if (*a2)
          LODWORD(v42) = *(_DWORD *)(v39 - 4);
        else
          LODWORD(v42) = 0;
      }
    }
    else if (3 * v42 <= 4 * v41)
    {
      goto LABEL_48;
    }
    v24 = a1;
    v26 = v39 + 88 * v42;
    v25 = 1;
    goto LABEL_52;
  }
  result = (WTF::StringImpl **)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 4);
  else
    v22 = 0;
  v24 = a1;
  v25 = 0;
  v26 = v21 + 88 * v22;
LABEL_52:
  *(_QWORD *)v24 = v14;
  *(_QWORD *)(v24 + 8) = v26;
  *(_BYTE *)(v24 + 16) = v25;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(WebKit::WebsiteData &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;

  *(_QWORD *)a1 = off_1E34DF620;
  v3 = *(WTF::StringImpl ***)(a1 + 48);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *(WTF::StringImpl ***)(a1 + 32);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E34DF620;
  v3 = *(WTF::StringImpl ***)(a1 + 48);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *(WTF::StringImpl ***)(a1 + 40);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *(WTF::StringImpl ***)(a1 + 32);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v6);
}

unsigned int **WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(WebKit::WebsiteData &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(_QWORD *)(a1 + 8), a1 + 16);
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(char *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;

  v3 = *a2;
  if (!*a2)
  {
    v6 = 1;
    v7 = 1;
    return (char *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v7, *result, v3, a3);
  }
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = __OFADD__(v4, 1);
    v6 = (v4 + 1);
    if (!v5)
    {
      v7 = (*(unsigned __int8 *)(v3 + 16) >> 2) & 1;
      return (char *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v7, *result, v3, a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v7;
  uint64_t v9;
  uint64_t v10;

  v7 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v9 = v10;
        if (v10)
        {
          *(_BYTE *)(v10 + 20) = a3;
          *(_DWORD *)v9 = 2;
          *(_DWORD *)(v9 + 4) = v7;
          *(_QWORD *)(v9 + 8) = v9 + 20;
          *(_DWORD *)(v9 + 16) = 4;
          v10 = a4;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v10, (char *)(v9 + 21));
        }
        goto LABEL_12;
      }
LABEL_8:
      v9 = 0;
      goto LABEL_12;
    }
LABEL_9:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_9;
  if (result > 0x7FFFFFEF)
    goto LABEL_8;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v9 = v10;
  if (v10)
  {
    *(_DWORD *)v10 = 2;
    *(_DWORD *)(v9 + 4) = v7;
    *(_WORD *)(v9 + 20) = a3;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    v10 = a4;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v10, (char *)(v9 + 22));
  }
LABEL_12:
  *a5 = v9;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebsiteDataRecord>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebsiteDataRecord,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebsiteDataRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t result;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(88 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 88 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = v3;
    do
    {
      v13 = (WTF::StringImpl **)(v2 + 88 * v10);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v14 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v14);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v22 = (WTF::StringImpl **)(v16 + 88 * (v19 & v17));
            v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          WebKit::WebsiteDataRecord::~WebsiteDataRecord((WebKit::WebsiteDataRecord *)(v16 + 88 * v21 + 8), v7);
          v24 = *v22;
          *v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v13;
          *v13 = 0;
          *v22 = v25;
          v26 = v2 + 88 * v10;
          v28 = *(_QWORD *)(v26 + 8);
          v27 = v26 + 8;
          *(_QWORD *)v27 = 0;
          v29 = v16 + 88 * v21;
          v30 = *(_DWORD *)(v27 + 8);
          *(_BYTE *)(v29 + 24) = 0;
          v31 = v29 + 24;
          *(_QWORD *)(v16 + 88 * v21 + 8) = v28;
          *(_DWORD *)(v31 - 8) = v30;
          *(_BYTE *)(v31 + 16) = 0;
          v32 = (_BYTE *)(v31 + 16);
          if (*(_BYTE *)(v27 + 32))
          {
            v33 = v2 + 88 * v10;
            *(_QWORD *)v31 = *(_QWORD *)(v33 + 24);
            v34 = v16 + 88 * v21;
            *(_QWORD *)(v34 + 32) = 0;
            v35 = *(_QWORD *)(v33 + 32);
            *(_QWORD *)(v33 + 32) = 0;
            *(_QWORD *)(v34 + 32) = v35;
            *v32 = 1;
          }
          v36 = (_QWORD *)(v16 + 88 * v21);
          v37 = (_QWORD *)(v2 + 88 * v10);
          v36[6] = 0;
          v38 = v37[6];
          v37[6] = 0;
          v36[6] = v38;
          v36[7] = 0;
          v39 = v37[7];
          v37[7] = 0;
          v36[7] = v39;
          v36[8] = 0;
          v40 = v37[8];
          v37[8] = 0;
          v36[8] = v40;
          v36[9] = 0;
          v41 = v37[9];
          v37[9] = 0;
          v36[9] = v41;
          v36[10] = 0;
          v42 = v37[10];
          v37[10] = 0;
          v36[10] = v42;
          WebKit::WebsiteDataRecord::~WebsiteDataRecord((WebKit::WebsiteDataRecord *)v27, v23);
          v43 = *v13;
          *v13 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v7);
            else
              *(_DWORD *)v43 -= 2;
          }
          if (v13 == a2)
            v11 = v16 + 88 * v21;
        }
        else
        {
          WebKit::WebsiteDataRecord::~WebsiteDataRecord((WebKit::WebsiteDataRecord *)(v2 + 88 * v10 + 8), v7);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v7);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (_DWORD *)(v4 + 16 * v10);
      if ((*v12 + 1) >= 2)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = 0;
        v16 = 9 * ((*v12 + ~(*v12 << 15)) ^ ((*v12 + ~(*v12 << 15)) >> 10));
        v17 = ((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) >> 16);
        do
        {
          v18 = v17 & v14;
          v17 = ++v15 + v18;
        }
        while (*(_DWORD *)(v13 + 16 * v18));
        v19 = (_OWORD *)(v13 + 16 * v18);
        *v19 = *(_OWORD *)v12;
        if (v12 == a2)
          v11 = v19;
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_2,void,WebKit::WebsiteData>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF648;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_2,void,WebKit::WebsiteData>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF648;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_2,void,WebKit::WebsiteData>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  _QWORD v7[2];
  __int128 v8;
  WTF::StringImpl **v9;

  v7[0] = *(_QWORD *)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7[1] = v2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v8 = v3;
  v4 = *(WTF::StringImpl ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v9 = v4;
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(_QWORD *)(a1 + 8), (uint64_t)v7);
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v5);
  if (*((_QWORD *)&v8 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v8 + 1), v5);
  if ((_QWORD)v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v8, v5);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_3,void,WebKit::WebsiteData>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF670;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_3,void,WebKit::WebsiteData>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF670;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_3,void,WebKit::WebsiteData>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  _QWORD v7[2];
  __int128 v8;
  WTF::StringImpl **v9;

  v7[0] = *(_QWORD *)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7[1] = v2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v8 = v3;
  v4 = *(WTF::StringImpl ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v9 = v4;
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(_QWORD *)(a1 + 8), (uint64_t)v7);
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v5);
  if (*((_QWORD *)&v8 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v8 + 1), v5);
  if ((_QWORD)v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v8, v5);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_4,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> &&>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF698;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_4,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> &&>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DF698;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_4,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  unsigned int v11;
  uint64_t v12;
  __n128 v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22[2];
  __int128 v23;
  WTF::StringImpl **v24;
  WebCore::SecurityOriginData *v25[2];
  char v26;
  _BYTE v27[24];
  int v28;
  __int128 v29;
  _BYTE v30[24];
  int v31;
  uint64_t v32;

  v3 = result;
  v32 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v20 = 0;
  v21 = 0;
  if (*a2 && (v4 = *(unsigned int *)(*a2 - 12), (_DWORD)v4))
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v5 = 48 * v4;
    v6 = WTF::fastMalloc((WTF *)(48 * v4));
    LODWORD(v21) = (v5 & 0xFFFFFFF0) / 0x30;
    v20 = (WTF *)v6;
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  v9 = v7;
  v25[0] = v7;
  v25[1] = v8;
  if (*a2)
    v10 = (WebCore::SecurityOriginData *)(*a2 + 32 * *(unsigned int *)(*a2 - 4));
  else
    v10 = 0;
  if (v10 == v7)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v30[0] = 0;
      v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v30, (uint64_t)v9);
      v27[0] = 0;
      v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, (uint64_t)v30);
      LODWORD(v29) = 0x10000;
      *((_QWORD *)&v29 + 1) = 0;
      if (v31 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v31])(&v26, v30);
      v12 = v6 + 48 * v11;
      *(_BYTE *)v12 = 0;
      *(_DWORD *)(v12 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v12, (uint64_t)v27);
      *(_OWORD *)(v12 + 32) = v29;
      if (v28 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v28])(v30, v27);
      v25[0] = (WebCore::SecurityOriginData *)((char *)v25[0] + 32);
      v13.n128_f64[0] = WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v25);
      v9 = v25[0];
      ++v11;
    }
    while (v25[0] != v10);
    v14 = v22[0];
    if (HIDWORD(v22[1]))
    {
      v15 = 48 * HIDWORD(v22[1]);
      v16 = v22[0];
      do
      {
        v17 = *((unsigned int *)v16 + 6);
        if ((_DWORD)v17 != -1)
          ((void (*)(_BYTE *, WTF *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v17])(v27, v16, v13);
        *((_DWORD *)v16 + 6) = -1;
        v16 = (WTF *)((char *)v16 + 48);
        v15 -= 48;
      }
      while (v15);
    }
    if (v14)
      WTF::fastFree(v14, v8);
  }
  v22[0] = v20;
  v18 = v21;
  v20 = 0;
  v21 = 0;
  v22[1] = (WTF *)__PAIR64__(v11, v18);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(_QWORD *)(v3 + 8), (uint64_t)v22);
  if (v24)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v19);
  if (*((_QWORD *)&v23 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v23 + 1), v19);
  if ((_QWORD)v23)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v23, v19);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v19);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E34DF6C0;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E34DF6C0;
  WTF::Ref<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &>>::~Ref((unsigned int **)(a1 + 16));
  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::String *v6;
  const WTF::String *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  _QWORD v37[3];
  int v38;
  _OWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v23 = 0;
  v24 = 0;
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 8), a2);
  if (v35)
  {
    v4 = v34;
    v5 = 8 * v35;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebKit::computeMediaKeyFile((WebKit *)&v32, v33);
      if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v32, v6))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        WebCore::StorageUtilities::readOriginFromFile((WebCore::StorageUtilities *)&v31, v7);
        if (v40)
        {
          if (HIDWORD(v24) == (_DWORD)v24)
          {
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>((uint64_t)&v23, (unint64_t)v39);
          }
          else
          {
            v8 = v23 + 32 * HIDWORD(v24);
            *(_BYTE *)v8 = 0;
            *(_DWORD *)(v8 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v8, (uint64_t)v39);
            ++HIDWORD(v24);
          }
        }
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37);
        v9 = v31;
        v31 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v3);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      v10 = v32;
      v32 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v33;
      v33 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v3);
        else
          *(_DWORD *)v11 -= 2;
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v3);
  if (HIDWORD(v24))
  {
    if (HIDWORD(v24) >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v14 = 48 * HIDWORD(v24);
    v15 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v24)));
    v16 = v15;
    v17 = (v14 & 0xFFFFFFF0) / 0x30;
    if (HIDWORD(v24))
    {
      v18 = 0;
      v19 = 0;
      v20 = v15;
      do
      {
        LOBYTE(v34) = 0;
        v36 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v34, v23 + v18);
        LOBYTE(v37[0]) = 0;
        v38 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37, (uint64_t)&v34);
        LODWORD(v39[0]) = 256;
        *((_QWORD *)&v39[0] + 1) = 0;
        if (v36 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v36])(&v33, &v34);
        *(_BYTE *)v20 = 0;
        *(_DWORD *)(v20 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v20, (uint64_t)v37);
        *(_OWORD *)(v20 + 32) = v39[0];
        if (v38 != -1)
          ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v38])(&v34, v37);
        ++v19;
        v20 += 48;
        v18 += 32;
      }
      while (v19 < HIDWORD(v24));
    }
    else
    {
      LODWORD(v19) = 0;
    }
  }
  else
  {
    LODWORD(v19) = 0;
    v17 = 0;
    v16 = 0;
  }
  v37[0] = 0;
  v37[1] = 0;
  v25 = v16;
  v26 = v17;
  v27 = v19;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v13);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v21);
  WebKit::WebsiteDataStore::fetchDataAndApply(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::CallbackAggregator::addWebsiteData(*(_QWORD *)(a1 + 16), (uint64_t)&v25);
  if (v30)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v22);
  if (v29)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v22);
  if (v28)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v22);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v22);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::WebsiteDataRecord>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34DF6E8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::WebsiteDataRecord>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34DF6E8;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::WebsiteDataRecord>::call(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[4];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78[2];

  v72 = a1;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v2 = *(_DWORD *)(a2 + 12);
  if (!v2)
    goto LABEL_67;
  v3 = *(_QWORD *)a2;
  v71 = *(_QWORD *)a2 + 80 * v2;
  do
  {
    v4 = *(unsigned int *)(v72 + 20);
    if (!(_DWORD)v4)
      goto LABEL_66;
    v5 = *(uint64_t **)(v72 + 8);
    v6 = &v5[v4];
    v7 = (_QWORD *)(v3 + 48);
    v8 = (_QWORD *)(v3 + 40);
    while (1)
    {
      a1 = *v5;
      if (!*v5)
        goto LABEL_51;
      if (!*(_DWORD *)(a1 + 4))
        goto LABEL_51;
      a1 = MEMORY[0x19AEABBCC]();
      if ((a1 & 1) != 0)
        goto LABEL_51;
      if ((*(_BYTE *)(v3 + 8) & 1) != 0)
      {
        v9 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 48));
        v10 = v9;
        v12 = v11;
        v13 = *v7 ? *v7 + 8 * *(unsigned int *)(*v7 - 4) : 0;
        if ((uint64_t *)v13 != v9)
          break;
      }
LABEL_32:
      a1 = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v3 + 40));
      v78[0] = (WTF::StringImpl *)a1;
      v78[1] = v23;
      if (*v8)
        v24 = (WTF::StringImpl *)(*v8 + 32 * *(unsigned int *)(*v8 - 4));
      else
        v24 = 0;
      if (v24 != (WTF::StringImpl *)a1)
      {
        do
        {
          v25 = *(_QWORD *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)a1);
          if (v25)
          {
            v26 = *(unsigned int *)(v25 + 16);
            v27 = *(_QWORD *)(v25 + 8);
            v25 = *(unsigned int *)(v25 + 4);
            v28 = (v26 >> 2) & 1;
          }
          else
          {
            v27 = 0;
            v28 = 1;
          }
          v29 = *v5 ? *(_DWORD *)(*v5 + 4) : 0;
          v73 = v27;
          v74[0] = v25 | (v28 << 32);
          v19 = WTF::StringView::endsWithIgnoringASCIICase();
          if ((v19 & 1) != 0)
          {
            if (LODWORD(v74[0]) == v29)
              goto LABEL_55;
            v30 = LODWORD(v74[0]) + ~v29;
            if (BYTE4(v74[0]))
            {
              if (LODWORD(v74[0]) <= v30)
                goto LABEL_73;
              v31 = *(unsigned __int8 *)(v73 + v30);
            }
            else
            {
              if (LODWORD(v74[0]) <= v30)
                goto LABEL_73;
              v31 = *(unsigned __int16 *)(v73 + 2 * v30);
            }
            if (v31 == 46)
              goto LABEL_55;
          }
          v78[0] = (WTF::StringImpl *)((char *)v78[0] + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v78);
          a1 = (uint64_t)v78[0];
        }
        while (v78[0] != v24);
      }
LABEL_51:
      if (++v5 == v6)
        goto LABEL_66;
    }
    while (1)
    {
      v14 = *v10;
      if (*v10)
      {
        v15 = *(unsigned int *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 8);
        v14 = *(unsigned int *)(v14 + 4);
        v17 = (v15 >> 2) & 1;
      }
      else
      {
        v16 = 0;
        v17 = 1;
      }
      v18 = *v5 ? *(_DWORD *)(*v5 + 4) : 0;
      v73 = v16;
      v74[0] = v14 | (v17 << 32);
      v19 = WTF::StringView::endsWithIgnoringASCIICase();
      if ((v19 & 1) != 0)
        break;
LABEL_24:
      while (++v10 != v12)
      {
        if ((unint64_t)(*v10 + 1) > 1)
          goto LABEL_28;
      }
      v10 = v12;
LABEL_28:
      if (v10 == (uint64_t *)v13)
        goto LABEL_32;
    }
    if (LODWORD(v74[0]) == v18)
      goto LABEL_55;
    v21 = LODWORD(v74[0]) + ~v18;
    if (!BYTE4(v74[0]))
    {
      if (LODWORD(v74[0]) > v21)
      {
        v22 = *(unsigned __int16 *)(v73 + 2 * v21);
        goto LABEL_23;
      }
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    if (LODWORD(v74[0]) <= v21)
      goto LABEL_73;
    v22 = *(unsigned __int8 *)(v73 + v21);
LABEL_23:
    if (v22 != 46)
      goto LABEL_24;
LABEL_55:
    v32 = HIDWORD(v77);
    if (HIDWORD(v77) == (_DWORD)v77)
    {
      v33 = WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, HIDWORD(v77) + 1, v3);
      v34 = HIDWORD(v77);
      v35 = v76;
      v36 = v76 + 80 * HIDWORD(v77);
      v37 = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      *(_QWORD *)v36 = v37;
      *(_DWORD *)(v36 + 8) = *(_DWORD *)(v33 + 8);
      *(_BYTE *)(v36 + 16) = 0;
      v38 = (_QWORD *)(v36 + 16);
      *(_BYTE *)(v36 + 32) = 0;
      v39 = (_BYTE *)(v36 + 32);
      if (*(_BYTE *)(v33 + 32))
      {
        *v38 = *(_QWORD *)(v33 + 16);
        v40 = v35 + 80 * v34;
        *(_QWORD *)(v40 + 24) = 0;
        v41 = *(_QWORD *)(v33 + 24);
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v40 + 24) = v41;
        *v39 = 1;
      }
      v42 = (_QWORD *)(v35 + 80 * v34);
      v42[5] = 0;
      v43 = *(_QWORD *)(v33 + 40);
      *(_QWORD *)(v33 + 40) = 0;
      v42[5] = v43;
      v42[6] = 0;
      v44 = *(_QWORD *)(v33 + 48);
      *(_QWORD *)(v33 + 48) = 0;
      v42[6] = v44;
      v42[7] = 0;
      v45 = *(_QWORD *)(v33 + 56);
      *(_QWORD *)(v33 + 56) = 0;
      v42[7] = v45;
      v42[8] = 0;
      v46 = *(_QWORD *)(v33 + 64);
      *(_QWORD *)(v33 + 64) = 0;
      v42[8] = v46;
      v47 = v42 + 9;
    }
    else
    {
      v48 = v76;
      v49 = v76 + 80 * HIDWORD(v77);
      v50 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)v49 = v50;
      *(_DWORD *)(v49 + 8) = *(_DWORD *)(v3 + 8);
      *(_BYTE *)(v49 + 16) = 0;
      v51 = (_QWORD *)(v49 + 16);
      *(_BYTE *)(v49 + 32) = 0;
      v52 = (_BYTE *)(v49 + 32);
      if (*(_BYTE *)(v3 + 32))
      {
        *v51 = *(_QWORD *)(v3 + 16);
        v53 = v48 + 80 * v32;
        *(_QWORD *)(v53 + 24) = 0;
        v54 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 24) = 0;
        *(_QWORD *)(v53 + 24) = v54;
        *v52 = 1;
      }
      v55 = (_QWORD *)(v48 + 80 * v32);
      v55[5] = 0;
      v56 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      v55[5] = v56;
      v55[6] = 0;
      v57 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      v55[6] = v57;
      v55[7] = 0;
      v58 = *(_QWORD *)(v3 + 56);
      *(_QWORD *)(v3 + 56) = 0;
      v55[7] = v58;
      v55[8] = 0;
      v59 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      v55[8] = v59;
      v47 = v55 + 9;
      v33 = v3;
    }
    *v47 = 0;
    v60 = *(_QWORD *)(v33 + 72);
    *(_QWORD *)(v33 + 72) = 0;
    *v47 = v60;
    ++HIDWORD(v77);
    WebCore::RegistrableDomain::isolatedCopy(v78);
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&v75, v78, (uint64_t)&v73);
    a1 = (uint64_t)v78[0];
    v78[0] = 0;
    if (a1)
    {
      if (*(_DWORD *)a1 == 2)
        a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, v61);
      else
        *(_DWORD *)a1 -= 2;
    }
LABEL_66:
    v3 += 80;
  }
  while (v3 != v71);
LABEL_67:
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v62 = *(_QWORD *)(v72 + 24);
  *(_QWORD *)(v72 + 24) = 0;
  v64 = v75;
  v63 = v76;
  v75 = 0;
  v76 = 0;
  v65 = v77;
  v77 = 0;
  v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v66 = off_1E34DF710;
  *((_QWORD *)v66 + 1) = v62;
  v73 = 0;
  v74[0] = 0;
  *((_QWORD *)v66 + 2) = v63;
  v74[1] = 0;
  *((_QWORD *)v66 + 3) = v65;
  v74[2] = 0;
  *((_QWORD *)v66 + 4) = v64;
  v78[0] = v66;
  WTF::RunLoop::dispatch();
  v68 = v78[0];
  v78[0] = 0;
  if (v68)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v68 + 8))(v68);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v74, v67);
  v69 = v73;
  v73 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v19 = v75;
  if (v75)
LABEL_74:
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v19, v20);
  return WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v20);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *a1 = off_1E34DF710;
  v3 = (WTF::StringImpl **)a1[4];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34DF710;
  v3 = (WTF::StringImpl **)*((_QWORD *)a1 + 4);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(a1, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16WebsiteDataStore30fetchDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEENS4_INS2_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS2_17WebsiteDataRecordELm0ESC_Lm16ESD_EEONS_7HashSetISB_NS_11DefaultHashISB_EENS_10HashTraitsISB_EENS_15HashTableTraitsEEEEEEEN3__0clISI_EEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16, a1 + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DF738;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DF738;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v5 = 134217984;
    v6 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData finished deleting modified data for session %llu", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34DF760;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34DF760;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_1,void>::call()
{
  return WebCore::HTMLMediaElement::clearMediaCache();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF788;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF788;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF7B0;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF7B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF7D8;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF7D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34DF800;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34DF800;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_5,void>::call(uint64_t a1, const WTF::String *a2)
{
  double v2;
  const WTF::String *v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::String *v6;
  double v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;

  v2 = *(double *)(a1 + 24);
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 8), a2);
  if (v18)
  {
    v4 = v17;
    v5 = 8 * v18;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebKit::computeMediaKeyFile((WebKit *)&v15, v16);
      v7 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v15, v6));
      if ((_BYTE)v3 && v2 <= v7)
      {
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v15, v3);
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v14, v8);
        v10 = v14;
        v14 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v16, v9);
      }
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v3);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v3);
        else
          *(_DWORD *)v12 -= 2;
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_6,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF828;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_6,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_7,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF850;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_7,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF850;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_8,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF878;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::Function<void ()(void)> &&)::$_8,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF878;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DF8A0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DF8A0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v5 = 134217984;
    v6 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "WebsiteDataStore::removeData finished deleting data for session %llu", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WebCore::SecurityOriginData *v5;

  *a1 = &off_1E34DF8C8;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::SecurityOriginData *)a1[1];
  if (v5)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WebCore::SecurityOriginData *v5;

  *(_QWORD *)this = &off_1E34DF8C8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 1);
  if (v5)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_1,void>::call()
{
  return WebCore::HTMLMediaElement::clearMediaCacheForOrigins();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;

  *a1 = &off_1E34DF8F0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *(_QWORD *)this = &off_1E34DF8F0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF918;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF918;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34DF940;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::SecurityOriginData *v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34DF968;
  v3 = (WebCore::SecurityOriginData *)a1[4];
  if (v3)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_5,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::SecurityOriginData *v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34DF968;
  v3 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Function<void ()(void)> &&)::$_5,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData *v2;
  double result;
  WebCore::SecurityOriginData *v4;
  uint64_t v5;
  WebCore::SecurityOriginData *v6;
  const WTF::String *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::SecurityOriginData *v19[2];

  v2 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(a1 + 32));
  v19[0] = v2;
  v19[1] = v4;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = (WebCore::SecurityOriginData *)(v5 + 32 * *(unsigned int *)(v5 - 4));
  else
    v6 = 0;
  if (v6 != v2)
  {
    do
    {
      WebCore::StorageUtilities::encodeSecurityOriginForFileName();
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebKit::computeMediaKeyFile((WebKit *)&v16, v17);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v16, v7);
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v15, v8);
      v10 = v15;
      v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v17, v9);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      v19[0] = (WebCore::SecurityOriginData *)((char *)v19[0] + 32);
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v19);
    }
    while (v19[0] != v6);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3532, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  v12 = **a2;
  *(_QWORD *)IPC::Encoder::grow(v11, 8uLL, 8) = v12;
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  v13 = v21;
  if (v21)
  {
    if (v21 != 1)
    {
      v19 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Connection::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>(v19);
    }
    *(_BYTE *)a5 = v20;
  }
  else
  {
    v14 = v20;
    v20 = 0;
    *(_QWORD *)a5 = v14;
  }
  *(_DWORD *)(a5 + 16) = v13;
  ((void (*)(char *, uint64_t *))off_1E34DF980[v13])(&v24, &v20);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  IPC::Encoder *v18;
  uint64_t v19;
  char v20;

  v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3530, a2, &v19, (uint64_t *)&v18);
  if ((a3 & 1) != 0)
  {
    **((_BYTE **)v18 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::Connection::sendSyncMessage(a1, v19, (uint64_t *)&v18, a3, (uint64_t)&v16, a5);
  v9 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      v15 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::~CallableWrapper(v15);
    }
    *(_BYTE *)a4 = v16;
  }
  else
  {
    v10 = v16;
    v16 = 0;
    *(_QWORD *)a4 = v10;
  }
  *(_DWORD *)(a4 + 16) = v9;
  ((void (*)(char *, uint64_t *))off_1E34DF980[v9])(&v20, &v16);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DF9A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DF9A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34DF9C8;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34DF9C8;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebsiteDataStore *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v11;
  _QWORD *v12;

  v2 = *(WebKit::WebsiteDataStore **)(a1 + 8);
  v3 = WebKit::WebsiteDataStore::networkProcess(v2);
  v4 = (unsigned int *)(v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_QWORD *)v2 + 3);
  v7 = *(_DWORD **)(a1 + 24);
  ++*v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34DF9F0;
  v8[1] = v7;
  v11 = 0;
  v12 = v8;
  WebKit::NetworkProcessProxy::getResourceLoadStatisticsDataSummary(v3, v6, (uint64_t *)&v12);
  v9 = (uint64_t)v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v11);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator() const(void)::{lambda(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DF9F0;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator() const(void)::{lambda(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF **a1)
{
  void *v2;

  *a1 = (WTF *)off_1E34DF9F0;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator() const(void)::{lambda(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(result + 8);
  v4 = *((unsigned int *)a2 + 3);
  v5 = *(unsigned int *)(v3 + 24);
  v6 = v4 + *(unsigned int *)(v3 + 28);
  if (v6 > v5)
  {
    v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6)
      v9 = v4 + *(unsigned int *)(v3 + 28);
    else
      v9 = v8;
    result = WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3 + 16, v9);
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v4)
  {
    v10 = *a2;
    v11 = (uint64_t)&(*a2)[3 * v4];
    v12 = *(_DWORD *)(v3 + 28);
    do
    {
      v13 = *(_QWORD *)(v3 + 16) + 24 * v12;
      v14 = *v10;
      *v10 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = v14;
      v15 = v10[1];
      v10[1] = 0;
      *(_QWORD *)(v13 + 8) = v15;
      LODWORD(v15) = *((_DWORD *)v10 + 4);
      *((_DWORD *)v10 + 4) = 0;
      *(_DWORD *)(v13 + 16) = v15;
      LODWORD(v15) = *((_DWORD *)v10 + 5);
      *((_DWORD *)v10 + 5) = 0;
      *(_DWORD *)(v13 + 20) = v15;
      v12 = *(_DWORD *)(v3 + 28) + 1;
      *(_DWORD *)(v3 + 28) = v12;
      v10 += 3;
    }
    while (v10 != (uint64_t *)v11);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DFA18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DFA18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFA40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFA40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GrantStorageAccessForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFA68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFA68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DFA90;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DFA90;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DFAB8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DFAB8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFAE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFAE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SyncLocalStorage,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFB08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFB08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StoreServiceWorkerRegistrations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0,void,WebKit::NetworkProcessConnectionInfo &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *a1 = &off_1E34DFB30;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0,void,WebKit::NetworkProcessConnectionInfo &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E34DFB30;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0,void,WebKit::NetworkProcessConnectionInfo &>::call(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint8_t buf[8];
  char v13;
  char v14;

  if ((*a2 - 1) >= 0xFFFFFFFE)
  {
    if (*(_BYTE *)(a1 + 40) && (v4 = *(_QWORD *)(a1 + 24)) != 0 && *(_QWORD *)(v4 + 8))
    {
      WTF::RunLoop::main((WTF::RunLoop *)a1);
      v5 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = 0u;
      v10 = *(_OWORD *)(a1 + 24);
      v11 = v5;
      *(_OWORD *)(a1 + 24) = 0u;
      v6 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v6 = &off_1E34DFB58;
      *(_OWORD *)(v6 + 8) = v11;
      *(_OWORD *)(v6 + 24) = v10;
      *(_QWORD *)buf = v6;
      WTF::RunLoop::dispatch();
      v7 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    else
    {
      v8 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will reply invalid identifier ...", buf, 2u);
      }
      *(_DWORD *)buf = 0;
      buf[4] = 0;
      v13 = 0;
      v14 = 0;
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 16))(v9, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
    }
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0::operator()(WebKit::NetworkProcessConnectionInfo &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *a1 = &off_1E34DFB58;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0::operator()(WebKit::NetworkProcessConnectionInfo &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = &off_1E34DFB58;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0::operator()(WebKit::NetworkProcessConnectionInfo &)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;

  v2 = a1[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = v3 == 0;
    if (v3)
      CFRetain(*(CFTypeRef *)(v3 + 8));
    v5 = a1[3];
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 16);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (v3)
        {
          v9 = a1[2];
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              if (*(_QWORD *)(v3 + 408) == v10)
                WebKit::WebsiteDataStore::terminateNetworkProcess((unsigned int *)v3);
            }
          }
          v11 = qword_1ECE71C68;
          if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v18) = 0;
            _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will retry ...", (uint8_t *)&v18, 2u);
          }
          WebKit::WebsiteDataStore::getNetworkProcessConnection((unsigned int *)v3, v6, a1 + 4, 0);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
LABEL_31:
          CFRelease(*(CFTypeRef *)(v3 + 8));
          return;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v12 = a1[3];
    if (v12)
    {
      v6 = *(_QWORD *)(v12 + 8);
      if (v6)
      {
        v13 = (unsigned int *)(v6 + 16);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v3 = 0;
LABEL_21:
        v15 = 0;
        v4 = 1;
        goto LABEL_26;
      }
      v3 = 0;
    }
    else
    {
      v3 = 0;
      v6 = 0;
    }
    v4 = 1;
  }
  v15 = 1;
LABEL_26:
  v16 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v18) = 0;
    _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will reply invalid identifier ...", (uint8_t *)&v18, 2u);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v17 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 16))(v17, &v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v18);
  if ((v15 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  if (!v4)
    goto LABEL_31;
}

IPC::Encoder *WTF::Detail::CallableWrapper<void WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>(Messages::WebProcess::SetTrackingPreventionEnabled const&,PAL::SessionID,WebKit::ShouldSkipSuspendedProcesses)::{lambda(Messages::WebProcess::SetTrackingPreventionEnabled&)#1},void,WebKit::WebProcessProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  BOOL v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  if (!**((_BYTE **)result + 1) || (*(_BYTE *)(a2 + 389) ? (v3 = *(_QWORD *)(a2 + 224) == 0) : (v3 = 0), !v3))
  {
    v4 = **((_BYTE **)result + 2);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 2649;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v12 = (IPC::Encoder *)v5;
    *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v4;
    LOBYTE(v10) = 0;
    v11 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v12, 0, (uint64_t)&v10, 1);
    if (v11)
    {
      v7 = v10;
      v10 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v6);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClosePCMDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DFBD0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClosePCMDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DFBD0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CloseITPDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DFBF8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CloseITPDatabase,WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebsiteDataStore::closeDatabases(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DFBF8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<void WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::ClearResourceLoadStatistics>(Messages::WebProcess::ClearResourceLoadStatistics const&,PAL::SessionID,WebKit::ShouldSkipSuspendedProcesses)::{lambda(Messages::WebProcess::ClearResourceLoadStatistics&)#1},void,WebKit::WebProcessProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  char v10;
  IPC::Encoder *v11;

  if (!**((_BYTE **)result + 1) || (*(_BYTE *)(a2 + 389) ? (v3 = *(_QWORD *)(a2 + 224) == 0) : (v3 = 0), !v3))
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 2576;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v11 = (IPC::Encoder *)v4;
    LOBYTE(v9) = 0;
    v10 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v11, 0, (uint64_t)&v9, 1);
    if (v10)
    {
      v6 = v9;
      v9 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v5);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashMap(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3)
{
  WTF::ASCIICaseInsensitiveHash **v6;
  _BYTE v8[24];

  *a1 = 0;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a1, a3);
  if (a3)
  {
    v6 = &a2[2 * a3];
    do
    {
      WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>(a1, a2, (WTF::StringImpl *)(a2 + 1), (uint64_t)v8);
      a2 += 2;
    }
    while (a2 != v6);
  }
  return a1;
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  WTF **v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF **v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v9;
  v11 = (WTF **)(v8 + 16 * v10);
  if ((WTF::equal(*v11, 0, v12) & 1) == 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (*v11 == (WTF *)-1)
      {
        v14 = v11;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*v11, *a2, v13);
        if ((_DWORD)result)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(unsigned int *)(v25 - 4);
          else
            v26 = 0;
          v24 = 0;
          v23 = v25 + 16 * v26;
          goto LABEL_24;
        }
      }
      v10 = (v10 + v15) & v9;
      v11 = (WTF **)(v8 + 16 * v10);
      ++v15;
    }
    while (!WTF::equal(*v11, 0, v13));
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = v14;
    }
  }
  WTF::String::operator=(v11, (WTF::StringImpl *)a2);
  result = (uint64_t)WTF::String::operator=(v11 + 1, a3);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v11);
      v11 = (WTF **)result;
      v19 = *a1;
      if (*a1)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_24:
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(WTF::CompletionHandler<void ()(unsigned long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFC48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(WTF::CompletionHandler<void ()(unsigned long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFC48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CountNonDefaultSessionSets,WTF::CompletionHandler<void ()(unsigned long)>>(WTF::CompletionHandler<void ()(unsigned long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<double>>(a2), v4))
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFC70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFC70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0,void,WebKit::WebPageProxy *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t v9[16];

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v3 + 984) || *(unsigned __int8 *)(v3 + 968) < 2u)
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      result = *(_QWORD *)(v3 + 2144);
      *(_QWORD *)(v3 + 2144) = v4;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v7 = qword_1ECE71320;
      if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "The WKWebView provided in response to a ServiceWorker openWindow request was not in the loading state", v9, 2u);
      }
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WebKit::SandboxExtensionHandle &&,WebKit::CallDownloadDidStart>,void>::encode<IPC::Encoder,WebKit::CallDownloadDidStart,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  v4 = *v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, (const void *)*v2[2], v2[2][1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[3]);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)v2[4]);
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::VectorArgumentCoder<false,std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((unsigned int *)a2 + 3);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = *a2;
    v8 = v7 + 32 * v6;
    do
    {
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)v7, *(unsigned int *)(v7 + 12));
      result = IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(v7 + 16));
      v7 += 32;
    }
    while (v7 != v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DFC98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DFC98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetOriginQuotaRatioEnabledForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34DFCC0;
  WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34DFCC0;
  WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebsiteDataStore::processPushMessage(WebKit::WebPushMessage &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(a1 + 8, a2, a3);
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::inlineSet<WebCore::RegistrableDomain const&,WebKit::RestrictedOpenerType&>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v9;
  v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (*(_QWORD *)v11 == -1)
      {
        v14 = v11;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*(WTF **)v11, *a2, v13);
        if ((_DWORD)result)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(unsigned int *)(v23 - 4);
          else
            v24 = 0;
          *(_QWORD *)a4 = v11;
          *(_QWORD *)(a4 + 8) = v23 + 16 * v24;
          *(_BYTE *)(a4 + 16) = 0;
          *(_BYTE *)(v8 + 16 * v10 + 8) = *a3;
          return result;
        }
      }
      v10 = ((_DWORD)v10 + v15) & v9;
      v11 = v8 + 16 * v10;
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v13));
    if (v14)
    {
      *(_QWORD *)v14 = 0;
      *(_BYTE *)(v14 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = v14;
    }
  }
  result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)v11, (WTF::StringImpl *)a2);
  *(_BYTE *)(v11 + 8) = *a3;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v11);
      v11 = result;
      v19 = *a1;
      if (*a1)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v19 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void WebKit::encodeLegacySessionState(WebKit *this@<X0>, WebKit **a2@<X8>)
{
  const __CFAllocator *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  const __CFArray *Mutable;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  CFIndex v14;
  const UInt8 *v15;
  void *v16;
  const __CFData *v17;
  void *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  unint64_t v21;
  void *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  const void **v29;
  const __CFData *v30;
  __int128 *v31;
  unint64_t v32;
  CFTypeRef v33;
  __CFWriteStream *v34;
  __CFWriteStream *v35;
  CFTypeRef v36;
  const __CFData *v37;
  CFIndex Length;
  CFIndex v39;
  void *v40;
  WebKit **v41;
  uint64_t v42;
  WebKit *v43;
  WTF *v44;
  CFTypeRef v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  CFNumberRef v49;
  WebKit **v50;
  void *value;
  CFTypeRef cf;
  CFTypeRef v53;
  CFTypeRef v54;
  __int128 *valuePtr;
  __int128 v56;
  const __CFString *v57;
  CFTypeRef v58;
  const __CFString *v59;
  CFTypeRef v60;
  const __CFString *v61;
  const __CFData *v62;
  const __CFString *v63;
  CFNumberRef v64;
  uint64_t v65;
  CFRange v66;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &WebKit::sessionHistoryVersion);
  v7 = v6;
  if (*((_BYTE *)this + 20))
  {
    v49 = v6;
    v50 = a2;
    Mutable = CFArrayCreateMutable(v5, *((unsigned int *)this + 3), MEMORY[0x1E0C9B378]);
    v9 = *((_DWORD *)this + 3);
    if (v9)
    {
      v10 = 0;
      v11 = 312 * v9;
      v12 = (unsigned __int8 *)(*(_QWORD *)this + 272);
      while (1)
      {
        WTF::String::createCFString((WTF::String *)(v12 - 248));
        WTF::String::createCFString((WTF::String *)(v12 - 256));
        WTF::String::createCFString((WTF::String *)(v12 - 240));
        if (v10 > 0x200000)
          goto LABEL_13;
        if ((_MergedGlobals_99 & 1) == 0)
        {
          qword_1ECE72E60 = 0;
          _MergedGlobals_99 = 1;
        }
        v13 = atomic_load(&qword_1ECE72E68);
        if (v13 != -1)
        {
          *(_QWORD *)&v56 = &value;
          valuePtr = &v56;
          std::__call_once(&qword_1ECE72E68, &valuePtr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::encodeSessionHistoryEntryData(WebKit::FrameState const&)::$_0 &&>>);
        }
        v56 = xmmword_1978CE2D0;
        v57 = (const __CFString *)WTF::fastMalloc((WTF *)0x200);
        v58 = v57;
        valuePtr = 0;
        WebKit::HistoryEntryDataEncoder::encodeFixedLengthData((size_t *)&v56, &valuePtr, 8uLL, 8u);
        LODWORD(valuePtr) = 2;
        WebKit::HistoryEntryDataEncoder::encodeFixedLengthData((size_t *)&v56, &valuePtr, 4uLL, 4u);
        WebKit::encodeFrameStateNode((size_t *)&v56, (uint64_t)(v12 - 248));
        v14 = v56;
        v15 = (const UInt8 *)v57;
        v57 = 0;
        WTF::fastFree(0, v16);
        v17 = CFDataCreateWithBytesNoCopy(v5, v15, v14, (CFAllocatorRef)qword_1ECE72E60);
        WTF::fastFree(0, v18);
        if (v17)
        {
          v10 += CFDataGetLength(v17);
          if (v10 > 0x200000 && CFArrayGetCount(Mutable) >= 1)
            break;
        }
LABEL_14:
        valuePtr = (__int128 *)*v12;
        v19 = CFNumberCreate(v5, kCFNumberSInt64Type, &valuePtr);
        v20 = v19;
        *(_QWORD *)&v56 = CFSTR("SessionHistoryEntryURL");
        *((_QWORD *)&v56 + 1) = v54;
        v57 = CFSTR("SessionHistoryEntryTitle");
        v58 = v53;
        v59 = CFSTR("SessionHistoryEntryOriginalURL");
        v60 = cf;
        if (v17)
        {
          v61 = CFSTR("SessionHistoryEntryData");
          v62 = v17;
          v63 = CFSTR("SessionHistoryEntryShouldOpenExternalURLsPolicyKey");
          v64 = v19;
          v21 = 5;
        }
        else
        {
          v61 = CFSTR("SessionHistoryEntryShouldOpenExternalURLsPolicyKey");
          v62 = v19;
          v21 = 4;
        }
        WebKit::createDictionary((uint64_t)&value, (uint64_t)&v56, v21);
        v22 = value;
        CFArrayAppendValue(Mutable, value);
        if (v22)
        {
          CFRelease(v22);
          if (!v20)
          {
LABEL_19:
            if (v17)
              goto LABEL_30;
            goto LABEL_20;
          }
        }
        else if (!v20)
        {
          goto LABEL_19;
        }
        CFRelease(v20);
        if (v17)
LABEL_30:
          CFRelease(v17);
LABEL_20:
        v23 = cf;
        cf = 0;
        if (v23)
          CFRelease(v23);
        v24 = v53;
        v53 = 0;
        if (v24)
          CFRelease(v24);
        v25 = v54;
        v54 = 0;
        if (v25)
          CFRelease(v25);
        v12 += 312;
        v11 -= 312;
        if (!v11)
          goto LABEL_31;
      }
      CFRelease(v17);
LABEL_13:
      v17 = 0;
      goto LABEL_14;
    }
LABEL_31:
    if (!*((_BYTE *)this + 20))
    {
      v46 = std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::createDictionary((uint64_t)v46, v47, v48);
      return;
    }
    LODWORD(v54) = *((_DWORD *)this + 4);
    v26 = CFNumberCreate(v5, kCFNumberSInt32Type, &v54);
    v7 = v49;
    *(_QWORD *)&v56 = CFSTR("SessionHistoryVersion");
    *((_QWORD *)&v56 + 1) = v49;
    v57 = CFSTR("SessionHistoryCurrentIndex");
    v58 = v26;
    v59 = CFSTR("SessionHistoryEntries");
    v60 = Mutable;
    WebKit::createDictionary((uint64_t)&valuePtr, (uint64_t)&v56, 3uLL);
    if (v26)
      CFRelease(v26);
    a2 = v50;
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    *(_QWORD *)&v56 = CFSTR("SessionHistoryVersion");
    *((_QWORD *)&v56 + 1) = v6;
    WebKit::createDictionary((uint64_t)&valuePtr, (uint64_t)&v56, 1uLL);
  }
  if (v7)
    CFRelease(v7);
  if (*((_QWORD *)this + 4))
    WTF::String::createCFString((WebKit *)((char *)this + 32));
  else
    v54 = 0;
  v27 = CFNumberCreate(v5, kCFNumberSInt64Type, (char *)this + 24);
  v28 = v27;
  if (*((_BYTE *)this + 72))
    v29 = (const void **)MEMORY[0x1E0C9AE50];
  else
    v29 = (const void **)MEMORY[0x1E0C9AE40];
  v30 = (const __CFData *)*v29;
  v31 = valuePtr;
  *(_QWORD *)&v56 = CFSTR("SessionHistory");
  *((_QWORD *)&v56 + 1) = valuePtr;
  if (v54)
  {
    v57 = CFSTR("ProvisionalURL");
    v58 = v54;
    v59 = CFSTR("RenderTreeSize");
    v60 = v27;
    v61 = CFSTR("IsAppInitiated");
    v62 = v30;
    v32 = 4;
  }
  else
  {
    v57 = CFSTR("RenderTreeSize");
    v58 = v27;
    v59 = CFSTR("IsAppInitiated");
    v60 = v30;
    v32 = 3;
  }
  WebKit::createDictionary((uint64_t)&v53, (uint64_t)&v56, v32);
  v33 = v53;
  v34 = CFWriteStreamCreateWithAllocatedBuffers(v5, 0);
  if (!v34)
  {
    *a2 = 0;
    if (!v33)
      goto LABEL_60;
    goto LABEL_55;
  }
  v35 = v34;
  if (CFWriteStreamOpen(v34) && CFPropertyListWrite(v33, v35, kCFPropertyListBinaryFormat_v1_0, 0, 0))
  {
    v36 = CFWriteStreamCopyProperty(v35, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
    v37 = (const __CFData *)WTF::checked_cf_cast<__CFData const*>(v36);
    Length = CFDataGetLength(v37);
    v39 = Length + 4;
    WTF::tryFastMalloc((WTF *)(Length + 4));
    if ((_QWORD)v56)
    {
      *(_BYTE *)v56 = 0;
      *(_BYTE *)(v56 + 1) = 0;
      *(_BYTE *)(v56 + 2) = 0;
      *(_BYTE *)(v56 + 3) = 2;
      v66.location = 0;
      v66.length = Length;
      CFDataGetBytes(v37, v66, (UInt8 *)(v56 + 4));
      v41 = a2;
      v42 = v56;
      *(_QWORD *)&v56 = 0;
      v43 = (WebKit *)API::Object::newObject(0x30uLL, 8);
      *(_QWORD *)v43 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v43);
      *(_QWORD *)v43 = &off_1E34AE750;
      *((_QWORD *)v43 + 2) = v42;
      *((_QWORD *)v43 + 3) = v39;
      a2 = v41;
      *((_QWORD *)v43 + 4) = WebKit::encodeLegacySessionState(WebKit::SessionState const&)::$_0::__invoke;
      *((_QWORD *)v43 + 5) = 0;
      v44 = (WTF *)v56;
    }
    else
    {
      v44 = 0;
      v43 = 0;
    }
    *a2 = v43;
    WTF::fastFree(v44, v40);
    if (v37)
      CFRelease(v37);
  }
  else
  {
    *a2 = 0;
  }
  CFRelease(v35);
  if (v33)
LABEL_55:
    CFRelease(v33);
LABEL_60:
  if (v30)
    CFRelease(v30);
  if (v28)
    CFRelease(v28);
  v45 = v54;
  v54 = 0;
  if (!v45)
  {
    if (!v31)
      return;
LABEL_68:
    CFRelease(v31);
    return;
  }
  CFRelease(v45);
  if (v31)
    goto LABEL_68;
}

uint64_t WebKit::createDictionary(uint64_t result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  void **v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void *v18;
  void **values;
  uint64_t v20;
  void **keys;
  uint64_t v22;

  v4 = (_QWORD *)result;
  v22 = 0;
  v20 = 0;
  if (a3)
  {
    if (a3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v22) = a3;
    keys = (void **)WTF::fastMalloc((WTF *)(8 * a3));
    v6 = (void **)WTF::fastMalloc((WTF *)(8 * a3));
    v7 = 0;
    LODWORD(v20) = a3;
    values = v6;
    v8 = a2 + 8;
    v9 = 16 * a3;
    do
    {
      v10 = HIDWORD(v22);
      if (HIDWORD(v22) == (_DWORD)v22)
      {
        v11 = HIDWORD(v22) + ((unint64_t)HIDWORD(v22) >> 2);
        if (v11 >= 0x10)
          v12 = v11 + 1;
        else
          v12 = 16;
        if (v12 <= (unint64_t)HIDWORD(v22) + 1)
          v13 = HIDWORD(v22) + 1;
        else
          v13 = v12;
        WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&keys, v13);
        v10 = HIDWORD(v22);
        v14 = &keys[HIDWORD(v22)];
      }
      else
      {
        v14 = &keys[HIDWORD(v22)];
      }
      *v14 = *(void **)(v8 - 8);
      HIDWORD(v22) = v10 + 1;
      if (v7 == (_DWORD)v20)
      {
        v15 = (void **)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&values, v7 + 1, v8);
        v7 = HIDWORD(v20);
        v6 = values;
        v16 = &values[HIDWORD(v20)];
      }
      else
      {
        v16 = &v6[v7];
        v15 = (void **)v8;
      }
      *v16 = *v15;
      HIDWORD(v20) = ++v7;
      v8 += 16;
      v9 -= 16;
    }
    while (v9);
    v17 = keys;
  }
  else
  {
    v6 = 0;
    v17 = 0;
  }
  result = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v17, (const void **)v6, a3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *v4 = result;
  if (v6)
    result = WTF::fastFree((WTF *)v6, v18);
  if (v17)
    return WTF::fastFree((WTF *)v17, v18);
  return result;
}

uint64_t WTF::checked_cf_cast<__CFData const*>(CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t result;

  if (!cf)
    return (uint64_t)cf;
  v2 = CFGetTypeID(cf);
  if (v2 == CFDataGetTypeID())
    return (uint64_t)cf;
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::decodeLegacySessionState(uint64_t a1, unint64_t a2, uint64_t a3)
{
  const __CFAllocator *v4;
  const __CFData *v5;
  CFPropertyListRef v6;
  const __CFDictionary *v7;
  uint64_t v8;
  const void *Value;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const void *v12;
  const __CFNumber *v13;
  BOOL v14;
  const void *v15;
  const __CFNumber *v16;
  void *v17;
  const void *v18;
  const __CFArray *v19;
  unsigned int v20;
  const void *v22;
  const __CFNumber *v23;
  const void *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  WTF *v30;
  const void *v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const void *v36;
  const __CFNumber *v37;
  _QWORD *v38;
  const void *v39;
  const void *v40;
  CFTypeID v41;
  WTF::StringImpl *v42[5];
  WTF::StringImpl *valuePtr;

  if (a2 < 4 || bswap32(*(_DWORD *)a1) != 2)
    return 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)(a1 + 4), a2 - 4);
  v6 = CFPropertyListCreateWithData(v4, v5, 0, 0, 0);
  if (v5)
    CFRelease(v5);
  v7 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(v6);
  v8 = (uint64_t)v7;
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, CFSTR("SessionHistory"));
    v10 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(Value);
    if (v10)
    {
      v11 = v10;
      v12 = CFDictionaryGetValue(v10, CFSTR("SessionHistoryVersion"));
      v13 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v12);
      if (!v13)
      {
        v22 = CFDictionaryGetValue(v11, CFSTR("SessionHistoryCurrentIndex"));
        v23 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v22);
        if (!v23)
          goto LABEL_49;
        v42[0] = 0;
        if (!CFNumberGetValue(v23, kCFNumberCFIndexType, v42) || (uint64_t)v42[0] < -1)
          goto LABEL_49;
        v25 = CFDictionaryGetValue(v11, CFSTR("SessionHistoryEntries"));
        v26 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(v25);
        if (!v26)
          goto LABEL_49;
        v27 = v26;
        v28 = v42[0];
        if (!WebKit::decodeSessionHistoryEntries(v26, a3))
          goto LABEL_49;
        if (v28 == (WTF::StringImpl *)-1)
        {
          if (!CFArrayGetCount(v27))
            goto LABEL_39;
        }
        else if (LODWORD(v42[0]) < (unint64_t)*(unsigned int *)(a3 + 12))
        {
          *(_DWORD *)(a3 + 16) = v42[0];
          *(_BYTE *)(a3 + 20) = 1;
          goto LABEL_39;
        }
LABEL_49:
        v8 = 0;
        goto LABEL_57;
      }
      valuePtr = 0;
      if (CFNumberGetValue(v13, kCFNumberCFIndexType, &valuePtr))
        v14 = valuePtr == (WTF::StringImpl *)1;
      else
        v14 = 0;
      if (!v14)
        goto LABEL_49;
      v15 = CFDictionaryGetValue(v11, CFSTR("SessionHistoryCurrentIndex"));
      v16 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v15);
      if (v16)
      {
        v42[0] = 0;
        if (!CFNumberGetValue(v16, kCFNumberCFIndexType, v42))
          goto LABEL_49;
        if (((unint64_t)v42[0] & 0x8000000000000000) != 0)
          goto LABEL_49;
        v18 = CFDictionaryGetValue(v11, CFSTR("SessionHistoryEntries"));
        v19 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(v18);
        if (!v19)
          goto LABEL_49;
        if ((WebKit::decodeSessionHistoryEntries(v19, a3) & 1) == 0)
          goto LABEL_49;
        v20 = v42[0];
        *(_DWORD *)(a3 + 16) = v42[0];
        *(_BYTE *)(a3 + 20) = 1;
        if (*(unsigned int *)(a3 + 12) <= (unint64_t)v20)
          goto LABEL_49;
      }
      else
      {
        if (*(_BYTE *)(a3 + 20))
          *(_BYTE *)(a3 + 20) = 0;
        v29 = *(_DWORD *)(a3 + 12);
        if (v29)
          WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 312 * v29));
        v30 = *(WTF **)a3;
        if (*(_QWORD *)a3)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
          WTF::fastFree(v30, v17);
        }
        v42[0] = 0;
        *(_QWORD *)a3 = 0;
        v42[1] = 0;
        *(_QWORD *)(a3 + 8) = 0;
        WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v17);
      }
    }
LABEL_39:
    v31 = CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("ProvisionalURL"));
    v32 = WTF::dynamic_cf_cast<__CFString const*>(v31);
    if (!v32)
      goto LABEL_50;
    MEMORY[0x19AEABCC8](&valuePtr, v32);
    MEMORY[0x19AEABB0C](v42, &valuePtr, 0);
    WTF::URL::operator=(a3 + 32, (WTF::StringImpl *)v42);
    v34 = v42[0];
    v42[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = valuePtr;
    valuePtr = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v33);
      else
        *(_DWORD *)v35 -= 2;
    }
    if ((*(_BYTE *)(a3 + 40) & 1) != 0)
    {
LABEL_50:
      v36 = CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("RenderTreeSize"));
      v37 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v36);
      v38 = (_QWORD *)(a3 + 24);
      if (v37)
        CFNumberGetValue(v37, kCFNumberSInt64Type, v38);
      else
        *v38 = 0;
      v39 = CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("IsAppInitiated"));
      if (v39 && (v40 = v39, v41 = CFGetTypeID(v39), v41 == CFBooleanGetTypeID()))
      {
        *(_BYTE *)(a3 + 72) = v40 == (const void *)*MEMORY[0x1E0C9AE50];
        v8 = 1;
      }
      else
      {
        v8 = 1;
        *(_BYTE *)(a3 + 72) = 1;
      }
      goto LABEL_57;
    }
    goto LABEL_49;
  }
LABEL_57:
  if (v6)
    CFRelease(v6);
  return v8;
}

const void *WTF::dynamic_cf_cast<__CFDictionary const*>(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFDictionaryGetTypeID())
      return v1;
    else
      return 0;
  }
  return result;
}

const void *WTF::dynamic_cf_cast<__CFString const*>(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFStringGetTypeID())
      return v1;
    else
      return 0;
  }
  return result;
}

const void *WTF::dynamic_cf_cast<__CFNumber const*>(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFNumberGetTypeID())
      return v1;
    else
      return 0;
  }
  return result;
}

void WebKit::SecItemShimProxy::~SecItemShimProxy(WebKit::SecItemShimProxy *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::SecItemShimProxy::secItemRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t *a4)
{
  const __CFDictionary *v7;
  OSStatus v8;
  uint64_t v9;
  OSStatus v10;
  uint64_t v11;
  OSStatus v12;
  const __CFArray *v13;
  CFTypeID v14;
  const void *ValueAtIndex;
  CFTypeID v16;
  unint64_t Count;
  unint64_t v18;
  uint64_t v19;
  CFIndex v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  unint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  CFTypeRef v36;
  CFTypeRef result;
  const void *v38[2];
  int v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  char v43;
  _BYTE cf[24];
  int v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (WebKit::dictionaryContainsInMemoryObject(*(const __CFDictionary **)(a3 + 8), a2))
  {
    v34 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_59;
    *(_DWORD *)cf = 136315138;
    *(_QWORD *)&cf[4] = "void WebKit::SecItemShimProxy::secItemRequest(IPC::Connection &, const SecItemRequestData &, Com"
                        "pletionHandler<void (std::optional<SecItemResponseData> &&)> &&)";
    v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/mac/SecItemShimProxy.cpp 95: Invalid mess"
          "age dispatched %s";
    goto LABEL_61;
  }
  if (WebKit::dictionaryContainsInMemoryObject(*(const __CFDictionary **)(a3 + 16), v7))
  {
    v34 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_59;
    *(_DWORD *)cf = 136315138;
    *(_QWORD *)&cf[4] = "void WebKit::SecItemShimProxy::secItemRequest(IPC::Connection &, const SecItemRequestData &, Com"
                        "pletionHandler<void (std::optional<SecItemResponseData> &&)> &&)";
    v35 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/mac/SecItemShimProxy.cpp 96: Invalid mess"
          "age dispatched %s";
LABEL_61:
    _os_log_fault_impl(&dword_196BCC000, v34, OS_LOG_TYPE_FAULT, v35, cf, 0xCu);
LABEL_59:
    *((_BYTE *)a2 + 98) = 1;
    v38[0] = 0;
    v39 = 0;
    LODWORD(v40) = -50;
    LOBYTE(v41[0]) = 0;
    v42 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
    *(_DWORD *)cf = v40;
    cf[8] = 0;
    v45 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
    v46 = 1;
LABEL_17:
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v46)
    {
      if (v45 != -1)
        ((void (*)(CFTypeRef *, _BYTE *))off_1E34DFDC8[v45])(&result, &cf[8]);
      v45 = -1;
    }
    if (v42 != -1)
      ((void (*)(CFTypeRef *, _QWORD *))off_1E34DFDC8[v42])(&result, v41);
    v42 = -1;
    if (v39 != -1)
LABEL_12:
      ((void (*)(CFTypeRef *, const void **))off_1E34DFDC8[v39])(&result, v38);
    return;
  }
  switch(*(_BYTE *)a3)
  {
    case 0:
      v38[0] = 0;
      v39 = 0;
      LODWORD(v40) = -50;
      goto LABEL_16;
    case 1:
      result = 0;
      v12 = SecItemCopyMatching(*(CFDictionaryRef *)(a3 + 8), &result);
      v13 = (const __CFArray *)result;
      v36 = result;
      v38[0] = 0;
      v39 = 0;
      if (!result)
        goto LABEL_43;
      v14 = CFGetTypeID(result);
      if (v14 != CFArrayGetTypeID()
        || !CFArrayGetCount(v13)
        || (ValueAtIndex = CFArrayGetValueAtIndex(v13, 0),
            v16 = CFGetTypeID(ValueAtIndex),
            v16 != SecCertificateGetTypeID()))
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>((uint64_t)v38, v38, &v36);
        goto LABEL_43;
      }
      v40 = 0;
      v41[0] = 0;
      Count = CFArrayGetCount(v13);
      if (Count)
      {
        v18 = Count;
        if (Count >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19747A104);
        }
        v19 = WTF::fastMalloc((WTF *)(8 * Count));
        v20 = 0;
        LODWORD(v41[0]) = v18;
        v40 = v19;
        while (1)
        {
          v21 = CFArrayGetValueAtIndex(v13, v20);
          if (v21)
          {
            v22 = v21;
            v23 = CFGetTypeID(v21);
            if (v23 == SecCertificateGetTypeID())
            {
              CFRetain(v22);
              *(_QWORD *)cf = v22;
              cf[8] = 1;
              v24 = HIDWORD(v41[0]);
              if (HIDWORD(v41[0]) != LODWORD(v41[0]))
              {
                *(_QWORD *)cf = 0;
                *(_QWORD *)(v40 + 8 * HIDWORD(v41[0])) = v22;
                HIDWORD(v41[0]) = v24 + 1;
LABEL_38:
                v29 = *(const void **)cf;
                *(_QWORD *)cf = 0;
                if (v29)
                  CFRelease(v29);
                goto LABEL_40;
              }
              v25 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41[0]) + 1, (unint64_t)cf);
              v26 = HIDWORD(v41[0]);
              v27 = v40;
              v28 = *v25;
              *v25 = 0;
              *(_QWORD *)(v27 + 8 * v26) = v28;
              HIDWORD(v41[0]) = v26 + 1;
              if (cf[8])
                goto LABEL_38;
            }
          }
LABEL_40:
          if (v18 == ++v20)
          {
            v30 = HIDWORD(v41[0]);
            goto LABEL_55;
          }
        }
      }
      v30 = 0;
LABEL_55:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v40, v30);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v38, (uint64_t)v38, &v40);
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v33);
LABEL_43:
      LODWORD(v40) = v12;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
      *(_DWORD *)cf = v40;
      cf[8] = 0;
      v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
      v46 = 1;
      v31 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v31 + 16))(v31, cf);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      if (v46)
      {
        if (v45 != -1)
          ((void (*)(char *, _BYTE *))off_1E34DFDC8[v45])(&v43, &cf[8]);
        v45 = -1;
      }
      if (v42 != -1)
        ((void (*)(char *, _QWORD *))off_1E34DFDC8[v42])(&v43, v41);
      if (v39 != -1)
        ((void (*)(_BYTE *, const void **))off_1E34DFDC8[v39])(cf, v38);
      v32 = v36;
      v36 = 0;
      if (v32)
        CFRelease(v32);
      break;
    case 2:
      v10 = SecItemAdd(*(CFDictionaryRef *)(a3 + 8), 0);
      goto LABEL_15;
    case 3:
      v10 = SecItemUpdate(*(CFDictionaryRef *)(a3 + 8), *(CFDictionaryRef *)(a3 + 16));
LABEL_15:
      v38[0] = 0;
      v39 = 0;
      LODWORD(v40) = v10;
LABEL_16:
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
      *(_DWORD *)cf = v40;
      cf[8] = 0;
      v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
      v46 = 1;
      goto LABEL_17;
    case 4:
      v8 = SecItemDelete(*(CFDictionaryRef *)(a3 + 8));
      v38[0] = 0;
      v39 = 0;
      LODWORD(v40) = v8;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)v38);
      *(_DWORD *)cf = v40;
      cf[8] = 0;
      v45 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v41);
      v46 = 1;
      v9 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, cf);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v46)
      {
        if (v45 != -1)
          ((void (*)(CFTypeRef *, _BYTE *))off_1E34DFDC8[v45])(&result, &cf[8]);
        v45 = -1;
      }
      if (v42 != -1)
        ((void (*)(CFTypeRef *, _QWORD *))off_1E34DFDC8[v42])(&result, v41);
      v42 = -1;
      if (v39 != -1)
        goto LABEL_12;
      return;
    default:
      return;
  }
}

const __CFDictionary *WebKit::dictionaryContainsInMemoryObject(const __CFDictionary *this, const __CFDictionary *a2)
{
  const __CFDictionary *v2;

  if (this)
  {
    v2 = this;
    if (CFDictionaryContainsKey(this, (const void *)*MEMORY[0x1E0CD70B0]))
      return (const __CFDictionary *)1;
    else
      return (const __CFDictionary *)(CFDictionaryContainsKey(v2, (const void *)*MEMORY[0x1E0CD70E8]) != 0);
  }
  return this;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::encodeSessionHistoryEntryData(WebKit::FrameState const&)::$_0 &&>>()
{
  CFAllocatorRef v0;
  const void *v1;
  CFAllocatorContext v2;

  *(_OWORD *)&v2.reallocate = unk_1E34DFD80;
  v2.preferredSize = 0;
  memset(&v2, 0, 48);
  v0 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v2);
  v1 = (const void *)qword_1ECE72E60;
  qword_1ECE72E60 = (uint64_t)v0;
  if (v1)
    CFRelease(v1);
}

void *WebKit::encodeFrameStateNode(size_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  size_t *v7;
  size_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  size_t *v12;
  size_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t *v18;
  size_t v19;
  unsigned int v20;
  size_t *v21;
  uint64_t *v22;
  uint64_t v23;
  size_t *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  size_t *v33;
  const void *v34;
  size_t v35;
  unsigned int v36;
  size_t *v37;
  size_t *v38;
  size_t *v39;
  uint64_t *v40;

  v37 = (size_t *)*(unsigned int *)(a2 + 228);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 8uLL, 8u);
  v4 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 216);
    v6 = 248 * v4;
    do
    {
      v7 = WebKit::HistoryEntryDataEncoder::operator<<(a1, v5 + 1);
      v8 = WebKit::HistoryEntryDataEncoder::operator<<(v7, v5);
      WebKit::encodeFrameStateNode(v8, v5);
      v5 += 31;
      v6 -= 248;
    }
    while (v6);
  }
  v37 = *(size_t **)(a2 + 80);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 8uLL, 8u);
  v37 = (size_t *)*(unsigned int *)(a2 + 244);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 8uLL, 8u);
  v9 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(a2 + 232);
    v11 = 8 * v9;
    do
    {
      WebKit::HistoryEntryDataEncoder::operator<<(a1, v10++);
      v11 -= 8;
    }
    while (v11);
  }
  if (*(_BYTE *)(a2 + 136))
  {
    v12 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)(a2 + 112));
    LOBYTE(v37) = 1;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v12, &v37, 1uLL, 1u);
    if (!*(_BYTE *)(a2 + 136))
    {
LABEL_22:
      v33 = (size_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v33, v34, v35, v36);
    }
    LOBYTE(v37) = 0;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 1uLL, 1u);
    v37 = 0;
    v38 = 0;
    v13 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t)&v37);
    v37 = (size_t *)*(unsigned int *)(a2 + 132);
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v13, &v37, 8uLL, 8u);
    v14 = *(unsigned int *)(a2 + 132);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(a2 + 120);
      v16 = 56 * v14;
      while (1)
      {
        LODWORD(v37) = *(_DWORD *)(v15 + 48);
        WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
        v37 = a1;
        v38 = a1;
        v39 = a1;
        v17 = *(unsigned int *)(v15 + 48);
        if ((_DWORD)v17 == -1)
          break;
        v40 = (uint64_t *)&v37;
        ((void (*)(uint64_t **, uint64_t))off_1E34DFD98[v17])(&v40, v15);
        v15 += 56;
        v16 -= 56;
        if (!v16)
          goto LABEL_13;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
LABEL_13:
    LOBYTE(v37) = 0;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 1uLL, 1u);
    v37 = 0;
    v18 = a1;
    v19 = 8;
    v20 = 8;
  }
  else
  {
    v37 = 0;
    v18 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)&v37);
    LOBYTE(v37) = 0;
    v19 = 1;
    v20 = 1;
  }
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v18, &v37, v19, v20);
  v37 = *(size_t **)(a2 + 88);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 8uLL, 8u);
  v21 = WebKit::HistoryEntryDataEncoder::operator<<(a1, (uint64_t *)(a2 + 16));
  LODWORD(v37) = *(_DWORD *)(a2 + 96);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v21, &v37, 4uLL, 4u);
  LODWORD(v37) = *(_DWORD *)(a2 + 100);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = *(_DWORD *)(a2 + 108);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LOBYTE(v37) = *(_BYTE *)(a2 + 72);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 1uLL, 1u);
  if (*(_BYTE *)(a2 + 72))
    WebKit::HistoryEntryDataEncoder::operator<<(a1, a2 + 56);
  v22 = (uint64_t *)(a2 + 24);
  v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    if (*(_DWORD *)(v23 + 4) >= 0x4000u)
      v22 = (uint64_t *)MEMORY[0x1E0CBF3B8];
  }
  v24 = WebKit::HistoryEntryDataEncoder::operator<<(a1, v22);
  v25 = *(_DWORD *)(a2 + 148);
  v26 = *(_DWORD *)(a2 + 152);
  v27 = *(_DWORD *)(a2 + 156);
  LODWORD(v37) = *(_DWORD *)(a2 + 144);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v24, &v37, 4uLL, 4u);
  LODWORD(v37) = v25;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = v26;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = v27;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  v28 = *(_QWORD *)(a2 + 168);
  v29 = HIDWORD(*(_QWORD *)(a2 + 160));
  LODWORD(v37) = *(_QWORD *)(a2 + 160);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = v29;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = v28;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = HIDWORD(v28);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  v30 = *(_DWORD *)(a2 + 180);
  LODWORD(v37) = *(_DWORD *)(a2 + 176);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = v30;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  v31 = HIDWORD(*(_QWORD *)(a2 + 184));
  LODWORD(v37) = *(_QWORD *)(a2 + 184);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LODWORD(v37) = v31;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 4uLL, 4u);
  LOBYTE(v37) = *(_BYTE *)(a2 + 192);
  return WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v37, 1uLL, 1u);
}

void *WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(size_t *a1, const void *a2, size_t a3, unsigned int a4)
{
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;

  if (!a2 && a3 || (v7 = *a1, v8 = (*a1 + a4 - 1) / a4 * a4, v9 = a3 + v8, __CFADD__(a3, v8)))
  {
    __break(0xC471u);
    JUMPOUT(0x19747A71CLL);
  }
  v10 = a1[1];
  if (v10 >= v9)
  {
    v11 = a1[2];
  }
  else
  {
    do
    {
      if ((v10 & 0x8000000000000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19747A724);
      }
      v10 *= 2;
    }
    while (v10 < v9);
    v11 = WTF::fastRealloc((WTF *)a1[2], (void *)v10);
    a1[1] = v10;
    a1[2] = v11;
    v7 = *a1;
  }
  bzero((void *)(v11 + v7), v8 - v7);
  *a1 = v9;
  v12 = a1[2];
  a1[3] = v12 + v9;
  return memcpy((void *)(v12 + v8), a2, a3);
}

size_t *WebKit::HistoryEntryDataEncoder::operator<<(size_t *a1, uint64_t *a2)
{
  uint64_t v4;
  size_t *result;
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF *v11;
  WTF *v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  void *v22;
  WTF *v23;
  WTF *v25;
  unint64_t v26;
  _BYTE v27[64];
  WTF *v28;
  uint64_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  if (!*a2)
  {
    LODWORD(v25) = -1;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v25, 4uLL, 4u);
    return a1;
  }
  LODWORD(v25) = *(_DWORD *)(*a2 + 4);
  v4 = v25;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v25, 4uLL, 4u);
  v25 = (WTF *)(2 * v4);
  result = (size_t *)WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v25, 8uLL, 8u);
  v6 = *a2;
  if (*a2)
  {
    v7 = *(WTF **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v25 = (WTF *)v27;
  v26 = 32;
  v28 = 0;
  v29 = 0;
  v9 = v8;
  if ((v8 & 0x100000000) == 0)
  {
LABEL_20:
    v28 = v7;
    v29 = v9;
    WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, v7, 2 * v9, 2u);
    v23 = v25;
    if (v27 != (_BYTE *)v25 && v25 != 0)
    {
      v25 = 0;
      LODWORD(v26) = 0;
      WTF::fastFree(v23, v22);
    }
    return a1;
  }
  if (v8 <= 0x20uLL)
  {
    HIDWORD(v26) = v8;
    v11 = (WTF *)v27;
    v12 = (WTF *)v27;
    goto LABEL_17;
  }
  if (v8 <= 0x29uLL)
    v10 = 41;
  else
    v10 = v8;
  if (!(v10 >> 31))
  {
    v11 = (WTF *)WTF::fastMalloc((WTF *)(2 * v10));
    v25 = v11;
    v26 = __PAIR64__(v8, v10);
    if (v8 < 0x40uLL)
    {
      v12 = v11;
    }
    else
    {
      v12 = (WTF *)((char *)v11 + 2 * (v8 & 0xFFFFFFC0));
      v13 = 0uLL;
      v14 = (char *)v11;
      do
      {
        v30.val[0] = *(int8x16_t *)v7;
        v15 = *((int8x16_t *)v7 + 1);
        v31.val[0] = (int8x16_t)*((_OWORD *)v7 + 2);
        v16 = *((_OWORD *)v7 + 3);
        v7 = (WTF *)((char *)v7 + 64);
        v17 = v16;
        v31.val[1] = 0uLL;
        v32.val[0] = v15;
        v30.val[1] = 0uLL;
        v18 = v14;
        vst2q_s8(v18, v30);
        v18 += 32;
        v32.val[1] = 0uLL;
        vst2q_s8(v18, v32);
        v19 = v14 + 64;
        vst2q_s8(v19, v31);
        v20 = v14 + 96;
        vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
        v14 += 128;
      }
      while (v14 != (char *)v12);
    }
LABEL_17:
    while (v12 != (WTF *)((char *)v11 + 2 * v8))
    {
      v21 = *(unsigned __int8 *)v7;
      v7 = (WTF *)((char *)v7 + 1);
      *(_WORD *)v12 = v21;
      v12 = (WTF *)((char *)v12 + 2);
    }
    v7 = v25;
    v9 = HIDWORD(v26);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

size_t *WebKit::HistoryEntryDataEncoder::operator<<(size_t *a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(unsigned int *)(a2 + 12);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, &v5, 8uLL, 8u);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(a1, *(const void **)a2, *(unsigned int *)(a2 + 12), 1u);
  return a1;
}

size_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_0,WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_1,WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String> const&>(size_t ***a1, uint64_t a2)
{
  return WebKit::HistoryEntryDataEncoder::operator<<(**a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_0,WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_1,WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  size_t *v4;
  size_t *v5;
  size_t *v6;
  size_t *v7;
  uint64_t v8;
  size_t *v9;
  double v10;
  double v12;

  v3 = *a1;
  WebKit::HistoryEntryDataEncoder::operator<<(*(size_t **)(*a1 + 8), (uint64_t *)a2);
  v4 = *(size_t **)(v3 + 8);
  v12 = 0.0;
  WebKit::HistoryEntryDataEncoder::operator<<(v4, (uint64_t *)&v12);
  v5 = *(size_t **)(v3 + 8);
  LOBYTE(v12) = 0;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v5, &v12, 1uLL, 1u);
  v6 = *(size_t **)(v3 + 8);
  v12 = *(double *)(a2 + 8);
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v6, &v12, 8uLL, 8u);
  v7 = *(size_t **)(v3 + 8);
  if (*(_BYTE *)(a2 + 24))
    v8 = *(_QWORD *)(a2 + 16);
  else
    v8 = -1;
  v12 = *(double *)&v8;
  WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v7, &v12, 8uLL, 8u);
  v9 = *(size_t **)(v3 + 8);
  v10 = *(double *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 40))
    v10 = NAN;
  v12 = v10;
  return WebKit::HistoryEntryDataEncoder::encodeFixedLengthData(v9, &v12, 8uLL, 8u);
}

size_t *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_0,WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_1,WebKit::encodeFormDataElement(WebKit::HistoryEntryDataEncoder &,WebKit::HTTPBody::Element const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String> const&>(uint64_t a1, uint64_t *a2)
{
  return WebKit::HistoryEntryDataEncoder::operator<<(*(size_t **)(*(_QWORD *)a1 + 16), a2);
}

CFIndex WebKit::decodeSessionHistoryEntries(const __CFArray *a1, uint64_t a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  const void *ValueAtIndex;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFIndex v9;
  BOOL v10;
  const __CFString *v11;
  const void *Value;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const __CFString *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const __CFNumber *v23;
  char v24;
  char v25;
  const __CFData *v26;
  const __CFData *v27;
  CFTypeID v28;
  const UInt8 *BytePtr;
  CFIndex result;
  const UInt8 *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  const UInt8 *v35;
  unint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebCore::SerializedScriptValue *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WebCore::SerializedScriptValue *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WebCore::SerializedScriptValue *v50;
  int v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned int *v56;
  WebKit::ViewSnapshot *v57;
  WebKit::ViewSnapshot *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  const void *v64;
  uint64_t v65;
  CFIndex v66;
  const __CFArray *v67;
  __int128 v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  char v72;
  unsigned int *v73;
  char v74;
  char v75;
  WebKit::ViewSnapshot *v76;
  WebCore::SerializedScriptValue *valuePtr;
  WebCore::SerializedScriptValue *v78;

  v3 = a1;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 1;
  v5 = Count;
  ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
  v7 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(ValueAtIndex);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = 0;
  v10 = 0;
  v11 = CFSTR("SessionHistoryEntryTitle");
  v65 = a2;
  v66 = v5;
  v67 = v3;
  while (1)
  {
    v68 = 0uLL;
    v69 = 0;
    WebKit::FrameState::FrameState((WebKit::FrameState *)&v70);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    Value = CFDictionaryGetValue(v8, v11);
    v13 = WTF::dynamic_cf_cast<__CFString const*>(Value);
    if (!v13
      || (v14 = v13,
          v15 = CFDictionaryGetValue(v8, CFSTR("SessionHistoryEntryURL")),
          (v16 = WTF::dynamic_cf_cast<__CFString const*>(v15)) == 0))
    {
      v25 = 0;
      goto LABEL_46;
    }
    v17 = v16;
    v18 = v11;
    v19 = CFDictionaryGetValue(v8, CFSTR("SessionHistoryEntryOriginalURL"));
    v20 = WTF::dynamic_cf_cast<__CFString const*>(v19);
    if (!v20)
    {
      v25 = 0;
LABEL_26:
      v11 = v18;
      v3 = v67;
      goto LABEL_46;
    }
    v21 = v20;
    v22 = CFDictionaryGetValue(v8, CFSTR("SessionHistoryEntryShouldOpenExternalURLsPolicyKey"));
    v23 = (const __CFNumber *)WTF::dynamic_cf_cast<__CFNumber const*>(v22);
    if (v23)
    {
      valuePtr = 0;
      CFNumberGetValue(v23, kCFNumberSInt64Type, &valuePtr);
      v24 = (char)valuePtr;
    }
    else
    {
      v24 = 1;
    }
    v26 = (const __CFData *)CFDictionaryGetValue(v8, CFSTR("SessionHistoryEntryData"));
    if (!v26)
      goto LABEL_27;
    v27 = v26;
    v28 = CFGetTypeID(v26);
    if (v28 != CFDataGetTypeID())
      goto LABEL_27;
    BytePtr = CFDataGetBytePtr(v27);
    result = CFDataGetLength(v27);
    if (result < 0)
      break;
    v31 = &BytePtr[result];
    v78 = (WebCore::SerializedScriptValue *)&BytePtr[result];
    v32 = (unint64_t)(BytePtr + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (unint64_t)&BytePtr[result - v32] > 7 && (unint64_t)v31 >= v32;
    v34 = v32 + 8;
    if (!v33)
      v34 = (unint64_t)(v31 + 1);
    v35 = (const UInt8 *)((v34 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v33 = v31 >= v35;
    v36 = v31 - v35;
    if (!v33
      || v36 < 4
      || (v37 = *(_DWORD *)v35, valuePtr = (WebCore::SerializedScriptValue *)(v35 + 4), v37 != 2)
      || (WebKit::decodeBackForwardTreeNode((unint64_t *)&valuePtr, (uint64_t)&v70), valuePtr != v78))
    {
      v25 = 0;
      v5 = v66;
      goto LABEL_26;
    }
LABEL_27:
    MEMORY[0x19AEABCC8](&valuePtr, v14);
    v39 = valuePtr;
    valuePtr = 0;
    v40 = v69;
    v69 = v39;
    if (v40)
    {
      v41 = *(_DWORD *)v40 - 2;
      if (*(_DWORD *)v40 != 2)
        goto LABEL_31;
      WTF::StringImpl::destroy(v40, v38);
      v40 = valuePtr;
      valuePtr = 0;
      if (v40)
      {
        v41 = *(_DWORD *)v40 - 2;
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::destroy(v40, v42);
          goto LABEL_32;
        }
LABEL_31:
        *(_DWORD *)v40 = v41;
      }
    }
LABEL_32:
    v72 = v24;
    MEMORY[0x19AEABCC8](&valuePtr, v17);
    v44 = valuePtr;
    valuePtr = 0;
    v45 = v70;
    v70 = v44;
    if (v45)
    {
      v46 = *(_DWORD *)v45 - 2;
      if (*(_DWORD *)v45 != 2)
        goto LABEL_36;
      WTF::StringImpl::destroy(v45, v43);
      v45 = valuePtr;
      valuePtr = 0;
      if (v45)
      {
        v46 = *(_DWORD *)v45 - 2;
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::destroy(v45, v47);
          goto LABEL_37;
        }
LABEL_36:
        *(_DWORD *)v45 = v46;
      }
    }
LABEL_37:
    MEMORY[0x19AEABCC8](&valuePtr, v21);
    v49 = valuePtr;
    valuePtr = 0;
    v50 = v71;
    v71 = v49;
    v11 = v18;
    v3 = v67;
    if (v50)
    {
      v51 = *(_DWORD *)v50 - 2;
      if (*(_DWORD *)v50 != 2)
        goto LABEL_41;
      WTF::StringImpl::destroy(v50, v48);
      v50 = valuePtr;
      valuePtr = 0;
      if (v50)
      {
        v51 = *(_DWORD *)v50 - 2;
        if (*(_DWORD *)v50 == 2)
        {
          WTF::StringImpl::destroy(v50, v52);
          goto LABEL_42;
        }
LABEL_41:
        *(_DWORD *)v50 = v51;
      }
    }
LABEL_42:
    v53 = *(_DWORD *)(v65 + 12);
    if (v53 == *(_DWORD *)(v65 + 8))
    {
      WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>(v65, (unint64_t)&v68);
    }
    else
    {
      v54 = *(_QWORD *)v65 + 312 * v53;
      *(_OWORD *)v54 = v68;
      v55 = v69;
      v69 = 0;
      *(_QWORD *)(v54 + 16) = v55;
      WebKit::FrameState::FrameState(v54 + 24, (uint64_t *)&v70);
      *(_BYTE *)(v54 + 272) = v72;
      v56 = v73;
      v73 = 0;
      *(_QWORD *)(v54 + 280) = v56;
      *(_BYTE *)(v54 + 288) = v74;
      *(_BYTE *)(v54 + 296) = v75;
      v57 = v76;
      v76 = 0;
      *(_QWORD *)(v54 + 304) = v57;
      ++*(_DWORD *)(v65 + 12);
    }
    v25 = 1;
    v5 = v66;
LABEL_46:
    v58 = v76;
    v76 = 0;
    if (v58)
      WTF::RefCounted<WebKit::ViewSnapshot>::deref(v58);
    v59 = v73;
    v73 = 0;
    if (v59)
    {
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        atomic_store(1u, v59);
        valuePtr = (WebCore::SerializedScriptValue *)v59;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&valuePtr);
      }
    }
    WebKit::FrameState::~FrameState(&v70);
    v63 = v69;
    v69 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::destroy(v63, v62);
        if ((v25 & 1) == 0)
          return v10;
        goto LABEL_58;
      }
      *(_DWORD *)v63 -= 2;
    }
    if ((v25 & 1) == 0)
      return v10;
LABEL_58:
    v10 = ++v9 >= v5;
    if (v9 != v5)
    {
      v64 = CFArrayGetValueAtIndex(v3, v9);
      v8 = (const __CFDictionary *)WTF::dynamic_cf_cast<__CFDictionary const*>(v64);
      if (v8)
        continue;
    }
    return v10;
  }
  __break(0xC471u);
  return result;
}

void WebKit::decodeBackForwardTreeNode(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  unint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  unint64_t v42;
  int v43;
  _DWORD *v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  BOOL v66;
  unint64_t v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  unint64_t v75;
  _BOOL4 v76;
  unint64_t v77;
  WTF *v78;
  void *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  _QWORD *v82;
  _BOOL4 v83;
  _QWORD *v84;
  unint64_t v85;
  unsigned int *v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  unsigned int v91;
  _DWORD *v92;
  unint64_t v93;
  char v94;
  int v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  int v106;
  void *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  int *v110;
  _DWORD *v111;
  unint64_t v112;
  int v113;
  _DWORD *v114;
  int v115;
  int *v116;
  unint64_t v117;
  _DWORD *v118;
  int *v119;
  unint64_t v120;
  int v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  unint64_t v125;
  char v126;
  int v127;
  unint64_t v128;
  int *v129;
  _DWORD *v130;
  _BOOL4 v131;
  unint64_t v132;
  _DWORD *v133;
  int v134;
  int *v135;
  unint64_t v136;
  int v137;
  _DWORD *v138;
  int v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  int v143;
  int v144;
  int *v145;
  unint64_t v146;
  _DWORD *v147;
  int v148;
  int v149;
  int v150;
  int *v151;
  unint64_t v152;
  _DWORD *v153;
  _DWORD *v154;
  unint64_t v155;
  char v156;
  int v157;
  int v158;
  unint64_t v159;
  unsigned int *v160;
  _DWORD *v161;
  unint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  unsigned int v165;
  _DWORD *v166;
  unint64_t v167;
  char v168;
  int v169;
  unsigned int v170;
  unint64_t v171;
  _BYTE *v172;
  unint64_t v173;
  BOOL v174;
  unint64_t v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  uint64_t v183[5];
  int v184;
  WTF *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  char v193;

  v4 = a1[1];
  v5 = (uint64_t *)((*a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v4 >= (unint64_t)v5 && v4 - (unint64_t)v5 > 7)
    v6 = (*a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  else
    v6 = v4 + 1;
  *a1 = v6;
  if (v4 < (unint64_t)v5 || v4 - (unint64_t)v5 <= 7)
  {
    v7 = v4 + 1;
LABEL_13:
    *(_QWORD *)(a2 + 80) = 0;
    v13 = (_QWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v4 >= (unint64_t)v13 && v4 - (unint64_t)v13 > 7)
      v14 = v13;
    else
      v14 = (_QWORD *)(v4 + 1);
    *a1 = (unint64_t)v14;
    if (v4 >= (unint64_t)v13 && v4 - (unint64_t)v13 > 7)
    {
      *(_QWORD *)(a2 + 80) = *v13;
      v4 = a1[1];
      v15 = *a1 + 8;
    }
    else
    {
      v15 = v4 + 1;
    }
    v16 = (_QWORD *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    v17 = v4 >= (unint64_t)v16 && v4 - (unint64_t)v16 > 7;
    if (v17)
      v18 = v16;
    else
      v18 = (_QWORD *)(v4 + 1);
    *a1 = (unint64_t)v18;
    if (v17)
    {
      v19 = *v16;
      *a1 = (unint64_t)(v16 + 1);
      v180 = 0;
      v181 = 0;
      if (v19)
      {
        while (1)
        {
          v182 = 0;
          WebKit::HistoryEntryDataDecoder::operator>>(a1, &v182);
          if (*a1 > a1[1])
            break;
          LODWORD(v21) = HIDWORD(v181);
          if (HIDWORD(v181) == (_DWORD)v181)
          {
            v22 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v180, HIDWORD(v181) + 1, (unint64_t)&v182);
            v21 = HIDWORD(v181);
            v23 = v180;
            v24 = *v22;
            *v22 = 0;
            *(_QWORD *)(v23 + 8 * v21) = v24;
          }
          else
          {
            v25 = v182;
            v182 = 0;
            *(_QWORD *)(v180 + 8 * HIDWORD(v181)) = v25;
          }
          HIDWORD(v181) = v21 + 1;
          v26 = v182;
          v182 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v20);
            else
              *(_DWORD *)v26 -= 2;
          }
          if (!--v19)
            goto LABEL_35;
        }
        v73 = v182;
        v182 = 0;
        if (!v73)
          goto LABEL_249;
LABEL_246:
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v20);
        else
          *(_DWORD *)v73 -= 2;
LABEL_249:
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v180, v20);
        return;
      }
    }
    else
    {
      v180 = 0;
      v181 = 0;
    }
LABEL_35:
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a2 + 232), (uint64_t)&v180);
    v179 = 0;
    WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v179);
    v28 = (unsigned __int8 *)*a1;
    v27 = a1[1];
    v29 = v27 > *a1;
    if (v27 <= *a1)
      v30 = v27 + 1;
    else
      v30 = *a1;
    *a1 = v30;
    if (!v29)
    {
      v72 = v27 + 1;
      goto LABEL_134;
    }
    v31 = *v28;
    v72 = (unint64_t)(v28 + 1);
    if (!v31)
    {
LABEL_134:
      *(_QWORD *)(a2 + 88) = 0;
      v82 = (_QWORD *)((v72 + 7) & 0xFFFFFFFFFFFFFFF8);
      v83 = v27 >= (unint64_t)v82 && v27 - (unint64_t)v82 > 7;
      if (v27 >= (unint64_t)v82 && v27 - (unint64_t)v82 > 7)
        v84 = v82;
      else
        v84 = (_QWORD *)(v27 + 1);
      *a1 = (unint64_t)v84;
      if (v83)
      {
        *(_QWORD *)(a2 + 88) = *v82;
        *a1 += 8;
      }
      WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)(a2 + 16));
      v85 = a1[1];
      v86 = (unsigned int *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v87 = (_DWORD *)(v85 + 1);
      if (v85 >= (unint64_t)v86 && v85 - (unint64_t)v86 > 3)
        v88 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v88 = v85 + 1;
      *a1 = v88;
      if (v85 >= (unint64_t)v86 && v85 - (unint64_t)v86 > 3)
      {
        v91 = *v86;
        v90 = v86 + 1;
        v89 = v91;
      }
      else
      {
        v89 = 0;
        v90 = (_DWORD *)(v85 + 1);
      }
      v92 = (_DWORD *)(((unint64_t)v90 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v66 = v85 >= (unint64_t)v92;
      v93 = v85 - (_QWORD)v92;
      v94 = v66;
      v95 = v94 & (v93 > 3);
      if (v95)
        v87 = v92;
      *a1 = (unint64_t)v87;
      if (v95 == 1)
      {
        v96 = *v92;
        *a1 = (unint64_t)(v92 + 1);
        v97 = (unint64_t)v96 << 32;
      }
      else
      {
        v97 = 0;
      }
      *(_QWORD *)(a2 + 96) = v97 | v89;
      *(_DWORD *)(a2 + 108) = 0;
      v98 = a1[1];
      v99 = (_DWORD *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v98 >= (unint64_t)v99 && v98 - (unint64_t)v99 > 3)
        v100 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v100 = v98 + 1;
      *a1 = v100;
      if (v98 >= (unint64_t)v99 && v98 - (unint64_t)v99 > 3)
      {
        *(_DWORD *)(a2 + 108) = *v99;
        v101 = *a1;
        v102 = a1[1];
        v103 = *a1 + 4;
        v104 = v102 > v103;
        if (v102 <= v103)
          v105 = v102 + 1;
        else
          v105 = *a1 + 4;
        *a1 = v105;
        if (v104)
        {
          v106 = *(unsigned __int8 *)(v101 + 4);
          *a1 = v101 + 5;
          if (v106)
          {
            v182 = 0;
            v183[0] = 0;
            WebKit::HistoryEntryDataDecoder::operator>>(a1, (uint64_t)&v182);
            std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, (uint64_t)&v182);
            v108 = v182;
            if (v182)
            {
              v182 = 0;
              LODWORD(v183[0]) = 0;
              WTF::fastFree(v108, v107);
            }
          }
        }
      }
      else
      {
        *a1 = v98 + 1;
      }
      WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl **)(a2 + 24));
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      v109 = a1[1];
      v110 = (int *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v111 = (_DWORD *)(v109 + 1);
      if (v109 >= (unint64_t)v110 && v109 - (unint64_t)v110 > 3)
        v112 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v112 = v109 + 1;
      *a1 = v112;
      v113 = 0;
      v114 = (_DWORD *)(v109 + 1);
      v115 = 0;
      if (v109 >= (unint64_t)v110 && v109 - (unint64_t)v110 > 3)
      {
        v115 = *v110;
        v114 = v110 + 1;
      }
      v116 = (int *)(((unint64_t)v114 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v109 >= (unint64_t)v116 && v109 - (unint64_t)v116 > 3)
        v117 = ((unint64_t)v114 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v117 = v109 + 1;
      *a1 = v117;
      v118 = (_DWORD *)(v109 + 1);
      if (v109 >= (unint64_t)v116 && v109 - (unint64_t)v116 > 3)
      {
        v113 = *v116;
        v118 = v116 + 1;
      }
      v119 = (int *)(((unint64_t)v118 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v109 >= (unint64_t)v119 && v109 - (unint64_t)v119 > 3)
        v120 = ((unint64_t)v118 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v120 = v109 + 1;
      *a1 = v120;
      v121 = 0;
      v122 = (_DWORD *)(v109 + 1);
      v123 = 0;
      if (v109 >= (unint64_t)v119 && v109 - (unint64_t)v119 > 3)
      {
        v123 = *v119;
        v122 = v119 + 1;
      }
      v124 = (_DWORD *)(((unint64_t)v122 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v66 = v109 >= (unint64_t)v124;
      v125 = v109 - (_QWORD)v124;
      v126 = v66;
      v127 = v126 & (v125 > 3);
      if (v127)
        v111 = v124;
      *a1 = (unint64_t)v111;
      if (v127 == 1)
      {
        v121 = *v124;
        *a1 = (unint64_t)(v124 + 1);
      }
      *(_DWORD *)(a2 + 144) = v115;
      *(_DWORD *)(a2 + 148) = v113;
      *(_DWORD *)(a2 + 152) = v123;
      *(_DWORD *)(a2 + 156) = v121;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      v128 = a1[1];
      v129 = (int *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v130 = (_DWORD *)(v128 + 1);
      v131 = v128 >= (unint64_t)v129 && v128 - (unint64_t)v129 > 3;
      if (v128 >= (unint64_t)v129 && v128 - (unint64_t)v129 > 3)
        v132 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v132 = v128 + 1;
      *a1 = v132;
      if (v128 >= (unint64_t)v129 && v128 - (unint64_t)v129 > 3)
      {
        v134 = *v129;
        v133 = v129 + 1;
        v131 = v134;
      }
      else
      {
        v133 = (_DWORD *)(v128 + 1);
      }
      v135 = (int *)(((unint64_t)v133 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v128 >= (unint64_t)v135 && v128 - (unint64_t)v135 > 3)
        v136 = ((unint64_t)v133 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v136 = v128 + 1;
      *a1 = v136;
      if (v128 >= (unint64_t)v135 && v128 - (unint64_t)v135 > 3)
      {
        v139 = *v135;
        v138 = v135 + 1;
        v137 = v139;
      }
      else
      {
        v137 = 0;
        v138 = (_DWORD *)(v128 + 1);
      }
      v140 = (_DWORD *)(((unint64_t)v138 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v128 >= (unint64_t)v140 && v128 - (unint64_t)v140 > 3)
        v141 = v140;
      else
        v141 = (_DWORD *)(v128 + 1);
      *a1 = (unint64_t)v141;
      if (v128 >= (unint64_t)v140 && v128 - (unint64_t)v140 > 3)
      {
        v144 = *v140;
        v142 = v140 + 1;
        v143 = v144;
      }
      else
      {
        v143 = 0;
        v142 = (_DWORD *)(v128 + 1);
      }
      v145 = (int *)(((unint64_t)v142 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v128 >= (unint64_t)v145 && v128 - (unint64_t)v145 > 3)
        v146 = ((unint64_t)v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v146 = v128 + 1;
      *a1 = v146;
      if (v128 >= (unint64_t)v145 && v128 - (unint64_t)v145 > 3)
      {
        v149 = *v145;
        v147 = v145 + 1;
        v148 = v149;
      }
      else
      {
        v148 = 0;
        v147 = (_DWORD *)(v128 + 1);
      }
      v150 = 0;
      *(_DWORD *)(a2 + 160) = v131;
      *(_DWORD *)(a2 + 164) = v137;
      *(_DWORD *)(a2 + 168) = v143;
      *(_DWORD *)(a2 + 172) = v148;
      *(_QWORD *)(a2 + 176) = 0;
      v151 = (int *)(((unint64_t)v147 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v128 >= (unint64_t)v151 && v128 - (unint64_t)v151 > 3)
        v152 = ((unint64_t)v147 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v152 = v128 + 1;
      *a1 = v152;
      v153 = (_DWORD *)(v128 + 1);
      if (v128 >= (unint64_t)v151 && v128 - (unint64_t)v151 > 3)
      {
        v150 = *v151;
        v153 = v151 + 1;
      }
      v154 = (_DWORD *)(((unint64_t)v153 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v66 = v128 >= (unint64_t)v154;
      v155 = v128 - (_QWORD)v154;
      v156 = v66;
      v157 = v156 & (v155 > 3);
      if (v157)
        v130 = v154;
      *a1 = (unint64_t)v130;
      if (v157 == 1)
      {
        v158 = *v154;
        *a1 = (unint64_t)(v154 + 1);
      }
      else
      {
        v158 = 0;
      }
      *(_DWORD *)(a2 + 176) = v150;
      *(_DWORD *)(a2 + 180) = v158;
      *(_QWORD *)(a2 + 184) = 0;
      v159 = a1[1];
      v160 = (unsigned int *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v161 = (_DWORD *)(v159 + 1);
      if (v159 >= (unint64_t)v160 && v159 - (unint64_t)v160 > 3)
        v162 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v162 = v159 + 1;
      *a1 = v162;
      if (v159 >= (unint64_t)v160 && v159 - (unint64_t)v160 > 3)
      {
        v165 = *v160;
        v164 = v160 + 1;
        v163 = v165;
      }
      else
      {
        v163 = 0;
        v164 = (_DWORD *)(v159 + 1);
      }
      v166 = (_DWORD *)(((unint64_t)v164 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v66 = v159 >= (unint64_t)v166;
      v167 = v159 - (_QWORD)v166;
      v168 = v66;
      v169 = v168 & (v167 > 3);
      if (v169)
        v161 = v166;
      *a1 = (unint64_t)v161;
      if (v169 == 1)
      {
        v170 = *v166;
        *a1 = (unint64_t)(v166 + 1);
        v171 = (unint64_t)v170 << 32;
      }
      else
      {
        v171 = 0;
      }
      *(_QWORD *)(a2 + 184) = v171 | v163;
      *(_BYTE *)(a2 + 192) = 0;
      v172 = (_BYTE *)*a1;
      v173 = a1[1];
      v174 = v173 > *a1;
      if (v173 <= *a1)
        v175 = v173 + 1;
      else
        v175 = *a1;
      *a1 = v175;
      if (v174)
      {
        *(_BYTE *)(a2 + 192) = *v172;
        ++*a1;
      }
      v73 = v179;
      v179 = 0;
      if (!v73)
        goto LABEL_249;
      goto LABEL_246;
    }
    v32 = v179;
    v178 = 0;
    v179 = 0;
    v176 = v32;
    v177 = 0;
    if (v27 > v72)
      v27 = v72;
    *a1 = v27 + 1;
    v185 = 0;
    v186 = 0;
    WebKit::HistoryEntryDataDecoder::operator>>(a1, (uint64_t)&v185);
    v34 = a1[1];
    v35 = (uint64_t *)((*a1 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v34 >= (unint64_t)v35 && v34 - (unint64_t)v35 > 7)
      v36 = (*a1 + 7) & 0xFFFFFFFFFFFFFFF8;
    else
      v36 = v34 + 1;
    *a1 = v36;
    if (v34 >= (unint64_t)v35 && v34 - (unint64_t)v35 > 7)
    {
      v39 = *v35;
      v37 = (unint64_t)(v35 + 1);
      v38 = v39;
      *a1 = v37;
      if (v39)
      {
        while (1)
        {
          v182 = 0;
          v183[0] = 0;
          v184 = 0;
          v40 = a1[1];
          v41 = (int *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
          if (v40 >= (unint64_t)v41 && v40 - (unint64_t)v41 > 3)
            v42 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          else
            v42 = v40 + 1;
          *a1 = v42;
          if (v40 < (unint64_t)v41 || v40 - (unint64_t)v41 <= 3)
            goto LABEL_107;
          v45 = *v41;
          v44 = v41 + 1;
          v43 = v45;
          *a1 = (unint64_t)v44;
          if ((unint64_t)v44 > v40)
            goto LABEL_107;
          if (v43 == 2)
          {
            v188 = 0;
            WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v188);
            if (v184 == -1)
              goto LABEL_97;
            if (v184 != 2)
            {
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34DFDB0[v184])(&v187, &v182);
LABEL_97:
              v182 = v188;
              v184 = 2;
              goto LABEL_107;
            }
            v47 = v188;
            v188 = 0;
            v48 = v182;
            v182 = v47;
            if (!v48)
              goto LABEL_107;
            v49 = *(_DWORD *)v48 - 2;
            if (*(_DWORD *)v48 != 2)
              goto LABEL_105;
LABEL_102:
            WTF::StringImpl::destroy(v48, v33);
            goto LABEL_103;
          }
          if (v43 != 1)
          {
            if (v43)
              goto LABEL_107;
            v188 = 0;
            v189 = 0;
            WebKit::HistoryEntryDataDecoder::operator>>(a1, (uint64_t)&v188);
            if (v184 == -1)
              goto LABEL_95;
            if (v184)
            {
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34DFDB0[v184])(&v187, &v182);
LABEL_95:
              v182 = v188;
              v183[0] = v189;
              v184 = 0;
              goto LABEL_107;
            }
            v46 = v182;
            if (v182)
            {
              v182 = 0;
              LODWORD(v183[0]) = 0;
              WTF::fastFree(v46, v33);
            }
            v182 = v188;
            v183[0] = v189;
            goto LABEL_107;
          }
          v188 = 0;
          LOBYTE(v190) = 0;
          v191 = 0;
          LOBYTE(v192) = 0;
          v193 = 0;
          v50 = WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v188);
          v187 = 0;
          WebKit::HistoryEntryDataDecoder::operator>>(v50, (WTF::StringImpl *)&v187);
          v51 = 0;
          v52 = a1[1];
          v53 = (_QWORD *)(v52 + 1);
          if (v52 <= *a1)
            v54 = v52 + 1;
          else
            v54 = *a1 + 1;
          v189 = 0;
          v55 = (_QWORD *)((v54 + 7) & 0xFFFFFFFFFFFFFFF8);
          if (v52 >= (unint64_t)v55 && v52 - (unint64_t)v55 > 7)
            v56 = v55;
          else
            v56 = (_QWORD *)(v52 + 1);
          *a1 = (unint64_t)v56;
          v57 = (_QWORD *)(v52 + 1);
          if (v52 >= (unint64_t)v55 && v52 - (unint64_t)v55 > 7)
          {
            v59 = *v55;
            v58 = v55 + 1;
            v51 = v59;
            v189 = v59;
            if (v59 < 0)
            {
              *a1 = (unint64_t)v53;
              goto LABEL_99;
            }
            v57 = v58;
          }
          v60 = (uint64_t *)(((unint64_t)v57 + 7) & 0xFFFFFFFFFFFFFFF8);
          v61 = v52 >= (unint64_t)v60 && v52 - (unint64_t)v60 > 7
              ? ((unint64_t)v57 + 7) & 0xFFFFFFFFFFFFFFF8
              : v52 + 1;
          *a1 = v61;
          if (v52 < (unint64_t)v60 || v52 - (unint64_t)v60 <= 7)
            break;
          v64 = *v60;
          v62 = v60 + 1;
          v63 = v64;
          *a1 = (unint64_t)v62;
          if (v64 != -1)
            goto LABEL_82;
LABEL_84:
          v65 = (_QWORD *)(((unint64_t)v62 + 7) & 0xFFFFFFFFFFFFFFF8);
          v66 = v52 >= (unint64_t)v65;
          v67 = v52 - (_QWORD)v65;
          v68 = v66;
          v69 = v68 & (v67 > 7);
          if (v69)
            v53 = v65;
          *a1 = (unint64_t)v53;
          v70 = 0;
          if (v69 == 1)
          {
            v70 = *v65;
            *a1 = (unint64_t)(v65 + 1);
          }
          if (!v193)
            v193 = 1;
          v192 = v70;
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<1ul,WebKit::HTTPBody::Element::FileData,WebKit::HTTPBody::Element::FileData>((uint64_t)&v182, (uint64_t)&v182, (uint64_t *)&v188);
LABEL_99:
          v48 = v187;
          v187 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              goto LABEL_102;
            *(_DWORD *)v48 -= 2;
          }
LABEL_103:
          v48 = v188;
          v188 = 0;
          if (!v48)
            goto LABEL_107;
          v49 = *(_DWORD *)v48 - 2;
          if (*(_DWORD *)v48 != 2)
          {
LABEL_105:
            *(_DWORD *)v48 = v49;
            goto LABEL_107;
          }
          WTF::StringImpl::destroy(v48, v33);
LABEL_107:
          if (*a1 > a1[1])
          {
            if (v184 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34DFDB0[v184])(&v188, &v182);
LABEL_127:
            v78 = v185;
            if (v185)
            {
              v185 = 0;
              LODWORD(v186) = 0;
              WTF::fastFree(v78, v33);
            }
            std::optional<WebKit::HTTPBody>::operator=[abi:sn180100]<WebKit::HTTPBody,void>(a2 + 112, (WTF::StringImpl *)&v176);
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v177, v79);
            v81 = v176;
            v176 = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
                WTF::StringImpl::destroy(v81, v80);
              else
                *(_DWORD *)v81 -= 2;
            }
            v72 = *a1;
            v27 = a1[1];
            goto LABEL_134;
          }
          if (HIDWORD(v178) == (_DWORD)v178)
          {
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)&v177, (unint64_t)&v182);
          }
          else
          {
            v71 = v177 + 56 * HIDWORD(v178);
            *(_BYTE *)v71 = 0;
            *(_DWORD *)(v71 + 48) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>>(v71, (uint64_t)&v182);
            ++HIDWORD(v178);
          }
          if (v184 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34DFDB0[v184])(&v188, &v182);
          if (!--v38)
          {
            v37 = *a1;
            v34 = a1[1];
            goto LABEL_119;
          }
        }
        v63 = 0;
        v62 = (_QWORD *)(v52 + 1);
LABEL_82:
        if (v63 < v51)
          goto LABEL_99;
        v190 = v63;
        v191 = 1;
        goto LABEL_84;
      }
    }
    else
    {
      v37 = v34 + 1;
    }
LABEL_119:
    if (v34 <= v37)
      v74 = v34 + 1;
    else
      v74 = v37 + 1;
    v75 = (v74 + 7) & 0xFFFFFFFFFFFFFFF8;
    v76 = v34 >= v75 && v34 - v75 > 7;
    if (v34 >= v75 && v34 - v75 > 7)
      v77 = v75;
    else
      v77 = v34 + 1;
    *a1 = v77;
    if (v76)
      *a1 = v75 + 8;
    goto LABEL_127;
  }
  v9 = *v5;
  v7 = (unint64_t)(v5 + 1);
  v8 = v9;
  *a1 = v7;
  if (!v9)
    goto LABEL_13;
  while (1)
  {
    WebKit::FrameState::FrameState((WebKit::FrameState *)&v182);
    v10 = WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)v183);
    v11 = WebKit::HistoryEntryDataDecoder::operator>>(v10, (WTF::StringImpl *)&v182);
    WebKit::decodeBackForwardTreeNode(v11, &v182);
    if (*a1 > a1[1])
      break;
    v12 = *(_DWORD *)(a2 + 228);
    if (v12 == *(_DWORD *)(a2 + 224))
    {
      WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameState>(a2 + 216, (unint64_t)&v182);
    }
    else
    {
      WebKit::FrameState::FrameState(*(_QWORD *)(a2 + 216) + 248 * v12, (uint64_t *)&v182);
      ++*(_DWORD *)(a2 + 228);
    }
    WebKit::FrameState::~FrameState(&v182);
    if (!--v8)
    {
      v7 = *a1;
      v4 = a1[1];
      goto LABEL_13;
    }
  }
  WebKit::FrameState::~FrameState(&v182);
}

unint64_t *WebKit::HistoryEntryDataDecoder::operator>>(unint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  const void *v23;
  _BOOL4 v24;
  unint64_t v25;
  WTF::StringImpl *v27[2];

  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  v6 = (int *)((*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = v5 + 1;
  if (v5 >= (unint64_t)v6 && v5 - (unint64_t)v6 > 3)
    v8 = (*a1 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  else
    v8 = v5 + 1;
  *a1 = v8;
  if (v5 >= (unint64_t)v6 && v5 - (unint64_t)v6 > 3)
  {
    v11 = *v6;
    v10 = v6 + 1;
    v9 = v11;
    *a1 = (unint64_t)v10;
    if (v11 == -1)
    {
      v12 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      if (!v12)
        return a1;
      goto LABEL_30;
    }
  }
  else
  {
    v9 = 0;
    v10 = (_DWORD *)(v5 + 1);
  }
  v13 = (_QWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v5 >= (unint64_t)v13 && v5 - (unint64_t)v13 > 7)
    v14 = v13;
  else
    v14 = (_QWORD *)(v5 + 1);
  *a1 = (unint64_t)v14;
  if (v5 >= (unint64_t)v13 && v5 - (unint64_t)v13 > 7)
  {
    v17 = *v13;
    v15 = v13 + 1;
    v16 = v17;
    *a1 = (unint64_t)v15;
    if ((v17 & 1) != 0)
    {
LABEL_32:
      *a1 = v7;
      return a1;
    }
  }
  else
  {
    v16 = 0;
    v15 = (_QWORD *)(v5 + 1);
  }
  if (v16 >> 1 != v9)
    goto LABEL_32;
  v18 = ((unint64_t)v15 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v19 = v5 >= v18;
  v20 = v5 - v18;
  if (!v19)
    goto LABEL_32;
  v21 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 < (v16 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_32;
  v27[1] = 0;
  WTF::StringImpl::createUninitialized();
  v22 = a1[1];
  v23 = (const void *)((*a1 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v24 = v22 >= (unint64_t)v23 && v22 - (unint64_t)v23 >= v21;
  if (v22 >= (unint64_t)v23 && v22 - (unint64_t)v23 >= v21)
    v25 = (*a1 + 1) & 0xFFFFFFFFFFFFFFFELL;
  else
    v25 = v22 + 1;
  *a1 = v25;
  if (v24)
  {
    memcpy(0, v23, v21);
    *a1 += v21;
  }
  WTF::String::operator=((WTF::StringImpl **)a2, (WTF::StringImpl *)v27);
  v12 = v27[0];
  v27[0] = 0;
  if (v12)
  {
LABEL_30:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

unint64_t *WebKit::HistoryEntryDataDecoder::operator>>(unint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v11 = 0;
  WebKit::HistoryEntryDataDecoder::operator>>(a1, (WTF::StringImpl *)&v11);
  WTF::AtomString::AtomString((WTF::AtomString *)&v10, &v11);
  v5 = v10;
  v10 = 0;
  v6 = *a2;
  *a2 = v5;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
      goto LABEL_5;
    WTF::StringImpl::destroy(v6, v4);
    v6 = v10;
    v10 = 0;
    if (!v6)
      goto LABEL_6;
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
LABEL_5:
      *(_DWORD *)v6 = v7;
  }
LABEL_6:
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t std::optional<WebKit::HTTPBody>::operator=[abi:sn180100]<WebKit::HTTPBody,void>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::String::operator=((WTF::StringImpl **)a1, a2);
    v4 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = 56 * v4;
      do
      {
        v7 = *(unsigned int *)(v5 + 48);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_1E34DFDB0[v7])(&v11, v5);
        *(_DWORD *)(v5 + 48) = -1;
        v5 += 56;
        v6 -= 56;
      }
      while (v6);
    }
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 8, (_DWORD *)a2 + 2);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = v8;
    v9 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(a1 + 16) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(a1 + 20) = v9;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t WebKit::HistoryEntryDataDecoder::operator>>(unint64_t *a1, uint64_t a2)
{
  WTF *v4;
  unint64_t v5;
  size_t *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  size_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  size_t v18;

  v4 = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  v6 = (size_t *)((*a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  v7 = (char *)(v5 + 1);
  if (v5 >= (unint64_t)v6 && v5 - (unint64_t)v6 > 7)
    v8 = (*a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  else
    v8 = v5 + 1;
  *a1 = v8;
  if (v5 < (unint64_t)v6 || v5 - (unint64_t)v6 <= 7)
  {
    *a1 = (unint64_t)v7;
    return (uint64_t)a1;
  }
  v11 = *v6;
  v9 = (char *)(v6 + 1);
  v10 = v11;
  v12 = v5 >= (unint64_t)v9;
  v13 = v5 - (_QWORD)v9;
  v14 = v12;
  v15 = v14 & (v13 >= v10);
  if (v15)
    v7 = v9;
  *a1 = (unint64_t)v7;
  if (v15 != 1)
    return (uint64_t)a1;
  *a1 = (unint64_t)&v9[v10];
  if (!v10)
    return (uint64_t)a1;
  if (v10 <= 0x10)
    v16 = 16;
  else
    v16 = v10;
  result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a2, (WTF::FastMalloc *)v16);
  v18 = *(unsigned int *)(a2 + 12);
  if (v10 >= v18)
  {
    memcpy((void *)(*(_QWORD *)a2 + v18), v9, v10);
    *(_DWORD *)(a2 + 12) = v10;
    return (uint64_t)a1;
  }
  __break(0xC471u);
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<1ul,WebKit::HTTPBody::Element::FileData,WebKit::HTTPBody::Element::FileData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  char v7;
  __n128 result;
  uint64_t v9;
  __int128 v10;
  char v11;

  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      WTF::String::operator=((WTF::StringImpl **)a2, (WTF::StringImpl *)a3);
      v7 = *((_BYTE *)a3 + 40);
      result = *(__n128 *)(a3 + 3);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 1);
      *(__n128 *)(a2 + 24) = result;
      *(_BYTE *)(a2 + 40) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34DFDB0[v5])(&v11, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = v9;
  result = *(__n128 *)(a3 + 1);
  v10 = *(_OWORD *)(a3 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a3 + 40);
  *(_OWORD *)(a1 + 24) = v10;
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = 1;
  return result;
}

void WebKit::WebProcess::~WebProcess(WebKit::WebProcess *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const void *v13;
  WTF::StringImpl **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  const char ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  const char ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t m;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD **v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;

  *(_QWORD *)this = off_1E34DFDF0;
  *((_QWORD *)this + 2) = &unk_1E34DFEB8;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 101);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 100);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v4 + 16 * i) != -1)
        {
          v7 = v4 + 16 * i;
          v8 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              WTF::fastFree((WTF *)v8, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionRealtimeMediaSourceManager **)this + 96, 0);
  v13 = (const void *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (WTF::StringImpl **)*((_QWORD *)this + 88);
  if (v14)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v12);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 688, v12);
  v16 = *((_QWORD *)this + 82);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      for (j = 0; j != v17; ++j)
      {
        if (*(_QWORD *)(v16 + 16 * j) != -1)
        {
          v19 = v16 + 16 * j;
          v20 = *(unsigned int **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v15);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), v15);
  }
  v23 = *((_QWORD *)this + 81);
  if (v23)
    WTF::fastFree((WTF *)(v23 - 16), v15);
  v24 = (const char ***)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v24)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v24);
  v25 = *((_QWORD *)this + 78);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    if ((_DWORD)v26)
    {
      v27 = *((_QWORD *)this + 78);
      do
      {
        v28 = *(WTF::StringImpl **)v27;
        if (*(_QWORD *)v27 != -1)
        {
          v29 = *(const char ****)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v29);
            v28 = *(WTF::StringImpl **)v27;
          }
          *(_QWORD *)v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        v27 += 16;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v25 - 16), v15);
  }
  v30 = *((_QWORD *)this + 75);
  if (v30)
  {
    v31 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v31)
    {
      for (k = 0; k != v31; ++k)
      {
        v33 = (unsigned int **)(v30 + 24 * k);
        v34 = *v33;
        if (*v33 != (unsigned int *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v15);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v30 - 16), v15);
  }
  if (*((_BYTE *)this + 584))
  {
    *((_QWORD *)this + 65) = off_1E34E0DF8;
    v37 = *((_QWORD *)this + 71);
    *((_QWORD *)this + 71) = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    WebCore::TimerBase::~TimerBase((WebKit::WebProcess *)((char *)this + 520));
  }
  v38 = *((_QWORD *)this + 64);
  if (v38)
    WTF::fastFree((WTF *)(v38 - 16), v15);
  v39 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  *((_QWORD *)this + 57) = off_1E34ABE00;
  v40 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcess *)((char *)this + 456));
  v42 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (WTF::StringImpl **)*((_QWORD *)this + 54);
  if (v43)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v43, v41);
  v44 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 52);
  if (v45)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v45, v41);
  v46 = (_DWORD *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 120))(v46);
    else
      --v46[2];
  }
  v47 = (_DWORD *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
    else
      --v47[2];
  }
  v48 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v48)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteImageDecoderAVFManager,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v48 + 24), v41);
  v49 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v49)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v49 + 8), v41);
  v50 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
    else
      --v50[2];
  }
  v51 = (_DWORD *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
    else
      --v51[2];
  }
  std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100]((uint64_t **)this + 45, 0);
  v53 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v53)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v53 + 16), v52);
  v54 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v54)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v54 + 16), v52);
  v55 = (unsigned int *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v55)
  {
    v56 = v55 + 2;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v55 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
    }
  }
  v59 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v59)
  {
    if (v59[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
    else
      --v59[4];
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v52);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = *((_QWORD *)this + 34);
  if (v61)
  {
    v62 = *(unsigned int *)(v61 - 4);
    if ((_DWORD)v62)
    {
      v63 = (uint64_t *)(v61 + 16);
      do
      {
        if (*(v63 - 2) != -1)
        {
          v64 = *v63;
          *v63 = 0;
          if (v64)
            (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
        }
        v63 += 3;
        --v62;
      }
      while (v62);
    }
    WTF::fastFree((WTF *)(v61 - 16), v52);
  }
  v65 = *((_QWORD *)this + 33);
  if (v65)
  {
    v66 = *(unsigned int *)(v65 - 4);
    if ((_DWORD)v66)
    {
      for (m = 0; m != v66; ++m)
      {
        if (*(_QWORD *)(v65 + 24 * m + 8) != -1)
        {
          v68 = v65 + 24 * m;
          v69 = *(unsigned int **)(v68 + 16);
          *(_QWORD *)(v68 + 16) = 0;
          if (v69)
          {
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              atomic_store(1u, v69);
              WTF::fastFree((WTF *)v69, v52);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v65 - 16), v52);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::WebProcess *)((char *)this + 252));
  v73 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 56))(v73);
  *((_QWORD *)this + 28) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 29, v72);
  WebKit::ViewUpdateDispatcher::~ViewUpdateDispatcher((WebKit::WebProcess *)((char *)this + 184), v74);
  WebKit::EventDispatcher::~EventDispatcher((WebKit::WebProcess *)((char *)this + 136), v75);
  v77 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v77)
    CFRelease(*(CFTypeRef *)(v77 + 8));
  v78 = *((_QWORD *)this + 15);
  if (v78)
  {
    v79 = *(unsigned int *)(v78 - 4);
    if ((_DWORD)v79)
    {
      v80 = (_DWORD **)(v78 + 8);
      do
      {
        if (*(v80 - 1) != (_DWORD *)-1)
        {
          v81 = *v80;
          *v80 = 0;
          if (v81)
          {
            if (v81[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
            else
              --v81[2];
          }
        }
        v80 += 2;
        --v79;
      }
      while (v79);
    }
    WTF::fastFree((WTF *)(v78 - 16), v76);
  }
  v82 = *((_QWORD *)this + 14);
  if (v82)
  {
    v83 = *(unsigned int *)(v82 - 4);
    if ((_DWORD)v83)
    {
      v84 = (uint64_t *)(v82 + 8);
      do
      {
        if (*(v84 - 1) != -1)
        {
          v85 = *v84;
          *v84 = 0;
          if (v85)
            CFRelease(*(CFTypeRef *)(v85 + 8));
        }
        v84 += 2;
        --v83;
      }
      while (v83);
    }
    WTF::fastFree((WTF *)(v82 - 16), v76);
  }
  WebKit::AuxiliaryProcess::~AuxiliaryProcess(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebProcess::~WebProcess(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebProcess::~WebProcess(WebKit::WebProcess *this, WTF::StringImpl *a2)
{
  WebKit::WebProcess::~WebProcess((WebKit::WebProcess *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebProcess::~WebProcess((WebKit::WebProcess *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::callExit(WebKit *this, IPC::Connection *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = WTF::terminateProcess(0);
  return WebKit::WebProcess::initializeWebProcess(v2, v3, v4);
}

uint64_t WebKit::WebProcess::initializeWebProcess(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  WTF::MemoryPressureHandler *IsUserInteractive;
  int v8;
  WTF::MemoryPressureHandler *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  const WebKit::SandboxExtensionHandle *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  WebKit *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  WTF::StringImpl *CanRequest;
  const WTF::String *v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::LegacySchemeRegistry *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::LegacySchemeRegistry *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::LegacySchemeRegistry *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::LegacySchemeRegistry *v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::LegacySchemeRegistry *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::LegacySchemeRegistry *v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::LegacySchemeRegistry *v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::LegacySchemeRegistry *v60;
  uint64_t v61;
  uint64_t v62;
  WebCore::LegacySchemeRegistry *v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::LegacySchemeRegistry *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WebCore::BackForwardCache *v73;
  WebCore::BackForwardCache *v74;
  WebKit::WebProcess *v75;
  WebCore::MemoryCache *v76;
  char v77;
  uint64_t v78;
  WebCore::DeprecatedGlobalSettings *v79;
  char v80;
  Inspector::RemoteInspector *v81;
  Inspector::RemoteInspector *v82;
  WebCore *v83;
  Inspector::RemoteInspector *v84;
  WebCore::GamepadProvider *v85;
  WTF::MemoryPressureHandler *v86;
  unsigned __int8 *v87;
  int v88;
  const WTF::StringImpl *v89;
  NSObject *v90;
  _BOOL8 v91;
  uint64_t v92;
  int v93;
  NSObject *v95;
  WTF::StringImpl *v96;
  WebKit *v97;
  _BYTE v98[4];
  _BYTE bytes[12];
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  MEMORY[0x19AEAEBB4](v98, 0);
  v6 = *a3;
  *a3 = 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v97, (const WTF::MachSendRight *)v98);
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)bytes, (const WTF::MachSendRight *)&v97);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, bytes);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)bytes);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v97);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v98);
  if (*(_BYTE *)(a2 + 624))
    WebKit::WebProcess::setWebsiteDataStoreParameters((WebKit::WebProcess *)a1, a2 + 472);
  WebCore::setPresentingApplicationPID((WebCore *)*(unsigned int *)(a2 + 376));
  WebKit::WebProcess::platformInitializeWebProcess((WebKit::WebProcess *)a1, (WebKit::WebProcessCreationParameters *)a2);
  IsUserInteractive = (WTF::MemoryPressureHandler *)WTF::Thread::setCurrentThreadIsUserInteractive((WTF::Thread *)0xFFFFFFFFLL);
  v8 = *(unsigned __int8 *)(a2 + 334);
  *(_BYTE *)(a1 + 592) = v8;
  if (!v8)
  {
    v9 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(IsUserInteractive);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34E0798;
    v10[1] = a1;
    v11 = *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 6) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E34E07C0;
    v12[1] = a1;
    v13 = *((_QWORD *)v9 + 4);
    *((_QWORD *)v9 + 4) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E34E07E8;
    v14[1] = a1;
    v15 = *((_QWORD *)v9 + 5);
    *((_QWORD *)v9 + 5) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    WTF::MemoryPressureHandler::install(v9);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E34E0838;
    *(_QWORD *)bytes = v16;
    PAL::registerNotifyCallback();
    v17 = *(_QWORD *)bytes;
    *(_QWORD *)bytes = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v18 = off_1E34E0860;
  v18[1] = a1;
  *(_QWORD *)bytes = v18;
  PAL::registerNotifyCallback();
  v20 = *(_QWORD *)bytes;
  *(_QWORD *)bytes = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WebKit::SandboxExtension::consumePermanently(a2 + 48, v19);
  v21 = *(_QWORD *)(a2 + 32);
  if (v21 && *(_DWORD *)(v21 + 4))
  {
    v22 = *(const void **)(a2 + 64);
    *(_QWORD *)bytes = &off_1E34E0668;
    WebKit::UserData::transform(v22, (uint64_t)bytes, &v97);
    WebKit::InjectedBundle::create(a2, (uint64_t *)&v97, (uint64_t *)bytes);
    v23 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)bytes;
    if (v23)
      CFRelease(*(CFTypeRef *)(v23 + 8));
    v24 = v97;
    v97 = 0;
    if (v24)
      CFRelease(*((CFTypeRef *)v24 + 1));
  }
  v25 = *(_QWORD **)(a1 + 272);
  v26 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v25);
  v27 = v26;
  v29 = v28;
  if (v25)
    v25 += 3 * *((unsigned int *)v25 - 1);
  if (v25 != v26)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v27[2] + 24))(v27[2], a2);
      while (1)
      {
        v27 += 3;
        if (v27 == v29)
          break;
        if (*v27)
          v30 = *v27 == -1;
        else
          v30 = 1;
        if (!v30)
          goto LABEL_29;
      }
      v27 = v29;
LABEL_29:
      ;
    }
    while (v27 != v25);
  }
  WebKit::RemoteMediaPlayerManager::initialize(*(_QWORD *)(a1 + 384), (const WebKit::WebProcessCreationParameters *)a2);
  CanRequest = (WTF::StringImpl *)WebKit::WebProcess::setCacheModel(a1, (WTF *)*(unsigned __int8 *)(a2 + 312));
  v34 = *(_QWORD *)(a2 + 792);
  if (v34 && *(_DWORD *)(v34 + 4))
    CanRequest = (WTF::StringImpl *)WTF::setTimeZoneOverride();
  if (*(_DWORD *)(a2 + 308))
    CanRequest = (WTF::StringImpl *)WTF::overrideUserPreferredLanguages();
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 344);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 336);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 337);
  v35 = *(unsigned int *)(a2 + 100);
  if ((_DWORD)v35)
  {
    v36 = *(WebCore::LegacySchemeRegistry **)(a2 + 88);
    v37 = 8 * v35;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument(v36, v32);
      v36 = (WebCore::LegacySchemeRegistry *)((char *)v36 + 8);
      v37 -= 8;
    }
    while (v37);
  }
  v38 = *(unsigned int *)(a2 + 116);
  if ((_DWORD)v38)
  {
    v39 = *(WebCore::LegacySchemeRegistry **)(a2 + 104);
    v40 = 8 * v38;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(v39, v32);
      v39 = (WebCore::LegacySchemeRegistry *)((char *)v39 + 8);
      v40 -= 8;
    }
    while (v40);
  }
  v41 = *(unsigned int *)(a2 + 132);
  if ((_DWORD)v41)
  {
    v42 = *(WebCore::LegacySchemeRegistry **)(a2 + 120);
    v43 = 8 * v41;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(v42, v32);
      v42 = (WebCore::LegacySchemeRegistry *)((char *)v42 + 8);
      v43 -= 8;
    }
    while (v43);
  }
  v44 = *(unsigned int *)(a2 + 148);
  if ((_DWORD)v44)
  {
    v45 = *(_QWORD *)(a2 + 136);
    v46 = 8 * v44;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme((WebCore::LegacySchemeRegistry *)1, v45, v33);
      v45 += 8;
      v46 -= 8;
    }
    while (v46);
  }
  v47 = *(unsigned int *)(a2 + 164);
  if ((_DWORD)v47)
  {
    v48 = *(WebCore::LegacySchemeRegistry **)(a2 + 152);
    v49 = 8 * v47;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(v48, v32);
      v48 = (WebCore::LegacySchemeRegistry *)((char *)v48 + 8);
      v49 -= 8;
    }
    while (v49);
  }
  v50 = *(unsigned int *)(a2 + 180);
  if ((_DWORD)v50)
  {
    v51 = *(WebCore::LegacySchemeRegistry **)(a2 + 168);
    v52 = 8 * v50;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(v51, v32);
      v51 = (WebCore::LegacySchemeRegistry *)((char *)v51 + 8);
      v52 -= 8;
    }
    while (v52);
  }
  v53 = *(unsigned int *)(a2 + 196);
  if ((_DWORD)v53)
  {
    v54 = *(WebCore::LegacySchemeRegistry **)(a2 + 184);
    v55 = 8 * v53;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated(v54, v32);
      v54 = (WebCore::LegacySchemeRegistry *)((char *)v54 + 8);
      v55 -= 8;
    }
    while (v55);
  }
  v56 = *(unsigned int *)(a2 + 212);
  if ((_DWORD)v56)
  {
    v57 = *(WebCore::LegacySchemeRegistry **)(a2 + 200);
    v58 = 8 * v56;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(v57, v32);
      v57 = (WebCore::LegacySchemeRegistry *)((char *)v57 + 8);
      v58 -= 8;
    }
    while (v58);
  }
  v59 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v59)
  {
    v60 = *(WebCore::LegacySchemeRegistry **)(a2 + 216);
    v61 = 8 * v59;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsAlwaysRevalidated(v60, v32);
      v60 = (WebCore::LegacySchemeRegistry *)((char *)v60 + 8);
      v61 -= 8;
    }
    while (v61);
  }
  v62 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v62)
  {
    v63 = *(WebCore::LegacySchemeRegistry **)(a2 + 232);
    v64 = 8 * v62;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned(v63, v32);
      v63 = (WebCore::LegacySchemeRegistry *)((char *)v63 + 8);
      v64 -= 8;
    }
    while (v64);
  }
  v65 = *(unsigned int *)(a2 + 260);
  if ((_DWORD)v65)
  {
    v66 = *(WebCore::LegacySchemeRegistry **)(a2 + 248);
    v67 = 8 * v65;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest(v66, v32);
      v66 = (WebCore::LegacySchemeRegistry *)((char *)v66 + 8);
      v67 -= 8;
    }
    while (v67);
  }
  v68 = *(unsigned int *)(a2 + 276);
  if ((_DWORD)v68)
  {
    v69 = *(WTF::StringImpl ***)(a2 + 264);
    v70 = 8 * v68;
    do
    {
      v71 = *v69;
      if (*v69)
        *(_DWORD *)v71 += 2;
      v96 = v71;
      WebKit::WebExtensionMatchPattern::registerCustomURLScheme((uint64_t *)&v96);
      CanRequest = v96;
      v96 = 0;
      if (CanRequest)
      {
        if (*(_DWORD *)CanRequest == 2)
          CanRequest = (WTF::StringImpl *)WTF::StringImpl::destroy(CanRequest, v72);
        else
          *(_DWORD *)CanRequest -= 2;
      }
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
  v73 = (WebCore::BackForwardCache *)WebCore::ResourceRequestBase::setDefaultTimeoutInterval(CanRequest, *(double *)(a2 + 320));
  v74 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v73);
  WebCore::BackForwardCache::setMaxSize(v74);
  WebCore::FontCascade::setCodePath();
  v75 = (WebKit::WebProcess *)WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting((WebCore::FontCascade *)*(unsigned __int8 *)(a2 + 335));
  v76 = WebKit::WebProcess::setMemoryCacheDisabled(v75, *(unsigned __int8 *)(a2 + 339));
  v77 = *(_BYTE *)(a2 + 340);
  *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v76) + 23) = v77;
  v78 = *MEMORY[0x1E0DD1108];
  if (!*MEMORY[0x1E0DD1108])
    v78 = WebCore::commonVMSlow(0);
  *(_BYTE *)(v78 + 93122) = *(_BYTE *)(a2 + 341);
  v79 = (WebCore::DeprecatedGlobalSettings *)WebCore::ScriptExecutionContext::setCrossOriginMode();
  v80 = *(_BYTE *)(a2 + 343);
  *(_BYTE *)(a1 + 618) = v80;
  *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v79) + 31) = v80 ^ 1;
  v81 = *(Inspector::RemoteInspector **)(*(_QWORD *)(a1 + 32) + 352);
  if (v81)
  {
    xpc_connection_get_audit_token();
    v104 = 1;
    v82 = CFDataCreate(0, bytes, 32);
    v83 = (WebCore *)Inspector::RemoteInspector::singleton(v82);
    WebCore::presentingApplicationPID(v83);
    if (v82)
      CFRetain(v82);
    Inspector::RemoteInspector::setParentProcessInformation();
    v81 = v82;
    if (v82)
    {
      CFRelease(v82);
      CFRelease(v82);
    }
  }
  if (*(_DWORD *)(a2 + 84))
  {
    v84 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(v81);
    v81 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::connectToWebInspector(v84);
  }
  WebCore::GamepadProvider::singleton(v81);
  {
    qword_1ECE739E8 = 0;
    unk_1ECE739F0 = 0;
    byte_1ECE739F8 = 0;
    WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&off_1E34E9A40;
    xmmword_1ECE73A00 = 0u;
    unk_1ECE73A10 = 0u;
    xmmword_1ECE73A20 = 0u;
  }
  WebCore::GamepadProvider::setSharedProvider((WebCore::GamepadProvider *)&WebKit::WebGamepadProvider::singleton(void)::provider, v85);
  {
    byte_1ECE73A78 = 0;
    WebKit::WebServiceWorkerProvider::singleton(void)::provider = (uint64_t)&off_1E34ED118;
  }
  WebCore::ServiceWorkerProvider::setSharedProvider();
  {
    WebKit::WebSharedWorkerProvider::singleton(void)::provider = (uint64_t)&off_1E34ED2A8;
  }
  v86 = (WTF::MemoryPressureHandler *)WebCore::SharedWorkerProvider::setSharedProvider();
  WebKit::WebResourceLoadObserver::shouldLogUserInteraction = *(_BYTE *)(a2 + 464);
  if (*(_DWORD *)(a1 + 596) == 2)
  {
    v87 = (unsigned __int8 *)WTF::MemoryPressureHandler::singleton(v86);
    v88 = atomic_load(v87 + 4);
    if (v88 == 2 || v87[7])
    {
      v95 = qword_1ECE71578;
      if (os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)bytes = 0;
        _os_log_impl(&dword_196BCC000, v95, OS_LOG_TYPE_DEFAULT, "WebProcess::prewarmGlobally: Not prewarming because the system in under memory pressure", bytes, 2u);
      }
    }
    else
    {
      WebCore::ProcessWarming::prewarmGlobally((WebCore::ProcessWarming *)v87);
    }
  }
  WebCore::Quirks::updateStorageAccessUserAgentStringQuirks();
  WebKit::WebProcess::updateDomainsWithStorageAccessQuirks(a1, (WTF::StringImpl *)(a2 + 808), v89);
  WebCore::NavigatorGamepad::setGamepadsRecentlyAccessedThreshold();
  v90 = qword_1ECE71C68;
  v91 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
  if (v91)
  {
    if (*(_BYTE *)(a1 + 672))
      v92 = *(_QWORD *)(a1 + 664);
    else
      v92 = 0;
    v93 = WebCore::presentingApplicationPID((WebCore *)v91);
    *(_DWORD *)bytes = 134218496;
    *(_QWORD *)&bytes[4] = a1;
    v100 = 2048;
    v101 = v92;
    v102 = 1024;
    v103 = v93;
    _os_log_impl(&dword_196BCC000, v90, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Presenting processPID=%d", bytes, 0x1Cu);
  }
  return kdebug_trace();
}

BOOL WebKit::WebProcess::areAllPagesSuspended(WebKit::WebProcess *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;

  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    v5 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v5 = 0;
  if (v5 == v2)
    return 1;
  do
  {
    v6 = v2[1];
    v7 = *(unsigned __int8 *)(v6 + 2108);
    v8 = *(_BYTE *)(v6 + 2108) != 0;
    if (!v7)
      break;
    while (1)
    {
      v2 += 2;
      if (v2 == v3)
        break;
      if ((unint64_t)(*v2 + 1) > 1)
        goto LABEL_7;
    }
    v2 = v3;
LABEL_7:
    ;
  }
  while (v2 != v5);
  return v8;
}

uint64_t WebKit::WebProcess::updateIsWebTransportEnabled(WebKit::WebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 14);
  if (v6)
    v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  if (v7 == result)
  {
    v8 = 0;
  }
  else
  {
    while (1)
    {
      result = WebKit::WebPage::isWebTransportEnabled(*(WebKit::WebPage **)(v3 + 8));
      if ((result & 1) != 0)
        break;
      while (1)
      {
        v3 += 16;
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_9;
      }
      v3 = v5;
LABEL_9:
      v8 = 0;
      if (v3 == v7)
        goto LABEL_5;
    }
    v8 = 1;
  }
LABEL_5:
  *((_BYTE *)this + 780) = v8;
  return result;
}

uint64_t WebKit::WebProcess::setIsInProcessCache(WebKit::WebProcess *a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;

  if ((_DWORD)a2)
    v4 = 3;
  else
    v4 = 4;
  *((_DWORD *)a1 + 149) = v4;
  WebKit::WebProcess::accessibilityRelayProcessSuspended(a1, a2);
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

WTF::StringImpl *WebKit::WebProcess::registerURLSchemeAsCORSEnabled(WebKit::WebProcess *this, const WTF::String *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9[2];
  uint64_t *v10;
  WTF::StringImpl *v11[2];

  v11[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(a2, a2);
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(this) + 24);
  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v11[0] = v5;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9, (_DWORD **)v11, 1uLL);
  v10 = v9;
  IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(v4, (uint64_t *)&v10, 0, 0, 0);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcess::registerURLSchemeAsWebExtension(WebKit::WebProcess *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v2 = *a2;
  if (*a2)
    *(_DWORD *)v2 += 2;
  v5 = v2;
  WebKit::WebExtensionMatchPattern::registerCustomURLScheme((uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebProcess::focusedWebPage(WebKit::WebProcess *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    v5 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v5 = 0;
  if (v5 == v2)
    return 0;
  while (1)
  {
    v6 = v2[1];
    if ((*(_WORD *)(v6 + 1832) & 4) != 0
      && (~*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 72) + 26) & 3) == 0)
    {
      return v6;
    }
    while (1)
    {
      v2 += 2;
      if (v2 == v3)
        break;
      if ((unint64_t)(*v2 + 1) > 1)
        goto LABEL_11;
    }
    v2 = v3;
LABEL_11:
    if (v2 == v5)
      return 0;
  }
}

void WebKit::WebProcess::createWebPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebPage *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  void *v8;
  WebKit::WebPage *v9;
  WebKit::WebPage *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = a2;
  v10 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(a1 + 112), &v13, (uint64_t)&v11);
  *(_BYTE *)(a1 + 778) = 1;
  if (v12)
  {
    WebKit::WebPage::create(v13, a3, &v10);
    v5 = v10;
    CFRetain(*((CFTypeRef *)v10 + 1));
    v6 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v5;
    if (v6)
      CFRelease(*(CFTypeRef *)(v6 + 8));
    v7 = *(unsigned __int8 ***)(a1 + 336);
    if (v7)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(v7[2]);
      WebKit::WebPage::gpuProcessConnectionDidBecomeAvailable(v10, (WebKit::GPUProcessConnection *)v7);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(v7[2], v8);
    }
    ++*(_DWORD *)(a1 + 24);
    WebKit::WebProcess::updateIsWebTransportEnabled((WebKit::WebProcess *)a1);
    v9 = v10;
    v10 = 0;
    if (v9)
      CFRelease(*((CFTypeRef *)v9 + 1));
  }
  else
  {
    WebKit::WebPage::reinitializeWebPage(*(_QWORD *)(v11 + 8), a3);
  }
  if (*(_BYTE *)(a1 + 779))
  {
    *(_BYTE *)(a1 + 779) = 0;
    WebKit::WebProcess::accessibilityRelayProcessSuspended((WebKit::WebProcess *)a1, 0);
  }
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v7;
  v9 = (_QWORD *)(v6 + 16 * v8);
  v10 = *v9;
  v11 = *a2;
  if (*v9)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v10 == v11)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 16 * v24;
        goto LABEL_14;
      }
      if (v10 == -1)
        v21 = v9;
      v8 = (v8 + v22) & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      ++v22;
    }
    while (*v9);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v9 = v21;
    }
  }
  v12 = v9[1];
  *v9 = v11;
  v9[1] = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_13;
LABEL_25:
    v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v9);
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_13;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_25;
LABEL_13:
  v19 = v15 + 16 * v18;
  v20 = 1;
LABEL_14:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
}

uint64_t WebKit::WebProcess::removeWebPage(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v8 = a2;
  WebKit::WebProcess::flushResourceLoadStatistics((WebKit::WebProcess *)a1);
  WebKit::WebProcess::pageWillLeaveWindow((uint64_t)a1, a2);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 14, &v8);
  v5 = a1[14];
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      goto LABEL_7;
  }
  else
  {
    if (!v4)
      goto LABEL_7;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 14, v4);
LABEL_7:
  WebKit::AuxiliaryProcess::enableTermination((uint64_t)a1);
  return WebKit::WebProcess::updateIsWebTransportEnabled((WebKit::WebProcess *)a1);
}

_QWORD *WebKit::WebProcess::pageWillLeaveWindow(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = a2;
  v3 = (uint64_t *)(a1 + 512);
  result = (_QWORD *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 512), &v8);
  v5 = *(_QWORD *)(a1 + 512);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      goto LABEL_8;
  }
  else
  {
    if (!result)
      goto LABEL_9;
    v6 = 0;
  }
  if (v6 != result)
  {
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
    v5 = *v3;
  }
  if (v5)
  {
LABEL_8:
    if (*(_DWORD *)(v5 - 12))
      return result;
  }
LABEL_9:
  if (!*(_BYTE *)(a1 + 584))
  {
    std::__optional_destruct_base<WebCore::DeferrableOneShotTimer,false>::reset[abi:sn180100]((WebCore::TimerBase *)(a1 + 520));
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = off_1E34E0640;
    v7[1] = WebKit::WebProcess::nonVisibleProcessEarlyMemoryCleanupTimerFired;
    v7[2] = 0;
    v7[3] = a1;
    WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 520));
    *(_QWORD *)(a1 + 520) = off_1E34E0DF8;
    *(_QWORD *)(a1 + 568) = v7;
    *(_QWORD *)(a1 + 576) = 0x4024000000000000;
    *(_BYTE *)(a1 + 584) = 1;
  }
  return (_QWORD *)WebCore::DeferrableOneShotTimer::restart(a1 + 520);
}

uint64_t WebKit::WebProcess::shouldTerminate(WebKit::WebProcess *this)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int16 v4;
  void *v5;
  int v6;
  int v7;
  uint64_t *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v13;
  uint64_t *v14;
  char v15;
  int v16;
  uint64_t *v17;
  int v18;
  IPC::Encoder *v19;
  uint64_t v20;
  char v21;

  v1 = *((_QWORD *)this + 4);
  v20 = 0;
  IPC::Connection::createSyncMessageEncoder(3732, 0, &v20, (uint64_t *)&v19);
  IPC::Connection::sendSyncMessage(v1, v20, (uint64_t *)&v19, 0, (uint64_t)&v17, INFINITY);
  v2 = v18;
  if (!v18)
  {
    v4 = IPC::Decoder::decode<std::tuple<BOOL>>(v17);
    if (v4 < 0x100u)
    {
      v3 = 0;
      v6 = 0;
      LOBYTE(v14) = 13;
      v2 = 1;
      v16 = 1;
      v7 = v18;
      if (v18 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v18)
    {
      v3 = v4;
      v8 = v17;
      v17 = 0;
      v14 = v8;
      v15 = v4;
      goto LABEL_9;
    }
LABEL_14:
    v13 = (WebKit::WebProcess *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebProcess::terminate(v13);
  }
  if (v18 != 1)
    goto LABEL_14;
  v3 = 0;
  LOBYTE(v14) = (_BYTE)v17;
LABEL_9:
  v16 = v2;
  v7 = v2;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34E0610[v7])(&v21, &v17);
  v6 = v3;
LABEL_11:
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v5);
    WTF::fastFree(v10, v11);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1E34E0600[v2])(&v17, &v14);
  return (v2 | v6) != 0;
}

uint64_t WebKit::WebProcess::terminate(WebKit::WebProcess *this)
{
  WebKit::WebProcess::platformTerminate(this);
  IPC::Connection::invalidate(*((_QWORD *)this + 4));
  return (*(uint64_t (**)(WebKit::WebProcess *))(*(_QWORD *)this + 120))(this);
}

uint64_t WebKit::WebProcess::didReceiveSyncMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(a1 + 40), a2, a3, a4);
}

uint64_t WebKit::WebProcess::didClose(WebKit::WebProcess *this, IPC::Connection *a2)
{
  WTF::FileSystemImpl *v2;
  const WTF::String *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (WTF::FileSystemImpl *)WebCore::HTMLMediaElement::mediaCacheDirectory(this);
  WTF::FileSystemImpl::markPurgeable(v2, v3);
  v4 = WTF::terminateProcess(0);
  return WebKit::WebProcess::webFrame(v4, v5, v6);
}

uint64_t WebKit::WebProcess::webFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 264, v10, (unsigned int **)&v9);
  v4 = (unsigned int *)v9;
  if (!v9)
    return 0;
  v5 = *((_QWORD *)v9 + 1);
  v9 = 0;
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return v5;
}

unsigned int *WebKit::WebProcess::removeWebFrame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int *result;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20[2];
  WTF *v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v5 = a5;
  v23[0] = a2;
  v23[1] = a3;
  v22[0] = a4;
  v22[1] = a5;
  v7 = a1 + 33;
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 33, v23);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::take(v7, v8, &v21);
  if (v21)
  {
    v10 = *((_QWORD *)v21 + 1);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 144))
          {
            v13 = a1[37];
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 24);
              v20[0] = v23;
              IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ClearFrameLoadRecordsForStorageAccess>(v14, v20, 0, 0, 0);
            }
          }
        }
      }
    }
  }
  v15 = a1[4];
  if (v15)
    v16 = v5 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v20[0] = v23;
    v20[1] = v22;
    IPC::Connection::send<Messages::WebProcessProxy::DidDestroyFrame>(v15, v20, 0, 0, 0);
  }
  result = (unsigned int *)v21;
  v21 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr(result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, result));
    if (!v19)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ClearFrameLoadRecordsForStorageAccess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 214;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::DidDestroyFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2549;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, *a2);
  v11 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v9 = result & v7;
  v10 = (_QWORD *)(v6 + 16 * (result & v7));
  v11 = *v10;
  v12 = *a2;
  if (*v10)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == v12)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 16 * v24;
        goto LABEL_15;
      }
      if (v11 == -1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (_QWORD *)(v6 + 16 * v9);
      v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = *a2;
      v10 = v21;
    }
  }
  result = v10[1];
  *v10 = v12;
  v10[1] = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_14;
LABEL_28:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v10);
    v10 = (_QWORD *)result;
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_14;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_28;
LABEL_14:
  v19 = v15 + 16 * v18;
  v20 = 1;
LABEL_15:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

__n128 WebKit::WebProcess::userGestureTokenIdentifier@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v15;
  char v16[8];
  uint64_t v17;
  char v18;

  if (a3 && (v5 = *a4) != 0 && !*(_DWORD *)(v5 + 68) && *(_BYTE *)(v5 + 16) == 1)
  {
    WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultWeakPtrImpl>::ensure<WebKit::WebProcess::userGestureTokenIdentifier(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>)::$_0>(a1 + 600, (_QWORD *)v5, (uint64_t)v16);
    v8 = v17;
    if (v18)
    {
      v13 = v17;
      v9 = *(unsigned int **)(*(_QWORD *)v17 + 8);
      v10 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v10 = off_1E34E08B0;
      *(_QWORD *)(v10 + 8) = a2;
      *(_BYTE *)(v10 + 16) = a3;
      v15 = v10;
      WebCore::UserGestureToken::addDestructionObserver(v9, (unint64_t)&v15);
      v11 = v15;
      v15 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v8 = v13;
    }
    result = *(__n128 *)(v8 + 8);
    *a5 = result;
    a5[1].n128_u8[0] = 1;
  }
  else
  {
    a5->n128_u8[0] = 0;
    a5[1].n128_u8[0] = 0;
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultWeakPtrImpl>::ensure<WebKit::WebProcess::userGestureTokenIdentifier(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>)::$_0>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  unsigned int v27;
  uint64_t *v28;
  uint64_t result;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  WebCore::Process *IdentifierInternal;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  WTF *v45;
  uint64_t *v46;
  uint64_t v47;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  v8 = a2[1];
  if (v8
    || (v8 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v8 = 1,
        *(_QWORD *)(v8 + 8) = a2,
        v11 = (unsigned int *)a2[1],
        a2[1] = v8,
        !v11))
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
  }
  else
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    v8 = a2[1];
    do
      v14 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v14 + 1, (unsigned int *)v8));
    do
      v15 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v15 + 1, (unsigned int *)v8));
    if (!v8)
      goto LABEL_18;
  }
  do
  {
    v16 = __ldaxr((unsigned int *)v8);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v8));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, a2);
  }
LABEL_18:
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a1, 0), (v18 = *(_QWORD *)a1) != 0))
  {
    v19 = 0;
    v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v20 = 0;
    v19 = 1;
  }
  v21 = 0;
  v22 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = (v24 >> 31) ^ v24;
  for (i = 1; ; ++i)
  {
    v27 = v25 & v20;
    v28 = (uint64_t *)(v18 + 24 * (v25 & v20));
    result = *v28;
    if (*v28 != -1)
      break;
    v21 = v18 + 24 * v27;
LABEL_27:
    v25 = i + v27;
  }
  if (!result)
  {
    if (v21)
    {
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      *(_QWORD *)v21 = v8;
    }
    else
    {
      *v28 = v8;
      v21 = (uint64_t)v28;
    }
    IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    result = WebCore::Process::identifier(IdentifierInternal);
    *(_QWORD *)(v21 + 8) = IdentifierInternal;
    *(_QWORD *)(v21 + 16) = result;
    v35 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 <= 2 * v39)
      {
LABEL_47:
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a1, (unsigned int **)v21);
        v21 = result;
        v37 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          LODWORD(v40) = *(_DWORD *)(v37 - 4);
        else
          LODWORD(v40) = 0;
      }
    }
    else if (3 * v40 <= 4 * v39)
    {
      goto LABEL_47;
    }
    v31 = v37 + 24 * v40;
    v33 = 1;
    v28 = (uint64_t *)v21;
    goto LABEL_52;
  }
  if (result != v8)
    goto LABEL_27;
  if ((v19 & 1) != 0)
    v30 = 0;
  else
    v30 = *(_DWORD *)(v18 - 4);
  v31 = v18 + 24 * v30;
  if (v8)
  {
    do
      v32 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v32 - 1, (unsigned int *)v8));
    if (v32 == 1)
    {
      atomic_store(1u, (unsigned int *)v8);
      v45 = (WTF *)v8;
      v46 = v28;
      v47 = v31;
      result = WTF::fastFree(v45, a2);
      v31 = v47;
      v28 = v46;
    }
  }
  v33 = 0;
LABEL_52:
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 16) = v31;
  v41 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v42 = *(_DWORD *)(v41 - 4);
    v43 = v41 + 24 * v42;
  }
  else
  {
    v43 = 0;
    v42 = 0;
  }
  *(_QWORD *)(a3 + 24) = v43;
  *(_QWORD *)(a3 + 32) = v41 + 24 * v42;
  *(_DWORD *)(a3 + 40) = 0;
LABEL_56:
  while (v28 != (uint64_t *)v43 && !*(_QWORD *)(*v28 + 8))
  {
    v44 = v28 + 3;
    *(_QWORD *)(a3 + 8) = v28 + 3;
    v28 = (uint64_t *)v31;
    if (v44 != (uint64_t *)v31)
    {
      v28 = v44;
      while ((unint64_t)(*v28 + 1) <= 1)
      {
        v28 += 3;
        *(_QWORD *)(a3 + 8) = v28;
        if (v28 == (uint64_t *)v31)
        {
          v28 = (uint64_t *)v31;
          goto LABEL_56;
        }
      }
    }
  }
  *(_BYTE *)(a3 + 48) = v33;
  return result;
}

unsigned int *WebCore::UserGestureToken::addDestructionObserver(unsigned int *a1, unint64_t a2)
{
  uint64_t *v2;
  unsigned int *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = a1 + 6;
  v5 = a1[9];
  if ((_DWORD)v5 == a1[8])
  {
    result = (unsigned int *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, a2);
    v2 = (uint64_t *)result;
    v5 = a1[9];
    v6 = (_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  a1[9] = v5 + 1;
  return result;
}

uint64_t WebKit::WebProcess::isJITEnabled(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(MEMORY[0x1E0CC10F8] + 577);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::DidReceiveBackgroundResponsivenessPing>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2555;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

void WebKit::WebProcess::handleInjectedBundleMessage(uint64_t a1, uint64_t a2, const void **a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  const void *v7;
  WebKit *v8;
  WebKit::WebProcess *v9;
  WebKit *v10;
  uint64_t (**v11)();

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *((_QWORD *)v5 + 16);
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *a3;
    v11 = &off_1E34E0668;
    WebKit::UserData::transform(v7, (uint64_t)&v11, &v10);
    (*(void (**)(_QWORD, uint64_t, uint64_t, WebKit **))(**(_QWORD **)(v6 + 40) + 32))(*(_QWORD *)(v6 + 40), v6, a2, &v10);
    v8 = v10;
    v10 = 0;
    if (v8)
      CFRelease(*((CFTypeRef *)v8 + 1));
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void WebKit::WebProcess::setInjectedBundleParameter(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebProcess *v7;
  CFTypeRef *v8;
  WebKit::WebProcess *v9;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = (CFTypeRef *)*((_QWORD *)v7 + 16);
  if (v8)
  {
    CFRetain(v8[1]);
    WebKit::InjectedBundle::setBundleParameter((WebKit::InjectedBundle *)v8, a2, a3, a4);
    CFRelease(v8[1]);
  }
}

void WebKit::WebProcess::setInjectedBundleParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  CFTypeRef *v6;
  WebKit::WebProcess *v7;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = (CFTypeRef *)*((_QWORD *)v5 + 16);
  if (v6)
  {
    CFRetain(v6[1]);
    WebKit::InjectedBundle::setBundleParameters((WebKit::InjectedBundle *)v6, a2, a3);
    CFRelease(v6[1]);
  }
}

uint64_t WebKit::WebProcess::setNetworkProcessConnectionID(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 304);
  if (__ldaxr((unsigned __int8 *)(result + 304)))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEABB3C](result + 304);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  *(_QWORD *)(v3 + 312) = a2;
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void WebKit::WebProcess::networkProcessConnectionClosed(WebKit::WebProcess *this, WebKit::NetworkProcessConnection *a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  _xpc_connection_s *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  _QWORD *v17;
  WTF *v18;
  WTF *i;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  WebCore::SWContextManager *v24;
  WebCore::SWContextManager *v25;
  WebCore::SWContextManager *v26;
  WebCore::SWContextManager *v27;
  uint64_t v28;
  WebCore::SWContextManager *v29;
  WebCore::SWContextManager *v30;
  WebCore::SWContextManager *v31;
  WebCore::SWContextManager *v32;
  _DWORD *v33;
  uint64_t v34;
  WebCore::Page *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  WebCore::DiagnosticLoggingKeys *v39;
  WebCore::DiagnosticLoggingKeys *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  void *v44;
  WebKit::LibWebRTCNetwork *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  WebKit::WebFileSystemStorageConnection *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  int v64;
  WTF::StringImpl *v65;
  _BYTE buf[12];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
    {
      v6 = *((_QWORD *)this + 83);
      if (a2)
        goto LABEL_4;
    }
    else
    {
      v6 = 0;
      if (a2)
      {
LABEL_4:
        v7 = *(_xpc_connection_s **)(*((_QWORD *)a2 + 3) + 352);
        if (v7)
          LODWORD(v7) = xpc_connection_get_pid(v7);
        goto LABEL_8;
      }
    }
    LODWORD(v7) = 0;
LABEL_8:
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = this;
    v67 = 2048;
    v68 = v6;
    v69 = 1024;
    v70 = (int)v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::networkProcessConnectionClosed: NetworkProcess (%d) closed its connection (Crashed)", buf, 0x1Cu);
  }
  v8 = *((_QWORD *)this + 82);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = (_QWORD *)(v8 + 16 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = (_QWORD *)*((_QWORD *)this + 82);
      if ((_DWORD)v9)
      {
        v12 = 16 * v9;
        v11 = (_QWORD *)*((_QWORD *)this + 82);
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          v12 -= 16;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v11 = (_QWORD *)(v8 + 16 * v9);
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = (_QWORD *)(v8 + 16 * v9);
  if (!v8)
  {
    v13 = 0;
LABEL_24:
    v15 = 0;
    goto LABEL_25;
  }
LABEL_21:
  v13 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  v14 = *(unsigned int *)(v8 - 12);
  if (!(_DWORD)v14)
    goto LABEL_24;
  if (v14 >> 29)
  {
    __break(0xC471u);
    return;
  }
  v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
LABEL_25:
  if (v13 != v11)
  {
    v16 = 0;
    do
    {
      v17 = v11 + 2;
      *((_QWORD *)v15 + v16) = *v11;
      v11 = v10;
      if (v17 != v10)
      {
        v11 = v17;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          if (v11 == v10)
          {
            v11 = v10;
            break;
          }
        }
      }
      ++v16;
    }
    while (v11 != v13);
    if (v16)
    {
      v18 = (WTF *)((char *)v15 + 8 * v16);
      for (i = v15; i != v18; i = (WTF *)((char *)i + 8))
      {
        *(_QWORD *)buf = *(_QWORD *)i;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((unsigned int **)this + 82, buf, (unsigned int **)&v65);
        v20 = (unsigned int *)v65;
        if (v65)
        {
          if (!*((_QWORD *)v65 + 1))
          {
            v65 = 0;
            do
            {
LABEL_40:
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v5);
            }
            continue;
          }
          WebKit::StorageAreaMap::disconnect(*((WebKit::StorageAreaMap **)v65 + 1));
          v20 = (unsigned int *)v65;
          v65 = 0;
          if (v20)
            goto LABEL_40;
        }
      }
    }
  }
  if (v15)
    WTF::fastFree(v15, v5);
  v23 = (_QWORD *)((char *)this + 112);
  v24 = (WebCore::SWContextManager *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v25 = v24;
  v27 = v26;
  v28 = *((_QWORD *)this + 14);
  if (v28)
    v29 = (WebCore::SWContextManager *)(v28 + 16 * *(unsigned int *)(v28 - 4));
  else
    v29 = 0;
  if (v29 != v24)
  {
    do
    {
      v24 = (WebCore::SWContextManager *)WebCore::Page::optionalIDBConnection(*(WebCore::Page **)(*((_QWORD *)v25 + 1)
                                                                                                + 48));
      if (v24 && *((_QWORD *)a2 + 9))
        v24 = (WebCore::SWContextManager *)WebCore::Page::clearIDBConnection(*(WebCore::Page **)(*((_QWORD *)v25 + 1)
                                                                                               + 48));
      while (1)
      {
        v25 = (WebCore::SWContextManager *)((char *)v25 + 16);
        if (v25 == v27)
          break;
        if ((unint64_t)(*(_QWORD *)v25 + 1) > 1)
          goto LABEL_57;
      }
      v25 = v27;
LABEL_57:
      ;
    }
    while (v25 != v29);
  }
  v30 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v24);
  v31 = (WebCore::SWContextManager *)WebCore::SWContextManager::connection(v30);
  if (v31)
  {
    v32 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v31);
    WebCore::SWContextManager::stopAllServiceWorkers(v32);
  }
  v33 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v33)
  {
    if (v33[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[4];
  }
  WebKit::WebProcess::setNetworkProcessConnectionID((uint64_t)this, 0);
  v34 = WebKit::WebProcess::focusedWebPage(this);
  if (!v34 || (v35 = *(WebCore::Page **)(v34 + 48)) == 0)
  {
    v36 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
    if (*v23)
      v38 = *v23 + 16 * *(unsigned int *)(*v23 - 4);
    else
      v38 = 0;
    if ((_QWORD *)v38 == v36)
      goto LABEL_86;
    while (!*(_QWORD *)(v36[1] + 48))
    {
      while (1)
      {
        v36 += 2;
        if (v36 == v37)
          break;
        if ((unint64_t)(*v36 + 1) > 1)
          goto LABEL_76;
      }
      v36 = v37;
LABEL_76:
      if (v36 == (_QWORD *)v38)
        goto LABEL_86;
    }
    v35 = *(WebCore::Page **)(v36[1] + 48);
  }
  v39 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(v35);
  v40 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey(v39);
  WebCore::DiagnosticLoggingKeys::networkProcessCrashedKey(v40);
  (**(void (***)(WebCore::DiagnosticLoggingKeys *, _BYTE *, WTF::StringImpl **, _QWORD))v39)(v39, buf, &v65, 0);
  v42 = v65;
  v65 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
LABEL_86:
  WebKit::WebLoaderStrategy::networkProcessCrashed(*((WebKit::WebLoaderStrategy **)this + 40));
  WebKit::WebSocketChannelManager::networkProcessCrashed((WebKit::WebProcess *)((char *)this + 416), v44);
  WebKit::WebBroadcastChannelRegistry::networkProcessCrashed(*((WebKit::WebBroadcastChannelRegistry **)this + 50));
  v45 = (WebKit::LibWebRTCNetwork *)*((_QWORD *)this + 53);
  if (v45)
    WebKit::LibWebRTCNetwork::networkProcessCrashed(v45);
  v46 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v48 = v46;
  v49 = v47;
  if (*v23)
    v50 = *v23 + 16 * *(unsigned int *)(*v23 - 4);
  else
    v50 = 0;
  if ((_QWORD *)v50 != v46)
  {
    do
    {
      WebKit::WebPage::stopAllURLSchemeTasks((WebKit::WebPage *)v48[1]);
      v51 = *(_QWORD *)(v48[1] + 48);
      if (v51)
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 1240) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(v51 + 1240) + 8)))
        {
          *(_QWORD *)buf = 0;
          WebCore::PaymentCoordinator::didCancelPaymentSession();
          v52 = *(const void **)buf;
          *(_QWORD *)buf = 0;
          if (v52)
            CFRelease(v52);
        }
      }
      while (1)
      {
        v48 += 2;
        if (v48 == v49)
          break;
        if ((unint64_t)(*v48 + 1) > 1)
          goto LABEL_100;
      }
      v48 = v49;
LABEL_100:
      ;
    }
    while (v48 != (_QWORD *)v50);
  }
  v53 = (WebKit::WebFileSystemStorageConnection *)*((_QWORD *)this + 41);
  if (v53)
  {
    WebKit::WebFileSystemStorageConnection::connectionClosed(v53);
    v54 = (unsigned int *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = 0;
    if (v54)
    {
      v55 = v54 + 2;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v54 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
      }
    }
  }
  v58 = *(_QWORD *)(*((_QWORD *)this + 46) + 16);
  if (!v58)
    return;
  v59 = (unsigned __int8 *)(v58 + 24);
  if (__ldaxr((unsigned __int8 *)(v58 + 24)))
  {
    __clrex();
LABEL_111:
    MEMORY[0x19AEABB3C](v58 + 24);
    goto LABEL_112;
  }
  if (__stxr(1u, v59))
    goto LABEL_111;
LABEL_112:
  v61 = *(_QWORD *)(v58 + 40);
  if (v61)
  {
    *(_QWORD *)(v58 + 40) = 0;
    WTF::fastFree((WTF *)(v61 - 16), v47);
  }
  v62 = *(_QWORD *)(v58 + 48);
  if (v62)
  {
    *(_QWORD *)(v58 + 48) = 0;
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v62, v47);
  }
  v63 = *(unsigned __int8 ***)(v58 + 32);
  *(_QWORD *)(v58 + 32) = 0;
  if (v63)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v63);
  v64 = __ldxr(v59);
  if (v64 == 1)
  {
    if (!__stlxr(0, v59))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v58 + 24));
}

uint64_t WebKit::WebProcess::fileSystemStorageConnection(WebKit::WebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 **v10;

  result = *((_QWORD *)this + 41);
  if (!result)
  {
    v3 = WebKit::WebProcess::ensureNetworkProcessConnection(this);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, *(unsigned __int8 ***)(v3 + 24));
    v4 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E34EF068;
    v5 = v10;
    v10 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = v5;
    v6 = (unsigned int *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = v4;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    return *((_QWORD *)this + 41);
  }
  return result;
}

uint64_t *WebKit::WebProcess::gpuProcessConnectionClosed(WebKit::WebProcess *this, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;

  v3 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v6 = v4;
  v7 = v5;
  v8 = *((_QWORD *)this + 14);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != v4)
  {
    do
    {
      v10 = v6[1];
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 72);
        if (v11)
        {
          if (!*(_BYTE *)(v11 + 24))
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 80) + 88) + 56))(*(_QWORD *)(*(_QWORD *)(v11 + 80) + 88));
        }
      }
      while (1)
      {
        v6 += 2;
        if (v6 == v7)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_15;
      }
      v6 = v7;
LABEL_15:
      ;
    }
    while (v6 != v9);
  }
  result = (uint64_t *)*((_QWORD *)this + 45);
  if (result)
    return WebKit::AudioMediaStreamTrackRendererInternalUnitManager::restartAllUnits(result, v5);
  return result;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::GPUProcessConnectionDidBecomeUnresponsive>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2558;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  v11 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

uint64_t *WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager(WebKit::WebProcess *this)
{
  uint64_t *result;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  result = (uint64_t *)*((_QWORD *)this + 45);
  if (!result)
  {
    v3 = (uint64_t **)((char *)this + 360);
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v4 = 0;
    v5 = 0;
    std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100](v3, v4);
    std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100](&v5, 0);
    return *v3;
  }
  return result;
}

uint64_t WebKit::WebProcess::fetchWebsiteData(WebCore::MemoryCache *a1, char a2, uint64_t *a3)
{
  uint64_t result;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t *v27;
  WTF *v28[2];
  __int128 v29;
  WTF::StringImpl **v30;
  char v31;
  _BYTE v32[24];
  int v33;
  __int128 v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  if ((a2 & 4) != 0)
  {
    WebCore::MemoryCache::singleton(a1);
    if (!*((_BYTE *)a1 + 672))
      __break(1u);
    result = WebCore::MemoryCache::originsWithCache();
    v25 = 0;
    v26 = 0;
    v7 = v27;
    if (!v27)
      goto LABEL_31;
    v8 = *((unsigned int *)v27 - 3);
    if ((_DWORD)v8)
    {
      if (v8 >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v26) = 48 * (int)v8 / 0x30u;
      v25 = (WTF *)WTF::fastMalloc((WTF *)(48 * v8));
      v7 = v27;
      v9 = v25;
    }
    else
    {
      v9 = 0;
    }
    if (!*((_DWORD *)v7 - 3))
      goto LABEL_31;
    v10 = *((unsigned int *)v7 - 1);
    v11 = v7;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      v11 = v7;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_31;
      }
    }
    v13 = &v7[v10];
    if (v13 != v11)
    {
      v14 = 0;
LABEL_16:
      v15 = *v11 + 8;
      v35[0] = 0;
      v36 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v35, v15);
      v32[0] = 0;
      v33 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v32, (uint64_t)v35);
      LODWORD(v34) = 4;
      *((_QWORD *)&v34 + 1) = 0;
      if (v36 != -1)
        ((void (*)(char *, _BYTE *))off_1E34E0750[v36])(&v31, v35);
      v16 = (uint64_t)v9 + 48 * v14;
      *(_BYTE *)v16 = 0;
      *(_DWORD *)(v16 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v16, (uint64_t)v32);
      *(_OWORD *)(v16 + 32) = v34;
      if (v33 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E34E0750[v33])(v35, v32);
      ++v14;
      while (++v11 != v13)
      {
        if ((unint64_t)(*v11 + 1) > 1)
        {
          if (v11 != v13)
            goto LABEL_16;
          break;
        }
      }
      v17 = v28[0];
      if (HIDWORD(v28[1]))
      {
        v18 = 48 * HIDWORD(v28[1]);
        v19 = v28[0];
        do
        {
          v20 = *((unsigned int *)v19 + 6);
          if ((_DWORD)v20 != -1)
            ((void (*)(_BYTE *, WTF *))off_1E34E0750[v20])(v32, v19);
          *((_DWORD *)v19 + 6) = -1;
          v19 = (WTF *)((char *)v19 + 48);
          v18 -= 48;
        }
        while (v18);
      }
      if (v17)
        WTF::fastFree(v17, v6);
    }
    else
    {
LABEL_31:
      v14 = 0;
    }
    v28[0] = v25;
    v21 = v26;
    v25 = 0;
    v26 = 0;
    v28[1] = (WTF *)__PAIR64__(v14, v21);
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v6);
    if (v27)
      WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(v27, v22);
  }
  v23 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v23 + 16))(v23, v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v30)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v24);
  if (*((_QWORD *)&v29 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v29 + 1), v24);
  if ((_QWORD)v29)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v29, v24);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v24);
}

uint64_t WebKit::WebProcess::deleteWebsiteData(WebCore::BackForwardCache *a1, char a2, uint64_t *a3)
{
  WebCore::MemoryCache *v5;
  uint64_t result;
  WebCore::CrossOriginPreflightResultCache *v7;
  WebCore::CrossOriginPreflightResultCache *v8;
  uint64_t v9;

  if ((a2 & 4) == 0)
    goto LABEL_4;
  WebCore::BackForwardCache::singleton(a1);
  v5 = (WebCore::MemoryCache *)WebCore::BackForwardCache::pruneToSizeNow();
  result = WebCore::MemoryCache::singleton(v5);
  if (*((_BYTE *)a1 + 672))
  {
    v7 = (WebCore::CrossOriginPreflightResultCache *)WebCore::MemoryCache::evictResources();
    v8 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::singleton(v7);
    WebCore::CrossOriginPreflightResultCache::clear(v8);
LABEL_4:
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebProcess::deleteAllCookies(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebKit::WebCookieCache::clear((WebKit::WebCookieCache *)(*(_QWORD *)(a1 + 408) + 32));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebProcess::deleteWebsiteDataForOrigin(WebCore::MemoryCache *a1, char a2, uint64_t a3, uint64_t *a4)
{
  WebCore::MemoryCache *v6;
  WebCore::BackForwardCache *v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WebCore::SecurityOrigin **v12;
  int i;
  unsigned int v14;
  WebCore::SecurityOrigin **v15;
  WebCore::SecurityOrigin *v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v25;
  uint64_t *v26;
  int v27;
  __int16 v28;
  char v29;

  if ((a2 & 4) == 0)
    goto LABEL_31;
  v6 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(a1);
  WebCore::MemoryCache::removeResourcesWithOrigin(v6, (const WebCore::ClientOrigin *)a3);
  v7 = (WebCore::BackForwardCache *)WebCore::operator==();
  if (!(_DWORD)v7)
    goto LABEL_31;
  WebCore::BackForwardCache::singleton(v7);
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(a3 + 32));
  v26 = 0;
  WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v26);
  v8 = v26;
  if (v26)
    v9 = *((_DWORD *)v26 - 2);
  else
    v9 = 0;
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v27, (uint64_t)v25 + 8);
  v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v10 & v9;
    v15 = (WebCore::SecurityOrigin **)&v8[v10 & v9];
    v16 = *v15;
    if (*v15 == (WebCore::SecurityOrigin *)-1)
    {
      v12 = (WebCore::SecurityOrigin **)&v8[v14];
      goto LABEL_13;
    }
    if (!v16)
      break;
    if (v25 && (WebCore::SecurityOrigin::isSameSchemeHostPort(v16, v25) & 1) != 0)
      goto LABEL_27;
LABEL_13:
    v10 = i + v14;
  }
  if (v12)
  {
    v16 = 0;
    *v12 = 0;
    --*((_DWORD *)v26 - 4);
    v15 = v12;
  }
  if (v25)
  {
    do
      v17 = __ldaxr((unsigned int *)v25);
    while (__stlxr(v17 + 1, (unsigned int *)v25));
    v16 = *v15;
  }
  *v15 = v25;
  if (v16)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v16, v11);
  v18 = v26;
  if (v26)
    v19 = *((_DWORD *)v26 - 3) + 1;
  else
    v19 = 1;
  *((_DWORD *)v26 - 3) = v19;
  v20 = (*((_DWORD *)v18 - 4) + v19);
  v21 = *((unsigned int *)v18 - 1);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
LABEL_26:
      WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v26);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_26;
  }
LABEL_27:
  WebCore::BackForwardCache::clearEntriesForOrigins();
  if (v26)
    WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(v26, v22);
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, v22);
LABEL_31:
  v23 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
}

uint64_t WebKit::WebProcess::reloadExecutionContextsForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 112));
  v7 = v6;
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 112);
  if (v10)
    v11 = (_QWORD *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  else
    v11 = 0;
  if (v11 != v6)
  {
    do
    {
      if (*(_QWORD *)(v7[1] + 48))
        WebCore::Page::reloadExecutionContextsForOrigin();
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_11;
      }
      v7 = v9;
LABEL_11:
      ;
    }
    while (v7 != v11);
  }
  v12 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t WebKit::WebProcess::deleteWebsiteDataForOrigins(WebCore::MemoryCache *a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  WebCore::SecurityOriginData *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  WTF **v10;
  int i;
  unsigned int v12;
  WebCore::SecurityOrigin **v13;
  WebCore::SecurityOrigin *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  WebCore::BackForwardCache *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _QWORD *v24;
  WebCore::MemoryCache *v25;
  WTF *v26;
  uint64_t *v27;
  int v28;
  __int16 v29;
  char v30;

  if ((a2 & 4) == 0)
    goto LABEL_33;
  v24 = a4;
  v25 = a1;
  v27 = 0;
  v4 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v4)
    goto LABEL_29;
  v5 = *(WebCore::SecurityOriginData **)a3;
  v6 = *(_QWORD *)a3 + 32 * v4;
  do
  {
    WebCore::SecurityOriginData::securityOrigin(v5);
    v7 = v27;
    if (v27
      || (WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v27),
          (v7 = v27) != 0))
    {
      v8 = *((_DWORD *)v7 - 2);
    }
    else
    {
      v8 = 0;
    }
    v28 = -1640531527;
    v29 = 0;
    v30 = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v28, (uint64_t)v26 + 8);
    v9 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28);
    v10 = 0;
    for (i = 1; ; ++i)
    {
      v12 = v9 & v8;
      v13 = (WebCore::SecurityOrigin **)&v7[v9 & v8];
      v14 = *v13;
      if (*v13 == (WebCore::SecurityOrigin *)-1)
      {
        v10 = (WTF **)&v7[v12];
        goto LABEL_14;
      }
      if (!v14)
        break;
      if (v26 && (WebCore::SecurityOrigin::isSameSchemeHostPort(v14, v26) & 1) != 0)
      {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v15);
        goto LABEL_24;
      }
LABEL_14:
      v9 = i + v12;
    }
    if (v10)
    {
      *v10 = 0;
      --*((_DWORD *)v27 - 4);
      *v10 = v26;
    }
    else
    {
      *v13 = v26;
    }
    v16 = v27;
    if (v27)
      v17 = *((_DWORD *)v27 - 3) + 1;
    else
      v17 = 1;
    *((_DWORD *)v27 - 3) = v17;
    v18 = (*((_DWORD *)v16 - 4) + v17);
    v19 = *((unsigned int *)v16 - 1);
    if (v19 > 0x400)
    {
      if (v19 <= 2 * v18)
LABEL_23:
        WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand((uint64_t *)&v27);
    }
    else if (3 * v19 <= 4 * v18)
    {
      goto LABEL_23;
    }
LABEL_24:
    a1 = 0;
    v26 = 0;
    v5 = (WebCore::SecurityOriginData *)((char *)v5 + 32);
  }
  while (v5 != (WebCore::SecurityOriginData *)v6);
LABEL_29:
  result = WebCore::MemoryCache::singleton(a1);
  if (*((_BYTE *)v25 + 672))
  {
    v21 = (WebCore::BackForwardCache *)WebCore::MemoryCache::removeResourcesWithOrigins();
    WebCore::BackForwardCache::singleton(v21);
    WebCore::BackForwardCache::clearEntriesForOrigins();
    if (v27)
      WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(v27, v22);
    a4 = v24;
LABEL_33:
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::WebProcess::setHiddenPageDOMTimerThrottlingIncreaseLimit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 112));
  v3 = (_QWORD *)result;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != (_QWORD *)result)
  {
    do
    {
      result = WebCore::Page::setDOMTimerAlignmentIntervalIncreaseLimit();
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WebKit::WebProcess::releaseMemory(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71640;
  v5 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (*(_BYTE *)(a1 + 672))
      v6 = *(_QWORD *)(a1 + 664);
    else
      v6 = 0;
    v19 = 134218240;
    v20 = a1;
    v21 = 2048;
    v22 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::releaseMemory: BEGIN", (uint8_t *)&v19, 0x16u);
  }
  v7 = *(_BYTE *)(a1 + 617);
  *(_BYTE *)(a1 + 617) = 0;
  WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v5);
  WTF::MemoryPressureHandler::releaseMemory();
  v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 112));
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 112);
  if (v12)
    v13 = (_QWORD *)(v12 + 16 * *(unsigned int *)(v12 - 4));
  else
    v13 = 0;
  if (v13 != v8)
  {
    do
    {
      v14 = *(_QWORD *)(v9[1] + 2392);
      if (v14)
        WebKit::RemoteResourceCacheProxy::releaseMemory((WTF::ApproximateTime **)(v14 + 64));
      while (1)
      {
        v9 += 2;
        if (v9 == v11)
          break;
        if ((unint64_t)(*v9 + 1) > 1)
          goto LABEL_16;
      }
      v9 = v11;
LABEL_16:
      ;
    }
    while (v9 != v13);
  }
  v15 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 672))
      v16 = *(_QWORD *)(a1 + 664);
    else
      v16 = 0;
    v19 = 134218240;
    v20 = a1;
    v21 = 2048;
    v22 = v16;
    _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::releaseMemory: END", (uint8_t *)&v19, 0x16u);
  }
  v17 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_BYTE *)(a1 + 617) = v7;
  return result;
}

_QWORD *WebKit::WebProcess::cancelMarkAllLayersVolatile(WebKit::WebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  WebKit::WebProcess *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v3 = *((_QWORD *)this + 83);
    else
      v3 = 0;
    v10 = 134218240;
    v11 = this;
    v12 = 2048;
    v13 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::cancelMarkAllLayersVolatile:", (uint8_t *)&v10, 0x16u);
  }
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v5 = (uint64_t)result;
  v7 = v6;
  v8 = *((_QWORD *)this + 14);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = (_QWORD *)WebKit::WebPage::cancelMarkLayersVolatile(*(WebKit::WebPage **)(v5 + 8));
      while (1)
      {
        v5 += 16;
        if (v5 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_15;
      }
      v5 = v7;
LABEL_15:
      ;
    }
    while ((_QWORD *)v5 != v9);
  }
  return result;
}

_QWORD *WebKit::WebProcess::unfreezeAllLayerTrees(WebKit::WebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  WebKit::WebProcess *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v3 = *((_QWORD *)this + 83);
    else
      v3 = 0;
    v10 = 134218240;
    v11 = this;
    v12 = 2048;
    v13 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::unfreezeAllLayerTrees: WebProcess is unfreezing all layer trees", (uint8_t *)&v10, 0x16u);
  }
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v5 = result;
  v7 = v6;
  v8 = *((_QWORD *)this + 14);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = (_QWORD *)WebKit::WebPage::unfreezeLayerTree(v5[1], 4);
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_15;
      }
      v5 = v7;
LABEL_15:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

void WebKit::WebProcess::processDidResume(WebKit::WebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  WebCore::PlatformMediaSessionManager *v4;
  WebCore::PlatformMediaSessionManager *v5;
  int v6;
  WebKit::WebProcess *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v3 = *((_QWORD *)this + 83);
    else
      v3 = 0;
    v6 = 134218240;
    v7 = this;
    v8 = 2048;
    v9 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::processDidResume:", (uint8_t *)&v6, 0x16u);
  }
  *((_BYTE *)this + 504) = 0;
  if (*((_DWORD *)this + 149) != 2)
  {
    WebKit::WebProcess::cancelMarkAllLayersVolatile(this);
    WebKit::WebProcess::unfreezeAllLayerTrees(this);
    WebKit::WebProcess::accessibilityRelayProcessSuspended(this, 0);
    v5 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(v4);
    if (v5)
      WebCore::PlatformMediaSessionManager::processDidResume(v5);
    WebKit::WebProcess::resumeAllMediaBuffering(this);
  }
}

uint64_t WebKit::WebProcess::resumeAllMediaBuffering(WebKit::WebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 14);
  if (v6)
    v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      result = WebKit::WebPage::resumeAllMediaBuffering(*(WebCore::Page ***)(v3 + 8));
      while (1)
      {
        v3 += 16;
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcess::sendPrewarmInformation(WebKit::WebProcess *this, const WTF::URL *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WebCore::ProcessWarming *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _BYTE v9[16];
  uint64_t v10;
  _QWORD v11[2];
  WTF::StringImpl *v12;

  WebCore::RegistrableDomain::RegistrableDomain(&v12, a2);
  result = v12;
  if (v12)
  {
    if (*((_DWORD *)v12 + 1))
    {
      v5 = (WebCore::ProcessWarming *)MEMORY[0x19AEABBCC]();
      if ((v5 & 1) == 0)
      {
        v6 = *((_QWORD *)this + 4);
        WebCore::ProcessWarming::collectPrewarmInformation(v5);
        v11[0] = &v12;
        v11[1] = v9;
        IPC::Connection::send<Messages::WebProcessProxy::DidCollectPrewarmInformation>(v6, v11, 0, 0, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
      }
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::DidCollectPrewarmInformation>(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2548;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,0ul,1ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void WebKit::WebProcess::pageDidEnterWindow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a2;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add((uint64_t)&v3, (uint64_t *)(a1 + 512), &v4);
  std::__optional_destruct_base<WebCore::DeferrableOneShotTimer,false>::reset[abi:sn180100]((WebCore::TimerBase *)(a1 + 520));
}

void std::__optional_destruct_base<WebCore::DeferrableOneShotTimer,false>::reset[abi:sn180100](WebCore::TimerBase *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 64))
  {
    *(_QWORD *)this = off_1E34E0DF8;
    v2 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    WebCore::TimerBase::~TimerBase(this);
    *((_BYTE *)this + 64) = 0;
  }
}

void WebKit::WebProcess::nonVisibleProcessEarlyMemoryCleanupTimerFired(WebKit::WebProcess *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  WebCore::MemoryCache *v7;
  WebCore::MemoryCache *v8;
  WebCore::MemoryCache *v9;
  WebCore::MemoryCache *v10;
  uint64_t v11;
  WebCore::MemoryCache *v12;

  v2 = *((_QWORD *)this + 64);
  if (!v2 || !*(_DWORD *)(v2 - 12))
  {
    v3 = (_QWORD *)((char *)this + 112);
    v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
    v6 = (_QWORD *)*((_QWORD *)this + 14);
    if (v6)
      v6 += 2 * *((unsigned int *)v6 - 1);
    if (v6 == v4)
    {
LABEL_12:
      v7 = (WebCore::MemoryCache *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
      v8 = v7;
      v10 = v9;
      if (*v3)
        v11 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
      else
        v11 = 0;
      if ((WebCore::MemoryCache *)v11 != v7)
      {
        do
        {
          v7 = (WebCore::MemoryCache *)WebKit::WebPage::willDestroyDecodedDataForAllImages(*((WebKit::WebPage **)v8 + 1));
          while (1)
          {
            v8 = (WebCore::MemoryCache *)((char *)v8 + 16);
            if (v8 == v10)
              break;
            if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
              goto LABEL_21;
          }
          v8 = v10;
LABEL_21:
          ;
        }
        while (v8 != (WebCore::MemoryCache *)v11);
      }
      v12 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v7);
      WebCore::MemoryCache::destroyDecodedDataForAllImages(v12);
    }
    else
    {
      while (!*(_BYTE *)(v4[1] + 113))
      {
        while (1)
        {
          v4 += 2;
          if (v4 == v5)
            break;
          if ((unint64_t)(*v4 + 1) > 1)
            goto LABEL_11;
        }
        v4 = v5;
LABEL_11:
        if (v4 == v6)
          goto LABEL_12;
      }
    }
    WebKit::WebProcess::destroyRenderingResources(this);
  }
}

uint64_t WebCore::DeferrableOneShotTimer::restart(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 32);
  if ((v1 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v1 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    return WebCore::TimerBase::start();
  *(_QWORD *)(this + 32) = v1 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
  return this;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaMap&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a3;
  if (*v12)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v13 == v14)
      {
        v25 = *a2;
        if (*a2)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1)
        v23 = v12;
      v11 = (v11 + v24) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v12 = v23;
    }
  }
  *v12 = v14;
  result = (uint64_t)WTF::GenericHashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::StorageAreaMap&>((unsigned int **)v12 + 1, a4);
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v12);
    v12 = (_QWORD *)result;
    v17 = *a2;
    if (*a2)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_24;
LABEL_11:
  v21 = v17 + 16 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

unsigned int *WebKit::WebProcess::unregisterStorageAreaMap(WebKit::WebProcess *this, WebKit::StorageAreaMap *a2)
{
  uint64_t *v3;
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;

  v7 = *((_QWORD *)a2 + 2);
  v3 = (uint64_t *)((char *)this + 656);
  result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 82, &v7);
  v5 = *((_QWORD *)this + 82);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

WTF::StringImpl *WebKit::WebProcess::clearResourceLoadStatistics(WebKit::WebProcess *this)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v2 = WebCore::ResourceLoadObserver::sharedIfExists(this);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v5 = result;
  v6 = v4;
  v7 = *((_QWORD *)this + 14);
  if (v7)
    v8 = (WTF::StringImpl *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  else
    v8 = 0;
  if (v8 != result)
  {
    do
    {
      v9 = *((_QWORD *)v5 + 1);
      result = *(WTF::StringImpl **)(v9 + 2216);
      if (result)
      {
        *(_QWORD *)(v9 + 2216) = 0;
        result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)result, v4);
      }
      while (1)
      {
        v5 = (WTF::StringImpl *)((char *)v5 + 16);
        if (v5 == v6)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_13;
      }
      v5 = v6;
LABEL_13:
      ;
    }
    while (v5 != v8);
  }
  return result;
}

uint64_t WebKit::WebProcess::seedResourceLoadStatisticsForTesting(WebCore::ResourceLoadObserver *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = WebCore::ResourceLoadObserver::sharedIfExists(a1);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::WebProcess::ensureAutomationSessionProxy(WebKit::WebProcess *this, const WTF::String *a2)
{
  WebKit::WebAutomationSessionProxy *v4;
  uint64_t result;

  v4 = (WebKit::WebAutomationSessionProxy *)WTF::fastMalloc((WTF *)0x30);
  WebKit::WebAutomationSessionProxy::WebAutomationSessionProxy(v4, a2);
  result = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *WebKit::WebProcess::prefetchDNS(uint64_t *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t *v6[2];
  char v7;

  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    v4 = (WebKit::WebProcess *)this;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(this + 54, a2, a3, (uint64_t)v6);
    if (v7)
    {
      v5 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v4) + 24);
      v6[0] = (uint64_t *)a2;
      IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PrefetchDNS>(v5, v6, 0, 0, 0);
    }
    return (uint64_t *)PAL::HysteresisActivity::impulse((_BYTE *)v4 + 440);
  }
  return this;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PrefetchDNS>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 248;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::WebProcess::clearCachedPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::BackForwardCache *v5;
  WebCore::HistoryItem *v6;
  WebCore::BackForwardCache *v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  v5 = (WebCore::BackForwardCache *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::idToHistoryItemMap(void)::map, v10);
  if (v5)
  {
    v6 = v5;
    v7 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v5);
    WebCore::BackForwardCache::remove(v7, v6);
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

unsigned __int8 ***WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::WebProcess *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, WebKit::WebPage *a6, uint64_t *a7, __int128 *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v17;
  unsigned __int8 ***v18;
  __int128 v19;
  uint64_t v20;
  WebCore::SWContextManager *v21;
  WebCore::SWContextManager *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::SharedWorkerContextManager *v25;
  WebCore::SharedWorkerContextManager *v26;
  unsigned __int8 **v28;
  __int128 v29[3];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v17 = WebKit::WebProcess::ensureNetworkProcessConnection(a1);
  v18 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v28, *(unsigned __int8 ***)(v17 + 24));
  if (a2 == 2)
  {
    WebCore::SharedWorkerContextManager::singleton((WebCore::SharedWorkerContextManager *)v18);
    v24 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)&v29[0] = WebKit::WebSharedWorkerContextManagerConnection::WebSharedWorkerContextManagerConnection(v24, (uint64_t *)&v28, a7, a3, a4, a5, a6, a9);
    WebCore::SharedWorkerContextManager::setConnection();
    v25 = *(WebCore::SharedWorkerContextManager **)&v29[0];
    *(_QWORD *)&v29[0] = 0;
    if (v25)
      v25 = (WebCore::SharedWorkerContextManager *)(*(uint64_t (**)(WebCore::SharedWorkerContextManager *))(*(_QWORD *)v25 + 8))(v25);
    v26 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton(v25);
    v23 = WebCore::SharedWorkerContextManager::connection(v26);
    goto LABEL_9;
  }
  if (a2 == 1)
  {
    WebCore::SWContextManager::singleton((WebCore::SWContextManager *)v18);
    v19 = a8[1];
    v29[0] = *a8;
    v29[1] = v19;
    v29[2] = a8[2];
    v20 = WTF::fastMalloc((WTF *)0x110);
    *(_QWORD *)&v29[0] = WebKit::WebSWContextManagerConnection::WebSWContextManagerConnection(v20, (uint64_t *)&v28, a7, v29, a3, a4, a5, a6, a9);
    WebCore::SWContextManager::setConnection();
    v21 = *(WebCore::SWContextManager **)&v29[0];
    *(_QWORD *)&v29[0] = 0;
    if (v21)
      v21 = (WebCore::SWContextManager *)(*(uint64_t (**)(WebCore::SWContextManager *))(*(_QWORD *)v21 + 184))(v21);
    v22 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v21);
    v23 = WebCore::SWContextManager::connection(v22);
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, a10);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v28);
}

uint64_t WebKit::WebProcess::removeServiceWorkerRegistration(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 648);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 648), &v11);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 648);
  if (v6)
    v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  if (v7 == v4)
    return 0;
  v8 = *(_DWORD *)(v4 + 8) - 1;
  if (*(_DWORD *)(v4 + 8) != 1)
  {
    result = 0;
    *(_DWORD *)(v5 + 8) = v8;
    return result;
  }
  if (v6)
  {
    v10 = v6 + 16 * *(unsigned int *)(v6 - 4);
    if (v10 == v4)
      return 1;
LABEL_13:
    if (v10 != v4)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, (_QWORD *)v4);
    return 1;
  }
  if (v4)
  {
    v10 = 0;
    goto LABEL_13;
  }
  return 1;
}

uint64_t WebKit::WebProcess::grantUserMediaDeviceSandboxExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  const char ***v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  WTF **v20;
  int i;
  unsigned int v22;
  WTF **v23;
  WTF *v24;
  WTF::StringImpl *v25;
  const char ***v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  const char ***v33;
  WTF::StringImpl *v34;
  uint64_t result;
  uint64_t v36;
  const char ***v37;
  uint64_t v38;
  uint64_t *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v3 = a1;
  v49 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a2 + 12))
    goto LABEL_57;
  v4 = 0;
  v5 = (uint64_t *)(a1 + 624);
  v39 = (uint64_t *)(a1 + 624);
  do
  {
    WebKit::MediaDeviceSandboxExtensions::operator[]((uint64_t *)a2, v4, &v41);
    v6 = v42;
    v7 = *(_QWORD *)(v42 + 16);
    *(_QWORD *)(v42 + 16) = v7 + 1;
    if (!v7)
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v6 + 8));
    v8 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_BYTE *)(v3 + 672) ? *(_QWORD *)(v3 + 664) : 0;
      WTF::String::utf8();
      v11 = v40 ? (uint64_t)v40 + 16 : 0;
      *(_DWORD *)buf = 134218498;
      v44 = v3;
      v45 = 2048;
      v46 = v10;
      v47 = 2080;
      v48 = v11;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::grantUserMediaDeviceSandboxExtensions: granted extension %s", buf, 0x20u);
      v13 = v40;
      v40 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v12);
        else
          --*(_DWORD *)v13;
      }
    }
    v14 = (const char ***)v42;
    if (v42)
      ++*(_DWORD *)v42;
    v15 = v3;
    v16 = *v5;
    if (*v5
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5),
          (v16 = *v5) != 0))
    {
      v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = *((_DWORD *)v41 + 4);
    if (v18 >= 0x100)
      v19 = v18 >> 8;
    else
      v19 = WTF::StringImpl::hashSlowCase(v41);
    v20 = 0;
    for (i = 1; ; ++i)
    {
      v22 = v19 & v17;
      v23 = (WTF **)(v16 + 16 * (v19 & v17));
      v24 = *v23;
      if (*v23 == (WTF *)-1)
      {
        v20 = (WTF **)(v16 + 16 * v22);
        goto LABEL_30;
      }
      if (!v24)
      {
        v5 = v39;
        if (v20)
        {
          *v20 = 0;
          v20[1] = 0;
          --*(_DWORD *)(*v39 - 16);
          v23 = v20;
        }
        WTF::String::operator=(v23, (WTF::StringImpl *)&v41);
        v26 = (const char ***)v23[1];
        v23[1] = (WTF *)v14;
        v3 = v15;
        if (v26)
          WTF::RefCounted<WebKit::SandboxExtension>::deref(v26);
        v27 = *v39;
        if (*v39)
          v28 = *(_DWORD *)(v27 - 12) + 1;
        else
          v28 = 1;
        *(_DWORD *)(v27 - 12) = v28;
        v29 = *v39;
        if (*v39)
          v30 = *(_DWORD *)(v29 - 12);
        else
          v30 = 0;
        v31 = (*(_DWORD *)(v29 - 16) + v30);
        v32 = *(unsigned int *)(v29 - 4);
        if (v32 > 0x400)
        {
          if (v32 > 2 * v31)
            goto LABEL_46;
        }
        else if (3 * v32 > 4 * v31)
        {
          goto LABEL_46;
        }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v39);
        goto LABEL_46;
      }
      if (WTF::equal(v24, v41, v9))
        break;
LABEL_30:
      v19 = i + v22;
    }
    v3 = v15;
    v5 = v39;
    if (v14)
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v14);
LABEL_46:
    v33 = (const char ***)v42;
    v42 = 0;
    if (v33)
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v33);
    v34 = v41;
    v41 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v25);
      else
        *(_DWORD *)v34 -= 2;
    }
    ++v4;
  }
  while (v4 < *(unsigned int *)(a2 + 12));
LABEL_57:
  if (*(_QWORD *)(a2 + 32))
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    v36 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 8) = v36;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = 0;
  }
  v37 = *(const char ****)(v3 + 632);
  *(_QWORD *)(v3 + 632) = result;
  if (v37)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v37);
    result = *(_QWORD *)(v3 + 632);
  }
  if (result)
  {
    v38 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = v38 + 1;
    if (!v38)
      return WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(result + 8));
  }
  return result;
}

uint64_t WebKit::WebProcess::revokeUserMediaDeviceSandboxExtensions(uint64_t result, unsigned int *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v3 = result;
  v38 = *MEMORY[0x1E0C80C00];
  v4 = a2[3];
  if ((_DWORD)v4)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = *(_QWORD *)a2 + 8 * v4;
    v7 = (uint64_t *)(result + 624);
    do
    {
      v8 = *v7;
      if (*v7)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = *((_DWORD *)*v5 + 4);
        if (v10 >= 0x100)
          v11 = v10 >> 8;
        else
          v11 = WTF::StringImpl::hashSlowCase(*v5);
        for (i = 0; ; v11 = i + v13)
        {
          v13 = v11 & v9;
          result = *(_QWORD *)(v8 + 16 * v13);
          if (result != -1)
          {
            if (!result)
            {
              v14 = *v7;
              if (!*v7)
                goto LABEL_44;
              v15 = v14 + 16 * *(unsigned int *)(v14 - 4);
              goto LABEL_15;
            }
            result = WTF::equal((WTF *)result, *v5, a3);
            if ((result & 1) != 0)
              break;
          }
          ++i;
        }
        v15 = v8 + 16 * v13;
        v14 = *v7;
        if (!*v7)
          goto LABEL_16;
LABEL_15:
        v14 += 16 * *(unsigned int *)(v14 - 4);
LABEL_16:
        if (v14 != v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          v17 = *v7;
          if (!*v7 || (v17 += 16 * *(unsigned int *)(v17 - 4), v17 != v15))
          {
            if (v17 != v15)
            {
              WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
              result = *(_QWORD *)(v15 + 8);
              *(_QWORD *)(v15 + 8) = 0;
              if (result)
                result = (uint64_t)WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)result);
              ++*(_DWORD *)(*v7 - 16);
              v18 = *v7;
              if (*v7)
                v19 = *(_DWORD *)(v18 - 12) - 1;
              else
                v19 = -1;
              *(_DWORD *)(v18 - 12) = v19;
              v20 = *v7;
              if (*v7)
              {
                v21 = 6 * *(_DWORD *)(v20 - 12);
                v22 = *(_DWORD *)(v20 - 4);
                if (v21 < v22 && v22 >= 9)
                  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v3 + 624), v22 >> 1);
              }
            }
          }
          if (v16)
          {
            v23 = *(_QWORD *)(v16 + 16) - 1;
            *(_QWORD *)(v16 + 16) = v23;
            if (!v23)
            {
              *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) = 0;
              sandbox_extension_release();
            }
            v24 = qword_1ECE71B18;
            if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
            {
              v25 = *(_BYTE *)(v3 + 672) ? *(_QWORD *)(v3 + 664) : 0;
              WTF::String::utf8();
              v26 = v31 ? (uint64_t)v31 + 16 : 0;
              *(_DWORD *)buf = 134218498;
              v33 = v3;
              v34 = 2048;
              v35 = v25;
              v36 = 2080;
              v37 = v26;
              _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::revokeUserMediaDeviceSandboxExtensions: revoked extension %s", buf, 0x20u);
              v28 = v31;
              v31 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                  WTF::fastFree(v28, v27);
                else
                  --*(_DWORD *)v28;
              }
            }
            result = (uint64_t)WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v16);
          }
        }
      }
LABEL_44:
      ++v5;
    }
    while (v5 != (WTF::StringImpl **)v6);
  }
  v29 = *(_QWORD *)(v3 + 632);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 16) - 1;
    *(_QWORD *)(v29 + 16) = v30;
    if (!v30)
    {
      *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8) = 0;
      return sandbox_extension_release();
    }
  }
  return result;
}

uint64_t WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>> const,WebKit::WebProcess::areAllPagesThrottleable(void)::$_0>(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t result;

  v1 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[3];
  if (v1 == v2)
    return 1;
  v3 = (_QWORD *)a1[2];
  do
  {
    v4 = v1[1];
    v6 = *(_BYTE *)(v4 + 1834) == 0;
    v5 = *(_WORD *)(v4 + 1832) & 0x1E1;
    v6 = !v6 && v5 == 32;
    result = v6;
    if (!v6)
      break;
    while (1)
    {
      v1 += 2;
      if (v1 == v3)
        break;
      if ((unint64_t)(*v1 + 1) > 1)
        goto LABEL_15;
    }
    v1 = v3;
LABEL_15:
    ;
  }
  while (v1 != v2);
  return result;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::SetAppBadge>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2561;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::SetClientBadge>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2564;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::WebProcess::setThirdPartyCookieBlockingMode(WebKit::WebProcess *a1, int a2, uint64_t *a3)
{
  uint64_t v4;

  if (*((unsigned __int8 *)a1 + 680) != a2)
  {
    *((_BYTE *)a1 + 680) = a2;
    if (a2)
      WebKit::WebProcess::updateCachedCookiesEnabled(a1);
  }
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::WebProcess::updateCachedCookiesEnabled(WebKit::WebProcess *this)
{
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  result = WebCore::Document::allDocuments(this);
  v2 = v5;
  while (v2 != v7)
  {
    result = WebCore::Document::updateCachedCookiesEnabled(*(WebCore::Document **)(v2[4] + 8));
    while (1)
    {
      v2 += 6;
      if (v2 == v6)
        break;
      v3 = v2[2];
      if (*v2 | v2[1] | v3)
        v4 = v3 == -1;
      else
        v4 = 1;
      if (!v4)
        goto LABEL_10;
    }
    v2 = v6;
LABEL_10:
    ;
  }
  return result;
}

uint64_t WebKit::WebProcess::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  WebCore::ResourceLoadObserver *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WebCore::ResourceLoadObserver *v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash **v13;
  WTF::ASCIICaseInsensitiveHash **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v6 = (WebCore::ResourceLoadObserver *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v9 = v6;
  v21[0] = v6;
  v21[1] = v7;
  if (*a2)
    v10 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
  else
    v10 = 0;
  if ((WebCore::ResourceLoadObserver *)v10 != v6)
  {
    v11 = (_QWORD **)(a1 + 112);
    do
    {
      v12 = *((unsigned int *)v9 + 5);
      if ((_DWORD)v12)
      {
        v13 = (WTF::ASCIICaseInsensitiveHash **)*((_QWORD *)v9 + 1);
        v14 = &v13[v12];
        do
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v11);
          v16 = v15;
          v17 = v7;
          if (*v11)
            v18 = (uint64_t)&(*v11)[2 * *((unsigned int *)*v11 - 1)];
          else
            v18 = 0;
          if ((_QWORD *)v18 != v15)
          {
            do
            {
              WebKit::WebPage::addDomainWithPageLevelStorageAccess((WebKit::WebPage *)v16[1], (WTF::ASCIICaseInsensitiveHash **)v9, v13);
              while (1)
              {
                v16 += 2;
                if (v16 == (_QWORD *)v17)
                  break;
                if ((unint64_t)(*v16 + 1) > 1)
                  goto LABEL_17;
              }
              v16 = (_QWORD *)v17;
LABEL_17:
              ;
            }
            while (v16 != (_QWORD *)v18);
          }
          ++v13;
        }
        while (v13 != v14);
        v9 = (WebCore::ResourceLoadObserver *)v21[0];
      }
      v21[0] = (char *)v9 + 24;
      v6 = (WebCore::ResourceLoadObserver *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v21, v7, v8);
      v9 = (WebCore::ResourceLoadObserver *)v21[0];
    }
    while (v21[0] != v10);
  }
  v19 = WebCore::ResourceLoadObserver::shared(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t *, const WTF::StringImpl *))(*(_QWORD *)v19 + 128))(v19, a2, a3);
}

uint64_t WebKit::WebProcess::sendResourceLoadStatisticsDataImmediately(WebCore::ResourceLoadObserver *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = WebCore::ResourceLoadObserver::shared(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, a2);
}

uint64_t WebKit::WebProcess::haveStorageAccessQuirksForDomain(WebKit::WebProcess *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 101, a2);
}

uint64_t WebKit::WebProcess::ensureSpeechRecognitionRealtimeMediaSourceManager(WebKit::WebProcess *this)
{
  uint64_t result;
  WebKit::SpeechRecognitionRealtimeMediaSourceManager *v3;
  unsigned __int8 **v4;

  result = *((_QWORD *)this + 96);
  if (!result)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v4, *((unsigned __int8 ***)this + 4));
    v3 = (WebKit::SpeechRecognitionRealtimeMediaSourceManager *)WTF::fastMalloc((WTF *)0x40);
    WebKit::SpeechRecognitionRealtimeMediaSourceManager::SpeechRecognitionRealtimeMediaSourceManager((uint64_t)v3, (uint64_t *)&v4);
    std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionRealtimeMediaSourceManager **)this + 96, v3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v4);
    return *((_QWORD *)this + 96);
  }
  return result;
}

uint64_t WebKit::WebProcess::webTransportSession(uint64_t a1, uint64_t a2)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  uint64_t v10;

  v10 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((unsigned int **)(a1 + 800), &v10, (unsigned int **)&v9);
  v3 = (unsigned int *)v9;
  if (!v9)
    return 0;
  v4 = *((_QWORD *)v9 + 1);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v9 = 0;
  do
  {
    v6 = __ldaxr(v3);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v3));
  if (!v7)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v5;
}

uint64_t *WebKit::WebProcess::removeWebTransportSession(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 800);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 800), &v7);
  v5 = *(_QWORD *)(a1 + 800);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

void WebKit::WebSleepDisablerClient::didCreateSleepDisabler(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, IPC::Encoder *a5, char a6)
{
  IPC::Encoder *v6;
  IPC::Encoder *v7;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WebKit::WebProcess *v21;
  IPC::Encoder *v22[9];

  if (a6)
  {
    v22[7] = v6;
    v22[8] = v7;
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v21);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    v22[0] = a5;
    v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v12 + 14, v22);
    if (v13)
    {
      v14 = v13 + 32;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 56))(v13 + 32);
      v16 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v16 = 1876;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(v16 + 528) = v16 + 16;
      *(_QWORD *)(v16 + 536) = v16 + 16;
      *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v16 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
      v22[0] = (IPC::Encoder *)v16;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a2;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
      *IPC::Encoder::grow((IPC::Encoder *)v16, 1uLL, 1) = a4;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v14 + 32))(v14, v22, 0);
      v18 = v22[0];
      v22[0] = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v19, v20);
      }
    }
  }
}

void WebKit::WebSleepDisablerClient::didDestroySleepDisabler(uint64_t a1, uint64_t a2, IPC::Encoder *a3, char a4)
{
  IPC::Encoder *v4;
  IPC::Encoder *v5;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  IPC::Encoder *v18[7];

  if (a4)
  {
    v18[5] = v4;
    v18[6] = v5;
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v8 = WebKit::WebProcess::WebProcess(v17);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
    }
    v18[0] = a3;
    v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v8 + 14, v18);
    if (v9)
    {
      v10 = v9 + 32;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 32) + 56))(v9 + 32);
      v12 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v12 = 1879;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(v12 + 528) = v12 + 16;
      *(_QWORD *)(v12 + 536) = v12 + 16;
      *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v12 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
      v18[0] = (IPC::Encoder *)v12;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = a2;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, v18, 0);
      v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v13);
        WTF::fastFree(v15, v16);
      }
    }
  }
}

IPC::Encoder *WebKit::WebSystemSoundDelegate::systemBeep(WebKit::WebSystemSoundDelegate *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  WebKit::WebProcess *v8;
  IPC::Encoder *v9;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((_QWORD *)v1 + 4);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2566;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v9 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WKWebProcessMain(WebKit *a1, int a2, const char **a3)
{
  WebKit::XPCServiceMain(a1, a2, a3);
}

void WebKit::WebPaymentCoordinator::~WebPaymentCoordinator(WebKit::WebPaymentCoordinator *this)
{
  WebKit::WebProcess *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WebKit::WebProcess *v5;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v5);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::WebProcess *)((char *)v2 + 40), (WebKit::WebPaymentCoordinator *)((char *)this + 8));
  if (*((_BYTE *)this + 48))
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    if (v4)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebPaymentCoordinator::~WebPaymentCoordinator(WebKit::WebPaymentCoordinator *this)
{
  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 8));
}

{
  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPaymentCoordinator::~WebPaymentCoordinator((WebKit::WebPaymentCoordinator *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

WTF::StringImpl **WebKit::WebPaymentCoordinator::validatedPaymentNetwork@<X0>(WebKit::WebPaymentCoordinator *this@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl **v14;

  v6 = (uint64_t *)((char *)this + 40);
  if (!*((_BYTE *)this + 48))
  {
    WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks(this, (uint64_t *)&v14);
    v8 = v14;
    if (*((_BYTE *)this + 48))
    {
      v14 = 0;
      result = (WTF::StringImpl **)*v6;
      *v6 = (uint64_t)v8;
      if (result)
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v7);
        result = v14;
        if (v14)
          result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v10);
      }
      if (!*((_BYTE *)this + 48))
        goto LABEL_18;
    }
    else
    {
      *((_QWORD *)this + 5) = v14;
      *((_BYTE *)this + 48) = 1;
    }
  }
  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v6, a2);
  if (!*((_BYTE *)this + 48))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v11 = *v6;
  if (*v6)
    v11 += 8 * *(unsigned int *)(v11 - 4);
  if ((WTF::StringImpl **)v11 == result)
  {
    v13 = 0;
    *a3 = 0;
  }
  else
  {
    v12 = *result;
    if (*result)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)a3 = v12;
    v13 = 1;
  }
  a3[8] = v13;
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::canMakePayments(WebKit::WebPaymentCoordinator *this)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  void *v10;
  int v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  IPC::Encoder *v20;
  uint64_t v21;
  char v22;

  WTF::MonotonicTime::now(this);
  v3 = v2;
  if (v2 - *((double *)this + 7) > 60.0 || !*((_BYTE *)this + 65))
  {
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 56))((char *)this + 24);
    result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 48))((char *)this + 24);
    if (!result)
      return result;
    v6 = result;
    v21 = 0;
    IPC::Connection::createSyncMessageEncoder(3728, v4, &v21, (uint64_t *)&v20);
    IPC::Connection::sendSyncMessage(v6, v21, (uint64_t *)&v20, 0, (uint64_t)&v18, INFINITY);
    v7 = v19;
    if (v19)
    {
      if (v19 != 1)
        goto LABEL_23;
      v8 = v18;
    }
    else
    {
      v9 = IPC::Decoder::decode<std::tuple<BOOL>>(v18);
      v11 = v19;
      if (v9 < 0x100u)
      {
        v7 = 1;
        v8 = 13;
        if (v19 == -1)
          goto LABEL_14;
        goto LABEL_13;
      }
      if (v19)
        goto LABEL_23;
      LOBYTE(v4) = v9;
      v8 = (uint64_t)v18;
      v18 = 0;
    }
    v11 = v7;
LABEL_13:
    ((void (*)(char *, uint64_t **))off_1E34E0610[v11])(&v22, &v18);
LABEL_14:
    v12 = v20;
    v20 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v10);
      WTF::fastFree(v13, v14);
    }
    if (v7)
      return 0;
    *((double *)this + 7) = v3;
    *((_WORD *)this + 32) = v4 | 0x100;
    if (!v8)
      return *((_BYTE *)this + 64) != 0;
    IPC::Decoder::~Decoder((IPC::Decoder *)v8);
    WTF::fastFree(v15, v16);
    if (*((_BYTE *)this + 65))
      return *((_BYTE *)this + 64) != 0;
    __break(1u);
LABEL_23:
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebPaymentCoordinator::canMakePaymentsWithActiveCard(v17);
  }
  return *((_BYTE *)this + 64) != 0;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::canMakePaymentsWithActiveCard(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  IPC::Encoder *v18;

  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2518;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v18 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34E0A58;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v18, v17, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::openPaymentSetup(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  IPC::Encoder *v18;

  v7 = a1 + 24;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2528;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v18 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v10 = *a4;
  *a4 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34E0A80;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v18, v17, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::showPaymentUI(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;
  int v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  void *v27;
  int v28;
  uint64_t *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  IPC::Encoder *v43;
  uint64_t v44;
  char v45;

  v6 = result;
  v39 = 0;
  v40 = 0;
  v7 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
      goto LABEL_31;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v40) = v7;
    v39 = v9;
    v10 = *(_DWORD *)(a3 + 12);
    if (v10)
    {
      v11 = *(_DWORD ***)a3;
      v12 = *(unsigned int *)(a3 + 12);
      do
      {
        v13 = *v11;
        if (*v11)
          *v13 += 2;
        *v9++ = v13;
        v11 += 5;
        --v12;
      }
      while (v12);
      HIDWORD(v40) = v10;
    }
  }
  v14 = *(_QWORD *)(v6 + 24);
  v15 = *(_QWORD *)(v6 + 32);
  v16 = v6 + 24;
  v17 = *(_QWORD *)(v15 + 40);
  v18 = *(_QWORD *)(v15 + 2120);
  v19 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v16);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  if (v20)
  {
    v21 = v20;
    v44 = 0;
    IPC::Connection::createSyncMessageEncoder(3729, v19, &v44, (uint64_t *)&v43);
    v22 = v43;
    *(_QWORD *)IPC::Encoder::grow(v43, 8uLL, 8) = v17;
    *(_QWORD *)IPC::Encoder::grow(v22, 8uLL, 8) = v18;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v22, a2);
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v22, (uint64_t)&v39);
    IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::encode(v22, a4);
    IPC::Connection::sendSyncMessage(v21, v44, (uint64_t *)&v43, 0, (uint64_t)&v41, INFINITY);
    v23 = v42;
    if (v42)
    {
      if (v42 == 1)
      {
        v24 = 0;
        LOBYTE(v36) = (_BYTE)v41;
LABEL_19:
        v38 = v23;
        v28 = v23;
        goto LABEL_20;
      }
    }
    else
    {
      v26 = IPC::Decoder::decode<std::tuple<BOOL>>(v41);
      if (v26 < 0x100u)
      {
        v24 = 0;
        v25 = 0;
        LOBYTE(v36) = 13;
        v23 = 1;
        v38 = 1;
        v28 = v42;
        if (v42 == -1)
        {
LABEL_21:
          v30 = v43;
          v43 = 0;
          if (v30)
          {
            IPC::Encoder::~Encoder(v30, v27);
            WTF::fastFree(v31, v32);
          }
          goto LABEL_23;
        }
LABEL_20:
        ((void (*)(char *, uint64_t **))off_1E34E0610[v28])(&v45, &v41);
        v25 = v24;
        goto LABEL_21;
      }
      if (!v42)
      {
        v24 = v26;
        v29 = v41;
        v41 = 0;
        v36 = v29;
        v37 = v26;
        goto LABEL_19;
      }
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_31:
    __break(0xC471u);
    return result;
  }
  v25 = 0;
  LOBYTE(v36) = 3;
  v23 = 1;
  v38 = 1;
LABEL_23:
  ((void (*)(uint64_t **, uint64_t **))off_1E34E06B8[v23])(&v41, &v36);
  if (v23)
    v34 = 1;
  else
    v34 = v25 == 0;
  v35 = !v34;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v33);
  return v35;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeMerchantValidation(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2521;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeShippingMethodSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2525;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 632);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 632))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completeShippingContactSelection(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeShippingContactSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2524;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 648);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 648))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completePaymentMethodSelection(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2522;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 656);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 656))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completeCouponCodeChange(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completeCouponCodeChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2520;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 648);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 648))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebPaymentCoordinator::completePaymentSession(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::completePaymentSession(uint64_t a1, __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2523;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::abortPaymentSession(WebKit::WebPaymentCoordinator *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 24;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 56))((char *)this + 24);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2516;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::cancelPaymentSession(WebKit::WebPaymentCoordinator *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 24;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 56))((char *)this + 24);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2519;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::WebPaymentCoordinator::messageSenderConnection(WebKit::WebPaymentCoordinator *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t WebKit::WebPaymentCoordinator::messageSenderDestinationID(WebKit::WebPaymentCoordinator *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 40);
}

uint64_t `non-virtual thunk to'WebKit::WebPaymentCoordinator::messageSenderDestinationID(WebKit::WebPaymentCoordinator *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40);
}

WTF::StringImpl *WebKit::WebPaymentCoordinator::validateMerchant(WebKit::WebPaymentCoordinator *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::URL::URL((uint64_t)&v4, a2);
  WebCore::PaymentCoordinator::validateMerchant();
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebPaymentCoordinator::getSetupFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[2];
  IPC::Encoder *v32;

  v6 = *(_QWORD *)(a1 + 32) + 32;
  WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(&v24, a2);
  v7 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v7 += 2;
  v28 = v7;
  v8 = *(_OWORD *)(a3 + 24);
  v29 = *(_OWORD *)(a3 + 8);
  v30 = v8;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2527;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v32 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebCore::ApplePaySetupConfiguration,void>::encode((IPC::Encoder *)v10, (uint64_t *)&v24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v28);
  v11 = *a4;
  *a4 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34E0AA8;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v31[0] = v12;
  v31[1] = v13;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v32, v31, 0);
  v15 = v31[0];
  v31[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v32;
  v32 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v17, v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v14);
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebPaymentCoordinator::beginApplePaySetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  CFTypeRef cf;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[2];
  IPC::Encoder *v36;

  v8 = *(_QWORD *)(a1 + 32) + 32;
  WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(&v28, a2);
  v9 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v9 += 2;
  v32 = v9;
  v10 = *(_OWORD *)(a3 + 24);
  v33 = *(_OWORD *)(a3 + 8);
  v34 = v10;
  WebKit::PaymentSetupFeatures::PaymentSetupFeatures(&cf, a4);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2517;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v36 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ApplePaySetupConfiguration,void>::encode((IPC::Encoder *)v12, (uint64_t *)&v28);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, (uint64_t *)&v32);
  IPC::encodeObjectDirectly<NSArray>((IPC::Encoder *)v12, (NSArray *)cf);
  v13 = *a5;
  *a5 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34E0AD0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v35[0] = v14;
  v35[1] = v15;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v8 + 40))(v8, &v36, v35, 0);
  v17 = v35[0];
  v35[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v36;
  v36 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v16);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v29;
  v29 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::WebPaymentCoordinator::endApplePaySetup(WebKit::WebPaymentCoordinator *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v1 = (_QWORD *)*((_QWORD *)this + 4);
  v2 = v1[4];
  v1 += 4;
  v3 = (*(uint64_t (**)(_QWORD *))(v2 + 56))(v1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2526;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v1 + 32))(v1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebAutomationDOMWindowObserver::WebAutomationDOMWindowObserver(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalDOMWindow *v10;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34E0058;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(a2 + 16), a2);
  v6 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 0;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
    v10 = *(WebCore::LocalDOMWindow **)(v9 + 8);
  else
    v10 = 0;
  WebCore::LocalDOMWindow::registerObserver(v10, (WebCore::LocalDOMWindowObserver *)a1);
  return a1;
}

void WebKit::WebAutomationDOMWindowObserver::~WebAutomationDOMWindowObserver(WebKit::WebAutomationDOMWindowObserver *this, void *a2)
{
  uint64_t v3;
  WebCore::LocalDOMWindow *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(WebCore::LocalDOMWindow **)(v3 + 8);
    if (v4)
      WebCore::LocalDOMWindow::unregisterObserver(v4, this);
  }
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v6 + 4), a2);
      WTF::fastFree((WTF *)v6, v9);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebAutomationDOMWindowObserver::~WebAutomationDOMWindowObserver(this, a2);
  WTF::fastFree(v2, v3);
}

_DWORD *WebKit::WebAutomationDOMWindowObserver::willDestroyGlobalObjectInCachedFrame(WebKit::WebAutomationDOMWindowObserver *this)
{
  _DWORD *v2;
  uint64_t v3;
  WebCore::LocalDOMWindow *v4;
  void *v5;

  v2 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  if (!*((_BYTE *)this + 32))
    (*(void (**)(_QWORD, WebKit::WebAutomationDOMWindowObserver *))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(WebCore::LocalDOMWindow **)(v3 + 8);
    if (v4)
      WebCore::LocalDOMWindow::unregisterObserver(v4, this);
  }
  WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)this + 3, 0);
  return WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(v2, v5);
}

_DWORD *WebKit::WebAutomationDOMWindowObserver::willDestroyGlobalObjectInFrame(WebKit::WebAutomationDOMWindowObserver *this)
{
  _DWORD *v2;
  uint64_t v3;
  WebCore::LocalDOMWindow *v4;
  void *v5;

  v2 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  if (!*((_BYTE *)this + 32))
    (*(void (**)(_QWORD, WebKit::WebAutomationDOMWindowObserver *))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(WebCore::LocalDOMWindow **)(v3 + 8);
    if (v4)
      WebCore::LocalDOMWindow::unregisterObserver(v4, this);
  }
  WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)this + 3, 0);
  return WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(v2, v5);
}

_DWORD *WebKit::WebAutomationDOMWindowObserver::willDetachGlobalObjectFromFrame(WebKit::WebAutomationDOMWindowObserver *this)
{
  _DWORD *v2;
  uint64_t v3;
  WebCore::LocalDOMWindow *v4;
  void *v5;

  v2 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  *((_BYTE *)this + 32) = 1;
  (*(void (**)(_QWORD, WebKit::WebAutomationDOMWindowObserver *))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(WebCore::LocalDOMWindow **)(v3 + 8);
    if (v4)
      WebCore::LocalDOMWindow::unregisterObserver(v4, this);
  }
  WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)this + 3, 0);
  return WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(v2, v5);
}

void WebKit::WebCacheStorageConnection::~WebCacheStorageConnection(WebKit::WebCacheStorageConnection *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v5);
  *(_QWORD *)this = off_1E34E06D8;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebCacheStorageConnection::~WebCacheStorageConnection(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::connection(unsigned __int8 ***this, uint64_t a2)
{
  unsigned __int8 ***v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 **v10;

  v3 = this;
  v4 = (unsigned __int8 *)(a2 + 24);
  if (__ldaxr((unsigned __int8 *)(a2 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 ***)MEMORY[0x19AEABB3C](a2 + 24);
LABEL_5:
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
    this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v3, *(unsigned __int8 ***)(a2 + 32));
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 ***)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v6)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v4))
    goto LABEL_12;
  if (v6)
    return this;
LABEL_13:
  v10 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34E0AF8;
  v8[1] = a2;
  v8[2] = &v10;
  v9 = (uint64_t)v8;
  WTF::callOnMainRunLoopAndWait();
  this = (unsigned __int8 ***)v9;
  if (v9)
    this = (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *v3 = v10;
  return this;
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::open@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, const WebCore::ClientOrigin *a2@<X1>, const WTF::String *a3@<X2>, WTF **a4@<X8>)
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 ***result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  _BYTE *v34;
  int v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  const WTF::String *v49;
  os_unfair_lock_s *v50;
  __int128 v51;
  __int128 v52;
  WTF *v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _BYTE buf[24];
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v50, (uint64_t)this);
  v7 = v50;
  v51 = 0uLL;
  *(_QWORD *)&v52 = "sendWithPromisedReply";
  *((_QWORD *)&v52 + 1) = 0;
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E34E0150;
  v9 = v52;
  *(_OWORD *)(v8 + 16) = v51;
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = 0;
  v10 = (unsigned __int8 *)(v8 + 48);
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = v8 + 112;
  *(_QWORD *)(v8 + 104) = 1;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_WORD *)(v8 + 136) = 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11)
  {
    v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v57, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v56, v8);
      *(_QWORD *)buf = v57;
      v53 = v56;
      result = (unsigned __int8 ***)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v53, &v58);
      if (!v58)
      {
        __break(0xC471u);
        return result;
      }
      v15 = v56;
      v56 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v57;
      v57 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *((_QWORD *)v12 + 4);
      v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        WTF::String::utf8();
        v20 = v53 ? (char *)v53 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v18 = (uint64_t)v53;
        v53 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            v18 = WTF::fastFree((WTF *)v18, v19);
          else
            --*(_DWORD *)v18;
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v22 = *v21;
          if ((v22 & 1) != 0)
            break;
          v23 = __ldaxr(v21);
          if (v23 == v22)
          {
            if (!__stxr(v22 | 1, v21))
            {
              v48 = v7;
              v49 = a3;
              v24 = WTF::Logger::observers((WTF::Logger *)v18);
              v25 = *(unsigned int *)(v24 + 12);
              if ((_DWORD)v25)
              {
                v26 = *(uint64_t **)v24;
                v27 = *(_QWORD *)v24 + 8 * v25;
                do
                {
                  v28 = *v26;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v60, v8);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v53, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v12, 4, &v53);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v29);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v31 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  ++v26;
                }
                while (v26 != (uint64_t *)v27);
              }
              v32 = __ldxr(v21);
              if (v32 == 1)
              {
                v7 = v48;
                a3 = v49;
                if (!__stlxr(0, v21))
                  break;
              }
              else
              {
                __clrex();
                v7 = v48;
                a3 = v49;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v11 = (unsigned __int8 *)v58;
      v58 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          v11 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v53 = (WTF *)v8;
  v54 = v51;
  v55 = v52;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_49:
    v11 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v10);
    goto LABEL_50;
  }
  if (__stxr(1u, v10))
    goto LABEL_49;
LABEL_50:
  v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v34 && v34[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v34, (WTF::Logger::LogSiteIdentifier *)&v51, " runSynchronouslyOnTarget ", v8);
  atomic_store(0, (unsigned __int8 *)(v8 + 137));
  v35 = __ldxr(v10);
  if (v35 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_58:
  v36 = v53;
  if (v53)
  {
    v37 = (unsigned int *)((char *)v53 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
    v39 = v53;
  }
  else
  {
    v39 = 0;
  }
  *a4 = v36;
  v53 = 0;
  *(_OWORD *)&buf[8] = v54;
  v60 = v55;
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v40 = off_1E34E0B20;
  *(_QWORD *)(v40 + 8) = v39;
  *(_QWORD *)buf = 0;
  v41 = v60;
  *(_OWORD *)(v40 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v40 + 32) = v41;
  *(_QWORD *)&v51 = v40;
  *((_QWORD *)&v51 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  v42 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v42 = 524;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 528) = v42 + 16;
  *(_QWORD *)(v42 + 536) = v42 + 16;
  *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v42 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
  *(_QWORD *)buf = v42;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v42, (uint64_t)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v42, (uint64_t *)a3);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, (IPC::Encoder **)buf, (uint64_t *)&v51, 0, 0);
  v44 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v43);
    WTF::fastFree(v45, v46);
  }
  v47 = v51;
  *(_QWORD *)&v51 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v53);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::remove@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF **a4@<X8>)
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 ***result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  _BYTE *v34;
  int v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  __int128 v51;
  __int128 v52;
  WTF *v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _BYTE buf[24];
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v50, a1);
  v7 = v50;
  v51 = 0uLL;
  *(_QWORD *)&v52 = "sendWithPromisedReply";
  *((_QWORD *)&v52 + 1) = 0;
  v8 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E34E01F0;
  v9 = v52;
  *(_OWORD *)(v8 + 16) = v51;
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = 0;
  v10 = (unsigned __int8 *)(v8 + 48);
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v8 + 88;
  *(_QWORD *)(v8 + 80) = 1;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_WORD *)(v8 + 112) = 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11)
  {
    v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v57, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v56, v8);
      *(_QWORD *)buf = v57;
      v53 = v56;
      result = (unsigned __int8 ***)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v53, &v58);
      if (!v58)
      {
        __break(0xC471u);
        return result;
      }
      v15 = v56;
      v56 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v57;
      v57 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *((_QWORD *)v12 + 4);
      v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        WTF::String::utf8();
        v20 = v53 ? (char *)v53 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v18 = (uint64_t)v53;
        v53 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            v18 = WTF::fastFree((WTF *)v18, v19);
          else
            --*(_DWORD *)v18;
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v22 = *v21;
          if ((v22 & 1) != 0)
            break;
          v23 = __ldaxr(v21);
          if (v23 == v22)
          {
            if (!__stxr(v22 | 1, v21))
            {
              v48 = v7;
              v49 = a3;
              v24 = WTF::Logger::observers((WTF::Logger *)v18);
              v25 = *(unsigned int *)(v24 + 12);
              if ((_DWORD)v25)
              {
                v26 = *(uint64_t **)v24;
                v27 = *(_QWORD *)v24 + 8 * v25;
                do
                {
                  v28 = *v26;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v60, v8);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v53, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v12, 4, &v53);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v29);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v31 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  ++v26;
                }
                while (v26 != (uint64_t *)v27);
              }
              v32 = __ldxr(v21);
              if (v32 == 1)
              {
                v7 = v48;
                a3 = v49;
                if (!__stlxr(0, v21))
                  break;
              }
              else
              {
                __clrex();
                v7 = v48;
                a3 = v49;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v11 = (unsigned __int8 *)v58;
      v58 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          v11 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v53 = (WTF *)v8;
  v54 = v51;
  v55 = v52;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_49:
    v11 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v10);
    goto LABEL_50;
  }
  if (__stxr(1u, v10))
    goto LABEL_49;
LABEL_50:
  v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v34 && v34[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v34, (WTF::Logger::LogSiteIdentifier *)&v51, " runSynchronouslyOnTarget ", v8);
  atomic_store(0, (unsigned __int8 *)(v8 + 113));
  v35 = __ldxr(v10);
  if (v35 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_58:
  v36 = v53;
  if (v53)
  {
    v37 = (unsigned int *)((char *)v53 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
    v39 = v53;
  }
  else
  {
    v39 = 0;
  }
  *a4 = v36;
  v53 = 0;
  *(_OWORD *)&buf[8] = v54;
  v60 = v55;
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v40 = off_1E34E0B70;
  *(_QWORD *)(v40 + 8) = v39;
  *(_QWORD *)buf = 0;
  v41 = v60;
  *(_OWORD *)(v40 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v40 + 32) = v41;
  *(_QWORD *)&v51 = v40;
  *((_QWORD *)&v51 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  v42 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v42 = 527;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 528) = v42 + 16;
  *(_QWORD *)(v42 + 536) = v42 + 16;
  *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v42 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
  *(_QWORD *)buf = v42;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 8uLL, 8) = a3;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, (IPC::Encoder **)buf, (uint64_t *)&v51, 0, 0);
  v44 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v43);
    WTF::fastFree(v45, v46);
  }
  v47 = v51;
  *(_QWORD *)&v51 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v53);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::retrieveCaches@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, const WebCore::ClientOrigin *a2@<X1>, uint64_t a3@<X2>, WTF **a4@<X8>)
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 ***result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  _BYTE *v34;
  int v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  __int128 v51;
  __int128 v52;
  WTF *v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _BYTE buf[24];
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v50, (uint64_t)this);
  v7 = v50;
  v51 = 0uLL;
  *(_QWORD *)&v52 = "sendWithPromisedReply";
  *((_QWORD *)&v52 + 1) = 0;
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E34E0290;
  v9 = v52;
  *(_OWORD *)(v8 + 16) = v51;
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = 0;
  v10 = (unsigned __int8 *)(v8 + 48);
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = v8 + 112;
  *(_QWORD *)(v8 + 104) = 1;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_WORD *)(v8 + 136) = 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11)
  {
    v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v57, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v56, v8);
      *(_QWORD *)buf = v57;
      v53 = v56;
      result = (unsigned __int8 ***)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v53, &v58);
      if (!v58)
      {
        __break(0xC471u);
        return result;
      }
      v15 = v56;
      v56 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v57;
      v57 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *((_QWORD *)v12 + 4);
      v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        WTF::String::utf8();
        v20 = v53 ? (char *)v53 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v18 = (uint64_t)v53;
        v53 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            v18 = WTF::fastFree((WTF *)v18, v19);
          else
            --*(_DWORD *)v18;
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v22 = *v21;
          if ((v22 & 1) != 0)
            break;
          v23 = __ldaxr(v21);
          if (v23 == v22)
          {
            if (!__stxr(v22 | 1, v21))
            {
              v48 = v7;
              v49 = a3;
              v24 = WTF::Logger::observers((WTF::Logger *)v18);
              v25 = *(unsigned int *)(v24 + 12);
              if ((_DWORD)v25)
              {
                v26 = *(uint64_t **)v24;
                v27 = *(_QWORD *)v24 + 8 * v25;
                do
                {
                  v28 = *v26;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v60, v8);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v53, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v12, 4, &v53);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v29);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v31 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  ++v26;
                }
                while (v26 != (uint64_t *)v27);
              }
              v32 = __ldxr(v21);
              if (v32 == 1)
              {
                v7 = v48;
                a3 = v49;
                if (!__stlxr(0, v21))
                  break;
              }
              else
              {
                __clrex();
                v7 = v48;
                a3 = v49;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v11 = (unsigned __int8 *)v58;
      v58 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          v11 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v53 = (WTF *)v8;
  v54 = v51;
  v55 = v52;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_49:
    v11 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v10);
    goto LABEL_50;
  }
  if (__stxr(1u, v10))
    goto LABEL_49;
LABEL_50:
  v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v34 && v34[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v34, (WTF::Logger::LogSiteIdentifier *)&v51, " runSynchronouslyOnTarget ", v8);
  atomic_store(0, (unsigned __int8 *)(v8 + 137));
  v35 = __ldxr(v10);
  if (v35 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_58:
  v36 = v53;
  if (v53)
  {
    v37 = (unsigned int *)((char *)v53 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
    v39 = v53;
  }
  else
  {
    v39 = 0;
  }
  *a4 = v36;
  v53 = 0;
  *(_OWORD *)&buf[8] = v54;
  v60 = v55;
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v40 = off_1E34E0BC0;
  *(_QWORD *)(v40 + 8) = v39;
  *(_QWORD *)buf = 0;
  v41 = v60;
  *(_OWORD *)(v40 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v40 + 32) = v41;
  *(_QWORD *)&v51 = v40;
  *((_QWORD *)&v51 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  v42 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v42 = 521;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 528) = v42 + 16;
  *(_QWORD *)(v42 + 536) = v42 + 16;
  *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v42 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
  *(_QWORD *)buf = v42;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v42, (uint64_t)a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 8uLL, 8) = a3;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, (IPC::Encoder **)buf, (uint64_t *)&v51, 0, 0);
  v44 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v43);
    WTF::fastFree(v45, v46);
  }
  v47 = v51;
  *(_QWORD *)&v51 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v53);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::retrieveRecords@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebCore::ResourceRequest *a4@<X3>, WTF **a5@<X8>)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 ***result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t i;
  WTF::StringImpl *v33;
  int v34;
  _BYTE *v36;
  int v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::ResourceRequest *v51;
  WTF **v52;
  os_unfair_lock_s *v53;
  __int128 v54;
  __int128 v55;
  WTF *v56;
  __int128 v57;
  __int128 v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  _BYTE buf[24];
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v53, a1);
  v9 = v53;
  v54 = 0uLL;
  *(_QWORD *)&v55 = "sendWithPromisedReply";
  *((_QWORD *)&v55 + 1) = 0;
  v10 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E34E0350;
  v11 = v55;
  *(_OWORD *)(v10 + 16) = v54;
  *(_OWORD *)(v10 + 32) = v11;
  *(_BYTE *)(v10 + 48) = 0;
  v12 = (unsigned __int8 *)(v10 + 48);
  *(_DWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = v10 + 104;
  *(_QWORD *)(v10 + 96) = 1;
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 120) = 0;
  *(_WORD *)(v10 + 128) = 0;
  v13 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v10);
  if (*v13)
  {
    v14 = v13;
    if (v13[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v60, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v59, v10);
      *(_QWORD *)buf = v60;
      v56 = v59;
      result = (unsigned __int8 ***)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v56, &v61);
      if (!v61)
      {
        __break(0xC471u);
        return result;
      }
      v17 = v59;
      v59 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v60;
      v60 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      v52 = a5;
      v19 = *((_QWORD *)v14 + 4);
      v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v20)
      {
        WTF::String::utf8();
        v22 = v56 ? (char *)v56 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v22;
        _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v20 = (uint64_t)v56;
        v56 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
            v20 = WTF::fastFree((WTF *)v20, v21);
          else
            --*(_DWORD *)v20;
        }
      }
      if (*v14 && v14[16] >= 4u)
      {
        v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v24 = *v23;
          if ((v24 & 1) != 0)
            break;
          v25 = __ldaxr(v23);
          if (v25 == v24)
          {
            if (!__stxr(v24 | 1, v23))
            {
              v50 = a3;
              v51 = a4;
              v26 = WTF::Logger::observers((WTF::Logger *)v20);
              v27 = *(unsigned int *)(v26 + 12);
              if ((_DWORD)v27)
              {
                v28 = *(uint64_t **)v26;
                v29 = *(_QWORD *)v26 + 8 * v27;
                do
                {
                  v30 = *v28;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v63, v10);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v56, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v30 + 16))(v30, v14, 4, &v56);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v31);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v33 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v33 -= 2;
                    }
                  }
                  ++v28;
                }
                while (v28 != (uint64_t *)v29);
              }
              v34 = __ldxr(v23);
              if (v34 == 1)
              {
                a3 = v50;
                a4 = v51;
                if (!__stlxr(0, v23))
                  break;
              }
              else
              {
                __clrex();
                a3 = v50;
                a4 = v51;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v13 = (unsigned __int8 *)v61;
      v61 = 0;
      a5 = v52;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          v13 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v13, (WTF::StringImpl *)v21);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  v56 = (WTF *)v10;
  v57 = v54;
  v58 = v55;
  if (__ldaxr(v12))
  {
    __clrex();
LABEL_49:
    v13 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v12);
    goto LABEL_50;
  }
  if (__stxr(1u, v12))
    goto LABEL_49;
LABEL_50:
  v36 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v36 && v36[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v36, (WTF::Logger::LogSiteIdentifier *)&v54, " runSynchronouslyOnTarget ", v10);
  atomic_store(0, (unsigned __int8 *)(v10 + 129));
  v37 = __ldxr(v12);
  if (v37 == 1)
  {
    if (!__stlxr(0, v12))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_58:
  v38 = v56;
  if (v56)
  {
    v39 = (unsigned int *)((char *)v56 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    v41 = v56;
  }
  else
  {
    v41 = 0;
  }
  *a5 = v38;
  v56 = 0;
  *(_OWORD *)&buf[8] = v57;
  v63 = v58;
  v42 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v42 = off_1E34E0C10;
  *(_QWORD *)(v42 + 8) = v41;
  *(_QWORD *)buf = 0;
  v43 = v63;
  *(_OWORD *)(v42 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v42 + 32) = v43;
  *(_QWORD *)&v54 = v42;
  *((_QWORD *)&v54 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  v44 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v44 = 530;
  *(_QWORD *)(v44 + 8) = 0;
  *(_QWORD *)(v44 + 528) = v44 + 16;
  *(_QWORD *)(v44 + 536) = v44 + 16;
  *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v44 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
  *(_QWORD *)buf = v44;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 8uLL, 8) = a3;
  IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::encode((IPC::Encoder *)v44, a4);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, (IPC::Encoder **)buf, (uint64_t *)&v54, 0, 0);
  v46 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  v49 = v54;
  *(_QWORD *)&v54 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v56);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::batchDeleteOperation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebCore::ResourceRequest *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  os_unfair_lock_s *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  os_unfair_lock_s *v25;
  uint64_t v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  IPC::Encoder *v30;
  __int128 v31;
  __int128 v32;

  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v25, a1);
  v11 = v25;
  v30 = 0;
  *(_QWORD *)&v31 = 0;
  *((_QWORD *)&v31 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v32 = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v27, (WTF::Logger::LogSiteIdentifier *)&v30);
  v12 = v27;
  if (v27)
  {
    v13 = (unsigned int *)(v27 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = v27;
  }
  else
  {
    v15 = 0;
  }
  *a6 = v12;
  v27 = 0;
  v31 = v28;
  v32 = v29;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E34E0C60;
  *(_QWORD *)(v16 + 8) = v15;
  v30 = 0;
  v17 = v32;
  *(_OWORD *)(v16 + 16) = v31;
  *(_OWORD *)(v16 + 32) = v17;
  v26[0] = v16;
  v26[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v30);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 528;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v30 = (IPC::Encoder *)v18;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a3;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v18, a4);
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v18, a5);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v11, &v30, v26, 0, 0);
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  v23 = v26[0];
  v26[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&v27);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v25);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::batchPutOperation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  os_unfair_lock_s *v27;
  uint64_t v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  IPC::Encoder *v32;
  __int128 v33;
  __int128 v34;

  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v27, a1);
  v9 = v27;
  v32 = 0;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v34 = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v29, (WTF::Logger::LogSiteIdentifier *)&v32);
  v10 = v29;
  if (v29)
  {
    v11 = (unsigned int *)(v29 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = v29;
  }
  else
  {
    v13 = 0;
  }
  *a5 = v10;
  v29 = 0;
  v33 = v30;
  v34 = v31;
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E34E0CB0;
  *(_QWORD *)(v14 + 8) = v13;
  v32 = 0;
  v15 = v34;
  *(_OWORD *)(v14 + 16) = v33;
  *(_OWORD *)(v14 + 32) = v15;
  v28[0] = v14;
  v28[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v32);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 525;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v32 = (IPC::Encoder *)v16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a3;
  v17 = *(unsigned int *)(a4 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v17;
  v18 = *(_DWORD *)(a4 + 12);
  if (v18)
  {
    v19 = *(uint64_t **)a4;
    v20 = 592 * v18;
    do
    {
      IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::encode((IPC::Encoder *)v16, v19);
      v19 += 74;
      v20 -= 592;
    }
    while (v20);
  }
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v32, v28, 0, 0);
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v23, v24);
  }
  v25 = v28[0];
  v28[0] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&v29);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
}

uint64_t WebKit::WebCacheStorageConnection::reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  void *v28;
  int v29;
  __int128 v30;
  IPC::Encoder *v31;

  *(_QWORD *)&v30 = a2;
  *((_QWORD *)&v30 + 1) = a3;
  v4 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = (uint64_t *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 40), 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  LODWORD(v31) = -1640531527;
  WORD2(v31) = 0;
  BYTE6(v31) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v31, &v30);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
  v10 = result & v8;
  v11 = (unint64_t *)(v7 + 24 * (result & v8));
  v13 = *v11;
  v12 = v11[1];
  if (*(_OWORD *)v11 != 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (__PAIR128__(v12, v13) == v30)
      {
        ++*((_DWORD *)v11 + 4);
        goto LABEL_29;
      }
      if (v12 == -1)
        v14 = v11;
      v10 = (v10 + v15) & v8;
      v11 = (unint64_t *)(v7 + 24 * v10);
      v13 = *v11;
      v12 = v11[1];
      ++v15;
    }
    while (*(_OWORD *)v11 != 0);
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = v14;
    }
  }
  *(_OWORD *)v11 = v30;
  *((_DWORD *)v11 + 4) = 0;
  v16 = *v6;
  if (*v6)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 <= 0x400)
  {
    if (3 * v21 > 4 * v20)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v21 <= 2 * v20)
  {
LABEL_25:
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 40), (__int128 *)v11);
    v11 = (unint64_t *)result;
  }
LABEL_26:
  ++*((_DWORD *)v11 + 4);
  v22 = *(_QWORD *)(a1 + 32);
  if (v22)
  {
    v23 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v23 = 526;
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 528) = v23 + 16;
    *(_QWORD *)(v23 + 536) = v23 + 16;
    *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v23 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
    v31 = (IPC::Encoder *)v23;
    v24 = v30;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = v24;
    v25 = *((_QWORD *)&v30 + 1);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = v25;
    IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v31, 0, 0);
    result = (uint64_t)v31;
    v31 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v26);
      result = WTF::fastFree(v27, v28);
    }
  }
LABEL_29:
  v29 = __ldxr(v4);
  if (v29 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebKit::WebCacheStorageConnection::dereference(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  IPC::Encoder *v36;

  v3 = result;
  v34 = a2;
  v35 = a3;
  v4 = (unsigned __int8 *)(result + 24);
  if (__ldaxr((unsigned __int8 *)(result + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 24);
LABEL_5:
  v6 = (uint64_t *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 40);
  if (!v7)
    goto LABEL_25;
  v8 = *(_DWORD *)(v7 - 8);
  LODWORD(v36) = -1640531527;
  WORD2(v36) = 0;
  BYTE6(v36) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v36, &v34);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36);
  v9 = result & v8;
  v10 = (uint64_t *)(v7 + 24 * (result & v8));
  v11 = *v10;
  v12 = v10[1];
  if (*v10 == v34 && v12 == v35)
  {
LABEL_17:
    v16 = *v6;
    if (!*v6)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_22;
    }
LABEL_21:
    v18 = 0;
    v17 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
LABEL_22:
    if (v17 == v10)
      goto LABEL_25;
    if (*((_DWORD *)v10 + 4) != 1)
    {
      --*((_DWORD *)v10 + 4);
      goto LABEL_25;
    }
    if ((v18 & 1) != 0)
    {
      v20 = 0;
    }
    else
    {
      v20 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
      if (v20 == v10)
      {
LABEL_45:
        v27 = *(_QWORD *)(v3 + 32);
        if (v27)
        {
          v28 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v28 = 523;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 528) = v28 + 16;
          *(_QWORD *)(v28 + 536) = v28 + 16;
          *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v28 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
          v36 = (IPC::Encoder *)v28;
          v29 = v34;
          *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v29;
          v30 = v35;
          *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v30;
          IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v36, 0, 0);
          result = (uint64_t)v36;
          v36 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v31);
            result = WTF::fastFree(v32, v33);
          }
        }
        goto LABEL_25;
      }
    }
    if (v20 != v10)
    {
      *(_OWORD *)v10 = xmmword_1978CF7D0;
      ++*(_DWORD *)(*v6 - 16);
      v21 = *v6;
      v22 = *v6 ? *(_DWORD *)(v21 - 12) - 1 : -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v6;
      if (*v6)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)(v3 + 40), v25 >> 1, 0);
      }
    }
    goto LABEL_45;
  }
  v14 = 1;
  while (v11 | v12)
  {
    v9 = (v9 + v14) & v8;
    v10 = (uint64_t *)(v7 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    ++v14;
    if (*v10 == v34 && v12 == v35)
      goto LABEL_17;
  }
  v16 = *v6;
  if (*v6)
  {
    v10 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
    goto LABEL_21;
  }
LABEL_25:
  v19 = __ldxr(v4);
  if (v19 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

uint64_t WebKit::WebCacheStorageConnection::lockStorage(WebKit::WebCacheStorageConnection *this, const WebCore::ClientOrigin *a2)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WebCore::SecurityOriginData *v10;
  WebCore::SecurityOriginData *v11;
  int v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  void *v25;
  int v26;
  unsigned __int8 *v27;
  WebKit::WebCacheStorageConnection *v28;
  IPC::Encoder *v29;

  v4 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C]((char *)this + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = (uint64_t *)((char *)this + 48);
  v7 = *((_QWORD *)this + 6);
  if (v7
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand((uint64_t *)this + 6, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)a2) & v8;
  v10 = (WebCore::SecurityOriginData *)(v7 + 72 * v9);
  v28 = this;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    v27 = v4;
    v11 = 0;
    v12 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v10);
      if ((v13 & 1) != 0)
      {
        v11 = v10;
      }
      else if (WebCore::operator==())
      {
        result = WebCore::operator==();
        if ((result & 1) != 0)
        {
          ++*((_DWORD *)v10 + 16);
          v4 = v27;
          goto LABEL_30;
        }
      }
      v9 = (v9 + v12) & v8;
      v10 = (WebCore::SecurityOriginData *)(v7 + 72 * v9);
      ++v12;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    v4 = v27;
    if (v11)
    {
      *((_DWORD *)v11 + 16) = 0;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      --*(_DWORD *)(*v6 - 16);
      v10 = v11;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, (uint64_t)a2);
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10 + 32, (uint64_t)a2 + 32);
  *((_DWORD *)v10 + 16) = 0;
  v15 = *v6;
  if (*v6)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *v6;
  if (*v6)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 <= 0x400)
  {
    if (3 * v20 > 4 * v19)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v20 <= 2 * v19)
  {
LABEL_25:
    result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v6, (unsigned int *)v10);
    v10 = (WebCore::SecurityOriginData *)result;
  }
LABEL_26:
  ++*((_DWORD *)v10 + 16);
  v21 = *((_QWORD *)v28 + 4);
  if (v21)
  {
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 564;
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v29 = (IPC::Encoder *)v22;
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v22, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v21, (uint64_t *)&v29, 0, 0);
    result = (uint64_t)v29;
    v29 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
      result = WTF::fastFree(v24, v25);
    }
  }
LABEL_30:
  v26 = __ldxr(v4);
  if (v26 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

uint64_t WebKit::WebCacheStorageConnection::unlockStorage(uint64_t this, const WebCore::ClientOrigin *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  char v32;
  char v33;
  IPC::Encoder *v34;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 24);
  if (__ldaxr((unsigned __int8 *)(this + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](this + 24);
LABEL_5:
  v31 = v3;
  v8 = *(_QWORD *)(v3 + 48);
  v6 = (uint64_t *)(v3 + 48);
  v7 = v8;
  if (!v8)
    goto LABEL_18;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)a2) & v9;
  v11 = v7 + 72 * v10;
  this = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
  if ((this & 1) != 0)
  {
LABEL_12:
    v14 = *v6;
    if (!*v6)
      goto LABEL_18;
    v11 = v14 + 72 * *(unsigned int *)(v14 - 4);
    goto LABEL_14;
  }
  v12 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v11);
    if ((v13 & 1) == 0)
    {
      if (WebCore::operator==())
      {
        this = WebCore::operator==();
        if ((this & 1) != 0)
          break;
      }
    }
    v10 = (v10 + v12) & v9;
    v11 = v7 + 72 * v10;
    this = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    ++v12;
    if ((_DWORD)this)
      goto LABEL_12;
  }
  v14 = *v6;
  if (*v6)
  {
LABEL_14:
    v15 = 0;
    v16 = v14 + 72 * *(unsigned int *)(v14 - 4);
    goto LABEL_15;
  }
  v16 = 0;
  v15 = 1;
LABEL_15:
  if (v16 == v11)
    goto LABEL_18;
  if (*(_DWORD *)(v11 + 64) != 1)
  {
    --*(_DWORD *)(v11 + 64);
    goto LABEL_18;
  }
  if ((v15 & 1) != 0)
  {
    v18 = 0;
    goto LABEL_29;
  }
  v18 = v14 + 72 * *(unsigned int *)(v14 - 4);
  if (v18 != v11)
  {
LABEL_29:
    if (v18 != v11)
    {
      v19 = *(unsigned int *)(v11 + 56);
      if ((_DWORD)v19 != -1)
        this = ((uint64_t (*)(char *, uint64_t))off_1E34E0750[v19])(&v32, v11 + 32);
      *(_DWORD *)(v11 + 56) = -1;
      v20 = *(unsigned int *)(v11 + 24);
      if ((_DWORD)v20 != -1)
        this = ((uint64_t (*)(char *, uint64_t))off_1E34E0750[v20])(&v33, v11);
      *(_QWORD *)v11 = -1;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      ++*(_DWORD *)(*v6 - 16);
      v21 = *v6;
      if (*v6)
        v22 = *(_DWORD *)(v21 - 12) - 1;
      else
        v22 = -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v6;
      if (*v6)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          this = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(v6, v25 >> 1, 0);
      }
    }
  }
  v26 = *(_QWORD *)(v31 + 32);
  if (v26)
  {
    v27 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v27 = 580;
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v27 + 528) = v27 + 16;
    *(_QWORD *)(v27 + 536) = v27 + 16;
    *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v27 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
    v34 = (IPC::Encoder *)v27;
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v27, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v26, (uint64_t *)&v34, 0, 0);
    this = (uint64_t)v34;
    v34 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v28);
      this = WTF::fastFree(v29, v30);
    }
  }
LABEL_18:
  v17 = __ldxr(v4);
  if (v17 == 1)
  {
    if (!__stlxr(0, v4))
      return this;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::clearMemoryRepresentation@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, const WebCore::ClientOrigin *a2@<X1>, uint64_t *a3@<X8>)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  os_unfair_lock_s *v25;
  uint64_t v26[2];
  unsigned __int8 *v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[40];

  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v25, (uint64_t)this);
  v5 = v25;
  *(_QWORD *)v30 = 0;
  *(_QWORD *)&v30[8] = 0;
  *(_QWORD *)&v30[16] = "sendWithPromisedReply";
  *(_QWORD *)&v30[24] = 0;
  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = (unsigned __int8 *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v6, v30);
  v27 = v7;
  v28 = *(_OWORD *)v30;
  v29 = *(_OWORD *)&v30[16];
  v8 = v7 + 48;
  if (__ldaxr(v7 + 48))
  {
    __clrex();
LABEL_4:
    v7 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v7 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  v10 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v10 && v10[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)v30, " runSynchronouslyOnTarget ", v6);
  atomic_store(0, (unsigned __int8 *)(v6 + 113));
  v11 = __ldxr(v8);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v8))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v12 = (uint64_t)v27;
  if (v27)
  {
    v13 = (unsigned int *)(v27 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = (uint64_t)v27;
  }
  else
  {
    v15 = 0;
  }
  *a3 = v12;
  v27 = 0;
  *(_OWORD *)&v30[8] = v28;
  *(_OWORD *)&v30[24] = v29;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E34E0D00;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)v30 = 0;
  v17 = *(_OWORD *)&v30[24];
  *(_OWORD *)(v16 + 16) = *(_OWORD *)&v30[8];
  *(_OWORD *)(v16 + 32) = v17;
  v26[0] = v16;
  v26[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)v30);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 522;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  *(_QWORD *)v30 = v18;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v18, (uint64_t)a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v5, (IPC::Encoder **)v30, v26, 0, 0);
  v20 = *(IPC::Encoder **)v30;
  *(_QWORD *)v30 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  v23 = v26[0];
  v26[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v27);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v25);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::engineRepresentation@<X0>(WebKit::WebCacheStorageConnection *this@<X0>, uint64_t *a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  os_unfair_lock_s *v23;
  uint64_t v24[2];
  unsigned __int8 *v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[40];

  WebKit::WebCacheStorageConnection::connection((unsigned __int8 ***)&v23, (uint64_t)this);
  v3 = v23;
  *(_QWORD *)v28 = 0;
  *(_QWORD *)&v28[8] = 0;
  *(_QWORD *)&v28[16] = "sendWithPromisedReply";
  *(_QWORD *)&v28[24] = 0;
  v4 = WTF::fastMalloc((WTF *)0x80);
  v5 = (unsigned __int8 *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v4, v28);
  v25 = v5;
  v26 = *(_OWORD *)v28;
  v27 = *(_OWORD *)&v28[16];
  v6 = v5 + 48;
  if (__ldaxr(v5 + 48))
  {
    __clrex();
LABEL_4:
    v5 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v5 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v5);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, (WTF::Logger::LogSiteIdentifier *)v28, " runSynchronouslyOnTarget ", v4);
  atomic_store(0, (unsigned __int8 *)(v4 + 121));
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = (uint64_t)v25;
  if (v25)
  {
    v11 = (unsigned int *)(v25 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (uint64_t)v25;
  }
  else
  {
    v13 = 0;
  }
  *a2 = v10;
  v25 = 0;
  *(_OWORD *)&v28[8] = v26;
  *(_OWORD *)&v28[24] = v27;
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E34E0D50;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)v28 = 0;
  v15 = *(_OWORD *)&v28[24];
  *(_OWORD *)(v14 + 16) = *(_OWORD *)&v28[8];
  *(_OWORD *)(v14 + 32) = v15;
  v24[0] = v14;
  v24[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)v28);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 529;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  *(_QWORD *)v28 = v16;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v3, (IPC::Encoder **)v28, v24, 0, 0);
  v18 = *(IPC::Encoder **)v28;
  *(_QWORD *)v28 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v19, v20);
  }
  v21 = v24[0];
  v24[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v25);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v23);
}

unsigned __int8 ***WebKit::WebCacheStorageConnection::updateQuotaBasedOnSpaceUsage(WebKit::WebCacheStorageConnection *this, const WebCore::ClientOrigin *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v10;
  IPC::Encoder *v11;

  WebKit::WebCacheStorageConnection::connection(&v10, (uint64_t)this);
  v3 = v10;
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 577;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
  IPC::Connection::sendMessageImpl((uint64_t)v3, (uint64_t *)&v11, 0, 0);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
}

void WebKit::WebCacheStorageProvider::~WebCacheStorageProvider(WebKit::WebCacheStorageProvider *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void WebKit::WebCacheStorageProvider::~WebCacheStorageProvider(WebKit::WebCacheStorageProvider *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PaymentCoordinatorClient::isMockPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebKit::WebPaymentCoordinator::isWebPaymentCoordinator(WebKit::WebPaymentCoordinator *this)
{
  return 1;
}

WTF::Lock *WebCore::CacheStorageConnection::clearMemoryRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::Lock *v9;
  _BYTE *v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  WTF *v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::Lock *result;
  int v36;
  __int128 v37;
  const char *v38;
  uint64_t v39;
  WTF::Lock *v40;
  char v41;
  WTF *v42[2];
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint8_t buf[4];
  char *v48;
  int v49;
  _DWORD v50[4];
  _QWORD v51[3];

  v51[1] = *MEMORY[0x1E0C80C00];
  v37 = 0uLL;
  v38 = "clearMemoryRepresentation";
  v39 = 0;
  v4 = WTF::fastMalloc((WTF *)0x78);
  v5 = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v4, &v37);
  *a1 = v5;
  v9 = (WTF::Lock *)(v5 + 48);
  v40 = v9;
  v41 = 1;
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
LABEL_4:
    v9 = (WTF::Lock *)MEMORY[0x19AEABB3C](v9, v6, v7, v8);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v9))
    goto LABEL_4;
LABEL_5:
  v11 = (_BYTE *)WTF::NativePromiseBase::logChannel(v9);
  if (*v11)
  {
    v12 = v11;
    if (v11[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v37);
      WTF::String::String((WTF::String *)&v44, " rejecting ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v43, v4);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, &v46);
      v14 = v43;
      v43 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v44;
      v44 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v45;
      v45 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *((_QWORD *)v12 + 4);
      v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        WTF::String::utf8();
        v20 = v42[0] ? (char *)v42[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v48 = v20;
        _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v18 = v42[0];
        v42[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            v18 = (WTF *)WTF::fastFree(v18, v19);
          else
            --*(_DWORD *)v18;
        }
      }
      if (*v12 && v12[16] >= 4u)
      {
        v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v22 = *v21;
          if ((v22 & 1) != 0)
            break;
          v23 = __ldaxr(v21);
          if (v23 == v22)
          {
            if (!__stxr(v22 | 1, v21))
            {
              v24 = WTF::Logger::observers(v18);
              v25 = *(unsigned int *)(v24 + 12);
              if ((_DWORD)v25)
              {
                v26 = *(uint64_t **)v24;
                v27 = *(_QWORD *)v24 + 8 * v25;
                do
                {
                  v28 = *v26;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v37);
                  v49 = 0;
                  WTF::String::String((WTF::String *)v50, " rejecting ");
                  v50[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v51, v4);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v12, 4, v42);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v29);
                  for (i = 40; i != -8; i -= 16)
                  {
                    v31 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  ++v26;
                }
                while (v26 != (uint64_t *)v27);
              }
              v32 = __ldxr(v21);
              if (v32 == 1)
              {
                if (!__stlxr(0, v21))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v33 = v46;
      v46 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
  }
  v34 = *(unsigned int *)(v4 + 64);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E04E8[v34])(buf, v4 + 56);
  *(_WORD *)(v4 + 56) = 256;
  *(_DWORD *)(v4 + 64) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v4, (unsigned __int8 **)&v40);
  if (v41)
  {
    result = v40;
    v36 = __ldxr((unsigned __int8 *)v40);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Lock *WebCore::CacheStorageConnection::engineRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::Lock *v8;
  _BYTE *v10;
  _BYTE *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  WTF *v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t i;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::Lock *result;
  int v35;
  __int128 v36;
  const char *v37;
  uint64_t v38;
  WTF::Lock *v39;
  char v40;
  WTF *v41[2];
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint8_t buf[4];
  char *v47;
  int v48;
  _DWORD v49[4];
  _QWORD v50[3];

  v50[1] = *MEMORY[0x1E0C80C00];
  v36 = 0uLL;
  v37 = "engineRepresentation";
  v38 = 0;
  v3 = WTF::fastMalloc((WTF *)0x80);
  v4 = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v3, &v36);
  *a1 = v4;
  v8 = (WTF::Lock *)(v4 + 48);
  v39 = v8;
  v40 = 1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_4:
    v8 = (WTF::Lock *)MEMORY[0x19AEABB3C](v8, v5, v6, v7);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_4;
LABEL_5:
  v10 = (_BYTE *)WTF::NativePromiseBase::logChannel(v8);
  if (*v10)
  {
    v11 = v10;
    if (v10[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v36);
      WTF::String::String((WTF::String *)&v43, " rejecting ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v42, v3);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v45);
      v13 = v42;
      v42 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v43;
      v43 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v44;
      v44 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = *((_QWORD *)v11 + 4);
      v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        WTF::String::utf8();
        v19 = v41[0] ? (char *)v41[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v47 = v19;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v17 = v41[0];
        v41[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            v17 = (WTF *)WTF::fastFree(v17, v18);
          else
            --*(_DWORD *)v17;
        }
      }
      if (*v11 && v11[16] >= 4u)
      {
        v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v21 = *v20;
          if ((v21 & 1) != 0)
            break;
          v22 = __ldaxr(v20);
          if (v22 == v21)
          {
            if (!__stxr(v21 | 1, v20))
            {
              v23 = WTF::Logger::observers(v17);
              v24 = *(unsigned int *)(v23 + 12);
              if ((_DWORD)v24)
              {
                v25 = *(uint64_t **)v23;
                v26 = *(_QWORD *)v23 + 8 * v24;
                do
                {
                  v27 = *v25;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v36);
                  v48 = 0;
                  WTF::String::String((WTF::String *)v49, " rejecting ");
                  v49[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v50, v3);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v41, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v27 + 16))(v27, v11, 4, v41);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v28);
                  for (i = 40; i != -8; i -= 16)
                  {
                    v30 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v30)
                    {
                      if (*(_DWORD *)v30 == 2)
                        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
                      else
                        *(_DWORD *)v30 -= 2;
                    }
                  }
                  ++v25;
                }
                while (v25 != (uint64_t *)v26);
              }
              v31 = __ldxr(v20);
              if (v31 == 1)
              {
                if (!__stlxr(0, v20))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v32 = v45;
      v45 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
  }
  v33 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v33 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E0568[v33])(buf, v3 + 56);
  *(_BYTE *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 64) = 1;
  *(_DWORD *)(v3 + 72) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v3, (unsigned __int8 **)&v39);
  if (v40)
  {
    result = v39;
    v35 = __ldxr((unsigned __int8 *)v39);
    if (v35 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v39))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 30), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v27);
  v28 = a1[22];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E0168[v28])(buf, a1 + 14);
  a1[22] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _OWORD v47[2];

  v46 = (unsigned __int8 *)v47 + 8;
  *(_QWORD *)&v47[0] = 1;
  v39 = &v41;
  v40 = 1;
  v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    v5 = *(unsigned int *)(a1 + 108);
    memcpy(&v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = a1 + 112;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 108);
    LODWORD(v40) = *(_DWORD *)(a1 + 104);
  }
  HIDWORD(v40) = v5;
  DWORD1(v47[0]) = 0;
  *(_QWORD *)(a1 + 104) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v4);
  v6 = *(_QWORD *)(a1 + 120);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 132);
  v37 = *(_DWORD *)(a1 + 128);
  v38 = v7;
  v46 = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)&v47[0] = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 137));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E0190;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v46 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v46);
          v9 = v46;
          v46 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v46 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v46, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v42, a1);
        v24 = v42;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v42 + 16))(&v46, v42);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v46);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v46, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v46);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_34:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v9, v10);
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_34;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_36;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_36:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v46 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v47[0] = *(_OWORD *)(v6 + 8);
      v47[1] = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v42 = 0;
        v43 = 0;
        v44 = "<chained promise>";
        v45 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v42);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v42 = 0;
        v43 = 0;
        v44 = "<chained promise>";
        v45 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v42);
      }
      WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v46);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(_QWORD *result, uint64_t a2)
{
  _OWORD *v3;
  unsigned __int8 *v4;
  __int128 v6;
  int v7;
  _QWORD *v8;

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) != 1)
  {
    v8 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v8);
  }
  v6 = *(_OWORD *)(a2 + 72);
  *v3 = *(_OWORD *)(a2 + 56);
  v3[1] = v6;
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E0190;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E0190;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, *((_QWORD *)a1 + 3));
      v8 = v9;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(v10, v9);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(v10, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E0168[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E01A8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *result;
  uint64_t v29;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[4];
  char *v36;
  int v37;
  _DWORD v38[4];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v32, a3);
  v29 = a4;
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v31, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  v9 = v31;
  v31 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v32;
  v32 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v33;
  v33 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(NSObject **)(a1 + 32);
  v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v36 = v15;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = v30[0];
    v30[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = (WTF *)WTF::fastFree(v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers(v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v37 = 0;
              WTF::String::String((WTF::String *)v38, a3);
              v38[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v39, v29);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v23 + 16))(v23, a1, 4, v30);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v24);
              for (i = 40; i != -8; i -= 16)
              {
                v26 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v26 -= 2;
                }
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v27 = __ldxr(v16);
          if (v27 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0168[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, __int128 *a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  __int128 v12;
  _BOOL4 v14;
  __int128 *v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))off_1E34E0168[v5])(&v23, v4);
LABEL_15:
    *(_DWORD *)(v4 + 32) = -1;
    v12 = a3[1];
    *(_OWORD *)v4 = *a3;
    *(_OWORD *)(v4 + 16) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v6 = a3[1];
  v21 = *a3;
  v22 = v6;
  v7 = (_DWORD *)a2 + 6;
  v8 = *((unsigned int *)a2 + 6);
  if (DWORD2(v6) != -1 || (_DWORD)v8 != -1)
  {
    v10 = DWORD2(v6) == -1;
    if (DWORD2(v6) == -1)
      v11 = -1;
    else
      v11 = DWORD2(v6);
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      return ((uint64_t (*)(__int128 *, __int128 *, __int128 *))off_1E34E01C0[v11])(&v23, &v21, a2);
    }
    else
    {
      v14 = (DWORD2(v6) - 2) < 0xFFFFFFFD || (v8 + 1) < 3;
      if (v14)
        v15 = &v21;
      else
        v15 = a2;
      if (!v14)
        a2 = &v21;
      v16 = a2[1];
      v23 = *a2;
      v24 = v16;
      if (v14)
        v17 = v7;
      else
        v17 = (_DWORD *)&v22 + 2;
      *((_DWORD *)a2 + 6) = -1;
      if (v14)
        v18 = (_DWORD *)&v22 + 2;
      else
        v18 = v7;
      v19 = *((unsigned int *)v15 + 6);
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E34E01D0[v19])(&v25);
        *v17 = v19;
      }
      *v18 = -1;
      v20 = DWORD2(v24);
      if (DWORD2(v24) != -1)
      {
        result = ((uint64_t (*)(char *, __int128 *, __int128 *))off_1E34E01D0[DWORD2(v24)])(&v25, v15, &v23);
        *v18 = v20;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0168[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;
  unsigned __int8 v5;

  result = *a2;
  v4 = a2[1].n128_u64[0];
  v5 = a3[1].n128_u8[0];
  *a2 = *a3;
  a2[1].n128_u8[0] = v5;
  a3[1].n128_u8[0] = v4;
  *a3 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v27);
  v28 = a1[16];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E0208[v28])(buf, a1 + 14);
  a1[16] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _OWORD v47[2];

  v46 = (unsigned __int8 *)v47 + 8;
  *(_QWORD *)&v47[0] = 1;
  v39 = &v41;
  v40 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v5 = *(unsigned int *)(a1 + 84);
    memcpy(&v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    LODWORD(v40) = *(_DWORD *)(a1 + 80);
  }
  HIDWORD(v40) = v5;
  DWORD1(v47[0]) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v4);
  v6 = *(_QWORD *)(a1 + 96);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 108);
  v37 = *(_DWORD *)(a1 + 104);
  v38 = v7;
  v46 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)&v47[0] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 113));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E0230;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v46 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v46);
          v9 = v46;
          v46 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v46 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v46, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v42, a1);
        v24 = v42;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v42 + 16))(&v46, v42);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v46);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v46, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v46);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_34:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v9, v10);
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_34;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_36;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_36:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v46 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v47[0] = *(_OWORD *)(v6 + 8);
      v47[1] = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v42 = 0;
        v43 = 0;
        v44 = "<chained promise>";
        v45 = 0;
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v42);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v42 = 0;
        v43 = 0;
        v44 = "<chained promise>";
        v45 = 0;
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v42);
      }
      WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v46);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  int v6;
  _QWORD *v7;

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) != 1)
  {
    v7 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v7);
  }
  *v3 = *(_QWORD *)(a2 + 56);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E0230;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E0230;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, *((_QWORD *)a1 + 3));
      v8 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&v10, v9);
      (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v10, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E0208[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E0248[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0208[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(unint64_t *, uint64_t))off_1E34E0208[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(_QWORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v20 = *a3;
  v6 = (_DWORD *)a2 + 1;
  v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || (_DWORD)v7 != -1)
  {
    v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1)
      v10 = -1;
    else
      v10 = HIDWORD(v20);
    if ((_DWORD)v7 != -1)
      v9 = v10 == v7;
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1E34E0260[v10])(&v21, &v20, a2);
    }
    else
    {
      v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      v13 = !v12;
      if (v12)
        v14 = &v20;
      else
        v14 = a2;
      if (!v12)
        a2 = &v20;
      v15 = *a2;
      v21 = *a2;
      if (v13)
        v16 = (_DWORD *)&v20 + 1;
      else
        v16 = v6;
      *((_DWORD *)a2 + 1) = -1;
      if (v13)
        v17 = v6;
      else
        v17 = (_DWORD *)&v20 + 1;
      v18 = *((unsigned int *)v14 + 1);
      v19 = HIDWORD(v15);
      if ((_DWORD)v18 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E34E0270[v18])(&v22);
        *v16 = v18;
      }
      *v17 = -1;
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1E34E0270[v19])(&v22, v14, &v21);
        *v17 = v19;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0208[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 30), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v27);
  v28 = a1[22];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E02A8[v28])(buf, a1 + 14);
  a1[22] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E02C0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE v41[15];
  char v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  __int128 v48;
  __int128 v49;

  v47 = (unsigned __int8 *)&v48 + 8;
  *(_QWORD *)&v48 = 1;
  v39 = (uint64_t *)v41;
  v40 = 1;
  v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    v5 = *(unsigned int *)(a1 + 108);
    memcpy(v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = a1 + 112;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 108);
    LODWORD(v40) = *(_DWORD *)(a1 + 104);
  }
  HIDWORD(v40) = v5;
  DWORD1(v48) = 0;
  *(_QWORD *)(a1 + 104) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v4);
  v6 = *(_QWORD *)(a1 + 120);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 132);
  v37 = *(_DWORD *)(a1 + 128);
  v38 = v7;
  v47 = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)&v48 = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 137));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E02F0;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v47 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v47);
          v9 = v47;
          v47 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v47 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v47, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v43, a1);
        v24 = v43;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v43 + 16))(&v47, v43);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if ((_DWORD)v49 != -1)
          ((void (*)(char *, unsigned __int8 **))off_1E34E02C0[v49])(&v42, &v47);
        LODWORD(v49) = -1;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v47, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if ((_DWORD)v49 != -1)
          ((void (*)(uint64_t *, unsigned __int8 **))off_1E34E02C0[v49])(&v43, &v47);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_37:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_37;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_39;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_39:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v47 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v48 = *(_OWORD *)(v6 + 8);
      v49 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
      }
      WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v47);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E02C0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E02D0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E02F0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E02F0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  char v12;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      v8 = v9;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(v10, v9);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        ((void (*)(char *, _QWORD *))off_1E34E02C0[v11])(&v12, v10);
      v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v10, v7);
      result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E34E02C0[v11])(&v9, v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E02A8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E0308[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E02A8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE v15[24];
  unsigned int v16;
  _BYTE v17[24];
  int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34E02A8[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 32) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 24) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v15[0] = 0;
  v16 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  v8 = *(unsigned int *)(a2 + 24);
  if (v16 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v16 == -1;
    if (v16 == -1)
      v11 = -1;
    else
      v11 = v16;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E0320[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        v12 = v15;
        if ((_DWORD)v8 == 1)
          v13 = v15;
        else
          v13 = (_BYTE *)a2;
        if ((_DWORD)v8 == 1)
          v12 = (_BYTE *)a2;
        if ((_DWORD)v8 == -1)
          v14 = v15;
        else
          v14 = v13;
        if ((_DWORD)v8 != -1)
          a2 = (uint64_t)v12;
      }
      else
      {
        v14 = v15;
      }
      v17[0] = 0;
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34E02C0[v18])(&v19, v17);
    }
  }
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34E02C0[v16])(v17, v15);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E02A8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E02C0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E0330[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl **a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF *v9;
  _QWORD v11[3];

  v4 = *a2;
  v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = a2[2];
  v11[2] = v6;
  v7 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  *a2 = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *((_DWORD *)a2 + 2) = (_DWORD)v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *((_DWORD *)a2 + 3) = (_DWORD)v7;
  a2[2] = *(WTF::StringImpl **)(a3 + 16);
  v8 = *(_DWORD *)(a3 + 12);
  if (v8)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 24 * v8));
  v9 = *(WTF **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v27);
  v28 = a1[20];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E0368[v28])(buf, a1 + 14);
  a1[20] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0380[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE v41[15];
  char v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _OWORD v48[2];

  v47 = (unsigned __int8 *)v48 + 8;
  *(_QWORD *)&v48[0] = 1;
  v39 = (uint64_t *)v41;
  v40 = 1;
  v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    memcpy(v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 100);
    LODWORD(v40) = *(_DWORD *)(a1 + 96);
  }
  HIDWORD(v40) = v5;
  DWORD1(v48[0]) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v4);
  v6 = *(_QWORD *)(a1 + 112);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 124);
  v37 = *(_DWORD *)(a1 + 120);
  v38 = v7;
  v47 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)&v48[0] = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 129));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E03B0;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v47 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v47);
          v9 = v47;
          v47 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v47 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v47, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v43, a1);
        v24 = v43;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v43 + 16))(&v47, v43);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if (DWORD2(v48[0]) != -1)
          ((void (*)(char *, unsigned __int8 **))off_1E34E0380[DWORD2(v48[0])])(&v42, &v47);
        DWORD2(v48[0]) = -1;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v47, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if (DWORD2(v48[0]) != -1)
          ((void (*)(uint64_t *, unsigned __int8 **))off_1E34E0380[DWORD2(v48[0])])(&v43, &v47);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_37:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_37;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_39;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_39:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v47 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v48[0] = *(_OWORD *)(v6 + 8);
      v48[1] = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
      }
      WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v47);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0380[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E0390[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E03B0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E03B0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  char v12;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      v8 = v9;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(v10, v9);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        ((void (*)(char *, _QWORD *))off_1E34E0380[v11])(&v12, v10);
      v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v10, v7);
      result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E34E0380[v11])(&v9, v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E0368[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E03C8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0368[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE v15[16];
  unsigned int v16;
  _BYTE v17[16];
  int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34E0368[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v15[0] = 0;
  v16 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v16 == -1;
    if (v16 == -1)
      v11 = -1;
    else
      v11 = v16;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E03E0[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        v12 = v15;
        if ((_DWORD)v8 == 1)
          v13 = v15;
        else
          v13 = (_BYTE *)a2;
        if ((_DWORD)v8 == 1)
          v12 = (_BYTE *)a2;
        if ((_DWORD)v8 == -1)
          v14 = v15;
        else
          v14 = v13;
        if ((_DWORD)v8 != -1)
          a2 = (uint64_t)v12;
      }
      else
      {
        v14 = v15;
      }
      v17[0] = 0;
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34E0380[v18])(&v19, v17);
    }
  }
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34E0380[v16])(v17, v15);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0368[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0380[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E03F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v27);
  v28 = a1[20];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E0428[v28])(buf, a1 + 14);
  a1[20] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0440[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE v41[15];
  char v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _OWORD v48[2];

  v47 = (unsigned __int8 *)v48 + 8;
  *(_QWORD *)&v48[0] = 1;
  v39 = (uint64_t *)v41;
  v40 = 1;
  v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    memcpy(v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 100);
    LODWORD(v40) = *(_DWORD *)(a1 + 96);
  }
  HIDWORD(v40) = v5;
  DWORD1(v48[0]) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v4);
  v6 = *(_QWORD *)(a1 + 112);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 124);
  v37 = *(_DWORD *)(a1 + 120);
  v38 = v7;
  v47 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)&v48[0] = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 129));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E0470;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v47 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v47);
          v9 = v47;
          v47 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v47 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v47, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v43, a1);
        v24 = v43;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v43 + 16))(&v47, v43);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if (DWORD2(v48[0]) != -1)
          ((void (*)(char *, unsigned __int8 **))off_1E34E0440[DWORD2(v48[0])])(&v42, &v47);
        DWORD2(v48[0]) = -1;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v47, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if (DWORD2(v48[0]) != -1)
          ((void (*)(uint64_t *, unsigned __int8 **))off_1E34E0440[DWORD2(v48[0])])(&v43, &v47);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_37:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_37;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_39;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_39:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v47 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v48[0] = *(_OWORD *)(v6 + 8);
      v48[1] = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
      }
      WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v47);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0440[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E0450[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E0470;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E0470;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  char v12;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      v8 = v9;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(v10, v9);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        ((void (*)(char *, _QWORD *))off_1E34E0440[v11])(&v12, v10);
      v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v10, v7);
      result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E34E0440[v11])(&v9, v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E0428[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E0488[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0428[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE v15[16];
  unsigned int v16;
  _BYTE v17[16];
  int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34E0428[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v15[0] = 0;
  v16 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v16 == -1;
    if (v16 == -1)
      v11 = -1;
    else
      v11 = v16;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E04A0[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        v12 = v15;
        if ((_DWORD)v8 == 1)
          v13 = v15;
        else
          v13 = (_BYTE *)a2;
        if ((_DWORD)v8 == 1)
          v12 = (_BYTE *)a2;
        if ((_DWORD)v8 == -1)
          v14 = v15;
        else
          v14 = v13;
        if ((_DWORD)v8 != -1)
          a2 = (uint64_t)v12;
      }
      else
      {
        v14 = v15;
      }
      v17[0] = 0;
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34E0440[v18])(&v19, v17);
    }
  }
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34E0440[v16])(v17, v15);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0428[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0440[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E04B0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF *v27[2];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint8_t buf[16];
  int v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34E04D0;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v4)
    return a1;
  v5 = v4;
  if (v4[16] < 4u)
    return a1;
  WTF::String::String((WTF::String *)&v29, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v28, a1);
  *(_QWORD *)buf = v29;
  v27[0] = v28;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *((_QWORD *)v5 + 4);
    v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = (WTF *)WTF::fastFree(v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (*v5 && v5[16] >= 4u)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers(v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v20 = *(_QWORD *)v17 + 8 * v18;
              do
              {
                v21 = *v19;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                v32 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v33, a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, v5, 4, v27);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v22);
                for (i = 24; i != -8; i -= 16)
                {
                  v24 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v20);
            }
            v25 = __ldxr(v14);
            if (v25 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v26 = v30;
    v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v26 -= 2;
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v27);
  v28 = a1[16];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E04E8[v28])(buf, a1 + 14);
  a1[16] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _OWORD v47[2];

  v46 = (unsigned __int8 *)v47 + 8;
  *(_QWORD *)&v47[0] = 1;
  v39 = &v41;
  v40 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v5 = *(unsigned int *)(a1 + 84);
    memcpy(&v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    LODWORD(v40) = *(_DWORD *)(a1 + 80);
  }
  HIDWORD(v40) = v5;
  DWORD1(v47[0]) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v4);
  v6 = *(_QWORD *)(a1 + 96);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 108);
  v37 = *(_DWORD *)(a1 + 104);
  v38 = v7;
  v46 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)&v47[0] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 113));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E0510;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v46 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v46);
          v9 = v46;
          v46 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v46 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v46, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v46, a1);
        v24 = (uint64_t)v46;
        (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *))(*(_QWORD *)v46 + 16))(&v42, v46);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 24))(v14, a1, &v42);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v46, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v46);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_34:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v9, v10);
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_34;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_36;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_36:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v46 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v47[0] = *(_OWORD *)(v6 + 8);
      v47[1] = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v42 = 0;
        v43 = 0;
        v44 = "<chained promise>";
        v45 = 0;
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v42);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v42 = 0;
        v43 = 0;
        v44 = "<chained promise>";
        v45 = 0;
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v42);
      }
      WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v46);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

_QWORD *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(_QWORD *result, uint64_t a2)
{
  _WORD *v3;
  unsigned __int8 *v4;
  int v6;
  _QWORD *v7;

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) != 1)
  {
    v7 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v7);
  }
  *v3 = *(_WORD *)(a2 + 56);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E0510;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E0510;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[2];
  uint64_t v10;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v10, *((_QWORD *)a1 + 3));
      v8 = v10;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v10 + 16))(v9, v10);
      (*(void (**)(_BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v10, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E04E8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E0528[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E04E8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, _BYTE *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E04E8[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (unsigned __int16)*a3;
  v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1])
        a2[1] = 0;
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E04E8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF *v27[2];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint8_t buf[16];
  int v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34E0550;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v4)
    return a1;
  v5 = v4;
  if (v4[16] < 4u)
    return a1;
  WTF::String::String((WTF::String *)&v29, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v28, a1);
  *(_QWORD *)buf = v29;
  v27[0] = v28;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *((_QWORD *)v5 + 4);
    v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = (WTF *)WTF::fastFree(v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (*v5 && v5[16] >= 4u)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers(v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v20 = *(_QWORD *)v17 + 8 * v18;
              do
              {
                v21 = *v19;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                v32 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v33, a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, v5, 4, v27);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v22);
                for (i = 24; i != -8; i -= 16)
                {
                  v24 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v20);
            }
            v25 = __ldxr(v14);
            if (v25 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v26 = v30;
    v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v26 -= 2;
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 116);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 104);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 26), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 20), v27);
  v28 = a1[18];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E0568[v28])(buf, a1 + 14);
  a1[18] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0580[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE v41[15];
  char v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _OWORD v48[2];

  v47 = (unsigned __int8 *)v48 + 8;
  *(_QWORD *)&v48[0] = 1;
  v39 = (uint64_t *)v41;
  v40 = 1;
  v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 96))
  {
    v5 = *(unsigned int *)(a1 + 92);
    memcpy(v41, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = a1 + 96;
    v39 = (uint64_t *)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 92);
    LODWORD(v40) = *(_DWORD *)(a1 + 88);
  }
  HIDWORD(v40) = v5;
  DWORD1(v48[0]) = 0;
  *(_QWORD *)(a1 + 88) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v4);
  v6 = *(_QWORD *)(a1 + 104);
  v36 = v6;
  v7 = *(_DWORD *)(a1 + 116);
  v37 = *(_DWORD *)(a1 + 112);
  v38 = v7;
  v47 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)&v48[0] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v9 = (unsigned __int8 *)WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  if (HIDWORD(v40))
  {
    v11 = v39;
    v12 = &v39[HIDWORD(v40)];
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 121));
        if (v15 != 1
          || (v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)),
              !(_DWORD)v9))
        {
          v16 = *(_QWORD *)(v14 + 16);
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v20 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E34E05B0;
          *((_QWORD *)v20 + 1) = v14;
          *((_QWORD *)v20 + 2) = v14;
          *((_QWORD *)v20 + 3) = a1;
          v47 = v20;
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v16 + 16))(v16, &v47);
          v9 = v47;
          v47 = 0;
          if (v9)
            v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_14;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        v47 = (unsigned __int8 *)v14;
        v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
        if (*v9)
          v21 = v9[16] >= 4u;
        else
          v21 = 0;
        if (v21)
          v9 = (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v9, a1, (uint64_t)&v47, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_14;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 != 1)
        break;
      if (__stlxr(0, v22))
        goto LABEL_27;
LABEL_28:
      if (WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v43, a1);
        v24 = v43;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v43 + 16))(&v47, v43);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if (LODWORD(v48[0]) != -1)
          ((void (*)(char *, unsigned __int8 **))off_1E34E0580[LODWORD(v48[0])])(&v42, &v47);
        LODWORD(v48[0]) = -1;
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v47, a1);
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v14 + 24))(v14, a1, &v47);
        if (LODWORD(v48[0]) != -1)
          ((void (*)(uint64_t *, unsigned __int8 **))off_1E34E0580[LODWORD(v48[0])])(&v43, &v47);
      }
      v9 = *a2;
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_37:
        v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
        goto LABEL_14;
      }
      if (__stxr(1u, v9))
        goto LABEL_37;
LABEL_14:
      if (++v11 == v12)
        goto LABEL_39;
    }
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_28;
  }
LABEL_39:
  if (v7)
  {
    v26 = v6 + 40 * v7;
    v27 = a1 + 56;
    do
    {
      v28 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v47 = (unsigned __int8 *)v28;
      v29 = *(_OWORD *)(v6 + 24);
      v48[0] = *(_OWORD *)(v6 + 8);
      v48[1] = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>((uint64_t)v28, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
        do
        {
          v32 = __ldaxr(v30);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v30));
        if (!v33)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = "<chained promise>";
        v46 = 0;
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(0, v27, (WTF::Logger::LogSiteIdentifier *)&v43);
      }
      WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer((uint64_t *)&v47);
      v6 += 40;
    }
    while (v6 != v26);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v34);
}

BOOL WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 72);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 72) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 72) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, a2 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0580[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E0590[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E05B0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E05B0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, v7);
      v8 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&v10, v9);
      (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      if (v11 != -1)
        ((void (*)(char *, uint64_t *))off_1E34E0580[v11])(&v12, &v10);
      v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v10, v7);
      result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      if (v11 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E34E0580[v11])(&v9, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 72);
  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E0568[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 72) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E05C8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0568[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE v15[8];
  unsigned int v16;
  _BYTE v17[8];
  int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34E0568[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 16) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 8) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v15[0] = 0;
  v16 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  v8 = *(unsigned int *)(a2 + 8);
  if (v16 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v16 == -1;
    if (v16 == -1)
      v11 = -1;
    else
      v11 = v16;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E05E0[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        v12 = v15;
        if ((_DWORD)v8 == 1)
          v13 = v15;
        else
          v13 = (_BYTE *)a2;
        if ((_DWORD)v8 == 1)
          v12 = (_BYTE *)a2;
        if ((_DWORD)v8 == -1)
          v14 = v15;
        else
          v14 = v13;
        if ((_DWORD)v8 != -1)
          a2 = (uint64_t)v12;
      }
      else
      {
        v14 = v15;
      }
      v17[0] = 0;
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>>(a2, (uint64_t)v14);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34E0580[v18])(&v19, v17);
    }
  }
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34E0580[v16])(v17, v15);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0568[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::String,WebCore::DOMCacheEngine::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E0580[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E05F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WebKit::SpeechRecognitionRealtimeMediaSourceManager *std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager>::reset[abi:sn180100](WebKit::SpeechRecognitionRealtimeMediaSourceManager **a1, WebKit::SpeechRecognitionRealtimeMediaSourceManager *a2)
{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(result);
    return (WebKit::SpeechRecognitionRealtimeMediaSourceManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebCore::DeferrableOneShotTimer::~DeferrableOneShotTimer(WebCore::DeferrableOneShotTimer *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E34E0DF8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34E0DF8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebCore::DeferrableOneShotTimer::fired(WebCore::DeferrableOneShotTimer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if ((v1 & 0x2000000000000) == 0)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  *((_QWORD *)this + 4) = v1 & 0xFDFFFFFFFFFFFFLL;
  return WebCore::TimerBase::start();
}

uint64_t **std::unique_ptr<WebKit::AudioMediaStreamTrackRendererInternalUnitManager>::reset[abi:sn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(*v2, a2);
    return (uint64_t **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy15ShouldTerminateEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

double WebKit::getNetworkProcessConnection(IPC::Connection &)::$_0::operator()(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double result;
  NSObject *v7;
  const char *v8;
  WTF::MachSendRight *v9;
  uint64_t v10;
  _BYTE v11[56];
  int v12;
  uint8_t buf[4];
  __int128 v14;
  _BYTE v15[21];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  IPC::Connection::sendSync<Messages::WebProcessProxy::GetNetworkProcessConnection>((uint64_t)v11, *a1);
  v2 = v12;
  if (v12)
  {
    v7 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      if (v2 != 1)
      {
        v9 = (WTF::MachSendRight *)std::__throw_bad_variant_access[abi:sn180100]();
        *(_QWORD *)&result = std::__optional_storage_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>>(v9, v10).n128_u64[0];
        return result;
      }
      v8 = IPC::errorAsString(v11[0]);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&v14 = v8;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to send message or receive invalid message: error %{public}s", buf, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19748E390);
  }
  IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::takeReply((uint64_t)buf, (uint64_t)v11);
  v3 = a1[1];
  WTF::MachSendRight::operator=();
  v4 = *(_QWORD *)&v15[13];
  v5 = *(_OWORD *)v15;
  *(_OWORD *)(v3 + 4) = v14;
  *(_OWORD *)(v3 + 20) = v5;
  *(_QWORD *)(v3 + 33) = v4;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
  if (v12 != -1)
    ((void (*)(uint8_t *, _BYTE *))off_1E34E0620[v12])(buf, v11);
  return result;
}

__n128 std::__optional_storage_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>>(WTF::MachSendRight *this, uint64_t a2)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  if (*((unsigned __int8 *)this + 44) == *(unsigned __int8 *)(a2 + 44))
  {
    if (*((_BYTE *)this + 44))
    {
      WTF::MachSendRight::operator=();
      v4 = *(_QWORD *)(a2 + 33);
      result = *(__n128 *)(a2 + 20);
      *(_OWORD *)((char *)this + 4) = *(_OWORD *)(a2 + 4);
      *(__n128 *)((char *)this + 20) = result;
      *(_QWORD *)((char *)this + 33) = v4;
    }
  }
  else if (*((_BYTE *)this + 44))
  {
    WTF::MachSendRight::~MachSendRight(this);
    *((_BYTE *)this + 44) = 0;
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    result = *(__n128 *)(a2 + 4);
    v6 = *(_OWORD *)(a2 + 20);
    *(_QWORD *)((char *)this + 33) = *(_QWORD *)(a2 + 33);
    *(_OWORD *)((char *)this + 20) = v6;
    *(__n128 *)((char *)this + 4) = result;
    *((_BYTE *)this + 44) = 1;
  }
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t a3)
{
  IPC::Decoder *v5;
  IPC::Decoder *v7;
  _BYTE v8[20];
  _BYTE v9[21];

  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&v8[4] = *(_OWORD *)(a3 + 4);
  *(_OWORD *)v9 = *(_OWORD *)(a3 + 20);
  *(_QWORD *)&v9[13] = *(_QWORD *)(a3 + 33);
  *(_QWORD *)a1 = v7;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)(a1 + 12) = *(_OWORD *)&v8[4];
  *(_OWORD *)(a1 + 28) = *(_OWORD *)v9;
  *(_QWORD *)(a1 + 41) = *(_QWORD *)&v9[13];
  *(_DWORD *)(a1 + 56) = 0;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v8);
  return a1;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a2 + 1));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::deallocateTable(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcess::*&)(void),WebKit::WebProcess*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebKit::WebProcess::transformHandlesToObjects(API::Object *)::Transformer::~Transformer()
{
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebKit::WebProcess::transformHandlesToObjects(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, _BYTE *a2)
{
  int v3;

  v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  return (v3 == 13 || v3 == 11) && a2[32] != 0;
}

uint64_t WebKit::WebProcess::transformHandlesToObjects(API::Object *)::Transformer::transformObject@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  int v4;
  WebKit::WebProcess *v5;
  uint64_t result;
  WebKit::WebProcess *v7;
  WebKit::WebProcess *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;

  v2 = a1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v4 == 13)
  {
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v7 = WebKit::WebProcess::WebProcess(v9);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    }
    v10 = *(_QWORD *)(v2 + 24);
    result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v7 + 14, &v10);
  }
  else
  {
    if (v4 != 11)
    {
LABEL_10:
      result = (uint64_t)CFRetain(*(CFTypeRef *)(v2 + 8));
      goto LABEL_11;
    }
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v8);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    result = WebKit::WebProcess::webFrame((uint64_t)v5, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  }
  v2 = result;
  if (result)
    goto LABEL_10;
LABEL_11:
  *a2 = v2;
  return result;
}

void WebKit::WebProcess::transformObjectsToHandles(API::Object *)::Transformer::~Transformer()
{
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebKit::WebProcess::transformObjectsToHandles(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return v2 == 134 || v2 == 137;
}

void WebKit::WebProcess::transformObjectsToHandles(API::Object *)::Transformer::transformObject(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(API::FrameHandle *__hidden);

  v2 = a1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v4 == 137)
  {
    v5 = *(_QWORD *)(v2 + 2120);
    v6 = *(_QWORD *)(v2 + 40);
    v2 = API::Object::newObject(0x28uLL, 13);
    *(_QWORD *)v2 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v2);
    v7 = &off_1E34AD2D0;
  }
  else
  {
    if (v4 != 134)
    {
      CFRetain(*(CFTypeRef *)(v2 + 8));
      goto LABEL_6;
    }
    v5 = *(_QWORD *)(v2 + 80);
    v6 = *(_QWORD *)(v2 + 88);
    v2 = API::Object::newObject(0x28uLL, 11);
    *(_QWORD *)v2 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v2);
    v7 = &off_1E34AD1B8;
  }
  *(_QWORD *)v2 = v7;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 24) = v6;
  *(_BYTE *)(v2 + 32) = 1;
LABEL_6:
  *a2 = v2;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 32;
    do
    {
      v5 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v4 - 32));
      if ((v6 & 1) == 0)
      {
        v7 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t, double))off_1E34E0750[v7])(&v10, v4, v5);
        *(_DWORD *)(v4 + 24) = -1;
        v8 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))off_1E34E0750[v8])(&v11, v4 - 32);
        *(_DWORD *)(v4 - 8) = -1;
      }
      v4 += 72;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteImageDecoderAVFManager,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteImageDecoderAVFManager *v6;
  BOOL v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WebKit::RemoteImageDecoderAVFManager *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(v6, a2);
    this = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::WebProcess(void)::$_0,void,PAL::HysteresisState>::call(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;

  if ((_DWORD)a2)
  {
    v2 = *(_QWORD *)(result + 8);
    result = *(_QWORD *)(v2 + 432);
    if (result)
    {
      *(_QWORD *)(v2 + 432) = 0;
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  const WTF::ASCIILiteral *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    v9 = v3;
    while (1)
    {
      v10 = (_QWORD *)(v2 + 24 * v8);
      if (*v10)
      {
        if (*v10 == -1)
          goto LABEL_18;
        v11 = *a1;
        v12 = *a1 ? *(_DWORD *)(v11 - 8) : 0;
        v13 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)(v2 + 24 * v8), v7);
        v14 = 0;
        do
        {
          v15 = v13 & v12;
          v16 = (_QWORD *)(v11 + 24 * (v13 & v12));
          v13 = ++v14 + (v13 & v12);
        }
        while (*v16);
        v17 = v11 + 24 * v15;
        v20 = *(_QWORD *)(v17 + 16);
        v19 = (_QWORD *)(v17 + 16);
        v18 = v20;
        *v19 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        *(_OWORD *)v16 = *(_OWORD *)v10;
        v21 = v2 + 24 * v8;
        v22 = *(_QWORD *)(v21 + 16);
        *(_QWORD *)(v21 + 16) = 0;
        *v19 = v22;
        v23 = *(_QWORD *)(v21 + 16);
        *(_QWORD *)(v21 + 16) = 0;
        if (!v23)
          goto LABEL_18;
      }
      else
      {
        v24 = v2 + 24 * v8;
        v23 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v24 + 16) = 0;
        if (!v23)
          goto LABEL_18;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_18:
      if (++v8 == v9)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 617))
  {
    v2 = *(_DWORD *)(v1 + 596);
    if ((v2 & 0xFFFFFFFE) == 2)
      goto LABEL_5;
    if (WebKit::WebProcess::areAllPagesSuspended(*(WebKit::WebProcess **)(a1 + 8)))
    {
      v2 = *(_DWORD *)(v1 + 596);
LABEL_5:
      if (v2 == 2)
      {
        v3 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(v1 + 672))
            v12 = *(_QWORD *)(v1 + 664);
          else
            v12 = 0;
          v15 = 134218240;
          v16 = v1;
          v17 = 2048;
          v18 = v12;
          v14 = "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Prewarmed WebProcess is exiting due to memory pressure";
          goto LABEL_34;
        }
      }
      else if (v2 == 3)
      {
        v3 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(v1 + 672))
            v4 = *(_QWORD *)(v1 + 664);
          else
            v4 = 0;
          v15 = 134218240;
          v16 = v1;
          v17 = 2048;
          v18 = v4;
          v14 = "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Cached WebProcess is exiting due to memory pressure";
LABEL_34:
          _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v15, 0x16u);
        }
      }
      else
      {
        v3 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(v1 + 672))
            v13 = *(_QWORD *)(v1 + 664);
          else
            v13 = 0;
          v15 = 134218240;
          v16 = v1;
          v17 = 2048;
          v18 = v13;
          v14 = "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Suspended WebProcess is exiting due to memory pressure";
          goto LABEL_34;
        }
      }
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1);
    }
  }
  WebCore::releaseMemory();
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v1 + 112));
  v6 = result;
  v8 = v7;
  v9 = *(_QWORD *)(v1 + 112);
  if (v9)
    v10 = (_QWORD *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  else
    v10 = 0;
  if (v10 != result)
  {
    do
    {
      v11 = *(_QWORD *)(v6[1] + 2392);
      if (v11)
        result = WebKit::RemoteResourceCacheProxy::releaseMemory((WTF::ApproximateTime **)(v11 + 64));
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_20;
      }
      v6 = v8;
LABEL_20:
      ;
    }
    while (v6 != v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_1,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v1 = *(_QWORD *)(*((_QWORD *)result + 1) + 32);
  if (v1)
  {
    v2 = WTF::MemoryPressureHandler::singleton(result);
    v3 = atomic_load((unsigned __int8 *)(v2 + 4));
    v5 = v3 == 2 || *(_BYTE *)(v2 + 7) != 0;
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 2560;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v10 = (IPC::Encoder *)v6;
    *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = v5;
    IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v10, 0, 0);
    result = v10;
    v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_2,void,WTF::ProcessMemoryLimit>::call(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (a2 == 1)
  {
    if (!*(_BYTE *)(v2 + 594))
    {
      *(_BYTE *)(v2 + 594) = 1;
      return WebKit::scheduleLogMemoryStatistics((WTF::RunLoop *)2);
    }
  }
  else if (!a2 && !*(_BYTE *)(v2 + 593))
  {
    *(_BYTE *)(v2 + 593) = 1;
    return WebKit::scheduleLogMemoryStatistics((WTF::RunLoop *)1);
  }
  return result;
}

uint64_t WebKit::scheduleLogMemoryStatistics(WTF::RunLoop *a1)
{
  char v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = (char)a1;
  WTF::RunLoop::main(a1);
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E34E0810;
  *(_BYTE *)(v2 + 8) = v1;
  v4 = v2;
  WTF::RunLoop::dispatch();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::scheduleLogMemoryStatistics(WebCore::LogMemoryStatisticsReason)::$_0,void>::call()
{
  return WebCore::logMemoryStatistics();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_3,void>::call()
{
  return WebCore::logMemoryStatistics();
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebProcess::initializeWebProcess(WebKit::WebProcessCreationParameters &&,WTF::CompletionHandler<void ()(WebCore::ProcessIdentity)> &&)::$_4,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  void *v8;
  double v9;
  NSObject *v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  char v36;
  int v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  char *v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v1 + 112));
  v3 = result;
  v5 = v4;
  v6 = *(_QWORD *)(v1 + 112);
  if (v6)
    v7 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    v8 = &unk_1ECE70000;
    v28 = v7;
    do
    {
      v9 = *(double *)(*((_QWORD *)v3 + 1) + 2040);
      v35 = 0;
      v33 = 0;
      v34 = 0;
      v36 = 1;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      WebCore::operator<<();
      v10 = *((_QWORD *)v8 + 457);
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        v13 = *((_QWORD *)v3 + 1);
        v14 = *(unsigned __int16 *)(v13 + 1832);
        v15 = (v14 >> 2) & 1;
        v16 = v14 & 0x1E1;
        if (*(_BYTE *)(v13 + 1834))
          v17 = v16 == 32;
        else
          v17 = 0;
        v18 = v17;
        v19 = *(unsigned __int8 *)(v13 + 2108);
        v20 = WTF::MemoryPressureHandler::processStateDescription((WTF::MemoryPressureHandler *)v11);
        WTF::TextStream::release((WTF::TextStream *)&v33);
        WTF::String::utf8();
        if (v32)
          v21 = (char *)v32 + 16;
        else
          v21 = 0;
        WebKit::WebFrame::url(*(WebKit::WebFrame **)(*((_QWORD *)v3 + 1) + 88), (uint64_t)&v29);
        WTF::String::utf8();
        if (v30)
          v22 = (char *)v30 + 16;
        else
          v22 = 0;
        *(_DWORD *)buf = 134219779;
        v41 = v13;
        v42 = 2048;
        v43 = (uint64_t)v9;
        v44 = 1024;
        v45 = v15;
        v46 = 1024;
        v47 = v18;
        v48 = 1024;
        v49 = v19;
        v50 = 2082;
        v51 = v20;
        v52 = 2082;
        v53 = v21;
        v54 = 2081;
        v55 = v22;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "WebPage %p - load_time: %lld, visible: %d, throttleable: %d , suspended: %d , websam_state: %{public}s, activity_state: %{public}s, url: %{private}s", buf, 0x46u);
        v23 = v30;
        v30 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
            WTF::fastFree(v23, v12);
          else
            --*(_DWORD *)v23;
        }
        v7 = v28;
        v24 = v29;
        v29 = 0;
        v8 = &unk_1ECE70000;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = v32;
        v32 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
            WTF::fastFree(v25, v12);
          else
            --*(_DWORD *)v25;
        }
        v26 = v31;
        v31 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)v27 -= 2;
      }
      result = v33;
      v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)result -= 2;
      }
      while (1)
      {
        v3 = (WTF::StringImpl *)((char *)v3 + 16);
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_47;
      }
      v3 = v5;
LABEL_47:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v14);
          v17 = v14[1];
          v14[1] = 0;
          if (v17)
            CFRelease(*(CFTypeRef *)(v17 + 8));
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = v14[1];
          v14[1] = 0;
          if (v15)
            CFRelease(*(CFTypeRef *)(v15 + 8));
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 16 * v7));
  v8 = (_QWORD *)(a1 + 16 * v7);
  v9 = v8[1];
  v8[1] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  *v8 = *a2;
  v10 = a2[1];
  a2[1] = 0;
  v8[1] = v10;
  return v8;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v5;
  v7 = *(_QWORD *)(v2 + 16 * v6);
  if (v7 == *a2)
    return v2 + 16 * v6;
  v8 = 1;
  while (v7)
  {
    v6 = ((_DWORD)v6 + v8) & v5;
    v7 = *(_QWORD *)(v2 + 16 * v6);
    ++v8;
    if (v7 == *a2)
      return v2 + 16 * v6;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  unsigned int v18;
  __int16 v19;
  char v20;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
LABEL_16:
    v13 = 0;
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(v4 - 8);
  v18 = -1640531527;
  v19 = 0;
  v20 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v18, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
  v7 = a2[1];
  v8 = result & v6;
  v9 = (uint64_t *)(v4 + 24 * (result & v6));
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != *a2 || v11 != v7)
  {
    v15 = 1;
    while (v10 | v11)
    {
      v8 = (v8 + v15) & v6;
      v16 = (uint64_t *)(v4 + 24 * v8);
      v10 = *v16;
      v11 = v16[1];
      ++v15;
      if (v10 == *a2 && v11 == v7)
        goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_7:
  v13 = *(unsigned int **)(v4 + 24 * v8 + 16);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
LABEL_9:
  *a3 = v13;
  return result;
}

unsigned int *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebFrame*&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  void *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *result;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int16 v37;
  char v38;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v36 = -1640531527;
  v37 = 0;
  v38 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v36, a2);
  v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36) & v9;
  v12 = (unsigned int *)(v8 + 24 * v11);
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  if (*(_OWORD *)v12 == 0)
  {
LABEL_4:
    *(_OWORD *)v12 = *(_OWORD *)a2;
    v15 = *a3;
    if (v15)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v15 + 16), v15);
      v16 = *(unsigned int **)(v15 + 16);
      if (v16)
      {
        do
          v28 = __ldaxr(v16);
        while (__stlxr(v28 + 1, v16));
      }
    }
    else
    {
      v16 = 0;
    }
    result = (unsigned int *)*((_QWORD *)v12 + 2);
    *((_QWORD *)v12 + 2) = v16;
    if (result)
    {
      do
      {
        v18 = __ldaxr(result);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, result));
      if (!v19)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v10);
      }
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_16;
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_16:
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v22 + 24 * v25;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
    result = (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (uint64_t)v12);
    v12 = result;
    v22 = *a1;
    if (*a1)
      LODWORD(v25) = *(_DWORD *)(v22 - 4);
    else
      LODWORD(v25) = 0;
    goto LABEL_16;
  }
  v26 = 0;
  v27 = 1;
  while (v14 != *a2 || v13 != a2[1])
  {
    if (v13 == -1)
      v26 = v12;
    v11 = (v11 + v27) & v9;
    v12 = (unsigned int *)(v8 + 24 * v11);
    v14 = *(_QWORD *)v12;
    v13 = *((_QWORD *)v12 + 1);
    ++v27;
    if (*(_OWORD *)v12 == 0)
    {
      if (v26)
      {
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = v26;
      }
      goto LABEL_4;
    }
  }
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 4);
  else
    v30 = 0;
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v29 + 24 * v30;
  *(_BYTE *)(a4 + 16) = 0;
  v31 = *a3;
  if (*a3)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v31 + 16), *a3);
    v32 = *(unsigned int **)(v31 + 16);
    if (v32)
    {
      do
        v35 = __ldaxr(v32);
      while (__stlxr(v35 + 1, v32));
      v12 = *(unsigned int **)a4;
    }
  }
  else
  {
    v32 = 0;
  }
  result = (unsigned int *)*((_QWORD *)v12 + 2);
  *((_QWORD *)v12 + 2) = v32;
  if (result)
  {
    do
    {
      v33 = __ldaxr(result);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, result));
    if (!v34)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _OWORD *result;
  unsigned int v39;
  __int16 v40;
  char v41;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 24 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = v5 + 24 * v12;
      if (*(_QWORD *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          v16 = v5 + 24 * v12;
          v17 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v9);
            }
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v39 = -1640531527;
          v40 = 0;
          v41 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v39, (_QWORD *)(v5 + 24 * v12));
          v22 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v39);
          v23 = 0;
          do
          {
            v24 = v22 & v21;
            v25 = (_OWORD *)(v20 + 24 * (v22 & v21));
            v22 = ++v23 + (v22 & v21);
          }
          while (*v25 != 0);
          v26 = v20 + 24 * v24;
          v29 = *(unsigned int **)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          *v28 = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v27);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v27));
            if (!v31)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v9);
            }
          }
          *v25 = *(_OWORD *)v15;
          v32 = v5 + 24 * v12;
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          *v28 = v33;
          v34 = *(unsigned int **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v9);
            }
          }
          if (v15 == a3)
            v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  uint64_t v4;
  void *v5;

  v3 = (char *)*a1;
  if (*a1)
    v3 += 24 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (void *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, a2);
  return a1;
}

unsigned int *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, void *a2)
{
  unsigned int *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 24 * (v6 & v5));
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = (v8 + v13) & v5;
      result = (uint64_t *)(v2 + 24 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v14);
          v17 = (_DWORD *)v14[1];
          v14[1] = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = (_DWORD *)v14[1];
          v14[1] = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_24;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = (uint64_t *)(v3 + 24 * --v4);
        result = *v6;
        if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
          break;
        if (!v4)
          goto LABEL_13;
      }
      *v6 = 0;
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, a2);
      }
      *v6 = -1;
      ++v5;
    }
    while (v4);
LABEL_13:
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v9 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v10 = *(_DWORD *)(v9 - 12);
      else
        v10 = 0;
      *(_DWORD *)(v9 - 12) = v10 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v11 = *(_DWORD *)(v3 - 4);
      v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        v16 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12)
            goto LABEL_35;
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_33:
          v19 = (double)v12;
          v20 = (double)v18;
          v21 = 0.604166667;
          goto LABEL_36;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400)
          goto LABEL_33;
LABEL_35:
        v19 = (double)v12;
        v20 = (double)v18;
        v21 = 0.416666667;
LABEL_36:
        if (v20 * v21 <= v19)
          LODWORD(v18) = 2 * v18;
        if (v18 <= 8)
          v22 = 8;
        else
          v22 = v18;
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v14 = 0;
          goto LABEL_28;
        }
LABEL_25:
        v14 = *(_DWORD *)(v3 - 12);
        v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_24:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_25;
    }
  }
  v14 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_28:
  v15 = v14;
LABEL_29:
  *(_DWORD *)(v2 + 12) = 2 * v15;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unsigned int **)(v6 + 24 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (unsigned int **)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          *v24 = 0;
          v25 = *v14;
          *v14 = 0;
          *v24 = v25;
          *(_OWORD *)(v16 + 24 * v23 + 8) = *(_OWORD *)(v6 + 24 * v11 + 8);
          v26 = *v14;
          *v14 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v14 == a3)
            v12 = v24;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcess::userGestureTokenIdentifier(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>)::$_1,void,WebCore::UserGestureToken&>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *result;
  WTF *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int **v36;
  IPC::Encoder *v37;

    goto LABEL_36;
  v4 = WebKit::WebProcess::singleton(void)::process;
  while (!*(_BYTE *)(a1 + 16))
  {
    __break(1u);
LABEL_36:
    v4 = WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess((WebKit::WebProcess *)v4);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)(v4 + 600);
  v7 = *(_DWORD *)(v4 + 608);
  *(_DWORD *)(v4 + 608) = v7 + 1;
  if (v7 > *(_DWORD *)(v4 + 612))
    WTF::WeakHashMap<WebCore::UserGestureToken,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v4 + 600, a2);
  v8 = a2[1];
  if (!v8)
    goto LABEL_20;
  if (!*(_QWORD *)(v8 + 8))
    goto LABEL_20;
  v9 = *v6;
  if (!*v6)
    goto LABEL_20;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  for (i = 1; ; v14 = (v14 + i++) & v10)
  {
    v16 = (unsigned int **)(v9 + 24 * v14);
    v17 = *v16;
    if (*v16 != (unsigned int *)-1)
    {
      if (!v17)
      {
        v18 = *(_DWORD *)(v9 - 4);
        v16 = (unsigned int **)(v9 + 24 * v18);
        goto LABEL_16;
      }
      if (v17 == (unsigned int *)v8)
        break;
    }
  }
  v18 = *(_DWORD *)(v9 - 4);
LABEL_16:
  if ((unsigned int **)(v9 + 24 * v18) != v16)
  {
    v20 = v16[1];
    v19 = v16[2];
    v21 = *v16;
    *v16 = 0;
    if (v21)
    {
      do
      {
        v30 = __ldaxr(v21);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v21));
      if (!v31)
      {
        atomic_store(1u, v21);
        v36 = v16;
        WTF::fastFree((WTF *)v21, a2);
        v16 = v36;
      }
    }
    *v16 = (unsigned int *)-1;
    ++*(_DWORD *)(*v6 - 16);
    v22 = *v6;
    if (*v6)
      v23 = *(_DWORD *)(v22 - 12) - 1;
    else
      v23 = -1;
    *(_DWORD *)(v22 - 12) = v23;
    v32 = *v6;
    if (*v6)
    {
      v33 = 6 * *(_DWORD *)(v32 - 12);
      v34 = *(_DWORD *)(v32 - 4);
      if (v33 < v34 && v34 >= 9)
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)(v4 + 600), v34 >> 1, 0);
    }
  }
  else
  {
LABEL_20:
    v20 = 0;
    v19 = 0;
  }
  v24 = *(_QWORD *)(v4 + 32);
  v25 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v25 = 2550;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 528) = v25 + 16;
  *(_QWORD *)(v25 + 536) = v25 + 16;
  *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v25 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
  v37 = (IPC::Encoder *)v25;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v20;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v19;
  IPC::Connection::sendMessageImpl(v24, (uint64_t *)&v37, 0, 0);
  result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v28, v29);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcess::ensureNetworkProcessConnection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(a1 + 8);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v1 + 112));
  v3 = result;
  v5 = v4;
  v6 = *(_QWORD *)(v1 + 112);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      result = (_QWORD *)WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess((WebKit::WebPage *)v3[1]);
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GPUProcessConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::ConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::ConnectionHandle &&,0ul,1ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  return IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, a2[1]);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (uint64_t *)(v2 + 8 * i);
      v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v19 = -1640531527;
          v20 = 0;
          v21 = 0;
          WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v19, v10 + 8);
          v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v19);
          v14 = 0;
          do
          {
            v15 = v13 & v12;
            v13 = ++v14 + v15;
          }
          while (*(_QWORD *)(v11 + 8 * v15));
          v16 = (uint64_t *)(v11 + 8 * v15);
          *v16 = 0;
          v17 = *v9;
          *v9 = 0;
          *v16 = v17;
          v18 = *v9;
          *v9 = 0;
          if (v18)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v7);
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34E0900;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34E0900;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v3 + 672))
      v4 = *(_QWORD *)(v3 + 664);
    else
      v4 = 0;
    v7 = 134218240;
    v8 = v3;
    v9 = 2048;
    v10 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::prepareToSuspend: Process is ready to suspend", (uint8_t *)&v7, 0x16u);
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::markAllLayersVolatile(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0928;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::markAllLayersVolatile(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34E0928;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcess::markAllLayersVolatile(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_1ECE71640;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v3 + 672))
        v5 = *(_QWORD *)(v3 + 664);
      else
        v5 = 0;
      v7 = *(_QWORD *)(a1 + 24);
      v9 = 134218496;
      v10 = v3;
      v11 = 2048;
      v12 = v5;
      v13 = 2048;
      v14 = v7;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::markAllLayersVolatile: Successfuly marked layers as volatile for webPageID=%llu", (uint8_t *)&v9, 0x20u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
  {
    if (*(_BYTE *)(v3 + 672))
      v6 = *(_QWORD *)(v3 + 664);
    else
      v6 = 0;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = 134218496;
    v10 = v3;
    v11 = 2048;
    v12 = v6;
    v13 = 2048;
    v14 = v8;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] WebProcess::markAllLayersVolatile: Failed to mark layers as volatile for webPageID=%llu", (uint8_t *)&v9, 0x20u);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::PrewarmInformation const&>,0ul,1ul>(IPC::Encoder *a1, _QWORD *a2)
{
  IPC::ArgumentCoder<WebCore::RegistrableDomain,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::encode(a1, a2[1]);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v9 = result & v7;
  v10 = (uint64_t *)(v6 + 8 * (result & v7));
  v11 = *v10;
  v12 = *a3;
  if (*v10)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == v12)
      {
        v23 = *a2;
        if (*a2)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 8 * v24;
        goto LABEL_12;
      }
      if (v11 == -1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (uint64_t *)(v6 + 8 * v9);
      v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v10 = v21;
    }
  }
  *v10 = v12;
  v13 = *a2;
  if (*a2)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v10);
    v10 = (uint64_t *)result;
    v15 = *a2;
    if (*a2)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_24;
LABEL_11:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(*a1, *v13);
        *v15 = v14;
        if (v13 == a3)
          v11 = v15;
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  return a1 + 8 * v8;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v15 = 0;
    v13 = 0;
    v16 = v7;
    do
    {
      v17 = (_QWORD *)(v6 + 16 * v15);
      if (*v17 != -1)
      {
        if (*v17)
        {
          v22 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, (_QWORD *)(v6 + 16 * v15));
          v23 = v6 + 16 * v15;
          v24 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              v27 = v22;
              WTF::fastFree((WTF *)v24, v10);
              v22 = v27;
            }
          }
          if (v17 == a3)
            v13 = v22;
        }
        else
        {
          v18 = v6 + 16 * v15;
          v19 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v10);
            }
          }
        }
      }
      ++v15;
    }
    while (v15 != v16);
    goto LABEL_23;
  }
  v13 = 0;
  result = 0;
  if (v6)
  {
LABEL_23:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  result = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  v28 = v23 + 16 * v26;
  v27 = 1;
LABEL_29:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  const char ***v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char ***v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  const char ***v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(const char ****)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v21);
            v22 = *(WTF::StringImpl **)v20;
            *(_QWORD *)v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v8);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *(_QWORD *)v20 = v23;
          v24 = v4 + 16 * v9;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v25;
          v26 = *(const char ****)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v26);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_33;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_32;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(const char ****)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v13);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_33;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_32:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_33;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_33:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(_QWORD *)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *(uint64_t **)(a2 + 16));
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::SecurityOriginData const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, (uint64_t)a2[1]);
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_0,WTF::Ref<WebCore::AudioHardwareListener,WTF::RawPtrTraits<WebCore::AudioHardwareListener>,WTF::DefaultRefDerefTraits<WebCore::AudioHardwareListener>>,WebCore::AudioHardwareListener::Client &>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  result = WebKit::RemoteAudioHardwareListener::RemoteAudioHardwareListener(v2);
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_1,WTF::RefPtr<WebCore::RemoteCommandListener,WTF::RawPtrTraits<WebCore::RemoteCommandListener>,WTF::DefaultRefDerefTraits<WebCore::RemoteCommandListener>>,WebCore::RemoteCommandListenerClient &>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = WTF::fastMalloc((WTF *)0x78);
  result = WebKit::RemoteRemoteCommandListener::RemoteRemoteCommandListener(v2);
  *a1 = result;
  return result;
}

void std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E34E09C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34E09C8;
  a2[1] = v2;
  return result;
}

WebCore::VP9TestingOverrides *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  WebKit::GPUProcessConnection *v3;

  v2 = *a2;
  v3 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(*(WebKit::WebProcess **)(a1 + 8));
  return WebKit::GPUProcessConnection::updateMediaConfiguration(v3, v2);
}

void std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E34E0A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34E0A10;
  a2[1] = v2;
  return result;
}

WebCore::VP9TestingOverrides *std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  WebKit::GPUProcessConnection *v3;

  v2 = *a2;
  v3 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(*(WebKit::WebProcess **)(a1 + 8));
  return WebKit::GPUProcessConnection::updateMediaConfiguration(v3, v2);
}

unsigned int *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebTransportSession&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *result;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 32), a3 + 24);
    v21 = *(unsigned int **)(a3 + 32);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    result = (unsigned int *)v16[1];
    v16[1] = (uint64_t)v21;
    if (result)
    {
      do
      {
        v24 = __ldaxr(result);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, result));
      if (!v25)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
      }
    }
    v26 = *a1;
    if (*a1)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v29 = *a1;
    if (*a1)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
      {
LABEL_28:
        result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v16);
        v16 = (uint64_t *)result;
        v29 = *a1;
        if (*a1)
          v32 = *(unsigned int *)(v29 - 4);
        else
          v32 = 0;
      }
    }
    else if (3 * v32 <= 4 * v31)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v29 + 16 * v32;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v28;
  *(_BYTE *)(a4 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 32), a3 + 24);
  v34 = *(unsigned int **)(a3 + 32);
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v16 = *(uint64_t **)a4;
  }
  result = (unsigned int *)v16[1];
  v16[1] = (uint64_t)v34;
  if (result)
  {
    do
    {
      v36 = __ldaxr(result);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, result));
    if (!v37)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v33);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::CanMakePaymentsWithActiveCard,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E0A58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::CanMakePaymentsWithActiveCard,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E0A58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::CanMakePaymentsWithActiveCard,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::OpenPaymentSetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E0A80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::OpenPaymentSetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E0A80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::OpenPaymentSetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E0AA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E0AA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef cf;
  char v11;
  const void *v12;
  char v13;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebKit::PaymentSetupFeatures>(a2, (uint64_t)&v12);
    if (v13)
    {
      cf = v12;
      v11 = 1;
      WebKit::PaymentSetupFeatures::operator WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((id *)&cf, (uint64_t)&v12);
      v4 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, const void **))(*(_QWORD *)v4 + 16))(v4, &v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
      if (v11)
      {
        v6 = cf;
        cf = 0;
        if (v6)
          CFRelease(v6);
      }
    }
    else
    {
      v7 = *a2;
      v8 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v9 = a2[3];
      if (v9 && v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      IPC::Connection::cancelReply<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>((uint64_t *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::WebPaymentCoordinatorProxy::GetSetupFeatures,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  _BYTE v6[16];

  cf = 0;
  WebKit::PaymentSetupFeatures::operator WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((id *)&cf, (uint64_t)v6);
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void IPC::Decoder::decode<WebKit::PaymentSetupFeatures>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::PaymentSetupFeatures,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::BeginApplePaySetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E0AD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::BeginApplePaySetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E0AD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPaymentCoordinatorProxy::BeginApplePaySetup,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_DWORD *WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref(_DWORD *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebKit::WebAutomationDOMWindowObserver::~WebAutomationDOMWindowObserver((WebKit::WebAutomationDOMWindowObserver *)(result - 4), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

unsigned int **WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (WTF *)v3;
      WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7, a2);
    }
  }
  return a1;
}

unsigned __int8 **WTF::Detail::CallableWrapper<WebKit::WebCacheStorageConnection::connection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  unsigned __int8 **v4;
  unsigned __int8 ***v5;
  unsigned __int8 *v6;
  int v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  int v15;
  unsigned __int8 **result;
  int v17;
  WebKit::WebProcess *v18;

  v2 = *(_QWORD *)(a1 + 8);
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(unsigned __int8 ***)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v5 = *(unsigned __int8 ****)(a1 + 16);
  if (v4)
  {
    v6 = *v4;
    if (__ldaxr(*v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v6);
LABEL_8:
    ++*((_QWORD *)v6 + 1);
    v8 = __ldxr(v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
LABEL_13:
  v9 = *v5;
  *v5 = v4;
  if (v9)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v9);
  v10 = (unsigned __int8 *)(v2 + 24);
  if (__ldaxr((unsigned __int8 *)(v2 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEABB3C](v2 + 24);
LABEL_19:
  v12 = **(unsigned __int8 ****)(a1 + 16);
  if (!v12)
    goto LABEL_29;
  v13 = *v12;
  if (__ldaxr(*v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEABB3C](v13);
LABEL_24:
  ++*((_QWORD *)v13 + 1);
  v15 = __ldxr(v13);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v13))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_29:
  result = *(unsigned __int8 ***)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v12;
  if (result)
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(result);
  v17 = __ldxr(v10);
  if (v17 != 1)
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
  }
  if (__stlxr(0, v10))
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0B20;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0B20;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E0B48;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 88);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 88);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E0168[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 88) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0B48;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0B48;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageOpenCache,WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned __int8 v25;
  _BYTE v26[23];
  char v27;
  _BYTE v28[23];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(result + 8);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      v5 = v3[1];
      if (v5 <= v3[2] - v4)
      {
        v13 = 0;
        v14 = 0;
        *v3 = 0;
        v3[1] = 0;
        v15 = v3[3];
        if (v15)
        {
          if (!v5
            || (((*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15),
                 v21 = *v3,
                 v22 = v3[1],
                 v23 = v3[3],
                 *v3 = 0,
                 v3[1] = 0,
                 v23)
              ? (v24 = v22 == 0)
              : (v24 = 1),
                v24))
          {
            v13 = 0;
            v14 = 0;
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
            v14 = *v3;
            v13 = v3[1];
          }
        }
      }
      else
      {
        v6 = (unsigned __int8 *)v3[2];
        v3[2] = (uint64_t)(v6 + 1);
        v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::decode(v3, (uint64_t)&v25);
            if (v27)
            {
              v8 = 0;
              result = v25;
              *(_OWORD *)v28 = *(_OWORD *)v26;
              *(_QWORD *)&v28[15] = *(_QWORD *)&v26[15];
LABEL_13:
              *(_OWORD *)(a2 + 1) = *(_OWORD *)v28;
              *(_QWORD *)(a2 + 16) = *(_QWORD *)&v28[15];
              *(_BYTE *)a2 = result;
              goto LABEL_14;
            }
            v18 = *v3;
            v19 = v3[1];
            *v3 = 0;
            v3[1] = 0;
            v20 = v3[3];
            if (v20 && v19)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
          }
          else
          {
            result = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
            if ((unsigned __int16)result >= 0x100u)
            {
              v8 = 1;
              goto LABEL_13;
            }
          }
          goto LABEL_9;
        }
        v13 = v5;
        v14 = v4;
      }
      *v3 = 0;
      v3[1] = 0;
      v16 = v3[3];
      if (v16)
        v17 = v13 == 0;
      else
        v17 = 1;
      if (!v17)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
LABEL_9:
      v9 = *v3;
      v10 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      result = v3[3];
      if (result && v10)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
        v11 = *v3;
        v12 = v3[1];
        result = v3[3];
        *v3 = 0;
        v3[1] = 0;
        if (result && v12)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
      }
      else
      {
        *v3 = 0;
        v3[1] = 0;
      }
    }
  }
  *(_BYTE *)a2 = 4;
  v8 = 1;
LABEL_14:
  *(_DWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        v8 = *v18;
        v7 = v18[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 7)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    goto LABEL_8;
  }
  v6 = 1;
LABEL_8:
  v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0B70;
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0B70;
  WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E0B98;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 64);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 64);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E0208[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 64) = 2;
  result = (WTF::Lock *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0B98;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0B98;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveCache,WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error>>::call@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (uint64_t *)result[1];
  if (!v3 || (v4 = *v3) == 0)
  {
LABEL_15:
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 4) = 1;
    return result;
  }
  v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    v15 = 0;
    v16 = 0;
    *v3 = 0;
    v3[1] = 0;
    v17 = v3[3];
    if (v17)
    {
      if (!v5
        || (((*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17),
             v21 = *v3,
             v22 = v3[1],
             v23 = v3[3],
             *v3 = 0,
             v3[1] = 0,
             v23)
          ? (v24 = v22 == 0)
          : (v24 = 1),
            v24))
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
        v16 = *v3;
        v15 = v3[1];
      }
    }
LABEL_22:
    *v3 = 0;
    v3[1] = 0;
    v18 = v3[3];
    if (v18)
      v19 = v15 == 0;
    else
      v19 = 1;
    if (v19)
      goto LABEL_10;
    goto LABEL_30;
  }
  v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  if (*v6 >= 2u)
  {
    v15 = v5;
    v16 = v4;
    goto LABEL_22;
  }
  if (!*v6)
  {
    result = (_QWORD *)IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
    if ((unsigned __int16)result >= 0x100u)
    {
      v9 = (char)result;
      v8 = 0x100000000;
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  if (v5 <= (unint64_t)&v6[-v4 + 1])
  {
    v15 = 0;
    v16 = 0;
    *v3 = 0;
    v3[1] = 0;
    v20 = v3[3];
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v15 = 0;
      v25 = *v3;
      v26 = v3[1];
      v27 = v3[3];
      *v3 = 0;
      v3[1] = 0;
      v16 = 0;
      if (v27)
      {
        if (v26)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
          v16 = *v3;
          v15 = v3[1];
        }
      }
    }
LABEL_28:
    *v3 = 0;
    v3[1] = 0;
    v18 = v3[3];
    if (!v18 || !v15)
    {
LABEL_10:
      v10 = *v3;
      v11 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      result = (_QWORD *)v3[3];
      if (result)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (!v12)
      {
        (*(void (**)(_QWORD *, uint64_t))(*result + 16))(result, v10);
        v13 = *v3;
        v14 = v3[1];
        result = (_QWORD *)v3[3];
        *v3 = 0;
        v3[1] = 0;
        if (result)
        {
          if (v14)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v13);
        }
      }
      goto LABEL_15;
    }
LABEL_30:
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
    goto LABEL_10;
  }
  v3[2] = (uint64_t)(v6 + 2);
  v7 = v6[1];
  if (v7 >= 2)
  {
    v15 = v5;
    v16 = v4;
    goto LABEL_28;
  }
  v8 = 0;
  v9 = v7 != 0;
LABEL_17:
  *(_QWORD *)a2 = v9 | (unint64_t)v8;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0BC0;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0BC0;
  WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E0BE8;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 88);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 88);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E02A8[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 88) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0BE8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0BE8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageAllCaches,WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::call@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  int v27;
  char v28;
  _QWORD v29[3];
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = (uint64_t *)result[1];
  if (!v3)
    goto LABEL_16;
  v4 = *v3;
  if (!*v3)
    goto LABEL_16;
  v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    v17 = 0;
    v18 = 0;
    *v3 = 0;
    v3[1] = 0;
    v19 = v3[3];
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *v3;
        v17 = v3[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    v5 = 0;
    v4 = 0;
    *v3 = 0;
    v3[1] = 0;
    v20 = v3[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v4 = *v3;
        v5 = v3[1];
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
    }
    goto LABEL_30;
  }
  v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_30:
    *v3 = 0;
    v3[1] = 0;
    v21 = v3[3];
    if (v21)
      v22 = v5 == 0;
    else
      v22 = 1;
    if (!v22)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v4, v5);
    goto LABEL_9;
  }
  if (!v7)
  {
    v10 = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
    if (v10 < 0x100u)
      goto LABEL_9;
    LOBYTE(v29[0]) = v10;
    v30 = 1;
LABEL_19:
    v31 = 1;
    v26[0] = 0;
    v27 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)v29);
    v28 = 1;
    if (!v31)
      goto LABEL_22;
    if (v30 == -1)
      goto LABEL_22;
    ((void (*)(uint64_t *, _QWORD *))off_1E34E02C0[v30])(&v32, v29);
    if (v28)
      goto LABEL_22;
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfos,void>::decode(v3, (uint64_t)&v32);
  if (v35
    || (v23 = *v3, v24 = v3[1], *v3 = 0, v3[1] = 0, (v25 = v3[3]) != 0)
    && v24
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23), v35))
  {
    v29[0] = v32;
    v9 = v33;
    v32 = 0;
    v33 = 0;
    v29[1] = v9;
    v29[2] = v34;
    v30 = 0;
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v8);
    goto LABEL_19;
  }
LABEL_9:
  v11 = *v3;
  v12 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v13 = v3[3];
  if (v13)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (!v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  v26[0] = 0;
  v28 = 0;
LABEL_15:
  v15 = *v3;
  v16 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  result = (_QWORD *)v3[3];
  if (!result
    || !v16
    || (result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v15), !v28))
  {
LABEL_16:
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
LABEL_22:
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  result = (_QWORD *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v26);
  if (v28)
  {
    if (v27 != -1)
      return (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E34E02C0[v27])(v29, v26);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0C10;
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0C10;
  WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E0C38;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 80);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 80);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E0368[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 80) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0C38;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0C38;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::call@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  void *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  unsigned __int16 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BYTE v23[16];
  int v24;
  char v25;
  _QWORD v26[2];
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = (uint64_t *)result[1];
  if (!v3)
    goto LABEL_16;
  v4 = (void *)*v3;
  if (!*v3)
    goto LABEL_16;
  v5 = v3[1];
  if (v5 <= v3[2] - (uint64_t)v4)
  {
    v17 = 0;
    v18 = 0;
    *v3 = 0;
    v3[1] = 0;
    v19 = v3[3];
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = (void *)*v3;
        v17 = v3[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    v5 = 0;
    v4 = 0;
    *v3 = 0;
    v3[1] = 0;
    v20 = v3[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v4 = (void *)*v3;
        v5 = v3[1];
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
    }
    goto LABEL_30;
  }
  v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_30:
    *v3 = 0;
    v3[1] = 0;
    v21 = v3[3];
    if (v21)
      v22 = v5 == 0;
    else
      v22 = 1;
    if (!v22)
      (*(void (**)(uint64_t, void *, unint64_t))(*(_QWORD *)v21 + 16))(v21, v4, v5);
    goto LABEL_9;
  }
  if (!v7)
  {
    v10 = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(v3);
    if (v10 >= 0x100u)
    {
      LOBYTE(v26[0]) = v10;
      v27 = 1;
      goto LABEL_19;
    }
LABEL_9:
    v11 = (void *)*v3;
    v12 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v13 = v3[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v13 + 16))(v13, v11);
    v23[0] = 0;
    v25 = 0;
LABEL_15:
    v15 = (void *)*v3;
    v16 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    result = (_QWORD *)v3[3];
    if (result)
    {
      if (v16)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, void *))(*result + 16))(result, v15);
        if (v25)
          goto LABEL_22;
      }
    }
LABEL_16:
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, v4, (uint64_t)&v29);
  if (!v31)
    goto LABEL_9;
  v26[0] = v29;
  v9 = v30;
  v29 = 0;
  v30 = 0;
  v26[1] = v9;
  v27 = 0;
  WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
LABEL_19:
  v28 = 1;
  v23[0] = 0;
  v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)v26);
  v25 = 1;
  if (v28)
  {
    if (v27 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *))off_1E34E0380[v27])(&v29, v26);
      if (!v25)
        goto LABEL_15;
    }
  }
LABEL_22:
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = (_QWORD *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v23);
  if (v25)
  {
    if (v24 != -1)
      return (_QWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E34E0380[v24])(v26, v23);
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  WTF *v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  __int128 v29;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  WTF *v34[2];
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint8_t buf[16];
  int v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E34E0410;
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  v6 = (unsigned __int8 *)(v4 + 48);
  *(_DWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = v4 + 104;
  *(_QWORD *)(v4 + 96) = 1;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_WORD *)(v4 + 128) = 0;
  v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (!*v7)
    goto LABEL_46;
  v8 = v7;
  if (v7[16] < 4u)
    goto LABEL_46;
  WTF::String::String((WTF::String *)&v36, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v35, v4);
  *(_QWORD *)buf = v36;
  v34[0] = v35;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v34, &v37);
  if (v37)
  {
    v11 = v35;
    v35 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v36;
    v36 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *((_QWORD *)v8 + 4);
    v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v14)
    {
      WTF::String::utf8();
      v16 = v34[0] ? (char *)v34[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v14 = v34[0];
      v34[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          v14 = (WTF *)WTF::fastFree(v14, v15);
        else
          --*(_DWORD *)v14;
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v18 = *v17;
        if ((v18 & 1) != 0)
          break;
        v19 = __ldaxr(v17);
        if (v19 == v18)
        {
          if (!__stxr(v18 | 1, v17))
          {
            v33 = a1;
            v20 = WTF::Logger::observers(v14);
            v21 = *(unsigned int *)(v20 + 12);
            if ((_DWORD)v21)
            {
              v22 = *(uint64_t **)v20;
              v23 = *(_QWORD *)v20 + 8 * v21;
              do
              {
                v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                v39 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v40, v4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v34, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, v8, 4, v34);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v25);
                for (i = 24; i != -8; i -= 16)
                {
                  v27 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            v28 = __ldxr(v17);
            if (v28 == 1)
            {
              a1 = v33;
              if (!__stlxr(0, v17))
                break;
            }
            else
            {
              __clrex();
              a1 = v33;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v7 = (unsigned __int8 *)v37;
    v37 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v7 -= 2;
    }
LABEL_46:
    *(_QWORD *)a1 = v4;
    v29 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 8) = v29;
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_50;
    }
    v7 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v6);
LABEL_50:
    v31 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
    if (*v31)
    {
      if (v31[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v31, a2, " runSynchronouslyOnTarget ", v4);
    }
    atomic_store(0, (unsigned __int8 *)(v4 + 129));
    v32 = __ldxr(v6);
    if (v32 == 1)
    {
      if (!__stlxr(0, v6))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    return a1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0C60;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0C60;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (WTF::NativePromiseBase *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E0C88;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

unsigned __int8 *WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleWithFunction<std::enable_if<true,void>>(WTF::NativePromiseBase *a1, _QWORD *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v3;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 *result;
  BOOL v12;
  unsigned __int8 *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t j;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v5 = (uint64_t *)a1;
  v6 = (unsigned __int8 *)(v3 + 48);
  if (__ldaxr((unsigned __int8 *)(v3 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v3 + 48);
LABEL_7:
  v9 = *(_DWORD *)(v3 + 80);
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
LABEL_11:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v8 = *v5;
  if (v9)
  {
LABEL_13:
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v12 = result[16] >= 4u;
    else
      v12 = 0;
    if (v12)
    {
      v13 = result;
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v8);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
      v15 = v68;
      v68 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v18 = v69;
      v69 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v14);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v70;
      v70 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v14);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *((_QWORD *)v13 + 4);
      v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v21)
      {
        WTF::String::utf8();
        v23 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v23;
        _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v21 = v66[0];
        v66[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            v21 = (WTF *)WTF::fastFree(v21, v22);
          else
            --*(_DWORD *)v21;
        }
      }
      if (*v13 && v13[16] >= 4u)
      {
        v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v29 = *v28;
          if ((v29 & 1) != 0)
            break;
          v30 = __ldaxr(v28);
          if (v30 == v29)
          {
            if (!__stxr(v29 | 1, v28))
            {
              v31 = WTF::Logger::observers(v21);
              v32 = *(unsigned int *)(v31 + 12);
              if ((_DWORD)v32)
              {
                v33 = *(uint64_t **)v31;
                v34 = *(_QWORD *)v31 + 8 * v32;
                do
                {
                  v35 = *v33;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v8);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                  for (i = 40; i != -8; i -= 16)
                  {
                    v38 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
                  }
                  ++v33;
                }
                while (v33 != (uint64_t *)v34);
              }
              v39 = __ldxr(v28);
              if (v39 == 1)
              {
                if (!__stlxr(0, v28))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v64;
      v64 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  v16 = (unsigned __int8 *)(v8 + 48);
  v64 = (WTF::StringImpl *)(v8 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v8 + 48)))
  {
    __clrex();
LABEL_40:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_41;
  }
  if (__stxr(1u, v16))
    goto LABEL_40;
LABEL_41:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v8);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v46 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v47 = *v46;
          if ((v47 & 1) != 0)
            break;
          v48 = __ldaxr(v46);
          if (v48 == v47)
          {
            if (!__stxr(v47 | 1, v46))
            {
              v62 = a2;
              v49 = WTF::Logger::observers(v43);
              v50 = *(unsigned int *)(v49 + 12);
              if ((_DWORD)v50)
              {
                v51 = *(uint64_t **)v49;
                v52 = *(_QWORD *)v49 + 8 * v50;
                do
                {
                  v53 = *v51;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v8);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v53 + 16))(v53, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v54);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v56 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 2)
                        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v56 -= 2;
                    }
                  }
                  ++v51;
                }
                while (v51 != (uint64_t *)v52);
              }
              v57 = __ldxr(v46);
              if (v57 == 1)
              {
                a2 = v62;
                if (!__stlxr(0, v46))
                  break;
              }
              else
              {
                __clrex();
                a2 = v62;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v58 = v70;
      v70 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
  }
  v59 = *(unsigned int *)(v8 + 80);
  if ((_DWORD)v59 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E0428[v59])(buf, v8 + 56);
  v60 = *a2;
  *a2 = 0;
  *(_QWORD *)(v8 + 56) = v60;
  *(_DWORD *)(v8 + 80) = 2;
  result = (unsigned __int8 *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v8, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = (unsigned __int8 *)v64;
    v61 = __ldxr((unsigned __int8 *)v64);
    if (v61 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0C88;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0C88;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRemoveRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _BYTE v4[16];
  int v5;
  char v6;
  char v7;

  v3 = *(uint64_t **)(result + 8);
  if (v3
    && *v3
    && (result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>>((uint64_t)v4, v3), v6))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34E0440[v5])(&v7, v4);
    }
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned __int8 v47;
  char v48;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v36 = 0;
    v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = *a2;
        v36 = a2[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
    goto LABEL_42;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  v9 = v5 + v7 + 1;
  a2[2] = v9;
  if (!v5)
  {
    v36 = v6;
    v37 = 0;
LABEL_42:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v39 = a2[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_43:
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
      goto LABEL_16;
    goto LABEL_19;
  }
  v10 = *v8;
  if (v10 >= 2)
    goto LABEL_43;
  if (!v10)
  {
    v21 = IPC::Decoder::decode<WebCore::DOMCacheEngine::Error>(a2);
    if (v21 < 0x100u)
      goto LABEL_19;
    LOBYTE(v43) = v21;
    v34 = 1;
    goto LABEL_35;
  }
  v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v6 >= v11 && v6 - v11 > 7)
  {
    v13 = (unint64_t *)(v5 + v11);
    v16 = *v13;
    v14 = v13 + 1;
    v15 = v16;
    a2[2] = (uint64_t)v14;
    if (v16)
    {
      if (v15 >> 61)
      {
        v17 = v6;
        v18 = v5;
        goto LABEL_13;
      }
      v29 = (((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
      v30 = 8 * v15;
      if (v6 < v29 || v6 - v29 < v30)
      {
        v17 = 0;
        v18 = 0;
        *a2 = 0;
        a2[1] = 0;
        v42 = a2[3];
        if (!v42)
          goto LABEL_13;
LABEL_50:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v5);
        v18 = *a2;
        v17 = a2[1];
        goto LABEL_13;
      }
      v32 = v5 + v29;
      a2[2] = v5 + v29 + v30;
      if (v15 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197495B90);
      }
      v28 = WTF::fastMalloc((WTF *)(8 * v15));
      v33 = 0;
      do
      {
        *(_QWORD *)(v28 + v33) = *(_QWORD *)(v32 + v33);
        v33 += 8;
      }
      while (v30 != v33);
    }
    else
    {
      v28 = 0;
    }
    v34 = 0;
    v43 = v28;
    v44 = v15;
    v45 = v15;
LABEL_35:
    v46 = v34;
    v47 = 1;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)&v43);
    v35 = v47;
    *(_BYTE *)(a1 + 24) = 1;
    if (!v35)
      return result;
    if (v46 == -1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t *))off_1E34E0440[v46])(&v48, &v43);
    if (*(_BYTE *)(a1 + 24))
      return result;
    goto LABEL_21;
  }
  v17 = 0;
  v18 = 0;
  *a2 = 0;
  a2[1] = 0;
  v40 = a2[3];
  if (v40)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
    v17 = 0;
    v5 = *a2;
    v41 = a2[1];
    v42 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    v18 = 0;
    if (v42)
    {
      if (v41)
        goto LABEL_50;
    }
  }
LABEL_13:
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19)
  {
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v18, v17);
      v5 = *a2;
      v6 = a2[1];
      v20 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v20)
      {
LABEL_16:
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
      }
    }
  }
LABEL_19:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (v24 && v23)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_21:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0CB0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0CB0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (WTF::NativePromiseBase *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E0CD8;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0CD8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0CD8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStoragePutRecords,WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _BYTE v4[16];
  int v5;
  char v6;
  char v7;

  v3 = *(uint64_t **)(result + 8);
  if (v3
    && *v3
    && (result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>>((uint64_t)v4, v3), v6))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34E0440[v5])(&v7, v4);
    }
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t result;
  unsigned int v22;
  __int16 v23;
  char v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (__int128 *)(v6 + 24 * v11);
      if (*((_QWORD *)v14 + 1) != -1 && *v14 != 0)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v22 = -1640531527;
        v23 = 0;
        v24 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v22, (_QWORD *)(v6 + 24 * v11));
        v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
        v18 = 0;
        do
        {
          v19 = v15 + 24 * (v17 & v16);
          v17 = ++v18 + (v17 & v16);
        }
        while (*(_OWORD *)v19 != 0);
        v20 = *v14;
        *(_QWORD *)(v19 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v19 = v20;
        if (v14 == a3)
          v12 = v19;
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,unsigned int>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,unsigned int,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 16;
    do
    {
      *(_DWORD *)(v10 + 64) = 0;
      *(_OWORD *)(v10 + 32) = 0uLL;
      *(_OWORD *)(v10 + 48) = 0uLL;
      *(_OWORD *)v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      v10 += 72;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (!v5)
  {
    v12 = 0;
    if (!v4)
      return v12;
    goto LABEL_33;
  }
  v11 = 0;
  v12 = 0;
  v13 = v5;
  do
  {
    v14 = (unsigned int *)(v4 + 72 * v11);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
    if ((v15 & 1) == 0)
    {
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      {
        v16 = v14[14];
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, unsigned int *))off_1E34E0750[v16])(&v33, v14 + 8);
        v14[14] = -1;
        v17 = v14[6];
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, uint64_t))off_1E34E0750[v17])(&v34, v4 + 72 * v11);
        v14[6] = -1;
      }
      else
      {
        v18 = *a1;
        v32 = v12;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        v20 = WTF::computeHash<WebCore::ClientOrigin>(v4 + 72 * v11);
        v21 = 0;
        do
        {
          v22 = v20 & v19;
          v23 = v18 + 72 * (v20 & v19);
          v24 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
          v20 = ++v21 + v22;
        }
        while (!v24);
        v25 = *(unsigned int *)(v23 + 56);
        if ((_DWORD)v25 != -1)
          ((void (*)(char *, uint64_t))off_1E34E0750[v25])(&v35, v23 + 32);
        *(_DWORD *)(v23 + 56) = -1;
        v26 = *(unsigned int *)(v23 + 24);
        if ((_DWORD)v26 != -1)
          ((void (*)(char *, uint64_t))off_1E34E0750[v26])(&v36, v18 + 72 * v22);
        *(_BYTE *)v23 = 0;
        *(_DWORD *)(v23 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 72 * v22, v4 + 72 * v11);
        *(_BYTE *)(v23 + 32) = 0;
        *(_DWORD *)(v23 + 56) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v23 + 32, (uint64_t)(v14 + 8));
        *(_DWORD *)(v18 + 72 * v22 + 64) = *(_DWORD *)(v4 + 72 * v11 + 64);
        v27 = v14[14];
        if ((_DWORD)v27 != -1)
          ((void (*)(char *, unsigned int *))off_1E34E0750[v27])(&v37, v14 + 8);
        v14[14] = -1;
        v28 = v14[6];
        v12 = v32;
        if ((_DWORD)v28 != -1)
          ((void (*)(char *, uint64_t))off_1E34E0750[v28])(&v38, v4 + 72 * v11);
        v14[6] = -1;
        if (v14 == a3)
          v12 = v23;
      }
    }
    ++v11;
  }
  while (v11 != v13);
  if (v4)
LABEL_33:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0D00;
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0D00;
  WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E0D28;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 64);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 64);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E04E8[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 64) = 2;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0D28;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0D28;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 8);
  if (v2 && *v2)
    *a2 = 0;
  else
    *a2 = 260;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E0D50;
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E0D50;
  WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E0D78;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 72);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 72);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E0568[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 72) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::String,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E0D78;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::String,WebCore::DOMCacheEngine::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E0D78;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::WebCacheStorageConnection::PromiseConverter,Messages::NetworkStorageManager::CacheStorageRepresentation,WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::String,WebCore::DOMCacheEngine::Error>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v4;
  char v5;

  result = *(uint64_t **)(a1 + 8);
  if (result && *result && (result = IPC::Decoder::decode<std::tuple<WTF::String>>(result, (uint64_t)&v4), v5))
  {
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 8) = 1;
  }
  return result;
}

uint64_t WebKit::WebDatabaseProvider::getOrCreate@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5[2];
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a1;
  {
    WebKit::databaseProviders(void)::databaseProviders = 0;
  }
  v5[0] = &v7;
  v5[1] = &v8;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::ensure<WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0>(&WebKit::databaseProviders(void)::databaseProviders, &v8, v5, (uint64_t)v6);
  v4 = v7;
  if (!v7)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v6[0] + 8) + 8);
    ++*(_DWORD *)(v4 + 8);
  }
  *a2 = v4;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::ensure<WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a2;
  if (*v12)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v13 == v14)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1)
        v23 = v12;
      v11 = (v11 + v24) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v14 = *a2;
      v12 = v23;
    }
  }
  result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::translate<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0>(v12, v14, a3);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v12);
    v12 = (_QWORD *)result;
    v17 = *a1;
    if (*a1)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_24;
LABEL_11:
  v21 = v17 + 16 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

void WebKit::WebDatabaseProvider::~WebDatabaseProvider(WebKit::WebDatabaseProvider *this, void *a2)
{
  char *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  {
    v3 = &_MergedGlobals_106;
    if (WebKit::databaseProviders(void)::databaseProviders)
    {
      v4 = *((_QWORD *)this + 3);
      v5 = *(_DWORD *)(WebKit::databaseProviders(void)::databaseProviders - 8);
      v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(WebKit::databaseProviders(void)::databaseProviders + 16 * v9);
      if (v10 != v4)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(_QWORD *)(WebKit::databaseProviders(void)::databaseProviders + 16 * v9);
          ++v11;
          if (v10 == v4)
            goto LABEL_9;
        }
        v9 = *(unsigned int *)(WebKit::databaseProviders(void)::databaseProviders - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(WebKit::databaseProviders(void)::databaseProviders - 4))
      {
        v12 = (_QWORD *)(WebKit::databaseProviders(void)::databaseProviders + 16 * v9);
        v13 = (unsigned int *)v12[1];
        *v12 = -1;
        v12[1] = 0;
        if (v13)
        {
          do
          {
            v16 = __ldaxr(v13);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v13));
          if (!v17)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, a2);
            v3 = &_MergedGlobals_106;
          }
        }
        ++*(_DWORD *)(*((_QWORD *)v3 + 312) - 16);
        v14 = *((_QWORD *)v3 + 312);
        if (v14)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v18 = *((_QWORD *)v3 + 312);
        if (v18)
        {
          v19 = 6 * *(_DWORD *)(v18 - 12);
          v20 = *(_DWORD *)(v18 - 4);
          if (v19 < v20 && v20 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&WebKit::databaseProviders(void)::databaseProviders, v20 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebKit::databaseProviders(void)::databaseProviders = 0;
  }
  v22 = *((_QWORD *)this + 2);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 0;
    v23 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WebCore::DatabaseProvider::~DatabaseProvider(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebDatabaseProvider::~WebDatabaseProvider(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebDatabaseProvider::idbConnectionToServerForSession(WebKit::WebProcess *a1)
{
  WebKit::WebProcess *v1;
  WebKit::NetworkProcessConnection *v2;

  v1 = WebKit::WebProcess::singleton(a1);
  v2 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection(v1);
  return *(_QWORD *)(WebKit::NetworkProcessConnection::idbConnectionToServer(v2) + 32);
}

uint64_t WebKit::WebIDBConnectionToServer::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v3 + 24) = 1;
  *(_QWORD *)v3 = off_1E34E0E48;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = &unk_1E34E0F50;
  result = WebCore::IDBClient::IDBConnectionToServer::create();
  *a1 = v3;
  return result;
}

void WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer(WebKit::WebIDBConnectionToServer *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(v3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer(WebKit::WebIDBConnectionToServer *this, void *a2)
{
  WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer((WebKit::WebIDBConnectionToServer *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer((WebKit::WebIDBConnectionToServer *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebIDBConnectionToServer::messageSenderConnection(WebKit::WebIDBConnectionToServer *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t `non-virtual thunk to'WebKit::WebIDBConnectionToServer::messageSenderConnection(WebKit::WebIDBConnectionToServer *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteDatabase(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBOpenRequestData *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 16;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 543;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::openDatabase(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBOpenRequestData *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 16;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 568;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::abortTransaction(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 16;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 520;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::commitTransaction(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 536;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, (uint64_t *)a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::didFinishHandlingVersionChangeTransaction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 547;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::createObjectStore(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 539;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBObjectStoreInfo,void>::encode((IPC::Encoder *)v7, (uint64_t *)a3);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteObjectStore(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 545;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a3);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::renameObjectStore(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, const WTF::String *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  _QWORD v11[3];
  IPC::Encoder *v12;

  v11[0] = a2;
  v11[1] = a3;
  v11[2] = a4;
  v4 = (char *)this + 16;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 575;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::IDBRequestData const&,unsigned long long,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IDBRequestData const&,unsigned long long,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v6, (uint64_t)v11);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::clearObjectStore(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 533;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::createIndex(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 538;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBIndexInfo,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteIndex(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, const WTF::String *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  _QWORD v11[3];
  IPC::Encoder *v12;

  v11[0] = a2;
  v11[1] = a3;
  v11[2] = a4;
  v4 = (char *)this + 16;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 544;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::IDBRequestData const&,unsigned long long,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IDBRequestData const&,unsigned long long,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v6, (uint64_t)v11);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::renameIndex(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, uint64_t a4, const WTF::String *a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v9 = (char *)this + 16;
  v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 574;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v11, a2);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a5);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::putOrAdd(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v9 = a1 + 16;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 571;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v11, a2);
  LODWORD(v10) = *(_DWORD *)(a3 + 24);
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = v10;
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max> const&>((IPC::Encoder *)v11, (unsigned int *)(a3 + 8), v10);
  IPC::ArgumentCoder<WebCore::IDBValue,void>::encode((IPC::Encoder *)v11, a4);
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a5;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getRecord(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 561;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode((IPC::Encoder *)v7, a3);
  LOBYTE(a3) = *(_BYTE *)(a3 + 72);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getAllRecords(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 554;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getCount(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 555;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::deleteRecord(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 546;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBKeyRangeData,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::openCursor(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 566;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::iterateCursor(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 563;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::establishTransaction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 550;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WebCore::IDBTransactionInfo,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::databaseConnectionPendingClose(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 542;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::databaseConnectionClosed(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 541;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::abortOpenAndUpgradeNeeded(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 519;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::didFireVersionChangeEvent(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v7 = a1 + 16;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 548;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v9, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = a4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::openDBRequestCancelled(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBOpenRequestData *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 16;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 567;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebIDBConnectionToServer::getAllDatabaseNamesAndVersions(WebKit::WebIDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2, const WebCore::ClientOrigin *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 553;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v7, (uint64_t)a3);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

WTF::StringImpl *WebKit::WebIDBConnectionToServer::connectionToServerLost(WebKit::WebIDBConnectionToServer *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::IDBError::IDBError();
  WebCore::IDBClient::IDBConnectionToServer::connectionToServerLost();
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

void WebKit::MediaKeySystemPermissionRequestManager::startMediaKeySystemRequest(WebKit::MediaKeySystemPermissionRequestManager *this, WebCore::MediaKeySystemRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[2];
  WebCore::Node *v15;
  _QWORD v16[3];

  v4 = WebCore::MediaKeySystemRequest::document(a2);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 528)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    if (*(_BYTE *)(v8 + 544))
    {
      WebKit::MediaKeySystemPermissionRequestManager::sendMediaKeySystemRequest(this, (WTF::StringImpl **)a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) += 2;
      v14[1] = 0;
      v15 = (WebCore::Node *)v4;
      v14[0] = 0;
      WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this + 4, (uint64_t *)&v15, (uint64_t)v14, (uint64_t)v16);
      v9 = v16[0];
      WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v10);
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      v12 = *(_DWORD *)(v9 + 20);
      if (!v12)
      {
        WebCore::Document::addMediaCanStartListener();
        v12 = *(_DWORD *)(v9 + 20);
      }
      if (v12 == *(_DWORD *)(v9 + 16))
      {
        WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaKeySystemRequest&>(v9 + 8, (uint64_t)a2);
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 8);
        ++*((_DWORD *)a2 + 6);
        *(_QWORD *)(v13 + 8 * v12) = a2;
        *(_DWORD *)(v9 + 20) = v12 + 1;
      }
    }
  }
  else
  {
    WebCore::MediaKeySystemRequest::deny(a2, MEMORY[0x1E0CBF738]);
  }
}

void WebKit::MediaKeySystemPermissionRequestManager::sendMediaKeySystemRequest(WebKit::MediaKeySystemPermissionRequestManager *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t v40;
  IPC::Encoder *v41;

  if (!WebCore::MediaKeySystemRequest::document((WebCore::MediaKeySystemRequest *)a2)
    || (v4 = *(_QWORD *)(WebCore::MediaKeySystemRequest::document((WebCore::MediaKeySystemRequest *)a2) + 528)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    WebCore::MediaKeySystemRequest::deny((WebCore::MediaKeySystemRequest *)a2, MEMORY[0x1E0CBF738]);
    return;
  }
  v7 = (uint64_t *)((char *)this + 24);
  v6 = *((_QWORD *)this + 3);
  v8 = (uint64_t)a2[4];
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 3, 0), (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != v8)
    {
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v9;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          v14 = v16;
        }
        goto LABEL_15;
      }
    }
    goto LABEL_29;
  }
LABEL_15:
  *v14 = v8;
  ++*((_DWORD *)a2 + 6);
  v18 = (_DWORD *)v14[1];
  v14[1] = (uint64_t)a2;
  if (v18)
  {
    if (v18[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[6];
  }
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v7;
  if (*v7)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (3 * v24 <= 4 * v23)
LABEL_28:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 3, v14);
LABEL_29:
  WebKit::WebFrame::fromCoreFrame(v5, &v40);
  v25 = WebCore::MediaKeySystemRequest::topLevelDocumentOrigin((WebCore::MediaKeySystemRequest *)a2);
  v26 = *((_QWORD *)this + 2) + 32;
  v27 = v40;
  v39 = *(_OWORD *)(v40 + 80);
  v28 = v25 + 8;
  v30 = a2[4];
  v29 = a2[5];
  if (v29)
    *(_DWORD *)v29 += 2;
  v38 = v29;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
  v32 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v32 = 2011;
  *(_QWORD *)(v32 + 8) = v31;
  *(_QWORD *)(v32 + 528) = v32 + 16;
  *(_QWORD *)(v32 + 536) = v32 + 16;
  *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v32 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
  v41 = (IPC::Encoder *)v32;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v32, 8uLL, 8) = v30;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v32, (uint64_t *)&v39);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v32, v28);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v32, (uint64_t *)&v38);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v26 + 32))(v26, &v41, 0);
  v34 = v41;
  v41 = 0;
  if (v34)
  {
    IPC::Encoder::~Encoder(v34, v33);
    WTF::fastFree(v35, v36);
  }
  v37 = v38;
  v38 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v37 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v27 + 8));
}

uint64_t *WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  void *v19;
  uint64_t v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = ~(*a2 << 32) + *a2;
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
  v15 = (uint64_t *)(v8 + 24 * v14);
  v16 = *v15;
  if (*v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == *a2)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(_DWORD *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 24 * v27;
        goto LABEL_38;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 24 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15);
    if (v17)
    {
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v15 = v17;
    }
  }
  WTF::GenericHashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>::assignToEmpty<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>(v15, a2);
  v20 = *((unsigned int *)v15 + 5);
  if ((_DWORD)v20)
  {
    v21 = (_DWORD **)v15[1];
    v22 = 8 * v20;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        if (v23[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[6];
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  result = (uint64_t *)v15[1];
  if (result)
  {
    v15[1] = 0;
    *((_DWORD *)v15 + 4) = 0;
    result = (uint64_t *)WTF::fastFree((WTF *)result, v19);
  }
  v24 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v15[1] = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *((_DWORD *)v15 + 4) = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *((_DWORD *)v15 + 5) = v24;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_31:
      result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::expand(v6, v15);
      v15 = result;
      v28 = *v6;
      if (*v6)
        LODWORD(v31) = *(_DWORD *)(v28 - 4);
      else
        LODWORD(v31) = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_31;
  }
  v33 = v28 + 24 * v31;
  v32 = 1;
LABEL_38:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

_QWORD *WebKit::MediaKeySystemPermissionRequestManager::cancelMediaKeySystemRequest(WebKit::MediaKeySystemPermissionRequestManager *this, WebCore::MediaKeySystemRequest *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::MediaKeySystemRequest **v11;
  WebCore::MediaKeySystemRequest **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  WebCore::MediaKeySystemRequest **__dst;
  uint64_t v18;
  _QWORD *v19;

  v4 = (uint64_t *)((char *)this + 24);
  v18 = *((_QWORD *)a2 + 4);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 3, &v18);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v19);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    else
      --*((_DWORD *)result + 6);
  }
  else
  {
    result = (_QWORD *)WebCore::MediaKeySystemRequest::document(a2);
    if (result)
    {
      v7 = *((_QWORD *)this + 4);
      result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v7, (uint64_t)result);
      v8 = result;
      v9 = v7 ? v7 + 24 * *(unsigned int *)(v7 - 4) : 0;
      if ((_QWORD *)v9 != result)
      {
        v10 = *((unsigned int *)result + 5);
        if (!(_DWORD)v10)
          goto LABEL_20;
        v11 = (WebCore::MediaKeySystemRequest **)result[1];
        v12 = v11 + 1;
        v13 = *((unsigned int *)result + 5);
        while (*v11 != a2)
        {
          ++v11;
          ++v12;
          if (!--v13)
            return result;
        }
        __dst = v11;
        *v11 = 0;
        if (*((_DWORD *)a2 + 6) == 1)
        {
          (*(void (**)(WebCore::MediaKeySystemRequest *))(*(_QWORD *)a2 + 16))(a2);
          v10 = *((unsigned int *)v8 + 5);
        }
        else
        {
          --*((_DWORD *)a2 + 6);
        }
        result = memmove(__dst, __dst + 1, v8[1] + 8 * v10 - (_QWORD)v12);
        v14 = *((_DWORD *)v8 + 5) - 1;
        *((_DWORD *)v8 + 5) = v14;
        if (!v14)
        {
LABEL_20:
          result = (_QWORD *)WebCore::Document::removeMediaCanStartListener();
          v15 = *((_QWORD *)this + 4);
          if (v15)
          {
            v16 = (_QWORD *)(v15 + 24 * *(unsigned int *)(v15 - 4));
            if (v16 == v8)
              return result;
          }
          else
          {
            if (!v8)
              return result;
            v16 = 0;
          }
          if (v16 != v8)
            return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove((uint64_t *)this + 4, v8);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::MediaKeySystemPermissionRequestManager::mediaCanStart(WebKit::MediaKeySystemPermissionRequestManager *this, WebCore::Document *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::StringImpl ***v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl ***v15;
  unint64_t v16;
  _QWORD v17[2];

  v3 = (uint64_t *)((char *)this + 32);
  v4 = *((_QWORD *)this + 4);
  v5 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v4, (uint64_t)a2);
  v6 = v5;
  if (v4)
    v7 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  else
    v7 = 0;
  if (v7 == v5)
  {
    v17[0] = 0;
    v15 = 0;
    v17[1] = 0;
    v16 = 0;
    WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v5);
    return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  }
  v8 = (WTF::StringImpl ***)v5[1];
  v15 = v8;
  v9 = *((_DWORD *)v5 + 4);
  v10 = *((unsigned int *)v5 + 5);
  v5[1] = 0;
  v5[2] = 0;
  v16 = __PAIR64__(v10, v9);
  if (!*v3)
  {
    if (!v5)
      goto LABEL_13;
    v11 = 0;
LABEL_11:
    if ((uint64_t *)v11 != v5)
      WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove(v3, v5);
    goto LABEL_13;
  }
  v11 = *v3 + 24 * *(unsigned int *)(*v3 - 4);
  if ((uint64_t *)v11 != v5)
    goto LABEL_11;
LABEL_13:
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    do
    {
      v13 = *v8++;
      WebKit::MediaKeySystemPermissionRequestManager::sendMediaKeySystemRequest(this, v13);
      v12 -= 8;
    }
    while (v12);
  }
  return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
}

WebCore::MediaKeySystemRequest *WebKit::MediaKeySystemPermissionRequestManager::mediaKeySystemWasGranted(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  WebCore::MediaKeySystemRequest *result;
  WebCore::MediaKeySystemRequest *v5;
  uint64_t v6;

  v6 = a2;
  v2 = (uint64_t *)(a1 + 24);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v2, v3, &v5);
  result = v5;
  if (v5)
  {
    WebCore::MediaKeySystemRequest::allow(v5);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
        return (WebCore::MediaKeySystemRequest *)(*(uint64_t (**)(WebCore::MediaKeySystemRequest *))(*(_QWORD *)result + 16))(result);
      else
        --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WebCore::MediaKeySystemRequest *WebKit::MediaKeySystemPermissionRequestManager::mediaKeySystemWasDenied(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  WebCore::MediaKeySystemRequest *result;
  WebCore::MediaKeySystemRequest *v7;
  uint64_t v8;

  v8 = a2;
  v4 = (uint64_t *)(a1 + 24);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v7);
  result = v7;
  if (v7)
  {
    WebCore::MediaKeySystemRequest::deny(v7, a3);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
        return (WebCore::MediaKeySystemRequest *)(*(uint64_t (**)(WebCore::MediaKeySystemRequest *))(*(_QWORD *)result + 16))(result);
      else
        --*((_DWORD *)result + 6);
    }
  }
  return result;
}

unsigned int *WebKit::WebExtensionContextProxy::setBackgroundPage(WebKit::WebExtensionContextProxy *this, WebKit::WebPage *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::popupPages@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v12 = (uint64_t *)(a1 + 176);
  v13 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((_QWORD **)(a1 + 176));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v27, v12, (uint64_t)v13, v14);
  v15 = *(_QWORD *)(a1 + 176);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 4);
    v17 = v15 + 40 * v16;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  result = WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v25, v12, v17, v15 + 40 * v16);
  v19 = v28;
  if (v28 != v26)
  {
    v20 = a5;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)v19 + 8);
      if (v21)
        v22 = v21 - 16;
      else
        v22 = 0;
      if ((!a3 || !*(_BYTE *)(v19 + 16) || *(_QWORD *)(v19 + 8) == a2)
        && (!v20 || !*(_BYTE *)(v19 + 32) || *(_QWORD *)(v19 + 24) == a4))
      {
        v23 = *(unsigned int *)(a6 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(a6 + 8))
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(a6, v22);
        }
        else
        {
          v24 = *(_QWORD *)a6;
          CFRetain(*(CFTypeRef *)(v22 + 8));
          *(_QWORD *)(v24 + 8 * v23) = v22;
          ++*(_DWORD *)(a6 + 12);
        }
      }
      result = (uint64_t)WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)v27);
      v19 = v28;
    }
    while (v28 != v26);
  }
  return result;
}

unsigned int *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPage>((uint64_t)a2, (unsigned int **)&v13);
  WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a1, (unsigned int **)&v13, a3, (uint64_t)&v12);
  result = (unsigned int *)v13;
  v13 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionContextProxy::tabPages@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v12 = (uint64_t *)(a1 + 192);
  v13 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((_QWORD **)(a1 + 192));
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)v27, v12, (uint64_t)v13, v14);
  v15 = *(_QWORD *)(a1 + 192);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 4);
    v17 = v15 + 40 * v16;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  result = WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase((uint64_t)&v25, v12, v17, v15 + 40 * v16);
  v19 = v28;
  if (v28 != v26)
  {
    v20 = a5;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)v19 + 8);
      if (v21)
        v22 = v21 - 16;
      else
        v22 = 0;
      if ((!a3 || !*(_BYTE *)(v19 + 16) || *(_QWORD *)(v19 + 8) == a2)
        && (!v20 || !*(_BYTE *)(v19 + 32) || *(_QWORD *)(v19 + 24) == a4))
      {
        v23 = *(unsigned int *)(a6 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(a6 + 8))
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(a6, v22);
        }
        else
        {
          v24 = *(_QWORD *)a6;
          CFRetain(*(CFTypeRef *)(v22 + 8));
          *(_QWORD *)(v24 + 8 * v23) = v22;
          ++*(_DWORD *)(a6 + 12);
        }
      }
      result = (uint64_t)WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance((uint64_t)v27);
      v19 = v28;
    }
    while (v28 != v26);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::setBackgroundPageIdentifier(WebKit::WebExtensionContextProxy *a1, uint64_t a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  CFTypeRef *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = a2;
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    a2 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v3 + 14, &v8);
  if (v4)
  {
    v5 = (CFTypeRef *)v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WebKit::WebExtensionContextProxy::setBackgroundPage(a1, (WebKit::WebPage *)v5);
    CFRelease(v5[1]);
  }
}

void WebKit::WebExtensionContextProxy::addPopupPageIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  WebKit::WebProcess *v11;
  uint64_t v12;
  CFTypeRef *v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16[4];

  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = a2;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v14);
    a2 = v15;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v16[0] = a2;
  v12 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v11 + 14, v16);
  if (v12)
  {
    v13 = (CFTypeRef *)v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v16[0] = a3;
    v16[1] = a4;
    v16[2] = a5;
    v16[3] = a6;
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1 + 176, v13, v16);
    CFRelease(v13[1]);
  }
}

void WebKit::WebExtensionContextProxy::addTabPageIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  CFTypeRef *v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14[4];

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v12);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v14[0] = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v9 + 14, v14);
  if (v10)
  {
    v11 = (CFTypeRef *)v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v14[0] = a3;
    v14[1] = 1;
    v14[2] = a4;
    v14[3] = a5;
    WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::set<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1 + 192, v11, v14);
    CFRelease(v11[1]);
  }
}

uint64_t WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v5 = (uint64_t *)(a1 + 152);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34E1150;
  v6[1] = a3;
  v6[2] = a2;
  v8 = v6;
  WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v5, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::WebFrame&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(&v8, (_QWORD **)a1);
  if (HIDWORD(v9))
  {
    v5 = v8;
    v6 = 8 * HIDWORD(v9);
    do
    {
      if (*v5)
      {
        if (*(_QWORD *)(*v5 + 8))
        {
          v10 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v10))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*v5 + 8));
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
}

uint64_t WebKit::WebExtensionControllerProxy::get@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if ((byte_1ECE72E71 & 1) == 0)
  {
    qword_1ECE72E78 = 0;
    byte_1ECE72E71 = 1;
  }
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (result)
  {
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (v4)
        ++*(_DWORD *)(v4 + 16);
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

void *WebKit::WebExtensionControllerProxy::getOrCreate@<X0>(WebKit::WebExtensionControllerProxy **a1@<X0>, uint64_t a2@<X1>, unsigned int ***a3@<X8>)
{
  unsigned int **v5;
  void *result;
  WebKit::WebExtensionContextParameters *v7;
  WebKit::WebExtensionControllerProxy **v8[2];
  uint64_t v9;

  v8[0] = a1;
  v8[1] = (WebKit::WebExtensionControllerProxy **)&v9;
  v9 = a2;
  WebKit::WebExtensionControllerProxy::get((uint64_t)*a1, &v7);
  v5 = (unsigned int **)v7;
  if (v7)
  {
    WebKit::WebExtensionControllerProxy::getOrCreate(WebKit::WebExtensionControllerParameters const&,WebKit::WebPage *)::$_0::operator()(v8, v7);
    ++*((_DWORD *)v5 + 4);
    result = WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v5 + 2);
  }
  else
  {
    v5 = (unsigned int **)WTF::fastMalloc((WTF *)0x38);
    WebKit::WebExtensionControllerProxy::WebExtensionControllerProxy((uint64_t)v5, a1);
    result = WebKit::WebExtensionControllerProxy::getOrCreate(WebKit::WebExtensionControllerParameters const&,WebKit::WebPage *)::$_0::operator()(v8, (WebKit::WebExtensionContextParameters *)v5);
  }
  *a3 = v5;
  return result;
}

uint64_t *WebKit::WebExtensionControllerProxy::getOrCreate(WebKit::WebExtensionControllerParameters const&,WebKit::WebPage *)::$_0::operator()(WebKit::WebExtensionControllerProxy ***a1, WebKit::WebExtensionContextParameters *a2)
{
  WebKit::WebExtensionControllerProxy **v3;
  unsigned int v4;
  WebKit::WebExtensionContextProxy *v6;
  WebKit::WebExtensionContextProxy *v7;
  WTF::URL *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  _BYTE v17[24];
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v21 = 0;
  v20 = 0;
  v3 = *a1;
  v4 = *((_DWORD *)*a1 + 7);
  if (v4)
  {
    v6 = v3[2];
    v7 = (WebKit::WebExtensionContextProxy *)((char *)v6 + 152 * v4);
    do
    {
      WebKit::WebExtensionContextProxy::getOrCreate(v6, a2, *a1[1], &v19);
      v8 = (WebKit::WebExtensionContextProxy *)((char *)v6 + 8);
      WTF::URL::protocolHostAndPort(v8);
      WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>&>(&v20, &v18, (const WTF::StringImpl *)&v19, (uint64_t)v17);
      v10 = v18;
      v18 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::add((uint64_t *)&v21, &v19, (uint64_t)v17);
      v11 = v19;
      v19 = 0;
      if (v11)
        WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v11 + 16));
      v6 = (WTF::URL *)((char *)v8 + 144);
    }
    while (v6 != v7);
    v3 = *a1;
    v12 = v21;
  }
  else
  {
    v12 = 0;
  }
  *((_BYTE *)a2 + 32) = *((_BYTE *)v3 + 8);
  v21 = 0;
  v13 = (uint64_t *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  if (v13)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(v13, a2);
  v14 = v20;
  v20 = 0;
  v15 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  if (v15)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, a2);
    if (v20)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, a2);
  }
  result = v21;
  if (v21)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(v21, a2);
  return result;
}

uint64_t WebKit::WebExtensionControllerProxy::WebExtensionControllerProxy(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  WebKit::WebProcess *v4;
  _BYTE v6[24];

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34E0FC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *a2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if ((byte_1ECE72E71 & 1) == 0)
  {
    qword_1ECE72E78 = 0;
    byte_1ECE72E71 = 1;
  }
  v3 = (WebKit::WebProcess *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionControllerProxy&>((uint64_t)v6, (uint64_t *)(a1 + 24), a1);
  v4 = WebKit::WebProcess::singleton(v3);
  WebKit::AuxiliaryProcess::addMessageReceiver((uint64_t)v4, 0xA3u, *(_QWORD *)(a1 + 24), a1);
  return a1;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionControllerProxy&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;

  v6 = qword_1ECE72E78;
  if (qword_1ECE72E78
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(0),
        (v6 = qword_1ECE72E78) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v9 = result & v7;
  v10 = (_QWORD *)(v6 + 16 * (result & v7));
  v11 = *v10;
  v12 = *a2;
  if (*v10)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v11 == v12)
      {
        if (qword_1ECE72E78)
          v22 = *(unsigned int *)(qword_1ECE72E78 - 4);
        else
          v22 = 0;
        v19 = 0;
        v18 = qword_1ECE72E78 + 16 * v22;
        goto LABEL_12;
      }
      if (v11 == -1)
        v20 = v10;
      v9 = (v9 + v21) & v7;
      v10 = (_QWORD *)(v6 + 16 * v9);
      v11 = *v10;
      ++v21;
    }
    while (*v10);
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      --*(_DWORD *)(qword_1ECE72E78 - 16);
      v12 = *a2;
      v10 = v20;
    }
  }
  *v10 = v12;
  result = (uint64_t)WTF::GenericHashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>::assignToEmpty<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WebKit::WebExtensionControllerProxy&>((unsigned int **)v10 + 1, a3);
  if (qword_1ECE72E78)
    v13 = *(_DWORD *)(qword_1ECE72E78 - 12) + 1;
  else
    v13 = 1;
  *(_DWORD *)(qword_1ECE72E78 - 12) = v13;
  v14 = qword_1ECE72E78;
  if (qword_1ECE72E78)
    v15 = *(_DWORD *)(qword_1ECE72E78 - 12);
  else
    v15 = 0;
  v16 = (*(_DWORD *)(qword_1ECE72E78 - 16) + v15);
  v17 = *(unsigned int *)(qword_1ECE72E78 - 4);
  if (v17 > 0x400)
  {
    if (v17 > 2 * v16)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v10);
    v10 = (_QWORD *)result;
    v14 = qword_1ECE72E78;
    if (qword_1ECE72E78)
      v17 = *(unsigned int *)(qword_1ECE72E78 - 4);
    else
      v17 = 0;
    goto LABEL_11;
  }
  if (3 * v17 <= 4 * v16)
    goto LABEL_24;
LABEL_11:
  v18 = v14 + 16 * v17;
  v19 = 1;
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

void WebKit::WebExtensionControllerProxy::~WebExtensionControllerProxy(unsigned int **this)
{
  WebKit::WebProcess *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  WebKit::WebProcess *v6;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::WebProcess *)((char *)v2 + 40), (IPC::MessageReceiver *)this);
  v4 = (uint64_t)this[6];
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  v5 = (uint64_t *)this[5];
  if (v5)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(v5, v3);
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionControllerProxy::~WebExtensionControllerProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::WebExtensionControllerProxy::load(WebKit::WebExtensionControllerProxy *this, const WebKit::WebExtensionContextParameters *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t *result;
  uint64_t v7;
  _BYTE v8[24];
  WTF::StringImpl *v9;
  uint64_t v10;

  WebKit::WebExtensionContextProxy::getOrCreate(a2, this, 0, &v10);
  WTF::URL::protocolHostAndPort((const WebKit::WebExtensionContextParameters *)((char *)a2 + 8));
  WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>&>((uint64_t *)this + 6, &v9, (const WTF::StringImpl *)&v10, (uint64_t)v8);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::add((uint64_t *)this + 5, &v10, (uint64_t)v8);
  v7 = v10;
  v10 = 0;
  if (v7)
    return (uint64_t *)WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v7 + 16));
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  uint64_t result;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    result = (uint64_t)WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    v18 = *(WTF **)a3;
    *((_DWORD *)v18 + 4) = *(_DWORD *)(*(_QWORD *)a3 + 16) + 1;
    v19 = v15[1];
    v15[1] = v18;
    if (v19)
      result = (uint64_t)WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)v19 + 2);
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_28:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF **)result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_28;
    }
    v29 = v24 + 16 * v27;
    v28 = 1;
    goto LABEL_35;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v28 = 0;
  v29 = v22 + 16 * v23;
LABEL_35:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

_QWORD *WebKit::WebExtensionControllerProxy::unload(_QWORD *result, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  double v44;
  double v45;
  double v46;
  unsigned int v47;

  v3 = result;
  v4 = result + 6;
  v5 = result[6];
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 4);
    if (v6)
    {
      v7 = 0;
      v8 = v6 - 1;
      do
      {
        v9 = v8;
        result = (_QWORD *)(v5 + 16 * v8);
        if ((unint64_t)(*result + 1) >= 2)
        {
          v10 = v5 + 16 * v8;
          v12 = *(_QWORD *)(v10 + 8);
          v11 = (uint64_t *)(v10 + 8);
          if (*(WTF::StringImpl **)(v12 + 24) == a2)
          {
            result = WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)result, a2);
            v13 = *v11;
            *v11 = 0;
            if (v13)
              result = WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v13 + 16));
            ++v7;
          }
        }
        --v8;
      }
      while (v9);
      v14 = *v4;
      if (v7)
      {
        *(_DWORD *)(v14 - 16) += v7;
        v15 = *v4;
        if (*v4)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v7;
        v14 = *v4;
      }
      if (v14)
      {
        v17 = *(_DWORD *)(v14 - 4);
        v18 = *(unsigned int *)(v14 - 12);
        if (v17 >= 9 && 6 * (int)v18 < v17)
        {
          v20 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
          v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
          v22 = (v21 | HIWORD(v21)) + 1;
          if (v22 > 0x400)
          {
            if (v22 > 2 * v18)
              goto LABEL_26;
          }
          else if (3 * v22 > 4 * v18)
          {
LABEL_24:
            v23 = (double)v18;
            v24 = (double)v22;
            v25 = 0.604166667;
LABEL_27:
            if (v24 * v25 <= v23)
              LODWORD(v22) = 2 * v22;
            if (v22 <= 8)
              v26 = 8;
            else
              v26 = v22;
            result = (_QWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v26, 0);
            goto LABEL_33;
          }
          LODWORD(v22) = 2 * v22;
          if (v22 <= 0x400)
            goto LABEL_24;
LABEL_26:
          v23 = (double)v18;
          v24 = (double)v22;
          v25 = 0.416666667;
          goto LABEL_27;
        }
      }
    }
  }
LABEL_33:
  v29 = v3[5];
  v27 = v3 + 5;
  v28 = v29;
  if (v29)
  {
    v30 = *(_DWORD *)(v28 - 4);
    if (v30)
    {
      v31 = 0;
      v32 = v30 - 1;
      do
      {
        v33 = v32;
        v34 = *(_QWORD *)(v28 + 8 * v32);
        if ((unint64_t)(v34 + 1) >= 2 && *(WTF::StringImpl **)(v34 + 24) == a2)
        {
          *(_QWORD *)(v28 + 8 * v32) = 0;
          result = WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v34 + 16));
          *(_QWORD *)(v28 + 8 * v32) = -1;
          ++v31;
        }
        --v32;
      }
      while (v33);
      v35 = *v27;
      if (v31)
      {
        *(_DWORD *)(v35 - 16) += v31;
        v36 = *v27;
        if (*v27)
          v37 = *(_DWORD *)(v36 - 12);
        else
          v37 = 0;
        *(_DWORD *)(v36 - 12) = v37 - v31;
        v35 = *v27;
      }
      if (v35)
      {
        v38 = *(_DWORD *)(v35 - 4);
        v39 = *(unsigned int *)(v35 - 12);
        if (v38 >= 9 && 6 * (int)v39 < v38)
        {
          v41 = (v39 - 1) | ((v39 - 1) >> 1) | ((((_DWORD)v39 - 1) | ((v39 - 1) >> 1)) >> 2);
          v42 = v41 | (v41 >> 4) | ((v41 | (v41 >> 4)) >> 8);
          v43 = (v42 | HIWORD(v42)) + 1;
          if (v43 > 0x400)
          {
            if (v43 > 2 * v39)
              goto LABEL_57;
          }
          else if (3 * v43 > 4 * v39)
          {
LABEL_54:
            v44 = (double)v39;
            v45 = (double)v43;
            v46 = 0.604166667;
LABEL_58:
            if (v45 * v46 <= v44)
              LODWORD(v43) = 2 * v43;
            if (v43 <= 8)
              v47 = 8;
            else
              v47 = v43;
            return WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::rehash(v27, v47, 0);
          }
          LODWORD(v43) = 2 * v43;
          if (v43 <= 0x400)
            goto LABEL_54;
LABEL_57:
          v44 = (double)v39;
          v45 = (double)v43;
          v46 = 0.416666667;
          goto LABEL_58;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerProxy::extensionContext@<X0>(WebKit::WebExtensionControllerProxy *this@<X0>, const WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin((_QWORD **)this + 5);
  v8 = result;
  v10 = v9;
  v11 = *((_QWORD *)this + 5);
  if (v11)
    v12 = v11 + 8 * *(unsigned int *)(v11 - 4);
  else
    v12 = 0;
  if (v12 == result)
  {
LABEL_11:
    v13 = 0;
  }
  else
  {
    while (1)
    {
      result = WTF::equal(*(WTF **)(*(_QWORD *)v8 + 80), *a2, v7);
      if ((result & 1) != 0)
        break;
      while (1)
      {
        v8 += 8;
        if (v8 == v10)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
          goto LABEL_10;
      }
      v8 = v10;
LABEL_10:
      if (v8 == v12)
        goto LABEL_11;
    }
    v13 = *(_QWORD *)v8;
    ++*(_DWORD *)(*(_QWORD *)v8 + 16);
  }
  *a3 = v13;
  return result;
}

WTF::StringImpl *WebKit::WebExtensionControllerProxy::extensionContext@<X0>(WebKit::WebExtensionControllerProxy *this@<X0>, const WTF::URL *a2@<X1>, WTF **a3@<X8>)
{
  uint64_t *v4;
  const WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v4 = (uint64_t *)((char *)this + 48);
  WTF::URL::protocolHostAndPort(a2);
  v6 = WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, &v9, v5);
  if (v6)
    ++*((_DWORD *)v6 + 4);
  *a3 = v6;
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerProxy::extensionContext@<X0>(WebKit::WebExtensionControllerProxy *this@<X0>, WebKit::WebFrame *a2@<X1>, WebCore::DOMWrapperWorld *a3@<X2>, WTF **a4@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[5];

  if (*((_DWORD *)a3 + 12))
  {
    result = *((_QWORD *)a3 + 5);
    if (!result || (result = WTF::StringImpl::startsWith(), (result & 1) == 0))
    {
      *a4 = 0;
      return result;
    }
    v9 = (WTF::StringImpl *)*((_QWORD *)a3 + 5);
    if (v9)
      WTF::StringImpl::substring(v9);
    else
      v10[0] = 0;
    WebKit::WebExtensionControllerProxy::extensionContext(this, v10, a4);
  }
  else
  {
    WebKit::WebFrame::url(a2, (uint64_t)v10);
    WebKit::WebExtensionControllerProxy::extensionContext(this, (const WTF::URL *)v10, a4);
  }
  result = (uint64_t)v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionWrapper::wrap(JSContextRef ctx, void *a2)
{
  JSGlobalContextRef GlobalContext;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  OpaqueJSContext **v11;
  OpaqueJSContext *v12;
  OpaqueJSContext **v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  OpaqueJSValue *v19;
  OpaqueJSClass *v20;
  JSObjectRef v21;

  if (a2)
  {
    GlobalContext = JSContextGetGlobalContext(ctx);
    if ((byte_1ECE72E72 & 1) != 0)
    {
      v5 = qword_1ECE72E80;
      if (qword_1ECE72E80)
        goto LABEL_4;
    }
    else
    {
      qword_1ECE72E80 = 0;
      byte_1ECE72E72 = 1;
    }
    WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(0);
    v5 = qword_1ECE72E80;
    if (!qword_1ECE72E80)
    {
      v6 = 0;
LABEL_5:
      v7 = ((unint64_t)GlobalContext + ~((_QWORD)GlobalContext << 32)) ^ (((unint64_t)GlobalContext
                                                                                + ~((_QWORD)GlobalContext << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = (OpaqueJSContext **)(v5 + 16 * v10);
      v12 = *v11;
      if (*v11)
      {
        v13 = 0;
        v14 = 1;
        while (v12 != GlobalContext)
        {
          if (v12 == (OpaqueJSContext *)-1)
            v13 = v11;
          v10 = (v10 + v14) & v6;
          v11 = (OpaqueJSContext **)(v5 + 16 * v10);
          v12 = *v11;
          ++v14;
          if (!*v11)
          {
            if (v13)
            {
              *v13 = 0;
              v13[1] = 0;
              --*(_DWORD *)(v5 - 16);
              v11 = v13;
            }
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        *v11 = GlobalContext;
        v11[1] = (OpaqueJSContext *)JSWeakObjectMapCreate();
        if (qword_1ECE72E80)
          v15 = *(_DWORD *)(qword_1ECE72E80 - 12) + 1;
        else
          v15 = 1;
        *(_DWORD *)(qword_1ECE72E80 - 12) = v15;
        if (qword_1ECE72E80)
          v16 = *(_DWORD *)(qword_1ECE72E80 - 12);
        else
          v16 = 0;
        v17 = (*(_DWORD *)(qword_1ECE72E80 - 16) + v16);
        v18 = *(unsigned int *)(qword_1ECE72E80 - 4);
        if (v18 > 0x400)
        {
          if (v18 > 2 * v17)
            goto LABEL_19;
        }
        else if (3 * v18 > 4 * v17)
        {
          goto LABEL_19;
        }
        WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(v11);
      }
LABEL_19:
      v19 = (OpaqueJSValue *)JSWeakObjectMapGet();
      if (v19)
      {
        v21 = v19;
        if (JSObjectGetPrivate(v19))
          return v21;
        JSWeakObjectMapRemove();
      }
      v20 = (OpaqueJSClass *)(*(uint64_t (**)(void *))(*(_QWORD *)a2 + 16))(a2);
      v21 = JSObjectMake(ctx, v20, a2);
      JSWeakObjectMapSet();
      return v21;
    }
LABEL_4:
    v6 = *(_DWORD *)(v5 - 8);
    goto LABEL_5;
  }
  return JSValueMakeNull(ctx);
}

_DWORD *WebKit::JSWebExtensionWrapper::initialize(WebKit::JSWebExtensionWrapper *this, JSObjectRef object, OpaqueJSValue *a3)
{
  _DWORD *result;

  result = JSObjectGetPrivate(object);
  if (result)
    ++result[2];
  return result;
}

uint64_t WebKit::JSWebExtensionWrapper::finalize(WebKit::JSWebExtensionWrapper *this, OpaqueJSValue *a2)
{
  uint64_t result;
  _DWORD *v4;

  result = (uint64_t)JSObjectGetPrivate(this);
  if (result)
  {
    v4 = (_DWORD *)result;
    result = JSObjectSetPrivate(this, 0);
    if (v4[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return result;
}

void WebKit::BlobRegistryProxy::registerInternalFileBlobURL(uint64_t a1, uint64_t *a2, WebCore::BlobDataFileReference **a3, WTF **a4, uint64_t *a5)
{
  uint64_t v9;
  const char **v10;
  const WTF::StringImpl **v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  WebKit::WebProcess *v23;
  WTF::StringImpl *v24;
  IPC::Encoder *v25;
  char v26;
  const char **v27;

  v27 = 0;
  v9 = *(_QWORD *)WebCore::BlobDataFileReference::path(*a3);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 4))
    {
      WebCore::BlobDataFileReference::path(*a3);
      WebKit::SandboxExtension::createHandle(0, (uint64_t)&v25);
      if (v26)
      {
        v10 = (const char **)v25;
        v25 = 0;
        v27 = v10;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v25);
      }
    }
  }
  v11 = (const WTF::StringImpl **)WebCore::BlobDataFileReference::path(*a3);
  if ((WTF::equal(*a4, *v11, v12) & 1) != 0)
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF6F0];
  else
    v13 = (WTF::StringImpl **)WebCore::BlobDataFileReference::path(*a3);
  v14 = *v13;
  if (*v13)
    *(_DWORD *)v14 += 2;
  v24 = v14;
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  v16 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v15) + 24);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 255;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v25 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)a4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v24);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode((IPC::Encoder *)v17, &v27);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a5);
  IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v25, 0, 0);
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v18);
    WTF::fastFree(v20, v21);
  }
  v22 = v24;
  v24 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v22 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v27);
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerInternalBlobURL(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  WebKit::WebProcess *v19;
  IPC::Encoder *v20;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v7) + 24);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 252;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v20 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  v10 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v10;
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)a3;
    v13 = 48 * v11;
    do
    {
      v14 = *(_DWORD *)(v12 + 40);
      *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = v14;
      IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL> const&>(v9, v12, v14);
      v12 += 48;
      v13 -= 48;
    }
    while (v13);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerBlobURL(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  WebKit::WebProcess *v16;
  IPC::Encoder *v17;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v16);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v9) + 24);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 250;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v17 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  IPC::ArgumentCoder<WebCore::PolicyContainer,void>::encode((IPC::Encoder *)v11, a4);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v11, a5);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerInternalBlobURLOptionallyFileBacked(uint64_t a1, uint64_t *a2, uint64_t *a3, WebCore::BlobDataFileReference **a4, uint64_t *a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  IPC::Encoder *v18;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v9) + 24);
  v11 = (uint64_t *)WebCore::BlobDataFileReference::path(*a4);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 254;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v18 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, v11);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a5);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::unregisterBlobURL(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 276;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v7, a3);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerInternalBlobURLForSlice(WebKit::BlobRegistryProxy *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  WebKit::WebProcess *v18;
  IPC::Encoder *v19;

  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v18);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v11) + 24);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 253;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v19 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)a3);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = a5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)a6);
  IPC::Connection::sendMessageImpl(v12, (uint64_t *)&v19, 0, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::registerBlobURLHandle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 251;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v7, a3);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::BlobRegistryProxy::unregisterBlobURLHandle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 277;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v7, a3);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::BlobRegistryProxy::blobType@<X0>(const WTF::URL *a1@<X1>, _QWORD *a2@<X8>)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  uint64_t *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t result;
  WebKit::WebProcess *v17;
  WebKit::BlobRegistryProxy *v18;
  const WTF::URL *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  char v24;
  uint64_t *v25;
  int v26;
  IPC::Encoder *v27;
  uint64_t v28;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3517, 0, &v28, (uint64_t *)&v27);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v27, (uint64_t *)a1);
  IPC::Connection::sendSyncMessage(v6, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  if (!v26)
  {
    LOBYTE(v23) = 0;
    v24 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v25, &v23);
    if (!v24)
    {
      LOBYTE(v20) = 13;
      v7 = 1;
      v22 = 1;
      v8 = v26;
      if (v26 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    v8 = v26;
    if (!v26)
    {
      v7 = 0;
      v10 = v25;
      v25 = 0;
      a1 = v23;
      v20 = v10;
      v21 = v23;
      v22 = 0;
      goto LABEL_10;
    }
LABEL_25:
    v18 = (WebKit::BlobRegistryProxy *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::BlobRegistryProxy::blobSize(v18, v19);
  }
  if (v26 != 1)
    goto LABEL_25;
  LOBYTE(v20) = (_BYTE)v25;
  v7 = 1;
  v22 = 1;
  v8 = 1;
LABEL_10:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E1168[v8])(&v23, &v25);
LABEL_11:
  v11 = v27;
  v27 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  if (v7)
  {
    a1 = (const WTF::URL *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      v14 = *(_DWORD *)a1;
      *(_DWORD *)a1 += 4;
      v15 = v14 + 2;
      goto LABEL_18;
    }
LABEL_23:
    *a2 = 0;
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E10C8[v7])(&v25, &v20);
  }
  v21 = 0;
  if (!a1)
    goto LABEL_23;
  v15 = *(_DWORD *)a1;
  *(_DWORD *)a1 += 2;
LABEL_18:
  *a2 = a1;
  if (v15)
  {
    *(_DWORD *)a1 = v15;
  }
  else
  {
    result = WTF::StringImpl::destroy(a1, (WTF::StringImpl *)v9);
    v7 = v22;
    if (v22 == -1)
      return result;
  }
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E10C8[v7])(&v25, &v20);
}

const WTF::URL *WebKit::BlobRegistryProxy::blobSize(WebKit::BlobRegistryProxy *this, const WTF::URL *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  int v5;
  const WTF::URL *v6;
  void *v7;
  uint64_t *v8;
  int v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  WebKit::WebProcess *v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  uint64_t *v18;
  int v19;
  IPC::Encoder *v20;
  uint64_t v21;
  char v22;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  v21 = 0;
  IPC::Connection::createSyncMessageEncoder(3516, 0, &v21, (uint64_t *)&v20);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v20, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v4, v21, (uint64_t *)&v20, 0, (uint64_t)&v18, INFINITY);
  v5 = v19;
  if (!v19)
  {
    v6 = (const WTF::URL *)IPC::Decoder::decode<std::tuple<double>>(v18);
    if (!(_BYTE)v7)
    {
      LOBYTE(v16[0]) = 13;
      v5 = 1;
      v17 = 1;
      v9 = v19;
      if (v19 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v19)
    {
      a2 = v6;
      v8 = v18;
      v18 = 0;
      v16[0] = v8;
      v16[1] = v6;
      goto LABEL_9;
    }
LABEL_19:
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (const WTF::URL *)WebKit::BlobRegistryProxy::writeBlobsToTemporaryFilesForIndexedDB(v15);
  }
  if (v19 != 1)
    goto LABEL_19;
  LOBYTE(v16[0]) = (_BYTE)v18;
LABEL_9:
  v17 = v5;
  v9 = v5;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34E1168[v9])(&v22, &v18);
LABEL_11:
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v7);
    WTF::fastFree(v11, v12);
  }
  if (v5)
    a2 = 0;
  ((void (*)(uint64_t **, _QWORD *))off_1E34E10D8[v5])(&v18, v16);
  return a2;
}

uint64_t WebKit::BlobRegistryProxy::writeBlobsToTemporaryFilesForIndexedDB(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  os_unfair_lock_s *v6;
  WebKit::WebProcess *v8;
  uint64_t v9;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v9 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6, &v9, a3, 0, 0);
}

WebKit::WebFullScreenManager *WebKit::WebFullScreenManager::WebFullScreenManager(WebKit::WebFullScreenManager *this, CFTypeRef *a2)
{
  WTF::RunLoop *v4;
  WTF::RunLoop *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_DWORD *)this + 4) = 1;
  *((_BYTE *)this + 20) = 3;
  *(_QWORD *)this = off_1E34E1000;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  v4 = (WTF::RunLoop *)CFRetain(a2[1]);
  *((_QWORD *)this + 9) = a2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v5 = (WTF::RunLoop *)WTF::RunLoop::main(v4);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34E1188;
  v6[1] = WebKit::WebFullScreenManager::mainVideoElementTextRecognitionTimerFired;
  v6[2] = 0;
  v6[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::WebFullScreenManager *)((char *)this + 112), v5);
  *((_QWORD *)this + 14) = off_1E34ABE00;
  *((_QWORD *)this + 17) = v6;
  *((_WORD *)this + 72) = 0;
  *((_BYTE *)this + 146) = 0;
  v7 = WebKit::WebPage::logger((WebKit::WebPage *)a2);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (unint64_t)a2[5] + ~((_QWORD)a2[5] << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  *((_QWORD *)this + 19) = v7;
  *((_QWORD *)this + 20) = (v12 >> 31) ^ v12;
  return this;
}

WebCore::RenderVideo *WebKit::WebFullScreenManager::mainVideoElementTextRecognitionTimerFired(WebCore::RenderVideo *this, uint64_t a2, const Node *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  const WebCore::HTMLVideoElement *v7;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v4 = (uint64_t)this;
    v5 = *(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8);
    this = (WebCore::RenderVideo *)*((_QWORD *)v5 + 249);
    if (!this)
      this = (WebCore::RenderVideo *)WebCore::Document::ensureFullscreenManager(v5);
    if (*((_QWORD *)this + 7))
    {
      this = (WebCore::RenderVideo *)WebKit::WebFullScreenManager::updateMainVideoElement((WebKit::WebFullScreenManager *)v4, a2, a3);
      v6 = *(_QWORD *)(v4 + 104);
      if (v6)
      {
        v7 = *(const WebCore::HTMLVideoElement **)(v6 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v4 + 144))
          {
            WebKit::WebPage::cancelTextRecognitionForVideoInElementFullScreen(*(WebKit::WebPage **)(v4 + 72));
            v7 = *(const WebCore::HTMLVideoElement **)(*(_QWORD *)(v4 + 104) + 8);
          }
          *(_BYTE *)(v4 + 144) = 1;
          return WebKit::WebPage::beginTextRecognitionForVideoInElementFullScreen(*(WebCore::RenderVideo **)(v4 + 72), v7);
        }
      }
    }
  }
  return this;
}

void WebKit::WebFullScreenManager::~WebFullScreenManager(unsigned int **this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;

  WebKit::WebFullScreenManager::invalidate((WebKit::WebFullScreenManager *)this, a2);
  v3 = this[19];
  this[19] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  this[14] = (unsigned int *)off_1E34ABE00;
  v7 = this[17];
  this[17] = 0;
  if (v7)
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 14));
  v9 = this[13];
  this[13] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  v12 = this[12];
  this[12] = 0;
  if (v12)
  {
    if (v12[6] == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      v12[6] -= 2;
    }
  }
  v13 = this[11];
  this[11] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v13 + 4), v8);
      WTF::fastFree((WTF *)v13, v22);
    }
  }
  v16 = this[10];
  this[10] = 0;
  if (v16)
  {
    if (v16[6] == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
    }
    else
    {
      v16[6] -= 2;
    }
  }
  v17 = this[9];
  this[9] = 0;
  if (v17)
    CFRelease(*((CFTypeRef *)v17 + 1));
  v18 = this[1];
  if (v18)
  {
    *((_QWORD *)v18 + 1) = 0;
    v19 = this[1];
    this[1] = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v8);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebFullScreenManager::~WebFullScreenManager(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebFullScreenManager::invalidate(WebKit::WebFullScreenManager *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v3 = *((_QWORD *)this + 19);
  v4 = *((_QWORD *)this + 20);
  v6[0] = "WebFullScreenManager";
  v6[1] = 21;
  v6[2] = "invalidate";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  WebKit::WebFullScreenManager::clearElement((uint64_t)this, a2);
  v6[0] = 0;
  WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)v6);
  return WTF::RunLoop::TimerBase::stop((WebKit::WebFullScreenManager *)((char *)this + 112));
}

uint64_t WebKit::WebFullScreenManager::clearElement(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(this + 80))
  {
    v2 = this;
    WebKit::eventsToObserve((WebKit *)this, a2);
    for (i = 0; i != 24; i += 8)
    {
      v4 = *(_QWORD *)(v2 + 80);
      v5 = 1;
      (*(void (**)(uint64_t, char *, uint64_t, char *))(*(_QWORD *)v4 + 32))(v4, &_MergedGlobals_100[i + 24], v2, &v5);
    }
    this = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::setMainVideoElement(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t k;
  _DWORD *v13;
  uint64_t v14;
  WebCore::HTMLMediaElement *v15;
  unint64_t StatusReg;
  uint64_t v17;
  WebCore::ThreadGlobalData *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  WebCore::ThreadGlobalData *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  WebCore::ThreadGlobalData *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  WebCore::ThreadGlobalData *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t i;
  WTF::StringImpl *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;

  v3 = result;
  v4 = *(_QWORD *)(result + 104);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  if (*(_QWORD *)a2 == v5)
    return result;
  if ((_MergedGlobals_100[0] & 1) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v17 = *(_QWORD *)(StatusReg + 736);
    if (!v17 || (v18 = *(WebCore::ThreadGlobalData **)(v17 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v18 = (WebCore::ThreadGlobalData *)result;
    }
    v19 = *((_QWORD *)v18 + 5);
    if (!v19)
    {
      result = WebCore::ThreadGlobalData::initializeEventNames(v18);
      v19 = *((_QWORD *)v18 + 5);
    }
    v20 = *(_DWORD **)(v19 + 1768);
    if (v20)
      *v20 += 2;
    v38 = v20;
    v21 = *(_QWORD *)(StatusReg + 736);
    if (!v21 || (v22 = *(WebCore::ThreadGlobalData **)(v21 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v22 = (WebCore::ThreadGlobalData *)result;
    }
    v23 = *((_QWORD *)v22 + 5);
    if (!v23)
    {
      result = WebCore::ThreadGlobalData::initializeEventNames(v22);
      v23 = *((_QWORD *)v22 + 5);
    }
    v24 = *(_DWORD **)(v23 + 1760);
    if (v24)
      *v24 += 2;
    v39 = v24;
    v25 = *(_QWORD *)(StatusReg + 736);
    if (!v25 || (v26 = *(WebCore::ThreadGlobalData **)(v25 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v26 = (WebCore::ThreadGlobalData *)result;
    }
    v27 = *((_QWORD *)v26 + 5);
    if (!v27)
    {
      result = WebCore::ThreadGlobalData::initializeEventNames(v26);
      v27 = *((_QWORD *)v26 + 5);
    }
    v28 = *(_DWORD **)(v27 + 1472);
    if (v28)
      *v28 += 2;
    v40 = v28;
    v29 = *(_QWORD *)(StatusReg + 736);
    if (!v29 || (v30 = *(WebCore::ThreadGlobalData **)(v29 + 96)) == 0)
      v30 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow((WebCore *)result);
    v31 = *((_QWORD *)v30 + 5);
    if (!v31)
    {
      WebCore::ThreadGlobalData::initializeEventNames(v30);
      v31 = *((_QWORD *)v30 + 5);
    }
    v32 = *(_DWORD **)(v31 + 1424);
    if (v32)
      *v32 += 2;
    v33 = 0;
    v41 = v32;
    do
    {
      v34 = &(&v38)[v33];
      v35 = *(_OWORD *)&(&v38)[v33];
      *v34 = 0;
      v34[1] = 0;
      *(_OWORD *)&_MergedGlobals_100[v33 * 8 + 48] = v35;
      v33 += 2;
    }
    while (v33 != 4);
    for (i = 3; i != -1; --i)
    {
      v37 = (WTF::StringImpl *)(&v38)[i];
      (&v38)[i] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, a2);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    _MergedGlobals_100[0] = 1;
    v4 = *(_QWORD *)(v3 + 104);
    if (!v4)
      goto LABEL_11;
    goto LABEL_7;
  }
  if (v4)
  {
LABEL_7:
    if (*(_QWORD *)(v4 + 8))
    {
      for (j = 0; j != 32; j += 8)
      {
        LOBYTE(v38) = 0;
        WebCore::HTMLMediaElement::removeEventListener();
      }
      WebKit::WebFullScreenManager::endTextRecognitionForMainVideoIfNeeded((WebKit::WebPage **)v3);
    }
  }
LABEL_11:
  v7 = *(_QWORD *)a2;
  if (v7)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 296), v7);
    v8 = *(_QWORD *)(v7 + 296);
    if (v8)
    {
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
    }
  }
  else
  {
    v8 = 0;
  }
  result = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v8;
  if (result)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
    v8 = *(_QWORD *)(v3 + 104);
  }
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    for (k = 0; k != 32; k += 8)
    {
      ++*(_DWORD *)(v3 + 16);
      LOBYTE(v38) = 0;
      *(_WORD *)((char *)&v38 + 1) = 0;
      BYTE3(v38) = 0;
      v39 = 0;
      WebCore::HTMLMediaElement::addEventListener();
      v13 = v39;
      v39 = 0;
      if (v13)
        WTF::RefCounted<WebCore::AbortSignal>::deref(v13 + 6);
      if (v3)
      {
        if (*(_DWORD *)(v3 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
        else
          --*(_DWORD *)(v3 + 16);
      }
    }
    v14 = *(_QWORD *)(v3 + 104);
    if (v14)
      v15 = *(WebCore::HTMLMediaElement **)(v14 + 8);
    else
      v15 = 0;
    result = WebCore::HTMLMediaElement::paused(v15);
    if ((result & 1) != 0)
      return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::element(WebKit::WebFullScreenManager *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t WebKit::WebFullScreenManager::videoControlsManagerDidChange(WebKit::WebFullScreenManager *this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::PlaybackSessionManager *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  v8[0] = "WebFullScreenManager";
  v8[1] = 21;
  v8[2] = "videoControlsManagerDidChange";
  v8[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  if (!*((_QWORD *)this + 10))
    return WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  v4 = WebKit::WebPage::playbackSessionManager(*((WebKit::WebPage **)this + 9));
  v5 = WebKit::PlaybackSessionManager::currentPlaybackControlsElement(v4);
  if (!v5)
    return WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  v6 = v5;
  if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
    return WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  *(_DWORD *)(v5 + 24) += 2;
  result = WebKit::WebFullScreenManager::setPIPStandbyElement(this, (WebCore::HTMLVideoElement *)v5);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::setPIPStandbyElement(WebKit::WebFullScreenManager *this, WebCore::HTMLVideoElement *a2)
{
  uint64_t result;
  WebCore::HTMLVideoElement *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  WTF *v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD v30[4];
  WTF *v31[2];
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint8_t buf[16];
  int v42;
  _DWORD v43[8];
  _DWORD v44[6];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 12);
  if ((WebCore::HTMLVideoElement *)result != a2)
  {
    v4 = a2;
    v5 = *((_QWORD *)this + 19);
    v6 = *((_QWORD *)this + 20);
    v30[0] = "WebFullScreenManager";
    v30[1] = 21;
    v30[2] = "setPIPStandbyElement";
    v30[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v30);
      WTF::String::String((WTF::String *)&v35, "old element ");
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v33, ", new element ");
      WTF::LogArgument<void const*>::toString();
      v31[0] = v35;
      v40 = v34;
      *(_QWORD *)buf = v36;
      v38 = v32;
      v39 = v33;
      result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v31, (uint64_t *)&v40, (uint64_t *)&v39, (uint64_t *)&v38, &v37);
      if (!v37)
      {
        __break(0xC471u);
        return result;
      }
      v8 = v32;
      v32 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = v33;
      v33 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v34;
      v34 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v35;
      v35 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v36;
      v36 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = qword_1ECE710F0;
      v14 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v14)
      {
        WTF::String::utf8();
        v16 = v31[0] ? (char *)v31[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v14 = v31[0];
        v31[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            v14 = (WTF *)WTF::fastFree(v14, v15);
          else
            --*(_DWORD *)v14;
        }
      }
      if (WebKit2LogFullscreen)
      {
        v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v18 = *v17;
          if ((v18 & 1) != 0)
            break;
          v19 = __ldaxr(v17);
          if (v19 == v18)
          {
            if (!__stxr(v18 | 1, v17))
            {
              v20 = WTF::Logger::observers(v14);
              v21 = *(unsigned int *)(v20 + 12);
              if ((_DWORD)v21)
              {
                v22 = *(uint64_t **)v20;
                v29 = *(_QWORD *)v20 + 8 * v21;
                do
                {
                  v23 = *v22;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v30);
                  v42 = 0;
                  WTF::String::String((WTF::String *)v43, "old element ");
                  v43[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v43[6] = 0;
                  WTF::String::String((WTF::String *)v44, ", new element ");
                  v44[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)buf, 5uLL);
                  (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v31);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v24);
                  for (i = 72; i != -8; i -= 16)
                  {
                    v26 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v26)
                    {
                      if (*(_DWORD *)v26 == 2)
                        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v26 -= 2;
                    }
                  }
                  ++v22;
                }
                while (v22 != (uint64_t *)v29);
              }
              v27 = __ldxr(v17);
              if (v27 == 1)
              {
                if (!__stlxr(0, v17))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v28 = v37;
      v37 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v28 -= 2;
      }
      result = *((_QWORD *)this + 12);
    }
    if (result)
      WebCore::HTMLVideoElement::setVideoFullscreenStandby((WebCore::HTMLVideoElement *)result);
    if (v4)
      *((_DWORD *)v4 + 6) += 2;
    result = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v4;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          v4 = (WebCore::HTMLVideoElement *)*((_QWORD *)this + 12);
        }
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v4)
      return WebCore::HTMLVideoElement::setVideoFullscreenStandby(v4);
  }
  return result;
}

void *WebKit::eventsToObserve(WebKit *this, WTF::StringImpl *a2)
{
  unint64_t StatusReg;
  uint64_t v4;
  WebKit *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WebKit *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  WebCore::ThreadGlobalData *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  WTF::StringImpl *v19;
  _QWORD v20[3];

  if ((byte_1ECE72E73 & 1) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_QWORD *)(StatusReg + 736);
    if (!v4 || (v5 = *(WebKit **)(v4 + 96)) == 0)
    {
      this = (WebKit *)WebCore::threadGlobalDataSlow(this);
      v5 = this;
    }
    v6 = *((_QWORD *)v5 + 5);
    if (!v6)
    {
      this = (WebKit *)WebCore::ThreadGlobalData::initializeEventNames(v5);
      v6 = *((_QWORD *)v5 + 5);
    }
    v7 = *(_DWORD **)(v6 + 1464);
    if (v7)
      *v7 += 2;
    v20[0] = v7;
    v8 = *(_QWORD *)(StatusReg + 736);
    if (!v8 || (v9 = *(WebKit **)(v8 + 96)) == 0)
    {
      this = (WebKit *)WebCore::threadGlobalDataSlow(this);
      v9 = this;
    }
    v10 = *((_QWORD *)v9 + 5);
    if (!v10)
    {
      this = (WebKit *)WebCore::ThreadGlobalData::initializeEventNames(v9);
      v10 = *((_QWORD *)v9 + 5);
    }
    v11 = *(_DWORD **)(v10 + 1424);
    if (v11)
      *v11 += 2;
    v20[1] = v11;
    v12 = *(_QWORD *)(StatusReg + 736);
    if (!v12 || (v13 = *(WebCore::ThreadGlobalData **)(v12 + 96)) == 0)
      v13 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(this);
    v14 = *((_QWORD *)v13 + 5);
    if (!v14)
    {
      WebCore::ThreadGlobalData::initializeEventNames(v13);
      v14 = *((_QWORD *)v13 + 5);
    }
    v15 = *(_DWORD **)(v14 + 1120);
    if (v15)
      *v15 += 2;
    v16 = 0;
    v20[2] = v15;
    do
    {
      v17 = v20[v16];
      v20[v16] = 0;
      *(_QWORD *)&_MergedGlobals_100[v16 * 8 + 24] = v17;
      ++v16;
    }
    while (v16 != 3);
    for (i = 2; i != -1; --i)
    {
      v19 = (WTF::StringImpl *)v20[i];
      v20[i] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, a2);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    byte_1ECE72E73 = 1;
  }
  return &unk_1ECE72E88;
}

WTF::StringImpl *WebKit::WebFullScreenManager::enterFullScreenForElement(WTF::StringImpl *this, WebCore::Element *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebKit *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WebCore::Quirks *v30;
  WTF::StringImpl *v31;
  WebKit::PlaybackSessionManager *v32;
  WebCore::HTMLMediaElement *v33;
  WebCore::Element *v34;
  uint64_t v35;
  const Node *v36;
  uint64_t v37;
  WebCore::Quirks *v38;
  char v39;
  void *v40;
  __int128 v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char v44;
  WTF::StringImpl *v45;

  if (!a2)
    return this;
  v5 = (uint64_t)this;
  v7 = *((_QWORD *)this + 19);
  v6 = *((_QWORD *)this + 20);
  *(_QWORD *)&v41 = "WebFullScreenManager";
  *((_QWORD *)&v41 + 1) = 21;
  v42 = (WTF::StringImpl *)"enterFullScreenForElement";
  v43 = v6;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 104))(&v45, a2);
  v9 = *((_QWORD *)a2 + 13);
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v10 = *(_DWORD *)(v9 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD **)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 52);
      if (!(_DWORD)v12)
      {
LABEL_14:
        v11 = 0;
LABEL_15:
        v13 = (WTF::StringImpl **)(v11 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      v11 = (_QWORD *)(v9 + 32);
      LODWORD(v12) = v10 >> 5;
      if (!(_DWORD)v12)
        goto LABEL_14;
    }
    v14 = *MEMORY[0x1E0DD5FA8];
    v12 = v12;
    while (1)
    {
      v15 = *v11;
      if (*v11 == v14
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(v14 + 24) && *(_QWORD *)(v15 + 32) == *(_QWORD *)(v14 + 32))
      {
        goto LABEL_15;
      }
      v11 += 2;
      if (!--v12)
        goto LABEL_14;
    }
  }
  v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_16:
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&v41, &v45, v13);
  v16 = v45;
  v45 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(WebCore::Element **)(v5 + 80) != a2)
  {
    WebKit::WebFullScreenManager::clearElement(v5, v8);
    *((_DWORD *)a2 + 6) += 2;
    v17 = *(_QWORD *)(v5 + 80);
    *(_QWORD *)(v5 + 80) = a2;
    if (v17)
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
    v18 = (WebKit *)WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)a2 + 2, (uint64_t)a2);
    v20 = (unsigned int *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v22 = *(unsigned int **)(v5 + 88);
    *(_QWORD *)(v5 + 88) = v20;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v22 + 4), v19);
        v18 = (WebKit *)WTF::fastFree((WTF *)v22, v40);
      }
    }
    WebKit::eventsToObserve(v18, (WTF::StringImpl *)v19);
    for (i = 0; i != 24; i += 8)
    {
      v26 = *(_QWORD *)(v5 + 80);
      ++*(_DWORD *)(v5 + 16);
      v45 = (WTF::StringImpl *)v5;
      LOBYTE(v41) = 1;
      *(_WORD *)((char *)&v41 + 1) = 0;
      BYTE3(v41) = 0;
      *((_QWORD *)&v41 + 1) = 0;
      (*(void (**)(uint64_t, char *, WTF::StringImpl **, __int128 *))(*(_QWORD *)v26 + 24))(v26, &_MergedGlobals_100[i + 24], &v45, &v41);
      v27 = *((_QWORD *)&v41 + 1);
      *((_QWORD *)&v41 + 1) = 0;
      if (v27)
        WTF::RefCounted<WebCore::AbortSignal>::deref((_DWORD *)(v27 + 24));
      v28 = v45;
      v45 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  LOBYTE(v41) = 0;
  v44 = 0;
  *(_QWORD *)((char *)&v41 + 4) = 0;
  v42 = 0;
  LOBYTE(v43) = 0;
  v29 = *((_QWORD *)WebKit::WebPage::videoPresentationManager(*(WebKit::WebPage **)(v5 + 72)) + 11);
  if (!v29 || !*(_QWORD *)(v29 + 8))
    goto LABEL_45;
  v30 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 40) + 8) + 688);
  if (!v30)
    v30 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v5 + 80)
                                                                                               + 40)
                                                                                   + 8));
  if ((WebCore::Quirks::blocksEnteringStandardFullscreenFromPictureInPictureQuirk(v30) & 1) == 0)
  {
LABEL_45:
    v32 = WebKit::WebPage::playbackSessionManager(*(WebKit::WebPage **)(v5 + 72));
    v33 = (WebCore::HTMLMediaElement *)WebKit::PlaybackSessionManager::currentPlaybackControlsElement(v32);
    if (v33)
      WebCore::HTMLMediaElement::prepareForVideoFullscreenStandby(v33);
    *(_QWORD *)(v5 + 24) = WebKit::screenRectOfContents(*(WebCore::Element **)(v5 + 80), v34);
    *(_QWORD *)(v5 + 32) = v35;
    WebKit::WebFullScreenManager::updateMainVideoElement((WebKit::WebFullScreenManager *)v5, v35, v36);
    WebKit::WebPage::addReasonsToDisallowLayoutViewportHeightExpansion(*(IPC::Encoder **)(v5 + 72), 1);
    v37 = *(_QWORD *)(v5 + 72);
    v38 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 40) + 8) + 688);
    if (!v38)
      v38 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v5 + 80)
                                                                                                 + 40)
                                                                                     + 8));
    v39 = WebCore::Quirks::blocksReturnToFullscreenFromPictureInPictureQuirk(v38);
    WebKit::InjectedBundlePageFullScreenClient::enterFullScreenForElement(v37 + 384, v37, a2, v39, a3, (uint64_t)&v41);
    if (a3 == 4)
    {
      WebKit::WebFullScreenManager::willEnterFullScreen((WebKit::WebFullScreenManager *)v5);
      WebKit::WebFullScreenManager::didEnterFullScreen((WebKit::WebFullScreenManager *)v5);
      *(_BYTE *)(v5 + 146) = 1;
    }
  }
  if (v44)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v43);
  this = v42;
  v42 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v31);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WebCore::Element *WebKit::screenRectOfContents(WebCore::Element *this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  WebCore::ScrollView *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  const FloatRect *v14;
  uint64_t v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;

  if (this)
  {
    v2 = this;
    v3 = *((_QWORD *)this + 8);
    if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v3 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_18;
      if ((*(_BYTE *)((v3 & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0
        && *(_QWORD *)(WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)(v3 & 0xFFFFFFFFFFFFLL)) + 256))
      {
        v4 = *((_QWORD *)v2 + 8);
        if ((v4 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19749D0D0);
        }
        v5 = WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)(v4 & 0xFFFFFFFFFFFFLL));
        v6 = WebCore::RenderLayerBacking::compositedBounds(*(WebCore::RenderLayerBacking **)(v5 + 256));
        *(float *)&v17 = (float)(int)v6 * 0.015625;
        *((float *)&v17 + 1) = (float)SHIDWORD(v6) * 0.015625;
        *((float *)&v17 + 2) = *(float *)&v17 + (float)((float)v7 * 0.015625);
        *((float *)&v17 + 3) = *((float *)&v17 + 1);
        *(float *)&v18 = *((float *)&v17 + 2);
        *((float *)&v18 + 1) = *((float *)&v17 + 1) + (float)((float)v8 * 0.015625);
        *((float *)&v18 + 2) = *(float *)&v17;
        *((float *)&v18 + 3) = *((float *)&v18 + 1);
        if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19749D0F0);
        }
        WebCore::RenderObject::localToContainerQuad();
        v17 = v16[0];
        v18 = v16[1];
        if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) == 0
          || (*(_BYTE *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          v9 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x18)
                                                                                       + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248);
          WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v17);
          *(_QWORD *)&v16[0] = __PAIR64__(v11, v10);
          *((_QWORD *)&v16[0] + 1) = __PAIR64__(v13, v12);
          *(_QWORD *)&v16[0] = WebCore::enclosingIntRect((WebCore *)v16, v14);
          *((_QWORD *)&v16[0] + 1) = v15;
          return (WebCore::Element *)WebCore::ScrollView::contentsToScreen(v9, (const WebCore::IntRect *)v16);
        }
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x19749D0B0);
      }
    }
    return (WebCore::Element *)WebCore::Element::screenRect(v2);
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::updateMainVideoElement(WebKit::WebFullScreenManager *this, uint64_t a2, const Node *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t AncestorSibling;
  uint64_t v10;
  float v11;
  float i;
  const Node *v13;
  uint64_t v14;
  BOOL v15;
  float v16;
  float v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  char v27;

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
    {
      *(_DWORD *)(v4 + 24) += 2;
      goto LABEL_5;
    }
    v23 = 0;
    v6 = *(_QWORD *)(v4 + 80);
    if (!v6)
      return WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v23);
    v7 = MEMORY[0x1E0DD6158];
    while (1)
    {
      v8 = *(_WORD *)(v6 + 28);
      if ((v8 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(*(_QWORD *)v7 + 24))
        break;
      if ((v8 & 4) == 0 || (AncestorSibling = *(_QWORD *)(v6 + 80)) == 0)
      {
        if (v6 == v4)
          return WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v23);
        AncestorSibling = *(_QWORD *)(v6 + 56);
        if (!AncestorSibling)
          AncestorSibling = WebCore::NodeTraversal::nextAncestorSibling((WebCore::NodeTraversal *)v6, (const Node *)v4, a3);
      }
      v6 = AncestorSibling;
      if (!AncestorSibling)
        return WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v23);
    }
    v10 = 0;
    v11 = 0.0;
    for (i = 0.0; ; i = v17)
    {
      WebCore::Element::boundingAbsoluteRectWithoutLayout((WebCore::Element *)v6);
      v14 = v24;
      if (v27)
        v15 = v24 == 0;
      else
        v15 = 1;
      if (v15)
      {
        v16 = v11;
        v17 = i;
        goto LABEL_40;
      }
      v16 = v25;
      if (v25 > 0.0 && ((v17 = v26, v26 > 0.0) ? (v18 = (float)(v25 * v26) > (float)(v11 * i)) : (v18 = 0), v18))
      {
        *(_DWORD *)(v6 + 24) += 2;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
              if (!v27)
              {
                v10 = v6;
                goto LABEL_40;
              }
              v14 = v24;
              v10 = v6;
              if (!v24)
                goto LABEL_40;
              goto LABEL_38;
            }
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        v10 = v6;
      }
      else
      {
        v17 = i;
        v16 = v11;
      }
LABEL_38:
      v19 = *(_DWORD *)(v14 + 16);
      if (!v19)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v14 + 16) = v19 - 1;
LABEL_40:
      v20 = *(_QWORD *)(v6 + 80);
      if (!v20
        && (v6 == v4
         || (v20 = *(_QWORD *)(v6 + 56)) == 0
         && (v20 = WebCore::NodeTraversal::nextAncestorSibling((WebCore::NodeTraversal *)v6, (const Node *)v4, v13)) == 0))
      {
LABEL_60:
        v23 = v10;
        v4 = v10;
        goto LABEL_6;
      }
      v6 = v20;
      while (1)
      {
        v21 = *(_WORD *)(v6 + 28);
        if ((v21 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(*(_QWORD *)v7 + 24))
          break;
        if ((v21 & 4) == 0 || (v22 = *(_QWORD *)(v6 + 80)) == 0)
        {
          if (v6 == v4)
            goto LABEL_60;
          v22 = *(_QWORD *)(v6 + 56);
          if (!v22)
            v22 = WebCore::NodeTraversal::nextAncestorSibling((WebCore::NodeTraversal *)v6, (const Node *)v4, v13);
        }
        v6 = v22;
        if (!v22)
          goto LABEL_60;
      }
      v11 = v16;
    }
  }
LABEL_5:
  v23 = v4;
LABEL_6:
  result = WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&v23);
  v23 = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFullScreenManager::willEnterFullScreen(WebKit::WebFullScreenManager *this)
{
  IPC::Encoder *result;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Element *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21[4];

  result = (IPC::Encoder *)*((_QWORD *)this + 10);
  if (!result)
    return result;
  v4 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  v21[0] = (uint64_t)"WebFullScreenManager";
  v21[1] = 21;
  v21[2] = (uint64_t)"willEnterFullScreen";
  v21[3] = v3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 104))(&v20);
  v6 = *(_QWORD *)(*((_QWORD *)this + 10) + 104);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if (!(_DWORD)v9)
      {
LABEL_14:
        v8 = 0;
LABEL_15:
        v10 = (WTF::StringImpl **)(v8 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      v8 = (_QWORD *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
      if (!(_DWORD)v9)
        goto LABEL_14;
    }
    v11 = *MEMORY[0x1E0DD5FA8];
    v9 = v9;
    while (1)
    {
      v12 = *v8;
      if (*v8 == v11
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 24) && *(_QWORD *)(v12 + 32) == *(_QWORD *)(v11 + 32))
      {
        goto LABEL_15;
      }
      v8 += 2;
      if (!--v9)
        goto LABEL_14;
    }
  }
  v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_16:
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)v21, &v20, v10);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)this + 9);
  if (!*(_BYTE *)(v14 + 568))
  {
    *(_BYTE *)(v14 + 568) = 1;
    WebKit::WebPage::resetViewportDefaultConfiguration((WebKit::WebPage *)v14, *(WebKit::WebFrame **)(v14 + 88), *(unsigned __int8 *)(v14 + 1696));
  }
  v15 = *((_QWORD *)this + 10);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 8) + 1992))
    WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(v15 + 40) + 8));
  if ((WebCore::FullscreenManager::willEnterFullscreen() & 1) == 0)
    return (IPC::Encoder *)WebKit::WebFullScreenManager::close((uint64_t)this);
  v16 = *((_QWORD *)this + 10);
  if (!v16)
    return (IPC::Encoder *)WebKit::WebFullScreenManager::close((uint64_t)this);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
  *(_DWORD *)(v17 + 24) += 2;
  v21[0] = v17;
  WebCore::Document::updateLayout();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v21);
  *((_QWORD *)this + 5) = WebKit::screenRectOfContents(*((WebCore::Element **)this + 10), v18);
  *((_QWORD *)this + 6) = v19;
  return WebKit::InjectedBundlePageFullScreenClient::beganEnterFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(*((_QWORD *)this + 9) + 384), *((WebKit::WebPage **)this + 9), (WebKit::WebFullScreenManager *)((char *)this + 24), (WebKit::WebFullScreenManager *)((char *)this + 40));
}

uint64_t WebKit::WebFullScreenManager::didEnterFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::FullscreenManager *v14;
  WebKit::PlaybackSessionManager *v15;
  uint64_t v16;
  WebCore::HTMLVideoElement *v17;
  uint64_t v18;
  const Node *v19;
  WTF::StringImpl *v20;
  _QWORD v21[4];

  result = *((_QWORD *)this + 10);
  if (!result)
    return result;
  v4 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  v21[0] = "WebFullScreenManager";
  v21[1] = 21;
  v21[2] = "didEnterFullScreen";
  v21[3] = v3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 104))(&v20);
  v6 = *(_QWORD *)(*((_QWORD *)this + 10) + 104);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if (!(_DWORD)v9)
      {
LABEL_14:
        v8 = 0;
LABEL_15:
        v10 = (WTF::StringImpl **)(v8 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      v8 = (_QWORD *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
      if (!(_DWORD)v9)
        goto LABEL_14;
    }
    v11 = *MEMORY[0x1E0DD5FA8];
    v9 = v9;
    while (1)
    {
      v12 = *v8;
      if (*v8 == v11
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 24) && *(_QWORD *)(v12 + 32) == *(_QWORD *)(v11 + 32))
      {
        goto LABEL_15;
      }
      v8 += 2;
      if (!--v9)
        goto LABEL_14;
    }
  }
  v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_16:
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)v21, &v20, v10);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 1992);
  if (!v14)
    v14 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8));
  if ((WebCore::FullscreenManager::didEnterFullscreen(v14) & 1) == 0)
    return WebKit::WebFullScreenManager::close((uint64_t)this);
  v15 = WebKit::WebPage::playbackSessionManager(*((WebKit::WebPage **)this + 9));
  v16 = WebKit::PlaybackSessionManager::currentPlaybackControlsElement(v15);
  if (v16)
  {
    if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
      v17 = (WebCore::HTMLVideoElement *)v16;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  WebKit::WebFullScreenManager::setPIPStandbyElement(this, v17);
  return WebKit::WebFullScreenManager::updateMainVideoElement(this, v18, v19);
}

uint64_t WebKit::WebFullScreenManager::exitFullScreenForElement(WebKit::WebFullScreenManager *this, WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t i;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35[4];
  WTF *v36[2];
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 buf;
  const char *v41;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 19);
  if (a2)
  {
    v5 = *((_QWORD *)this + 20);
    *(_QWORD *)&buf = "WebFullScreenManager";
    *((_QWORD *)&buf + 1) = 21;
    v41 = "exitFullScreenForElement";
    v42[0] = v5;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 104))(v35, a2);
    v7 = *((_QWORD *)a2 + 13);
    if (!v7 || !*(_QWORD *)(v7 + 24))
    {
      v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      goto LABEL_21;
    }
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if (!(_DWORD)v10)
      {
LABEL_19:
        v9 = 0;
LABEL_20:
        v11 = (WTF::StringImpl **)(v9 + 1);
LABEL_21:
        if (*(_BYTE *)(v4 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&buf, v35, v11);
        v18 = v35[0];
        v35[0] = 0;
        if (!v18)
          goto LABEL_63;
        goto LABEL_60;
      }
    }
    else
    {
      v9 = (_QWORD *)(v7 + 32);
      LODWORD(v10) = v8 >> 5;
      if (!(_DWORD)v10)
        goto LABEL_19;
    }
    v16 = *MEMORY[0x1E0DD5FA8];
    v10 = v10;
    while (1)
    {
      v17 = *v9;
      if (*v9 == v16
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(v16 + 24) && *(_QWORD *)(v17 + 32) == *(_QWORD *)(v16 + 32))
      {
        goto LABEL_20;
      }
      v9 += 2;
      if (!--v10)
        goto LABEL_19;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  v35[0] = (WTF::StringImpl *)"WebFullScreenManager";
  v35[1] = (WTF::StringImpl *)21;
  v35[2] = (WTF::StringImpl *)"exitFullScreenForElement";
  v35[3] = v12;
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v35);
    WTF::String::String((WTF::String *)&v37, "null");
    *(_QWORD *)&buf = v38;
    v36[0] = v37;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v36, &v39);
    if (!v39)
    {
      __break(0xC471u);
      return result;
    }
    v15 = v37;
    v37 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v19 = v38;
    v38 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = qword_1ECE710F0;
    v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v22 = v36[0] ? (char *)v36[0] + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = v36[0];
      v36[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = (WTF *)WTF::fastFree(v21, v6);
        else
          --*(_DWORD *)v21;
      }
    }
    if (WebKit2LogFullscreen)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers(v21);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v29 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v30 = *v28;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v35);
                LODWORD(v41) = 0;
                WTF::String::String((WTF::String *)v42, "null");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v36, (uint64_t)&buf, 2uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v30 + 16))(v30, &WebKit2LogFullscreen, 0, v36);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v31);
                for (i = 24; i != -8; i -= 16)
                {
                  v33 = *(WTF::StringImpl **)((char *)&buf + i);
                  *(_QWORD *)((char *)&buf + i) = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v29);
            }
            v34 = __ldxr(v23);
            if (v34 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v18 = v39;
    v39 = 0;
    if (v18)
    {
LABEL_60:
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
LABEL_63:
  WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion(*((_QWORD *)this + 9), 1);
  WebKit::InjectedBundlePageFullScreenClient::exitFullScreenForElement((WebKit::InjectedBundlePageFullScreenClient *)(*((_QWORD *)this + 9) + 384), *((WebKit::WebPage **)this + 9), a2, *((_BYTE *)this + 146));
  if (*((_BYTE *)this + 146))
  {
    WebKit::WebFullScreenManager::willExitFullScreen(this);
    WebKit::WebFullScreenManager::didExitFullScreen(this);
    *((_BYTE *)this + 146) = 0;
  }
  *(_QWORD *)&buf = 0;
  return WebKit::WebFullScreenManager::setMainVideoElement((uint64_t)this, (WTF::StringImpl *)&buf);
}

IPC::Encoder *WebKit::WebFullScreenManager::willExitFullScreen(WebKit::WebFullScreenManager *this)
{
  IPC::Encoder *result;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::Element *v14;
  uint64_t v15;
  WebCore::FullscreenManager *v16;
  WTF::StringImpl *v17;
  _QWORD v18[4];

  result = (IPC::Encoder *)*((_QWORD *)this + 10);
  if (!result)
    return result;
  v4 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  v18[0] = "WebFullScreenManager";
  v18[1] = 21;
  v18[2] = "willExitFullScreen";
  v18[3] = v3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 104))(&v17);
  v6 = *(_QWORD *)(*((_QWORD *)this + 10) + 104);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if (!(_DWORD)v9)
      {
LABEL_14:
        v8 = 0;
LABEL_15:
        v10 = (WTF::StringImpl **)(v8 + 1);
        goto LABEL_16;
      }
    }
    else
    {
      v8 = (_QWORD *)(v6 + 32);
      LODWORD(v9) = v7 >> 5;
      if (!(_DWORD)v9)
        goto LABEL_14;
    }
    v11 = *MEMORY[0x1E0DD5FA8];
    v9 = v9;
    while (1)
    {
      v12 = *v8;
      if (*v8 == v11
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 24) && *(_QWORD *)(v12 + 32) == *(_QWORD *)(v11 + 32))
      {
        goto LABEL_15;
      }
      v8 += 2;
      if (!--v9)
        goto LABEL_14;
    }
  }
  v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_16:
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)v18, &v17, v10);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebKit::WebFullScreenManager::setPIPStandbyElement(this, 0);
  *((_QWORD *)this + 5) = WebKit::screenRectOfContents(*((WebCore::Element **)this + 10), v14);
  *((_QWORD *)this + 6) = v15;
  v16 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 1992);
  if (!v16)
    v16 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8));
  if ((WebCore::FullscreenManager::willExitFullscreen(v16) & 1) != 0)
    return WebKit::InjectedBundlePageFullScreenClient::beganExitFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(*((_QWORD *)this + 9) + 384), *((WebKit::WebPage **)this + 9), (WebKit::WebFullScreenManager *)((char *)this + 40), (WebKit::WebFullScreenManager *)((char *)this + 24));
  else
    return (IPC::Encoder *)WebKit::WebFullScreenManager::close((uint64_t)this);
}

uint64_t WebKit::WebFullScreenManager::didExitFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::FullscreenManager *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  WebCore::Document *v20;
  WebCore::FullscreenManager *v21;
  WebCore::FullscreenManager *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF::StringImpl *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;

  v2 = *((_QWORD *)this + 9);
  if (*(_BYTE *)(v2 + 568))
  {
    *(_BYTE *)(v2 + 568) = 0;
    WebKit::WebPage::resetViewportDefaultConfiguration((WebKit::WebPage *)v2, *(WebKit::WebFrame **)(v2 + 88), *(unsigned __int8 *)(v2 + 1696));
  }
  result = *((_QWORD *)this + 10);
  if (result)
  {
    v5 = *((_QWORD *)this + 19);
    v4 = *((_QWORD *)this + 20);
    v28 = "WebFullScreenManager";
    v29 = 21;
    v30 = "didExitFullScreen";
    v31 = v4;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 104))(&v27);
    v7 = *(_QWORD *)(*((_QWORD *)this + 10) + 104);
    if (!v7 || !*(_QWORD *)(v7 + 24))
    {
      v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_18:
      if (*(_BYTE *)(v5 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&v28, &v27, v11);
      v14 = v27;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v6);
        else
          *(_DWORD *)v14 -= 2;
      }
      v28 = 0;
      v29 = 0;
      WebCore::Page::setFullscreenInsets();
      WebCore::Page::setFullscreenAutoHideDuration();
      v15 = *((_QWORD *)this + 10);
      v28 = 0;
      v29 = 0;
      do
      {
        v16 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 8) + 1992);
        if (!v16)
          v16 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(v15 + 40) + 8));
        if (WebCore::FullscreenManager::fullscreenElement(v16) != v15)
          break;
        v17 = HIDWORD(v29);
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)&v28, v15);
        }
        else
        {
          v18 = v28;
          *(_DWORD *)(v15 + 24) += 2;
          *(_QWORD *)&v18[8 * v17] = v15;
          HIDWORD(v29) = v17 + 1;
        }
        v19 = WebCore::Document::parentDocument(*(WebCore::Document **)(*(_QWORD *)(v15 + 40) + 8));
        if (!v19)
          break;
        v20 = (WebCore::Document *)v19;
        v21 = *(WebCore::FullscreenManager **)(v19 + 1992);
        if (!v21)
          v21 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(v20);
        v15 = WebCore::FullscreenManager::fullscreenElement(v21);
      }
      while (v15);
      v22 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 1992);
      if (!v22)
        v22 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8));
      WebCore::FullscreenManager::didExitFullscreen(v22);
      while (HIDWORD(v29))
      {
        v24 = HIDWORD(v29) - 1;
        v25 = *(WTF::StringImpl **)&v28[8 * v24];
        *(_QWORD *)&v28[8 * v24] = 0;
        v27 = v25;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v28[8 * v24]);
        HIDWORD(v29) = v24;
        WebCore::Element::scrollIntoViewIfNotVisible(v27);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v27);
      }
      WebKit::WebFullScreenManager::clearElement((uint64_t)this, v23);
      return WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v26);
    }
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if (!(_DWORD)v10)
      {
LABEL_16:
        v9 = 0;
LABEL_17:
        v11 = (WTF::StringImpl **)(v9 + 1);
        goto LABEL_18;
      }
    }
    else
    {
      v9 = (_QWORD *)(v7 + 32);
      LODWORD(v10) = v8 >> 5;
      if (!(_DWORD)v10)
        goto LABEL_16;
    }
    v12 = *MEMORY[0x1E0DD5FA8];
    v10 = v10;
    while (1)
    {
      v13 = *v9;
      if (*v9 == v12
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(v12 + 24) && *(_QWORD *)(v13 + 32) == *(_QWORD *)(v12 + 32))
      {
        goto LABEL_17;
      }
      v9 += 2;
      if (!--v10)
        goto LABEL_16;
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::close(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _QWORD v6[4];

  if (!*(_BYTE *)(this + 145))
  {
    v1 = this;
    *(_BYTE *)(this + 145) = 1;
    v2 = *(_QWORD *)(this + 152);
    v3 = *(_QWORD *)(this + 160);
    v6[0] = "WebFullScreenManager";
    v6[1] = 21;
    v6[2] = "close";
    v6[3] = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    v4 = *(_QWORD *)(v1 + 72);
    WebKit::WebPage::removeReasonsToDisallowLayoutViewportHeightExpansion(v4, 1);
    WebKit::InjectedBundlePageFullScreenClient::closeFullScreen((WebKit::InjectedBundlePageFullScreenClient *)(v4 + 384), (WebKit::WebPage *)v4);
    this = WebKit::WebFullScreenManager::invalidate((WebKit::WebFullScreenManager *)v1, v5);
    *(_BYTE *)(v1 + 145) = 0;
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::setAnimatingFullScreen(uint64_t this)
{
  uint64_t v1;
  WebCore::Document *v2;
  WebCore::FullscreenManager *v3;

  v1 = *(_QWORD *)(this + 80);
  if (v1)
  {
    v2 = *(WebCore::Document **)(*(_QWORD *)(v1 + 40) + 8);
    v3 = (WebCore::FullscreenManager *)*((_QWORD *)v2 + 249);
    if (!v3)
      v3 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(v2);
    return WebCore::FullscreenManager::setAnimatingFullscreen(v3);
  }
  return this;
}

WTF::StringImpl *WebKit::WebFullScreenManager::requestRestoreFullScreen(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36[4];
  WTF *v37[2];
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  char v42;
  __int128 buf;
  const char *v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 10))
    return result;
  v1 = *((_QWORD *)result + 11);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      v4 = *((_QWORD *)result + 19);
      v3 = *((_QWORD *)result + 20);
      *(_QWORD *)&buf = "WebFullScreenManager";
      *((_QWORD *)&buf + 1) = 21;
      v44 = "requestRestoreFullScreen";
      v45[0] = v3;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v2 + 104))(v36, v2);
      v6 = *(_QWORD *)(v2 + 104);
      if (!v6 || !*(_QWORD *)(v6 + 24))
      {
        v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_23:
        if (*(_BYTE *)(v4 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>((WTF::Logger::LogSiteIdentifier *)&buf, v36, v10);
        v17 = v36[0];
        v36[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v5);
          else
            *(_DWORD *)v17 -= 2;
        }
        v41 = 0;
        v42 = 0;
        WebCore::UserGestureIndicator::UserGestureIndicator();
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1992))
          WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8));
        *(_DWORD *)(v2 + 24) += 2;
        v36[0] = (WTF::StringImpl *)v2;
        v37[0] = 0;
        WebCore::FullscreenManager::requestFullscreenForElement();
        v18 = v37[0];
        v37[0] = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 4) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v18 + 16))(v18);
          else
            --*((_DWORD *)v18 + 4);
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v36);
        result = (WTF::StringImpl *)MEMORY[0x19AEB0CA8](&buf);
        if (*(_DWORD *)(v2 + 24) == 2)
        {
          if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
            return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v2);
        }
        else
        {
          *(_DWORD *)(v2 + 24) -= 2;
        }
        return result;
      }
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD **)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
        if (!(_DWORD)v9)
        {
LABEL_21:
          v8 = 0;
LABEL_22:
          v10 = (WTF::StringImpl **)(v8 + 1);
          goto LABEL_23;
        }
      }
      else
      {
        v8 = (_QWORD *)(v6 + 32);
        LODWORD(v9) = v7 >> 5;
        if (!(_DWORD)v9)
          goto LABEL_21;
      }
      v15 = *MEMORY[0x1E0DD5FA8];
      v9 = v9;
      while (1)
      {
        v16 = *v8;
        if (*v8 == v15
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(v15 + 24) && *(_QWORD *)(v16 + 32) == *(_QWORD *)(v15 + 32))
        {
          goto LABEL_22;
        }
        v8 += 2;
        if (!--v9)
          goto LABEL_21;
      }
    }
  }
  v11 = *((_QWORD *)result + 19);
  v12 = (WTF::StringImpl *)*((_QWORD *)result + 20);
  v36[0] = (WTF::StringImpl *)"WebFullScreenManager";
  v36[1] = (WTF::StringImpl *)21;
  v36[2] = (WTF::StringImpl *)"requestRestoreFullScreen";
  v36[3] = v12;
  if (*(_BYTE *)(v11 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v36);
    WTF::String::String((WTF::String *)&v38, "no element to restore");
    *(_QWORD *)&buf = v39;
    v37[0] = v38;
    result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v37, &v40);
    if (v40)
    {
      v14 = v38;
      v38 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v19 = v39;
      v39 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = qword_1ECE710F0;
      v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v21)
      {
        WTF::String::utf8();
        v23 = v37[0] ? (char *)v37[0] + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v21 = v37[0];
        v37[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            v21 = (WTF *)WTF::fastFree(v21, v22);
          else
            --*(_DWORD *)v21;
        }
      }
      if (WebKit2LogFullscreen)
      {
        v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v25 = *v24;
          if ((v25 & 1) != 0)
            break;
          v26 = __ldaxr(v24);
          if (v26 == v25)
          {
            if (!__stxr(v25 | 1, v24))
            {
              v27 = WTF::Logger::observers(v21);
              v28 = *(unsigned int *)(v27 + 12);
              if ((_DWORD)v28)
              {
                v29 = *(uint64_t **)v27;
                v30 = *(_QWORD *)v27 + 8 * v28;
                do
                {
                  v31 = *v29;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v36);
                  LODWORD(v44) = 0;
                  WTF::String::String((WTF::String *)v45, "no element to restore");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v37, (uint64_t)&buf, 2uLL);
                  (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v31 + 16))(v31, &WebKit2LogFullscreen, 0, v37);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v32);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v34 = *(WTF::StringImpl **)((char *)&buf + i);
                    *(_QWORD *)((char *)&buf + i) = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                  }
                  ++v29;
                }
                while (v29 != (uint64_t *)v30);
              }
              v35 = __ldxr(v24);
              if (v35 == 1)
              {
                if (!__stlxr(0, v24))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = v40;
      v40 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManager::requestExitFullScreen(WebKit::WebFullScreenManager *this)
{
  uint64_t v2;
  WebCore::Document *v3;
  WebCore::FullscreenManager *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::FullscreenManager *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
  {
    v10 = *((_QWORD *)this + 19);
    v11 = *((_QWORD *)this + 20);
    v13 = "WebFullScreenManager";
    v14 = 21;
    v15 = "requestExitFullScreen";
    v16 = v11;
    if (*(_BYTE *)(v10 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30]>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "no element, closing");
    return WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  v3 = (WebCore::Document *)WebCore::Document::topDocument(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8));
  v4 = (WebCore::FullscreenManager *)*((_QWORD *)v3 + 249);
  if (!v4)
    v4 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(v3);
  v5 = WebCore::FullscreenManager::fullscreenElement(v4);
  v6 = *((_QWORD *)this + 19);
  if (!v5)
  {
    v12 = *((_QWORD *)this + 20);
    v13 = "WebFullScreenManager";
    v14 = 21;
    v15 = "requestExitFullScreen";
    v16 = v12;
    if (*(_BYTE *)(v6 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30]>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "top document not in fullscreen, closing");
    return WebKit::WebFullScreenManager::close((uint64_t)this);
  }
  v7 = *((_QWORD *)this + 20);
  v13 = "WebFullScreenManager";
  v14 = 21;
  v15 = "requestExitFullScreen";
  v16 = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
  v8 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8) + 1992);
  if (!v8)
    v8 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8));
  return WebCore::FullscreenManager::cancelFullscreen(v8);
}

uint64_t WebKit::WebFullScreenManager::restoreScrollPosition(uint64_t this)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 72) + 48) + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    WebCore::LocalFrameView::forceLayout(*(WebCore::LocalFrameView **)(v1 + 288));
    return WebCore::LocalFrameView::setScrollPosition();
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::handleEvent(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebKit::WebFullScreenManager *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a3 + 32);
  if (v3 && (*(_BYTE *)(v3 + 22) & 2) != 0 && (*(_WORD *)(v3 + 28) & 8) != 0)
  {
    v4 = (WebKit::WebFullScreenManager *)this;
    v5 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v5 + 2;
    v6 = *(_QWORD *)(this + 80);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
      *(_DWORD *)(v7 + 24) += 2;
      v10 = v7;
      if (v7 + 192 == a2)
      {
        v8 = *(_QWORD *)(v7 + 1992);
        if (!v8)
          v8 = WebCore::Document::ensureFullscreenManager((WebCore::Document *)v7);
        if (*(_QWORD *)(v8 + 56))
        {
          if (v3 == *((_QWORD *)v4 + 10))
          {
            WebKit::WebFullScreenManager::updateMainVideoElement(v4, a2, (const Node *)a3);
          }
          else
          {
            v9 = *((_QWORD *)v4 + 13);
            if (v9 && v3 == *(_QWORD *)(v9 + 8))
            {
              if ((*(_WORD *)(v3 + 28) & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
              {
                this = 96;
                __break(0xC471u);
                return this;
              }
              if (WebCore::HTMLMediaElement::paused((WebCore::HTMLMediaElement *)v3)
                && (WebCore::HTMLMediaElement::seeking((WebCore::HTMLMediaElement *)v3) & 1) == 0)
              {
                WTF::RunLoop::TimerBase::start();
              }
              else
              {
                WebKit::WebFullScreenManager::endTextRecognitionForMainVideoIfNeeded((WebKit::WebPage **)v4);
              }
            }
          }
        }
      }
      this = (uint64_t)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      v5 = *(_DWORD *)(v3 + 24) - 2;
    }
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
  }
  return this;
}

uint64_t WebKit::WebFullScreenManager::endTextRecognitionForMainVideoIfNeeded(WebKit::WebPage **this)
{
  uint64_t result;

  result = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 14));
  if (*((_BYTE *)this + 144))
  {
    result = (uint64_t)WebKit::WebPage::cancelTextRecognitionForVideoInElementFullScreen(this[9]);
    *((_BYTE *)this + 144) = 0;
  }
  return result;
}

uint64_t WebKit::WebIDBConnectionToServer::messageSenderDestinationID(WebKit::WebIDBConnectionToServer *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebIDBConnectionToServer::messageSenderDestinationID(WebKit::WebIDBConnectionToServer *this)
{
  return 0;
}

void WebKit::MediaKeySystemPermissionRequestManager::~MediaKeySystemPermissionRequestManager(WebKit::MediaKeySystemPermissionRequestManager *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::MediaKeySystemPermissionRequestManager::~MediaKeySystemPermissionRequestManager(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;

  *(_QWORD *)this = &off_1E34E0FA0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1)
        {
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
          v6 = *(_QWORD *)(v5 - 8);
          *(_QWORD *)(v5 - 8) = 0;
          if (v6)
          {
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (_DWORD **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (_DWORD *)-1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (v10[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
            else
              --v10[6];
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void WebKit::BlobRegistryProxy::~BlobRegistryProxy(WebKit::BlobRegistryProxy *this)
{
  WebCore::BlobRegistry::~BlobRegistry(this);
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebKit::WebFullScreenManager::operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t WebCore::EventListener::isAttribute(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::jsFunction(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::wrapper(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v5 + 16));
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v6 + 16));
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(_QWORD *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE72E80 && (v2 = *(_DWORD *)(qword_1ECE72E80 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE72E80 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(v3, a1);
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(unsigned int a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t result;

  v4 = qword_1ECE72E80;
  if (qword_1ECE72E80)
  {
    v5 = *(_DWORD *)(qword_1ECE72E80 - 4);
    v6 = *(_DWORD *)(qword_1ECE72E80 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72E80 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE72E80 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = qword_1ECE72E80;
    do
    {
      v12 = (_QWORD *)(v4 + 16 * v9);
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        if (v11)
          v13 = *(_DWORD *)(v11 - 8);
        else
          v13 = 0;
        v14 = (~(*v12 << 32) + *v12) ^ ((~(*v12 << 32) + *v12) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = 1;
        do
        {
          v19 = v17;
          v20 = *(_QWORD *)(v11 + 16 * v17);
          v17 = (v17 + v18++) & v13;
        }
        while (v20);
        *(_OWORD *)(v11 + 16 * v19) = *(_OWORD *)v12;
        if (v12 == a2)
          v10 = v11 + 16 * v19;
      }
      ++v9;
    }
    while (v9 != v5);
    goto LABEL_13;
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

void WebKit::cacheMapDestroyed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;

  if ((byte_1ECE72E72 & 1) != 0)
  {
    v2 = qword_1ECE72E80;
    if (qword_1ECE72E80)
    {
      v4 = *(_DWORD *)(qword_1ECE72E80 - 8);
      v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2) & v4;
      v6 = *(_QWORD *)(v2 + 16 * v5);
      if (v6 != a2)
      {
        v7 = 1;
        while (v6)
        {
          v5 = ((_DWORD)v5 + v7) & v4;
          v6 = *(_QWORD *)(v2 + 16 * v5);
          ++v7;
          if (v6 == a2)
            goto LABEL_9;
        }
        v5 = *(unsigned int *)(v2 - 4);
      }
LABEL_9:
      if (v5 != *(_DWORD *)(v2 - 4))
      {
        *(_QWORD *)(v2 + 16 * v5) = -1;
        v8 = qword_1ECE72E80;
        ++*(_DWORD *)(qword_1ECE72E80 - 16);
        v9 = v8 ? *(_DWORD *)(v8 - 12) - 1 : -1;
        *(_DWORD *)(v8 - 12) = v9;
        if (qword_1ECE72E80)
        {
          v10 = *(_DWORD *)(qword_1ECE72E80 - 4);
          if (6 * *(_DWORD *)(qword_1ECE72E80 - 12) < v10 && v10 >= 9)
            WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(v10 >> 1, 0);
        }
      }
    }
  }
  else
  {
    qword_1ECE72E80 = 0;
    byte_1ECE72E72 = 1;
  }
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess8BlobTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess8BlobSizeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::translate<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0>(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  void *v4;
  WTF *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *a1 = a2;
  WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()((unsigned int **)&v11, a3);
  v5 = v11;
  v11 = 0;
  result = (unsigned int *)a1[1];
  a1[1] = v5;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      WTF::fastFree((WTF *)result, v4);
    }
    result = (unsigned int *)v11;
    v11 = 0;
    if (result)
    {
      do
      {
        v9 = __ldaxr(result);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, result));
      if (!v10)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (_QWORD *)(v6 + 16 * v13);
      if (*v14 != -1)
      {
        if (*v14)
        {
          v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, (_QWORD *)(v6 + 16 * v13));
          v20 = v6 + 16 * v13;
          v21 = *(unsigned int **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              v24 = v19;
              WTF::fastFree((WTF *)v21, v10);
              v19 = v24;
            }
          }
          if (v14 == a3)
            v11 = v19;
        }
        else
        {
          v15 = v6 + 16 * v13;
          v16 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_21;
  }
  v11 = 0;
  result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebDatabaseProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((unint64_t)(v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 16 * v8);
  v12 = result + 1;
  v11 = (unsigned int *)result[1];
  result[1] = 0;
  if (v11)
  {
    do
    {
      v14 = __ldaxr(v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v11));
    if (!v15)
    {
      atomic_store(1u, v11);
      v18 = result;
      v16 = result + 1;
      v17 = a2;
      WTF::fastFree((WTF *)v11, a2);
      v12 = v16;
      a2 = v17;
      result = v18;
    }
  }
  *result = *a2;
  v13 = a2[1];
  a2[1] = 0;
  *v12 = v13;
  return result;
}

unsigned int *WebKit::WebDatabaseProvider::getOrCreate(WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(unsigned int **a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = *a2[1];
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E34E0E20;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v5;
  v6 = (_DWORD *)**a2;
  **a2 = v4;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = **a2;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
  v9 = *(unsigned int **)(v7 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *a1 = v9;
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  bmalloc::api *v1;
  unsigned int v2;
  unsigned int v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = (bmalloc::api *)result;
  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);
    std::unique_ptr<WebCore::IDBClient::IDBConnectionProxy>::reset[abi:sn180100]((WebCore::IDBClient::IDBConnectionProxy **)(result + 24), 0);
    v5 = (unsigned int *)*((_QWORD *)v1 + 1);
    *((_QWORD *)v1 + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v4);
      }
    }
    return bmalloc::api::isoDeallocate(v1, v4);
  }
  return result;
}

WebCore::IDBClient::IDBConnectionProxy *std::unique_ptr<WebCore::IDBClient::IDBConnectionProxy>::reset[abi:sn180100](WebCore::IDBClient::IDBConnectionProxy **a1, WebCore::IDBClient::IDBConnectionProxy *a2)
{
  WebCore::IDBClient::IDBConnectionProxy *result;
  bmalloc::api *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(result, a2);
    return (WebCore::IDBClient::IDBConnectionProxy *)bmalloc::api::isoDeallocate(v4, v5);
  }
  return result;
}

void WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(WebCore::IDBClient::IDBConnectionProxy *this, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::IDBClient::IDBConnectionProxy *v25;
  bmalloc::api *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::IDBClient::IDBConnectionToServer,(WTF::DestructionThread)0>::deref();
  v4 = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 12);
  v6 = (WTF *)*((_QWORD *)this + 13);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_22;
    v13 = (uint64_t *)((char *)v6 + 8 * v4);
    v14 = 8 * v5 - 8 * v4;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  else
  {
    if (v5)
    {
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      v6 = (WTF *)*((_QWORD *)this + 13);
      v4 = *((_QWORD *)this + 11);
    }
    v9 = *((unsigned int *)this + 28);
    if (v4 != v9)
    {
      v10 = (uint64_t *)((char *)v6 + 8 * v4);
      v11 = 8 * v9 - 8 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 13);
LABEL_22:
  if (v6)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v6, a2);
  }
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)(v16 + 24 * i) != -1)
        {
          v19 = v16 + 24 * i;
          v20 = *(_QWORD *)(v19 + 16);
          *(_QWORD *)(v19 + 16) = 0;
          if (v20)
          {
            v21 = (unsigned int *)(v20 + 36);
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, (unsigned int *)(v20 + 36));
              v24 = *(_QWORD *)(v20 + 64);
              *(_QWORD *)(v20 + 64) = 0;
              if (v24)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              v25 = *(WebCore::IDBClient::IDBConnectionProxy **)(v20 + 40);
              *(_QWORD *)(v20 + 40) = 0;
              if (v25)
                WebCore::IDBClient::IDBConnectionProxy::deref(v25);
              *(_QWORD *)v20 = &off_1E34E10F8;
              WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::~Ref((unsigned int **)(v20 + 24));
              WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v20);
              bmalloc::api::isoDeallocate(v26, v27);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v28 = *((_QWORD *)this + 8);
  if (v28)
  {
    v29 = *(unsigned int *)(v28 - 4);
    if ((_DWORD)v29)
    {
      for (j = 0; j != v29; ++j)
      {
        if (*(_QWORD *)(v28 + 24 * j) != -1)
        {
          v31 = v28 + 24 * j;
          v32 = *(unsigned int **)(v31 + 16);
          *(_QWORD *)(v31 + 16) = 0;
          if (v32)
          {
            v33 = v32 + 2;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v32 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v28 - 16), a2);
  }
  v36 = *((_QWORD *)this + 7);
  if (v36)
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(v36, a2);
  v37 = *((_QWORD *)this + 6);
  if (v37)
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(v37, a2);
  v38 = *((_QWORD *)this + 5);
  if (v38)
    WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(v38, a2);
  v39 = *((_QWORD *)this + 4);
  if (v39)
  {
    v40 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v40)
    {
      for (k = 0; k != v40; ++k)
      {
        if (*(_QWORD *)(v39 + 24 * k) != -1)
        {
          v42 = v39 + 24 * k;
          v43 = *(unsigned int **)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v43)
          {
            v44 = v43 + 15;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v43 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 72))(v43);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v39 - 16), a2);
  }
  v47 = *((_QWORD *)this + 3);
  if (v47)
    WTF::fastFree((WTF *)(v47 - 16), a2);
}

uint64_t WebCore::IDBActiveDOMObject::contextDestroyed(WebCore::IDBActiveDOMObject *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 32);
LABEL_5:
  result = WebCore::ContextDestructionObserver::contextDestroyed(this);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

unsigned int **WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::~Ref(unsigned int **result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int **v4;
  WTF::Thread *v5;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
    {
      atomic_store(1u, v1);
      v4 = result;
      v5 = (WTF::Thread *)v1;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v5);
      return v4;
    }
  }
  return result;
}

WTF::Thread *WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF::Thread **a1)
{
  WTF::Thread *result;
  WTF *v2;
  void *v3;

  result = *a1;
  if (result)
  {
    WTF::Thread::~Thread(result);
    return (WTF::Thread *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::RefPtr<WebCore::IDBTransaction,WTF::RawPtrTraits<WebCore::IDBTransaction>,WTF::DefaultRefDerefTraits<WebCore::IDBTransaction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  bmalloc::api *v10;
  void *v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 24 * i) != -1)
      {
        v5 = a1 + 24 * i;
        v6 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v6)
        {
          v7 = (unsigned int *)(v6 + 24);
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, (unsigned int *)(v6 + 24));
            v10 = (bmalloc::api *)MEMORY[0x19AEAE0C8]();
            bmalloc::api::isoDeallocate(v10, v11);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void IPC::ArgumentCoder<std::tuple<WebCore::IDBRequestData const&,unsigned long long,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IDBRequestData const&,unsigned long long,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WebCore::IDBRequestData,void>::encode(a1, *(_QWORD **)a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[6];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = (_QWORD *)(v15 + 24 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          v24 = v22;
          v25 = (_QWORD *)(v15 + 24 * v22 + 8);
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          v27 = *v23;
          *v23 = 0;
          if (v27)
          {
            if (*(_DWORD *)(v27 + 24) == 2)
            {
              if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v27);
            }
            else
            {
              *(_DWORD *)(v27 + 24) -= 2;
            }
          }
          v28 = *v12;
          *v12 = 0;
          *v23 = v28;
          v29 = v4 + 24 * v9;
          *v25 = 0;
          v25[1] = 0;
          v30 = *(_QWORD *)(v29 + 8);
          v29 += 8;
          *(_QWORD *)v29 = 0;
          *v25 = v30;
          LODWORD(v28) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = 0;
          v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v28) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 20) = v28;
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          v32 = *v12;
          *v12 = 0;
          if (v32)
          {
            if (*(_DWORD *)(v32 + 24) == 2)
            {
              if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v32);
            }
            else
            {
              *(_DWORD *)(v32 + 24) -= 2;
            }
          }
          if (v12 == a3)
            v10 = v23;
        }
        else
        {
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)(v14 + 24) == 2)
            {
              if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v14);
            }
            else
            {
              *(_DWORD *)(v14 + 24) -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::GenericHashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>::assignToEmpty<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaKeySystemRequest&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  ++*(_DWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 8 * v8) = a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
            else
              --v27[6];
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_DWORD **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            else
              --v30[6];
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_DWORD **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
            else
              --v16[6];
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *a1;
  if (*a1)
    v4 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    v3 = *a1;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v6 = 0;
  }
  if (v6 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    else
      --*((_DWORD *)result + 6);
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 24 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  void *v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>::customDeleteBucket(a2);
  result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

unsigned int *WTF::GenericHashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[5 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[5 * v2];
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 5;
      v4 -= 40;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::WeakHashMapIteratorBase(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v5 = *a2;
  if (*a2)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = v5 + 40 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v5 + 40 * v6;
  *(_DWORD *)(a1 + 40) = 0;
  WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::skipEmptyBuckets((_QWORD *)a1);
  return a1;
}

_QWORD *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 40;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 40;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::advance(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  *(_QWORD *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 5;
    *(_QWORD *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  result = WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::PeekType const>::skipEmptyBuckets((_QWORD *)a1);
  ++*(_DWORD *)(*(_QWORD *)a1 + 8);
  return result;
}

unsigned int *WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPage>@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  void *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  result = *(unsigned int **)(a1 + 24);
  do
    v6 = __ldaxr(result);
  while (__stlxr(v6 + 1, result));
  do
    v7 = __ldaxr(result);
  while (__stlxr(v7 + 1, result));
  *a2 = result;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

BOOL WTF::WeakHashMap<WebKit::WebPage,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int **v8;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v9 = 0;
      goto LABEL_21;
    }
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      v8 = (unsigned int **)(v3 + 40 * v6);
      if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)*v8 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v8, a2);
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *(_QWORD *)a1;
    v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v18 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13)
            goto LABEL_32;
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_30:
          v21 = (double)v13;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_30;
LABEL_32:
        v21 = (double)v13;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_33:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_25;
        }
LABEL_22:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v9 = 0;
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v9;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int **v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 40 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (unsigned int **)(v5 + 40 * v12);
      if (*v14 != (unsigned int *)-1)
      {
        if (*v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((_QWORD *)(v5 + 40 * v12));
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = (unsigned int **)(v15 + 40 * (v17 & v16));
            v17 = ++v18 + (v17 & v16);
          }
          while (*v20);
          *v20 = 0;
          v21 = *v14;
          *v14 = 0;
          *v20 = v21;
          v22 = v15 + 40 * v19;
          v23 = v5 + 40 * v12;
          v24 = *(_OWORD *)(v23 + 8);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
          *(_OWORD *)(v22 + 8) = v24;
          v25 = *v14;
          *v14 = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v9);
            }
          }
          if (v14 == a3)
            v13 = v20;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(a2);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = result & v9;
    v14 = v8 + 40 * (result & v9);
    v15 = *(unsigned int **)v14;
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = v8 + 40 * v13;
LABEL_10:
    result = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)(v11 + 32) = 0;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v14 = v11;
    }
    result = (uint64_t)WTF::GenericHashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((unsigned int **)v14, a2);
    v16 = *a3;
    *(_BYTE *)(v14 + 16) = *((_BYTE *)a3 + 8);
    *(_QWORD *)(v14 + 8) = v16;
    v17 = a3[2];
    *(_BYTE *)(v14 + 32) = *((_BYTE *)a3 + 24);
    *(_QWORD *)(v14 + 24) = v17;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_23:
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(a1, (unsigned int **)v14);
        v14 = result;
        v22 = *a1;
        if (*a1)
          LODWORD(v25) = *(_DWORD *)(v22 - 4);
        else
          LODWORD(v25) = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_23;
    }
    *(_QWORD *)a4 = v14;
    *(_QWORD *)(a4 + 8) = v22 + 40 * v25;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (v15 != *a2)
    goto LABEL_10;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 4);
  else
    v21 = 0;
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v20 + 40 * v21;
  *(_BYTE *)(a4 + 16) = 0;
  v26 = v8 + 40 * v13;
  v27 = *a3;
  *(_BYTE *)(v26 + 16) = *((_BYTE *)a3 + 8);
  *(_QWORD *)(v26 + 8) = v27;
  v28 = a3[2];
  *(_BYTE *)(v26 + 32) = *((_BYTE *)a3 + 24);
  *(_QWORD *)(v26 + 24) = v28;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

_DWORD *WTF::Mapper<WTF::WeakHashSet<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::WebFrame&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(_DWORD *result, _QWORD **a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;

  v3 = result;
  if (*a2)
  {
    v4 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      v3[2] = v4;
      *(_QWORD *)v3 = v5;
    }
  }
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v6 = (char *)result;
  v8 = v7;
  if (*a2)
    v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if ((_DWORD *)v9 != result)
  {
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      if (v10)
      {
        result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 16), *(_QWORD *)(*(_QWORD *)v6 + 8));
        v11 = *(unsigned int **)(v10 + 16);
        if (v11)
        {
          do
            v13 = __ldaxr(v11);
          while (__stlxr(v13 + 1, v11));
        }
      }
      else
      {
        v11 = 0;
      }
      v12 = v3[3];
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = v11;
      v3[3] = v12 + 1;
      while (1)
      {
        v6 += 8;
        if (v6 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_16;
      }
      v6 = v8;
LABEL_16:
      ;
    }
    while (v6 != (char *)v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(WTF::Function<void ()(WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &)> const&,WebCore::DOMWrapperWorld &)::$_0,void,WebKit::WebFrame &>::call(uint64_t result, WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::DOMWrapperWorld *v13;
  const OpaqueJSContext *v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *GlobalObject;
  OpaqueJSString *v17;
  const OpaqueJSContext *Property;
  const OpaqueJSValue *v19;
  WebKit::JSWebExtensionAPINamespace *v20;
  OpaqueJSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = result;
          v8 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          result = (*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8);
          if ((result & 1) == 0)
          {
            if (*(_QWORD *)(v8[2] + 8))
            {
              v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8)
                                          + 48)
                              + 16);
              result = (*(uint64_t (**)(_QWORD *))(*v9 + 1368))(v9);
              v10 = *(_QWORD *)(v9[2] + 8);
              v11 = v10 ? v10 - 16 : 0;
              v12 = *(_QWORD *)(v11 + 48);
              if (v12)
              {
                ++*(_DWORD *)v12;
                v13 = *(WebCore::DOMWrapperWorld **)(v7 + 8);
                if (*(_BYTE *)(v12 + 1686))
                  v14 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForServiceWorkerWorld(a2, v13);
                else
                  v14 = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a2, v13);
                v15 = v14;
                GlobalObject = JSContextGetGlobalObject(v14);
                v17 = JSStringCreateWithUTF8CString("browser");
                Property = JSObjectGetProperty(v15, GlobalObject, v17, 0);
                if (v17)
                  JSStringRelease(v17);
                if (Property)
                {
                  if (JSValueIsObject(v15, Property))
                  {
                    v20 = WebKit::toWebExtensionAPINamespace(v15, Property, v19);
                    if (v20)
                      goto LABEL_25;
                  }
                }
                v21 = JSStringCreateWithUTF8CString("chrome");
                v22 = JSObjectGetProperty(v15, GlobalObject, v21, 0);
                if (v21)
                  JSStringRelease(v21);
                if (v22)
                {
                  if (JSValueIsObject(v15, v22))
                  {
                    v20 = WebKit::toWebExtensionAPINamespace(v15, v22, v23);
                    if (v20)
                    {
LABEL_25:
                      ++*((_DWORD *)v20 + 12);
                      (*(void (**)(_QWORD, WebKit::WebFrame *, WebKit::JSWebExtensionAPINamespace *))(***(_QWORD ***)(v7 + 16) + 16))(**(_QWORD **)(v7 + 16), a2, v20);
                      if (*((_DWORD *)v20 + 12) == 1)
                        (*(void (**)(uint64_t))(*((_QWORD *)v20 + 5) + 8))((uint64_t)v20 + 40);
                      else
                        --*((_DWORD *)v20 + 12);
                    }
                  }
                }
                return (uint64_t)WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v12);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1)
{
  uint64_t v1;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = qword_1ECE72E78;
  if (!qword_1ECE72E78)
    return 0;
  v4 = *(_DWORD *)(qword_1ECE72E78 - 8);
  v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1) & v4;
  v6 = *(_QWORD *)(v1 + 16 * v5);
  if (v6 != a1)
  {
    v7 = 1;
    while (v6)
    {
      v5 = ((_DWORD)v5 + v7) & v4;
      v6 = *(_QWORD *)(v1 + 16 * v5);
      ++v7;
      if (v6 == a1)
        return v1 + 16 * v5;
    }
    return 0;
  }
  return v1 + 16 * v5;
}

unsigned int **WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref(unsigned int **result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionContextProxy::~WebExtensionContextProxy(result - 2);
    return (unsigned int **)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100)
            v20 = v19 >> 8;
          else
            v20 = WTF::StringImpl::hashSlowCase(v14);
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v24 + 16));
            v30 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v27;
          v28 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v28 + 16));
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v16 + 16));
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v19 = *a2;
      *(_DWORD *)(v19 + 16) = *(_DWORD *)(*a2 + 16) + 1;
      *v9 = v19;
      v17 = v9;
    }
    else
    {
      ++*(_DWORD *)(v10 + 16);
      *v17 = v10;
    }
    v23 = *v4;
    if (*v4)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v4;
    if (*v4)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::expand(v4, v17);
        v17 = result;
        v25 = *v4;
        if (*v4)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    v22 = v25 + 8 * v28;
    v21 = 1;
    goto LABEL_29;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v6 - 4);
  v21 = 0;
  v22 = v6 + 8 * v20;
LABEL_29:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v21;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
            WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v26 + 16));
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(unsigned int **result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionControllerProxy::~WebExtensionControllerProxy(result - 2);
    return (unsigned int **)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(_QWORD *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE72E78 && (v2 = *(_DWORD *)(qword_1ECE72E78 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE72E78 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, a1);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;

  v4 = qword_1ECE72E78;
  if (qword_1ECE72E78)
  {
    v5 = *(_DWORD *)(qword_1ECE72E78 - 4);
    v6 = *(_DWORD *)(qword_1ECE72E78 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72E78 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE72E78 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v9 = 0;
    do
    {
      v12 = (_QWORD *)(v4 + 16 * v11);
      if (*v12 != -1)
      {
        if (*v12)
        {
          v17 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert((_QWORD *)(v4 + 16 * v11), v8);
          v18 = v4 + 16 * v11;
          v19 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              v22 = v17;
              WTF::fastFree((WTF *)v19, v8);
              v17 = v22;
            }
          }
          if (v12 == a2)
            v9 = v17;
        }
        else
        {
          v13 = v4 + 16 * v11;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v8);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
    goto LABEL_21;
  }
  v9 = 0;
  result = 0;
  if (v4)
  {
LABEL_21:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v9;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(_QWORD *a1, void *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (qword_1ECE72E78)
    v2 = *(_DWORD *)(qword_1ECE72E78 - 8);
  else
    v2 = 0;
  v3 = (*a1 + ~(*a1 << 32)) ^ ((*a1 + ~(*a1 << 32)) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((unint64_t)(v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(qword_1ECE72E78 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  v10 = (_QWORD *)(qword_1ECE72E78 + 16 * v8);
  v12 = v10 + 1;
  v11 = (unsigned int *)v10[1];
  v10[1] = 0;
  if (v11)
  {
    do
    {
      v15 = __ldaxr(v11);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v11));
    if (!v16)
    {
      atomic_store(1u, v11);
      v19 = a1;
      v17 = v10 + 1;
      v18 = v10;
      WTF::fastFree((WTF *)v11, a2);
      v12 = v17;
      v10 = v18;
      a1 = v19;
    }
  }
  *v10 = *a1;
  v13 = a1[1];
  a1[1] = 0;
  *v12 = v13;
  return v10;
}

unsigned int *WTF::GenericHashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>::assignToEmpty<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WebKit::WebExtensionControllerProxy&>(unsigned int **a1, uint64_t a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v5 = *(unsigned int **)(a2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  result = *a1;
  *a1 = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF *result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return *(WTF **)(v3 + 16 * v10 + 8);
}

_DWORD *WTF::RefCounted<WebCore::AbortSignal>::deref(_DWORD *result)
{
  bmalloc::api *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (bmalloc::api *)MEMORY[0x19AEAC820](result - 6);
    return (_DWORD *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebFullScreenManager::*&)(void),WebKit::WebFullScreenManager*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [2],WTF::String,char [6],WTF::AtomString,char [3]>(WTF::Logger::LogSiteIdentifier *a1, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  uint64_t i;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl **v31;
  WTF *v33[2];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint8_t buf[16];
  int v44;
  _DWORD v45[4];
  WTF::StringImpl *v46;
  int v47;
  _DWORD v48[4];
  WTF::StringImpl *v49;
  int v50;
  _QWORD v51[3];

  v51[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v36, "<");
  v31 = a2;
  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  WTF::String::String((WTF::String *)&v35, " id=\"");
  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  WTF::String::String((WTF::String *)&v34, "\">");
  v42 = v4;
  *(_QWORD *)buf = v37;
  v33[0] = v36;
  v40 = v5;
  v41 = v35;
  v39 = v34;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v33, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, (uint64_t *)&v39, &v38);
  if (!v38)
  {
    __break(0xC471u);
    return result;
  }
  v8 = v34;
  v34 = 0;
  if (!v8)
  {
LABEL_9:
    if (!v5)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v8, v7);
  if (!v5)
    goto LABEL_15;
LABEL_12:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v7);
  else
    *(_DWORD *)v5 -= 2;
LABEL_15:
  v9 = v35;
  v35 = 0;
  if (!v9)
    goto LABEL_18;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_18:
    if (!v4)
      goto LABEL_24;
LABEL_21:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v9, v7);
  if (v4)
    goto LABEL_21;
LABEL_24:
  v10 = v36;
  v36 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v37;
  v37 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE710F0;
  v13 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v33[0] ? (char *)v33[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = v33[0];
    v33[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = (WTF *)WTF::fastFree(v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebKit2LogFullscreen)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers(v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v44 = 0;
              WTF::String::String((WTF::String *)v45, "<");
              v45[2] = 0;
              v24 = *v31;
              if (*v31)
                *(_DWORD *)v24 += 2;
              v46 = v24;
              v47 = 0;
              WTF::String::String((WTF::String *)v48, " id=\"");
              v48[2] = 0;
              v25 = *a3;
              if (*a3)
                *(_DWORD *)v25 += 2;
              v49 = v25;
              v50 = 0;
              WTF::String::String((WTF::String *)v51, "\">");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 6uLL);
              (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v33);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);
              for (i = 88; i != -8; i -= 16)
              {
                v28 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2)
                    WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v28 -= 2;
                }
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v29 = __ldxr(v16);
          if (v29 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::GPUProcessConnection::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0xC8);
  *a2 = WebKit::GPUProcessConnection::GPUProcessConnection(v4, a1);
  v5 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = v4;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "GPUProcessConnection::create - %p", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t WebKit::GPUProcessConnection::GPUProcessConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::RunLoop *IdentifierInternal;
  IPC::Connection *v7;
  uint64_t v8;
  WebKit::WebProcess *v9;
  unsigned __int8 *v10;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = off_1E34E11B0;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v5;
  IPC::MessageReceiverMap::MessageReceiverMap((_QWORD *)(a1 + 32));
  IdentifierInternal = (WTF::RunLoop *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 48) = IdentifierInternal;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 0;
  v7 = *(IPC::Connection **)(a1 + 24);
  v8 = WTF::RunLoop::current(IdentifierInternal);
  v9 = (WebKit::WebProcess *)IPC::Connection::open(v7, a1, v8);
  v10 = (unsigned __int8 *)WebKit::WebProcess::singleton(v9);
  WebKit::WebProcess::shouldUseRemoteRenderingFor(v10, 8);
  return a1;
}

void WebKit::GPUProcessConnection::~GPUProcessConnection(WebKit::GPUProcessConnection *this)
{
  unsigned __int8 ***v2;
  void *v3;
  WebKit::RemoteAudioSourceProviderManager *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;

  *(_QWORD *)this = off_1E34E11B0;
  v2 = (unsigned __int8 ***)((char *)this + 24);
  IPC::Connection::invalidate(*((_QWORD *)this + 3));
  v4 = (WebKit::RemoteAudioSourceProviderManager *)*((_QWORD *)this + 16);
  if (v4)
    WebKit::RemoteAudioSourceProviderManager::setConnection(v4, 0);
  v5 = *((_QWORD *)this + 22);
  if (v5)
    WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v5, v3);
  v6 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v3);
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v7);
  std::unique_ptr<WebKit::SampleBufferDisplayLayerManager>::reset[abi:sn180100]((WebKit::SampleBufferDisplayLayerManager **)this + 14, 0);
  v9 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::GPUProcessConnection *)((char *)this + 32), v8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v13);
}

{
  WTF *v1;
  void *v2;

  WebKit::GPUProcessConnection::~GPUProcessConnection(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::GPUProcessConnection::didBecomeUnresponsive(uint64_t this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = this;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    this = v4;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  if (*((_QWORD *)v1 + 42) == this)
  {
    v2 = *((_QWORD *)v1 + 4);
    v5 = *(_QWORD *)(this + 48);
    v6 = &v5;
    return IPC::Connection::send<Messages::WebProcessProxy::GPUProcessConnectionDidBecomeUnresponsive>(v2, &v6, 0, 0, 0);
  }
  return this;
}

uint64_t WebKit::GPUProcessConnection::waitForDidInitialize(WebKit::GPUProcessConnection *this)
{
  unsigned __int8 v2;
  uint64_t result;
  uint64_t v4;
  double v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _BYTE buf[12];
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 56))
    goto LABEL_2;
  v4 = *((_QWORD *)this + 3);
  WTF::ApproximateTime::now(this);
  IPC::Connection::waitForMessage((unsigned __int8 ***)v4, 0x35u, 0, 0, (uint64_t)buf, v5 + 3.0);
  v6 = *(_DWORD *)&buf[8];
  if (*(_DWORD *)&buf[8])
  {
    if (*(_DWORD *)&buf[8] != 1)
    {
      v11 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::GPUProcessConnection::sharedResourceCache(v11, v12);
    }
    v7 = buf[0];
  }
  else
  {
    v8 = atomic_load((unsigned __int8 *)(v4 + 33));
    v6 = buf[8];
    if ((v8 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), v4, *(_QWORD *)buf);
      v7 = 0;
      v6 = *(_DWORD *)&buf[8];
    }
    else
    {
      v7 = 1;
    }
    if (v6 == -1)
      goto LABEL_11;
  }
  ((void (*)(char *, _BYTE *))off_1E34E13F0[v6])(&v13, buf);
LABEL_11:
  if (!v7)
  {
LABEL_2:
    v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 33));
    return v2 & 1;
  }
  v9 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v10 = IPC::errorAsString(v7);
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = this;
    v15 = 2082;
    v16 = v10;
    _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "%p - GPUProcessConnection::waitForDidInitialize - failed, error:%{public}s", buf, 0x16u);
  }
  IPC::Connection::invalidate(*((_QWORD *)this + 3));
  result = 0;
  *((_BYTE *)this + 56) = 1;
  return result;
}

uint64_t WebKit::GPUProcessConnection::sharedResourceCache@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = this;
  if (!*(_QWORD *)(this + 64))
  {
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E34E1200;
    this = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v4;
    if (this)
    {
      v5 = (unsigned int *)(this + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)(this + 8));
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  v8 = *(_QWORD *)(v2 + 64);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *a2 = v8;
  return this;
}

unsigned __int8 *WebKit::GPUProcessConnection::didClose(WebKit::GPUProcessConnection *this, IPC::Connection *a2)
{
  NSObject *v3;
  void *v4;
  WebKit::WebProcess *v5;
  unsigned __int8 *result;
  void *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 **v32;
  WTF::ThreadSafeWeakPtrControlBlock *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned int v37;
  unsigned int v39;
  int v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WebKit::WebProcess *v60;
  uint64_t v61;
  WTF *v62;
  unint64_t v63;
  uint64_t v64;
  uint8_t buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - GPUProcessConnection::didClose", buf, 0xCu);
  }
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v61, (uint64_t)this);
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v60);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  result = (unsigned __int8 *)WebKit::WebProcess::gpuProcessConnectionClosed(v5, v4);
  v8 = (unsigned __int8 **)((char *)this + 176);
  v62 = 0;
  v63 = 0;
  v9 = (unsigned __int8 *)this + 192;
  if (__ldaxr((unsigned __int8 *)this + 192))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_9;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEABB3C]((char *)this + 192);
LABEL_9:
  *(_OWORD *)buf = 0uLL;
  if (!*v8)
  {
    v17 = 0;
    LODWORD(v11) = 0;
LABEL_23:
    v18 = 0;
    goto LABEL_24;
  }
  v11 = *((unsigned int *)*v8 - 3);
  if (!(_DWORD)v11)
  {
    v17 = 0;
    goto LABEL_23;
  }
  if (v11 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v12 = (WTF *)WTF::fastMalloc((WTF *)(8 * v11));
  *(_DWORD *)&buf[8] = v11;
  *(_QWORD *)buf = v12;
  v13 = *v8;
  if (!*v8 || !*((_DWORD *)v13 - 3))
  {
    v18 = 0;
    goto LABEL_21;
  }
  v14 = *((unsigned int *)v13 - 1);
  if ((_DWORD)v14)
  {
    v15 = 16 * v14;
    v16 = *v8;
    while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
    {
      v16 += 16;
      v15 -= 16;
      if (!v15)
        goto LABEL_111;
    }
  }
  else
  {
    v16 = *v8;
  }
  v50 = &v13[16 * v14];
  if (v50 == v16)
  {
LABEL_111:
    v18 = 0;
    v17 = 0;
    goto LABEL_112;
  }
  v18 = 0;
  v51 = *(_QWORD *)v16;
LABEL_88:
  v52 = *((_QWORD *)v16 + 1);
  if (__ldaxr((unsigned __int8 *)v52))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v52))
  {
    goto LABEL_92;
  }
  MEMORY[0x19AEABB3C](v52);
LABEL_92:
  if (*(_QWORD *)(v52 + 24))
    ++*(_QWORD *)(v52 + 8);
  else
    v51 = 0;
  v54 = __ldxr((unsigned __int8 *)v52);
  if (v54 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v52))
      goto LABEL_100;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v52);
LABEL_100:
  if (v51)
  {
    v64 = v51;
    LODWORD(v55) = *(_DWORD *)&buf[12];
    if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
    {
      v56 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)buf, *(unsigned int *)&buf[12] + 1, (unint64_t)&v64);
      v55 = *(unsigned int *)&buf[12];
      v57 = *(_QWORD *)buf;
      v58 = *v56;
      *v56 = 0;
      *(_QWORD *)(v57 + 8 * v55) = v58;
    }
    else
    {
      v64 = 0;
      *(_QWORD *)(*(_QWORD *)buf + 8 * *(unsigned int *)&buf[12]) = v51;
    }
    *(_DWORD *)&buf[12] = v55 + 1;
    v59 = v64;
    v64 = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
  }
  else
  {
    v18 = 1;
  }
  while (1)
  {
    v16 += 16;
    if (v16 == v50)
      break;
    v51 = *(_QWORD *)v16;
    if ((unint64_t)(*(_QWORD *)v16 + 1) > 1)
    {
      if (v16 != v50)
        goto LABEL_88;
      break;
    }
  }
  LODWORD(v11) = *(_DWORD *)&buf[8];
  v17 = *(_DWORD *)&buf[12];
LABEL_112:
  if (v11 <= v17)
    goto LABEL_24;
  v12 = *(WTF **)buf;
  if (v17)
  {
    *(_QWORD *)buf = WTF::fastRealloc(*(WTF **)buf, (void *)(8 * v17));
    LODWORD(v11) = v17;
    goto LABEL_24;
  }
  if (*(_QWORD *)buf)
  {
LABEL_21:
    *(_QWORD *)buf = 0;
    *(_DWORD *)&buf[8] = 0;
    WTF::fastFree(v12, v7);
    v17 = 0;
    LODWORD(v11) = 0;
    goto LABEL_24;
  }
  v17 = 0;
LABEL_24:
  v19 = v62;
  if (HIDWORD(v63))
  {
    v20 = 8 * HIDWORD(v63);
    v21 = v62;
    do
    {
      v22 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      v21 = (WTF *)((char *)v21 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  if (v19)
    WTF::fastFree(v19, v7);
  v23 = *(WTF **)buf;
  *(_OWORD *)buf = 0uLL;
  v62 = v23;
  v63 = __PAIR64__(v17, v11);
  WTF::Vector<WTF::Ref<WebKit::GPUProcessConnection::Client,WTF::RawPtrTraits<WebKit::GPUProcessConnection::Client>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection::Client>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v7);
  v25 = *v8;
  if (v18)
  {
    if (v25)
    {
      v26 = *((_DWORD *)v25 - 1);
      if (!v26)
        goto LABEL_53;
      v27 = 0;
      v28 = v26 - 1;
      do
      {
        v29 = v28;
        v30 = &v25[16 * v28];
        if ((unint64_t)(*(_QWORD *)v30 + 1) >= 2)
        {
          v31 = &v25[16 * v28];
          v33 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v31 + 1);
          v32 = (unsigned __int8 **)(v31 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v33))
          {
            *(_QWORD *)v30 = -1;
            v34 = *v32;
            *v32 = 0;
            if (v34)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v24);
            ++v27;
          }
        }
        --v28;
      }
      while (v29);
      v25 = *v8;
      if (v27)
      {
        *((_DWORD *)v25 - 4) += v27;
        v35 = *v8;
        if (*v8)
          v36 = *((_DWORD *)v35 - 3);
        else
          v36 = 0;
        *((_DWORD *)v35 - 3) = v36 - v27;
        v25 = *v8;
      }
      if (v25)
      {
        v37 = *((_DWORD *)v25 - 1);
        if (v37 >= 9 && 6 * *((_DWORD *)v25 - 3) < v37)
        {
          WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::shrinkToBestSize((uint64_t *)this + 22);
          v25 = *v8;
          goto LABEL_55;
        }
LABEL_53:
        *((_DWORD *)this + 46) = 0;
        goto LABEL_56;
      }
    }
    v39 = 0;
    *((_DWORD *)this + 46) = 0;
LABEL_59:
    v40 = v39;
    goto LABEL_60;
  }
LABEL_55:
  *((_DWORD *)this + 46) = 0;
  if (!v25)
  {
    v39 = 0;
    goto LABEL_59;
  }
LABEL_56:
  v39 = *((_DWORD *)v25 - 3);
  v40 = 0x7FFFFFFF;
  if (v39 < 0x7FFFFFFF)
    goto LABEL_59;
LABEL_60:
  *((_DWORD *)this + 47) = 2 * v40;
  v41 = __ldxr(v9);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_64;
  }
  if (__stlxr(0, v9))
LABEL_64:
    WTF::Lock::unlockSlow((WebKit::GPUProcessConnection *)((char *)this + 192));
  if (HIDWORD(v63))
  {
    v42 = v62;
    v43 = 8 * HIDWORD(v63);
    do
    {
      v44 = *(_QWORD *)v42;
      v42 = (WTF *)((char *)v42 + 8);
      (*(void (**)(uint64_t, WebKit::GPUProcessConnection *))(*(_QWORD *)v44 + 40))(v44, this);
      v43 -= 8;
    }
    while (v43);
  }
  WTF::Vector<WTF::Ref<WebKit::GPUProcessConnection::Client,WTF::RawPtrTraits<WebKit::GPUProcessConnection::Client>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection::Client>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v24);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_72;
  }
  MEMORY[0x19AEABB3C]((char *)this + 192);
LABEL_72:
  result = *v8;
  if (*v8)
  {
    *((_QWORD *)this + 22) = 0;
    result = (unsigned __int8 *)WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable((uint64_t)result, v45);
    v47 = *((_QWORD *)this + 22);
    *((_DWORD *)this + 46) = 0;
    if (v47)
    {
      LODWORD(v47) = *(_DWORD *)(v47 - 12);
      if (v47 > 0x7FFFFFFE)
        LODWORD(v47) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v47) = 0;
    *((_DWORD *)this + 46) = 0;
  }
  *((_DWORD *)this + 47) = 2 * v47;
  v48 = __ldxr(v9);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_81;
  }
  if (__stlxr(0, v9))
LABEL_81:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WebKit::GPUProcessConnection *)((char *)this + 192));
  v49 = v61;
  v61 = 0;
  if (v49)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v49 + 16), v45);
  return result;
}

WebKit::SampleBufferDisplayLayerManager *WebKit::GPUProcessConnection::sampleBufferDisplayLayerManager(WebKit::GPUProcessConnection *this)
{
  WebKit::SampleBufferDisplayLayerManager *result;
  WebKit::SampleBufferDisplayLayerManager **v2;
  WebKit::SampleBufferDisplayLayerManager *v3;

  v2 = (WebKit::SampleBufferDisplayLayerManager **)((char *)this + 112);
  result = (WebKit::SampleBufferDisplayLayerManager *)*((_QWORD *)this + 14);
  if (!result)
  {
    v3 = (WebKit::SampleBufferDisplayLayerManager *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    std::unique_ptr<WebKit::SampleBufferDisplayLayerManager>::reset[abi:sn180100](v2, v3);
    return *v2;
  }
  return result;
}

unsigned int *WebKit::GPUProcessConnection::resetAudioMediaStreamTrackRendererInternalUnit(uint64_t a1, uint64_t a2)
{
  WebKit::WebProcess *v3;
  uint64_t *v4;
  WebKit::WebProcess *v6;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager(v3);
  return WebKit::AudioMediaStreamTrackRendererInternalUnitManager::reset((unsigned int **)v4, a2);
}

uint64_t WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(WebKit::GPUProcessConnection *this)
{
  uint64_t v1;
  unsigned int *v3;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v1 = 1;
    WebKit::RemoteVideoFrameObjectHeapProxyProcessor::create(this, (WebKit::RemoteVideoFrameObjectHeapProxyProcessor **)(v1 + 8));
    v3 = (unsigned int *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v1;
    if (v3)
    {
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v3);
      return *((_QWORD *)this + 15);
    }
  }
  return v1;
}

uint64_t WebKit::GPUProcessConnection::mediaPlayerManager(WebKit::GPUProcessConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((_QWORD *)v1 + 48);
}

WebKit::RemoteAudioSourceProviderManager *WebKit::GPUProcessConnection::audioSourceProviderManager(WebKit::GPUProcessConnection *this)
{
  WebKit::RemoteAudioSourceProviderManager *result;
  WebKit::RemoteAudioSourceProviderManager *v3;
  void *v4;
  uint64_t v5;

  result = (WebKit::RemoteAudioSourceProviderManager *)*((_QWORD *)this + 16);
  if (!result)
  {
    v3 = (WebKit::RemoteAudioSourceProviderManager *)WTF::fastMalloc((WTF *)0x30);
    result = WebKit::RemoteAudioSourceProviderManager::RemoteAudioSourceProviderManager(v3);
    v5 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = result;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return (WebKit::RemoteAudioSourceProviderManager *)*((_QWORD *)this + 16);
    }
  }
  return result;
}

uint64_t WebKit::GPUProcessConnection::dispatchMessage(unsigned int **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v5;
  int v6;
  WebKit::WebProcess *v7;
  unsigned int **v8;
  WebKit::WebProcess *v9;
  uint64_t *v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  WebKit::WebProcess *v17;
  unsigned int **v18;
  WebKit::WebProcess *v19;
  WebKit::WebProcess *v20;
  WebKit::WebProcess *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  uint8_t buf[2];
  __int16 v26;

  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 >= 0xE98)
    v5 = 3736;
  v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v5 + 2]);
  if (v6 > 132)
  {
    if (v6 == 133)
    {
      v18 = (unsigned int **)WebKit::GPUProcessConnection::sampleBufferDisplayLayerManager((WebKit::GPUProcessConnection *)this);
      WebKit::SampleBufferDisplayLayerManager::didReceiveLayerMessage(v18, a2, a3);
      return 1;
    }
    if (v6 == 144)
    {
      {
        v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v9 = WebKit::WebProcess::WebProcess(v20);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
      }
      v10 = (uint64_t *)WebKit::WebProcess::supplement<WebKit::UserMediaCaptureManager>(v9);
      if (v10)
        WebKit::UserMediaCaptureManager::didReceiveMessage(v10, a2, a3);
      return 1;
    }
  }
  else
  {
    if (v6 == 22)
    {
      {
        v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v17 = WebKit::WebProcess::WebProcess(v21);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v17;
      }
      WebKit::RemoteMediaPlayerManager::didReceivePlayerMessage(*((WebKit::RemoteMediaPlayerManager **)v17 + 48), (unsigned __int8 **)a2, a3);
      return 1;
    }
    if (v6 == 66)
    {
      {
        v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v7 = WebKit::WebProcess::WebProcess(v19);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
      }
      v8 = (unsigned int **)WebKit::WebProcess::supplement<WebKit::RemoteCDMFactory>((uint64_t)v7);
      WebKit::RemoteCDMFactory::didReceiveSessionMessage(v8, a2, a3);
      return 1;
    }
  }
  if (IPC::MessageReceiverMap::dispatchMessage(this + 4, a2, a3))
    return 1;
  result = 0;
  v12 = *((unsigned __int16 *)a3 + 25);
  if (v12 >= 0xE98)
    v12 = 3736;
  v13 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v12 + 2]);
  if (v13 > 55)
  {
    if (v13 != 138)
    {
      if (v13 != 110)
      {
        if (v13 != 56)
          return result;
        v14 = qword_1ECE71348;
        if (!os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
          return 1;
        v26 = 0;
        v15 = "The RemoteAudioSession object has beed destroyed";
        v16 = (uint8_t *)&v26;
        goto LABEL_40;
      }
      v14 = qword_1ECE71348;
      if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
      {
        v22 = 0;
        v15 = "The RemoteRemoteCommandListener object has beed destroyed";
        v16 = (uint8_t *)&v22;
        goto LABEL_40;
      }
      return 1;
    }
    v14 = qword_1ECE71348;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
      return 1;
    v24 = 0;
    v15 = "The SourceBufferPrivateRemote object has beed destroyed";
    v16 = (uint8_t *)&v24;
LABEL_40:
    _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, v15, v16, 2u);
    return 1;
  }
  if (v13 == 23)
  {
    v14 = qword_1ECE71348;
    if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v15 = "The MediaSourcePrivateRemote object has beed destroyed";
      v16 = buf;
      goto LABEL_40;
    }
    return 1;
  }
  if (v13 == 54)
  {
    v14 = qword_1ECE71348;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
      return 1;
    v23 = 0;
    v15 = "The RemoteAudioHardwareListener object has beed destroyed";
    v16 = (uint8_t *)&v23;
    goto LABEL_40;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::DestroyVisibilityPropagationContextForPage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 41;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, a2[1]);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ConfigureLoggingChannel>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 34;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

WebCore::VP9TestingOverrides *WebKit::GPUProcessConnection::updateMediaConfiguration(WebKit::GPUProcessConnection *this, int a2)
{
  char *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  unsigned int v9;
  int v10;
  WebCore::VP9TestingOverrides *result;
  unsigned int v13;
  int v14;
  unsigned int v16;
  int v17;
  WebCore::SystemBatteryStatusTestingOverrides *v18;
  __int16 v19;
  WebCore::VP9TestingOverrides *v20;
  __int16 v21;
  WebCore::VP9TestingOverrides *v22;
  __int16 v23;
  WebCore::VP9TestingOverrides *v24;
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  void *v33;
  IPC::Encoder *v34;

  v4 = (char *)this + 136;
  v5 = (unsigned __int16 *)WebCore::SystemBatteryStatusTestingOverrides::singleton(this);
  v6 = v5[1];
  v7 = *((unsigned __int8 *)this + 137);
  if (v6 < 0x100 || v7 == 0)
  {
    if (v6 > 0xFF != (v7 != 0))
      goto LABEL_15;
  }
  else if (*v4 != v6)
  {
    goto LABEL_15;
  }
  v5 = (unsigned __int16 *)WebCore::SystemBatteryStatusTestingOverrides::singleton((WebCore::SystemBatteryStatusTestingOverrides *)v5);
  v9 = *v5;
  v10 = *((unsigned __int8 *)this + 139);
  if (v9 < 0x100 || v10 == 0)
  {
    if (v9 > 0xFF == (v10 != 0))
      goto LABEL_16;
    goto LABEL_15;
  }
  if (*((unsigned __int8 *)this + 138) != v9)
LABEL_15:
    a2 = 1;
LABEL_16:
  result = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton((WebCore::VP9TestingOverrides *)v5);
  v13 = *(unsigned __int16 *)result;
  v14 = *((unsigned __int8 *)this + 141);
  if (v13 < 0x100 || v14 == 0)
  {
    if (v13 > 0xFF != (v14 != 0))
      goto LABEL_37;
  }
  else if (*((unsigned __int8 *)this + 140) != v13)
  {
    goto LABEL_37;
  }
  result = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton(result);
  v16 = *((unsigned __int16 *)result + 1);
  if (v16 < 0x100 || !*((_BYTE *)this + 143))
  {
    if (v16 > 0xFF != (*((_BYTE *)this + 143) != 0))
      goto LABEL_37;
LABEL_31:
    result = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton(result);
    v17 = (*((_BYTE *)result + 32) != 0) ^ (*((_BYTE *)this + 168) != 0);
    if (*((_BYTE *)result + 32) && *((_BYTE *)this + 168))
    {
      if (*((double *)this + 18) != *((double *)result + 1) || *((double *)this + 19) != *((double *)result + 2))
        goto LABEL_37;
      v17 = *((double *)this + 20) != *((double *)result + 3);
    }
    if ((a2 | v17) != 1)
      return result;
    goto LABEL_37;
  }
  if (*((unsigned __int8 *)this + 142) == v16)
    goto LABEL_31;
LABEL_37:
  v18 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::singleton(result);
  v19 = *((_WORD *)v18 + 1);
  v20 = (WebCore::VP9TestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::singleton(v18);
  v21 = *(_WORD *)v20;
  v22 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton(v20);
  v23 = *(_WORD *)v22;
  v24 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton(v22);
  v25 = *((_WORD *)v24 + 1);
  v26 = WebCore::VP9TestingOverrides::singleton(v24);
  v27 = *(_OWORD *)(v26 + 24);
  v28 = *(_OWORD *)(v26 + 8);
  *((_WORD *)this + 68) = v19;
  *((_WORD *)this + 69) = v21;
  *((_WORD *)this + 70) = v23;
  *((_WORD *)this + 71) = v25;
  *((_OWORD *)this + 9) = v28;
  *((_OWORD *)this + 10) = v27;
  v29 = *((_QWORD *)this + 3);
  v30 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v30 = 50;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 528) = v30 + 16;
  *(_QWORD *)(v30 + 536) = v30 + 16;
  *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v30 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
  v34 = (IPC::Encoder *)v30;
  IPC::ArgumentCoder<WebKit::MediaOverridesForTesting,void>::encode((IPC::Encoder *)v30, v4);
  IPC::Connection::sendMessageImpl(v29, (uint64_t *)&v34, 0, 0);
  result = v34;
  v34 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (WebCore::VP9TestingOverrides *)WTF::fastFree(v32, v33);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseRenderingBackend>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 48;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  v11 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGraphicsContextGL>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 37;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::GraphicsContextGLAttributes const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGraphicsContextGL>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 46;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  v11 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGPU>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 36;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGPU>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 45;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  v11 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

uint64_t WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12[2];
  uint64_t v13;

  v12[1] = a4;
  v13 = a3;
  v8 = *a1;
  v12[0] = &v13;
  IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteBarcodeDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v8, v12, a2, INFINITY);
  result = WTF::fastMalloc((WTF *)0x28);
  v10 = v13;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34E1220;
  *(_QWORD *)(result + 16) = v10;
  v11 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 24) = v11;
  *(_QWORD *)(result + 32) = a2;
  *a5 = result;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteBarcodeDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  IPC::Encoder *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  unint64_t v59;
  char v60;
  IPC::Encoder *v61;
  unint64_t v62;
  unint64_t v63;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
      if (!v60)
        break;
      v8 = v58;
      v9 = v59;
      v61 = v58;
      v62 = v59;
      v63 = 0;
      v10 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v58;
      if (v10 < (unint64_t)v58)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v59)
        {
          v9 = 0;
          v12 = 0;
          v62 = 0;
        }
        else
        {
          *(_WORD *)((char *)v58 + v11) = 1304;
          v63 = v11 + 2;
        }
      }
      v14 = (char *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v14 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v14 - (char *)v8) > 0xFFFFFFFFFFFFFFF7 || v14 - (char *)v8 + 8 > v9)
        {
          v62 = 0;
        }
        else
        {
          *(_QWORD *)v14 = **a2;
          v63 = v14 - (char *)v8 + 8;
        }
      }
      IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v61, (uint64_t)a2[1]);
      if (v62)
      {
        v17 = v63;
        v18 = *(_QWORD *)(a1 + 64);
        v19 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *(_QWORD *)(a1 + 56);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (v63 <= 0x10)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v22 = 0;
        else
          v22 = v21;
        *(_QWORD *)(a1 + 72) = v22;
        v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v22, v23));
        if (v24 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v60)
      {
        v26 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v26 - (_QWORD)v58;
        if (v26 < (unint64_t)v58)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v59)
          {
            *(_WORD *)((char *)v58 + v27) = 2821;
            v28 = v27 + 2;
          }
        }
        v29 = *(_QWORD *)(a1 + 64);
        v30 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *(_QWORD *)(a1 + 56);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v32 = 0;
        *(_QWORD *)(a1 + 72) = v32;
        v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          __ldaxr(v33);
        while (__stlxr(v32, v33));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
        v34 = v57;
        v35 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v35 = 1304;
        *(_QWORD *)(v35 + 8) = a3;
        *(_QWORD *)(v35 + 528) = v35 + 16;
        *(_QWORD *)(v35 + 536) = v35 + 16;
        *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v35 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
        v61 = (IPC::Encoder *)v35;
        v36 = **a2;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v35, 8uLL, 8) = v36;
        IPC::VectorArgumentCoder<false,WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v35, (uint64_t)a2[1]);
        v25 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v61, 1, 0);
        v38 = v61;
        v61 = 0;
        if (v38)
        {
          IPC::Encoder::~Encoder(v38, v37);
          WTF::fastFree(v39, v40);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57);
        return v25;
      }
      __break(1u);
LABEL_84:
      v41 = 0;
LABEL_85:
      v44 = 0;
LABEL_54:
      v46 = (char *)(((unint64_t)v16 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v46 >= (char *)v16 + v44)
      {
        v44 = v46 - (char *)v16 + 8;
        if ((unint64_t)(v46 - (char *)v16) > 0xFFFFFFFFFFFFFFF7 || v44 > v41)
          return 17;
        *(_QWORD *)v46 = a3;
      }
      if (!v41)
        return 17;
      v48 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *(_QWORD *)(a1 + 56);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v44 <= 0x10)
        v44 = 16;
      v50 = v48 + v44;
      if (v49 <= v50)
        v50 = 0;
      *(_QWORD *)(a1 + 72) = v50;
      v51 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v50, v51));
      v53 = *(_DWORD *)(a1 + 108);
      if (v52 == 0x80000000 || v53 != 0)
      {
        v56 = v53 + 1;
        *(_DWORD *)(a1 + 108) = v56;
        if (v56 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v61, a4);
    if ((_BYTE)v63)
    {
      v16 = v61;
      v41 = v62;
      v42 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = v42 - (_QWORD)v61;
      if (v42 < (unint64_t)v61)
        goto LABEL_85;
      v44 = v43 + 2;
      if (v43 > 0xFFFFFFFFFFFFFFFDLL || v44 > v62)
        goto LABEL_84;
      *(_WORD *)((char *)v61 + v43) = 2822;
      goto LABEL_54;
    }
  }
  return 15;
}

void WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::~RemoteBarcodeDetectorProxy(WebKit::ShapeDetection::RemoteBarcodeDetectorProxy *this)
{
  unsigned int **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  *(_QWORD *)this = off_1E34E1220;
  v2 = (unsigned int **)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, INFINITY);
      if (!v53)
        goto LABEL_46;
      v6 = v51;
      v5 = v52;
      v7 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v8 = v7 - v51;
      if (v7 >= v51)
      {
        v9 = v8 + 2;
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL && v9 <= v52)
        {
          *(_WORD *)(v51 + v8) = 1319;
          goto LABEL_9;
        }
        v5 = 0;
      }
      v9 = 0;
LABEL_9:
      v11 = (_QWORD *)((v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v11 >= v6 + v9)
      {
        v9 = (unint64_t)v11 - v6 + 8;
        if ((unint64_t)v11 - v6 > 0xFFFFFFFFFFFFFFF7 || v9 > v5)
          goto LABEL_30;
        *v11 = *((_QWORD *)this + 2);
      }
      if (v5)
      {
        v13 = *(_QWORD *)(v3 + 64);
        v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v15 = *(_QWORD *)(v3 + 56);
        if (v14 + 16 >= v15)
          v14 = 0;
        if (v9 <= 0x10)
          v9 = 16;
        v16 = v14 + v9;
        if (v15 <= v16)
          v17 = 0;
        else
          v17 = v16;
        *(_QWORD *)(v3 + 72) = v17;
        v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v17, v18));
        if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        goto LABEL_46;
      }
LABEL_30:
      if (v53)
      {
        v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = v20 - v51;
        if (v20 < v51)
        {
          v22 = 0;
        }
        else
        {
          v22 = 0;
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v52)
          {
            *(_WORD *)(v51 + v21) = 2821;
            v22 = v21 + 2;
          }
        }
        v23 = *(_QWORD *)(v3 + 64);
        v24 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(v3 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v22 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v26 = 0;
        *(_QWORD *)(v3 + 72) = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          __ldaxr(v27);
        while (__stlxr(v26, v27));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v28 = v50;
        v29 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v29 = 1319;
        *(_QWORD *)(v29 + 8) = v4;
        *(_QWORD *)(v29 + 528) = v29 + 16;
        *(_QWORD *)(v29 + 536) = v29 + 16;
        *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v29 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
        v54 = (IPC::Encoder *)v29;
        v30 = *((_QWORD *)this + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = v30;
        IPC::Connection::sendMessageImpl((uint64_t)v28, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
        goto LABEL_46;
      }
      __break(1u);
LABEL_82:
      v35 = 0;
LABEL_83:
      v38 = 0;
LABEL_54:
      v40 = (_QWORD *)((v6 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v6 + v38)
      {
        v38 = (unint64_t)v40 - v6 + 8;
        if ((unint64_t)v40 - v6 > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          goto LABEL_46;
        *v40 = v4;
      }
      if (!v35)
        goto LABEL_46;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, INFINITY);
  if (v53)
  {
    v6 = v51;
    v35 = v52;
    v36 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v37 = v36 - v51;
    if (v36 < v51)
      goto LABEL_83;
    v38 = v37 + 2;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v52)
      goto LABEL_82;
    *(_WORD *)(v51 + v37) = 2822;
    goto LABEL_54;
  }
LABEL_46:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::~RemoteBarcodeDetectorProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  void *v36;
  WTF::RunLoop *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v53;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  IPC::Encoder *v67;
  uint64_t v68[2];
  os_unfair_lock_s *v69;
  unint64_t v70;
  unint64_t v71;
  char v72;

  if (*(_QWORD *)(a1 + 48) == a5)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v70, a2);
  if (!v72)
    return 0;
  v48 = v70;
  v47 = v71;
  v49 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v50 = v49 - v70;
  if (v49 < v70)
    goto LABEL_93;
  v51 = v50 + 2;
  if (v50 > 0xFFFFFFFFFFFFFFFDLL || v51 > v71)
  {
    v47 = 0;
LABEL_93:
    v51 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v70 + v50) = 2822;
LABEL_63:
  v53 = (_QWORD *)((v48 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v53 >= v48 + v51)
  {
    v51 = (unint64_t)v53 - v48 + 8;
    if ((unint64_t)v53 - v48 > 0xFFFFFFFFFFFFFFF7 || v51 > v47)
      return 0;
    *v53 = a5;
  }
  if (!v47)
    return 0;
  v55 = *(_QWORD *)(a1 + 64);
  v56 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v57 = *(_QWORD *)(a1 + 56);
  if (v56 + 16 >= v57)
    v56 = 0;
  if (v51 <= 0x10)
    v51 = 16;
  v58 = v56 + v51;
  if (v57 <= v58)
    v58 = 0;
  *(_QWORD *)(a1 + 72) = v58;
  v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v58, v59));
  v61 = *(_DWORD *)(a1 + 108);
  if (v60 == 0x80000000 || v61 != 0)
  {
    v64 = v61 + 1;
    *(_DWORD *)(a1 + 108) = v64;
    if (v64 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a5;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v70, a2);
  if (!v72)
    return 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v69, (uint64_t **)(a1 + 8));
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34E1410;
  v10[1] = v9;
  v68[0] = (uint64_t)v10;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v68[1] = v11;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v69, v68);
  if (!v72)
    goto LABEL_90;
  v12 = v70;
  v14 = v71;
  v15 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v70;
  if (v15 < v70)
  {
    v17 = 0;
    v13 = v71;
  }
  else
  {
    v13 = 0;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_91;
    v17 = 0;
    if (v16 + 2 <= v71)
    {
      *(_WORD *)(v70 + v16) = 1311;
      v13 = v14;
      v17 = v16 + 2;
    }
  }
  while (1)
  {
    v18 = (_QWORD *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v12 + v17)
    {
      v17 = (unint64_t)v18 - v12 + 8;
      if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || v17 > v13)
        goto LABEL_29;
      *v18 = v11;
    }
    if (v13)
    {
      v20 = *(_QWORD *)(a1 + 64);
      v21 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_QWORD *)(a1 + 56);
      if (v21 + 16 >= v22)
        v21 = 0;
      if (v17 <= 0x10)
        v17 = 16;
      v23 = v21 + v17;
      if (v22 <= v23)
        v24 = 0;
      else
        v24 = v23;
      *(_QWORD *)(a1 + 72) = v24;
      v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v24, v25));
      if (v26 == 0x80000000 || *(_DWORD *)(a1 + 108))
      {
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        *(_DWORD *)(a1 + 108) = 0;
      }
      goto LABEL_53;
    }
LABEL_29:
    if (v72)
      break;
LABEL_90:
    __break(1u);
LABEL_91:
    v17 = v13;
  }
  v27 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = v27 - v70;
  if (v27 < v70)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v71)
    {
      *(_WORD *)(v70 + v28) = 2821;
      v29 = v28 + 2;
    }
  }
  v30 = *(_QWORD *)(a1 + 64);
  v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v32 = *(_QWORD *)(a1 + 56);
  if (v31 + 16 >= v32)
    v31 = 0;
  if (v29 <= 0x10)
    v29 = 16;
  v33 = v31 + v29;
  if (v32 <= v33)
    v33 = 0;
  *(_QWORD *)(a1 + 72) = v33;
  v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
  do
    __ldaxr(v34);
  while (__stlxr(v33, v34));
  *(_DWORD *)(a1 + 108) = 0;
  v35 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v35 = 1311;
  *(_QWORD *)(v35 + 8) = a5;
  *(_QWORD *)(v35 + 528) = v35 + 16;
  *(_QWORD *)(v35 + 536) = v35 + 16;
  *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v35 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
  v67 = (IPC::Encoder *)v35;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v35, 8uLL, 8) = v11;
  if (IPC::Connection::sendMessageImpl((uint64_t)v69, (uint64_t *)&v67, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v69, v11, &v66);
    if (v66)
    {
      v38 = (unsigned int *)(WTF::RunLoop::main(v37) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      v40 = v66;
      v66 = 0;
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v41 = &off_1E34E1438;
      v41[1] = v40;
      v65 = v41;
      WTF::RunLoop::dispatch();
      if (v65)
        (*(void (**)(_QWORD *))(*v65 + 8))(v65);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v38);
      v42 = v66;
      v66 = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
    v11 = 0;
  }
  v43 = v67;
  v67 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v36);
    WTF::fastFree(v44, v45);
  }
LABEL_53:
  v46 = v68[0];
  v68[0] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v69);
  return v11;
}

unsigned __int8 ***WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 ***result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  void *v38;
  WTF::RunLoop *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  unsigned int v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  IPC::Encoder *v69;
  uint64_t v70[2];
  os_unfair_lock_s *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 120);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v5 + 48) != v6)
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v72, INFINITY);
    if (!v74)
      return result;
    v50 = v72;
    v49 = v73;
    v51 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v51 - v72;
    if (v51 >= v72)
    {
      v53 = v52 + 2;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v53 <= v73)
      {
        *(_WORD *)(v72 + v52) = 2822;
LABEL_66:
        v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v55 >= v50 + v53)
        {
          v53 = (unint64_t)v55 - v50 + 8;
          if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
            return result;
          *v55 = v6;
        }
        if (!v49)
          return result;
        v57 = *(_QWORD *)(v5 + 64);
        v58 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v59 = *(_QWORD *)(v5 + 56);
        if (v58 + 16 >= v59)
          v58 = 0;
        if (v53 <= 0x10)
          v53 = 16;
        v60 = v58 + v53;
        if (v59 <= v60)
          v60 = 0;
        *(_QWORD *)(v5 + 72) = v60;
        v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v60, v61));
        v63 = *(_DWORD *)(v5 + 108);
        if (v62 == 0x80000000 || v63 != 0)
        {
          v65 = v63 + 1;
          *(_DWORD *)(v5 + 108) = v65;
          if (v65 >= *(_DWORD *)(v5 + 104))
          {
            if (*(_BYTE *)(v5 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
        }
        *(_QWORD *)(v5 + 48) = v6;
        goto LABEL_2;
      }
      v49 = 0;
    }
    v53 = 0;
    goto LABEL_66;
  }
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v72, INFINITY);
  if (!v74)
    return result;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)(v5 + 8));
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34E1460;
  v9[1] = v8;
  v70[0] = (uint64_t)v9;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v70[1] = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v71, v70);
  v12 = v74;
  if (!v74)
    goto LABEL_91;
  v12 = v72;
  v13 = v73;
  v14 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v72;
  if (v14 < v72)
  {
    v16 = 0;
    v11 = v73;
  }
  else
  {
    v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_92;
    v16 = 0;
    if (v15 + 2 <= v73)
    {
      *(_WORD *)(v72 + v15) = 705;
      v11 = v13;
      v16 = v15 + 2;
    }
  }
  while (1)
  {
    v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = v17 >= v12 + v16;
    v19 = v17 - (v12 + v16);
    if (v18)
    {
      v66 = 0;
      v20 = v19 + v16;
      if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= v11)
      {
        *(_QWORD *)(v12 + v20) = v4;
        v66 = v11;
        v16 = v20 + 8;
      }
    }
    else
    {
      v66 = v11;
    }
    v21 = (_QWORD *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (unint64_t)v21 - v12 - v16;
    if ((unint64_t)v21 >= v12 + v16)
    {
      v11 = (unint64_t)v21 - v12;
      if ((unint64_t)v21 - v12 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_32;
      v16 = v11 + 8;
      if (v11 + 8 > v66)
        goto LABEL_32;
      *v21 = v10;
    }
    if (v66)
    {
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (v16 <= 0x10)
        v16 = 16;
      v25 = v23 + v16;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      goto LABEL_55;
    }
LABEL_32:
    v12 = v74;
    if (v74)
      break;
LABEL_91:
    __break(1u);
LABEL_92:
    v16 = v11;
  }
  v29 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = v29 - v72;
  if (v29 < v72)
  {
    v31 = 0;
  }
  else
  {
    v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v73)
    {
      *(_WORD *)(v72 + v30) = 2821;
      v31 = v30 + 2;
    }
  }
  v32 = *(_QWORD *)(v5 + 64);
  v33 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v34 = *(_QWORD *)(v5 + 56);
  if (v33 + 16 >= v34)
    v33 = 0;
  if (v31 <= 0x10)
    v31 = 16;
  v35 = v33 + v31;
  if (v34 <= v35)
    v35 = 0;
  *(_QWORD *)(v5 + 72) = v35;
  v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
  do
    __ldaxr(v36);
  while (__stlxr(v35, v36));
  *(_DWORD *)(v5 + 108) = 0;
  v37 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v37 = 705;
  *(_QWORD *)(v37 + 8) = v6;
  *(_QWORD *)(v37 + 528) = v37 + 16;
  *(_QWORD *)(v37 + 536) = v37 + 16;
  *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v37 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
  v69 = (IPC::Encoder *)v37;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v10;
  if (IPC::Connection::sendMessageImpl((uint64_t)v71, (uint64_t *)&v69, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v71, v10, &v68);
    if (v68)
    {
      v40 = (unsigned int *)(WTF::RunLoop::main(v39) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      v42 = v68;
      v68 = 0;
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v43 = &off_1E34E1488;
      v43[1] = v42;
      v67 = v43;
      WTF::RunLoop::dispatch();
      if (v67)
        (*(void (**)(_QWORD *))(*v67 + 8))(v67);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v40);
      v44 = v68;
      v68 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
  }
  v45 = v69;
  v69 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v38);
    WTF::fastFree(v46, v47);
  }
LABEL_55:
  v48 = v70[0];
  v70[0] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v71);
}

uint64_t WebKit::ShapeDetection::RemoteFaceDetectorProxy::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12[2];
  uint64_t v13;

  v12[1] = a4;
  v13 = a3;
  v8 = *a1;
  v12[0] = &v13;
  IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteFaceDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v8, v12, a2, INFINITY);
  result = WTF::fastMalloc((WTF *)0x28);
  v10 = v13;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34E1248;
  *(_QWORD *)(result + 16) = v10;
  v11 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 24) = v11;
  *(_QWORD *)(result + 32) = a2;
  *a5 = result;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteFaceDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  IPC::Encoder *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v47;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unsigned int v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;
  unint64_t v63;
  unint64_t v64;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v59, a4);
      if (!v61)
        break;
      v8 = v59;
      v9 = v60;
      v62 = v59;
      v63 = v60;
      v64 = 0;
      v10 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v59;
      if (v10 < (unint64_t)v59)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v60)
        {
          v9 = 0;
          v12 = 0;
          v63 = 0;
        }
        else
        {
          *(_WORD *)((char *)v59 + v11) = 1305;
          v64 = v11 + 2;
        }
      }
      v14 = (char *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v14 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v14 - (char *)v8) > 0xFFFFFFFFFFFFFFF7 || v14 - (char *)v8 + 8 > v9)
        {
          v63 = 0;
        }
        else
        {
          *(_QWORD *)v14 = **a2;
          v64 = v14 - (char *)v8 + 8;
        }
      }
      IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::encode(&v62, (uint64_t)a2[1]);
      if (v63)
      {
        v17 = v64;
        v18 = *(_QWORD *)(a1 + 64);
        v19 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *(_QWORD *)(a1 + 56);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (v64 <= 0x10)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v22 = 0;
        else
          v22 = v21;
        *(_QWORD *)(a1 + 72) = v22;
        v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v22, v23));
        if (v24 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v61)
      {
        v26 = ((unint64_t)v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v26 - (_QWORD)v59;
        if (v26 < (unint64_t)v59)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= v60)
          {
            *(_WORD *)((char *)v59 + v27) = 2821;
            v28 = v27 + 2;
          }
        }
        v29 = *(_QWORD *)(a1 + 64);
        v30 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *(_QWORD *)(a1 + 56);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v32 = 0;
        *(_QWORD *)(a1 + 72) = v32;
        v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          __ldaxr(v33);
        while (__stlxr(v32, v33));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(a1 + 8));
        v34 = v58;
        v35 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v35 = 1305;
        *(_QWORD *)(v35 + 8) = a3;
        *(_QWORD *)(v35 + 528) = v35 + 16;
        *(_QWORD *)(v35 + 536) = v35 + 16;
        *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v35 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
        v62 = (IPC::Encoder *)v35;
        v36 = **a2;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v35, 8uLL, 8) = v36;
        v37 = a2[1];
        LOWORD(v36) = *(_WORD *)v37;
        *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v35, 2uLL, 2) = v36;
        LOBYTE(v37) = *((_BYTE *)v37 + 2);
        *IPC::Encoder::grow((IPC::Encoder *)v35, 1uLL, 1) = (char)v37;
        v25 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v62, 1, 0);
        v39 = v62;
        v62 = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v38);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
        return v25;
      }
      __break(1u);
LABEL_84:
      v42 = 0;
LABEL_85:
      v45 = 0;
LABEL_54:
      v47 = (char *)(((unint64_t)v16 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v47 >= (char *)v16 + v45)
      {
        v45 = v47 - (char *)v16 + 8;
        if ((unint64_t)(v47 - (char *)v16) > 0xFFFFFFFFFFFFFFF7 || v45 > v42)
          return 17;
        *(_QWORD *)v47 = a3;
      }
      if (!v42)
        return 17;
      v49 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v50 = *(_QWORD *)(a1 + 56);
      if (v49 + 16 >= v50)
        v49 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v51 = v49 + v45;
      if (v50 <= v51)
        v51 = 0;
      *(_QWORD *)(a1 + 72) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *(_DWORD *)(a1 + 108);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v57 = v54 + 1;
        *(_DWORD *)(a1 + 108) = v57;
        if (v57 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v62, a4);
    if ((_BYTE)v64)
    {
      v16 = v62;
      v42 = v63;
      v43 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - (_QWORD)v62;
      if (v43 < (unint64_t)v62)
        goto LABEL_85;
      v45 = v44 + 2;
      if (v44 > 0xFFFFFFFFFFFFFFFDLL || v45 > v63)
        goto LABEL_84;
      *(_WORD *)((char *)v62 + v44) = 2822;
      goto LABEL_54;
    }
  }
  return 15;
}

void WebKit::ShapeDetection::RemoteFaceDetectorProxy::~RemoteFaceDetectorProxy(WebKit::ShapeDetection::RemoteFaceDetectorProxy *this)
{
  unsigned int **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  *(_QWORD *)this = off_1E34E1248;
  v2 = (unsigned int **)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, INFINITY);
      if (!v53)
        goto LABEL_46;
      v6 = v51;
      v5 = v52;
      v7 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v8 = v7 - v51;
      if (v7 >= v51)
      {
        v9 = v8 + 2;
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL && v9 <= v52)
        {
          *(_WORD *)(v51 + v8) = 1320;
          goto LABEL_9;
        }
        v5 = 0;
      }
      v9 = 0;
LABEL_9:
      v11 = (_QWORD *)((v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v11 >= v6 + v9)
      {
        v9 = (unint64_t)v11 - v6 + 8;
        if ((unint64_t)v11 - v6 > 0xFFFFFFFFFFFFFFF7 || v9 > v5)
          goto LABEL_30;
        *v11 = *((_QWORD *)this + 2);
      }
      if (v5)
      {
        v13 = *(_QWORD *)(v3 + 64);
        v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v15 = *(_QWORD *)(v3 + 56);
        if (v14 + 16 >= v15)
          v14 = 0;
        if (v9 <= 0x10)
          v9 = 16;
        v16 = v14 + v9;
        if (v15 <= v16)
          v17 = 0;
        else
          v17 = v16;
        *(_QWORD *)(v3 + 72) = v17;
        v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v17, v18));
        if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        goto LABEL_46;
      }
LABEL_30:
      if (v53)
      {
        v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = v20 - v51;
        if (v20 < v51)
        {
          v22 = 0;
        }
        else
        {
          v22 = 0;
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v52)
          {
            *(_WORD *)(v51 + v21) = 2821;
            v22 = v21 + 2;
          }
        }
        v23 = *(_QWORD *)(v3 + 64);
        v24 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(v3 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v22 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v26 = 0;
        *(_QWORD *)(v3 + 72) = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          __ldaxr(v27);
        while (__stlxr(v26, v27));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v28 = v50;
        v29 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v29 = 1320;
        *(_QWORD *)(v29 + 8) = v4;
        *(_QWORD *)(v29 + 528) = v29 + 16;
        *(_QWORD *)(v29 + 536) = v29 + 16;
        *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v29 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
        v54 = (IPC::Encoder *)v29;
        v30 = *((_QWORD *)this + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = v30;
        IPC::Connection::sendMessageImpl((uint64_t)v28, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
        goto LABEL_46;
      }
      __break(1u);
LABEL_82:
      v35 = 0;
LABEL_83:
      v38 = 0;
LABEL_54:
      v40 = (_QWORD *)((v6 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v6 + v38)
      {
        v38 = (unint64_t)v40 - v6 + 8;
        if ((unint64_t)v40 - v6 > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          goto LABEL_46;
        *v40 = v4;
      }
      if (!v35)
        goto LABEL_46;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, INFINITY);
  if (v53)
  {
    v6 = v51;
    v35 = v52;
    v36 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v37 = v36 - v51;
    if (v36 < v51)
      goto LABEL_83;
    v38 = v37 + 2;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v52)
      goto LABEL_82;
    *(_WORD *)(v51 + v37) = 2822;
    goto LABEL_54;
  }
LABEL_46:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::ShapeDetection::RemoteFaceDetectorProxy::~RemoteFaceDetectorProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::ShapeDetection::RemoteFaceDetectorProxy::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 ***result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  void *v38;
  WTF::RunLoop *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  unsigned int v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  IPC::Encoder *v69;
  uint64_t v70[2];
  os_unfair_lock_s *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 120);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v5 + 48) != v6)
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v72, INFINITY);
    if (!v74)
      return result;
    v50 = v72;
    v49 = v73;
    v51 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v51 - v72;
    if (v51 >= v72)
    {
      v53 = v52 + 2;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v53 <= v73)
      {
        *(_WORD *)(v72 + v52) = 2822;
LABEL_66:
        v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v55 >= v50 + v53)
        {
          v53 = (unint64_t)v55 - v50 + 8;
          if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
            return result;
          *v55 = v6;
        }
        if (!v49)
          return result;
        v57 = *(_QWORD *)(v5 + 64);
        v58 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v59 = *(_QWORD *)(v5 + 56);
        if (v58 + 16 >= v59)
          v58 = 0;
        if (v53 <= 0x10)
          v53 = 16;
        v60 = v58 + v53;
        if (v59 <= v60)
          v60 = 0;
        *(_QWORD *)(v5 + 72) = v60;
        v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v60, v61));
        v63 = *(_DWORD *)(v5 + 108);
        if (v62 == 0x80000000 || v63 != 0)
        {
          v65 = v63 + 1;
          *(_DWORD *)(v5 + 108) = v65;
          if (v65 >= *(_DWORD *)(v5 + 104))
          {
            if (*(_BYTE *)(v5 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
        }
        *(_QWORD *)(v5 + 48) = v6;
        goto LABEL_2;
      }
      v49 = 0;
    }
    v53 = 0;
    goto LABEL_66;
  }
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v72, INFINITY);
  if (!v74)
    return result;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)(v5 + 8));
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34E14B0;
  v9[1] = v8;
  v70[0] = (uint64_t)v9;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v70[1] = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v71, v70);
  v12 = v74;
  if (!v74)
    goto LABEL_91;
  v12 = v72;
  v13 = v73;
  v14 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v72;
  if (v14 < v72)
  {
    v16 = 0;
    v11 = v73;
  }
  else
  {
    v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_92;
    v16 = 0;
    if (v15 + 2 <= v73)
    {
      *(_WORD *)(v72 + v15) = 873;
      v11 = v13;
      v16 = v15 + 2;
    }
  }
  while (1)
  {
    v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = v17 >= v12 + v16;
    v19 = v17 - (v12 + v16);
    if (v18)
    {
      v66 = 0;
      v20 = v19 + v16;
      if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= v11)
      {
        *(_QWORD *)(v12 + v20) = v4;
        v66 = v11;
        v16 = v20 + 8;
      }
    }
    else
    {
      v66 = v11;
    }
    v21 = (_QWORD *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (unint64_t)v21 - v12 - v16;
    if ((unint64_t)v21 >= v12 + v16)
    {
      v11 = (unint64_t)v21 - v12;
      if ((unint64_t)v21 - v12 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_32;
      v16 = v11 + 8;
      if (v11 + 8 > v66)
        goto LABEL_32;
      *v21 = v10;
    }
    if (v66)
    {
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (v16 <= 0x10)
        v16 = 16;
      v25 = v23 + v16;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      goto LABEL_55;
    }
LABEL_32:
    v12 = v74;
    if (v74)
      break;
LABEL_91:
    __break(1u);
LABEL_92:
    v16 = v11;
  }
  v29 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = v29 - v72;
  if (v29 < v72)
  {
    v31 = 0;
  }
  else
  {
    v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v73)
    {
      *(_WORD *)(v72 + v30) = 2821;
      v31 = v30 + 2;
    }
  }
  v32 = *(_QWORD *)(v5 + 64);
  v33 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v34 = *(_QWORD *)(v5 + 56);
  if (v33 + 16 >= v34)
    v33 = 0;
  if (v31 <= 0x10)
    v31 = 16;
  v35 = v33 + v31;
  if (v34 <= v35)
    v35 = 0;
  *(_QWORD *)(v5 + 72) = v35;
  v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
  do
    __ldaxr(v36);
  while (__stlxr(v35, v36));
  *(_DWORD *)(v5 + 108) = 0;
  v37 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v37 = 873;
  *(_QWORD *)(v37 + 8) = v6;
  *(_QWORD *)(v37 + 528) = v37 + 16;
  *(_QWORD *)(v37 + 536) = v37 + 16;
  *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v37 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
  v69 = (IPC::Encoder *)v37;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v10;
  if (IPC::Connection::sendMessageImpl((uint64_t)v71, (uint64_t *)&v69, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v71, v10, &v68);
    if (v68)
    {
      v40 = (unsigned int *)(WTF::RunLoop::main(v39) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      v42 = v68;
      v68 = 0;
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v43 = &off_1E34E14D8;
      v43[1] = v42;
      v67 = v43;
      WTF::RunLoop::dispatch();
      if (v67)
        (*(void (**)(_QWORD *))(*v67 + 8))(v67);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v40);
      v44 = v68;
      v68 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
  }
  v45 = v69;
  v69 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v38);
    WTF::fastFree(v46, v47);
  }
LABEL_55:
  v48 = v70[0];
  v70[0] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v71);
}

uint64_t WebKit::ShapeDetection::RemoteTextDetectorProxy::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = *a1;
  v11 = &v12;
  v12 = a3;
  IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteTextDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v7, &v11, a2, INFINITY);
  result = WTF::fastMalloc((WTF *)0x28);
  v9 = v12;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34E1270;
  *(_QWORD *)(result + 16) = v9;
  v10 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = a2;
  *a4 = result;
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CreateRemoteTextDetector,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 1307;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_QWORD *)((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 8;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFF7 || v12 > v8)
          goto LABEL_28;
        *v14 = **a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1307;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = **a2;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 8uLL, 8) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

void WebKit::ShapeDetection::RemoteTextDetectorProxy::~RemoteTextDetectorProxy(WebKit::ShapeDetection::RemoteTextDetectorProxy *this)
{
  unsigned int **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  *(_QWORD *)this = off_1E34E1270;
  v2 = (unsigned int **)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, INFINITY);
      if (!v53)
        goto LABEL_46;
      v6 = v51;
      v5 = v52;
      v7 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v8 = v7 - v51;
      if (v7 >= v51)
      {
        v9 = v8 + 2;
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL && v9 <= v52)
        {
          *(_WORD *)(v51 + v8) = 1322;
          goto LABEL_9;
        }
        v5 = 0;
      }
      v9 = 0;
LABEL_9:
      v11 = (_QWORD *)((v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v11 >= v6 + v9)
      {
        v9 = (unint64_t)v11 - v6 + 8;
        if ((unint64_t)v11 - v6 > 0xFFFFFFFFFFFFFFF7 || v9 > v5)
          goto LABEL_30;
        *v11 = *((_QWORD *)this + 2);
      }
      if (v5)
      {
        v13 = *(_QWORD *)(v3 + 64);
        v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v15 = *(_QWORD *)(v3 + 56);
        if (v14 + 16 >= v15)
          v14 = 0;
        if (v9 <= 0x10)
          v9 = 16;
        v16 = v14 + v9;
        if (v15 <= v16)
          v17 = 0;
        else
          v17 = v16;
        *(_QWORD *)(v3 + 72) = v17;
        v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v17, v18));
        if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        goto LABEL_46;
      }
LABEL_30:
      if (v53)
      {
        v20 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = v20 - v51;
        if (v20 < v51)
        {
          v22 = 0;
        }
        else
        {
          v22 = 0;
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v52)
          {
            *(_WORD *)(v51 + v21) = 2821;
            v22 = v21 + 2;
          }
        }
        v23 = *(_QWORD *)(v3 + 64);
        v24 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(v3 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v22 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v26 = 0;
        *(_QWORD *)(v3 + 72) = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          __ldaxr(v27);
        while (__stlxr(v26, v27));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v28 = v50;
        v29 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v29 = 1322;
        *(_QWORD *)(v29 + 8) = v4;
        *(_QWORD *)(v29 + 528) = v29 + 16;
        *(_QWORD *)(v29 + 536) = v29 + 16;
        *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v29 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
        v54 = (IPC::Encoder *)v29;
        v30 = *((_QWORD *)this + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = v30;
        IPC::Connection::sendMessageImpl((uint64_t)v28, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
        goto LABEL_46;
      }
      __break(1u);
LABEL_82:
      v35 = 0;
LABEL_83:
      v38 = 0;
LABEL_54:
      v40 = (_QWORD *)((v6 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v6 + v38)
      {
        v38 = (unint64_t)v40 - v6 + 8;
        if ((unint64_t)v40 - v6 > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          goto LABEL_46;
        *v40 = v4;
      }
      if (!v35)
        goto LABEL_46;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, INFINITY);
  if (v53)
  {
    v6 = v51;
    v35 = v52;
    v36 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v37 = v36 - v51;
    if (v36 < v51)
      goto LABEL_83;
    v38 = v37 + 2;
    if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v52)
      goto LABEL_82;
    *(_WORD *)(v51 + v37) = 2822;
    goto LABEL_54;
  }
LABEL_46:
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::ShapeDetection::RemoteTextDetectorProxy::~RemoteTextDetectorProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::ShapeDetection::RemoteTextDetectorProxy::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 ***result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  void *v38;
  WTF::RunLoop *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  unsigned int v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  IPC::Encoder *v69;
  uint64_t v70[2];
  os_unfair_lock_s *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 120);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v5 + 48) != v6)
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v72, INFINITY);
    if (!v74)
      return result;
    v50 = v72;
    v49 = v73;
    v51 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v51 - v72;
    if (v51 >= v72)
    {
      v53 = v52 + 2;
      if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v53 <= v73)
      {
        *(_WORD *)(v72 + v52) = 2822;
LABEL_66:
        v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v55 >= v50 + v53)
        {
          v53 = (unint64_t)v55 - v50 + 8;
          if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
            return result;
          *v55 = v6;
        }
        if (!v49)
          return result;
        v57 = *(_QWORD *)(v5 + 64);
        v58 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v59 = *(_QWORD *)(v5 + 56);
        if (v58 + 16 >= v59)
          v58 = 0;
        if (v53 <= 0x10)
          v53 = 16;
        v60 = v58 + v53;
        if (v59 <= v60)
          v60 = 0;
        *(_QWORD *)(v5 + 72) = v60;
        v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v60, v61));
        v63 = *(_DWORD *)(v5 + 108);
        if (v62 == 0x80000000 || v63 != 0)
        {
          v65 = v63 + 1;
          *(_DWORD *)(v5 + 108) = v65;
          if (v65 >= *(_DWORD *)(v5 + 104))
          {
            if (*(_BYTE *)(v5 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
        }
        *(_QWORD *)(v5 + 48) = v6;
        goto LABEL_2;
      }
      v49 = 0;
    }
    v53 = 0;
    goto LABEL_66;
  }
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v72, INFINITY);
  if (!v74)
    return result;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71, (uint64_t **)(v5 + 8));
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34E1500;
  v9[1] = v8;
  v70[0] = (uint64_t)v9;
  v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v70[1] = v10;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v71, v70);
  v12 = v74;
  if (!v74)
    goto LABEL_91;
  v12 = v72;
  v13 = v73;
  v14 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v72;
  if (v14 < v72)
  {
    v16 = 0;
    v11 = v73;
  }
  else
  {
    v11 = 0;
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_92;
    v16 = 0;
    if (v15 + 2 <= v73)
    {
      *(_WORD *)(v72 + v15) = 1382;
      v11 = v13;
      v16 = v15 + 2;
    }
  }
  while (1)
  {
    v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = v17 >= v12 + v16;
    v19 = v17 - (v12 + v16);
    if (v18)
    {
      v66 = 0;
      v20 = v19 + v16;
      if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= v11)
      {
        *(_QWORD *)(v12 + v20) = v4;
        v66 = v11;
        v16 = v20 + 8;
      }
    }
    else
    {
      v66 = v11;
    }
    v21 = (_QWORD *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (unint64_t)v21 - v12 - v16;
    if ((unint64_t)v21 >= v12 + v16)
    {
      v11 = (unint64_t)v21 - v12;
      if ((unint64_t)v21 - v12 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_32;
      v16 = v11 + 8;
      if (v11 + 8 > v66)
        goto LABEL_32;
      *v21 = v10;
    }
    if (v66)
    {
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (v16 <= 0x10)
        v16 = 16;
      v25 = v23 + v16;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      goto LABEL_55;
    }
LABEL_32:
    v12 = v74;
    if (v74)
      break;
LABEL_91:
    __break(1u);
LABEL_92:
    v16 = v11;
  }
  v29 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = v29 - v72;
  if (v29 < v72)
  {
    v31 = 0;
  }
  else
  {
    v31 = 0;
    if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v73)
    {
      *(_WORD *)(v72 + v30) = 2821;
      v31 = v30 + 2;
    }
  }
  v32 = *(_QWORD *)(v5 + 64);
  v33 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v34 = *(_QWORD *)(v5 + 56);
  if (v33 + 16 >= v34)
    v33 = 0;
  if (v31 <= 0x10)
    v31 = 16;
  v35 = v33 + v31;
  if (v34 <= v35)
    v35 = 0;
  *(_QWORD *)(v5 + 72) = v35;
  v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
  do
    __ldaxr(v36);
  while (__stlxr(v35, v36));
  *(_DWORD *)(v5 + 108) = 0;
  v37 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v37 = 1382;
  *(_QWORD *)(v37 + 8) = v6;
  *(_QWORD *)(v37 + 528) = v37 + 16;
  *(_QWORD *)(v37 + 536) = v37 + 16;
  *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v37 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
  v69 = (IPC::Encoder *)v37;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v10;
  if (IPC::Connection::sendMessageImpl((uint64_t)v71, (uint64_t *)&v69, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v71, v10, &v68);
    if (v68)
    {
      v40 = (unsigned int *)(WTF::RunLoop::main(v39) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      v42 = v68;
      v68 = 0;
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v43 = &off_1E34E1528;
      v43[1] = v42;
      v67 = v43;
      WTF::RunLoop::dispatch();
      if (v67)
        (*(void (**)(_QWORD *))(*v67 + 8))(v67);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v40);
      v44 = v68;
      v68 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
  }
  v45 = v69;
  v69 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v38);
    WTF::fastFree(v46, v47);
  }
LABEL_55:
  v48 = v70[0];
  v70[0] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v71);
}

IntSize WebKit::ImageBufferShareableBitmapBackend::calculateSafeBackendSize(const IntSize *a1, uint64_t a2, const WebCore::DestinationColorSpace *a3)
{
  char v5;
  IntSize v6;

  v6 = *a1;
  if (v6.m_width < 1 || v6.m_height < 1)
    return 0;
  WebCore::ShareableBitmapConfiguration::calculateSizeInBytes((WebCore::ShareableBitmapConfiguration *)&v6, a1 + 2, a3);
  if (v5)
    return 0;
  else
    return v6;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(IntSize *a1, uint64_t a2, const WebCore::DestinationColorSpace *a3)
{
  uint64_t result;
  char v5;
  unsigned int v6;

  result = WebCore::ShareableBitmapConfiguration::calculateBytesPerRow((WebCore::ShareableBitmapConfiguration *)a1, a1 + 2, a3);
  if (!v5)
    return WebCore::ImageBufferBackend::calculateMemoryCost((WebCore::ImageBufferBackend *)a1, (const IntSize *)v6);
  __break(0xC471u);
  return result;
}

void WebKit::ImageBufferShareableBitmapBackend::create(uint64_t a1@<X0>, uint64_t a2@<X1>, const WebCore::DestinationColorSpace *a3@<X2>, uint64_t *a4@<X8>)
{
  IntSize v6;
  const void *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  void *v10;
  WebCore::ShareableBitmap *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::ShareableBitmap *v16;
  CFTypeRef v17;
  char v18;
  uint64_t v19;
  CFTypeRef cf;
  char v21;
  WebCore::ShareableBitmap *v22;
  IntSize v23;

  v6 = WebKit::ImageBufferShareableBitmapBackend::calculateSafeBackendSize((const IntSize *)a1, a2, a3);
  v23 = v6;
  if (v6.m_width < 1 || v6.m_height <= 0)
    goto LABEL_20;
  v7 = *(const void **)(a1 + 16);
  v17 = v7;
  if (v7)
    CFRetain(v7);
  v18 = 1;
  MEMORY[0x19AEB3600](&v19, &v23, &v17, 0);
  WebCore::ShareableBitmap::create();
  if (v21)
  {
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
  }
  if (v18)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      CFRelease(v9);
  }
  if (v22)
  {
    if (WebCore::ProcessIdentity::operator BOOL())
      WebCore::ShareableBitmap::setOwnershipOfMemory();
    WebCore::ShareableBitmap::createGraphicsContext(v22);
    if (v19)
    {
      v11 = v22;
      v22 = 0;
      v12 = bmalloc::api::isoAllocate();
      v13 = (_QWORD *)WebCore::ImageBufferBackend::ImageBufferBackend();
      *v13 = off_1E34E1298;
      v13[5] = 0;
      v13[6] = &unk_1E34E1380;
      v14 = v19;
      v19 = 0;
      *(_QWORD *)(v12 + 56) = v11;
      *(_QWORD *)(v12 + 64) = v14;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 680))(v14, *(float *)(v12 + 16));
      *a4 = v12;
      v15 = v19;
      v19 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      *a4 = 0;
    }
    v16 = v22;
    v22 = 0;
    if (v16)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v16, v10);
  }
  else
  {
LABEL_20:
    *a4 = 0;
  }
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  void *v3;
  WebCore::ShareableBitmap *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::ShareableBitmap *v8;

  WebCore::ShareableBitmap::create();
  result = (uint64_t)v8;
  if (v8)
  {
    WebCore::ShareableBitmap::createGraphicsContext(v8);
    if (v7)
    {
      v4 = v8;
      v8 = 0;
      v5 = bmalloc::api::isoAllocate();
      v6 = (_QWORD *)WebCore::ImageBufferBackend::ImageBufferBackend();
      *v6 = off_1E34E1298;
      v6[5] = 0;
      v6[6] = &unk_1E34E1380;
      *(_QWORD *)(v5 + 56) = v4;
      *(_QWORD *)(v5 + 64) = v7;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v7 + 680))(v7, *(float *)(v5 + 16));
      *a1 = v5;
    }
    else
    {
      *a1 = 0;
    }
    result = (uint64_t)v8;
    if (v8)
      return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v8, v3);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::canMapBackingStore(WebKit::ImageBufferShareableBitmapBackend *this)
{
  return 1;
}

WTF::MachSendRight *WebKit::ImageBufferShareableBitmapBackend::createBackendHandle@<X0>(uint64_t a1@<X8>)
{
  WTF::MachSendRight *result;
  _BYTE v3[64];
  int v4;
  _BYTE v5[79];
  char v6;

  WebCore::ShareableBitmap::createHandle();
  if (v5[64])
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v3, (uint64_t)v5);
    v4 = 0;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a1, (uint64_t)v3);
    *(_BYTE *)(a1 + 72) = 1;
    if (v4 != -1)
      off_1E34E13C0[v4]((int)&v6, (WTF::MachSendRight *)v3);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  }
  else
  {
    result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  return result;
}

WTF::MachSendRight *`non-virtual thunk to'WebKit::ImageBufferShareableBitmapBackend::createBackendHandle@<X0>(uint64_t a1@<X8>)
{
  return WebKit::ImageBufferShareableBitmapBackend::createBackendHandle(a1);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::transferToNewContext()
{
  uint64_t result;

  result = WebCore::ProcessIdentity::operator BOOL();
  if ((_DWORD)result)
    return WebCore::ShareableBitmap::setOwnershipOfMemory();
  return result;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::bytesPerRow(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 56);
  if (!*(_BYTE *)(v1 + 44))
    return *(unsigned int *)(v1 + 48);
  __break(0xC471u);
  return this;
}

void WebKit::ImageBufferShareableBitmapBackend::copyNativeImage(WebKit::ImageBufferShareableBitmapBackend *this)
{
  CFTypeRef cf;

  WebCore::ShareableBitmap::createPlatformImage();
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebCore::NativeImage::create();
  if (cf)
    CFRelease(cf);
}

void WebKit::ImageBufferShareableBitmapBackend::createNativeImageReference(WebKit::ImageBufferShareableBitmapBackend *this)
{
  CFTypeRef cf;

  WebCore::ShareableBitmap::createPlatformImage();
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebCore::NativeImage::create();
  if (cf)
    CFRelease(cf);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::getPixelBuffer(WebCore::ShareableBitmap **this, const IntRect *a2, WebCore::PixelBuffer *a3)
{
  const unsigned __int8 *v6;

  v6 = (const unsigned __int8 *)WebCore::ShareableBitmap::span(this[7]);
  return WebCore::ImageBufferBackend::getPixelBuffer((WebCore::ImageBufferBackend *)this, a2, v6, a3);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::putPixelBuffer(uint64_t a1)
{
  WebCore::ShareableBitmap::mutableSpan(*(WebCore::ShareableBitmap **)(a1 + 56));
  return WebCore::ImageBufferBackend::putPixelBuffer();
}

WTF::StringImpl *WebKit::ImageBufferShareableBitmapBackend::debugDescription(WebKit::ImageBufferShareableBitmapBackend *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  char v7;
  int v8;
  __int16 v9;
  int v10;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  v9 = 256;
  v10 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v4);
  v2 = v5;
  v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebKit::RemoteDisplayListRecorderProxy *WebKit::RemoteDisplayListRecorderProxy::RemoteDisplayListRecorderProxy(WebKit::RemoteDisplayListRecorderProxy *this, WebKit::RemoteImageBufferProxy *a2, WebKit::RemoteRenderingBackendProxy *a3, const WebCore::FloatRect *a4, const WebCore::AffineTransform *a5)
{
  const void *v8;
  void *v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  unsigned int *v11;
  unsigned int v12;
  CFTypeRef cf;
  _BYTE v15[344];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextState::GraphicsContextState();
  v8 = (const void *)*((_QWORD *)a2 + 4);
  cf = v8;
  if (v8)
    CFRetain(v8);
  WebCore::DisplayList::Recorder::Recorder();
  if (cf)
    CFRelease(cf);
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v15, v9);
  *(_QWORD *)this = off_1E34E15B0;
  *((_QWORD *)this + 478) = *((_QWORD *)a2 + 15);
  v10 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 1);
  if (v10)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  *((_QWORD *)this + 479) = v10;
  *((_QWORD *)this + 480) = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  v11 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 481) = v11;
  *((_BYTE *)this + 3856) = *((_BYTE *)a2 + 48);
  *((_BYTE *)this + 3857) = 0;
  *((_QWORD *)this + 483) = 0;
  return this;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::RemoteDisplayListRecorderProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE v13[344];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WebCore::GraphicsContextState::GraphicsContextState();
  WebCore::DisplayList::Recorder::Recorder();
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v13, v9);
  *(_QWORD *)a1 = off_1E34E15B0;
  *(_QWORD *)(a1 + 3824) = a3;
  *(_OWORD *)(a1 + 3832) = 0u;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v10 = *(unsigned int **)(a2 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 3848) = v10;
  *(_BYTE *)(a1 + 3856) = a5;
  *(_BYTE *)(a1 + 3857) = 0;
  *(_QWORD *)(a1 + 3864) = 0;
  return a1;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::renderingMode(WebKit::RemoteDisplayListRecorderProxy *this)
{
  return *((unsigned __int8 *)this + 3856);
}

void WebKit::RemoteDisplayListRecorderProxy::recordRotate(WebKit::RemoteDisplayListRecorderProxy *this, float a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  unsigned __int8 *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  WebKit::RemoteImageBufferProxy *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  _BYTE *v49;
  float v50;
  WebKit::RemoteImageBufferProxy *v51;
  unsigned int *v52;
  uint64_t *v53;
  _BYTE buf[22];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  v2 = *((_QWORD *)this + 481);
  if (v2)
  {
    v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
    if (v4)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v4, &v52);
      if (v52)
      {
        v5 = (unsigned __int8 *)*((_QWORD *)this + 479);
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)this + 480), &v51);
          v5 = (unsigned __int8 *)v51;
          if (v51)
            v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v51);
        }
        else
        {
          v51 = 0;
        }
        v6 = v52;
        v7 = *((_QWORD *)this + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
        v9 = v8 + 15.0;
        if (*((_QWORD *)v6 + 6) == v7)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v9);
            if (!buf[16])
              goto LABEL_65;
            v12 = *(_QWORD *)buf;
            v11 = *(_QWORD *)&buf[8];
            v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v14 = v13 - *(_QWORD *)buf;
            if (v13 >= *(_QWORD *)buf)
            {
              v15 = v14 + 2;
              if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v14) = 845;
                goto LABEL_14;
              }
              v11 = 0;
            }
            v15 = 0;
LABEL_14:
            v17 = (float *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v17 >= v12 + v15)
            {
              v15 = (unint64_t)v17 - v12 + 4;
              if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFFBLL || v15 > v11)
                goto LABEL_71;
              *v17 = v50;
            }
            if (v11)
            {
              v19 = *((_QWORD *)v6 + 8);
              v20 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v21 = *((_QWORD *)v6 + 7);
              if (v20 + 16 >= v21)
                v20 = 0;
              if (v15 <= 0x10)
                v15 = 16;
              v22 = v20 + v15;
              if (v21 <= v22)
                v22 = 0;
              *((_QWORD *)v6 + 9) = v22;
              v23 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v22, v23));
              v25 = v6[27];
              if (v24 == 0x80000000 || v25 != 0)
              {
                v31 = v25 + 1;
                v6[27] = v31;
                if (v31 >= v6[26])
                {
                  if (*((_BYTE *)v6 + 96))
                    MEMORY[0x19AEBA1A0](v6[21]);
                  v6[27] = 0;
                }
              }
              goto LABEL_34;
            }
LABEL_71:
            v32 = buf[16];
            if (buf[16])
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)v6 + 1);
              v39 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Rotate>((uint64_t)v53, (int *)&v50, v7);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53);
              if (!v39)
                goto LABEL_34;
              goto LABEL_66;
            }
            __break(1u);
LABEL_77:
            v36 = v12;
LABEL_50:
            v37 = (_QWORD *)((v32 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v37 >= v32 + v36)
            {
              v38 = (char *)v37 - v32;
              v39 = 17;
              if ((unint64_t)v37 - v32 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_66;
              v36 = (unint64_t)(v38 + 8);
              if ((unint64_t)(v38 + 8) > v12)
                goto LABEL_66;
              *v37 = v7;
            }
            if (!v12)
            {
              v39 = 17;
              goto LABEL_66;
            }
            v40 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v41 = *((_QWORD *)v6 + 7);
            if (v40 + 16 >= v41)
              v40 = 0;
            if (v36 <= 0x10)
              v36 = 16;
            v42 = v40 + v36;
            if (v41 <= v42)
              v43 = 0;
            else
              v43 = v42;
            *((_QWORD *)v6 + 9) = v43;
            v44 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v43, v44));
            IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, v45 == 0x80000000);
            *((_QWORD *)v6 + 6) = v7;
          }
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
        if (buf[16])
        {
          v32 = *(_QWORD *)buf;
          v33 = *(_QWORD *)&buf[8];
          v34 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v35 = v34 - *(_QWORD *)buf;
          if (v34 < *(_QWORD *)buf)
          {
            v36 = 0;
            v12 = *(_QWORD *)&buf[8];
          }
          else
          {
            v12 = 0;
            if (v35 > 0xFFFFFFFFFFFFFFFDLL)
              goto LABEL_77;
            v36 = 0;
            if (v35 + 2 <= *(_QWORD *)&buf[8])
            {
              *(_WORD *)(*(_QWORD *)buf + v35) = 2822;
              v12 = v33;
              v36 = v35 + 2;
            }
          }
          goto LABEL_50;
        }
LABEL_65:
        v39 = 15;
LABEL_66:
        v46 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v47 = IPC::errorAsString(v39);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_Rotate";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v47;
          _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v48 = *((_QWORD *)this + 481);
        if (v48)
        {
          v49 = *(_BYTE **)(v48 + 8);
          if (v49)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v49);
        }
LABEL_34:
        v27 = v51;
        v51 = 0;
        if (v27)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v27 + 1, v10);
        v28 = v52;
        v52 = 0;
        if (v28)
        {
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v28);
            *(_QWORD *)buf = v28;
            WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
          }
        }
      }
    }
  }
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSetCTM(WTF::ApproximateTime *this, const WebCore::AffineTransform *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  WebKit::RemoteImageBufferProxy *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  unsigned int v48;
  WTF *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  int v62;
  IPC::Encoder *v63;
  WTF *v64;
  void *v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  WebKit::RemoteImageBufferProxy *v71;
  IPC::StreamClientConnection *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 v76;
  _BYTE buf[24];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (v2)
  {
    v3 = this;
    this = *(WTF::ApproximateTime **)(v2 + 8);
    if (this)
    {
      this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v72);
      if (v72)
      {
        v5 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)v3 + 480), &v71);
          v5 = (unsigned __int8 *)v71;
          if (v71)
            v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v71);
        }
        else
        {
          v71 = 0;
        }
        v6 = v72;
        v7 = *((_QWORD *)v3 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
        v9 = v8 + 15.0;
        if (*((_QWORD *)v6 + 6) == v7)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v74, v9);
            if (!v76)
            {
              v62 = 15;
              goto LABEL_92;
            }
            *(_QWORD *)buf = v74;
            *(_QWORD *)&buf[8] = v75;
            *(_QWORD *)&buf[16] = 0;
            v10 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v11 = v10 >= v74;
            v12 = v10 - v74;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v75)
              {
                *(_QWORD *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v74 + v12) = 848;
                *(_QWORD *)&buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((uint64_t *)buf, a2);
            if (*(_QWORD *)&buf[8])
            {
              v18 = *(_QWORD *)&buf[16];
              v19 = *((_QWORD *)v6 + 8);
              v20 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v21 = *((_QWORD *)v6 + 7);
              if (v20 + 16 >= v21)
                v20 = 0;
              if (*(_QWORD *)&buf[16] <= 0x10uLL)
                v18 = 16;
              v22 = v20 + v18;
              if (v21 <= v22)
                v22 = 0;
              *((_QWORD *)v6 + 9) = v22;
              v23 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v22, v23));
              v25 = *((_DWORD *)v6 + 27);
              if (v24 == 0x80000000 || v25 != 0)
              {
                v30 = v25 + 1;
                *((_DWORD *)v6 + 27) = v30;
                if (v30 >= *((_DWORD *)v6 + 26))
                {
                  if (*((_BYTE *)v6 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
                  *((_DWORD *)v6 + 27) = 0;
                }
              }
              goto LABEL_29;
            }
            v70 = v7;
            v31 = v76;
            if (v76)
            {
              v51 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
              v52 = v51 - v74;
              if (v51 < v74)
              {
                v53 = 0;
              }
              else
              {
                v53 = 0;
                if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v75)
                {
                  *(_WORD *)(v74 + v52) = 2821;
                  v53 = v52 + 2;
                }
              }
              v54 = *((_QWORD *)v6 + 8);
              v55 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v56 = *((_QWORD *)v6 + 7);
              if (v55 + 16 >= v56)
                v55 = 0;
              if (v53 <= 0x10)
                v53 = 16;
              v57 = v55 + v53;
              if (v56 <= v57)
                v57 = 0;
              *((_QWORD *)v6 + 9) = v57;
              v58 = (unint64_t *)(*(_QWORD *)(v54 + 16) + 128);
              do
                __ldaxr(v58);
              while (__stlxr(v57, v58));
              *((_DWORD *)v6 + 27) = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v6 + 1);
              v59 = v73;
              v60 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v60 = 848;
              *(_QWORD *)(v60 + 8) = v70;
              *(_QWORD *)(v60 + 528) = v60 + 16;
              *(_QWORD *)(v60 + 536) = v60 + 16;
              *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v60 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
              *(_QWORD *)buf = v60;
              IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((IPC::Encoder *)v60, (uint64_t *)a2);
              v62 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)buf, 1, 0);
              v63 = *(IPC::Encoder **)buf;
              *(_QWORD *)buf = 0;
              if (v63)
              {
                IPC::Encoder::~Encoder(v63, v61);
                WTF::fastFree(v64, v65);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
              if (v62)
                goto LABEL_92;
              goto LABEL_29;
            }
            __break(1u);
LABEL_103:
            if (!v15)
              break;
            v36 = 0;
            if (v17 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v33 = 0;
            }
            else
            {
              v33 = 0;
              if (v17 + 2 <= v16)
              {
                v33 = v17 + 2;
LABEL_49:
                *(_WORD *)(v31 + v17) = 2822;
                goto LABEL_50;
              }
            }
LABEL_51:
            v37 = (v31 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v37 >= v31 + v33)
            {
              v38 = v37 - v31;
              v39 = 17;
              if (v38 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_101;
              v33 = v38 + 8;
              if (v38 + 8 > v36)
                goto LABEL_101;
              *(_QWORD *)(v31 + v38) = v7;
            }
            if (!v36)
            {
              v39 = 17;
              goto LABEL_101;
            }
            v40 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v41 = *((_QWORD *)v6 + 7);
            if (v40 + 16 >= v41)
              v40 = 0;
            if (v33 <= 0x10)
              v33 = 16;
            v42 = v40 + v33;
            if (v41 <= v42)
              v43 = 0;
            else
              v43 = v42;
            *((_QWORD *)v6 + 9) = v43;
            v44 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v43, v44));
            v46 = *((_DWORD *)v6 + 27);
            if (v45 == 0x80000000 || v46 != 0)
            {
              v48 = v46 + 1;
              *((_DWORD *)v6 + 27) = v48;
              if (v48 >= *((_DWORD *)v6 + 26))
              {
                if (*((_BYTE *)v6 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
                *((_DWORD *)v6 + 27) = 0;
              }
            }
            *((_QWORD *)v6 + 6) = v7;
          }
          v33 = 0;
LABEL_50:
          v36 = v16;
          goto LABEL_51;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
        if (buf[16])
        {
          v31 = *(_QWORD *)buf;
          v16 = *(_QWORD *)&buf[8];
          v32 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v17 = v32 - *(_QWORD *)buf;
          v15 = v32 >= *(_QWORD *)buf;
          v33 = v32 - *(_QWORD *)buf + 2;
          v35 = v17 < 0xFFFFFFFFFFFFFFFELL && v33 <= *(_QWORD *)&buf[8];
          if (!v15 || !v35)
            goto LABEL_103;
          goto LABEL_49;
        }
        v39 = 15;
LABEL_101:
        v62 = v39;
LABEL_92:
        v66 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v67 = IPC::errorAsString(v62);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetCTM";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v67;
          _os_log_impl(&dword_196BCC000, v66, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v68 = *((_QWORD *)v3 + 481);
        if (v68)
        {
          v69 = *(_BYTE **)(v68 + 8);
          if (v69)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v69);
        }
LABEL_29:
        v27 = v71;
        v71 = 0;
        if (v27)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v27 + 1, v14);
        this = v72;
        v72 = 0;
        if (this)
        {
          do
          {
            v28 = __ldaxr((unsigned int *)this);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, (unsigned int *)this));
          if (!v29)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection(this);
            return (WTF::ApproximateTime *)WTF::fastFree(v49, v50);
          }
        }
      }
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordConcatenateCTM(WTF::ApproximateTime *this, const WebCore::AffineTransform *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  WebKit::RemoteImageBufferProxy *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  unsigned int v48;
  WTF *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  int v62;
  IPC::Encoder *v63;
  WTF *v64;
  void *v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  WebKit::RemoteImageBufferProxy *v71;
  IPC::StreamClientConnection *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 v76;
  _BYTE buf[24];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (v2)
  {
    v3 = this;
    this = *(WTF::ApproximateTime **)(v2 + 8);
    if (this)
    {
      this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v72);
      if (v72)
      {
        v5 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)v3 + 480), &v71);
          v5 = (unsigned __int8 *)v71;
          if (v71)
            v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v71);
        }
        else
        {
          v71 = 0;
        }
        v6 = v72;
        v7 = *((_QWORD *)v3 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
        v9 = v8 + 15.0;
        if (*((_QWORD *)v6 + 6) == v7)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v74, v9);
            if (!v76)
            {
              v62 = 15;
              goto LABEL_92;
            }
            *(_QWORD *)buf = v74;
            *(_QWORD *)&buf[8] = v75;
            *(_QWORD *)&buf[16] = 0;
            v10 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v11 = v10 >= v74;
            v12 = v10 - v74;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v75)
              {
                *(_QWORD *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v74 + v12) = 807;
                *(_QWORD *)&buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((uint64_t *)buf, a2);
            if (*(_QWORD *)&buf[8])
            {
              v18 = *(_QWORD *)&buf[16];
              v19 = *((_QWORD *)v6 + 8);
              v20 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v21 = *((_QWORD *)v6 + 7);
              if (v20 + 16 >= v21)
                v20 = 0;
              if (*(_QWORD *)&buf[16] <= 0x10uLL)
                v18 = 16;
              v22 = v20 + v18;
              if (v21 <= v22)
                v22 = 0;
              *((_QWORD *)v6 + 9) = v22;
              v23 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v22, v23));
              v25 = *((_DWORD *)v6 + 27);
              if (v24 == 0x80000000 || v25 != 0)
              {
                v30 = v25 + 1;
                *((_DWORD *)v6 + 27) = v30;
                if (v30 >= *((_DWORD *)v6 + 26))
                {
                  if (*((_BYTE *)v6 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
                  *((_DWORD *)v6 + 27) = 0;
                }
              }
              goto LABEL_29;
            }
            v70 = v7;
            v31 = v76;
            if (v76)
            {
              v51 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
              v52 = v51 - v74;
              if (v51 < v74)
              {
                v53 = 0;
              }
              else
              {
                v53 = 0;
                if (v52 <= 0xFFFFFFFFFFFFFFFDLL && v52 + 2 <= v75)
                {
                  *(_WORD *)(v74 + v52) = 2821;
                  v53 = v52 + 2;
                }
              }
              v54 = *((_QWORD *)v6 + 8);
              v55 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v56 = *((_QWORD *)v6 + 7);
              if (v55 + 16 >= v56)
                v55 = 0;
              if (v53 <= 0x10)
                v53 = 16;
              v57 = v55 + v53;
              if (v56 <= v57)
                v57 = 0;
              *((_QWORD *)v6 + 9) = v57;
              v58 = (unint64_t *)(*(_QWORD *)(v54 + 16) + 128);
              do
                __ldaxr(v58);
              while (__stlxr(v57, v58));
              *((_DWORD *)v6 + 27) = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v6 + 1);
              v59 = v73;
              v60 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v60 = 807;
              *(_QWORD *)(v60 + 8) = v70;
              *(_QWORD *)(v60 + 528) = v60 + 16;
              *(_QWORD *)(v60 + 536) = v60 + 16;
              *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v60 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
              *(_QWORD *)buf = v60;
              IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((IPC::Encoder *)v60, (uint64_t *)a2);
              v62 = IPC::Connection::sendMessageImpl((uint64_t)v59, (uint64_t *)buf, 1, 0);
              v63 = *(IPC::Encoder **)buf;
              *(_QWORD *)buf = 0;
              if (v63)
              {
                IPC::Encoder::~Encoder(v63, v61);
                WTF::fastFree(v64, v65);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
              if (v62)
                goto LABEL_92;
              goto LABEL_29;
            }
            __break(1u);
LABEL_103:
            if (!v15)
              break;
            v36 = 0;
            if (v17 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v33 = 0;
            }
            else
            {
              v33 = 0;
              if (v17 + 2 <= v16)
              {
                v33 = v17 + 2;
LABEL_49:
                *(_WORD *)(v31 + v17) = 2822;
                goto LABEL_50;
              }
            }
LABEL_51:
            v37 = (v31 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v37 >= v31 + v33)
            {
              v38 = v37 - v31;
              v39 = 17;
              if (v38 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_101;
              v33 = v38 + 8;
              if (v38 + 8 > v36)
                goto LABEL_101;
              *(_QWORD *)(v31 + v38) = v7;
            }
            if (!v36)
            {
              v39 = 17;
              goto LABEL_101;
            }
            v40 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v41 = *((_QWORD *)v6 + 7);
            if (v40 + 16 >= v41)
              v40 = 0;
            if (v33 <= 0x10)
              v33 = 16;
            v42 = v40 + v33;
            if (v41 <= v42)
              v43 = 0;
            else
              v43 = v42;
            *((_QWORD *)v6 + 9) = v43;
            v44 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v43, v44));
            v46 = *((_DWORD *)v6 + 27);
            if (v45 == 0x80000000 || v46 != 0)
            {
              v48 = v46 + 1;
              *((_DWORD *)v6 + 27) = v48;
              if (v48 >= *((_DWORD *)v6 + 26))
              {
                if (*((_BYTE *)v6 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
                *((_DWORD *)v6 + 27) = 0;
              }
            }
            *((_QWORD *)v6 + 6) = v7;
          }
          v33 = 0;
LABEL_50:
          v36 = v16;
          goto LABEL_51;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
        if (buf[16])
        {
          v31 = *(_QWORD *)buf;
          v16 = *(_QWORD *)&buf[8];
          v32 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v17 = v32 - *(_QWORD *)buf;
          v15 = v32 >= *(_QWORD *)buf;
          v33 = v32 - *(_QWORD *)buf + 2;
          v35 = v17 < 0xFFFFFFFFFFFFFFFELL && v33 <= *(_QWORD *)&buf[8];
          if (!v15 || !v35)
            goto LABEL_103;
          goto LABEL_49;
        }
        v39 = 15;
LABEL_101:
        v62 = v39;
LABEL_92:
        v66 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v67 = IPC::errorAsString(v62);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ConcatenateCTM";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v67;
          _os_log_impl(&dword_196BCC000, v66, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v68 = *((_QWORD *)v3 + 481);
        if (v68)
        {
          v69 = *(_BYTE **)(v68 + 8);
          if (v69)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v69);
        }
LABEL_29:
        v27 = v71;
        v71 = 0;
        if (v27)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v27 + 1, v14);
        this = v72;
        v72 = 0;
        if (this)
        {
          do
          {
            v28 = __ldaxr((unsigned int *)this);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, (unsigned int *)this));
          if (!v29)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection(this);
            return (WTF::ApproximateTime *)WTF::fastFree(v49, v50);
          }
        }
      }
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSetInlineStroke(WTF::ApproximateTime *result, uint64_t *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  int v58;
  int v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t *v64;
  WebKit::RemoteImageBufferProxy *v65;
  IPC::StreamClientConnection *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  _BYTE buf[24];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v64 = a2;
  v2 = *((_QWORD *)result + 481);
  if (!v2)
    return result;
  v3 = result;
  result = *(WTF::ApproximateTime **)(v2 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v66);
  if (!v66)
    return result;
  v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v65);
    v4 = (unsigned __int8 *)v65;
    if (v65)
      v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v65);
  }
  else
  {
    v65 = 0;
  }
  v5 = v66;
  v6 = *((_QWORD *)v3 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
  v8 = v7 + 15.0;
  if (*((_QWORD *)v5 + 6) == v6)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v67, v8);
      if (!v69)
      {
        v58 = 15;
        goto LABEL_100;
      }
      *(_QWORD *)buf = v67;
      *(_QWORD *)&buf[8] = v68;
      *(_QWORD *)&buf[16] = 0;
      v9 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= v67;
      v11 = v9 - v67;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v68)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v67 + v11) = 850;
          *(_QWORD *)&buf[16] = v11 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(buf, v64);
      if (*(_QWORD *)&buf[8])
      {
        v17 = *(_QWORD *)&buf[16];
        v18 = *((_QWORD *)v5 + 8);
        v19 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *((_QWORD *)v5 + 7);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v21 = 0;
        *((_QWORD *)v5 + 9) = v21;
        v22 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v21, v22));
        v24 = *((_DWORD *)v5 + 27);
        if (v23 == 0x80000000 || v24 != 0)
        {
          v36 = v24 + 1;
          *((_DWORD *)v5 + 27) = v36;
          if (v36 >= *((_DWORD *)v5 + 26))
          {
            if (*((_BYTE *)v5 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
            *((_DWORD *)v5 + 27) = 0;
          }
        }
        goto LABEL_29;
      }
      v37 = v69;
      if (v69)
      {
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v67, v68);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        v59 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineStroke>(*(uint64_t *)buf, &v64, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
        v58 = v59;
        if (v59)
          goto LABEL_100;
        goto LABEL_29;
      }
      __break(1u);
LABEL_106:
      if (!v14)
        break;
      v42 = 0;
      if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        if (v16 + 2 <= v15)
        {
          v39 = v16 + 2;
LABEL_64:
          *(_WORD *)(v37 + v16) = 2822;
          goto LABEL_65;
        }
      }
LABEL_66:
      v43 = (v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v43 >= v37 + v39)
      {
        v44 = v43 - v37;
        v45 = 17;
        if (v44 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_99;
        v39 = v44 + 8;
        if (v44 + 8 > v42)
          goto LABEL_99;
        *(_QWORD *)(v37 + v44) = v6;
      }
      if (!v42)
      {
        v45 = 17;
        goto LABEL_99;
      }
      v46 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v5 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v48 = v46 + v39;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v5 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = *((_DWORD *)v5 + 27);
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        *((_DWORD *)v5 + 27) = v54;
        if (v54 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    v39 = 0;
LABEL_65:
    v42 = v15;
    goto LABEL_66;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
  if (buf[16])
  {
    v37 = *(_QWORD *)buf;
    v15 = *(_QWORD *)&buf[8];
    v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = v38 - *(_QWORD *)buf;
    v14 = v38 >= *(_QWORD *)buf;
    v39 = v38 - *(_QWORD *)buf + 2;
    v41 = v16 < 0xFFFFFFFFFFFFFFFELL && v39 <= *(_QWORD *)&buf[8];
    if (!v14 || !v41)
      goto LABEL_106;
    goto LABEL_64;
  }
  v45 = 15;
LABEL_99:
  v58 = v45;
LABEL_100:
  v60 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v61 = IPC::errorAsString(v58);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetInlineStroke";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v61;
    _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v62 = *((_QWORD *)v3 + 481);
  if (v62)
  {
    v63 = *(_BYTE **)(v62 + 8);
    if (v63)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v63);
  }
LABEL_29:
  v26 = v65;
  v65 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v57 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v57 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_37:
      if (!v30)
      {
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v13);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v27);
    goto LABEL_33;
  }
LABEL_38:
  result = v66;
  v66 = 0;
  if (result)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)result);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)result));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v55, v56);
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSetLineCap(WTF::ApproximateTime *result, char a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  IPC::Encoder *v69;
  WTF *v70;
  void *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  _BYTE *v75;
  WebKit::RemoteImageBufferProxy *v76;
  IPC::StreamClientConnection *v77;
  uint64_t *v78;
  IPC::Encoder *v79;
  _BYTE buf[22];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 481);
  if (!v2)
    return result;
  v3 = result;
  result = *(WTF::ApproximateTime **)(v2 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v77);
  if (!v77)
    return result;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_110;
  v76 = 0;
  while (1)
  {
    v6 = v77;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_107:
        v45 = 15;
        goto LABEL_102;
      }
      v37 = *(_QWORD *)buf;
      v38 = *(_QWORD *)&buf[8];
      v39 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - *(_QWORD *)buf;
      if (v39 < *(_QWORD *)buf)
      {
        v42 = 0;
        v41 = *(_QWORD *)&buf[8];
      }
      else
      {
        v41 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          if (v40 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v40) = 2822;
            v41 = v38;
            v42 = v40 + 2;
          }
        }
      }
      v43 = (_QWORD *)((v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v43 >= v37 + v42)
      {
        v44 = (char *)v43 - v37;
        v45 = 17;
        if ((unint64_t)v43 - v37 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_102;
        v42 = (unint64_t)(v44 + 8);
        if ((unint64_t)(v44 + 8) > v41)
          goto LABEL_102;
        *v43 = v7;
      }
      if (!v41)
      {
        v45 = 17;
        goto LABEL_102;
      }
      v46 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v6 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v6 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = *((_DWORD *)v6 + 27);
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        *((_DWORD *)v6 + 27) = v54;
        if (v54 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
    if (!buf[16])
      goto LABEL_107;
    v11 = *(_QWORD *)buf;
    v12 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    if (v13 < *(_QWORD *)buf)
    {
      v15 = 0;
    }
    else
    {
      v15 = v14 + 2;
      if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(_QWORD *)&buf[8])
        goto LABEL_87;
      *(_WORD *)(*(_QWORD *)buf + v14) = 851;
    }
    if (v15 < v12)
    {
      *(_BYTE *)(v11 + v15) = a2;
      v17 = *((_QWORD *)v6 + 8);
      v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v6 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v15 <= 0xF)
        v15 = 15;
      v20 = v15 + v18;
      if (v19 > v20 + 1)
        v21 = v20 + 1;
      else
        v21 = 0;
      *((_QWORD *)v6 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      v24 = *((_DWORD *)v6 + 27);
      if (v23 == 0x80000000 || v24 != 0)
      {
        v36 = v24 + 1;
        *((_DWORD *)v6 + 27) = v36;
        if (v36 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      goto LABEL_29;
    }
    if (buf[16])
      break;
    __break(1u);
LABEL_110:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v76);
    v5 = v76;
    if (v76)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v76);
  }
  v11 = *(_QWORD *)buf;
LABEL_87:
  v58 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = v58 - v11;
  if (v58 < v11)
  {
    v60 = 0;
  }
  else
  {
    v60 = 0;
    if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v59 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(v11 + v59) = 2821;
      v60 = v59 + 2;
    }
  }
  v61 = *((_QWORD *)v6 + 8);
  v62 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = *((_QWORD *)v6 + 7);
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v60 <= 0x10)
    v60 = 16;
  v64 = v62 + v60;
  if (v63 <= v64)
    v64 = 0;
  *((_QWORD *)v6 + 9) = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    __ldaxr(v65);
  while (__stlxr(v64, v65));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)v6 + 1);
  v66 = v78;
  v67 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v67 = 851;
  *(_QWORD *)(v67 + 8) = v7;
  *(_QWORD *)(v67 + 528) = v67 + 16;
  *(_QWORD *)(v67 + 536) = v67 + 16;
  *(_OWORD *)(v67 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v67 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v67);
  v79 = (IPC::Encoder *)v67;
  *IPC::Encoder::grow((IPC::Encoder *)v67, 1uLL, 1) = a2;
  v45 = IPC::Connection::sendMessageImpl((uint64_t)v66, (uint64_t *)&v79, 1, 0);
  v69 = v79;
  v79 = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v68);
    WTF::fastFree(v70, v71);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
  if (v45)
  {
LABEL_102:
    v72 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v73 = IPC::errorAsString(v45);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetLineCap";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v73;
      _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v74 = *((_QWORD *)v3 + 481);
    if (v74)
    {
      v75 = *(_BYTE **)(v74 + 8);
      if (v75)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v75);
    }
  }
LABEL_29:
  v26 = v76;
  v76 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v57 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v57 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_37:
      if (!v30)
      {
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v10);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v27);
    goto LABEL_33;
  }
LABEL_38:
  result = v77;
  v77 = 0;
  if (result)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)result);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)result));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v55, v56);
    }
  }
  return result;
}

WTF *WebKit::RemoteDisplayListRecorderProxy::recordSetLineDash(_QWORD *a1, uint64_t a2, float a3)
{
  void *v5;
  uint64_t v6;
  WebKit::RemoteRenderingBackendProxy *v7;
  WTF::ApproximateTime *v8;
  unsigned int *v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *result;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  _BYTE *v61;
  WTF *v62;
  int v63;
  float v64;
  WTF **v65;
  WebKit::RemoteImageBufferProxy *v66;
  unsigned int *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  _BYTE buf[24];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v62, a2);
  v64 = a3;
  v65 = &v62;
  v6 = a1[481];
  if (!v6)
    goto LABEL_42;
  v7 = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 8);
  if (!v7)
    goto LABEL_42;
  WebKit::RemoteRenderingBackendProxy::connection(v7, &v67);
  if (!v67)
    goto LABEL_42;
  v8 = (WTF::ApproximateTime *)a1[479];
  if (v8)
    goto LABEL_98;
  v66 = 0;
  while (1)
  {
    v9 = v67;
    v10 = a1[478];
    WTF::ApproximateTime::now(v8);
    v12 = v11 + 15.0;
    if (*((_QWORD *)v9 + 6) != v10)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), buf, v11 + 15.0);
      if (!buf[16])
      {
LABEL_88:
        v47 = 15;
        goto LABEL_91;
      }
      v39 = *(_QWORD *)buf;
      v40 = *(_QWORD *)&buf[8];
      v41 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v42 = v41 - *(_QWORD *)buf;
      if (v41 < *(_QWORD *)buf)
      {
        v44 = 0;
        v43 = *(_QWORD *)&buf[8];
      }
      else
      {
        v43 = 0;
        if (v42 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v44 = 0;
        }
        else
        {
          v44 = 0;
          if (v42 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v42) = 2822;
            v43 = v40;
            v44 = v42 + 2;
          }
        }
      }
      v45 = (_QWORD *)((v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v45 >= v39 + v44)
      {
        v46 = (char *)v45 - v39;
        v47 = 17;
        if ((unint64_t)v45 - v39 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_91;
        v44 = (unint64_t)(v46 + 8);
        if ((unint64_t)(v46 + 8) > v43)
          goto LABEL_91;
        *v45 = v10;
      }
      if (!v43)
      {
        v47 = 17;
        goto LABEL_91;
      }
      v48 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v9 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v44 <= 0x10)
        v44 = 16;
      v50 = v48 + v44;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v9 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v9 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = v9[27];
      if (v53 == 0x80000000 || v54 != 0)
      {
        v56 = v54 + 1;
        v9[27] = v56;
        if (v56 >= v9[26])
        {
          if (*((_BYTE *)v9 + 96))
            MEMORY[0x19AEBA1A0](v9[21]);
          v9[27] = 0;
        }
      }
      *((_QWORD *)v9 + 6) = v10;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), &v68, v12);
    if (!v70)
      goto LABEL_88;
    *(_QWORD *)buf = v68;
    *(_QWORD *)&buf[8] = v69;
    *(_QWORD *)&buf[16] = 0;
    v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 >= v68;
    v15 = v13 - v68;
    if (v14)
    {
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v69)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v68 + v15) = 852;
        *(_QWORD *)&buf[16] = v15 + 2;
      }
    }
    v8 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::encode(buf, (uint64_t)v65);
    if (*(_QWORD *)&buf[8])
    {
      v17 = *(_QWORD *)&buf[16];
      v18 = *((_QWORD *)v9 + 8);
      v19 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *((_QWORD *)v9 + 7);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v17 = 16;
      v21 = v19 + v17;
      if (v20 <= v21)
        v21 = 0;
      *((_QWORD *)v9 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      v24 = v9[27];
      if (v23 == 0x80000000 || v24 != 0)
      {
        v38 = v24 + 1;
        v9[27] = v38;
        if (v38 >= v9[26])
        {
          if (*((_BYTE *)v9 + 96))
            MEMORY[0x19AEBA1A0](v9[21]);
          v9[27] = 0;
        }
      }
      goto LABEL_29;
    }
    if (v70)
      break;
    __break(1u);
LABEL_98:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v8, a1[480], &v66);
    v8 = v66;
    if (v66)
      v8 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v66);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v9, v68, v69);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v9 + 1);
  v47 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetLineDash>(*(uint64_t *)buf, (uint64_t *)&v65, v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v47)
    goto LABEL_29;
LABEL_91:
  v58 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v59 = IPC::errorAsString(v47);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetLineDash";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v59;
    _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v60 = a1[481];
  if (v60)
  {
    v61 = *(_BYTE **)(v60 + 8);
    if (v61)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
  }
LABEL_29:
  v26 = v66;
  v66 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v57 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v57 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_37:
      if (!v30)
      {
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v5);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v27);
    goto LABEL_33;
  }
LABEL_38:
  v34 = v67;
  v67 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      *(_QWORD *)buf = v34;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
LABEL_42:
  result = v62;
  if (v62)
  {
    v62 = 0;
    v63 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSetLineJoin(WTF::ApproximateTime *result, char a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  IPC::Encoder *v69;
  WTF *v70;
  void *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  _BYTE *v75;
  WebKit::RemoteImageBufferProxy *v76;
  IPC::StreamClientConnection *v77;
  uint64_t *v78;
  IPC::Encoder *v79;
  _BYTE buf[22];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 481);
  if (!v2)
    return result;
  v3 = result;
  result = *(WTF::ApproximateTime **)(v2 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v77);
  if (!v77)
    return result;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_110;
  v76 = 0;
  while (1)
  {
    v6 = v77;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_107:
        v45 = 15;
        goto LABEL_102;
      }
      v37 = *(_QWORD *)buf;
      v38 = *(_QWORD *)&buf[8];
      v39 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - *(_QWORD *)buf;
      if (v39 < *(_QWORD *)buf)
      {
        v42 = 0;
        v41 = *(_QWORD *)&buf[8];
      }
      else
      {
        v41 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          if (v40 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v40) = 2822;
            v41 = v38;
            v42 = v40 + 2;
          }
        }
      }
      v43 = (_QWORD *)((v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v43 >= v37 + v42)
      {
        v44 = (char *)v43 - v37;
        v45 = 17;
        if ((unint64_t)v43 - v37 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_102;
        v42 = (unint64_t)(v44 + 8);
        if ((unint64_t)(v44 + 8) > v41)
          goto LABEL_102;
        *v43 = v7;
      }
      if (!v41)
      {
        v45 = 17;
        goto LABEL_102;
      }
      v46 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v6 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v6 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = *((_DWORD *)v6 + 27);
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        *((_DWORD *)v6 + 27) = v54;
        if (v54 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
    if (!buf[16])
      goto LABEL_107;
    v11 = *(_QWORD *)buf;
    v12 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    if (v13 < *(_QWORD *)buf)
    {
      v15 = 0;
    }
    else
    {
      v15 = v14 + 2;
      if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(_QWORD *)&buf[8])
        goto LABEL_87;
      *(_WORD *)(*(_QWORD *)buf + v14) = 853;
    }
    if (v15 < v12)
    {
      *(_BYTE *)(v11 + v15) = a2;
      v17 = *((_QWORD *)v6 + 8);
      v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v6 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v15 <= 0xF)
        v15 = 15;
      v20 = v15 + v18;
      if (v19 > v20 + 1)
        v21 = v20 + 1;
      else
        v21 = 0;
      *((_QWORD *)v6 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      v24 = *((_DWORD *)v6 + 27);
      if (v23 == 0x80000000 || v24 != 0)
      {
        v36 = v24 + 1;
        *((_DWORD *)v6 + 27) = v36;
        if (v36 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      goto LABEL_29;
    }
    if (buf[16])
      break;
    __break(1u);
LABEL_110:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v76);
    v5 = v76;
    if (v76)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v76);
  }
  v11 = *(_QWORD *)buf;
LABEL_87:
  v58 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v59 = v58 - v11;
  if (v58 < v11)
  {
    v60 = 0;
  }
  else
  {
    v60 = 0;
    if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v59 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(v11 + v59) = 2821;
      v60 = v59 + 2;
    }
  }
  v61 = *((_QWORD *)v6 + 8);
  v62 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = *((_QWORD *)v6 + 7);
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v60 <= 0x10)
    v60 = 16;
  v64 = v62 + v60;
  if (v63 <= v64)
    v64 = 0;
  *((_QWORD *)v6 + 9) = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    __ldaxr(v65);
  while (__stlxr(v64, v65));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)v6 + 1);
  v66 = v78;
  v67 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v67 = 853;
  *(_QWORD *)(v67 + 8) = v7;
  *(_QWORD *)(v67 + 528) = v67 + 16;
  *(_QWORD *)(v67 + 536) = v67 + 16;
  *(_OWORD *)(v67 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v67 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v67);
  v79 = (IPC::Encoder *)v67;
  *IPC::Encoder::grow((IPC::Encoder *)v67, 1uLL, 1) = a2;
  v45 = IPC::Connection::sendMessageImpl((uint64_t)v66, (uint64_t *)&v79, 1, 0);
  v69 = v79;
  v79 = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v68);
    WTF::fastFree(v70, v71);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
  if (v45)
  {
LABEL_102:
    v72 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v73 = IPC::errorAsString(v45);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetLineJoin";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v73;
      _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v74 = *((_QWORD *)v3 + 481);
    if (v74)
    {
      v75 = *(_BYTE **)(v74 + 8);
      if (v75)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v75);
    }
  }
LABEL_29:
  v26 = v76;
  v76 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v57 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v57 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_37:
      if (!v30)
      {
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v10);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v27);
    goto LABEL_33;
  }
LABEL_38:
  result = v77;
  v77 = 0;
  if (result)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)result);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)result));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v55, v56);
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSetMiterLimit(WTF::ApproximateTime *this, float a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  WebKit::RemoteImageBufferProxy *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  IPC::Encoder *v70;
  WTF *v71;
  void *v72;
  NSObject *v73;
  const char *v74;
  uint64_t v75;
  _BYTE *v76;
  WebKit::RemoteImageBufferProxy *v77;
  IPC::StreamClientConnection *v78;
  uint64_t *v79;
  IPC::Encoder *v80;
  _BYTE buf[22];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v78);
  if (!v78)
    return this;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_116;
  v77 = 0;
  while (1)
  {
    v6 = v78;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_113:
        v46 = 15;
LABEL_106:
        v73 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v74 = IPC::errorAsString(v46);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetMiterLimit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v74;
          _os_log_impl(&dword_196BCC000, v73, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v75 = *((_QWORD *)v3 + 481);
        if (v75)
        {
          v76 = *(_BYTE **)(v75 + 8);
          if (v76)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v76);
        }
        goto LABEL_34;
      }
      v38 = *(_QWORD *)buf;
      v39 = *(_QWORD *)&buf[8];
      v40 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v41 = v40 - *(_QWORD *)buf;
      if (v40 < *(_QWORD *)buf)
      {
        v43 = 0;
        v42 = *(_QWORD *)&buf[8];
      }
      else
      {
        v42 = 0;
        if (v41 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v41 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v41) = 2822;
            v42 = v39;
            v43 = v41 + 2;
          }
        }
      }
      v44 = (_QWORD *)((v38 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v38 + v43)
      {
        v45 = (char *)v44 - v38;
        v46 = 17;
        if ((unint64_t)v44 - v38 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_106;
        v43 = (unint64_t)(v45 + 8);
        if ((unint64_t)(v45 + 8) > v42)
          goto LABEL_106;
        *v44 = v7;
      }
      if (!v42)
      {
        v46 = 17;
        goto LABEL_106;
      }
      v47 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v48 = *((_QWORD *)v6 + 7);
      if (v47 + 16 >= v48)
        v47 = 0;
      if (v43 <= 0x10)
        v43 = 16;
      v49 = v47 + v43;
      if (v48 <= v49)
        v50 = 0;
      else
        v50 = v49;
      *((_QWORD *)v6 + 9) = v50;
      v51 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v50, v51));
      v53 = *((_DWORD *)v6 + 27);
      if (v52 == 0x80000000 || v53 != 0)
      {
        v55 = v53 + 1;
        *((_DWORD *)v6 + 27) = v55;
        if (v55 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
    if (!buf[16])
      goto LABEL_113;
    v12 = *(_QWORD *)buf;
    v11 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    if (v13 >= *(_QWORD *)buf)
    {
      v15 = v14 + 2;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v14) = 854;
        goto LABEL_14;
      }
      v11 = 0;
    }
    v15 = 0;
LABEL_14:
    v17 = (float *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v17 >= v12 + v15)
    {
      v15 = (unint64_t)v17 - v12 + 4;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFFBLL || v15 > v11)
        goto LABEL_90;
      *v17 = a2;
    }
    if (v11)
    {
      v19 = *((_QWORD *)v6 + 8);
      v20 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = *((_QWORD *)v6 + 7);
      if (v20 + 16 >= v21)
        v20 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v22 = v20 + v15;
      if (v21 <= v22)
        v22 = 0;
      *((_QWORD *)v6 + 9) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      v25 = *((_DWORD *)v6 + 27);
      if (v24 == 0x80000000 || v25 != 0)
      {
        v37 = v25 + 1;
        *((_DWORD *)v6 + 27) = v37;
        if (v37 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      goto LABEL_34;
    }
LABEL_90:
    if (buf[16])
      break;
    __break(1u);
LABEL_116:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v77);
    v5 = v77;
    if (v77)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v77);
  }
  v59 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = v59 - *(_QWORD *)buf;
  if (v59 < *(_QWORD *)buf)
  {
    v61 = 0;
  }
  else
  {
    v61 = 0;
    if (v60 <= 0xFFFFFFFFFFFFFFFDLL && v60 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v60) = 2821;
      v61 = v60 + 2;
    }
  }
  v62 = *((_QWORD *)v6 + 8);
  v63 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = *((_QWORD *)v6 + 7);
  if (v63 + 16 >= v64)
    v63 = 0;
  if (v61 <= 0x10)
    v61 = 16;
  v65 = v63 + v61;
  if (v64 <= v65)
    v65 = 0;
  *((_QWORD *)v6 + 9) = v65;
  v66 = (unint64_t *)(*(_QWORD *)(v62 + 16) + 128);
  do
    __ldaxr(v66);
  while (__stlxr(v65, v66));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v6 + 1);
  v67 = v79;
  v68 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v68 = 854;
  *(_QWORD *)(v68 + 8) = v7;
  *(_QWORD *)(v68 + 528) = v68 + 16;
  *(_QWORD *)(v68 + 536) = v68 + 16;
  *(_OWORD *)(v68 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v68 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v68);
  v80 = (IPC::Encoder *)v68;
  *(float *)IPC::Encoder::grow((IPC::Encoder *)v68, 4uLL, 4) = a2;
  v46 = IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v80, 1, 0);
  v70 = v80;
  v80 = 0;
  if (v70)
  {
    IPC::Encoder::~Encoder(v70, v69);
    WTF::fastFree(v71, v72);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79);
  if (v46)
    goto LABEL_106;
LABEL_34:
  v27 = v77;
  v77 = 0;
  if (v27)
  {
    v28 = *((_QWORD *)v27 + 1);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
      goto LABEL_37;
    }
    if (__stxr(1u, (unsigned __int8 *)v28))
LABEL_37:
      MEMORY[0x19AEABB3C](v28);
    v30 = *(_QWORD *)(v28 + 8);
    v31 = v30 - 1;
    *(_QWORD *)(v28 + 8) = v30 - 1;
    if (v30 == 1)
    {
      v58 = *(_QWORD *)(v28 + 16);
      v32 = *(_QWORD *)(v28 + 24);
      *(_QWORD *)(v28 + 24) = 0;
      v33 = v58 != 0;
    }
    else
    {
      v32 = 0;
      v33 = 1;
    }
    v34 = __ldxr((unsigned __int8 *)v28);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
      {
LABEL_42:
        if (!v31)
        {
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          if (!v33)
            WTF::fastFree((WTF *)v28, v10);
        }
        goto LABEL_43;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
    goto LABEL_42;
  }
LABEL_43:
  this = v78;
  v78 = 0;
  if (this)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)this);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)this));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v56, v57);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordClearDropShadow(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v73;
  IPC::StreamClientConnection *v74;
  uint64_t *v75;
  IPC::Encoder *v76;
  _BYTE buf[22];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v1 = this[481];
  if (!v1)
    return this;
  v2 = this;
  this = *(_QWORD **)(v1 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v74);
  if (!v74)
    return this;
  v3 = v2[479];
  if (!v3)
  {
    v4 = 0;
LABEL_6:
    v5 = 1;
    goto LABEL_7;
  }
  v4 = v2[480];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_112;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v3);
LABEL_112:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v73 = __ldxr((unsigned __int8 *)v3);
  if (v73 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_118:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    goto LABEL_6;
  if (!*(_BYTE *)(v4 + 4016))
  {
    *(_BYTE *)(v4 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v4);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v5 = 0;
LABEL_7:
  v6 = v74;
  v7 = v2[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_54;
    v24 = *(_QWORD *)buf;
    v25 = *(_QWORD *)&buf[8];
    v26 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v27 = v26 - *(_QWORD *)buf;
    if (v26 < *(_QWORD *)buf)
    {
      v29 = 0;
      v28 = *(_QWORD *)&buf[8];
    }
    else
    {
      v28 = 0;
      if (v27 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        if (v27 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v27) = 2822;
          v28 = v25;
          v29 = v27 + 2;
        }
      }
    }
    v30 = (_QWORD *)((v24 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v30 >= v24 + v29)
    {
      v31 = (char *)v30 - v24;
      v32 = 17;
      if ((unint64_t)v30 - v24 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_55;
      v29 = (unint64_t)(v31 + 8);
      if ((unint64_t)(v31 + 8) > v28)
        goto LABEL_55;
      *v30 = v7;
    }
    if (!v28)
    {
      v32 = 17;
      goto LABEL_55;
    }
    v33 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *((_QWORD *)v6 + 7);
    if (v33 + 16 >= v34)
      v33 = 0;
    if (v29 <= 0x10)
      v29 = 16;
    v35 = v33 + v29;
    if (v34 <= v35)
      v36 = 0;
    else
      v36 = v35;
    *((_QWORD *)v6 + 9) = v36;
    v37 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v36, v37));
    v39 = *((_DWORD *)v6 + 27);
    if (v38 == 0x80000000 || v39 != 0)
    {
      v45 = v39 + 1;
      *((_DWORD *)v6 + 27) = v45;
      if (v45 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
  if (!buf[16])
  {
LABEL_54:
    v32 = 15;
LABEL_55:
    v41 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v42 = IPC::errorAsString(v32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClearDropShadow";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v42;
      _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v43 = v2[481];
    if (v43)
    {
      v44 = *(_BYTE **)(v43 + 8);
      if (v44)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v44);
    }
    goto LABEL_86;
  }
  v11 = *(_QWORD *)buf;
  v12 = *(_QWORD *)&buf[8];
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  v14 = (unint64_t)v13 - *(_QWORD *)buf;
  if ((unint64_t)v13 < *(_QWORD *)buf)
  {
    v15 = 0;
    if (*(_QWORD *)&buf[8])
      goto LABEL_15;
  }
  else
  {
    v15 = v14 + 2;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(_QWORD *)&buf[8])
      goto LABEL_70;
    *v13 = 798;
    if (v12)
    {
LABEL_15:
      v17 = *((_QWORD *)v6 + 8);
      v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v6 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v20 = v18 + v15;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *((_QWORD *)v6 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_86;
    }
  }
  if (!buf[16])
    __break(1u);
  v11 = *(_QWORD *)buf;
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  v47 = 0;
  v48 = (unint64_t)v13 >= v11;
  v49 = (unint64_t)v13 - v11;
  if (v48 && v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= *(_QWORD *)&buf[8])
  {
    *(_WORD *)(v11 + v49) = 2821;
    v47 = v49 + 2;
  }
  v50 = *((_QWORD *)v6 + 8);
  v51 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *((_QWORD *)v6 + 7);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v47 <= 0x10)
    v47 = 16;
  v53 = v51 + v47;
  if (v52 <= v53)
    v53 = 0;
  *((_QWORD *)v6 + 9) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)v6 + 1);
  v55 = v75;
  v56 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v56 = 798;
  *(_QWORD *)(v56 + 8) = v7;
  *(_QWORD *)(v56 + 528) = v56 + 16;
  *(_QWORD *)(v56 + 536) = v56 + 16;
  *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v56 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
  v76 = (IPC::Encoder *)v56;
  v32 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v76, 1, 0);
  v58 = v76;
  v76 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v57);
    WTF::fastFree(v59, v60);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v75);
  if (v32)
    goto LABEL_55;
LABEL_86:
  if ((v5 & 1) != 0)
    goto LABEL_103;
  v61 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v61))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v61))
  {
    goto LABEL_91;
  }
  MEMORY[0x19AEABB3C](v61);
LABEL_91:
  v63 = *(_QWORD *)(v61 + 8);
  v64 = v63 - 1;
  *(_QWORD *)(v61 + 8) = v63 - 1;
  if (v63 == 1)
  {
    v72 = *(_QWORD *)(v61 + 16);
    v65 = *(_QWORD *)(v61 + 24);
    *(_QWORD *)(v61 + 24) = 0;
    v66 = v72 != 0;
  }
  else
  {
    v65 = 0;
    v66 = 1;
  }
  v67 = __ldxr((unsigned __int8 *)v61);
  if (v67 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v61))
    {
      if (!v64)
        goto LABEL_99;
      goto LABEL_103;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v61);
  if (!v64)
  {
LABEL_99:
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    if (!v66)
      WTF::fastFree((WTF *)v61, v10);
  }
LABEL_103:
  this = v74;
  v74 = 0;
  if (this)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)this);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)this));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordClipOut(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _BYTE *v56;
  int *v57;
  WebKit::RemoteImageBufferProxy *v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  _BYTE buf[24];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v59);
  if (!v59)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_93;
  v58 = 0;
  while (1)
  {
    v6 = v59;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_83:
        v42 = 15;
        goto LABEL_86;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_86;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_86;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v60, v9);
    if (!v62)
      goto LABEL_83;
    *(_QWORD *)buf = v60;
    *(_QWORD *)&buf[8] = v61;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v60;
    v12 = v10 - v60;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v60 + v12) = 801;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v57);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *((_QWORD *)v6 + 9) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v62)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v58);
    v5 = v58;
    if (v58)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v58);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v60, v61);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOut>(*(uint64_t *)buf, &v57, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_86:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClipOut";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v55 = *((_QWORD *)this + 481);
  if (v55)
  {
    v56 = *(_BYTE **)(v55 + 8);
    if (v56)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
  }
LABEL_27:
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v52 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v52 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  v31 = v59;
  v59 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      *(_QWORD *)buf = v31;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordClipToImageBuffer(_QWORD *this, WebCore::ImageBuffer *a2, const WebCore::FloatRect *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  IPC::StreamClientConnection *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v20;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  int v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  NSObject *v62;
  const char *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  int v80;
  IPC::StreamClientConnection *v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 v85;
  _BYTE buf[24];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v3 = this[481];
  if (!v3)
    return this;
  v4 = this;
  this = *(_QWORD **)(v3 + 8);
  if (!this)
    return this;
  v6 = *((_QWORD *)a2 + 15);
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v81);
  if (!v81)
    return this;
  v7 = v4[479];
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  v8 = v4[480];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_120;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v7);
LABEL_120:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v80 = __ldxr((unsigned __int8 *)v7);
  if (v80 != 1)
  {
    __clrex();
    goto LABEL_126;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_126:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v8)
    goto LABEL_6;
  if (!*(_BYTE *)(v8 + 4016))
  {
    *(_BYTE *)(v8 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v9 = 0;
LABEL_7:
  v10 = v81;
  v11 = v4[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v13 = v12 + 15.0;
  if (*((_QWORD *)v10 + 6) == v11)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, &v83, v13);
      if (!v85)
        break;
      v14 = v83;
      v15 = v84;
      *(_QWORD *)buf = v83;
      *(_QWORD *)&buf[8] = v84;
      *(_QWORD *)&buf[16] = 0;
      v16 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = v16 - v83;
      if (v16 < v83)
      {
        v18 = 0;
      }
      else
      {
        v18 = v17 + 2;
        if (v17 > 0xFFFFFFFFFFFFFFFDLL || v18 > v84)
        {
          v15 = 0;
          v18 = 0;
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v83 + v17) = 806;
          *(_QWORD *)&buf[16] = v17 + 2;
        }
      }
      v20 = (_QWORD *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v20 >= v14 + v18)
      {
        if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v20 - v14 + 8 > v15)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *v20 = v6;
          *(_QWORD *)&buf[16] = (char *)v20 - v14 + 8;
        }
      }
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v24 = *(_QWORD *)&buf[16];
        v25 = *((_QWORD *)v10 + 8);
        v26 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *((_QWORD *)v10 + 7);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v29 = 0;
        else
          v29 = v28;
        *((_QWORD *)v10 + 9) = v29;
        v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v29, v30));
        if (v31 == 0x80000000 || *((_DWORD *)v10 + 27))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
        goto LABEL_84;
      }
      v32 = v85;
      if (v85)
      {
        v33 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = v33 - v83;
        if (v33 < v83)
        {
          v35 = 0;
        }
        else
        {
          v35 = 0;
          if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v84)
          {
            *(_WORD *)(v83 + v34) = 2821;
            v35 = v34 + 2;
          }
        }
        v36 = *((_QWORD *)v10 + 8);
        v37 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v38 = *((_QWORD *)v10 + 7);
        if (v37 + 16 >= v38)
          v37 = 0;
        if (v35 <= 0x10)
          v35 = 16;
        v39 = v37 + v35;
        if (v38 <= v39)
          v39 = 0;
        *((_QWORD *)v10 + 9) = v39;
        v40 = (unint64_t *)(*(_QWORD *)(v36 + 16) + 128);
        do
          __ldaxr(v40);
        while (__stlxr(v39, v40));
        *((_DWORD *)v10 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)v10 + 1);
        v41 = v82;
        v42 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v42 = 806;
        *(_QWORD *)(v42 + 8) = v11;
        *(_QWORD *)(v42 + 528) = v42 + 16;
        *(_QWORD *)(v42 + 536) = v42 + 16;
        *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v42 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
        *(_QWORD *)buf = v42;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 8uLL, 8) = v6;
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v42, (int *)a3);
        v44 = IPC::Connection::sendMessageImpl((uint64_t)v41, (uint64_t *)buf, 1, 0);
        v45 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v45)
        {
          IPC::Encoder::~Encoder(v45, v43);
          WTF::fastFree(v46, v47);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
        if (!v44)
          goto LABEL_84;
        goto LABEL_79;
      }
      __break(1u);
LABEL_114:
      v51 = v23;
LABEL_58:
      v52 = (_QWORD *)((v32 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v52 >= v32 + v51)
      {
        v53 = (char *)v52 - v32;
        v44 = 17;
        if ((unint64_t)v52 - v32 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_79;
        v51 = (unint64_t)(v53 + 8);
        if ((unint64_t)(v53 + 8) > v23)
          goto LABEL_79;
        *v52 = v11;
      }
      if (!v23)
      {
        v44 = 17;
        goto LABEL_79;
      }
      v54 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *((_QWORD *)v10 + 7);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v51 <= 0x10)
        v51 = 16;
      v56 = v54 + v51;
      if (v55 <= v56)
        v57 = 0;
      else
        v57 = v56;
      *((_QWORD *)v10 + 9) = v57;
      v58 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 8) + 16) + 128);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v57, v58));
      v60 = *((_DWORD *)v10 + 27);
      if (v59 == 0x80000000 || v60 != 0)
      {
        v75 = v60 + 1;
        *((_DWORD *)v10 + 27) = v75;
        if (v75 >= *((_DWORD *)v10 + 26))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
      }
      *((_QWORD *)v10 + 6) = v11;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, buf, v12 + 15.0);
    if (buf[16])
    {
      v32 = *(_QWORD *)buf;
      v48 = *(_QWORD *)&buf[8];
      v49 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v50 = v49 - *(_QWORD *)buf;
      if (v49 < *(_QWORD *)buf)
      {
        v51 = 0;
        v23 = *(_QWORD *)&buf[8];
      }
      else
      {
        v23 = 0;
        if (v50 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_114;
        v51 = 0;
        if (v50 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v50) = 2822;
          v23 = v48;
          v51 = v50 + 2;
        }
      }
      goto LABEL_58;
    }
  }
  v44 = 15;
LABEL_79:
  v62 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v63 = IPC::errorAsString(v44);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClipToImageBuffer";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v63;
    _os_log_impl(&dword_196BCC000, v62, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v64 = v4[481];
  if (v64)
  {
    v65 = *(_BYTE **)(v64 + 8);
    if (v65)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v65);
  }
LABEL_84:
  if ((v9 & 1) != 0)
    goto LABEL_101;
  v66 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v66))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v66))
  {
    goto LABEL_89;
  }
  MEMORY[0x19AEABB3C](v66);
LABEL_89:
  v68 = *(_QWORD *)(v66 + 8);
  v69 = v68 - 1;
  *(_QWORD *)(v66 + 8) = v68 - 1;
  if (v68 == 1)
  {
    v78 = *(_QWORD *)(v66 + 16);
    v70 = *(_QWORD *)(v66 + 24);
    *(_QWORD *)(v66 + 24) = 0;
    v71 = v78 != 0;
  }
  else
  {
    v70 = 0;
    v71 = 1;
  }
  v72 = __ldxr((unsigned __int8 *)v66);
  if (v72 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v66))
    {
      if (!v69)
        goto LABEL_97;
      goto LABEL_101;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v66);
  if (!v69)
  {
LABEL_97:
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    if (!v71)
      WTF::fastFree((WTF *)v66, v22);
  }
LABEL_101:
  this = v81;
  v81 = 0;
  if (this)
  {
    do
    {
      v73 = __ldaxr((unsigned int *)this);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, (unsigned int *)this));
    if (!v74)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v76, v77);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordClipOutToPath(_QWORD *this, const WebCore::Path *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v74;
  IPC::StreamClientConnection *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  _BYTE buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = this[481];
  if (!v2)
    return this;
  v3 = this;
  this = *(_QWORD **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v75);
  if (!v75)
    return this;
  v5 = v3[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v3[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_113;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_113:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v74 = __ldxr((unsigned __int8 *)v5);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_119:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v7 = 0;
LABEL_7:
  v8 = v75;
  v9 = v3[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v77, v11);
      if (!v79)
        break;
      *(_QWORD *)buf = v77;
      *(_QWORD *)&buf[8] = v78;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v77;
      v14 = v12 - v77;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v78)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v77 + v14) = 803;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_79;
      }
      v26 = v79;
      if (v79)
      {
        v27 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - v77;
        if (v27 < v77)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v78)
          {
            *(_WORD *)(v77 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *((_QWORD *)v8 + 8);
        v31 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *((_QWORD *)v8 + 7);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *((_QWORD *)v8 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v8 + 1);
        v35 = v76;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 803;
        *(_QWORD *)(v36 + 8) = v9;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        *(_QWORD *)buf = v36;
        IPC::ArgumentCoder<WebCore::Path,void>::encode((IPC::Encoder *)v36, a2);
        v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)buf, 1, 0);
        v39 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
        if (!v38)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v45 = v17;
LABEL_53:
      v46 = (_QWORD *)((v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v46 >= v26 + v45)
      {
        v47 = (char *)v46 - v26;
        v38 = 17;
        if ((unint64_t)v46 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v45 = (unint64_t)(v47 + 8);
        if ((unint64_t)(v47 + 8) > v17)
          goto LABEL_74;
        *v46 = v9;
      }
      if (!v17)
      {
        v38 = 17;
        goto LABEL_74;
      }
      v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v8 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v50 = v48 + v45;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v8 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v8 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v69 = v54 + 1;
        *((_DWORD *)v8 + 27) = v69;
        if (v69 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v45 = 0;
        v17 = *(_QWORD *)&buf[8];
      }
      else
      {
        v17 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v45 = 0;
        if (v44 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
          v17 = v42;
          v45 = v44 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v38 = 15;
LABEL_74:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v38);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClipOutToPath";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = v3[481];
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_79:
  if ((v7 & 1) != 0)
    goto LABEL_96;
  v60 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v60);
LABEL_84:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v72 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v72 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v60))
    {
      if (!v63)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (!v63)
  {
LABEL_92:
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    if (!v65)
      WTF::fastFree((WTF *)v60, v16);
  }
LABEL_96:
  this = v75;
  v75 = 0;
  if (this)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)this);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)this));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordClipPath(WTF::ApproximateTime *result, WebCore::Path *a2, char a3)
{
  uint64_t v3;
  WTF::ApproximateTime *v4;
  WTF::ApproximateTime *v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unsigned int v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  _BYTE *v77;
  WebKit::RemoteImageBufferProxy *v78;
  IPC::StreamClientConnection *v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  _BYTE buf[24];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 481);
  if (!v3)
    return result;
  v4 = result;
  result = *(WTF::ApproximateTime **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v79);
  if (!v79)
    return result;
  v7 = (WTF::ApproximateTime *)*((_QWORD *)v4 + 479);
  if (v7)
    goto LABEL_113;
  v78 = 0;
  while (1)
  {
    v8 = v79;
    v9 = *((_QWORD *)v4 + 478);
    WTF::ApproximateTime::now(v7);
    v11 = v10 + 15.0;
    if (*((_QWORD *)v8 + 6) == v9)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (!buf[16])
    {
LABEL_111:
      v47 = 15;
LABEL_105:
      v74 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v75 = IPC::errorAsString(v47);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClipPath";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v75;
        _os_log_impl(&dword_196BCC000, v74, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v76 = *((_QWORD *)v4 + 481);
      if (v76)
      {
        v77 = *(_BYTE **)(v76 + 8);
        if (v77)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v77);
      }
      goto LABEL_28;
    }
    v36 = *(_QWORD *)buf;
    v37 = *(_QWORD *)&buf[8];
    v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v39 = v38 - *(_QWORD *)buf;
    v40 = v38 >= *(_QWORD *)buf;
    v41 = v38 - *(_QWORD *)buf + 2;
    v43 = v39 < 0xFFFFFFFFFFFFFFFELL && v41 <= *(_QWORD *)&buf[8];
    if (v40 && v43)
      goto LABEL_62;
    if (!v40)
    {
      v41 = 0;
      goto LABEL_63;
    }
    v44 = 0;
    if (v39 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v41 = 0;
      goto LABEL_64;
    }
    v41 = 0;
    if (v39 + 2 <= *(_QWORD *)&buf[8])
    {
      v41 = v39 + 2;
LABEL_62:
      *(_WORD *)(*(_QWORD *)buf + v39) = 2822;
LABEL_63:
      v44 = v37;
    }
LABEL_64:
    v45 = (_QWORD *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v45 >= v36 + v41)
    {
      v46 = (char *)v45 - v36;
      v47 = 17;
      if ((unint64_t)v45 - v36 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_105;
      v41 = (unint64_t)(v46 + 8);
      if ((unint64_t)(v46 + 8) > v44)
        goto LABEL_105;
      *v45 = v9;
    }
    if (!v44)
    {
      v47 = 17;
      goto LABEL_105;
    }
    v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = *((_QWORD *)v8 + 7);
    if (v48 + 16 >= v49)
      v48 = 0;
    if (v41 <= 0x10)
      v41 = 16;
    v50 = v48 + v41;
    if (v49 <= v50)
      v51 = 0;
    else
      v51 = v50;
    *((_QWORD *)v8 + 9) = v51;
    v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v51, v52));
    v54 = *((_DWORD *)v8 + 27);
    if (v53 == 0x80000000 || v54 != 0)
    {
      v56 = v54 + 1;
      *((_DWORD *)v8 + 27) = v56;
      if (v56 >= *((_DWORD *)v8 + 26))
      {
        if (*((_BYTE *)v8 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
        *((_DWORD *)v8 + 27) = 0;
      }
    }
    *((_QWORD *)v8 + 6) = v9;
LABEL_7:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v81, v11);
    if (!v83)
      goto LABEL_111;
    *(_QWORD *)buf = v81;
    *(_QWORD *)&buf[8] = v82;
    *(_QWORD *)&buf[16] = 0;
    v12 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v13 = v12 >= v81;
    v14 = v12 - v81;
    if (v13)
    {
      if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v82)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v81 + v14) = 804;
        *(_QWORD *)&buf[16] = v14 + 2;
      }
    }
    v7 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
    v17 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
    {
      v18 = *(_QWORD *)&buf[16] + 1;
      *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = a3;
      *(_QWORD *)&buf[16] = v17 + 1;
      if (*(_QWORD *)&buf[8])
      {
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (v18 <= 0x10)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_28;
      }
    }
    if (v83)
      break;
    __break(1u);
LABEL_113:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v7, *((_QWORD *)v4 + 480), &v78);
    v7 = v78;
    if (v78)
      v7 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v78);
  }
  v60 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v61 = v60 - v81;
  if (v60 < v81)
  {
    v62 = 0;
  }
  else
  {
    v62 = 0;
    if (v61 <= 0xFFFFFFFFFFFFFFFDLL && v61 + 2 <= v82)
    {
      *(_WORD *)(v81 + v61) = 2821;
      v62 = v61 + 2;
    }
  }
  v63 = *((_QWORD *)v8 + 8);
  v64 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *((_QWORD *)v8 + 7);
  if (v64 + 16 >= v65)
    v64 = 0;
  if (v62 <= 0x10)
    v62 = 16;
  v66 = v64 + v62;
  if (v65 <= v66)
    v66 = 0;
  *((_QWORD *)v8 + 9) = v66;
  v67 = (unint64_t *)(*(_QWORD *)(v63 + 16) + 128);
  do
    __ldaxr(v67);
  while (__stlxr(v66, v67));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)v8 + 1);
  v68 = v80;
  v69 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v69 = 804;
  *(_QWORD *)(v69 + 8) = v9;
  *(_QWORD *)(v69 + 528) = v69 + 16;
  *(_QWORD *)(v69 + 536) = v69 + 16;
  *(_OWORD *)(v69 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v69 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v69);
  *(_QWORD *)buf = v69;
  IPC::ArgumentCoder<WebCore::Path,void>::encode((IPC::Encoder *)v69, a2);
  *IPC::Encoder::grow((IPC::Encoder *)v69, 1uLL, 1) = a3;
  v47 = IPC::Connection::sendMessageImpl((uint64_t)v68, (uint64_t *)buf, 1, 0);
  v71 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v71)
  {
    IPC::Encoder::~Encoder(v71, v70);
    WTF::fastFree(v72, v73);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v80);
  if (v47)
    goto LABEL_105;
LABEL_28:
  v26 = v78;
  v78 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
      goto LABEL_31;
    }
    if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_31:
      MEMORY[0x19AEABB3C](v27);
    v29 = *(_QWORD *)(v27 + 8);
    v30 = v29 - 1;
    *(_QWORD *)(v27 + 8) = v29 - 1;
    if (v29 == 1)
    {
      v59 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      v32 = v59 != 0;
    }
    else
    {
      v31 = 0;
      v32 = 1;
    }
    v33 = __ldxr((unsigned __int8 *)v27);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
      {
LABEL_36:
        if (!v30)
        {
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          if (!v32)
            WTF::fastFree((WTF *)v27, v16);
        }
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
    goto LABEL_36;
  }
LABEL_37:
  result = v79;
  v79 = 0;
  if (result)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)result);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)result));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v57, v58);
    }
  }
  return result;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordResetClip(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v73;
  IPC::StreamClientConnection *v74;
  uint64_t *v75;
  IPC::Encoder *v76;
  _BYTE buf[22];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v1 = this[481];
  if (!v1)
    return this;
  v2 = this;
  this = *(_QWORD **)(v1 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v74);
  if (!v74)
    return this;
  v3 = v2[479];
  if (!v3)
  {
    v4 = 0;
LABEL_6:
    v5 = 1;
    goto LABEL_7;
  }
  v4 = v2[480];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_112;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v3);
LABEL_112:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v73 = __ldxr((unsigned __int8 *)v3);
  if (v73 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_118:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    goto LABEL_6;
  if (!*(_BYTE *)(v4 + 4016))
  {
    *(_BYTE *)(v4 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v4);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v5 = 0;
LABEL_7:
  v6 = v74;
  v7 = v2[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_54;
    v24 = *(_QWORD *)buf;
    v25 = *(_QWORD *)&buf[8];
    v26 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v27 = v26 - *(_QWORD *)buf;
    if (v26 < *(_QWORD *)buf)
    {
      v29 = 0;
      v28 = *(_QWORD *)&buf[8];
    }
    else
    {
      v28 = 0;
      if (v27 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        if (v27 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v27) = 2822;
          v28 = v25;
          v29 = v27 + 2;
        }
      }
    }
    v30 = (_QWORD *)((v24 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v30 >= v24 + v29)
    {
      v31 = (char *)v30 - v24;
      v32 = 17;
      if ((unint64_t)v30 - v24 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_55;
      v29 = (unint64_t)(v31 + 8);
      if ((unint64_t)(v31 + 8) > v28)
        goto LABEL_55;
      *v30 = v7;
    }
    if (!v28)
    {
      v32 = 17;
      goto LABEL_55;
    }
    v33 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *((_QWORD *)v6 + 7);
    if (v33 + 16 >= v34)
      v33 = 0;
    if (v29 <= 0x10)
      v29 = 16;
    v35 = v33 + v29;
    if (v34 <= v35)
      v36 = 0;
    else
      v36 = v35;
    *((_QWORD *)v6 + 9) = v36;
    v37 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v36, v37));
    v39 = *((_DWORD *)v6 + 27);
    if (v38 == 0x80000000 || v39 != 0)
    {
      v45 = v39 + 1;
      *((_DWORD *)v6 + 27) = v45;
      if (v45 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
  if (!buf[16])
  {
LABEL_54:
    v32 = 15;
LABEL_55:
    v41 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v42 = IPC::errorAsString(v32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ResetClip";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v42;
      _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v43 = v2[481];
    if (v43)
    {
      v44 = *(_BYTE **)(v43 + 8);
      if (v44)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v44);
    }
    goto LABEL_86;
  }
  v11 = *(_QWORD *)buf;
  v12 = *(_QWORD *)&buf[8];
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  v14 = (unint64_t)v13 - *(_QWORD *)buf;
  if ((unint64_t)v13 < *(_QWORD *)buf)
  {
    v15 = 0;
    if (*(_QWORD *)&buf[8])
      goto LABEL_15;
  }
  else
  {
    v15 = v14 + 2;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(_QWORD *)&buf[8])
      goto LABEL_70;
    *v13 = 843;
    if (v12)
    {
LABEL_15:
      v17 = *((_QWORD *)v6 + 8);
      v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v6 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v20 = v18 + v15;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *((_QWORD *)v6 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_86;
    }
  }
  if (!buf[16])
    __break(1u);
  v11 = *(_QWORD *)buf;
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  v47 = 0;
  v48 = (unint64_t)v13 >= v11;
  v49 = (unint64_t)v13 - v11;
  if (v48 && v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= *(_QWORD *)&buf[8])
  {
    *(_WORD *)(v11 + v49) = 2821;
    v47 = v49 + 2;
  }
  v50 = *((_QWORD *)v6 + 8);
  v51 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *((_QWORD *)v6 + 7);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v47 <= 0x10)
    v47 = 16;
  v53 = v51 + v47;
  if (v52 <= v53)
    v53 = 0;
  *((_QWORD *)v6 + 9) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)v6 + 1);
  v55 = v75;
  v56 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v56 = 843;
  *(_QWORD *)(v56 + 8) = v7;
  *(_QWORD *)(v56 + 528) = v56 + 16;
  *(_QWORD *)(v56 + 536) = v56 + 16;
  *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v56 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
  v76 = (IPC::Encoder *)v56;
  v32 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v76, 1, 0);
  v58 = v76;
  v76 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v57);
    WTF::fastFree(v59, v60);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v75);
  if (v32)
    goto LABEL_55;
LABEL_86:
  if ((v5 & 1) != 0)
    goto LABEL_103;
  v61 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v61))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v61))
  {
    goto LABEL_91;
  }
  MEMORY[0x19AEABB3C](v61);
LABEL_91:
  v63 = *(_QWORD *)(v61 + 8);
  v64 = v63 - 1;
  *(_QWORD *)(v61 + 8) = v63 - 1;
  if (v63 == 1)
  {
    v72 = *(_QWORD *)(v61 + 16);
    v65 = *(_QWORD *)(v61 + 24);
    *(_QWORD *)(v61 + 24) = 0;
    v66 = v72 != 0;
  }
  else
  {
    v65 = 0;
    v66 = 1;
  }
  v67 = __ldxr((unsigned __int8 *)v61);
  if (v67 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v61))
    {
      if (!v64)
        goto LABEL_99;
      goto LABEL_103;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v61);
  if (!v64)
  {
LABEL_99:
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    if (!v66)
      WTF::fastFree((WTF *)v61, v10);
  }
LABEL_103:
  this = v74;
  v74 = 0;
  if (this)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)this);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)this));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

uint64_t *WebKit::RemoteDisplayListRecorderProxy::recordDrawFilteredImageBuffer(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WebKit::RemoteRenderingBackendProxy *v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  WebKit::RemoteImageBufferProxy *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _DWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  WebKit::RemoteImageBufferProxy *v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  _BYTE buf[24];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  LOBYTE(v67) = 0;
  v68 = 0;
  if (a2)
  {
    v7 = *(_QWORD *)(a2 + 120);
    v68 = 1;
    v67 = v7;
  }
  if (*(_BYTE *)(a4 + 48) == 1 && *(_BYTE *)(a4 + 40) != 0)
  {
    v9 = a1[481];
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        WebKit::RemoteResourceCacheProxy::recordFilterUse((uint64_t *)(v10 + 64), a4);
    }
  }
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v63, a4);
  v64 = &v67;
  v65 = a3;
  v66 = &v63;
  v12 = a1[481];
  if (v12)
  {
    v13 = *(WebKit::RemoteRenderingBackendProxy **)(v12 + 8);
    if (v13)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v13, &v70);
      if (v70)
      {
        v14 = (unsigned __int8 *)a1[479];
        if (v14)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v14, a1[480], &v69);
          v14 = (unsigned __int8 *)v69;
          if (v69)
            v14 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v69);
        }
        else
        {
          v69 = 0;
        }
        v15 = v70;
        v16 = a1[478];
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v14);
        v18 = v17 + 15.0;
        if (*((_QWORD *)v15 + 6) != v16)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 14), buf, v17 + 15.0);
          if (!buf[16])
            goto LABEL_81;
          v43 = *(_QWORD *)buf;
          v44 = *(_QWORD *)&buf[8];
          v45 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v46 = v45 - *(_QWORD *)buf;
          if (v45 < *(_QWORD *)buf)
          {
            v48 = 0;
            v47 = *(_QWORD *)&buf[8];
          }
          else
          {
            v47 = 0;
            if (v46 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v48 = 0;
            }
            else
            {
              v48 = 0;
              if (v46 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v46) = 2822;
                v47 = v44;
                v48 = v46 + 2;
              }
            }
          }
          v49 = (_QWORD *)((v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v49 >= v43 + v48)
          {
            v50 = (char *)v49 - v43;
            v51 = 17;
            if ((unint64_t)v49 - v43 > 0xFFFFFFFFFFFFFFF7)
              goto LABEL_82;
            v48 = (unint64_t)(v50 + 8);
            if ((unint64_t)(v50 + 8) > v47)
              goto LABEL_82;
            *v49 = v16;
          }
          if (!v47)
          {
            v51 = 17;
            goto LABEL_82;
          }
          v52 = (*((_QWORD *)v15 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v53 = *((_QWORD *)v15 + 7);
          if (v52 + 16 >= v53)
            v52 = 0;
          if (v48 <= 0x10)
            v48 = 16;
          v54 = v52 + v48;
          if (v53 <= v54)
            v55 = 0;
          else
            v55 = v54;
          *((_QWORD *)v15 + 9) = v55;
          v56 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v15 + 8) + 16) + 128);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v55, v56));
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v15, v57 == 0x80000000);
          *((_QWORD *)v15 + 6) = v16;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 14), &v71, v18);
        if (v73)
        {
          *(_QWORD *)buf = v71;
          *(_QWORD *)&buf[8] = v72;
          *(_QWORD *)&buf[16] = 0;
          v19 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = v19 >= v71;
          v21 = v19 - v71;
          if (v20)
          {
            if (v21 > 0xFFFFFFFFFFFFFFFDLL || v21 + 2 > v72)
            {
              *(_QWORD *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v71 + v21) = 813;
              *(_QWORD *)&buf[16] = v21 + 2;
            }
          }
          IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(buf, (uint64_t)v64);
          IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v65);
          IPC::ArgumentCoder<WebCore::Filter,void>::encode((uint64_t *)buf, *v66);
          if (*(_QWORD *)&buf[8])
          {
            v23 = *(_QWORD *)&buf[16];
            v24 = *((_QWORD *)v15 + 8);
            v25 = (*((_QWORD *)v15 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v26 = *((_QWORD *)v15 + 7);
            if (v25 + 16 >= v26)
              v25 = 0;
            if (*(_QWORD *)&buf[16] <= 0x10uLL)
              v23 = 16;
            v27 = v25 + v23;
            if (v26 <= v27)
              v28 = 0;
            else
              v28 = v27;
            *((_QWORD *)v15 + 9) = v28;
            v29 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v28, v29));
            if (v30 == 0x80000000 || v15[27])
            {
              if (*((_BYTE *)v15 + 96))
                MEMORY[0x19AEBA1A0](v15[21]);
              v15[27] = 0;
            }
            goto LABEL_36;
          }
          if (!v73)
            __break(1u);
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v15, v71, v72);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v15 + 1);
          v51 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFilteredImageBuffer>(*(uint64_t *)buf, (uint64_t)&v64, v16);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
          if (!v51)
          {
LABEL_36:
            v31 = v69;
            v69 = 0;
            if (!v31)
            {
LABEL_45:
              v39 = v70;
              v70 = 0;
              if (v39)
              {
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  atomic_store(1u, v39);
                  *(_QWORD *)buf = v39;
                  WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
                }
              }
              return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v63, v11);
            }
            v32 = *((_QWORD *)v31 + 1);
            if (__ldaxr((unsigned __int8 *)v32))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v32))
            {
LABEL_40:
              v34 = *(_QWORD *)(v32 + 8);
              v35 = v34 - 1;
              *(_QWORD *)(v32 + 8) = v34 - 1;
              if (v34 == 1)
              {
                v62 = *(_QWORD *)(v32 + 16);
                v36 = *(_QWORD *)(v32 + 24);
                *(_QWORD *)(v32 + 24) = 0;
                v37 = v62 != 0;
              }
              else
              {
                v36 = 0;
                v37 = 1;
              }
              v38 = __ldxr((unsigned __int8 *)v32);
              if (v38 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v32))
                  goto LABEL_44;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_44:
              if (!v35)
              {
                if (v36)
                  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
                if (!v37)
                  WTF::fastFree((WTF *)v32, v11);
              }
              goto LABEL_45;
            }
            MEMORY[0x19AEABB3C](v32);
            goto LABEL_40;
          }
LABEL_82:
          v58 = qword_1ECE716E0;
          if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
          {
            v59 = IPC::errorAsString(v51);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawFilteredImageBuffer";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v59;
            _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          v60 = a1[481];
          if (v60)
          {
            v61 = *(_BYTE **)(v60 + 8);
            if (v61)
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
          }
          goto LABEL_36;
        }
LABEL_81:
        v51 = 15;
        goto LABEL_82;
      }
    }
  }
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v63, v11);
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 3848);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  WebKit::RemoteResourceCacheProxy::recordFilterUse((uint64_t *)(v3 + 64), a2);
  return 1;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9[2];
  char v10;

  v2 = *(_QWORD *)(a1 + 3848);
  if (!v2)
    return 0;
  v3 = *(_QWORD **)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(a2 + 40))
  {
    __break(1u);
    return 0;
  }
  v8 = *(_QWORD *)(a2 + 32);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WebCore::DecomposedGlyphs &>(v3 + 11, &v8, (_QWORD *)a2, (uint64_t)v9);
  if (v10)
  {
    WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>(a2 + 16, v3 + 8, (uint64_t)v9);
    v6 = (uint64_t *)v3[15];
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v8, a2);
    v9[0] = &v8;
    WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheDecomposedGlyphs,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v6, v9, v6[7]);
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v8, v7);
  }
  return 1;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9[2];
  char v10;

  v2 = *(_QWORD *)(a1 + 3848);
  if (!v2)
    return 0;
  v3 = *(_QWORD **)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(a2 + 40))
  {
    __break(1u);
    return 0;
  }
  v8 = *(_QWORD *)(a2 + 32);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WebCore::Gradient &>(v3 + 11, &v8, (_QWORD *)a2, (uint64_t)v9);
  if (v10)
  {
    WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>(a2 + 16, v3 + 8, (uint64_t)v9);
    v6 = (uint64_t *)v3[15];
    WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v8, a2);
    v9[0] = &v8;
    WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheGradient,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v6, v9, v6[7]);
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v8, v7);
  }
  return 1;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteDisplayListRecorderProxy::recordDrawDecomposedGlyphs(_QWORD *a1, WebCore::Font *this, uint64_t a3)
{
  WebKit::RemoteRenderingBackendProxy *result;
  uint64_t v6;
  WebKit::RemoteRenderingBackendProxy *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  IPC::StreamClientConnection *v12;
  uint64_t v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  int v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  WTF *v82;
  void *v83;
  uint64_t v84;
  int v86;
  IPC::StreamClientConnection *v87;
  uint64_t *v88;
  IPC::Encoder *v89;
  _BYTE buf[22];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  result = (WebKit::RemoteRenderingBackendProxy *)WebCore::Font::renderingResourceIdentifier(this);
  if (!*(_BYTE *)(a3 + 40))
    goto LABEL_116;
  v6 = a1[481];
  if (!v6)
    return result;
  v7 = result;
  result = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 8);
  if (!result)
    return result;
  v8 = *(_QWORD *)(a3 + 32);
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v87);
  if (!v87)
    return result;
  v9 = a1[479];
  if (!v9)
  {
    v10 = 0;
LABEL_7:
    v11 = 1;
    goto LABEL_8;
  }
  v10 = a1[480];
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_127;
  }
  result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19AEABB3C](v9);
LABEL_127:
  if (*(_QWORD *)(v9 + 24))
    ++*(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v86 = __ldxr((unsigned __int8 *)v9);
  if (v86 != 1)
  {
    __clrex();
    goto LABEL_133;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_133:
    result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (!v10)
    goto LABEL_7;
  if (!*(_BYTE *)(v10 + 4016))
  {
    *(_BYTE *)(v10 + 4016) = 1;
    result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v10);
    if (result)
      result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(_QWORD *)result + 160))(result);
  }
  v11 = 0;
LABEL_8:
  v12 = v87;
  v13 = a1[478];
  WTF::ApproximateTime::now(result);
  v15 = v14 + 15.0;
  if (*((_QWORD *)v12 + 6) != v13)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 56, buf, v14 + 15.0);
    if (!buf[16])
      goto LABEL_85;
    v52 = *(_QWORD *)buf;
    v53 = *(_QWORD *)&buf[8];
    v54 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = v54 - *(_QWORD *)buf;
    if (v54 < *(_QWORD *)buf)
    {
      v57 = 0;
      v56 = *(_QWORD *)&buf[8];
    }
    else
    {
      v56 = 0;
      if (v55 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v57 = 0;
      }
      else
      {
        v57 = 0;
        if (v55 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v55) = 2822;
          v56 = v53;
          v57 = v55 + 2;
        }
      }
    }
    v58 = (_QWORD *)((v52 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v58 >= v52 + v57)
    {
      v59 = (char *)v58 - v52;
      v48 = 17;
      if ((unint64_t)v58 - v52 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_86;
      v57 = (unint64_t)(v59 + 8);
      if ((unint64_t)(v59 + 8) > v56)
        goto LABEL_86;
      *v58 = v13;
    }
    if (!v56)
    {
      v48 = 17;
      goto LABEL_86;
    }
    v60 = (*((_QWORD *)v12 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = *((_QWORD *)v12 + 7);
    if (v60 + 16 >= v61)
      v60 = 0;
    if (v57 <= 0x10)
      v57 = 16;
    v62 = v60 + v57;
    if (v61 <= v62)
      v63 = 0;
    else
      v63 = v62;
    *((_QWORD *)v12 + 9) = v63;
    v64 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v12 + 8) + 16) + 128);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v63, v64));
    v66 = *((_DWORD *)v12 + 27);
    if (v65 == 0x80000000 || v66 != 0)
    {
      v81 = v66 + 1;
      *((_DWORD *)v12 + 27) = v81;
      if (v81 >= *((_DWORD *)v12 + 26))
      {
        if (*((_BYTE *)v12 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v12 + 21));
        *((_DWORD *)v12 + 27) = 0;
      }
    }
    *((_QWORD *)v12 + 6) = v13;
  }
  result = (WebKit::RemoteRenderingBackendProxy *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 56, buf, v15);
  if (!buf[16])
  {
LABEL_85:
    v48 = 15;
LABEL_86:
    v68 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v69 = IPC::errorAsString(v48);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawDecomposedGlyphs";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v69;
      _os_log_impl(&dword_196BCC000, v68, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v70 = a1[481];
    if (v70)
    {
      v71 = *(_BYTE **)(v70 + 8);
      if (v71)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v71);
    }
    goto LABEL_91;
  }
  v17 = *(_QWORD *)buf;
  v18 = *(_QWORD *)&buf[8];
  v19 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v20 = v19 - *(_QWORD *)buf;
  if (v19 >= *(_QWORD *)buf)
  {
    v21 = v20 + 2;
    if (v20 <= 0xFFFFFFFFFFFFFFFDLL && v21 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v20) = 809;
      goto LABEL_16;
    }
    v18 = 0;
  }
  v21 = 0;
LABEL_16:
  v23 = (v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = v23 - (v17 + v21);
  if (v23 >= v17 + v21)
  {
    v25 = v23 - v17;
    v26 = v24 + v21 + 8;
    if (v25 > 0xFFFFFFFFFFFFFFF7 || v26 > v18)
    {
      v18 = 0;
    }
    else
    {
      *(_QWORD *)(v17 + v25) = v7;
      v21 = v26;
    }
  }
  v28 = (_QWORD *)((v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v28 >= v17 + v21)
  {
    v21 = (unint64_t)v28 - v17 + 8;
    if ((unint64_t)v28 - v17 > 0xFFFFFFFFFFFFFFF7 || v21 > v18)
      goto LABEL_43;
    *v28 = v8;
  }
  if (v18)
  {
    v30 = *((_QWORD *)v12 + 8);
    v31 = (*((_QWORD *)v12 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = *((_QWORD *)v12 + 7);
    if (v31 + 16 >= v32)
      v31 = 0;
    if (v21 <= 0x10)
      v21 = 16;
    v33 = v31 + v21;
    if (v32 <= v33)
      v34 = 0;
    else
      v34 = v33;
    *((_QWORD *)v12 + 9) = v34;
    v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v34, v35));
    if (v36 == 0x80000000 || *((_DWORD *)v12 + 27))
    {
      if (*((_BYTE *)v12 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v12 + 21));
      *((_DWORD *)v12 + 27) = 0;
    }
    goto LABEL_91;
  }
LABEL_43:
  if (!buf[16])
  {
LABEL_116:
    __break(1u);
LABEL_117:
    atomic_store(1u, (unsigned int *)result);
    IPC::StreamClientConnection::~StreamClientConnection(result);
    return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v82, v83);
  }
  v37 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v38 = v37 - *(_QWORD *)buf;
  if (v37 < *(_QWORD *)buf)
  {
    v39 = 0;
  }
  else
  {
    v39 = 0;
    if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v38) = 2821;
      v39 = v38 + 2;
    }
  }
  v40 = *((_QWORD *)v12 + 8);
  v41 = (*((_QWORD *)v12 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *((_QWORD *)v12 + 7);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v39 <= 0x10)
    v39 = 16;
  v43 = v41 + v39;
  if (v42 <= v43)
    v43 = 0;
  *((_QWORD *)v12 + 9) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *((_DWORD *)v12 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v88, (uint64_t **)v12 + 1);
  v45 = v88;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 809;
  *(_QWORD *)(v46 + 8) = v13;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v89 = (IPC::Encoder *)v46;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v46, 8uLL, 8) = v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v46, 8uLL, 8) = v8;
  v48 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v89, 1, 0);
  v49 = v89;
  v89 = 0;
  if (v49)
  {
    IPC::Encoder::~Encoder(v49, v47);
    WTF::fastFree(v50, v51);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
  if (v48)
    goto LABEL_86;
LABEL_91:
  if ((v11 & 1) != 0)
    goto LABEL_108;
  v72 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v72))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v72))
  {
    goto LABEL_96;
  }
  MEMORY[0x19AEABB3C](v72);
LABEL_96:
  v74 = *(_QWORD *)(v72 + 8);
  v75 = v74 - 1;
  *(_QWORD *)(v72 + 8) = v74 - 1;
  if (v74 == 1)
  {
    v84 = *(_QWORD *)(v72 + 16);
    v76 = *(_QWORD *)(v72 + 24);
    *(_QWORD *)(v72 + 24) = 0;
    v77 = v84 != 0;
  }
  else
  {
    v76 = 0;
    v77 = 1;
  }
  v78 = __ldxr((unsigned __int8 *)v72);
  if (v78 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v72))
    {
      if (v75)
        goto LABEL_108;
      goto LABEL_104;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v72);
  if (v75)
    goto LABEL_108;
LABEL_104:
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  if (!v77)
    WTF::fastFree((WTF *)v72, v16);
LABEL_108:
  result = v87;
  v87 = 0;
  if (result)
  {
    do
    {
      v79 = __ldaxr((unsigned int *)result);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, (unsigned int *)result));
    if (!v80)
      goto LABEL_117;
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordDrawDisplayListItems(WTF::ApproximateTime *result, uint64_t a2, int *a3)
{
  uint64_t v3;
  WTF::ApproximateTime *v4;
  unsigned __int8 *v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  WebKit::RemoteImageBufferProxy *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unsigned int v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  void *v77;
  IPC::Encoder *v78;
  WTF *v79;
  void *v80;
  NSObject *v81;
  const char *v82;
  uint64_t v83;
  _BYTE *v84;
  WebKit::RemoteImageBufferProxy *v85;
  IPC::StreamClientConnection *v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned __int8 v90;
  _BYTE buf[24];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 481);
  if (!v3)
    return result;
  v4 = result;
  result = *(WTF::ApproximateTime **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v86);
  if (!v86)
    return result;
  v7 = (unsigned __int8 *)*((_QWORD *)v4 + 479);
  if (v7)
  {
LABEL_171:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *((_QWORD *)v4 + 480), &v85);
    v7 = (unsigned __int8 *)v85;
    if (v85)
      v7 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v85);
  }
  else
  {
    v85 = 0;
  }
  v8 = v86;
  v9 = *((_QWORD *)v4 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v88, v11);
      if (!v90)
        goto LABEL_131;
      v12 = v88;
      *(_QWORD *)buf = v88;
      *(_QWORD *)&buf[8] = v89;
      *(_QWORD *)&buf[16] = 0;
      v13 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = v13 - v88;
      if (v13 < v88)
      {
        v15 = 0;
      }
      else
      {
        v15 = v14 + 2;
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v89)
        {
          v15 = 0;
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v88 + v14) = 810;
          *(_QWORD *)&buf[16] = v14 + 2;
          v12 = *(_QWORD *)buf;
        }
      }
      v17 = *(unsigned int *)(a2 + 12);
      v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v18 >= v12 + v15)
      {
        if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > *(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *v18 = v17;
          *(_QWORD *)&buf[16] = (char *)v18 - v12 + 8;
          LODWORD(v17) = *(_DWORD *)(a2 + 12);
        }
      }
      if ((_DWORD)v17)
      {
        v20 = *(_QWORD *)a2;
        for (i = 360 * v17; i; i -= 360)
        {
          v22 = *(unsigned __int8 *)(v20 + 352);
          v23 = *(_QWORD *)&buf[16];
          if (*(_QWORD *)&buf[16] >= *(_QWORD *)&buf[8])
          {
            *(_QWORD *)&buf[8] = 0;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = v22;
            *(_QWORD *)&buf[16] = v23 + 1;
          }
          if ((_DWORD)v22)
          {
            if ((_DWORD)v22 == 20)
            {
              if (*(_DWORD *)(v20 + 352) != 20)
                goto LABEL_170;
              IPC::ArgumentCoder<WebCore::DisplayList::DrawDecomposedGlyphs,void>::encode(buf, (uint64_t *)(v20 + 8));
            }
            else
            {
              switch((int)v22)
              {
                case 1:
                  if (*(_DWORD *)(v20 + 352) == 1)
                    goto LABEL_133;
                  goto LABEL_170;
                case 2:
                  if (*(_DWORD *)(v20 + 352) != 2)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::encode(buf, (__int16 *)(v20 + 8));
                  break;
                case 3:
                  if (*(_DWORD *)(v20 + 352) != 3)
                    goto LABEL_170;
                  goto LABEL_147;
                case 4:
                  if (*(_DWORD *)(v20 + 352) != 4)
                    goto LABEL_170;
                  WTF::isIntegralOrPointerType((WTF *)buf);
                  break;
                case 5:
                  if (*(_DWORD *)(v20 + 352) != 5)
                    goto LABEL_170;
                  goto LABEL_147;
                case 6:
                  if (*(_DWORD *)(v20 + 352) != 6)
                    goto LABEL_170;
                  goto LABEL_137;
                case 7:
                  if (*(_DWORD *)(v20 + 352) != 7)
                    goto LABEL_170;
LABEL_147:
                  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 8));
                  break;
                case 8:
                  if (*(_DWORD *)(v20 + 352) != 8)
                    goto LABEL_170;
LABEL_137:
                  IPC::ArgumentCoder<WebCore::DisplayList::ClipRoundedRect,void>::encode(buf, v20 + 8);
                  break;
                case 9:
                  if (*(_DWORD *)(v20 + 352) != 9)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::ClipOutToPath,void>::encode(buf, v20 + 8);
                  break;
                case 10:
                  if (*(_DWORD *)(v20 + 352) != 10)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::encode((uint64_t *)buf, (WebCore::Path *)(v20 + 8));
                  break;
                case 11:
                  if (*(_DWORD *)(v20 + 352) != 11)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode((uint64_t *)buf, v20 + 8);
                  break;
                case 12:
                  if (*(_DWORD *)(v20 + 352) != 12)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((uint64_t *)buf, (_QWORD *)(v20 + 8));
                  break;
                case 13:
                  if (*(_DWORD *)(v20 + 352) != 13)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode((WTF::StringImpl *)buf, v20 + 8);
                  break;
                case 14:
                  if (*(_DWORD *)(v20 + 352) != 14)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode((uint64_t *)buf, (__int128 *)(v20 + 8));
                  break;
                case 15:
                  if (*(_DWORD *)(v20 + 352) != 15)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawEllipse,void>::encode((uint64_t *)buf, (__int128 *)(v20 + 8));
                  break;
                case 16:
                  if (*(_DWORD *)(v20 + 352) != 16)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode((uint64_t *)buf, (__int128 *)(v20 + 8));
                  break;
                case 17:
                  if (*(_DWORD *)(v20 + 352) != 17)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 8));
                  break;
                case 18:
                  if (*(_DWORD *)(v20 + 352) != 18)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 8));
                  break;
                case 19:
                  if (*(_DWORD *)(v20 + 352) != 19)
                    goto LABEL_170;
                  IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode((uint64_t *)buf, (_QWORD *)(v20 + 8));
                  break;
                default:
                  IPC::ArgumentCoder<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>((uint64_t *)buf, v20, v22);
                  break;
              }
            }
          }
          else
          {
            if (*(_DWORD *)(v20 + 352))
            {
LABEL_170:
              v7 = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_171;
            }
LABEL_133:
            IPC::StreamConnectionEncoder::operator<<<float const&>(buf, (_DWORD *)(v20 + 8));
          }
          v20 += 360;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v28 = *(_QWORD *)&buf[16];
        v29 = *((_QWORD *)v8 + 8);
        v30 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *((_QWORD *)v8 + 7);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v33 = 0;
        else
          v33 = v32;
        *((_QWORD *)v8 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v33, v34));
        if (v35 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_41;
      }
      v46 = v90;
      if (v90)
      {
        v67 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v68 = v67 - v88;
        if (v67 < v88)
        {
          v69 = 0;
        }
        else
        {
          v69 = 0;
          if (v68 <= 0xFFFFFFFFFFFFFFFDLL && v68 + 2 <= v89)
          {
            *(_WORD *)(v88 + v68) = 2821;
            v69 = v68 + 2;
          }
        }
        v70 = *((_QWORD *)v8 + 8);
        v71 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v72 = *((_QWORD *)v8 + 7);
        if (v71 + 16 >= v72)
          v71 = 0;
        if (v69 <= 0x10)
          v69 = 16;
        v73 = v71 + v69;
        if (v72 <= v73)
          v73 = 0;
        *((_QWORD *)v8 + 9) = v73;
        v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
        do
          __ldaxr(v74);
        while (__stlxr(v73, v74));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)v8 + 1);
        v75 = v87;
        v76 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v76 = 810;
        *(_QWORD *)(v76 + 8) = v9;
        *(_QWORD *)(v76 + 528) = v76 + 16;
        *(_QWORD *)(v76 + 536) = v76 + 16;
        *(_OWORD *)(v76 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v76 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v76);
        *(_QWORD *)buf = v76;
        IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v76, a2);
        IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v76, a3);
        v54 = IPC::Connection::sendMessageImpl((uint64_t)v75, (uint64_t *)buf, 1, 0);
        v78 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v78)
        {
          IPC::Encoder::~Encoder(v78, v77);
          WTF::fastFree(v79, v80);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v87);
        if (!v54)
          goto LABEL_41;
        goto LABEL_126;
      }
      __break(1u);
LABEL_175:
      if (!v25)
        break;
      v51 = 0;
      if (v27 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v48 = 0;
      }
      else
      {
        v48 = 0;
        if (v27 + 2 <= v26)
        {
          v48 = v27 + 2;
LABEL_75:
          *(_WORD *)(v46 + v27) = 2822;
          goto LABEL_76;
        }
      }
LABEL_77:
      v52 = (_QWORD *)((v46 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v52 >= v46 + v48)
      {
        v53 = (char *)v52 - v46;
        v54 = 17;
        if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_126;
        v48 = (unint64_t)(v53 + 8);
        if ((unint64_t)(v53 + 8) > v51)
          goto LABEL_126;
        *v52 = v9;
      }
      if (!v51)
      {
        v54 = 17;
        goto LABEL_126;
      }
      v55 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = *((_QWORD *)v8 + 7);
      if (v55 + 16 >= v56)
        v55 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v57 = v55 + v48;
      if (v56 <= v57)
        v58 = 0;
      else
        v58 = v57;
      *((_QWORD *)v8 + 9) = v58;
      v59 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v58, v59));
      v61 = *((_DWORD *)v8 + 27);
      if (v60 == 0x80000000 || v61 != 0)
      {
        v63 = v61 + 1;
        *((_DWORD *)v8 + 27) = v63;
        if (v63 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
    v48 = 0;
LABEL_76:
    v51 = v26;
    goto LABEL_77;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
  if (buf[16])
  {
    v46 = *(_QWORD *)buf;
    v26 = *(_QWORD *)&buf[8];
    v47 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v27 = v47 - *(_QWORD *)buf;
    v25 = v47 >= *(_QWORD *)buf;
    v48 = v47 - *(_QWORD *)buf + 2;
    v50 = v27 < 0xFFFFFFFFFFFFFFFELL && v48 <= *(_QWORD *)&buf[8];
    if (!v25 || !v50)
      goto LABEL_175;
    goto LABEL_75;
  }
LABEL_131:
  v54 = 15;
LABEL_126:
  v81 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v82 = IPC::errorAsString(v54);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawDisplayListItems";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v82;
    _os_log_impl(&dword_196BCC000, v81, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v83 = *((_QWORD *)v4 + 481);
  if (v83)
  {
    v84 = *(_BYTE **)(v83 + 8);
    if (v84)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v84);
  }
LABEL_41:
  v36 = v85;
  v85 = 0;
  if (v36)
  {
    v37 = *((_QWORD *)v36 + 1);
    if (__ldaxr((unsigned __int8 *)v37))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v37))
    {
LABEL_45:
      v39 = *(_QWORD *)(v37 + 8);
      v40 = v39 - 1;
      *(_QWORD *)(v37 + 8) = v39 - 1;
      if (v39 == 1)
      {
        v66 = *(_QWORD *)(v37 + 16);
        v41 = *(_QWORD *)(v37 + 24);
        *(_QWORD *)(v37 + 24) = 0;
        v42 = v66 != 0;
      }
      else
      {
        v41 = 0;
        v42 = 1;
      }
      v43 = __ldxr((unsigned __int8 *)v37);
      if (v43 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v37))
          goto LABEL_49;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_49:
      if (!v40)
      {
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        if (!v42)
          WTF::fastFree((WTF *)v37, v24);
      }
      goto LABEL_50;
    }
    MEMORY[0x19AEABB3C](v37);
    goto LABEL_45;
  }
LABEL_50:
  result = v86;
  v86 = 0;
  if (result)
  {
    do
    {
      v44 = __ldaxr((unsigned int *)result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)result));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v64, v65);
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordDrawImageBuffer(WTF::ApproximateTime *result, uint64_t a2, _DWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v5;
  WTF::ApproximateTime *v6;
  unsigned __int8 *v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v18;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  WebKit::RemoteImageBufferProxy *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unsigned int v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  int v60;
  int v61;
  NSObject *v62;
  const char *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t *v67;
  _DWORD *v68;
  _DWORD *v69;
  __int16 *v70;
  __int16 v71;
  char v72;
  WebKit::RemoteImageBufferProxy *v73;
  IPC::StreamClientConnection *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 v77;
  _BYTE buf[24];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v71 = a5;
  v72 = BYTE2(a5);
  v66 = *(_QWORD *)(a2 + 120);
  v67 = &v66;
  v68 = a3;
  v69 = a4;
  v70 = &v71;
  v5 = *((_QWORD *)result + 481);
  if (!v5)
    return result;
  v6 = result;
  result = *(WTF::ApproximateTime **)(v5 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v74);
  if (!v74)
    return result;
  v7 = (unsigned __int8 *)*((_QWORD *)v6 + 479);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *((_QWORD *)v6 + 480), &v73);
    v7 = (unsigned __int8 *)v73;
    if (v73)
      v7 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v73);
  }
  else
  {
    v73 = 0;
  }
  v8 = v74;
  v9 = *((_QWORD *)v6 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v75, v11);
      if (!v77)
      {
        v61 = 15;
        goto LABEL_91;
      }
      v12 = v75;
      v13 = v76;
      *(_QWORD *)buf = v75;
      *(_QWORD *)&buf[8] = v76;
      *(_QWORD *)&buf[16] = 0;
      v14 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = v14 - v75;
      if (v14 < v75)
      {
        v16 = 0;
      }
      else
      {
        v16 = v15 + 2;
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v76)
        {
          v13 = 0;
          v16 = 0;
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v75 + v15) = 817;
          *(_QWORD *)&buf[16] = v15 + 2;
        }
      }
      v18 = (_QWORD *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v18 >= v12 + v16)
      {
        if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v13)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *v18 = *v67;
          *(_QWORD *)&buf[16] = (char *)v18 - v12 + 8;
        }
      }
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v68);
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v69);
      IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(buf, v70);
      if (*(_QWORD *)&buf[8])
      {
        v22 = *(_QWORD *)&buf[16];
        v23 = *((_QWORD *)v8 + 8);
        v24 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *((_QWORD *)v8 + 7);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v27 = 0;
        else
          v27 = v26;
        *((_QWORD *)v8 + 9) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v27, v28));
        if (v29 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_32;
      }
      v40 = v77;
      if (v77)
        break;
      __break(1u);
LABEL_104:
      v44 = 0;
      v43 = v21;
LABEL_62:
      v45 = (v40 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v45 >= v40 + v44)
      {
        v46 = v45 - v40;
        v47 = 17;
        if (v46 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_101;
        v44 = v46 + 8;
        if (v46 + 8 > v43)
          goto LABEL_101;
        *(_QWORD *)(v40 + v46) = v9;
      }
      if (!v43)
      {
        v47 = 17;
        goto LABEL_101;
      }
      v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v8 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v44 <= 0x10)
        v44 = 16;
      v50 = v48 + v44;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v8 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v8 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v56 = v54 + 1;
        *((_DWORD *)v8 + 27) = v56;
        if (v56 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v8, v75, v76);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v8 + 1);
    v60 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawImageBuffer>(*(uint64_t *)buf, &v67, v9);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
    v61 = v60;
    if (!v60)
      goto LABEL_32;
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (buf[16])
    {
      v40 = *(_QWORD *)buf;
      v21 = *(_QWORD *)&buf[8];
      v41 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v42 = v41 - *(_QWORD *)buf;
      if (v41 < *(_QWORD *)buf)
        goto LABEL_104;
      v43 = 0;
      if (v42 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v44 = 0;
      }
      else
      {
        v44 = 0;
        if (v42 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v42) = 2822;
          v43 = v21;
          v44 = v42 + 2;
        }
      }
      goto LABEL_62;
    }
    v47 = 15;
LABEL_101:
    v61 = v47;
  }
LABEL_91:
  v62 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v63 = IPC::errorAsString(v61);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawImageBuffer";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v63;
    _os_log_impl(&dword_196BCC000, v62, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v64 = *((_QWORD *)v6 + 481);
  if (v64)
  {
    v65 = *(_BYTE **)(v64 + 8);
    if (v65)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v65);
  }
LABEL_32:
  v30 = v73;
  v73 = 0;
  if (v30)
  {
    v31 = *((_QWORD *)v30 + 1);
    if (__ldaxr((unsigned __int8 *)v31))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v31))
    {
LABEL_36:
      v33 = *(_QWORD *)(v31 + 8);
      v34 = v33 - 1;
      *(_QWORD *)(v31 + 8) = v33 - 1;
      if (v33 == 1)
      {
        v59 = *(_QWORD *)(v31 + 16);
        v35 = *(_QWORD *)(v31 + 24);
        *(_QWORD *)(v31 + 24) = 0;
        v36 = v59 != 0;
      }
      else
      {
        v35 = 0;
        v36 = 1;
      }
      v37 = __ldxr((unsigned __int8 *)v31);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v31))
          goto LABEL_40;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_40:
      if (!v34)
      {
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (!v36)
          WTF::fastFree((WTF *)v31, v20);
      }
      goto LABEL_41;
    }
    MEMORY[0x19AEABB3C](v31);
    goto LABEL_36;
  }
LABEL_41:
  result = v74;
  v74 = 0;
  if (result)
  {
    do
    {
      v38 = __ldaxr((unsigned int *)result);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)result));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v57, v58);
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordDrawNativeImage(WTF::ApproximateTime *result, uint64_t a2, _DWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v5;
  WTF::ApproximateTime *v6;
  WTF::ApproximateTime *v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v18;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  WebKit::RemoteImageBufferProxy *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  BOOL v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  WTF *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  IPC::Encoder *v79;
  WTF *v80;
  void *v81;
  NSObject *v82;
  const char *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t *v86;
  _DWORD *v87;
  _DWORD *v88;
  __int16 *v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  WebKit::RemoteImageBufferProxy *v93;
  IPC::StreamClientConnection *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  _BYTE buf[24];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v92 = a2;
  v90 = a5;
  v91 = BYTE2(a5);
  v86 = &v92;
  v87 = a3;
  v88 = a4;
  v89 = &v90;
  v5 = *((_QWORD *)result + 481);
  if (!v5)
    return result;
  v6 = result;
  result = *(WTF::ApproximateTime **)(v5 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v94);
  if (!v94)
    return result;
  v7 = (WTF::ApproximateTime *)*((_QWORD *)v6 + 479);
  if (v7)
    goto LABEL_122;
  v93 = 0;
  while (1)
  {
    v8 = v94;
    v9 = *((_QWORD *)v6 + 478);
    WTF::ApproximateTime::now(v7);
    v11 = v10 + 15.0;
    if (*((_QWORD *)v8 + 6) == v9)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (!buf[16])
    {
LABEL_120:
      v55 = 15;
LABEL_113:
      v82 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v83 = IPC::errorAsString(v55);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawNativeImage";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v83;
        _os_log_impl(&dword_196BCC000, v82, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v84 = *((_QWORD *)v6 + 481);
      if (v84)
      {
        v85 = *(_BYTE **)(v84 + 8);
        if (v85)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v85);
      }
      goto LABEL_36;
    }
    v44 = *(_QWORD *)buf;
    v45 = *(_QWORD *)&buf[8];
    v46 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - *(_QWORD *)buf;
    v48 = v46 >= *(_QWORD *)buf;
    v49 = v46 - *(_QWORD *)buf + 2;
    v51 = v47 < 0xFFFFFFFFFFFFFFFELL && v49 <= *(_QWORD *)&buf[8];
    if (v48 && v51)
      goto LABEL_70;
    if (!v48)
    {
      v49 = 0;
      goto LABEL_71;
    }
    v52 = 0;
    if (v47 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v49 = 0;
      goto LABEL_72;
    }
    v49 = 0;
    if (v47 + 2 <= *(_QWORD *)&buf[8])
    {
      v49 = v47 + 2;
LABEL_70:
      *(_WORD *)(*(_QWORD *)buf + v47) = 2822;
LABEL_71:
      v52 = v45;
    }
LABEL_72:
    v53 = (_QWORD *)((v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v53 >= v44 + v49)
    {
      v54 = (char *)v53 - v44;
      v55 = 17;
      if ((unint64_t)v53 - v44 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_113;
      v49 = (unint64_t)(v54 + 8);
      if ((unint64_t)(v54 + 8) > v52)
        goto LABEL_113;
      *v53 = v9;
    }
    if (!v52)
    {
      v55 = 17;
      goto LABEL_113;
    }
    v56 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = *((_QWORD *)v8 + 7);
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v58 = v56 + v49;
    if (v57 <= v58)
      v59 = 0;
    else
      v59 = v58;
    *((_QWORD *)v8 + 9) = v59;
    v60 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v59, v60));
    v62 = *((_DWORD *)v8 + 27);
    if (v61 == 0x80000000 || v62 != 0)
    {
      v64 = v62 + 1;
      *((_DWORD *)v8 + 27) = v64;
      if (v64 >= *((_DWORD *)v8 + 26))
      {
        if (*((_BYTE *)v8 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
        *((_DWORD *)v8 + 27) = 0;
      }
    }
    *((_QWORD *)v8 + 6) = v9;
LABEL_7:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v96, v11);
    if (!v98)
      goto LABEL_120;
    v12 = v96;
    v13 = v97;
    *(_QWORD *)buf = v96;
    *(_QWORD *)&buf[8] = v97;
    *(_QWORD *)&buf[16] = 0;
    v14 = (v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = v14 - v96;
    if (v14 < v96)
    {
      v16 = 0;
    }
    else
    {
      v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v97)
      {
        v13 = 0;
        v16 = 0;
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v96 + v15) = 820;
        *(_QWORD *)&buf[16] = v15 + 2;
      }
    }
    v18 = (_QWORD *)((v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v12 + v16)
    {
      if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v13)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *v18 = *v86;
        *(_QWORD *)&buf[16] = (char *)v18 - v12 + 8;
      }
    }
    IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v87);
    v7 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v88);
    v22 = *(_QWORD *)&buf[8];
    v21 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
    {
      v23 = v89;
      v24 = *(_QWORD *)buf;
      *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = *((_BYTE *)v89 + 1) & 0xF;
      if (v21 + 1 < v22)
      {
        *(_BYTE *)(v24 + v21 + 1) = *(_BYTE *)v23 & 0x1F;
        if (v21 + 2 < v22)
        {
          *(_BYTE *)(v24 + v21 + 2) = *(_BYTE *)v23 >> 5;
          if (v21 + 3 < v22)
          {
            v25 = v21 + 4;
            *(_BYTE *)(v24 + v21 + 3) = (unsigned __int16)*v23 >> 12;
            if (v21 + 4 < v22)
            {
              v26 = v21 + 5;
              *(_BYTE *)(v24 + v25) = v23[1] & 0xF;
              *(_QWORD *)&buf[16] = v26;
              v27 = *((_QWORD *)v8 + 8);
              v28 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v29 = *((_QWORD *)v8 + 7);
              if (v28 + 16 >= v29)
                v28 = 0;
              if (v26 <= 0x10)
                v26 = 16;
              v30 = v28 + v26;
              if (v29 <= v30)
                v31 = 0;
              else
                v31 = v30;
              *((_QWORD *)v8 + 9) = v31;
              v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v31, v32));
              if (v33 == 0x80000000 || *((_DWORD *)v8 + 27))
              {
                if (*((_BYTE *)v8 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
                *((_DWORD *)v8 + 27) = 0;
              }
              goto LABEL_36;
            }
          }
        }
      }
    }
    if (v98)
      break;
    __break(1u);
LABEL_122:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v7, *((_QWORD *)v6 + 480), &v93);
    v7 = v93;
    if (v93)
      v7 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v93);
  }
  v68 = (v96 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v69 = v68 - v96;
  if (v68 < v96)
  {
    v70 = 0;
  }
  else
  {
    v70 = 0;
    if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v69 + 2 <= v97)
    {
      *(_WORD *)(v96 + v69) = 2821;
      v70 = v69 + 2;
    }
  }
  v71 = *((_QWORD *)v8 + 8);
  v72 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *((_QWORD *)v8 + 7);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v70 <= 0x10)
    v70 = 16;
  v74 = v72 + v70;
  if (v73 <= v74)
    v74 = 0;
  *((_QWORD *)v8 + 9) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(v71 + 16) + 128);
  do
    __ldaxr(v75);
  while (__stlxr(v74, v75));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v95, (uint64_t **)v8 + 1);
  v76 = v95;
  v77 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v77 = 820;
  *(_QWORD *)(v77 + 8) = v9;
  *(_QWORD *)(v77 + 528) = v77 + 16;
  *(_QWORD *)(v77 + 536) = v77 + 16;
  *(_OWORD *)(v77 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v77 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v77);
  *(_QWORD *)buf = v77;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v77, &v86);
  v55 = IPC::Connection::sendMessageImpl((uint64_t)v76, (uint64_t *)buf, 1, 0);
  v79 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v79)
  {
    IPC::Encoder::~Encoder(v79, v78);
    WTF::fastFree(v80, v81);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v95);
  if (v55)
    goto LABEL_113;
LABEL_36:
  v34 = v93;
  v93 = 0;
  if (v34)
  {
    v35 = *((_QWORD *)v34 + 1);
    if (__ldaxr((unsigned __int8 *)v35))
    {
      __clrex();
      goto LABEL_39;
    }
    if (__stxr(1u, (unsigned __int8 *)v35))
LABEL_39:
      MEMORY[0x19AEABB3C](v35);
    v37 = *(_QWORD *)(v35 + 8);
    v38 = v37 - 1;
    *(_QWORD *)(v35 + 8) = v37 - 1;
    if (v37 == 1)
    {
      v67 = *(_QWORD *)(v35 + 16);
      v39 = *(_QWORD *)(v35 + 24);
      *(_QWORD *)(v35 + 24) = 0;
      v40 = v67 != 0;
    }
    else
    {
      v39 = 0;
      v40 = 1;
    }
    v41 = __ldxr((unsigned __int8 *)v35);
    if (v41 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v35))
      {
LABEL_44:
        if (!v38)
        {
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (!v40)
            WTF::fastFree((WTF *)v35, v20);
        }
        goto LABEL_45;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
    goto LABEL_44;
  }
LABEL_45:
  result = v94;
  v94 = 0;
  if (result)
  {
    do
    {
      v42 = __ldaxr((unsigned int *)result);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, (unsigned int *)result));
    if (!v43)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v65, v66);
    }
  }
  return result;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordDrawSystemImage(_QWORD *result, WebCore::ARKitBadgeSystemImage *a2, int *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  IPC::StreamClientConnection *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  int v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  int v76;
  IPC::StreamClientConnection *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 v81;
  _BYTE buf[24];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)a2 + 2);
  v4 = result[481];
  if (!v4)
    goto LABEL_100;
  v5 = result;
  result = *(_QWORD **)(v4 + 8);
  if (!result)
    goto LABEL_100;
  result = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (unsigned int **)&v77);
  if (!v77)
    goto LABEL_100;
  v7 = v5[479];
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  v8 = v5[480];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_115;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C](v7);
LABEL_115:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v76 = __ldxr((unsigned __int8 *)v7);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_121;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_121:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v8)
    goto LABEL_6;
  if (!*(_BYTE *)(v8 + 4016))
  {
    *(_BYTE *)(v8 + 4016) = 1;
    result = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
  }
  v9 = 0;
LABEL_7:
  v10 = v77;
  v11 = v5[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 15.0;
  if (*((_QWORD *)v10 + 6) == v11)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, &v79, v13);
      if (!v81)
        break;
      *(_QWORD *)buf = v79;
      *(_QWORD *)&buf[8] = v80;
      *(_QWORD *)&buf[16] = 0;
      v14 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = v14 >= v79;
      v16 = v14 - v79;
      if (v15)
      {
        if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v80)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v79 + v16) = 824;
          *(_QWORD *)&buf[16] = v16 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::SystemImage,void>::encode((uint64_t *)buf, a2);
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v20 = *(_QWORD *)&buf[16];
        v21 = *((_QWORD *)v10 + 8);
        v22 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *((_QWORD *)v10 + 7);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v20 = 16;
        v24 = v22 + v20;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *((_QWORD *)v10 + 9) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 == 0x80000000 || *((_DWORD *)v10 + 27))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
        goto LABEL_79;
      }
      v28 = v81;
      if (v81)
      {
        v29 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v79;
        if (v29 < v79)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v80)
          {
            *(_WORD *)(v79 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *((_QWORD *)v10 + 8);
        v33 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *((_QWORD *)v10 + 7);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *((_QWORD *)v10 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *((_DWORD *)v10 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)v10 + 1);
        v37 = v78;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 824;
        *(_QWORD *)(v38 + 8) = v11;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        *(_QWORD *)buf = v38;
        IPC::ArgumentCoder<WebCore::SystemImage,void>::encode((char *)v38, a2);
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v38, a3);
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)buf, 1, 0);
        v41 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v41)
        {
          IPC::Encoder::~Encoder(v41, v39);
          WTF::fastFree(v42, v43);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        if (!v40)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_110:
      v47 = v19;
LABEL_53:
      v48 = (_QWORD *)((v28 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v48 >= v28 + v47)
      {
        v49 = (char *)v48 - v28;
        v40 = 17;
        if ((unint64_t)v48 - v28 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v47 = (unint64_t)(v49 + 8);
        if ((unint64_t)(v49 + 8) > v19)
          goto LABEL_74;
        *v48 = v11;
      }
      if (!v19)
      {
        v40 = 17;
        goto LABEL_74;
      }
      v50 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v10 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v47 <= 0x10)
        v47 = 16;
      v52 = v50 + v47;
      if (v51 <= v52)
        v53 = 0;
      else
        v53 = v52;
      *((_QWORD *)v10 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *((_DWORD *)v10 + 27);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v71 = v56 + 1;
        *((_DWORD *)v10 + 27) = v71;
        if (v71 >= *((_DWORD *)v10 + 26))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
      }
      *((_QWORD *)v10 + 6) = v11;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, buf, v12 + 15.0);
    if (buf[16])
    {
      v28 = *(_QWORD *)buf;
      v44 = *(_QWORD *)&buf[8];
      v45 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = v45 - *(_QWORD *)buf;
      if (v45 < *(_QWORD *)buf)
      {
        v47 = 0;
        v19 = *(_QWORD *)&buf[8];
      }
      else
      {
        v19 = 0;
        if (v46 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_110;
        v47 = 0;
        if (v46 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v46) = 2822;
          v19 = v44;
          v47 = v46 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v40 = 15;
LABEL_74:
  v58 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v59 = IPC::errorAsString(v40);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawSystemImage";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v59;
    _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v60 = v5[481];
  if (v60)
  {
    v61 = *(_BYTE **)(v60 + 8);
    if (v61)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
  }
LABEL_79:
  if ((v9 & 1) != 0)
    goto LABEL_96;
  v62 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v62))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v62))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v62);
LABEL_84:
  v64 = *(_QWORD *)(v62 + 8);
  v65 = v64 - 1;
  *(_QWORD *)(v62 + 8) = v64 - 1;
  if (v64 == 1)
  {
    v74 = *(_QWORD *)(v62 + 16);
    v66 = *(_QWORD *)(v62 + 24);
    *(_QWORD *)(v62 + 24) = 0;
    v67 = v74 != 0;
  }
  else
  {
    v66 = 0;
    v67 = 1;
  }
  v68 = __ldxr((unsigned __int8 *)v62);
  if (v68 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v62))
    {
      if (!v65)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v62);
  if (!v65)
  {
LABEL_92:
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    if (!v67)
      WTF::fastFree((WTF *)v62, v18);
  }
LABEL_96:
  result = v77;
  v77 = 0;
  if (result)
  {
    do
    {
      v69 = __ldaxr((unsigned int *)result);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, (unsigned int *)result));
    if (!v70)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result);
      result = (_QWORD *)WTF::fastFree(v72, v73);
    }
  }
LABEL_100:
  if (*((_DWORD *)a2 + 2) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebCore::ARKitBadgeSystemImage *))(*(_QWORD *)a2 + 8))(a2);
  --*((_DWORD *)a2 + 2);
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordDrawPattern(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int a8)
{
  uint64_t v8;
  WebKit::RemoteRenderingBackendProxy *v10;
  unsigned __int8 *v11;
  unsigned int *v12;
  uint64_t v13;
  double v14;
  int v15;
  void *v16;
  WebKit::RemoteImageBufferProxy *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26[7];
  __int16 v27;
  char v28;
  uint64_t v29;
  WebKit::RemoteImageBufferProxy *v30;
  unsigned int *v31;
  _BYTE buf[12];
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v27 = a8;
  v28 = BYTE2(a8);
  v26[0] = &v29;
  v26[1] = a3;
  v26[2] = a4;
  v26[3] = a5;
  v26[4] = a6;
  v26[5] = a7;
  v26[6] = (uint64_t *)&v27;
  v8 = a1[481];
  if (v8)
  {
    v10 = *(WebKit::RemoteRenderingBackendProxy **)(v8 + 8);
    if (v10)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v10, &v31);
      if (v31)
      {
        v11 = (unsigned __int8 *)a1[479];
        if (v11)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v11, a1[480], &v30);
          v11 = (unsigned __int8 *)v30;
          if (v30)
            v11 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v30);
        }
        else
        {
          v30 = 0;
        }
        v12 = v31;
        v13 = a1[478];
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v11);
        v15 = IPC::StreamClientConnection::send<Messages::RemoteDisplayListRecorder::DrawPattern,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v12, v26, v13, v14 + 15.0);
        if (v15)
        {
          v21 = v15;
          v22 = qword_1ECE716E0;
          if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
          {
            v23 = IPC::errorAsString(v21);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawPattern";
            v33 = 2082;
            v34 = v23;
            _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          v24 = a1[481];
          if (v24)
          {
            v25 = *(_BYTE **)(v24 + 8);
            if (v25)
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v25);
          }
        }
        v17 = v30;
        v30 = 0;
        if (v17)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v17 + 1, v16);
        v18 = v31;
        v31 = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            *(_QWORD *)buf = v18;
            WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
          }
        }
      }
    }
  }
}

void WebKit::RemoteDisplayListRecorderProxy::recordBeginTransparencyLayer(WebKit::RemoteDisplayListRecorderProxy *this, float a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  float v60;
  WebKit::RemoteImageBufferProxy *v61;
  unsigned int *v62;
  uint64_t *v63;
  _BYTE buf[22];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v60 = a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v62);
  if (!v62)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_100;
  v61 = 0;
  while (1)
  {
    v6 = v62;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_86:
        v45 = 15;
        goto LABEL_87;
      }
      v37 = *(_QWORD *)buf;
      v38 = *(_QWORD *)&buf[8];
      v39 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - *(_QWORD *)buf;
      if (v39 < *(_QWORD *)buf)
      {
        v42 = 0;
        v41 = *(_QWORD *)&buf[8];
      }
      else
      {
        v41 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          if (v40 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v40) = 2822;
            v41 = v38;
            v42 = v40 + 2;
          }
        }
      }
      v43 = (_QWORD *)((v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v43 >= v37 + v42)
      {
        v44 = (char *)v43 - v37;
        v45 = 17;
        if ((unint64_t)v43 - v37 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_87;
        v42 = (unint64_t)(v44 + 8);
        if ((unint64_t)(v44 + 8) > v41)
          goto LABEL_87;
        *v43 = v7;
      }
      if (!v41)
      {
        v45 = 17;
        goto LABEL_87;
      }
      v46 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v6 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v6 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = v6[27];
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        v6[27] = v54;
        if (v54 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v9);
    if (!buf[16])
      goto LABEL_86;
    v12 = *(_QWORD *)buf;
    v11 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    if (v13 >= *(_QWORD *)buf)
    {
      v15 = v14 + 2;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v14) = 796;
        goto LABEL_14;
      }
      v11 = 0;
    }
    v15 = 0;
LABEL_14:
    v17 = (float *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v17 >= v12 + v15)
    {
      v15 = (unint64_t)v17 - v12 + 4;
      if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFFBLL || v15 > v11)
        goto LABEL_92;
      *v17 = v60;
    }
    if (v11)
    {
      v19 = *((_QWORD *)v6 + 8);
      v20 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v21 = *((_QWORD *)v6 + 7);
      if (v20 + 16 >= v21)
        v20 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v22 = v20 + v15;
      if (v21 <= v22)
        v23 = 0;
      else
        v23 = v22;
      *((_QWORD *)v6 + 9) = v23;
      v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v23, v24));
      if (v25 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_32;
    }
LABEL_92:
    if (buf[16])
      break;
    __break(1u);
LABEL_100:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v61);
    v5 = v61;
    if (v61)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v61);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)v6 + 1);
  v45 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::BeginTransparencyLayer>((uint64_t)v63, (int *)&v60, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
  if (!v45)
    goto LABEL_32;
LABEL_87:
  v55 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v56 = IPC::errorAsString(v45);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_BeginTransparencyLayer";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v56;
    _os_log_impl(&dword_196BCC000, v55, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v57 = *((_QWORD *)this + 481);
  if (v57)
  {
    v58 = *(_BYTE **)(v57 + 8);
    if (v58)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v58);
  }
LABEL_32:
  v26 = v61;
  v61 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
      goto LABEL_35;
    }
    if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_35:
      MEMORY[0x19AEABB3C](v27);
    v29 = *(_QWORD *)(v27 + 8);
    v30 = v29 - 1;
    *(_QWORD *)(v27 + 8) = v29 - 1;
    if (v29 == 1)
    {
      v59 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      v32 = v59 != 0;
    }
    else
    {
      v31 = 0;
      v32 = 1;
    }
    v33 = __ldxr((unsigned __int8 *)v27);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
      {
LABEL_40:
        if (!v30)
        {
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          if (!v32)
            WTF::fastFree((WTF *)v27, v10);
        }
        goto LABEL_41;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
    goto LABEL_40;
  }
LABEL_41:
  v34 = v62;
  v62 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      *(_QWORD *)buf = v34;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordBeginTransparencyLayer(_QWORD *result, char a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char i;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  void *v68;
  IPC::Encoder *v69;
  WTF *v70;
  void *v71;
  int v73;
  char v74;
  char v75;
  IPC::StreamClientConnection *v76;
  uint64_t *v77;
  IPC::Encoder *v78;
  _BYTE buf[22];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v74 = a2;
  v75 = a3;
  v3 = result[481];
  if (!v3)
    return result;
  v4 = result;
  result = *(_QWORD **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (unsigned int **)&v76);
  if (!v76)
    return result;
  v5 = v4[479];
  if (v5)
    goto LABEL_110;
  v6 = 0;
LABEL_6:
  for (i = 1; ; i = 0)
  {
    v8 = v76;
    v9 = v4[478];
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v11 = v10 + 15.0;
    if (*((_QWORD *)v8 + 6) != v9)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
      if (!buf[16])
      {
LABEL_56:
        LODWORD(v5) = 15;
LABEL_57:
        v42 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v43 = IPC::errorAsString(v5);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_BeginTransparencyLayerWithCompositeMode";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v43;
          _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v44 = v4[481];
        if (v44)
        {
          v45 = *(_BYTE **)(v44 + 8);
          if (v45)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v45);
        }
        goto LABEL_62;
      }
      v26 = *(_QWORD *)buf;
      v27 = *(_QWORD *)&buf[8];
      v28 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v29 = v28 - *(_QWORD *)buf;
      if (v28 < *(_QWORD *)buf)
      {
        v31 = 0;
        v30 = *(_QWORD *)&buf[8];
      }
      else
      {
        v30 = 0;
        if (v29 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v29 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v29) = 2822;
            v30 = v27;
            v31 = v29 + 2;
          }
        }
      }
      v32 = (_QWORD *)((v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v32 >= v26 + v31)
      {
        v33 = (char *)v32 - v26;
        v5 = 17;
        if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_57;
        v31 = (unint64_t)(v33 + 8);
        if ((unint64_t)(v33 + 8) > v30)
          goto LABEL_57;
        *v32 = v9;
      }
      if (!v30)
      {
        LODWORD(v5) = 17;
        goto LABEL_57;
      }
      v34 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v35 = *((_QWORD *)v8 + 7);
      if (v34 + 16 >= v35)
        v34 = 0;
      if (v31 <= 0x10)
        v31 = 16;
      v36 = v34 + v31;
      if (v35 <= v36)
        v37 = 0;
      else
        v37 = v36;
      *((_QWORD *)v8 + 9) = v37;
      v38 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v37, v38));
      v40 = *((_DWORD *)v8 + 27);
      if (v39 == 0x80000000 || v40 != 0)
      {
        v55 = v40 + 1;
        *((_DWORD *)v8 + 27) = v55;
        if (v55 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
    result = (_QWORD *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v11);
    if (!buf[16])
      goto LABEL_56;
    v13 = *(_QWORD *)buf;
    v14 = *(_QWORD *)&buf[8];
    v15 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = v15 - *(_QWORD *)buf;
    if (v15 < *(_QWORD *)buf)
      goto LABEL_107;
    v17 = v16 + 2;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > *(_QWORD *)&buf[8])
    {
      v14 = 0;
LABEL_107:
      v17 = 0;
      goto LABEL_15;
    }
    *(_WORD *)(*(_QWORD *)buf + v16) = 797;
LABEL_15:
    if (v17 < v14)
    {
      *(_BYTE *)(v13 + v17) = v74;
      if (v17 + 1 < v14)
      {
        *(_BYTE *)(v13 + v17 + 1) = v75;
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (v17 <= 0xE)
          v17 = 14;
        v22 = v17 + v20 + 2;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_62;
      }
    }
    if (buf[16])
      break;
    __break(1u);
LABEL_110:
    v6 = v4[480];
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_114;
    }
    result = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_114:
    if (*(_QWORD *)(v5 + 24))
      ++*(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    v73 = __ldxr((unsigned __int8 *)v5);
    if (v73 != 1)
    {
      __clrex();
LABEL_120:
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_121;
    }
    if (__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_120;
LABEL_121:
    if (!v6)
      goto LABEL_6;
    if (!*(_BYTE *)(v6 + 4016))
    {
      *(_BYTE *)(v6 + 4016) = 1;
      result = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
    }
  }
  v59 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = v59 - *(_QWORD *)buf;
  if (v59 < *(_QWORD *)buf)
  {
    v61 = 0;
  }
  else
  {
    v61 = 0;
    if (v60 <= 0xFFFFFFFFFFFFFFFDLL && v60 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v60) = 2821;
      v61 = v60 + 2;
    }
  }
  v62 = *((_QWORD *)v8 + 8);
  v63 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = *((_QWORD *)v8 + 7);
  if (v63 + 16 >= v64)
    v63 = 0;
  if (v61 <= 0x10)
    v61 = 16;
  v65 = v63 + v61;
  if (v64 <= v65)
    v65 = 0;
  *((_QWORD *)v8 + 9) = v65;
  v66 = (unint64_t *)(*(_QWORD *)(v62 + 16) + 128);
  do
    __ldaxr(v66);
  while (__stlxr(v65, v66));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v77, (uint64_t **)v8 + 1);
  v5 = (uint64_t)v77;
  v67 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v67 = 797;
  *(_QWORD *)(v67 + 8) = v9;
  *(_QWORD *)(v67 + 528) = v67 + 16;
  *(_QWORD *)(v67 + 536) = v67 + 16;
  *(_OWORD *)(v67 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v67 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v67);
  v78 = (IPC::Encoder *)v67;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v67, &v74);
  LODWORD(v5) = IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v78, 1, 0);
  v69 = v78;
  v78 = 0;
  if (v69)
  {
    IPC::Encoder::~Encoder(v69, v68);
    WTF::fastFree(v70, v71);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v77);
  if ((_DWORD)v5)
    goto LABEL_57;
LABEL_62:
  if ((i & 1) != 0)
    goto LABEL_79;
  v46 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stxr(1u, (unsigned __int8 *)v46))
LABEL_66:
    MEMORY[0x19AEABB3C](v46);
  v48 = *(_QWORD *)(v46 + 8);
  v49 = v48 - 1;
  *(_QWORD *)(v46 + 8) = v48 - 1;
  if (v48 == 1)
  {
    v58 = *(_QWORD *)(v46 + 16);
    v50 = *(_QWORD *)(v46 + 24);
    *(_QWORD *)(v46 + 24) = 0;
    v51 = v58 != 0;
  }
  else
  {
    v50 = 0;
    v51 = 1;
  }
  v52 = __ldxr((unsigned __int8 *)v46);
  if (v52 != 1)
  {
    __clrex();
LABEL_74:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
    if (!v49)
      goto LABEL_75;
    goto LABEL_79;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
    goto LABEL_74;
  if (!v49)
  {
LABEL_75:
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    if (!v51)
      WTF::fastFree((WTF *)v46, v12);
  }
LABEL_79:
  result = v76;
  v76 = 0;
  if (result)
  {
    do
    {
      v53 = __ldaxr((unsigned int *)result);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)result));
    if (!v54)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result);
      return (_QWORD *)WTF::fastFree(v56, v57);
    }
  }
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordEndTransparencyLayer(WebKit::RemoteDisplayListRecorderProxy *this)
{
  uint64_t v1;
  WebKit::RemoteRenderingBackendProxy *v3;
  WTF::ApproximateTime *v4;
  unsigned int *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  WebKit::RemoteImageBufferProxy *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  WebKit::RemoteImageBufferProxy *v56;
  unsigned int *v57;
  uint64_t *v58;
  _BYTE buf[22];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 481);
  if (!v1)
    return;
  v3 = *(WebKit::RemoteRenderingBackendProxy **)(v1 + 8);
  if (!v3)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v3, &v57);
  if (!v57)
    return;
  v4 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v4)
    goto LABEL_93;
  v56 = 0;
  while (1)
  {
    v5 = v57;
    v6 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v4);
    v8 = v7 + 15.0;
    if (*((_QWORD *)v5 + 6) != v6)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 14), buf, v7 + 15.0);
      if (!buf[16])
      {
LABEL_80:
        v41 = 15;
        goto LABEL_81;
      }
      v33 = *(_QWORD *)buf;
      v34 = *(_QWORD *)&buf[8];
      v35 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v36 = v35 - *(_QWORD *)buf;
      if (v35 < *(_QWORD *)buf)
      {
        v38 = 0;
        v37 = *(_QWORD *)&buf[8];
      }
      else
      {
        v37 = 0;
        if (v36 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v38 = 0;
        }
        else
        {
          v38 = 0;
          if (v36 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v36) = 2822;
            v37 = v34;
            v38 = v36 + 2;
          }
        }
      }
      v39 = (_QWORD *)((v33 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v39 >= v33 + v38)
      {
        v40 = (char *)v39 - v33;
        v41 = 17;
        if ((unint64_t)v39 - v33 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_81;
        v38 = (unint64_t)(v40 + 8);
        if ((unint64_t)(v40 + 8) > v37)
          goto LABEL_81;
        *v39 = v6;
      }
      if (!v37)
      {
        v41 = 17;
        goto LABEL_81;
      }
      v42 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *((_QWORD *)v5 + 7);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v45 = 0;
      else
        v45 = v44;
      *((_QWORD *)v5 + 9) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = v5[27];
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        v5[27] = v50;
        if (v50 >= v5[26])
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](v5[21]);
          v5[27] = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    v4 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 14), buf, v8);
    if (!buf[16])
      goto LABEL_80;
    v9 = *(void **)buf;
    v10 = *(_QWORD *)&buf[8];
    v11 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = v11 - *(_QWORD *)buf;
    if (v11 < *(_QWORD *)buf)
    {
      v13 = 0;
    }
    else
    {
      v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > *(_QWORD *)&buf[8])
        goto LABEL_89;
      *(_WORD *)(*(_QWORD *)buf + v12) = 825;
    }
    if (v10)
    {
      v15 = *((_QWORD *)v5 + 8);
      v16 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = *((_QWORD *)v5 + 7);
      if (v16 + 16 >= v17)
        v16 = 0;
      if (v13 <= 0x10)
        v13 = 16;
      v18 = v16 + v13;
      if (v17 <= v18)
        v19 = 0;
      else
        v19 = v18;
      *((_QWORD *)v5 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      if (v21 == 0x80000000 || v5[27])
      {
        if (*((_BYTE *)v5 + 96))
          MEMORY[0x19AEBA1A0](v5[21]);
        v5[27] = 0;
      }
      goto LABEL_26;
    }
    if (buf[16])
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v4, *((_QWORD *)this + 480), &v56);
    v4 = v56;
    if (v56)
      v4 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v56);
  }
  v9 = *(void **)buf;
  v10 = *(_QWORD *)&buf[8];
LABEL_89:
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, (unint64_t)v9, v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)v5 + 1);
  v41 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::EndTransparencyLayer>((uint64_t)v58, v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
  if (!v41)
    goto LABEL_26;
LABEL_81:
  v51 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v52 = IPC::errorAsString(v41);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_EndTransparencyLayer";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v52;
    _os_log_impl(&dword_196BCC000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v53 = *((_QWORD *)this + 481);
  if (v53)
  {
    v54 = *(_BYTE **)(v53 + 8);
    if (v54)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
  }
LABEL_26:
  v22 = v56;
  v56 = 0;
  if (v22)
  {
    v23 = *((_QWORD *)v22 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
LABEL_30:
      v25 = *(_QWORD *)(v23 + 8);
      v26 = v25 - 1;
      *(_QWORD *)(v23 + 8) = v25 - 1;
      if (v25 == 1)
      {
        v55 = *(_QWORD *)(v23 + 16);
        v27 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)(v23 + 24) = 0;
        v28 = v55 != 0;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      v29 = __ldxr((unsigned __int8 *)v23);
      if (v29 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_34;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_34:
      if (!v26)
      {
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v9);
      }
      goto LABEL_35;
    }
    MEMORY[0x19AEABB3C](v23);
    goto LABEL_30;
  }
LABEL_35:
  v30 = v57;
  v57 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      *(_QWORD *)buf = v30;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordDrawLine(_QWORD *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  IPC::StreamClientConnection *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  int v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  int v76;
  IPC::StreamClientConnection *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 v81;
  _BYTE buf[24];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = this[481];
  if (!v3)
    return this;
  v4 = this;
  this = *(_QWORD **)(v3 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v77);
  if (!v77)
    return this;
  v7 = v4[479];
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  v8 = v4[480];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_113;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v7);
LABEL_113:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v76 = __ldxr((unsigned __int8 *)v7);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_119:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v8)
    goto LABEL_6;
  if (!*(_BYTE *)(v8 + 4016))
  {
    *(_BYTE *)(v8 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v9 = 0;
LABEL_7:
  v10 = v77;
  v11 = v4[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v13 = v12 + 15.0;
  if (*((_QWORD *)v10 + 6) == v11)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, &v79, v13);
      if (!v81)
        break;
      *(_QWORD *)buf = v79;
      *(_QWORD *)&buf[8] = v80;
      *(_QWORD *)&buf[16] = 0;
      v14 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = v14 >= v79;
      v16 = v14 - v79;
      if (v15)
      {
        if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v80)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v79 + v16) = 818;
          *(_QWORD *)&buf[16] = v16 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, a2);
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v20 = *(_QWORD *)&buf[16];
        v21 = *((_QWORD *)v10 + 8);
        v22 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *((_QWORD *)v10 + 7);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v20 = 16;
        v24 = v22 + v20;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *((_QWORD *)v10 + 9) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 == 0x80000000 || *((_DWORD *)v10 + 27))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
        goto LABEL_79;
      }
      v28 = v81;
      if (v81)
      {
        v29 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v79;
        if (v29 < v79)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v80)
          {
            *(_WORD *)(v79 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *((_QWORD *)v10 + 8);
        v33 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *((_QWORD *)v10 + 7);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *((_QWORD *)v10 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *((_DWORD *)v10 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)v10 + 1);
        v37 = v78;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 818;
        *(_QWORD *)(v38 + 8) = v11;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        *(_QWORD *)buf = v38;
        IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v38, (int *)a2);
        IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v38, (int *)a3);
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)buf, 1, 0);
        v41 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v41)
        {
          IPC::Encoder::~Encoder(v41, v39);
          WTF::fastFree(v42, v43);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        if (!v40)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v47 = v19;
LABEL_53:
      v48 = (_QWORD *)((v28 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v48 >= v28 + v47)
      {
        v49 = (char *)v48 - v28;
        v40 = 17;
        if ((unint64_t)v48 - v28 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v47 = (unint64_t)(v49 + 8);
        if ((unint64_t)(v49 + 8) > v19)
          goto LABEL_74;
        *v48 = v11;
      }
      if (!v19)
      {
        v40 = 17;
        goto LABEL_74;
      }
      v50 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v10 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v47 <= 0x10)
        v47 = 16;
      v52 = v50 + v47;
      if (v51 <= v52)
        v53 = 0;
      else
        v53 = v52;
      *((_QWORD *)v10 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *((_DWORD *)v10 + 27);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v71 = v56 + 1;
        *((_DWORD *)v10 + 27) = v71;
        if (v71 >= *((_DWORD *)v10 + 26))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
      }
      *((_QWORD *)v10 + 6) = v11;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, buf, v12 + 15.0);
    if (buf[16])
    {
      v28 = *(_QWORD *)buf;
      v44 = *(_QWORD *)&buf[8];
      v45 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = v45 - *(_QWORD *)buf;
      if (v45 < *(_QWORD *)buf)
      {
        v47 = 0;
        v19 = *(_QWORD *)&buf[8];
      }
      else
      {
        v19 = 0;
        if (v46 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v47 = 0;
        if (v46 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v46) = 2822;
          v19 = v44;
          v47 = v46 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v40 = 15;
LABEL_74:
  v58 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v59 = IPC::errorAsString(v40);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawLine";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v59;
    _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v60 = v4[481];
  if (v60)
  {
    v61 = *(_BYTE **)(v60 + 8);
    if (v61)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
  }
LABEL_79:
  if ((v9 & 1) != 0)
    goto LABEL_96;
  v62 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v62))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v62))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v62);
LABEL_84:
  v64 = *(_QWORD *)(v62 + 8);
  v65 = v64 - 1;
  *(_QWORD *)(v62 + 8) = v64 - 1;
  if (v64 == 1)
  {
    v74 = *(_QWORD *)(v62 + 16);
    v66 = *(_QWORD *)(v62 + 24);
    *(_QWORD *)(v62 + 24) = 0;
    v67 = v74 != 0;
  }
  else
  {
    v66 = 0;
    v67 = 1;
  }
  v68 = __ldxr((unsigned __int8 *)v62);
  if (v68 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v62))
    {
      if (!v65)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v62);
  if (!v65)
  {
LABEL_92:
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    if (!v67)
      WTF::fastFree((WTF *)v62, v18);
  }
LABEL_96:
  this = v77;
  v77 = 0;
  if (this)
  {
    do
    {
      v69 = __ldaxr((unsigned int *)this);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, (unsigned int *)this));
    if (!v70)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v72, v73);
    }
  }
  return this;
}

WTF *WebKit::RemoteDisplayListRecorderProxy::recordDrawLinesForText(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  WebKit::RemoteImageBufferProxy *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *result;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _BYTE *v56;
  char v57;
  WTF *v58;
  int v59;
  char *v60;
  WebKit::RemoteImageBufferProxy *v61;
  unsigned int *v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  _BYTE buf[24];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  WebCore::DisplayList::DrawLinesForText::DrawLinesForText();
  v60 = &v57;
  v3 = a1[481];
  if (!v3)
    goto LABEL_40;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v4)
    goto LABEL_40;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v62);
  if (!v62)
    goto LABEL_40;
  v5 = (WTF::ApproximateTime *)a1[479];
  if (v5)
    goto LABEL_96;
  v61 = 0;
  while (1)
  {
    v6 = v62;
    v7 = a1[478];
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_85:
        v42 = 15;
        goto LABEL_86;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_86;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_86;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v63, v9);
    if (!v65)
      goto LABEL_85;
    *(_QWORD *)buf = v63;
    *(_QWORD *)&buf[8] = v64;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v63;
    v12 = v10 - v63;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v64)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v63 + v12) = 819;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode((uint64_t *)buf, (uint64_t)v60);
    if (*(_QWORD *)&buf[8])
    {
      v14 = *(_QWORD *)&buf[16];
      v15 = *((_QWORD *)v6 + 8);
      v16 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = *((_QWORD *)v6 + 7);
      if (v16 + 16 >= v17)
        v16 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v14 = 16;
      v18 = v16 + v14;
      if (v17 <= v18)
        v19 = 0;
      else
        v19 = v18;
      *((_QWORD *)v6 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      if (v21 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v65)
      break;
    __break(1u);
LABEL_96:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, a1[480], &v61);
    v5 = v61;
    if (v61)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v61);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v63, v64);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawLinesForText>(*(uint64_t *)buf, (_DWORD **)&v60, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_86:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawLinesForText";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v55 = a1[481];
  if (v55)
  {
    v56 = *(_BYTE **)(v55 + 8);
    if (v56)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
  }
LABEL_27:
  v22 = v61;
  v61 = 0;
  if (v22)
  {
    v23 = *((_QWORD *)v22 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
LABEL_31:
      v25 = *(_QWORD *)(v23 + 8);
      v26 = v25 - 1;
      *(_QWORD *)(v23 + 8) = v25 - 1;
      if (v25 == 1)
      {
        v52 = *(_QWORD *)(v23 + 16);
        v27 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)(v23 + 24) = 0;
        v28 = v52 != 0;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      v29 = __ldxr((unsigned __int8 *)v23);
      if (v29 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_35:
      if (!v26)
      {
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v2);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v23);
    goto LABEL_31;
  }
LABEL_36:
  v30 = v62;
  v62 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      *(_QWORD *)buf = v30;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
LABEL_40:
  result = v58;
  if (v58)
  {
    v58 = 0;
    v59 = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordDrawDotsForDocumentMarker(_QWORD *result, int *a2, char *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  IPC::StreamClientConnection *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  void *v40;
  int v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  NSObject *v59;
  const char *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  int v77;
  IPC::StreamClientConnection *v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned __int8 v82;
  _BYTE buf[24];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = result[481];
  if (!v3)
    return result;
  v4 = result;
  result = *(_QWORD **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (unsigned int **)&v78);
  if (!v78)
    return result;
  v7 = v4[479];
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  v8 = v4[480];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_113;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C](v7);
LABEL_113:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v77 = __ldxr((unsigned __int8 *)v7);
  if (v77 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_119:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v8)
    goto LABEL_6;
  if (!*(_BYTE *)(v8 + 4016))
  {
    *(_BYTE *)(v8 + 4016) = 1;
    result = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
  }
  v9 = 0;
LABEL_7:
  v10 = v78;
  v11 = v4[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 15.0;
  if (*((_QWORD *)v10 + 6) == v11)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, &v80, v13);
      if (!v82)
        break;
      *(_QWORD *)buf = v80;
      *(_QWORD *)&buf[8] = v81;
      *(_QWORD *)&buf[16] = 0;
      v14 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = v14 >= v80;
      v16 = v14 - v80;
      if (v15)
      {
        if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v81)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v80 + v16) = 811;
          *(_QWORD *)&buf[16] = v16 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a2);
      IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::encode((uint64_t *)buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v20 = *(_QWORD *)&buf[16];
        v21 = *((_QWORD *)v10 + 8);
        v22 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *((_QWORD *)v10 + 7);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v20 = 16;
        v24 = v22 + v20;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *((_QWORD *)v10 + 9) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 == 0x80000000 || *((_DWORD *)v10 + 27))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
        goto LABEL_79;
      }
      v28 = v82;
      if (v82)
      {
        v29 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - v80;
        if (v29 < v80)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v81)
          {
            *(_WORD *)(v80 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *((_QWORD *)v10 + 8);
        v33 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *((_QWORD *)v10 + 7);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *((_QWORD *)v10 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *((_DWORD *)v10 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, (uint64_t **)v10 + 1);
        v37 = v79;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 811;
        *(_QWORD *)(v38 + 8) = v11;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        *(_QWORD *)buf = v38;
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v38, a2);
        v39 = *a3;
        *IPC::Encoder::grow((IPC::Encoder *)v38, 1uLL, 1) = v39;
        IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v38, (WebCore::Color *)(a3 + 8));
        v41 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)buf, 1, 0);
        v42 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v42)
        {
          IPC::Encoder::~Encoder(v42, v40);
          WTF::fastFree(v43, v44);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79);
        if (!v41)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v48 = v19;
LABEL_53:
      v49 = (_QWORD *)((v28 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v49 >= v28 + v48)
      {
        v50 = (char *)v49 - v28;
        v41 = 17;
        if ((unint64_t)v49 - v28 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v48 = (unint64_t)(v50 + 8);
        if ((unint64_t)(v50 + 8) > v19)
          goto LABEL_74;
        *v49 = v11;
      }
      if (!v19)
      {
        v41 = 17;
        goto LABEL_74;
      }
      v51 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v52 = *((_QWORD *)v10 + 7);
      if (v51 + 16 >= v52)
        v51 = 0;
      if (v48 <= 0x10)
        v48 = 16;
      v53 = v51 + v48;
      if (v52 <= v53)
        v54 = 0;
      else
        v54 = v53;
      *((_QWORD *)v10 + 9) = v54;
      v55 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 8) + 16) + 128);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v54, v55));
      v57 = *((_DWORD *)v10 + 27);
      if (v56 == 0x80000000 || v57 != 0)
      {
        v72 = v57 + 1;
        *((_DWORD *)v10 + 27) = v72;
        if (v72 >= *((_DWORD *)v10 + 26))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
      }
      *((_QWORD *)v10 + 6) = v11;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, buf, v12 + 15.0);
    if (buf[16])
    {
      v28 = *(_QWORD *)buf;
      v45 = *(_QWORD *)&buf[8];
      v46 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = v46 - *(_QWORD *)buf;
      if (v46 < *(_QWORD *)buf)
      {
        v48 = 0;
        v19 = *(_QWORD *)&buf[8];
      }
      else
      {
        v19 = 0;
        if (v47 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v48 = 0;
        if (v47 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v47) = 2822;
          v19 = v45;
          v48 = v47 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v41 = 15;
LABEL_74:
  v59 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v60 = IPC::errorAsString(v41);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawDotsForDocumentMarker";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v60;
    _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v61 = v4[481];
  if (v61)
  {
    v62 = *(_BYTE **)(v61 + 8);
    if (v62)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v62);
  }
LABEL_79:
  if ((v9 & 1) != 0)
    goto LABEL_96;
  v63 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v63))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v63))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v63);
LABEL_84:
  v65 = *(_QWORD *)(v63 + 8);
  v66 = v65 - 1;
  *(_QWORD *)(v63 + 8) = v65 - 1;
  if (v65 == 1)
  {
    v75 = *(_QWORD *)(v63 + 16);
    v67 = *(_QWORD *)(v63 + 24);
    *(_QWORD *)(v63 + 24) = 0;
    v68 = v75 != 0;
  }
  else
  {
    v67 = 0;
    v68 = 1;
  }
  v69 = __ldxr((unsigned __int8 *)v63);
  if (v69 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v63))
    {
      if (!v66)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v63);
  if (!v66)
  {
LABEL_92:
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
    if (!v68)
      WTF::fastFree((WTF *)v63, v18);
  }
LABEL_96:
  result = v78;
  v78 = 0;
  if (result)
  {
    do
    {
      v70 = __ldaxr((unsigned int *)result);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, (unsigned int *)result));
    if (!v71)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result);
      return (_QWORD *)WTF::fastFree(v73, v74);
    }
  }
  return result;
}

