WTF *WebKit::NetworkStorageManager::deleteDatabase(uint64_t **this, void **a2, const WebCore::IDBOpenRequestData *a3)
{
  WTF *v5;
  WebKit::OriginStorageManager *v6;
  WebKit::IDBStorageManager *v7;
  WTF::StringImpl *v8;
  WebCore::IDBServer::UniqueIDBDatabase *UniqueIDBDatabase;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v17;
  WTF::StringImpl *v18;
  _BYTE v19[24];
  int v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = (WTF *)WebKit::IDBStorageRegistry::ensureConnectionToClient(this[16], a2[3], *((_QWORD *)a3 + 1));
  ++*(_DWORD *)v5;
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v18, (uint64_t)a3);
  v6 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)this, (const WebCore::ClientOrigin *)v19);
  v7 = WebKit::OriginStorageManager::idbStorageManager(v6, (uint64_t)this[16]);
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v23, (uint64_t)a3);
  UniqueIDBDatabase = (WebCore::IDBServer::UniqueIDBDatabase *)WebKit::IDBStorageManager::getOrCreateUniqueIDBDatabase((uint64_t)v7, (WTF::StringImpl *)&v23);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v27])(&v17, &v26);
  v27 = -1;
  if (v25 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v25])(&v17, &v24);
  v25 = -1;
  v10 = v23;
  v23 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::IDBServer::UniqueIDBDatabase::handleDelete();
  if (WebCore::IDBServer::UniqueIDBDatabase::tryClose(UniqueIDBDatabase))
  {
    v12 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>,WebCore::IDBDatabaseIdentifier>((uint64_t *)v7 + 5, (uint64_t)UniqueIDBDatabase + 16);
    v11 = (WTF::StringImpl *)v12;
    v13 = *((_QWORD *)v7 + 5);
    if (v13)
    {
      v14 = v13 + 88 * *(unsigned int *)(v13 - 4);
      if (v14 == v12)
        goto LABEL_17;
    }
    else
    {
      if (!v12)
        goto LABEL_17;
      v14 = 0;
    }
    if (v14 != v12)
      WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::remove((uint64_t *)v7 + 5, v12);
  }
LABEL_17:
  if (v22 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v22])(&v23, &v21);
  v22 = -1;
  if (v20 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v20])(&v23, v19);
  v20 = -1;
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  return WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v5, v11);
}

uint64_t WebKit::NetworkStorageManager::establishTransaction(uint64_t a1, void *a2)
{
  uint64_t result;

  result = WebKit::IDBStorageRegistry::connection(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseConnection::establishTransaction();
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseConnection *WebKit::NetworkStorageManager::databaseConnectionPendingClose(uint64_t a1, void *a2)
{
  WebCore::IDBServer::UniqueIDBDatabaseConnection *result;

  result = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebKit::IDBStorageRegistry::connection(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2);
  if (result)
    return (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebCore::IDBServer::UniqueIDBDatabaseConnection::connectionPendingCloseFromClient(result);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseConnection *WebKit::NetworkStorageManager::databaseConnectionClosed(uint64_t a1, void *a2)
{
  WebCore::IDBServer::UniqueIDBDatabaseConnection *result;

  result = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebKit::IDBStorageRegistry::connection(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2);
  if (result)
    return (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebCore::IDBServer::UniqueIDBDatabaseConnection::connectionClosedFromClient(result);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseConnection *WebKit::NetworkStorageManager::abortOpenAndUpgradeNeeded(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *v5;
  WebCore::IDBServer::UniqueIDBDatabaseConnection *result;

  if (*(_BYTE *)(a3 + 16))
  {
    v5 = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 16), *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (v5)
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::abortWithoutCallback(v5);
  }
  result = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebKit::IDBStorageRegistry::connection(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2);
  if (result)
    return (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebCore::IDBServer::UniqueIDBDatabaseConnection::connectionClosedFromClient(result);
  return result;
}

uint64_t WebKit::NetworkStorageManager::didFireVersionChangeEvent(uint64_t a1, void *a2)
{
  uint64_t result;

  result = WebKit::IDBStorageRegistry::connection(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseConnection::didFireVersionChangeEvent();
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::abortTransaction(WebKit::NetworkStorageManager *this, const WebCore::IDBResourceIdentifier *a2)
{
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;

  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(*((_QWORD *)this + 16) + 16), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (result)
    return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::abort(result);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::commitTransaction(WebKit::NetworkStorageManager *this, const WebCore::IDBResourceIdentifier *a2)
{
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;

  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(*((_QWORD *)this + 16) + 16), *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  if (result)
    return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::commit(result);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseConnection *WebKit::NetworkStorageManager::didFinishHandlingVersionChangeTransaction(uint64_t a1, void *a2, const WebCore::IDBResourceIdentifier *a3)
{
  WebCore::IDBServer::UniqueIDBDatabaseConnection *result;

  result = (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebKit::IDBStorageRegistry::connection(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), a2);
  if (result)
    return (WebCore::IDBServer::UniqueIDBDatabaseConnection *)WebCore::IDBServer::UniqueIDBDatabaseConnection::didFinishHandlingVersionChange(result, a3);
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::createObjectStore(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;

  v3 = *((_QWORD *)this + 16);
  v4 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v3 + 16), v4, v5);
  if (result)
  {
    result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(result);
    if ((_DWORD)result)
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::createObjectStore();
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::deleteObjectStore(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;

  v3 = *((_QWORD *)this + 16);
  v4 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v3 + 16), v4, v5);
  if (result)
  {
    result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(result);
    if ((_DWORD)result)
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteObjectStore();
  }
  return result;
}

WebCore::IDBServer::UniqueIDBDatabaseTransaction *WebKit::NetworkStorageManager::renameObjectStore(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, unint64_t a3, const WTF::String *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WebCore::IDBServer::UniqueIDBDatabaseTransaction *result;

  v4 = *((_QWORD *)this + 16);
  v5 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v4 + 16), v5, v6);
  if (result)
  {
    result = (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(result);
    if ((_DWORD)result)
      return (WebCore::IDBServer::UniqueIDBDatabaseTransaction *)WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameObjectStore();
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::clearObjectStore(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 16);
  v3 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::clearObjectStore();
  return result;
}

uint64_t WebKit::NetworkStorageManager::createIndex(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = *((_QWORD *)this + 16);
  v4 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v3 + 16), v4, v5);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::createIndex();
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteIndex(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, unint64_t a3, const WTF::String *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = *((_QWORD *)this + 16);
  v5 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v4 + 16), v5, v6);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteIndex();
  return result;
}

uint64_t WebKit::NetworkStorageManager::renameIndex(WebKit::NetworkStorageManager *this, const WebCore::IDBRequestData *a2, unint64_t a3, unint64_t a4, const WTF::String *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *((_QWORD *)this + 16);
  v6 = WebCore::IDBRequestData::transactionIdentifier(a2);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v5 + 16), v6, v7);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::renameIndex();
  return result;
}

void WebKit::NetworkStorageManager::putOrAdd(uint64_t a1, uint64_t a2, WebCore::IDBRequestData *this, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  uint8_t buf[2];

  v8 = *(_QWORD *)(a1 + 128);
  v9 = WebCore::IDBRequestData::transactionIdentifier(this);
  if (!WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v8 + 16), v9, v10))
    return;
  v12 = *(unsigned int *)(a5 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a5 + 36))
  {
    if (!(_DWORD)v12)
    {
LABEL_27:
      WebCore::IDBServer::UniqueIDBDatabaseTransaction::putOrAdd();
      return;
    }
    v13 = *(_QWORD *)(a1 + 304);
    if (v13)
    {
      v17 = *(_QWORD *)(a2 + 24);
      v18 = *(_DWORD *)(v13 - 8);
      v19 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = *(_QWORD *)(v13 + 16 * v22);
      if (v23 != v17)
      {
        v24 = 1;
        while (v23)
        {
          v22 = ((_DWORD)v22 + v24) & v18;
          v23 = *(_QWORD *)(v13 + 16 * v22);
          ++v24;
          if (v23 == v17)
            goto LABEL_17;
        }
        v22 = *(unsigned int *)(v13 - 4);
      }
LABEL_17:
      if (v22 != *(_DWORD *)(v13 - 4))
      {
        v25 = (uint64_t *)(v13 + 16 * v22 + 8);
        v26 = *(WTF::StringImpl ***)(a5 + 24);
        v27 = 8 * v12;
        while (1)
        {
          v28 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v25, v26, v11);
          if (*v25)
          {
            v29 = *v25 + 8 * *(unsigned int *)(*v25 - 4);
            if ((WTF::StringImpl **)v29 == v28)
              goto LABEL_28;
          }
          else
          {
            if (!v28)
            {
LABEL_28:
              v14 = qword_1ECE71208;
              if (os_log_type_enabled((os_log_t)qword_1ECE71208, OS_LOG_TYPE_FAULT))
              {
                v30 = 0;
                v15 = "NetworkStorageManager::putOrAdd: Blob path was not created for this WebProcess";
                v16 = (uint8_t *)&v30;
LABEL_15:
                _os_log_fault_impl(&dword_196BCC000, v14, OS_LOG_TYPE_FAULT, v15, v16, 2u);
              }
              return;
            }
            v29 = 0;
          }
          if ((WTF::StringImpl **)v29 != v28)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v25, v28);
          ++v26;
          v27 -= 8;
          if (!v27)
            goto LABEL_27;
        }
      }
    }
    v14 = qword_1ECE71208;
    if (os_log_type_enabled((os_log_t)qword_1ECE71208, OS_LOG_TYPE_FAULT))
    {
      v31 = 0;
      v15 = "NetworkStorageManager::putOrAdd: IDBValue contains blob paths but none are allowed for this process";
      v16 = (uint8_t *)&v31;
      goto LABEL_15;
    }
    return;
  }
  v14 = qword_1ECE71208;
  if (os_log_type_enabled((os_log_t)qword_1ECE71208, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    v15 = "NetworkStorageManager::putOrAdd: Number of blob URLs doesn't match the number of blob file paths.";
    v16 = buf;
    goto LABEL_15;
  }
}

uint64_t WebKit::NetworkStorageManager::getRecord(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::getRecord();
  return result;
}

uint64_t WebKit::NetworkStorageManager::getAllRecords(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::getAllRecords();
  return result;
}

uint64_t WebKit::NetworkStorageManager::getCount(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::getCount();
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteRecord(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::deleteRecord();
  return result;
}

uint64_t WebKit::NetworkStorageManager::openCursor(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::openCursor();
  return result;
}

uint64_t WebKit::NetworkStorageManager::iterateCursor(uint64_t a1, WebCore::IDBRequestData *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = WebCore::IDBRequestData::transactionIdentifier(this);
  result = WebKit::IDBStorageRegistry::transaction(*(_QWORD *)(v2 + 16), v3, v4);
  if (result)
    return WebCore::IDBServer::UniqueIDBDatabaseTransaction::iterateCursor();
  return result;
}

WTF *WebKit::NetworkStorageManager::getAllDatabaseNamesAndVersions(uint64_t **this, void **a2, const WebCore::IDBResourceIdentifier *a3, const WebCore::ClientOrigin *a4)
{
  WTF *v6;
  WebKit::OriginStorageManager *v7;
  WebKit::IDBStorageManager *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  int v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  const WTF::String *v29;
  const WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  int v32;
  uint64_t *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int i;
  int v46;
  WTF *v47;
  WTF::StringImpl *v48;
  void *v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl **v61;

  v6 = (WTF *)WebKit::IDBStorageRegistry::ensureConnectionToClient(this[16], a2[3], *(_QWORD *)a3);
  ++*(_DWORD *)v6;
  v7 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)this, a4);
  v8 = WebKit::OriginStorageManager::idbStorageManager(v7, (uint64_t)this[16]);
  v52 = 0;
  v53 = 0;
  v61 = 0;
  v9 = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((_QWORD **)v8 + 5);
  v11 = v9;
  v12 = v10;
  v13 = *((_QWORD *)v8 + 5);
  if (v13)
    v14 = (WTF::StringImpl *)(v13 + 88 * *(unsigned int *)(v13 - 4));
  else
    v14 = 0;
  if (v14 != v9)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::filePath(*((WebCore::IDBServer::UniqueIDBDatabase **)v11 + 10));
      if (v56 && *((_DWORD *)v56 + 1))
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v61, &v56, v15, (uint64_t)&v58);
      WebCore::IDBServer::UniqueIDBDatabase::nameAndVersion(*((WebCore::IDBServer::UniqueIDBDatabase **)v11 + 10));
      if (v60)
      {
        v16 = HIDWORD(v53);
        if (HIDWORD(v53) == (_DWORD)v53)
        {
          v17 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v58);
          v18 = HIDWORD(v53);
          v19 = (_QWORD *)(v52 + 16 * HIDWORD(v53));
          v20 = *v17;
          *v17 = 0;
          *v19 = v20;
          v19[1] = v17[1];
          HIDWORD(v53) = v18 + 1;
          if (!v60)
            goto LABEL_17;
        }
        else
        {
          v21 = (WTF::StringImpl **)(v52 + 16 * HIDWORD(v53));
          v22 = v58;
          v58 = 0;
          *v21 = v22;
          v21[1] = v59;
          HIDWORD(v53) = v16 + 1;
        }
        v23 = v58;
        v58 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v10);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
LABEL_17:
      v24 = v56;
      v56 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v10);
        else
          *(_DWORD *)v24 -= 2;
      }
      while (1)
      {
        v11 = (WTF::StringImpl *)((char *)v11 + 88);
        if (v11 == v12)
          break;
        if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
          goto LABEL_25;
      }
      v11 = v12;
LABEL_25:
      ;
    }
    while (v11 != v14);
  }
  WTF::FileSystemImpl::listDirectory((WebKit::IDBStorageManager *)((char *)v8 + 16), v10);
  if (v57)
  {
    v26 = v56;
    v27 = (WTF::StringImpl *)((char *)v56 + 8 * v57);
    do
    {
      v28 = *(WTF::StringImpl **)v26;
      if (*(_QWORD *)v26)
        *(_DWORD *)v28 += 2;
      WTF::FileSystemImpl::pathByAppendingComponent();
      WebCore::IDBServer::SQLiteIDBBackingStore::fullDatabasePathForDirectory((WebCore::IDBServer::SQLiteIDBBackingStore *)&v55, v29);
      v31 = v61;
      if (v61)
      {
        v42 = *((_DWORD *)v61 - 2);
        v43 = *((_DWORD *)v54 + 4);
        if (v43 >= 0x100)
          v44 = v43 >> 8;
        else
          v44 = WTF::StringImpl::hashSlowCase(v54);
        for (i = 0; ; v44 = i + v46)
        {
          v46 = v44 & v42;
          v47 = v31[v44 & v42];
          if (v47 != (WTF *)-1)
          {
            if (!v47)
              goto LABEL_31;
            if ((WTF::equal(v47, v54, v30) & 1) != 0)
              break;
          }
          ++i;
        }
      }
      else
      {
LABEL_31:
        WebCore::IDBServer::SQLiteIDBBackingStore::databaseNameAndVersionFromFile((WebCore::IDBServer::SQLiteIDBBackingStore *)&v54, v25);
        if (!v60)
          goto LABEL_40;
        v32 = HIDWORD(v53);
        if (HIDWORD(v53) == (_DWORD)v53)
        {
          v33 = (uint64_t *)WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v58);
          v34 = HIDWORD(v53);
          v35 = (_QWORD *)(v52 + 16 * HIDWORD(v53));
          v36 = *v33;
          *v33 = 0;
          *v35 = v36;
          v35[1] = v33[1];
          HIDWORD(v53) = v34 + 1;
          if (!v60)
            goto LABEL_40;
        }
        else
        {
          v37 = (WTF::StringImpl **)(v52 + 16 * HIDWORD(v53));
          v38 = v58;
          v58 = 0;
          *v37 = v38;
          v37[1] = v59;
          HIDWORD(v53) = v32 + 1;
        }
        v39 = v58;
        v58 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v25);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
LABEL_40:
      v40 = v54;
      v54 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v25);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v55;
      v55 = 0;
      if (!v41)
        goto LABEL_47;
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
LABEL_47:
        if (v28)
          goto LABEL_50;
        goto LABEL_53;
      }
      WTF::StringImpl::destroy(v41, v25);
      if (v28)
      {
LABEL_50:
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v25);
        else
          *(_DWORD *)v28 -= 2;
      }
LABEL_53:
      v26 = (WTF::StringImpl *)((char *)v26 + 8);
    }
    while (v26 != v27);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v25);
  if (v61)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61, v48);
  WebCore::IDBServer::IDBConnectionToClient::didGetAllDatabaseNamesAndVersions();
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v49);
  return WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v6, v50);
}

uint64_t WebKit::NetworkStorageManager::cacheStorageOpenCache(uint64_t a1, const WebCore::ClientOrigin *a2, const WTF::StringImpl **a3, unsigned int *a4)
{
  WebKit::OriginStorageManager *v8;
  uint64_t v9;
  WTF::WorkQueue *v10;
  WebKit::CacheStorageManager *v11;
  uint64_t result;
  WTF::WorkQueue *v13;

  v8 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, a2);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(WTF::WorkQueue **)(a1 + 48);
  WTF::WorkQueue::ref(v10);
  v13 = v10;
  v11 = WebKit::OriginStorageManager::cacheStorageManager(v8, v9, (uint64_t)a2, (uint64_t *)&v13);
  WebKit::CacheStorageManager::openCache((uint64_t)v11, a3, a4);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

WTF::StringImpl *WebKit::NetworkStorageManager::cacheStorageRemoveCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12[4];
  int v13;

  v7 = WebKit::CacheStorageRegistry::cache(*(_QWORD *)(a1 + 136), a2, a3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        return WebKit::CacheStorageManager::removeCache(v9, a2, a3, a4);
    }
  }
  v12[0] = 4;
  v13 = 1;
  v11 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 16))(v11, v12);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkStorageManager::cacheStorageAllCaches(uint64_t a1, const WebCore::ClientOrigin *a2, void *a3, uint64_t *a4)
{
  WebKit::OriginStorageManager *v8;
  uint64_t v9;
  WTF::WorkQueue *v10;
  WebKit::CacheStorageManager *v11;
  uint64_t result;
  WTF::WorkQueue *v13;

  v8 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, a2);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(WTF::WorkQueue **)(a1 + 48);
  WTF::WorkQueue::ref(v10);
  v13 = v10;
  v11 = WebKit::OriginStorageManager::cacheStorageManager(v8, v9, (uint64_t)a2, (uint64_t *)&v13);
  WebKit::CacheStorageManager::allCaches((uint64_t)v11, a3, a4);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t *WebKit::NetworkStorageManager::cacheStorageReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t v8;

  result = (uint64_t *)WebKit::CacheStorageRegistry::cache(*(_QWORD *)(a1 + 136), a3, a4);
  if (result)
  {
    v8 = result[3];
    if (v8)
    {
      result = *(uint64_t **)(v8 + 8);
      if (result)
        return WebKit::CacheStorageManager::reference((uint64_t)result, *(_QWORD *)(a2 + 24), a3, a4);
    }
  }
  return result;
}

WebKit::CacheStorageCache *WebKit::NetworkStorageManager::cacheStorageDereference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::CacheStorageCache *result;
  uint64_t v8;

  result = (WebKit::CacheStorageCache *)WebKit::CacheStorageRegistry::cache(*(_QWORD *)(a1 + 136), a3, a4);
  if (result)
  {
    v8 = *((_QWORD *)result + 3);
    if (v8)
    {
      result = *(WebKit::CacheStorageCache **)(v8 + 8);
      if (result)
        return WebKit::CacheStorageManager::dereference((uint64_t)result, *(_QWORD *)(a2 + 24), a3, a4);
    }
  }
  return result;
}

WTF::WorkQueue *WebKit::NetworkStorageManager::lockCacheStorage(WebKit::NetworkStorageManager *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3)
{
  WebKit::OriginStorageManager *v6;
  uint64_t v7;
  WTF::WorkQueue *v8;
  WebKit::CacheStorageManager *v9;
  WTF::WorkQueue *result;
  WTF::WorkQueue *v11;
  char v12[24];
  uint64_t v13;

  v6 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)this, a3);
  v7 = *((_QWORD *)this + 17);
  v8 = (WTF::WorkQueue *)*((_QWORD *)this + 6);
  WTF::WorkQueue::ref(v8);
  v11 = v8;
  v9 = WebKit::OriginStorageManager::cacheStorageManager(v6, v7, (uint64_t)a3, (uint64_t *)&v11);
  v13 = *((_QWORD *)a2 + 3);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add((uint64_t *)v9 + 15, &v13, (uint64_t)v12);
  result = v11;
  v11 = 0;
  if (result)
    return (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t *WebKit::NetworkStorageManager::unlockCacheStorage(WebKit::NetworkStorageManager *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3)
{
  WebKit::OriginStorageManager *v4;
  uint64_t *result;

  v4 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)this, a3);
  result = (uint64_t *)*((_QWORD *)WebKit::OriginStorageManager::defaultBucket(v4) + 11);
  if (result)
    return WebKit::CacheStorageManager::unlockStorage((uint64_t)result, *((_QWORD *)a2 + 3));
  return result;
}

uint64_t WebKit::NetworkStorageManager::cacheStorageRetrieveRecords(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[16];
  int v11;
  char v12;

  v7 = WebKit::CacheStorageRegistry::cache(*(_QWORD *)(a1 + 136), a2, a3);
  if (v7)
    return WebKit::CacheStorageCache::retrieveRecords(v7, a4, a5);
  v10[0] = 4;
  v11 = 1;
  v9 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, v10);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v11 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C68C0[v11])(&v12, v10);
  return result;
}

WTF::StringImpl *WebKit::NetworkStorageManager::cacheStorageRemoveRecords(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  _BYTE v12[16];
  int v13;
  char v14;

  v9 = (_QWORD *)WebKit::CacheStorageRegistry::cache(*(_QWORD *)(a1 + 136), a2, a3);
  if (v9)
    return WebKit::CacheStorageCache::removeRecords(v9, a4, a5, a6);
  v12[0] = 4;
  v13 = 1;
  v11 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v12);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34C68D0[v13])(&v14, v12);
  return result;
}

uint64_t WebKit::NetworkStorageManager::cacheStoragePutRecords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  WTF::StringImpl *v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[16];
  int v11;
  char v12;

  v7 = (WTF::StringImpl *)WebKit::CacheStorageRegistry::cache(*(_QWORD *)(a1 + 136), a2, a3);
  if (v7)
    return WebKit::CacheStorageCache::putRecords(v7, a4, a5);
  v10[0] = 4;
  v11 = 1;
  v9 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, v10);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v11 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C68D0[v11])(&v12, v10);
  return result;
}

uint64_t WebKit::NetworkStorageManager::cacheStorageClearMemoryRepresentation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 80), a2);
  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
    v6 += 72 * *(unsigned int *)(v6 - 4);
  if (v6 != v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 64) + 8);
    if (v7)
      std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100]((WebKit::CacheStorageManager **)(v7 + 88), 0);
  }
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkStorageManager::cacheStorageRepresentation(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v4;
  WebCore::SecurityOriginData *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebKit::OriginStorageManager *v8;
  WTF::StringImpl *v9;
  WebKit::OriginStorageManager *v10;
  uint64_t v11;
  WTF::WorkQueue *v12;
  WebKit::CacheStorageManager *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  WTF::StringImpl *v48;
  char *v49;
  char *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  void *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const WTF::StringImpl *v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  WTF::StringImpl *v73[2];
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  char v79;
  WTF::WorkQueue *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  WTF::StringImpl *v88;

  v86 = 0;
  v87 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v85, (WebCore::SecurityOriginData **)a1);
  v5 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v85);
  v6 = 0;
  v76 = v5;
  v77 = v4;
  v7 = v85;
  if (v85)
    v6 = (WTF::StringImpl *)(v85 + ((unint64_t)*(unsigned int *)(v85 - 4) << 6));
  if (v6 != v5)
  {
    v72 = a2;
    while (1)
    {
      v8 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, v5);
      v9 = WebKit::OriginStorageManager::defaultBucket(v8);
      WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList(v9, 0x8000, 0, &v84);
      if (v84)
      {
        if (*(_DWORD *)(v84 - 12))
          break;
      }
LABEL_79:
      WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)a1, v5);
      if (v84)
        WTF::fastFree((WTF *)(v84 - 16), v58);
      v76 = (WTF::StringImpl *)((char *)v76 + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(&v76);
      v5 = v76;
      if (v76 == v6)
      {
        v7 = v85;
        a2 = v72;
        goto LABEL_89;
      }
    }
    WebCore::SecurityOriginData::toString(v5);
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)((char *)v5 + 32));
    v10 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, v5);
    v11 = *(_QWORD *)(a1 + 136);
    v12 = *(WTF::WorkQueue **)(a1 + 48);
    WTF::WorkQueue::ref(v12);
    v80 = v12;
    v13 = WebKit::OriginStorageManager::cacheStorageManager(v10, v11, (uint64_t)v5, (uint64_t *)&v80);
    result = (uint64_t)WebKit::CacheStorageManager::representationString(v13, &v81);
    v16 = v83;
    if (v83)
      v17 = *((_DWORD *)v83 + 1);
    else
      v17 = 0;
    v18 = v81;
    v19 = v82;
    if (v82)
    {
      v20 = *((_DWORD *)v82 + 1);
      if (v81)
        goto LABEL_11;
    }
    else
    {
      v20 = 0;
      if (v81)
      {
LABEL_11:
        v21 = *((_DWORD *)v81 + 1);
        if (v21 < 0)
          goto LABEL_113;
LABEL_12:
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (v22)
          goto LABEL_113;
        v22 = __OFADD__(v23, 16);
        v24 = v23 + 16;
        v25 = v22;
        if (v20 < 0)
          goto LABEL_113;
        if (v25)
          goto LABEL_113;
        v22 = __OFADD__(v20, v24);
        v26 = v20 + v24;
        if (v22)
          goto LABEL_113;
        v22 = __OFADD__(v26, 20);
        v27 = v26 + 20;
        v28 = v22;
        if (v17 < 0
          || v28
          || (v22 = __OFADD__(v17, v27), v29 = v17 + v27, v22)
          || (v30 = (v29 + 31), __OFADD__(v29, 31)))
        {
LABEL_113:
          __break(0xC471u);
          return result;
        }
        if ((!v83 || (*((_BYTE *)v83 + 16) & 4) != 0)
          && (!v82 || (*((_BYTE *)v82 + 16) & 4) != 0)
          && (!v81 || (*((_BYTE *)v81 + 16) & 4) != 0))
        {
          if (v29 != -31)
          {
            if ((v30 & 0x80000000) != 0)
              goto LABEL_113;
            result = WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
            v31 = v74;
            if (!v74)
              goto LABEL_113;
            *(_DWORD *)v74 = 2;
            *((_DWORD *)v31 + 1) = v30;
            *((_QWORD *)v31 + 1) = (char *)v31 + 20;
            *((_DWORD *)v31 + 4) = 4;
            qmemcpy((char *)v31 + 20, "\n{ \"origin\" : { \"topOrigin\" : \"", 31);
            v88 = v16;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v88, (char *)v31 + 51);
            v45 = (uint64_t)v88;
            if (v88)
              v45 = *((unsigned int *)v88 + 1);
            v46 = (char *)v31 + v45 + 51;
            *(_OWORD *)v46 = *(_OWORD *)"\", \"clientOrigin\": \"";
            *((_DWORD *)v46 + 4) = 572537378;
            v47 = v46 + 20;
            v73[0] = v19;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v73, v46 + 20);
            v48 = v73[0];
            if (v73[0])
              v48 = (WTF::StringImpl *)*((unsigned int *)v73[0] + 1);
            v49 = (char *)v48 + (_QWORD)v47;
            *(_OWORD *)v49 = *(_OWORD *)"\" }, \"caches\" : ";
            v50 = v49 + 16;
            v74 = v18;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v74, v49 + 16);
            v51 = v74;
            if (v74)
              v51 = (WTF::StringImpl *)*((unsigned int *)v74 + 1);
            *((_BYTE *)v51 + (_QWORD)v50) = 125;
            goto LABEL_59;
          }
        }
        else if (v29 != -31)
        {
          if (v30 > 0x7FFFFFEF)
            goto LABEL_113;
          result = WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20));
          v31 = v74;
          if (!v74)
            goto LABEL_113;
          *(_DWORD *)v74 = 2;
          *((_DWORD *)v31 + 1) = v30;
          *((_QWORD *)v31 + 1) = (char *)v31 + 20;
          *((_DWORD *)v31 + 4) = 0;
          v32 = 20;
          v33 = "\n{ \"origin\" : { \"topOrigin\" : \"";
          do
          {
            v34 = *(unsigned __int8 *)v33++;
            *(_WORD *)((char *)v31 + v32) = v34;
            v32 += 2;
          }
          while (v32 != 82);
          v88 = v16;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v88, (char *)v31 + 82);
          if (v88)
            v35 = *((unsigned int *)v88 + 1);
          else
            v35 = 0;
          v36 = 0;
          v37 = (uint64_t)v31 + 2 * v35 + 82;
          do
          {
            *(_WORD *)(v37 + 2 * v36) = aClientorigin[v36];
            ++v36;
          }
          while (v36 != 20);
          v38 = v37 + 40;
          v73[0] = v19;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v73, (char *)(v37 + 40));
          if (v73[0])
            v39 = *((unsigned int *)v73[0] + 1);
          else
            v39 = 0;
          v40 = 0;
          v41 = v38 + 2 * v39;
          v42 = (uint64_t)v31 + 2 * v35 + 2 * v39 + 122;
          do
          {
            *(_WORD *)(v42 + 2 * v40) = aCaches[v40];
            ++v40;
          }
          while (v40 != 16);
          v43 = v41 + 32;
          v74 = v18;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v74, (char *)(v41 + 32));
          v44 = v74;
          if (v74)
            v44 = (WTF::StringImpl *)*((unsigned int *)v74 + 1);
          *(_WORD *)(v43 + 2 * (_QWORD)v44) = 125;
          goto LABEL_59;
        }
        v31 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
LABEL_59:
        v74 = v31;
        LODWORD(v52) = HIDWORD(v87);
        if (HIDWORD(v87) == (_DWORD)v87)
        {
          v59 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v86, HIDWORD(v87) + 1, (unint64_t)&v74);
          v52 = HIDWORD(v87);
          v60 = (uint64_t)v86;
          v61 = *v59;
          *v59 = 0;
          *(_QWORD *)(v60 + 8 * v52) = v61;
        }
        else
        {
          v74 = 0;
          v86[HIDWORD(v87)] = (uint64_t)v31;
        }
        HIDWORD(v87) = v52 + 1;
        v53 = v74;
        v74 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v15);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = v81;
        v81 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v15);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = (uint64_t)v80;
        v80 = 0;
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 56))(v55);
        v56 = v82;
        v82 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v15);
          else
            *(_DWORD *)v56 -= 2;
        }
        v57 = v83;
        v83 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v15);
          else
            *(_DWORD *)v57 -= 2;
        }
        goto LABEL_79;
      }
    }
    v21 = 0;
    goto LABEL_12;
  }
LABEL_89:
  if (v7)
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v7, v4);
  v62 = 126 - 2 * __clz(HIDWORD(v87));
  if (HIDWORD(v87))
    v63 = (const WTF::StringImpl *)v62;
  else
    v63 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*,false>((uint64_t)v86, (WTF::StringImpl *)&v86[HIDWORD(v87)], v63, 1);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 1;
  v74 = (WTF::StringImpl *)"{ \"path\": \"";
  v75 = 12;
  v73[0] = (WTF::StringImpl *)"\", \"origins\": [";
  v73[1] = (WTF::StringImpl *)16;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v76, (uint64_t)&v74, (uint64_t *)(a1 + 160), (uint64_t)v73);
  v74 = (WTF::StringImpl *)"";
  v75 = 1;
  if (HIDWORD(v87))
  {
    v64 = v86;
    v65 = 8 * HIDWORD(v87);
    do
    {
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)&v76, (uint64_t)&v74, v64);
      v74 = (WTF::StringImpl *)",";
      v75 = 2;
      ++v64;
      v65 -= 8;
    }
    while (v65);
  }
  WTF::StringBuilder::append();
  v66 = v76;
  if (v76
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v76),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v76),
        (v66 = v76) != 0))
  {
    *(_DWORD *)v66 += 2;
  }
  v73[0] = v66;
  v67 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v67 + 16))(v67, v73);
  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v69 = v73[0];
  v73[0] = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v68);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = v77;
  v77 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v68);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = v76;
  v76 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v68);
    else
      *(_DWORD *)v71 -= 2;
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v86, v68);
}

unsigned __int8 *WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *result;
  WTF::WorkQueue *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::WorkQueue *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WTF::WorkQueue *v17;
  _BYTE v18[24];
  int v19;
  _BYTE v20[24];
  int v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 72))
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)*a3 + 16))();
  v15 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v16 = a1;
  v6 = *(WTF::WorkQueue **)(a1 + 48);
  WTF::WorkQueue::ref(v6);
  v17 = v6;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  v7 = *a3;
  *a3 = 0;
  v22 = v7;
  v8 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v8 = &off_1E34C7118;
  *(_QWORD *)(v8 + 8) = v15;
  *(_QWORD *)(v8 + 16) = v16;
  v9 = v17;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)(v8 + 24) = v9;
  *(_BYTE *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, (uint64_t)v18);
  *(_BYTE *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 64, (uint64_t)v20);
  v10 = v22;
  v22 = 0;
  *(_QWORD *)(v8 + 96) = v10;
  WTF::SuspendableWorkQueue::dispatch();
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v12 = v22;
  v22 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v21 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v21])(&v14, v20);
  v21 = -1;
  if (v19 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v19])(&v14, v18);
  v19 = -1;
  result = (unsigned __int8 *)v17;
  v17 = 0;
  if (result)
    result = (unsigned __int8 *)WTF::WorkQueue::deref((WTF::WorkQueue *)result);
  v13 = v16;
  v16 = 0;
  if (v13)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 16), v11);
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v12;

  IPC::Connection::connection(a1, &v12);
  if (!v12)
    return 2;
  v9 = IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>((uint64_t)v12, a2, a3, a4, a5);
  v10 = v12;
  v12 = 0;
  if (v10)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v10);
  return v9;
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 325;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::String const&,WebKit::BackgroundFetchChange>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::String const&,WebKit::BackgroundFetchChange>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E34C7140;
    v7[1] = a1;
    v7[2] = a1;
    v7[3] = v6;
    v8 = v7;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E34C7190;
    v7[1] = a1;
    v7[2] = a1;
    v7[3] = v6;
    v8 = v7;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  void *v6;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30[2];
  char v31;
  char v32;
  _QWORD v33[3];
  int v34;
  WTF::StringImpl *v35[6];

  v35[5] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 72))
  {
    LOBYTE(v30[0]) = 0;
    v31 = 0;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(a4, v30);
    if (v31)
      return WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v6);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
    WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v26, a2);
    v10 = *(_QWORD *)a3;
    v11 = *(_DWORD *)(a3 + 12);
    if (v11)
    {
      v12 = v10 + 72 * v11;
      do
      {
        WebCore::ServiceWorkerRegistrationKey::isolatedCopy();
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v10, (uint64_t)v33);
        v13 = v10 + 32;
        WTF::URL::operator=(v13, (WTF::StringImpl *)v35);
        v15 = v35[0];
        v35[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        if (v34 != -1)
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v34])(&v32, v33);
        v10 = v13 + 40;
      }
      while (v10 < v12);
      v10 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(a3 + 12);
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)a3 = 0;
    v17 = *(_DWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    v18 = *a4;
    *a4 = 0;
    v29 = v18;
    v19 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v19 = off_1E34C7230;
    *(_QWORD *)(v19 + 8) = a1;
    *(_QWORD *)(v19 + 16) = a1;
    v20 = v26;
    v26 = 0;
    *(_QWORD *)(v19 + 24) = v20;
    v21 = v27;
    v27 = 0;
    *(_QWORD *)(v19 + 32) = v21;
    v28[0] = 0;
    *(_QWORD *)(v19 + 40) = v10;
    v28[1] = 0;
    *(_DWORD *)(v19 + 48) = v17;
    *(_DWORD *)(v19 + 52) = v16;
    *(_QWORD *)(v19 + 56) = v18;
    v33[0] = v19;
    WTF::SuspendableWorkQueue::dispatch();
    v23 = v33[0];
    v33[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v29 = 0;
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v22);
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v24);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[2];
  char v9;
  _QWORD v10[2];
  char v11;

  v2 = *a1;
  *a1 = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0;
  v3 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    v4 = *a2;
    *a2 = 0;
    v9 = 1;
    v8[0] = 0;
    v10[0] = v4;
    v8[1] = 0;
    v5 = a2[1];
    a2[1] = 0;
    v10[1] = v5;
    v11 = 1;
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    v11 = 0;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v10);
  if (v11)
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
  if (v3)
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  int v11;
  char v12;
  uint64_t result;
  void *v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::computeHash<WebCore::ClientOrigin>(a3) & v7;
  v9 = (WebCore::SecurityOriginData *)(v6 + 96 * v8);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    v27 = a1;
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else if (WebCore::operator==())
      {
        result = WebCore::operator==();
        if ((_DWORD)result)
        {
          v25 = *a2;
          if (*a2)
            v26 = *(_DWORD *)(v25 - 4);
          else
            v26 = 0;
          a1 = v27;
          v24 = 0;
          v23 = v25 + 96 * v26;
          goto LABEL_22;
        }
      }
      v8 = (v8 + v11) & v7;
      v9 = (WebCore::SecurityOriginData *)(v6 + 96 * v8);
      ++v11;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    a1 = v27;
    if (v10)
    {
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      WTF::PairHashTraits<WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::emptyValue((_QWORD *)v10 + 8, v14);
      --*(_DWORD *)(*a2 - 16);
      v9 = v10;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9 + 32, a3 + 32);
  v28 = 0u;
  v29 = 0u;
  std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)v9 + 64, (uint64_t)&v28);
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v15);
  result = WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v16);
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_19:
      result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, (unsigned int *)v9);
      v9 = (WebCore::SecurityOriginData *)result;
      v19 = *a2;
      if (*a2)
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      else
        LODWORD(v22) = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_19;
  }
  v23 = v19 + 96 * v22;
  v24 = 1;
LABEL_22:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

unsigned int *WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(unsigned int *result, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  int v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = result;
  v4 = *((unsigned int *)a2 + 3);
  v5 = result[2];
  v6 = result[3];
  v7 = v4 + v6;
  if (v4 + v6 > v5)
  {
    v8 = v5 + (v5 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 > v7)
      v7 = v9;
    if (v7 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v10 = *(WTF **)result;
    v11 = 40 * v7;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * v7));
    v3[2] = (v11 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v3 = result;
    if ((_DWORD)v6)
    {
      v13 = result;
      v14 = 40 * v6;
      v15 = (unsigned int *)((char *)v10 + 24);
      do
      {
        *(_QWORD *)v13 = *((_QWORD *)v15 - 3);
        v16 = *((_QWORD *)v15 - 2);
        *((_QWORD *)v15 - 2) = 0;
        *(_QWORD *)((char *)v13 + 29) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *((_QWORD *)v13 + 3) = 0;
        *((_QWORD *)v13 + 1) = v16;
        v17 = *((_QWORD *)v15 - 1);
        *((_QWORD *)v15 - 1) = 0;
        *((_QWORD *)v13 + 2) = v17;
        LODWORD(v17) = *v15;
        *v15 = 0;
        v13[6] = v17;
        LODWORD(v17) = v15[1];
        v15[1] = 0;
        v13[7] = v17;
        LODWORD(v17) = v15[2];
        v15[2] = 0;
        v13[8] = v17;
        LOBYTE(v17) = *((_BYTE *)v15 + 12);
        *((_BYTE *)v15 + 12) = 0;
        *((_BYTE *)v13 + 36) = v17;
        v18 = (WTF *)*((_QWORD *)v15 - 1);
        if (v18)
          WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v18, (void *)*v15);
        result = (unsigned int *)*((_QWORD *)v15 - 2);
        *((_QWORD *)v15 - 2) = 0;
        if (result)
          result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
        v15 += 10;
        v13 += 10;
        v14 -= 40;
      }
      while (v14);
    }
    if (v10)
    {
      if (*(WTF **)v3 == v10)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      result = (unsigned int *)WTF::fastFree(v10, v12);
    }
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v4)
  {
    v19 = *a2;
    v20 = *a2 + 40 * v4;
    v21 = v3[3];
    do
    {
      v22 = *(_QWORD *)v3 + 40 * v21;
      *(_QWORD *)v22 = *(_QWORD *)v19;
      v23 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 8) = v23;
      *(_QWORD *)(v22 + 29) = 0;
      v24 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v22 + 16) = v24;
      LODWORD(v24) = *(_DWORD *)(v19 + 24);
      *(_DWORD *)(v19 + 24) = 0;
      *(_DWORD *)(v22 + 24) = v24;
      LODWORD(v24) = *(_DWORD *)(v19 + 28);
      *(_DWORD *)(v19 + 28) = 0;
      *(_DWORD *)(v22 + 28) = v24;
      LODWORD(v24) = *(_DWORD *)(v19 + 32);
      *(_DWORD *)(v19 + 32) = 0;
      *(_DWORD *)(v22 + 32) = v24;
      LOBYTE(v24) = *(_BYTE *)(v19 + 36);
      *(_BYTE *)(v19 + 36) = 0;
      *(_BYTE *)(v22 + 36) = v24;
      v21 = v3[3] + 1;
      v3[3] = v21;
      v19 += 40;
    }
    while (v19 != v20);
  }
  return result;
}

uint64_t WebKit::OriginQuotaManager::create@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x98);
  result = WebKit::OriginQuotaManager::OriginQuotaManager(v6, a1, a2);
  *a3 = result;
  return result;
}

_BYTE *WebKit::OriginQuotaManager::requestSpace(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a3;
  *a3 = 0;
  v7 = a2;
  v8 = v4;
  v9 = 0;
  WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::append((uint64_t)(a1 + 8), &v7);
  v5 = v8;
  v8 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WebKit::OriginQuotaManager::handleRequests(a1);
}

uint64_t WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(result + 24);
  if (!v4)
  {
    if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    result = WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::expandCapacity(result);
    v4 = *(_QWORD *)(v3 + 8);
  }
LABEL_10:
  v6 = (_QWORD *)(*(_QWORD *)(v3 + 16) + 24 * v4);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = 0;
  *v6 = v7;
  v6[1] = v8;
  v6[2] = a2[2];
  v9 = *(_QWORD *)(v3 + 8);
  if (v9 == *(unsigned int *)(v3 + 24) - 1)
    v10 = 0;
  else
    v10 = v9 + 1;
  *(_QWORD *)(v3 + 8) = v10;
  return result;
}

_BYTE *WebKit::OriginQuotaManager::handleRequests(_BYTE *this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (!this[64])
  {
    v1 = (uint64_t)this;
    v2 = this[72];
    this[72] = 1;
    while (1)
    {
      v3 = *(_QWORD *)(v1 + 8);
      if (v3 == *(_QWORD *)(v1 + 16))
      {
LABEL_30:
        *(_BYTE *)(v1 + 72) = v2;
        return this;
      }
      v4 = (unint64_t *)(*(_QWORD *)(v1 + 24) + 24 * v3);
      v5 = *v4;
      v6 = v4[1];
      v4[1] = 0;
      v7 = v4[2];
      v8 = *(_QWORD *)(v1 + 24) + 24 * v3;
      v9 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v3 = *(_QWORD *)(v1 + 8);
        v10 = *(unsigned __int8 *)(v1 + 64);
      }
      else
      {
        v10 = 0;
      }
      v11 = v3 == *(unsigned int *)(v1 + 32) - 1 ? 0 : v3 + 1;
      *(_QWORD *)(v1 + 8) = v11;
      *(_QWORD *)(v1 + 40) = v5;
      if (v10)
      {
        v12 = *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v1 + 48) = v6;
        if (v12)
        {
          this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          v13 = *(unsigned __int8 *)(v1 + 64);
          *(_QWORD *)(v1 + 56) = v7;
          if (!v13)
            goto LABEL_32;
          v5 = *(_QWORD *)(v1 + 40);
        }
        else
        {
          *(_QWORD *)(v1 + 56) = v7;
        }
      }
      else
      {
        *(_QWORD *)(v1 + 48) = v6;
        *(_QWORD *)(v1 + 56) = v7;
        *(_BYTE *)(v1 + 64) = 1;
      }
      this = (_BYTE *)WebKit::OriginQuotaManager::grantWithCurrentQuota((WebKit::OriginQuotaManager *)v1, v5);
      if ((_DWORD)this)
        break;
      if (!*(_QWORD *)(v1 + 136))
      {
        if (!*(_BYTE *)(v1 + 64))
          goto LABEL_32;
        v14 = *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v1 + 48) = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
        goto LABEL_25;
      }
      this = (_BYTE *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
      if (!*(_BYTE *)(v1 + 64) || (*(_QWORD *)(v1 + 56) = this, !*(_BYTE *)(v1 + 120)))
      {
LABEL_32:
        __break(1u);
        return this;
      }
      this = (_BYTE *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 16))(*(_QWORD *)(v1 + 136), this, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 40));
      v15 = *(unsigned __int8 *)(v1 + 64);
LABEL_29:
      if (v15)
        goto LABEL_30;
    }
    if (!*(_BYTE *)(v1 + 64))
      goto LABEL_32;
    v14 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 1);
LABEL_25:
    this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(unsigned __int8 *)(v1 + 64);
    if (*(_BYTE *)(v1 + 64))
    {
      this = *(_BYTE **)(v1 + 48);
      *(_QWORD *)(v1 + 48) = 0;
      if (this)
        this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
      v15 = 0;
      *(_BYTE *)(v1 + 64) = 0;
    }
    goto LABEL_29;
  }
  return this;
}

uint64_t WebKit::OriginQuotaManager::grantWithCurrentQuota(WebKit::OriginQuotaManager *this, unint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v4 = *((_QWORD *)this + 10);
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (!v5)
  {
    v7 = *((unsigned __int8 *)this + 120);
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
    *((_QWORD *)this + 14) = v8;
    *((_BYTE *)this + 120) = 1;
    v9 = *((_QWORD *)this + 11);
    if (!v7)
    {
      if (v9 <= v9 / 0xA * (v8 / (v9 / 0xA)) + v9 / 0xA)
        v9 = v9 / 0xA * (v8 / (v9 / 0xA)) + v9 / 0xA;
      *((_QWORD *)this + 11) = v9;
    }
    v5 = v9 >= v8;
    v10 = v9 - v8;
    if (!v5)
      v10 = 0;
    *((_QWORD *)this + 10) = v10;
    v5 = v10 >= a2;
    v6 = v10 - a2;
    if (!v5)
      return 0;
  }
  *((_QWORD *)this + 10) = v6;
  v12 = *((_QWORD *)this + 18);
  if (v12)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, a2);
  return 1;
}

unint64_t WebKit::OriginQuotaManager::reportedQuota(WebKit::OriginQuotaManager *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  double i;
  unint64_t *v8;

  v2 = (unint64_t *)((char *)this + 96);
  if (*((_QWORD *)this + 12))
  {
    v3 = WebKit::OriginQuotaManager::usage(this);
    v4 = *((_QWORD *)this + 11);
    v5 = *((_QWORD *)this + 12);
    v6 = (char *)this + 88;
    for (i = (double)v5; (double)v3 + (double)v3 > i && v5 < v4; i = (double)v5)
    {
      v5 = (unint64_t)(i + i);
      *v2 = v5;
    }
    if (v5 >= v4)
      v8 = (unint64_t *)v6;
    else
      v8 = v2;
  }
  else
  {
    v8 = (unint64_t *)((char *)this + 88);
  }
  return *v8;
}

uint64_t WebKit::IDBStorageConnectionToClient::identifier(WebKit::IDBStorageConnectionToClient *this)
{
  return *((_QWORD *)this + 2);
}

void WebKit::MemoryStorageArea::~MemoryStorageArea(WebKit::MemoryStorageArea *this, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v3;

  v3 = (WTF::StringImpl ***)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, a2);
  WebKit::StorageAreaBase::~StorageAreaBase(this, a2);
}

{
  WTF::StringImpl ***v3;
  WTF *v4;
  void *v5;

  v3 = (WTF::StringImpl ***)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, a2);
  WebKit::StorageAreaBase::~StorageAreaBase(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebKit::MemoryStorageArea::type(WebKit::MemoryStorageArea *this)
{
  return 1;
}

uint64_t WebKit::MemoryStorageArea::storageType(WebKit::MemoryStorageArea *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v4, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1 && *v4)
        WTF::fastFree((WTF *)(*v4 - 16), a2);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int **v8;
  void *v9;

  if (a2)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    v8 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, a2);
    WTF::fastFree((WTF *)v8, v9);
  }
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v9;
  char v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 40;
    do
    {
      if (*(_QWORD *)(v4 - 40) != -1)
      {
        std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v4 + 40), 0);
        v5 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, v4);
        *(_DWORD *)(v4 + 24) = -1;
        v6 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v6])(&v10, v4 - 32);
        *(_DWORD *)(v4 - 8) = -1;
        v7 = *(WTF::StringImpl **)(v4 - 40);
        *(_QWORD *)(v4 - 40) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v4 += 88;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEB58F8]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)(*((_QWORD *)this + 3) + 8) = 0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100](int a1, WebKit::StorageAreaBase *this)
{
  WTF::StringImpl ***v3;
  WTF *v4;
  void *v5;

  if (this)
  {
    v3 = (WTF::StringImpl ***)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v3)
      WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, this);
    WebKit::StorageAreaBase::~StorageAreaBase(this, this);
    WTF::fastFree(v4, v5);
  }
}

uint64_t std::make_unique[abi:sn180100]<WebKit::MemoryStorageArea,WebCore::ClientOrigin const&,WebKit::StorageAreaBase::StorageType>(WebKit::StorageAreaBase **a1, const WebCore::ClientOrigin *a2, _BYTE *a3)
{
  WebKit::StorageAreaBase *v6;
  WebKit::StorageAreaBase *v7;
  uint64_t result;

  v6 = (WebKit::StorageAreaBase *)WTF::fastMalloc((WTF *)0x80);
  LOBYTE(a3) = *a3;
  v7 = WebKit::StorageAreaBase::StorageAreaBase(v6, -1, a2);
  *(_QWORD *)v7 = off_1E34C67F8;
  result = WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v7 + 104));
  *((_BYTE *)v6 + 120) = (_BYTE)a3;
  *a1 = v6;
  return result;
}

WTF::StringImpl ***WTF::RefCounted<WebCore::StorageMap::Impl>::deref(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl **v3;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[1];
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    return (WTF::StringImpl ***)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (a2)
  {
    std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100](a2 + 1, 0);
    v4 = (WTF::StringImpl *)*a2;
    *a2 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::fastFree((WTF *)a2, v3);
  }
}

uint64_t std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEB2538]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

WTF **std::unique_ptr<WebKit::CacheStorageRegistry>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)(v3 + 24 * i + 8) != -1)
          {
            v6 = v3 + 24 * i;
            v7 = *(unsigned int **)(v6 + 16);
            *(_QWORD *)(v6 + 16) = 0;
            if (v7)
            {
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
              {
                atomic_store(1u, v7);
                WTF::fastFree((WTF *)v7, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t std::default_delete<WebKit::IDBStorageRegistry>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(unsigned int **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)(v10 + 16 * j) != -1)
        {
          v13 = v10 + 16 * j;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*(_QWORD *)this, a2);
  return WTF::fastFree(this, a2);
}

WTF **std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)(v3 + 16 * i) != -1)
          {
            v6 = v3 + 16 * i;
            v7 = *(unsigned int **)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            if (v7)
            {
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
              {
                atomic_store(1u, v7);
                WTF::fastFree((WTF *)v7, a2);
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 32;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v4 - 32));
      if ((v5 & 1) == 0)
      {
        std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100]((WebKit::OriginStorageManager **)(v4 + 32), 0);
        v6 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v6])(&v9, v4);
        *(_DWORD *)(v4 + 24) = -1;
        v7 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v7])(&v10, v4 - 32);
        *(_DWORD *)(v4 - 8) = -1;
      }
      v4 += 72;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100]((WebKit::OriginStorageManager **)(a1 + 64), 0);
  v2 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v2])(&v5, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

WebKit::OriginStorageManager *std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100](WebKit::OriginStorageManager **a1, WebKit::OriginStorageManager *a2)
{
  WebKit::OriginStorageManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::OriginStorageManager::~OriginStorageManager(result, a2);
    return (WebKit::OriginStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::allOf<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebKit::isEmptyOriginDirectory(WTF::String const&)::$_0>(WTF::StringImpl **a1, int a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  _BOOL8 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  WTF *v13;

  if (!a2)
    return 1;
  v4 = a1;
  v5 = &a1[a2];
  while (2)
  {
    v6 = *(_QWORD *)a3;
    v7 = *(_QWORD *)a3 != 0;
    if (*(_QWORD *)a3)
    {
      v8 = *(_DWORD *)(v6 - 8);
      v9 = *((_DWORD *)*v4 + 4);
      if (v9 >= 0x100)
        v10 = v9 >> 8;
      else
        v10 = WTF::StringImpl::hashSlowCase(*v4);
      for (i = 0; ; v10 = i + v12)
      {
        v12 = v10 & v8;
        v13 = *(WTF **)(v6 + 8 * (v10 & v8));
        if (v13 != (WTF *)-1)
        {
          if (!v13)
            return 0;
          if ((WTF::equal(v13, *v4, a3) & 1) != 0)
            break;
        }
        ++i;
      }
      if (++v4 != v5)
        continue;
    }
    break;
  }
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *,false>(uint64_t result, double *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  double *v19;
  unint64_t v20;
  double v21;
  double *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  unint64_t v28;
  double v29;
  double *v30;
  void *v31;
  BOOL v32;
  __int128 v33;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  unint64_t v38;
  double *v39;
  double v40;
  double *v41;
  double v42;
  unint64_t v43;
  double v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  void *v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  double v99;
  void *v100;
  char v101;
  _BYTE v102[24];
  int v103;
  __int128 v104;
  uint64_t v105;
  _QWORD v106[2];
  _BYTE v107[24];
  int v108;
  __int128 v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v7 = result;
  v113 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 3) <= *(double *)(v7 + 48))
          return result;
        v46 = v7;
        v47 = (uint64_t)(a2 - 9);
        return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v46, v47);
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7, v7 + 72, (uint64_t)(a2 - 9));
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7, v7 + 72, v7 + 144, (uint64_t)(a2 - 9));
      case 5:
        result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7, v7 + 72, v7 + 144, v7 + 216);
        if (*(a2 - 3) <= *(double *)(v7 + 264))
          return result;
        result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v7 + 216, (uint64_t)(a2 - 9));
        if (*(double *)(v7 + 264) <= *(double *)(v7 + 192))
          return result;
        result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v7 + 144, v7 + 216);
        if (*(double *)(v7 + 192) <= *(double *)(v7 + 120))
          return result;
        result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v7 + 72, v7 + 144);
        if (*(double *)(v7 + 120) <= *(double *)(v7 + 48))
          return result;
        v46 = v7;
        v47 = v7 + 72;
        return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v46, v47);
      default:
        if (v9 > 1727)
        {
          if (!a3)
          {
            if ((double *)v7 != a2)
            {
              v58 = (unint64_t)(v10 - 2) >> 1;
              v59 = v58;
              do
              {
                v60 = v59;
                if (v58 >= v59)
                {
                  v61 = (2 * v59) | 1;
                  v62 = v7 + 72 * v61;
                  if (2 * v59 + 2 < v10 && *(double *)(v7 + 72 * v61 + 48) > *(double *)(v62 + 120))
                  {
                    v62 += 72;
                    v61 = 2 * v59 + 2;
                  }
                  if (*(double *)(v62 + 48) <= *(double *)(v7 + 72 * v59 + 48))
                  {
                    v63 = v7 + 72 * v59;
                    v107[0] = 0;
                    v108 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v107, v63);
                    v64 = v7 + 72 * v60;
                    v65 = *(_OWORD *)(v64 + 32);
                    v110 = *(double *)(v64 + 48);
                    v109 = v65;
                    v66 = *(_QWORD *)(v64 + 56);
                    *(_QWORD *)(v64 + 56) = 0;
                    v111 = v66;
                    LODWORD(v66) = *(_DWORD *)(v64 + 64);
                    *(_DWORD *)(v64 + 64) = 0;
                    LODWORD(v112) = v66;
                    LODWORD(v66) = *(_DWORD *)(v64 + 68);
                    *(_DWORD *)(v64 + 68) = 0;
                    HIDWORD(v112) = v66;
                    do
                    {
                      v67 = v62;
                      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v63, v62);
                      if (v58 < v61)
                        break;
                      v68 = (2 * v61) | 1;
                      v62 = v7 + 72 * v68;
                      if (2 * v61 + 2 < v10 && *(double *)(v7 + 72 * v68 + 48) > *(double *)(v62 + 120))
                      {
                        v62 += 72;
                        v68 = 2 * v61 + 2;
                      }
                      v63 = v67;
                      v61 = v68;
                    }
                    while (*(double *)(v62 + 48) <= v110);
                    std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v67, (uint64_t)v107);
                    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v69);
                    if (v108 != -1)
                      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v108])(v102, v107);
                  }
                }
                v59 = v60 - 1;
              }
              while (v60);
              v70 = v9 / 0x48uLL;
              do
              {
                v102[0] = 0;
                v103 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v102, v7);
                v71 = 0;
                v72 = *(_OWORD *)(v7 + 32);
                v105 = *(_QWORD *)(v7 + 48);
                v104 = v72;
                v73 = *(_QWORD *)(v7 + 56);
                *(_QWORD *)(v7 + 56) = 0;
                v106[0] = v73;
                *(_QWORD *)&v72 = *(_QWORD *)(v7 + 64);
                *(_QWORD *)(v7 + 64) = 0;
                v74 = v7;
                v106[1] = v72;
                do
                {
                  v75 = v74;
                  v76 = v71 + 1;
                  v74 += 72 * (v71 + 1);
                  v77 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v78 = v77 + 2;
                  if (v78 < v70 && *(double *)(v75 + 72 * v76 + 48) > *(double *)(v74 + 120))
                  {
                    v74 += 72;
                    v71 = v78;
                  }
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v75, v74);
                }
                while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                a2 -= 9;
                if ((double *)v74 == a2)
                {
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v74, (uint64_t)v102);
                }
                else
                {
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v74, (uint64_t)a2);
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100]((uint64_t)a2, (uint64_t)v102);
                  v80 = v74 - v7 + 72;
                  if (v80 >= 73)
                  {
                    v81 = (v80 / 0x48uLL - 2) >> 1;
                    if (*(double *)(v7 + 72 * v81 + 48) > *(double *)(v74 + 48))
                    {
                      v107[0] = 0;
                      v108 = -1;
                      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v107, v74);
                      v82 = *(_OWORD *)(v74 + 32);
                      v110 = *(double *)(v74 + 48);
                      v109 = v82;
                      v83 = *(_QWORD *)(v74 + 56);
                      *(_QWORD *)(v74 + 56) = 0;
                      v111 = v83;
                      LODWORD(v83) = *(_DWORD *)(v74 + 64);
                      *(_DWORD *)(v74 + 64) = 0;
                      LODWORD(v112) = v83;
                      LODWORD(v83) = *(_DWORD *)(v74 + 68);
                      *(_DWORD *)(v74 + 68) = 0;
                      HIDWORD(v112) = v83;
                      do
                      {
                        v84 = v74;
                        v74 = v7 + 72 * v81;
                        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v84, v74);
                        if (!v81)
                          break;
                        v81 = (v81 - 1) >> 1;
                      }
                      while (*(double *)(v7 + 72 * v81 + 48) > v110);
                      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v74, (uint64_t)v107);
                      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v85);
                      if (v108 != -1)
                        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v108])(&v101, v107);
                    }
                  }
                }
                result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v106, v79);
                if (v103 != -1)
                  result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v103])(v107, v102);
              }
              while (v70-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v7 + 72 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 < 0x2401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v12, v7, (uint64_t)(a2 - 9));
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7, v12, (uint64_t)(a2 - 9));
            v13 = 9 * v11;
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7 + 72, v7 + 8 * v13 - 72, (uint64_t)(a2 - 18));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7 + 144, v7 + 72 + 8 * v13, (uint64_t)(a2 - 27));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v7 + 8 * v13 - 72, v12, v7 + 72 + 8 * v13);
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v7, v12);
          }
          --a3;
          if ((a4 & 1) == 0 && *(double *)(v7 - 24) <= *(double *)(v7 + 48))
          {
            v107[0] = 0;
            v108 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v107, v7);
            v33 = *(_OWORD *)(v7 + 32);
            v34 = *(_QWORD *)(v7 + 56);
            v110 = *(double *)(v7 + 48);
            v109 = v33;
            *(_QWORD *)(v7 + 56) = 0;
            v111 = v34;
            *(_QWORD *)&v33 = *(_QWORD *)(v7 + 64);
            *(_QWORD *)(v7 + 64) = 0;
            v112 = v33;
            v35 = (double *)(v7 + 72);
            if (v110 <= *(a2 - 3))
            {
              do
              {
                v8 = (unint64_t)v35;
                if (v35 >= a2)
                  break;
                v37 = v35[6];
                v35 += 9;
              }
              while (v110 <= v37);
            }
            else
            {
              do
              {
                if (v35 == a2)
                  goto LABEL_139;
                v36 = v35[6];
                v35 += 9;
              }
              while (v110 <= v36);
              v8 = (unint64_t)(v35 - 9);
            }
            v38 = (unint64_t)a2;
            if (v8 < (unint64_t)a2)
            {
              v39 = a2;
              while (v39 != (double *)v7)
              {
                v38 = (unint64_t)(v39 - 9);
                v40 = *(v39 - 3);
                v39 -= 9;
                if (v110 <= v40)
                  goto LABEL_52;
              }
LABEL_139:
              __break(1u);
            }
LABEL_52:
            if (v8 < v38)
            {
              do
              {
                std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v8, v38);
                v41 = (double *)(v8 + 72);
                do
                {
                  if (v41 == a2)
                    goto LABEL_139;
                  v42 = v41[6];
                  v41 += 9;
                }
                while (v110 <= v42);
                v8 = (unint64_t)(v41 - 9);
                do
                {
                  if (v38 == v7)
                    goto LABEL_139;
                  v43 = v38 - 72;
                  v44 = *(double *)(v38 - 24);
                  v38 -= 72;
                }
                while (v110 > v44);
                v38 = v43;
              }
              while (v8 < v43);
            }
            if (v8 - 72 != v7)
              std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v7, v8 - 72);
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v8 - 72, (uint64_t)v107);
            result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v45);
            if (v108 != -1)
              result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v108])(v102, v107);
            a4 = 0;
            continue;
          }
          v107[0] = 0;
          v108 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v107, v7);
          v14 = 0;
          v15 = *(_OWORD *)(v7 + 32);
          v16 = *(_QWORD *)(v7 + 56);
          v110 = *(double *)(v7 + 48);
          v109 = v15;
          *(_QWORD *)(v7 + 56) = 0;
          v111 = v16;
          *(_QWORD *)&v15 = *(_QWORD *)(v7 + 64);
          *(_QWORD *)(v7 + 64) = 0;
          v112 = v15;
          do
          {
            if ((double *)(v7 + v14 + 72) == a2)
              goto LABEL_139;
            v17 = *(double *)(v7 + v14 + 120);
            v14 += 72;
          }
          while (v17 > v110);
          v18 = v7 + v14;
          v19 = a2;
          if (v14 != 72)
          {
            while (v19 != (double *)v7)
            {
              v20 = (unint64_t)(v19 - 9);
              v21 = *(v19 - 3);
              v19 -= 9;
              if (v21 > v110)
                goto LABEL_23;
            }
            goto LABEL_139;
          }
          v22 = a2;
          while (v18 < (unint64_t)v22)
          {
            v20 = (unint64_t)(v22 - 9);
            v23 = *(v22 - 3);
            v22 -= 9;
            if (v23 > v110)
              goto LABEL_23;
          }
          v20 = (unint64_t)v22;
LABEL_23:
          if (v18 >= v20)
          {
            v30 = (double *)(v18 - 72);
          }
          else
          {
            v24 = v18;
            v25 = v20;
            do
            {
              std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v24, v25);
              v26 = (double *)(v24 + 72);
              do
              {
                if (v26 == a2)
                  goto LABEL_139;
                v27 = v26[6];
                v26 += 9;
              }
              while (v27 > v110);
              v24 = (unint64_t)(v26 - 9);
              do
              {
                if (v25 == v7)
                  goto LABEL_139;
                v28 = v25 - 72;
                v29 = *(double *)(v25 - 24);
                v25 -= 72;
              }
              while (v29 <= v110);
              v25 = v28;
            }
            while (v24 < v28);
            v30 = v26 - 18;
          }
          if (v30 != (double *)v7)
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v7, (uint64_t)v30);
          std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100]((uint64_t)v30, (uint64_t)v107);
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v31);
          if (v108 != -1)
            ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v108])(v102, v107);
          if (v18 < v20)
          {
LABEL_41:
            result = std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *,false>(v7, v30, a3, a4 & 1);
            a4 = 0;
            v8 = (unint64_t)(v30 + 9);
            continue;
          }
          v32 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((double *)v7, v30);
          v8 = (unint64_t)(v30 + 9);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(v30 + 9, a2);
          if (!(_DWORD)result)
          {
            if (!v32)
              goto LABEL_41;
            continue;
          }
          a2 = v30;
          if (v32)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((double *)v7 != a2)
          {
            v48 = v7 + 72;
            if ((double *)(v7 + 72) != a2)
            {
              v49 = 0;
              v50 = v7;
              do
              {
                v51 = v48;
                if (*(double *)(v50 + 120) > *(double *)(v50 + 48))
                {
                  v107[0] = 0;
                  v108 = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v107, v48);
                  v109 = *(_OWORD *)(v50 + 104);
                  v52 = *(_QWORD *)(v50 + 128);
                  v110 = *(double *)(v50 + 120);
                  v111 = v52;
                  v53 = *(_QWORD *)(v50 + 136);
                  *(_QWORD *)(v50 + 128) = 0;
                  *(_QWORD *)(v50 + 136) = 0;
                  v54 = v49;
                  v112 = v53;
                  while (1)
                  {
                    std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v7 + v54 + 72, v7 + v54);
                    if (!v54)
                      break;
                    v55 = *(double *)(v7 + v54 - 24);
                    v54 -= 72;
                    if (v110 <= v55)
                    {
                      v56 = v7 + v54 + 72;
                      goto LABEL_88;
                    }
                  }
                  v56 = v7;
LABEL_88:
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v56, (uint64_t)v107);
                  result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v57);
                  if (v108 != -1)
                    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v108])(v102, v107);
                }
                v48 = v51 + 72;
                v49 += 72;
                v50 = v51;
              }
              while ((double *)(v51 + 72) != a2);
            }
          }
        }
        else if ((double *)v7 != a2)
        {
          v87 = v7 + 72;
          if ((double *)(v7 + 72) != a2)
          {
            v88 = 0;
            v89 = -2;
            v90 = 1;
            v91 = v7;
            do
            {
              v92 = v7 + 72 * v88;
              v88 = v90;
              if (*(double *)(v91 + 120) > *(double *)(v92 + 48))
              {
                v107[0] = 0;
                v108 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v107, v87);
                v109 = *(_OWORD *)(v91 + 104);
                v93 = *(_QWORD *)(v91 + 128);
                v110 = *(double *)(v91 + 120);
                v111 = v93;
                v94 = *(_QWORD *)(v91 + 136);
                *(_QWORD *)(v91 + 128) = 0;
                *(_QWORD *)(v91 + 136) = 0;
                v95 = v89;
                v96 = v91;
                v112 = v94;
                do
                {
                  std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v96 + 72, v96);
                  if (__CFADD__(v95++, 1))
                    goto LABEL_139;
                  v98 = v96 - 72;
                  v99 = *(double *)(v96 - 24);
                  v96 -= 72;
                }
                while (v110 > v99);
                std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v98 + 72, (uint64_t)v107);
                result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v100);
                if (v108 != -1)
                  result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v108])(v102, v107);
              }
              v91 += 72;
              v90 = v88 + 1;
              v87 = v7 + 72 * (v88 + 1);
              --v89;
            }
            while ((double *)v87 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;

  v5 = result;
  v6 = *(double *)(a2 + 48);
  v7 = *(double *)(a3 + 48);
  if (v6 > *(double *)(result + 48))
  {
    if (v7 <= v6)
    {
      result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](result, a2);
      if (*(double *)(a3 + 48) <= *(double *)(a2 + 48))
        return result;
      result = a2;
    }
    v8 = a3;
    return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](result, v8);
  }
  if (v7 > v6)
  {
    result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a2, a3);
    if (*(double *)(a2 + 48) > *(double *)(v5 + 48))
    {
      result = v5;
      v8 = a2;
      return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](result, v8);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(double *a1, double *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void *v17;
  char v18;
  _BYTE v19[24];
  int v20;
  __int128 v21;
  double v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v4 = 0x8E38E38E38E38E39 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 3) > a1[6])
      {
        v6 = (uint64_t)(a2 - 9);
        v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a2 - 9));
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a2 - 9));
      return 1;
    case 5uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
      if (*(a2 - 3) > a1[33])
      {
        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100]((uint64_t)(a1 + 27), (uint64_t)(a2 - 9));
        if (a1[33] > a1[24])
        {
          std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100]((uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
          if (a1[24] > a1[15])
          {
            std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100]((uint64_t)(a1 + 9), (uint64_t)(a1 + 18));
            if (a1[15] > a1[6])
            {
              v7 = (uint64_t)a1;
              v6 = (uint64_t)(a1 + 9);
LABEL_4:
              std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 18;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18));
      v9 = (uint64_t)(a1 + 27);
      if (a1 + 27 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v9 + 48) > v8[6])
    {
      v19[0] = 0;
      v20 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, v9);
      v21 = *(_OWORD *)(v9 + 32);
      v12 = *(_QWORD *)(v9 + 56);
      v22 = *(double *)(v9 + 48);
      v23[0] = v12;
      v13 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      v14 = v10;
      v23[1] = v13;
      while (1)
      {
        std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100]((uint64_t)a1 + v14 + 216, (uint64_t)a1 + v14 + 144);
        if (v14 == -144)
          break;
        v15 = *(double *)((char *)a1 + v14 + 120);
        v14 -= 72;
        if (v22 <= v15)
        {
          v16 = (uint64_t)a1 + v14 + 216;
          goto LABEL_13;
        }
      }
      v16 = (uint64_t)a1;
LABEL_13:
      std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](v16, (uint64_t)v19);
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v17);
      if (v20 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v20])(&v18, v19);
      if (++v11 == 8)
        return v9 + 72 == (_QWORD)a2;
    }
    v8 = (double *)v9;
    v10 += 72;
    v9 += 72;
    if ((double *)v9 == a2)
      return 1;
  }
}

uint64_t std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  LOBYTE(v16) = 0;
  LODWORD(v18[0]) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v16, a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v16);
  if (LODWORD(v18[0]) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[LODWORD(v18[0])])(&v15, &v16);
  v6 = *(_QWORD *)(a1 + 56);
  v4 = (_QWORD *)(a1 + 56);
  v5 = v6;
  v16 = *(_OWORD *)(v4 - 3);
  v17 = *(v4 - 1);
  v7 = v4[1];
  *v4 = 0;
  v4[1] = 0;
  v8 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v4 - 3) = *(_OWORD *)(a2 + 32);
  *(v4 - 1) = v8;
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, (_DWORD *)(a2 + 56));
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  v10 = *(unsigned int *)(a2 + 68);
  v11 = *(unsigned int **)(a2 + 56);
  if ((_DWORD)v10)
  {
    v12 = 32 * v10;
    do
    {
      v13 = v11[6];
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v13])(&v15, v11);
      v11[6] = -1;
      v11 += 8;
      v12 -= 32;
    }
    while (v12);
    v11 = *(unsigned int **)(a2 + 56);
  }
  if (v11)
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
    WTF::fastFree((WTF *)v11, v9);
  }
  v18[0] = 0;
  v18[1] = 0;
  *(_QWORD *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 64) = v7;
  return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v9);
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *>(a1, a2, a3);
  if (*(double *)(a4 + 48) > *(double *)(a3 + 48))
  {
    result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a3, a4);
    if (*(double *)(a3 + 48) > *(double *)(a2 + 48))
    {
      result = std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a2, a3);
      if (*(double *)(a2 + 48) > *(double *)(a1 + 48))
        return std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::swap[abi:sn180100](a1, a2);
    }
  }
  return result;
}

uint64_t std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = 32 * v5;
    do
    {
      v8 = *(unsigned int *)(v6 + 24);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v8])(&v10, v6);
      *(_DWORD *)(v6 + 24) = -1;
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 56, (_DWORD *)(a2 + 56));
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit22FileSystemStorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN6WebKit22FileSystemStorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit30FileSystemSyncAccessHandleInfoENS8_22FileSystemStorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_()
{
  JUMPOUT(0x19AEAC4F0);
}

uint64_t *WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v27 = v8 + 16 * v21;
        goto LABEL_29;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)v17 = -1;
      v17[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  v15[1] = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(v6, v15);
      v15 = result;
      v22 = *v6;
      if (*v6)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  v27 = v22 + 16 * v25;
  v26 = 1;
LABEL_29:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  void *v24;
  int isNull;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char v39;
  char v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 40 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (!v3)
  {
    v11 = 0;
    if (!v2)
      return v11;
    goto LABEL_34;
  }
  v10 = 0;
  v11 = 0;
  v12 = v3;
  v36 = v3;
  do
  {
    v13 = (unsigned int *)(v2 + 40 * v10);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
    if ((v14 & 1) == 0)
    {
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10)))
      {
        v15 = *(_QWORD *)(v2 + 40 * v10 + 32);
        if (v15)
          WTF::fastFree((WTF *)(v15 - 16), v7);
        v16 = v13[6];
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v16])(&v39, v2 + 40 * v10);
        v13[6] = -1;
      }
      else
      {
        v17 = *a1;
        v18 = v11;
        if (*a1)
          v19 = *(_DWORD *)(v17 - 8);
        else
          v19 = 0;
        v42 = -1640531527;
        v43 = 0;
        v44 = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v42, v2 + 40 * v10);
        v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
        v21 = 0;
        do
        {
          v22 = v20 & v19;
          v23 = (unsigned int *)(v17 + 40 * (v20 & v19));
          isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23);
          v20 = ++v21 + v22;
        }
        while (!isNull);
        v26 = v17 + 40 * v22;
        v29 = *(_QWORD *)(v26 + 32);
        v28 = (_QWORD *)(v26 + 32);
        v27 = v29;
        v12 = v36;
        if (v29)
          WTF::fastFree((WTF *)(v27 - 16), v24);
        v30 = v23[6];
        v11 = v18;
        if ((_DWORD)v30 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v30])(&v40, v23);
        *(_BYTE *)v23 = 0;
        v23[6] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, v2 + 40 * v10);
        v31 = v2 + 40 * v10;
        *v28 = 0;
        v32 = *(_QWORD *)(v31 + 32);
        *(_QWORD *)(v31 + 32) = 0;
        *v28 = v32;
        v33 = *(_QWORD *)(v31 + 32);
        if (v33)
          WTF::fastFree((WTF *)(v33 - 16), v7);
        v34 = v13[6];
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v34])(&v41, v2 + 40 * v10);
        v13[6] = -1;
        if (v13 == a2)
          v11 = v23;
      }
    }
    ++v10;
  }
  while (v10 != v12);
  if (v2)
LABEL_34:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

_OWORD *WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  _OWORD *v11;
  _DWORD *v12;
  _OWORD *v13;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_DWORD *)v6;
    do
    {
      if (*v12 <= 0xFFFFFFFD)
      {
        v13 = (_OWORD *)WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::lookupForReinsert(a1, v12);
        *v13 = *(_OWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 4;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *((_DWORD *)v5 - 2) = -1;
      *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::lookupForReinsert(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(v2 + 16 * v7) != -1);
  return v2 + 16 * v7;
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[24];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = WTF::fastMalloc((WTF *)(32 * v2));
      *(_DWORD *)(v4 + 8) = v2;
      *(_QWORD *)v4 = result;
      v5 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v5)
      {
        v6 = *a2;
        v7 = 32 * v5;
        do
        {
          WebCore::SecurityOriginData::isolatedCopy();
          v8 = *(_QWORD *)v4 + 32 * *(unsigned int *)(v4 + 12);
          *(_BYTE *)v8 = 0;
          *(_DWORD *)(v8 + 24) = -1;
          result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8, (uint64_t)v10);
          ++*(_DWORD *)(v4 + 12);
          if (v11 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v11])(&v9, v10);
          v6 += 32;
          v7 -= 32;
        }
        while (v7);
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *(_QWORD *)v4 = result;
      v5 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v5)
      {
        v6 = *a2;
        v7 = 8 * v5;
        do
        {
          WebCore::RegistrableDomain::isolatedCopy(&v12);
          v9 = *((unsigned int *)v4 + 3);
          v10 = *(_QWORD *)v4;
          v11 = v12;
          v12 = 0;
          *(_QWORD *)(v10 + 8 * v9) = v11;
          *((_DWORD *)v4 + 3) = v9 + 1;
          result = v12;
          v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
            else
              *(_DWORD *)result -= 2;
          }
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl **)-1 && *v4)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v4, a2);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*,false>(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3, char a4)
{
  const WTF::StringImpl *v4;
  const WTF::StringImpl **v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const WTF::StringImpl **v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  WTF **v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl **v20;
  const WTF::StringImpl **v21;
  WTF *v22;
  WTF *v23;
  const WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  WTF **v26;
  const WTF::StringImpl **v27;
  WTF *v28;
  WTF **v29;
  WTF *v30;
  WTF *v31;
  const WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  BOOL v34;
  const WTF::StringImpl *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  const WTF::StringImpl **v38;
  const WTF::StringImpl *v39;
  const WTF::StringImpl **v40;
  const WTF::StringImpl *v41;
  const WTF::StringImpl *v42;
  const WTF::StringImpl **v43;
  const WTF::StringImpl *v44;
  const WTF::StringImpl *v45;
  uint64_t *v46;
  const WTF::StringImpl *v47;
  const WTF::StringImpl **v48;
  WTF **v49;
  const WTF::StringImpl *v50;
  const WTF::StringImpl *v51;
  WTF *v52;
  const WTF::StringImpl *v53;
  const WTF::StringImpl *v54;
  WTF *v55;
  const WTF::StringImpl *v56;
  WTF *v57;
  const WTF::StringImpl *v58;
  const WTF::StringImpl *v59;
  WTF **v60;
  BOOL v62;
  uint64_t v63;
  const WTF::StringImpl **v64;
  const WTF::StringImpl *v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  uint64_t *v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  WTF **v74;
  WTF::StringImpl **v75;
  const WTF::StringImpl *v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  const WTF::StringImpl *v83;
  WTF::StringImpl **v84;
  WTF **v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  unint64_t v91;
  WTF **v92;
  const WTF::StringImpl *v93;
  uint64_t *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  uint64_t *v103;
  const WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  const WTF::StringImpl *v107;
  int64_t v108;
  int64_t v110;

  v4 = a3;
  v6 = (const WTF::StringImpl **)result;
LABEL_2:
  v7 = (WTF::StringImpl *)((char *)a2 - 8);
  v8 = (WTF::StringImpl *)((char *)a2 - 16);
  v9 = v6;
  while (2)
  {
    v6 = v9;
    v10 = a2 - (WTF::StringImpl *)v9;
    v11 = (a2 - (WTF::StringImpl *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = WTF::codePointCompare(*((WTF **)a2 - 1), *v6, a3);
        if ((result & 0x80000000) != 0)
        {
          v47 = *v6;
          *v6 = (const WTF::StringImpl *)*((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v47;
        }
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6, v6 + 1, v7);
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6, v6 + 1, (const WTF::StringImpl *)(v6 + 2), (WTF **)v7);
      case 5:
        v48 = v6 + 2;
        v49 = v6 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6, v6 + 1, (const WTF::StringImpl *)(v6 + 2), v6 + 3);
        result = WTF::codePointCompare(*((WTF **)a2 - 1), v6[3], v50);
        if ((result & 0x80000000) != 0)
        {
          v52 = *v49;
          *v49 = (WTF *)*((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v52;
          result = WTF::codePointCompare(*v49, *v48, v51);
          if ((result & 0x80000000) != 0)
          {
            v54 = *v48;
            v55 = *v49;
            *v48 = *v49;
            *v49 = v54;
            result = WTF::codePointCompare(v55, v6[1], v53);
            if ((result & 0x80000000) != 0)
            {
              v58 = v6[1];
              v57 = v6[2];
              v59 = *v6;
              v6[1] = v57;
              v6[2] = v58;
              result = WTF::codePointCompare(v57, v59, v56);
              if ((result & 0x80000000) != 0)
                *(int8x16_t *)v6 = vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v60 = v6 + 1;
          v62 = v6 == (const WTF::StringImpl **)a2 || v60 == (WTF **)a2;
          if ((a4 & 1) != 0)
          {
            if (!v62)
            {
              v63 = 0;
              v64 = v6;
              do
              {
                v65 = *v64;
                v64 = v60;
                result = WTF::codePointCompare(*v60, v65, a3);
                if ((result & 0x80000000) != 0)
                {
                  v66 = *v60;
                  *v60 = 0;
                  v67 = v63;
                  while (1)
                  {
                    WTF::String::operator=((const WTF::StringImpl **)((char *)v6 + v67 + 8), (WTF::StringImpl *)((char *)v6 + v67));
                    if (!v67)
                      break;
                    v69 = WTF::codePointCompare(v66, *(const WTF::StringImpl **)((char *)v6 + v67 - 8), a3);
                    v67 -= 8;
                    if ((v69 & 0x80000000) == 0)
                    {
                      v70 = (uint64_t *)((char *)v6 + v67 + 8);
                      goto LABEL_94;
                    }
                  }
                  v70 = (uint64_t *)v6;
LABEL_94:
                  result = *v70;
                  *v70 = (uint64_t)v66;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v68);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
                v60 = v64 + 1;
                v63 += 8;
              }
              while (v64 + 1 != (const WTF::StringImpl **)a2);
            }
          }
          else if (!v62)
          {
            v96 = 0;
            v97 = -1;
            v98 = 1;
            while (1)
            {
              v99 = v6[v96];
              v96 = v98;
              result = WTF::codePointCompare(*v60, v99, a3);
              if ((result & 0x80000000) != 0)
                break;
LABEL_153:
              v98 = v96 + 1;
              ++v60;
              --v97;
              if (v60 == (WTF **)a2)
                return result;
            }
            v100 = *v60;
            *v60 = 0;
            v101 = v97;
            v102 = v60;
            while (1)
            {
              v103 = (uint64_t *)(v102 - 1);
              result = (uint64_t)WTF::String::operator=(v102, (WTF::StringImpl *)(v102 - 1));
              if (!v101)
                break;
              v105 = WTF::codePointCompare(v100, *(v102 - 2), v104);
              ++v101;
              --v102;
              if ((v105 & 0x80000000) == 0)
              {
                result = *v103;
                *v103 = (uint64_t)v100;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v106);
                  else
                    *(_DWORD *)result -= 2;
                }
                goto LABEL_153;
              }
            }
LABEL_155:
            __break(1u);
          }
          return result;
        }
        if (!v4)
        {
          if (v6 == (const WTF::StringImpl **)a2)
            return result;
          v71 = (unint64_t)(v11 - 2) >> 1;
          v110 = v71;
          do
          {
            v72 = v71;
            if (v110 >= v71)
            {
              v73 = (2 * v71) | 1;
              v74 = &v6[v73];
              if (2 * v71 + 2 < v11 && (int)WTF::codePointCompare(*v74, v74[1], a3) < 0)
              {
                ++v74;
                v73 = 2 * v72 + 2;
              }
              v75 = &v6[v72];
              if ((WTF::codePointCompare(*v74, *v75, a3) & 0x80000000) == 0)
              {
                v108 = v72;
                v76 = *v75;
                *v75 = 0;
                do
                {
                  v77 = v74;
                  WTF::String::operator=(v75, (WTF::StringImpl *)v74);
                  if (v110 < v73)
                    break;
                  v79 = (2 * v73) | 1;
                  v74 = &v6[v79];
                  if (2 * v73 + 2 < v11 && (int)WTF::codePointCompare(*v74, v74[1], a3) < 0)
                  {
                    ++v74;
                    v79 = 2 * v73 + 2;
                  }
                  v75 = v77;
                  v73 = v79;
                }
                while ((WTF::codePointCompare(*v74, v76, a3) & 0x80000000) == 0);
                v80 = *v77;
                *v77 = v76;
                v72 = v108;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                    WTF::StringImpl::destroy(v80, v78);
                  else
                    *(_DWORD *)v80 -= 2;
                }
              }
            }
            v71 = v72 - 1;
          }
          while (v72);
          v81 = (unint64_t)v10 >> 3;
          while (2)
          {
            v82 = 0;
            v83 = *v6;
            *v6 = 0;
            v84 = v6;
            do
            {
              v85 = &v84[v82 + 1];
              v86 = (2 * v82) | 1;
              v87 = 2 * v82 + 2;
              if (v87 < v81 && (int)WTF::codePointCompare(*v85, v84[v82 + 2], a3) < 0)
              {
                ++v85;
                v86 = v87;
              }
              WTF::String::operator=(v84, (WTF::StringImpl *)v85);
              v84 = v85;
              v82 = v86;
            }
            while (v86 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
            a2 = (WTF::StringImpl *)((char *)a2 - 8);
            if (v85 == (WTF **)a2)
            {
              result = (uint64_t)*v85;
              *v85 = v83;
              if (result)
                goto LABEL_137;
            }
            else
            {
              WTF::String::operator=(v85, a2);
              result = *(_QWORD *)a2;
              *(_QWORD *)a2 = v83;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v89);
                else
                  *(_DWORD *)result -= 2;
              }
              v90 = (char *)(v85 + 1) - (char *)v6;
              if (v90 >= 9)
              {
                v91 = (((unint64_t)v90 >> 3) - 2) >> 1;
                v92 = &v6[v91];
                result = WTF::codePointCompare(*v92, *v85, a3);
                if ((result & 0x80000000) != 0)
                {
                  v93 = *v85;
                  *v85 = 0;
                  do
                  {
                    v94 = (uint64_t *)v92;
                    WTF::String::operator=(v85, (WTF::StringImpl *)v92);
                    if (!v91)
                      break;
                    v91 = (v91 - 1) >> 1;
                    v92 = &v6[v91];
                    v85 = (WTF **)v94;
                  }
                  while ((WTF::codePointCompare(*v92, v93, a3) & 0x80000000) != 0);
                  result = *v94;
                  *v94 = (uint64_t)v93;
                  if (result)
                  {
LABEL_137:
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v88);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
              }
            }
            if (v81-- <= 2)
              return result;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v13, v6, v7);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6, v13, v7);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6 + 1, v13 - 1, v8);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6 + 2, &v6[v12 + 1], (WTF::StringImpl *)((char *)a2 - 24));
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v13 - 1, v13, (const WTF::StringImpl *)&v6[v12 + 1]);
          v15 = *v6;
          *v6 = *v13;
          *v13 = v15;
        }
        v4 = (const WTF::StringImpl *)((char *)v4 - 1);
        if ((a4 & 1) == 0)
        {
          result = WTF::codePointCompare(*(v6 - 1), *v6, v14);
          if ((result & 0x80000000) == 0)
          {
            v36 = *v6;
            *v6 = 0;
            result = WTF::codePointCompare(v36, *(const WTF::StringImpl **)v7, v14);
            v38 = v6 + 1;
            if ((result & 0x80000000) != 0)
            {
              do
              {
                if (v38 == (const WTF::StringImpl **)a2)
                  goto LABEL_155;
                v39 = *v38++;
                result = WTF::codePointCompare(v36, v39, a3);
              }
              while ((result & 0x80000000) == 0);
              v9 = v38 - 1;
            }
            else
            {
              do
              {
                v9 = v38;
                if (v38 >= (const WTF::StringImpl **)a2)
                  break;
                ++v38;
                result = WTF::codePointCompare(v36, *v9, a3);
              }
              while ((result & 0x80000000) == 0);
            }
            v40 = (const WTF::StringImpl **)a2;
            if (v9 < (const WTF::StringImpl **)a2)
            {
              v40 = (const WTF::StringImpl **)a2;
              while (v40 != v6)
              {
                v41 = *--v40;
                result = WTF::codePointCompare(v36, v41, a3);
                if ((result & 0x80000000) == 0)
                  goto LABEL_60;
              }
              goto LABEL_155;
            }
LABEL_60:
            if (v9 < v40)
            {
              v42 = *v9;
              *v9 = *v40;
              v43 = v9 + 1;
              *v40 = v42;
              while (v43 != (const WTF::StringImpl **)a2)
              {
                v44 = *v43++;
                result = WTF::codePointCompare(v36, v44, a3);
                if ((result & 0x80000000) != 0)
                {
                  v9 = v43 - 1;
                  while (v40 != v6)
                  {
                    v45 = *--v40;
                    result = WTF::codePointCompare(v36, v45, a3);
                    if ((result & 0x80000000) == 0)
                      goto LABEL_60;
                  }
                  goto LABEL_155;
                }
              }
              goto LABEL_155;
            }
            v46 = (uint64_t *)(v9 - 1);
            if (v9 - 1 != v6)
              WTF::String::operator=(v6, (WTF::StringImpl *)(v9 - 1));
            a4 = 0;
            result = *v46;
            *v46 = (uint64_t)v36;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v37);
                a4 = 0;
              }
              else
              {
                a4 = 0;
                *(_DWORD *)result -= 2;
              }
            }
            continue;
          }
        }
        v16 = 0;
        v17 = *v6;
        *v6 = 0;
        do
        {
          v18 = &v6[v16 + 1];
          if (v18 == (WTF **)a2)
            goto LABEL_155;
          result = WTF::codePointCompare(*v18, v17, v14);
          ++v16;
        }
        while ((result & 0x80000000) != 0);
        v20 = &v6[v16];
        v21 = (const WTF::StringImpl **)a2;
        if (v16 != 1)
        {
          while (v21 != v6)
          {
            v22 = *--v21;
            result = WTF::codePointCompare(v22, v17, v14);
            if ((result & 0x80000000) != 0)
              goto LABEL_21;
          }
          goto LABEL_155;
        }
        v21 = (const WTF::StringImpl **)a2;
        do
        {
          if (v20 >= v21)
            break;
          v23 = *--v21;
          result = WTF::codePointCompare(v23, v17, v14);
        }
        while ((result & 0x80000000) == 0);
LABEL_21:
        if (v20 >= v21)
        {
          v32 = v20 - 1;
        }
        else
        {
          v107 = v4;
          v24 = v8;
          v25 = v7;
          v26 = &v6[v16];
          v27 = v21;
          do
          {
            v28 = *v26;
            *v26 = *v27;
            *v27 = v28;
            v29 = v26 + 1;
            do
            {
              if (v29 == (WTF **)a2)
                goto LABEL_155;
              v30 = *v29++;
              result = WTF::codePointCompare(v30, v17, v14);
            }
            while ((result & 0x80000000) != 0);
            v26 = v29 - 1;
            do
            {
              if (v27 == v6)
                goto LABEL_155;
              v31 = *--v27;
              result = WTF::codePointCompare(v31, v17, v14);
            }
            while ((result & 0x80000000) == 0);
          }
          while (v26 < v27);
          v32 = v29 - 2;
          v7 = v25;
          v8 = v24;
          v4 = v107;
        }
        if (v32 != v6)
          WTF::String::operator=(v6, (WTF::StringImpl *)v32);
        v33 = *v32;
        *v32 = v17;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v19);
          else
            *(_DWORD *)v33 -= 2;
        }
        if (v20 < v21)
        {
LABEL_41:
          result = std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*,false>(v6, v32, v4, a4 & 1);
          a4 = 0;
          v9 = v32 + 1;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v6, v32, v14);
        v9 = v32 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(v32 + 1, (const WTF::StringImpl **)a2, v35);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_41;
        }
        a2 = (WTF::StringImpl *)v32;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3)
{
  int v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF *v13;

  v6 = WTF::codePointCompare(*a2, *a1, a3);
  result = WTF::codePointCompare(*(WTF **)a3, *a2, v7);
  if (v6 < 0)
  {
    v12 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *(const WTF::StringImpl **)a3;
      *(_QWORD *)a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      result = WTF::codePointCompare(*(WTF **)a3, v12, v9);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a2;
        *a2 = *(WTF **)a3;
        *(_QWORD *)a3 = v13;
      }
    }
  }
  else if ((result & 0x80000000) != 0)
  {
    v10 = *a2;
    *a2 = *(WTF **)a3;
    *(_QWORD *)a3 = v10;
    result = WTF::codePointCompare(*a2, *a1, v9);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl **v19;
  WTF **v20;
  const WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  WTF *v23;
  const WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  WTF *v26;
  const WTF::StringImpl *v27;
  WTF *v28;
  const WTF::StringImpl *v29;
  const WTF::StringImpl *v30;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a2 - 1);
      return 1;
    case 5:
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3);
      if ((WTF::codePointCompare(*(a2 - 1), a1[3], v21) & 0x80000000) != 0)
      {
        v23 = *v20;
        *v20 = *(a2 - 1);
        *(a2 - 1) = v23;
        if ((WTF::codePointCompare(*v20, *v19, v22) & 0x80000000) != 0)
        {
          v25 = *v19;
          v26 = *v20;
          *v19 = *v20;
          *v20 = v25;
          if ((WTF::codePointCompare(v26, a1[1], v24) & 0x80000000) != 0)
          {
            v29 = a1[1];
            v28 = a1[2];
            v30 = *a1;
            a1[1] = v28;
            a1[2] = v29;
            if ((WTF::codePointCompare(v28, v30, v27) & 0x80000000) != 0)
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      v13 = *v10;
      *v10 = 0;
      v14 = v11;
      while (1)
      {
        WTF::String::operator=((const WTF::StringImpl **)((char *)a1 + v14 + 24), (WTF::StringImpl *)((char *)a1 + v14 + 16));
        if (v14 == -16)
          break;
        v16 = WTF::codePointCompare(v13, *(const WTF::StringImpl **)((char *)a1 + v14 + 8), v9);
        v14 -= 8;
        if ((v16 & 0x80000000) == 0)
        {
          v17 = (const WTF::StringImpl **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      v18 = *v17;
      *v17 = v13;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v8 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4)
{
  const WTF::StringImpl *v8;
  uint64_t result;
  const WTF::StringImpl *v10;
  WTF *v11;
  const WTF::StringImpl *v12;
  WTF *v13;
  const WTF::StringImpl *v14;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::cacheStorageRepresentation(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &,WTF::String*>(a1, a2, a3);
  result = WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v8);
  if ((result & 0x80000000) != 0)
  {
    v11 = *(WTF **)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v11;
    result = WTF::codePointCompare(*(WTF **)a3, *a2, v10);
    if ((result & 0x80000000) != 0)
    {
      v13 = *a2;
      *a2 = *(WTF **)a3;
      *(_QWORD *)a3 = v13;
      result = WTF::codePointCompare(*a2, *a1, v12);
      if ((result & 0x80000000) != 0)
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(WebCore::SecurityOriginData *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  char v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)this;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v4);
      if ((v5 & 1) == 0)
      {
        WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v4 + 20), a2);
        WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v4 + 16), v6);
        v7 = v4[14];
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v7])(&v10, v4 + 8);
        v4[14] = -1;
        v8 = v4[6];
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v8])(&v11, v4);
        v4[6] = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::SecurityOriginData *)((char *)this - 16), a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v29 = v27 + 1;
          v28 = (WTF::StringImpl *)v27[1];
          v27[1] = 0;
          if (v28)
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v29, v28);
          *v27 = *v13;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (WTF::StringImpl **)(v30 + 8);
          *v31 = 0;
          *v29 = v32;
          v10 = *v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v31, v10);
          if (v13 == a3)
            v12 = v27;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(WTF::StringImpl **)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v5 = 0;
  }
  if (v5 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v5 = (WTF::StringImpl *)a2[1];
  v3 = a2 + 1;
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)v3, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v14);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = (WTF::StringImpl **)(v15 + 16 * v20);
          *v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          v21[1] = *(WTF::StringImpl **)(v6 + 16 * v11 + 8);
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  int v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 16 * (v7 & v5));
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF *WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  uint64_t v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return *(WTF **)(v3 + 16 * v10 + 8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF *WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      WTF::fastFree((WTF *)(v3 - 16), a2);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void IPC::Connection::send<Messages::WebIDBConnectionToServer::DidGetRecord>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  IPC::Encoder *v22;

  IPC::Connection::connection(a1, &v21);
  v3 = (uint64_t)v21;
  if (v21)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1740;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v22 = (IPC::Encoder *)v4;
    v5 = *a2;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, v5);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, v5 + 104);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
    v7 = v22;
    v22 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      v11 = *v10;
      if (__ldaxr(*v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v11);
LABEL_9:
      v13 = *((_QWORD *)v11 + 1);
      v14 = v13 - 1;
      *((_QWORD *)v11 + 1) = v13 - 1;
      if (v13 == 1)
      {
        v20 = *((_QWORD *)v11 + 2);
        v16 = *((_QWORD *)v11 + 3);
        *((_QWORD *)v11 + 3) = 0;
        v15 = v20 == 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      v17 = __ldxr(v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, v11))
        {
          if (v14)
            return;
LABEL_17:
          v18 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v18 = off_1E34ACA48;
          *(_QWORD *)(v18 + 8) = v11;
          *(_QWORD *)(v18 + 16) = v16;
          *(_BYTE *)(v18 + 24) = v15;
          v22 = (IPC::Encoder *)v18;
          WTF::ensureOnMainRunLoop();
          v19 = v22;
          v22 = 0;
          if (v19)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v19 + 8))(v19);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14)
        return;
      goto LABEL_17;
    }
  }
}

void IPC::Connection::send<Messages::WebIDBConnectionToServer::DidGetAllRecords>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  IPC::Encoder *v22;

  IPC::Connection::connection(a1, &v21);
  v3 = (uint64_t)v21;
  if (v21)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1738;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v22 = (IPC::Encoder *)v4;
    v5 = *a2;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, v5);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, v5 + 104);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
    v7 = v22;
    v22 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      v11 = *v10;
      if (__ldaxr(*v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v11);
LABEL_9:
      v13 = *((_QWORD *)v11 + 1);
      v14 = v13 - 1;
      *((_QWORD *)v11 + 1) = v13 - 1;
      if (v13 == 1)
      {
        v20 = *((_QWORD *)v11 + 2);
        v16 = *((_QWORD *)v11 + 3);
        *((_QWORD *)v11 + 3) = 0;
        v15 = v20 == 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      v17 = __ldxr(v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, v11))
        {
          if (v14)
            return;
LABEL_17:
          v18 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v18 = off_1E34ACA48;
          *(_QWORD *)(v18 + 8) = v11;
          *(_QWORD *)(v18 + 16) = v16;
          *(_BYTE *)(v18 + 24) = v15;
          v22 = (IPC::Encoder *)v18;
          WTF::ensureOnMainRunLoop();
          v19 = v22;
          v22 = 0;
          if (v19)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v19 + 8))(v19);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14)
        return;
      goto LABEL_17;
    }
  }
}

void IPC::Connection::send<Messages::WebIDBConnectionToServer::DidOpenCursor>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  IPC::Encoder *v22;

  IPC::Connection::connection(a1, &v21);
  v3 = (uint64_t)v21;
  if (v21)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1742;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v22 = (IPC::Encoder *)v4;
    v5 = *a2;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, v5);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, v5 + 104);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
    v7 = v22;
    v22 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      v11 = *v10;
      if (__ldaxr(*v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v11);
LABEL_9:
      v13 = *((_QWORD *)v11 + 1);
      v14 = v13 - 1;
      *((_QWORD *)v11 + 1) = v13 - 1;
      if (v13 == 1)
      {
        v20 = *((_QWORD *)v11 + 2);
        v16 = *((_QWORD *)v11 + 3);
        *((_QWORD *)v11 + 3) = 0;
        v15 = v20 == 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      v17 = __ldxr(v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, v11))
        {
          if (v14)
            return;
LABEL_17:
          v18 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v18 = off_1E34ACA48;
          *(_QWORD *)(v18 + 8) = v11;
          *(_QWORD *)(v18 + 16) = v16;
          *(_BYTE *)(v18 + 24) = v15;
          v22 = (IPC::Encoder *)v18;
          WTF::ensureOnMainRunLoop();
          v19 = v22;
          v22 = 0;
          if (v19)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v19 + 8))(v19);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14)
        return;
      goto LABEL_17;
    }
  }
}

void IPC::Connection::send<Messages::WebIDBConnectionToServer::DidIterateCursor>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  IPC::Encoder *v22;

  IPC::Connection::connection(a1, &v21);
  v3 = (uint64_t)v21;
  if (v21)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1741;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v22 = (IPC::Encoder *)v4;
    v5 = *a2;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, v5);
    IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, v5 + 104);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
    v7 = v22;
    v22 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      v11 = *v10;
      if (__ldaxr(*v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v11);
LABEL_9:
      v13 = *((_QWORD *)v11 + 1);
      v14 = v13 - 1;
      *((_QWORD *)v11 + 1) = v13 - 1;
      if (v13 == 1)
      {
        v20 = *((_QWORD *)v11 + 2);
        v16 = *((_QWORD *)v11 + 3);
        *((_QWORD *)v11 + 3) = 0;
        v15 = v20 == 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      v17 = __ldxr(v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, v11))
        {
          if (v14)
            return;
LABEL_17:
          v18 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v18 = off_1E34ACA48;
          *(_QWORD *)(v18 + 8) = v11;
          *(_QWORD *)(v18 + 16) = v16;
          *(_BYTE *)(v18 + 24) = v15;
          v22 = (IPC::Encoder *)v18;
          WTF::ensureOnMainRunLoop();
          v19 = v22;
          v22 = 0;
          if (v19)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v19 + 8))(v19);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14)
        return;
      goto LABEL_17;
    }
  }
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::IDBStorageManager::idbStorageOriginDirectory(WTF::String const&,WebCore::ClientOrigin const&)::$_0,WTF::String,WTF::String const&>::call(int a1, WebCore::IDBServer::SQLiteIDBBackingStore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebCore::IDBServer::SQLiteIDBBackingStore::decodeDatabaseName(this, this);
  WebCore::SQLiteFileSystem::computeHashForFileName();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  int v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::computeHash<WebCore::ClientOrigin>(a3) & v7;
  v9 = (WebCore::SecurityOriginData *)(v6 + (v8 << 6));
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else if (WebCore::operator==())
      {
        result = WebCore::operator==();
        if ((_DWORD)result)
        {
          v22 = *a2;
          if (*a2)
            v23 = *(unsigned int *)(v22 - 4);
          else
            v23 = 0;
          v21 = 0;
          v20 = v22 + (v23 << 6);
          goto LABEL_22;
        }
      }
      v8 = ((_DWORD)v8 + v11) & v7;
      v9 = (WebCore::SecurityOriginData *)(v6 + (v8 << 6));
      ++v11;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    if (v10)
    {
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v9 = v10;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v9, a3);
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v9 + 32, a3 + 32);
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 <= 2 * v18)
    {
LABEL_19:
      result = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, (uint64_t)v9);
      v9 = (WebCore::SecurityOriginData *)result;
      v16 = *a2;
      if (*a2)
        v19 = *(unsigned int *)(v16 - 4);
      else
        v19 = 0;
    }
  }
  else if (3 * v19 <= 4 * v18)
  {
    goto LABEL_19;
  }
  v20 = v16 + (v19 << 6);
  v21 = 1;
LABEL_22:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::IDBStorageManager::migrateOriginData(WTF::String const&,WTF::String const&)::$_0,WTF::String,WTF::String const&>::call(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

_QWORD *WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin(_QWORD **a1)
{
  _QWORD *result;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((_DWORD *)result - 1);
  v3 = &result[11 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[11 * v2];
  if (v2)
  {
    v4 = 88 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 11;
      v4 -= 88;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(88 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 96);
    do
    {
      *(v10 - 5) = 0;
      *(v10 - 4) = 0;
      *((_DWORD *)v10 - 4) = 0;
      *(v10 - 3) = 0;
      *((_BYTE *)v10 - 8) = 0;
      *((_OWORD *)v10 - 5) = 0uLL;
      *((_OWORD *)v10 - 4) = 0uLL;
      *((_DWORD *)v10 - 12) = 0;
      *v10 = 0;
      v10 += 11;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 0;
    v5 = v5;
    v35 = v5;
    do
    {
      v13 = v4 + 88 * v11;
      if (*(_QWORD *)v13 != -1)
      {
        if (*(_QWORD *)v13)
        {
          v38 = v12;
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>(v4 + 88 * v11);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = v17 + 88 * (v19 & v18);
            v19 = ++v20 + (v19 & v18);
          }
          while (*(_QWORD *)v22);
          v23 = (uint64_t *)(v17 + 88 * v21 + 80);
          std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100](v23, 0);
          v25 = *(unsigned int *)(v22 + 64);
          if ((_DWORD)v25 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v25])(&v43, v22 + 40);
          *(_DWORD *)(v22 + 64) = -1;
          v26 = *(unsigned int *)(v22 + 32);
          if ((_DWORD)v26 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v26])(&v44, v22 + 8);
          *(_DWORD *)(v22 + 32) = -1;
          v27 = *(WTF::StringImpl **)v22;
          *(_QWORD *)v22 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v24);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v22 = v28;
          *(_BYTE *)(v22 + 8) = 0;
          *(_DWORD *)(v22 + 32) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v22 + 8, v13 + 8);
          *(_BYTE *)(v22 + 40) = 0;
          *(_DWORD *)(v22 + 64) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v22 + 40, v13 + 40);
          *(_BYTE *)(v22 + 72) = *(_BYTE *)(v13 + 72);
          v29 = (uint64_t *)(v4 + 88 * v11);
          v30 = v29[10];
          v29 += 10;
          *v29 = 0;
          *v23 = v30;
          std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100](v29, 0);
          v31 = *(unsigned int *)(v13 + 64);
          if ((_DWORD)v31 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v31])(&v41, v13 + 40);
          *(_DWORD *)(v13 + 64) = -1;
          v32 = *(unsigned int *)(v13 + 32);
          v12 = v38;
          v5 = v35;
          if ((_DWORD)v32 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v32])(&v42, v13 + 8);
          *(_DWORD *)(v13 + 32) = -1;
          v33 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v8);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v13 == a3)
            v12 = v22;
        }
        else
        {
          std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v4 + 88 * v11 + 80), 0);
          v14 = *(unsigned int *)(v13 + 64);
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v14])(&v39, v13 + 40);
          *(_DWORD *)(v13 + 64) = -1;
          v15 = *(unsigned int *)(v13 + 32);
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v15])(&v40, v13 + 8);
          *(_DWORD *)(v13 + 32) = -1;
          v16 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v8);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::computeHash<WebCore::IDBDatabaseIdentifier>(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v5;
  __int16 v6;
  char v7;

  v5 = -1640531527;
  v6 = 0;
  v7 = 0;
  v2 = a1 + 8;
  v3 = *(unsigned __int8 *)(a1 + 72);
  WTF::add(&v5, (uint64_t *)a1);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v5, v2);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v5, a1 + 40);
  v5 = ((v5 + v3) ^ ((v5 + v3) << 16)) + (((v5 + v3) ^ ((v5 + v3) << 16)) >> 11);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v5);
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v14;
  char v15;

  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v14, a2 + 40);
  *(_DWORD *)(a2 + 64) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v15, a2 + 8);
  *(_DWORD *)(a2 + 32) = -1;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)a2 = -1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  result = std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(a2 + 80), 0);
  ++*(_DWORD *)(*a1 - 16);
  v8 = *a1;
  if (*a1)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *a1;
  if (*a1)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::rehash(a1, v12 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>,WebCore::IDBDatabaseIdentifier>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  const WTF::StringImpl *v7;
  int i;
  unsigned int v9;
  _QWORD *v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>(a2);
  for (i = 0; ; v6 = ++i + v9)
  {
    v9 = v6 & v5;
    v10 = (_QWORD *)(v2 + 88 * (v6 & v5));
    if (*v10 == -1)
      continue;
    if (!*v10)
      break;
    if ((WebCore::operator==(v2 + 88 * v9, a2, v7) & 1) != 0)
      return (uint64_t)v10;
  }
  if (!*a1)
    return 0;
  return *a1 + 88 * *(unsigned int *)(*a1 - 4);
}

unint64_t WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF::StringImpl **)result;
    v5 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * *(unsigned int *)(result + 12));
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t *result;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
    goto LABEL_3;
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 16 * v23);
          v26 = (WTF *)v25[1];
          v25[1] = 0;
          if (v26)
            std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v26, v9);
          *v25 = *v12;
          v27 = v4 + 16 * v10;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v25[1] = v28;
          v29 = *(WTF **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v29, v9);
          if (v12 == a2)
            v11 = v25;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
            std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v15, v9);
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

WebCore::IDBResourceIdentifier *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(a1, v3);
}

WebCore::IDBResourceIdentifier *WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  WebCore::IDBResourceIdentifier *result;
  unint64_t v8;
  WebCore::IDBResourceIdentifier *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  _OWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  __int16 v38;
  char v39;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (WebCore::IDBResourceIdentifier *)WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = result;
  v10 = (char *)result + 16;
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)((char *)result + 32);
    do
    {
      result = (WebCore::IDBResourceIdentifier *)WebCore::IDBResourceIdentifier::emptyValue(result);
      *(v12 - 2) = result;
      *(v12 - 1) = v8;
      *v12 = 0;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  *a1 = (uint64_t)v10;
  *((_DWORD *)v9 + 3) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = v5;
    while (1)
    {
      v15 = (unint64_t *)(v4 + 24 * v13);
      v8 = *v15;
      if (*v15 != -1)
      {
        v16 = v15[1];
        if (v16 | v8)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v37 = -1640531527;
          v38 = 0;
          v39 = 0;
          WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v37, v8, v16);
          v23 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
          v24 = 0;
          do
          {
            v25 = v23 & v18;
            v26 = (_OWORD *)(v17 + 24 * (v23 & v18));
            v23 = ++v24 + (v23 & v18);
          }
          while (*v26 != 0);
          v27 = v17 + 24 * v25;
          v30 = *(unsigned int **)(v27 + 16);
          v29 = (_QWORD *)(v27 + 16);
          v28 = v30;
          *v29 = 0;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v28);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v28));
            if (!v32)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, (void *)v8);
            }
          }
          *v26 = *(_OWORD *)v15;
          v33 = v4 + 24 * v13;
          v34 = *(_QWORD *)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          *v29 = v34;
          v20 = *(unsigned int **)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          if (!v20)
            goto LABEL_28;
          do
          {
            v35 = __ldaxr(v20);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v20));
          if (v36)
            goto LABEL_28;
        }
        else
        {
          v19 = v4 + 24 * v13;
          v20 = *(unsigned int **)(v19 + 16);
          *(_QWORD *)(v19 + 16) = 0;
          if (!v20)
            goto LABEL_28;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (v22)
            goto LABEL_28;
        }
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, (void *)v8);
      }
LABEL_28:
      if (++v13 == v14)
        return (WebCore::IDBResourceIdentifier *)WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
    }
  }
  if (v4)
    return (WebCore::IDBResourceIdentifier *)WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
  return result;
}

uint64_t WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  char v11;
  char v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    v5 = *(_QWORD *)a1 + 32;
    do
    {
      v6 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v7])(&v11, v5);
      *(_DWORD *)(v5 + 24) = -1;
      v8 = *(unsigned int *)(v5 - 8);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v8])(&v12, v5 - 32);
      *(_DWORD *)(v5 - 8) = -1;
      v5 += 72;
      v4 -= 72;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>::~KeyValuePair(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  WTF::StringImpl *v4;

  v3 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v3 = *(WTF::StringImpl **)a1;
  v4 = qword_1ECE72A50;
  if (qword_1ECE72A50)
    v5 = *(_DWORD *)(qword_1ECE72A50 - 8);
  else
    v5 = 0;
  v6 = *((_DWORD *)v3 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v3);
  v8 = 0;
  do
  {
    v9 = v7 & v5;
    v10 = (WTF::StringImpl **)(v4 + 24 * (v7 & v5));
    v7 = ++v8 + (v7 & v5);
  }
  while (*v10);
  v11 = v4 + 24 * v9;
  v14 = *(unsigned __int8 **)(v11 + 8);
  v13 = (_QWORD *)(v11 + 8);
  v12 = v14;
  *v13 = 0;
  if (v14)
  {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
    v16 = *v10;
    *v10 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  else
  {
    *v10 = 0;
  }
  v17 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  *v10 = v17;
  *v13 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(v4 + 24 * v9 + 16) = v18;
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C6940;
  WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C6940;
  WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD **v17;
  uint64_t v18;
  const WTF::String *v19;
  uint64_t Salt;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  _QWORD *v25;
  _DWORD *v26;
  WTF::FileSystemImpl *VersionDirectoryIfNeeded;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;

  v1 = result[2];
  if (v1)
  {
    v2 = result;
    v3 = result[1];
    result = (_QWORD *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v30, v1, result[3]);
    v4 = v30;
    if (v30)
    {
      *(_QWORD *)(v3 + 176) = v2[9];
      v5 = v2[10];
      *(_BYTE *)(v3 + 200) = *((_BYTE *)v2 + 88);
      *(_QWORD *)(v3 + 192) = v5;
      v6 = v2[12];
      *(_BYTE *)(v3 + 216) = *((_BYTE *)v2 + 104);
      *(_QWORD *)(v3 + 208) = v6;
      v7 = v2[14];
      *(_BYTE *)(v3 + 232) = *((_BYTE *)v2 + 120);
      *(_QWORD *)(v3 + 224) = v7;
      v8 = v2[16];
      *(_BYTE *)(v3 + 248) = *((_BYTE *)v2 + 136);
      *(_QWORD *)(v3 + 240) = v8;
      *(_QWORD *)(v3 + 344) = 0x40F5180000000000;
      WebKit::NetworkStorageManager::setStorageSiteValidationEnabledInternal(v3, (WTF::StringImpl *)*((unsigned __int8 *)v2 + 145));
      v9 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v9 = 0;
      v29 = 0;
      std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100]((WTF **)(v3 + 112), v9);
      std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100](&v29, 0);
      v10 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v10 = 0;
      v29 = 0;
      std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100]((WTF **)(v3 + 120), v10);
      std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100](&v29, 0);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      v12[1] = 0;
      v12[2] = 0;
      *v12 = 0;
      v13 = *(WTF **)(v3 + 128);
      *(_QWORD *)(v3 + 128) = v12;
      if (v13)
        std::default_delete<WebKit::IDBStorageRegistry>::operator()[abi:sn180100](v13, v11);
      v14 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v14 = 0;
      v29 = 0;
      std::unique_ptr<WebKit::CacheStorageRegistry>::reset[abi:sn180100]((WTF **)(v3 + 136), v14);
      std::unique_ptr<WebKit::CacheStorageRegistry>::reset[abi:sn180100](&v29, 0);
      *(_BYTE *)(v3 + 289) = *((_BYTE *)v2 + 144);
      WTF::String::operator=((WTF::StringImpl **)(v3 + 56), (WTF::StringImpl *)(v2 + 4));
      v15 = v3 + 144;
      WTF::String::operator=((WTF::StringImpl **)(v3 + 144), (WTF::StringImpl *)(v2 + 5));
      WTF::String::operator=((WTF::StringImpl **)(v3 + 152), (WTF::StringImpl *)(v2 + 6));
      WTF::String::operator=((WTF::StringImpl **)(v3 + 160), (WTF::StringImpl *)(v2 + 7));
      v16 = (WTF::StringImpl *)(v2 + 8);
      v17 = (_DWORD **)(v3 + 168);
      WTF::String::operator=((WTF::StringImpl **)(v3 + 168), v16);
      v18 = *(_QWORD *)(v3 + 56);
      if (v18 && *(_DWORD *)(v18 + 4))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v29, v19);
        v22 = (_BYTE)v21 ? Salt : 0;
        *(_QWORD *)(v3 + 64) = v22;
        v23 = v29;
        v29 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v21);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      if (*(unsigned __int8 *)(v3 + 289) < 2u)
      {
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        v26 = *v17;
        if (*v17)
          *v26 += 2;
        *v25 = v26;
        v25[1] = 0;
        v24 = *(uint64_t **)(v3 + 352);
        *(_QWORD *)(v3 + 352) = v25;
        if (v24)
          std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100](v3 + 352, v24);
      }
      else
      {
        WebKit::NetworkStorageManager::migrateServiceWorkerRegistrationsToOrigins((WebKit::NetworkStorageManager *)v3);
      }
      if (!*(_BYTE *)(v3 + 289) && *(_QWORD *)v15 && *(_DWORD *)(*(_QWORD *)v15 + 4))
      {
        WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)(v3 + 144), (const WTF::String *)v24);
        WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)(v3 + 144), (const WTF::String *)1);
      }
      VersionDirectoryIfNeeded = WebKit::IDBStorageManager::createVersionDirectoryIfNeeded((WTF::FileSystemImpl *)(v3 + 152), (const WTF::String *)v24);
      WTF::RunLoop::main(VersionDirectoryIfNeeded);
      v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v28 = &off_1E34C6968;
      *((_QWORD *)v28 + 1) = v4;
      v29 = v28;
      WTF::RunLoop::dispatch();
      result = v29;
      v29 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34C6968;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C6968;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::ThreadSafeWeakHashSet<IPC::Connection>::values@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  WTF::ThreadSafeWeakPtrControlBlock *v33;
  void *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 **v45;

  v3 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEABB3C](result + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v42 = 0;
  v43 = 0;
  if (!*(_QWORD *)v3 || (v7 = *(unsigned int *)(*(_QWORD *)v3 - 12), !(_DWORD)v7))
  {
    v13 = 0;
    goto LABEL_36;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  LODWORD(v43) = v7;
  v42 = (uint64_t)v8;
  v9 = *(_QWORD *)v3;
  if (!*(_QWORD *)v3 || !*(_DWORD *)(v9 - 12))
  {
    v13 = 0;
    goto LABEL_17;
  }
  v10 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = *(_QWORD *)v3;
    while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
    {
      v12 += 16;
      v11 -= 16;
      if (!v11)
        goto LABEL_32;
    }
  }
  else
  {
    v12 = *(_QWORD *)v3;
  }
  v14 = v9 + 16 * v10;
  if (v14 == v12)
  {
LABEL_32:
    v13 = 0;
    LODWORD(v15) = 0;
  }
  else
  {
    v13 = 0;
    LODWORD(v15) = 0;
    a2 = *(void **)v12;
LABEL_21:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v12 + 8), (uint64_t)a2, &v45);
    v16 = v45;
    if (v45)
    {
      v44 = v45;
      v45 = 0;
      if ((_DWORD)v15 == (_DWORD)v43)
      {
        v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, v15 + 1, (unint64_t)&v44);
        v15 = HIDWORD(v43);
        v8 = (WTF *)v42;
        v18 = *v17;
        *v17 = 0;
        *((_QWORD *)v8 + v15) = v18;
      }
      else
      {
        v44 = 0;
        *((_QWORD *)v8 + v15) = v16;
      }
      LODWORD(v15) = v15 + 1;
      HIDWORD(v43) = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v44);
      v19 = v45;
      v45 = 0;
      if (v19)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v19);
    }
    else
    {
      v13 = 1;
    }
    while (1)
    {
      v12 += 16;
      if (v12 == v14)
        break;
      a2 = *(void **)v12;
      if ((unint64_t)(*(_QWORD *)v12 + 1) > 1)
      {
        if (v12 != v14)
          goto LABEL_21;
        break;
      }
    }
    LODWORD(v7) = v43;
  }
  if (v7 > v15)
  {
    if ((_DWORD)v15)
    {
      LODWORD(v43) = v15;
      v42 = WTF::fastRealloc(v8, (void *)(8 * v15));
      goto LABEL_36;
    }
    if (v8)
    {
LABEL_17:
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v8, a2);
    }
  }
LABEL_36:
  v20 = *(unsigned int *)(a3 + 12);
  v21 = *(WTF **)a3;
  if ((_DWORD)v20)
  {
    v22 = 8 * v20;
    v23 = *(unsigned __int8 ****)a3;
    do
    {
      v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v23)
          + 1;
      v22 -= 8;
    }
    while (v22);
  }
  if (v21)
    WTF::fastFree(v21, a2);
  *(_QWORD *)a3 = v42;
  v24 = v43;
  v42 = 0;
  v43 = 0;
  *(_QWORD *)(a3 + 8) = v24;
  result = WTF::Vector<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, a2);
  v25 = *(_QWORD *)v3;
  if (v13)
  {
    if (v25)
    {
      v26 = *(_DWORD *)(v25 - 4);
      if (!v26)
        goto LABEL_63;
      v27 = 0;
      v28 = v26 - 1;
      do
      {
        v29 = v28;
        v30 = (_QWORD *)(v25 + 16 * v28);
        if ((unint64_t)(*v30 + 1) >= 2)
        {
          v31 = v25 + 16 * v28;
          v33 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v31 + 8);
          v32 = (uint64_t *)(v31 + 8);
          result = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v33);
          if ((_DWORD)result)
          {
            *v30 = -1;
            result = *v32;
            *v32 = 0;
            if (result)
              result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v34);
            ++v27;
          }
        }
        --v28;
      }
      while (v29);
      v25 = *(_QWORD *)v3;
      if (v27)
      {
        *(_DWORD *)(v25 - 16) += v27;
        v35 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          v36 = *(_DWORD *)(v35 - 12);
        else
          v36 = 0;
        *(_DWORD *)(v35 - 12) = v36 - v27;
        v25 = *(_QWORD *)v3;
      }
      if (v25)
      {
        v37 = *(_DWORD *)(v25 - 4);
        if (v37 >= 9 && 6 * *(_DWORD *)(v25 - 12) < v37)
        {
          result = (uint64_t)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::shrinkToBestSize((uint64_t *)v3);
          v25 = *(_QWORD *)v3;
          goto LABEL_65;
        }
LABEL_63:
        *(_DWORD *)(v3 + 8) = 0;
        goto LABEL_66;
      }
    }
    v39 = 0;
    *(_DWORD *)(v3 + 8) = 0;
LABEL_69:
    v40 = v39;
    goto LABEL_70;
  }
LABEL_65:
  *(_DWORD *)(v3 + 8) = 0;
  if (!v25)
  {
    v39 = 0;
    goto LABEL_69;
  }
LABEL_66:
  v39 = *(_DWORD *)(v25 - 12);
  v40 = 0x7FFFFFFF;
  if (v39 < 0x7FFFFFFF)
    goto LABEL_69;
LABEL_70:
  *(_DWORD *)(v3 + 12) = 2 * v40;
  v41 = __ldxr(v5);
  if (v41 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

_QWORD *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(a1, v8, 0);
}

_QWORD *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (~(*a2 << 32) + *a2) ^ ((~(*a2 << 32) + *a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (_QWORD *)(a1 + 16 * v9);
  v12 = (unsigned __int8 *)v11[1];
  v11[1] = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
  *v11 = *a2;
  v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t WTF::Vector<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned __int8 ****)a1;
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6990;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6990;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::RunLoop *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  int v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  if (v4)
  {
    *(_QWORD *)(v3 + 80) = 0;
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v4, a2);
  }
  std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100]((WTF **)(v3 + 112), 0);
  v5 = *(_QWORD *)(v3 + 312);
  v18 = v5;
  v6 = *(unsigned int *)(v3 + 324);
  v19 = *(_DWORD *)(v3 + 320);
  v20 = v6;
  v17[0] = 0;
  *(_QWORD *)(v3 + 312) = 0;
  v17[1] = 0;
  *(_QWORD *)(v3 + 320) = 0;
  WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v7);
  if ((_DWORD)v6)
  {
    v9 = 72 * v6;
    v10 = (uint64_t *)(v5 + 64);
    do
    {
      v11 = *v10;
      *v10 = 0;
      v10 += 9;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v9 -= 72;
    }
    while (v9);
  }
  v12 = (WTF::RunLoop *)WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8);
  v13 = *(uint64_t **)(v3 + 352);
  *(_QWORD *)(v3 + 352) = 0;
  if (v13)
    std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100](v3 + 352, v13);
  WTF::RunLoop::main(v12);
  v16 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v14 = &off_1E34C69B8;
  *(_OWORD *)(v14 + 8) = v16;
  v18 = v14;
  WTF::RunLoop::dispatch();
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C69B8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C69B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::close(WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::remove(a1, a2);
  return 1;
}

uint64_t WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(uint64_t *a1, WTF **a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return v4 + 16 * *(unsigned int *)(v4 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(uint64_t result, WTF **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::IntHash<unsigned long>::hash(*a2) & v4;
    v6 = *(WTF **)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(WTF **)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2)
          return v3 + 16 * v5;
      }
      return 0;
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::remove(uint64_t *a1, _QWORD *a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (unsigned __int8 *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned __int8 *)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C69E0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C69E0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  WebKit::OriginStorageManager *v11;
  WebKit::OriginStorageManager **v12;
  WebKit::OriginStorageManager *v13;
  _QWORD *v14;
  WebKit::OriginStorageManager::StorageBucket *v15;
  WebKit::OriginStorageManager::StorageBucket *v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v60;
  _QWORD *v61;
  uint64_t result;
  _QWORD *v63;

  v2 = a1[1];
  WebKit::IDBStorageRegistry::removeConnectionToClient(*(uint64_t **)(v2 + 128), a1[3]);
  v3 = (uint64_t *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 80);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 4);
    if (v5)
    {
      v6 = 0;
      v7 = v5 - 1;
      do
      {
        v8 = v7;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
        {
          WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v4 + 72 * v7));
          if ((v9 & 1) == 0)
          {
            v10 = v4 + 72 * v7;
            v13 = *(WebKit::OriginStorageManager **)(v10 + 64);
            v12 = (WebKit::OriginStorageManager **)(v10 + 64);
            v11 = v13;
            v14 = (_QWORD *)*((_QWORD *)v13 + 1);
            if (v14)
            {
              WebKit::OriginStorageManager::StorageBucket::connectionClosed(v14, (WTF::StringImpl *)a1[3]);
              v11 = *v12;
            }
            v15 = WebKit::OriginStorageManager::defaultBucket(v11);
            if ((WebKit::OriginStorageManager::StorageBucket::isActive(v15) & 1) == 0)
            {
              v16 = WebKit::OriginStorageManager::defaultBucket(*v12);
              if (!WebKit::OriginStorageManager::StorageBucket::hasDataInMemory(v16))
              {
                WebKit::OriginStorageManager::deleteEmptyDirectory((unsigned __int8 *)*v12);
                WebKit::deleteEmptyOriginDirectory((WebKit::OriginStorageManager *)((char *)*v12 + 16), v17);
                WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>>::customDeleteBucket((WebCore::ClientOrigin *)(v4 + 72 * v7));
                ++v6;
              }
            }
          }
        }
        --v7;
      }
      while (v8);
      v18 = *v3;
      if (v6)
      {
        *(_DWORD *)(v18 - 16) += v6;
        v19 = *v3;
        if (*v3)
          v20 = *(_DWORD *)(v19 - 12);
        else
          v20 = 0;
        *(_DWORD *)(v19 - 12) = v20 - v6;
        v18 = *v3;
      }
      if (v18)
      {
        v21 = *(_DWORD *)(v18 - 4);
        v22 = *(unsigned int *)(v18 - 12);
        if (v21 >= 9 && 6 * (int)v22 < v21)
        {
          v24 = (v22 - 1) | ((v22 - 1) >> 1) | ((((_DWORD)v22 - 1) | ((v22 - 1) >> 1)) >> 2);
          v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
          v26 = (v25 | HIWORD(v25)) + 1;
          if (v26 > 0x400)
          {
            if (v26 > 2 * v22)
              goto LABEL_28;
          }
          else if (3 * v26 > 4 * v22)
          {
LABEL_26:
            v27 = (double)v22;
            v28 = (double)v26;
            v29 = 0.604166667;
LABEL_29:
            if (v28 * v29 <= v27)
              LODWORD(v26) = 2 * v26;
            if (v26 <= 8)
              v30 = 8;
            else
              v30 = v26;
            WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash((uint64_t *)(v2 + 80), v30, 0);
            goto LABEL_35;
          }
          LODWORD(v26) = 2 * v26;
          if (v26 <= 0x400)
            goto LABEL_26;
LABEL_28:
          v27 = (double)v22;
          v28 = (double)v26;
          v29 = 0.416666667;
          goto LABEL_29;
        }
      }
    }
  }
LABEL_35:
  v31 = *(_QWORD *)(v2 + 304);
  if (v31)
  {
    v45 = a1[3];
    v46 = *(_DWORD *)(v31 - 8);
    v47 = (v45 + ~(v45 << 32)) ^ ((unint64_t)(v45 + ~(v45 << 32)) >> 22);
    v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
    v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
    v50 = v46 & ((v49 >> 31) ^ v49);
    v51 = *(_QWORD *)(v31 + 16 * v50);
    if (v51 == v45)
    {
LABEL_48:
      v32 = (WTF::StringImpl *)(v31 + 16 * v50);
    }
    else
    {
      v52 = 1;
      while (v51)
      {
        v50 = ((_DWORD)v50 + v52) & v46;
        v51 = *(_QWORD *)(v31 + 16 * v50);
        ++v52;
        if (v51 == v45)
          goto LABEL_48;
      }
      v32 = (WTF::StringImpl *)(v31 + 16 * *(unsigned int *)(v31 - 4));
    }
  }
  else
  {
    v32 = 0;
  }
  v33 = (WTF::StringImpl **)WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove((uint64_t *)(v2 + 304), v32);
  if (*(_BYTE *)(v2 + 376))
  {
    v35 = (uint64_t *)(v2 + 368);
    v36 = *(_QWORD *)(v2 + 368);
    if (v36)
    {
      v37 = a1[3];
      v38 = *(_DWORD *)(v36 - 8);
      v39 = (v37 + ~(v37 << 32)) ^ ((unint64_t)(v37 + ~(v37 << 32)) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v42 = v38 & ((v41 >> 31) ^ v41);
      v43 = *(_QWORD *)(v36 + 16 * v42);
      if (v43 != v37)
      {
        v44 = 1;
        while (v43)
        {
          v42 = ((_DWORD)v42 + v44) & v38;
          v43 = *(_QWORD *)(v36 + 16 * v42);
          ++v44;
          if (v43 == v37)
            goto LABEL_50;
        }
        v42 = *(unsigned int *)(v36 - 4);
      }
LABEL_50:
      if (v42 != *(_DWORD *)(v36 - 4))
      {
        v53 = (_QWORD *)(v36 + 16 * v42);
        *v53 = -1;
        v33 = (WTF::StringImpl **)v53[1];
        if (v33)
          v33 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v34);
        ++*(_DWORD *)(*v35 - 16);
        v54 = *v35;
        if (*v35)
          v55 = *(_DWORD *)(v54 - 12) - 1;
        else
          v55 = -1;
        *(_DWORD *)(v54 - 12) = v55;
        v56 = *v35;
        if (*v35)
        {
          v57 = 6 * *(_DWORD *)(v56 - 12);
          v58 = *(_DWORD *)(v56 - 4);
          if (v57 < v58 && v58 >= 9)
            v33 = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v2 + 368), v58 >> 1, 0);
        }
      }
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)v33);
  v60 = a1[2];
  a1[2] = 0;
  v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v61 = &off_1E34C6A08;
  v61[1] = v60;
  v63 = v61;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v63;
  if (v63)
    return (*(uint64_t (**)(_QWORD *))(*v63 + 8))(v63);
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  WebKit::OriginStorageManager **v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::OriginStorageManager *v13;
  char v15;
  char v16;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::computeHash<WebCore::ClientOrigin>(a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v8 = a1 + 72 * (v5 & v4);
    v9 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    v5 = ++v6 + v7;
  }
  while (!v9);
  v10 = (WebKit::OriginStorageManager **)(a1 + 72 * v7 + 64);
  std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100](v10, 0);
  v11 = *(unsigned int *)(v8 + 56);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v11])(&v15, v8 + 32);
  *(_DWORD *)(v8 + 56) = -1;
  v12 = *(unsigned int *)(v8 + 24);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v12])(&v16, v8);
  *(_BYTE *)v8 = 0;
  *(_DWORD *)(v8 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8, a2);
  *(_BYTE *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, a2 + 32);
  v13 = *(WebKit::OriginStorageManager **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *v10 = v13;
  return v8;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*a1)
  {
    v2 = (WTF::StringImpl *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = (WTF::StringImpl **)*((_QWORD *)a2 + 1);
  if (result)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl **v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (_QWORD *)(v19 + 16 * v26);
          v30 = v28 + 1;
          v29 = (WTF::StringImpl **)v28[1];
          if (v29)
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v10);
            v17 = *v16;
          }
          *v28 = v17;
          v31 = v6 + 16 * v13;
          *v30 = 0;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *v30 = v32;
          v33 = *(WTF::StringImpl ***)(v31 + 8);
          if (v33)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v10);
          if (v16 == a3)
            v14 = v28;
        }
        else
        {
          v18 = *(WTF::StringImpl ***)(v6 + 16 * v13 + 8);
          if (v18)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v10);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl **v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (_QWORD *)(v19 + 16 * v26);
          v30 = v28 + 1;
          v29 = (WTF::StringImpl **)v28[1];
          if (v29)
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v10);
            v17 = *v16;
          }
          *v28 = v17;
          v31 = v6 + 16 * v13;
          *v30 = 0;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *v30 = v32;
          v33 = *(WTF::StringImpl ***)(v31 + 8);
          if (v33)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v10);
          if (v16 == a3)
            v14 = v28;
        }
        else
        {
          v18 = *(WTF::StringImpl ***)(v6 + 16 * v13 + 8);
          if (v18)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v10);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34C6A08;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(IPC::Connection &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C6A08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  *a1 = &off_1E34C6A30;
  v3 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  *(_QWORD *)this = &off_1E34C6A30;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::prepareForEviction(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = result;
    v3 = *((_QWORD *)result + 1);
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v13, v1, *((_QWORD *)result + 3));
    v5 = v13;
    if (v13)
    {
      if (!*(_BYTE *)(v3 + 72))
      {
        v6 = *(_QWORD *)(v3 + 32);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v3 + 40);
            v11 = *((_OWORD *)v2 + 1);
            *((_QWORD *)v2 + 2) = 0;
            *((_QWORD *)v2 + 3) = 0;
            v9 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v9 = &off_1E34C6A58;
            *(_QWORD *)(v9 + 8) = v3;
            *(_OWORD *)(v9 + 16) = v11;
            v12 = v9;
            WebKit::NetworkProcess::registrableDomainsWithLastAccessedTime(v7, v8, &v12);
            v10 = v12;
            v12 = 0;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          }
        }
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvEUlT_E_vJNSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSF_ISC_EENS_15HashTableTraitsEEEEEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  *a1 = &off_1E34C6A58;
  v3 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvEUlT_E_vJNSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSF_ISC_EENS_15HashTableTraitsEEEEEEED0Ev(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  *(_QWORD *)this = &off_1E34C6A58;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvEUlT_E_vJNSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSF_ISC_EENS_15HashTableTraitsEEEEEEE4callESK_(WTF::StringImpl **result, uint64_t a2)
{
  WTF::StringImpl **v2;
  int v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  WTF::ThreadSafeWeakPtrControlBlock *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  WTF::StringImpl **v17;
  unsigned __int8 v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19[2];
  WTF::StringImpl **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v2 = result;
  LOBYTE(v17) = 0;
  v18 = 0;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = *(WTF::StringImpl ***)a2;
    *(_QWORD *)a2 = 0;
    v17 = v4;
    v5 = 1;
    v18 = 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = result[2];
  if (v6)
  {
    v7 = result[1];
    result = (WTF::StringImpl **)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v23, (uint64_t)v6, (uint64_t)result[3]);
    v9 = v23;
    if (v23)
    {
      if (!*((_BYTE *)v7 + 72))
      {
        v10 = *((_OWORD *)v2 + 1);
        v2[2] = 0;
        v2[3] = 0;
        *(_OWORD *)v19 = v10;
        if (v3)
        {
          WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>::copy((uint64_t *)&v17, (uint64_t)v6, v8, (uint64_t *)&v20);
          v11 = 1;
        }
        else
        {
          v11 = 0;
          LOBYTE(v20) = 0;
        }
        v21 = v11;
        v12 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v12 = &off_1E34C6A80;
        *(WTF::ThreadSafeWeakPtrControlBlock **)(v12 + 8) = v19[0];
        v13 = v19[1];
        v19[0] = 0;
        v19[1] = 0;
        *(_QWORD *)(v12 + 16) = v13;
        *(_BYTE *)(v12 + 24) = 0;
        *(_BYTE *)(v12 + 32) = 0;
        if (v21)
        {
          v14 = v20;
          v20 = 0;
          *(_QWORD *)(v12 + 24) = v14;
          *(_BYTE *)(v12 + 32) = 1;
        }
        v22 = v12;
        WTF::SuspendableWorkQueue::dispatch();
        v15 = v22;
        v22 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (v21 && v20)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v6);
        v16 = (unsigned __int8 *)v19[0];
        v19[0] = 0;
        if (v16)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v6);
      }
      result = (WTF::StringImpl **)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v6);
      v5 = v18;
    }
  }
  if (v5)
  {
    result = v17;
    if (v17)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v6);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_EUlvE_vJEED1Ev(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  unsigned __int8 *v4;

  *(_QWORD *)a1 = &off_1E34C6A80;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl ***)(a1 + 24);
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  v4 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  unsigned __int8 *v4;

  *(_QWORD *)this = &off_1E34C6A80;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  v4 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_EUlvE_vJEE4callEv(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  WebCore::SecurityOriginData **v3;
  void *v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  uint64_t v7;
  uint64_t (**v8)();
  WebCore::SecurityOriginData *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  double v12;
  uint64_t v13;
  int v14;
  const WTF::String *v15;
  double v16;
  char v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  double v25;
  WTF::StringImpl *v26;
  const WTF::String *v27;
  double v28;
  WTF::StringImpl *v29;
  WebCore::SecurityOriginData *v30;
  int v31;
  uint64_t (**v32)();
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  int v36;
  char v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::SecurityOriginData *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  WebCore::SecurityOriginData *v52;
  char *v53;
  int64x2_t v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  unsigned int *v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  WebKit::OriginStorageManager *v80;
  WTF::StringImpl *v81;
  NSObject *v82;
  WebCore::SecurityOriginData *v83;
  WebCore::SecurityOriginData *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  unsigned int *v87;
  char v88;
  uint64_t v89;
  WebCore::SecurityOriginData **v90;
  _QWORD *v91;
  WTF::String *v92;
  WebKit::CacheStorageManager *v93;
  uint64_t *v94;
  WebCore::SecurityOriginData *v95;
  _QWORD *v96;
  uint64_t v97;
  WebCore::SecurityOriginData *v98;
  unint64_t v99;
  uint64_t v100;
  WebCore::SecurityOriginData **v101;
  uint64_t v102;
  WebCore::SecurityOriginData *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  int64x2_t v106;
  unsigned int v107;
  _BYTE v108[24];
  unsigned int v109;
  _BYTE buf[24];
  _BYTE v111[24];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v1 = result[1];
  if (!v1)
    return result;
  v2 = result;
  result = (_QWORD *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v101, v1, result[2]);
  v3 = v101;
  if (!v101)
    return result;
  v103 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v102, v101);
  v5 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v102);
  v6 = 0;
  v106.i64[0] = (uint64_t)v5;
  v106.i64[1] = (uint64_t)v4;
  v7 = v102;
  if (v102)
    v6 = (WebCore::SecurityOriginData *)(v102 + ((unint64_t)*(unsigned int *)(v102 - 4) << 6));
  v8 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5;
  v97 = (uint64_t)v3;
  v9 = 0;
  if (v6 != v5)
  {
    v95 = v6;
    v94 = v2 + 3;
    v92 = (WTF::String *)(v3 + 19);
    v93 = (WebKit::CacheStorageManager *)(v3 + 20);
    v96 = v2;
    while (1)
    {
      v10 = WebKit::NetworkStorageManager::originStorageManager((uint64_t)v3, v5);
      v99 = WebKit::OriginQuotaManager::usage(*(WebKit::OriginQuotaManager **)(v10 + 48));
      if (*((_BYTE *)v2 + 32))
      {
        WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v5);
        v12 = WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v94, (WTF::ASCIICaseInsensitiveHash **)buf);
      }
      else
      {
        v13 = WebKit::NetworkStorageManager::originStorageManager((uint64_t)v3, v5);
        v14 = *((unsigned __int8 *)v3 + 289);
        v12 = 0.0;
        if (v14 != 2)
        {
          if (v14 != 1)
          {
            if (*((_BYTE *)v3 + 289))
              goto LABEL_46;
            WebKit::LocalStorageManager::localStorageFilePath((WTF::StringImpl *)buf, v3[18], v5);
            v16 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)buf, v15));
            if (!v17)
              v16 = 0.0;
            if (v16 >= 0.0)
              v12 = v16;
            else
              v12 = 0.0;
            WebKit::IDBStorageManager::idbStorageOriginDirectory((WTF::StringImpl *)&v104, v92, v5);
            v20 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v104, v18));
            if (!(_BYTE)v19)
              v20 = 0.0;
            if (v20 >= v12)
              v12 = v20;
            v21 = v104;
            v104 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v19);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v19);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          WebKit::CacheStorageManager::cacheStorageOriginDirectory(v93, v5, buf);
          v25 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)buf, v23));
          if (!(_BYTE)v24)
            v25 = 0.0;
          if (v25 >= v12)
            v12 = v25;
          v26 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v24);
            else
              *(_DWORD *)v26 -= 2;
          }
        }
        WebKit::originFilePath((WTF::StringImpl *)buf, *(const WTF::String **)(v13 + 16));
        v28 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)buf, v27));
        if (!(_BYTE)v11)
          v28 = 0.0;
        if (v28 >= v12)
          v12 = v28;
      }
      v29 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v11);
        else
          *(_DWORD *)v29 -= 2;
      }
LABEL_46:
      v30 = v103;
      v98 = v9;
      if (v103
        || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)&v103, 0), (v30 = v103) != 0))
      {
        v31 = *((_DWORD *)v30 - 2);
      }
      else
      {
        v31 = 0;
      }
      v32 = v8;
      *(_DWORD *)buf = -1640531527;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(buf, (uint64_t)v5);
      v33 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v31;
      v34 = (unsigned int *)((char *)v30 + 72 * v33);
      if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v34) & 1) == 0)
      {
        v35 = 0;
        v36 = 1;
        do
        {
          WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v34);
          if ((v37 & 1) != 0)
          {
            v35 = v34;
          }
          else if ((WebCore::operator==() & 1) != 0)
          {
            goto LABEL_71;
          }
          v33 = (v33 + v36) & v31;
          v34 = (unsigned int *)((char *)v30 + 72 * v33);
          ++v36;
        }
        while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v34));
        if (v35)
        {
          *((_QWORD *)v35 + 8) = 0;
          *((_OWORD *)v35 + 2) = 0u;
          *((_OWORD *)v35 + 3) = 0u;
          *(_OWORD *)v35 = 0u;
          *((_OWORD *)v35 + 1) = 0u;
          --*((_DWORD *)v103 - 4);
          v34 = v35;
        }
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v34, (uint64_t)v5);
      *(_WORD *)buf = 0;
      buf[2] = 0;
      *(_OWORD *)&buf[8] = 0u;
      *(_OWORD *)v111 = 0u;
      *((_OWORD *)v34 + 2) = *(_OWORD *)buf;
      *((_QWORD *)v34 + 6) = *(_QWORD *)&buf[16];
      v39 = v34[17];
      v40 = (unsigned int *)*((_QWORD *)v34 + 7);
      if ((_DWORD)v39)
      {
        v41 = 32 * v39;
        do
        {
          v42 = v40[6];
          if ((_DWORD)v42 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))v32[v42])(&v104, v40);
          v40[6] = -1;
          v40 += 8;
          v41 -= 32;
        }
        while (v41);
        v40 = (unsigned int *)*((_QWORD *)v34 + 7);
      }
      if (v40)
      {
        *((_QWORD *)v34 + 7) = 0;
        v34[16] = 0;
        WTF::fastFree((WTF *)v40, v38);
      }
      *((_QWORD *)v34 + 7) = *(_QWORD *)v111;
      v43 = *(_QWORD *)&v111[8];
      *(_QWORD *)v111 = 0;
      *(_QWORD *)&v111[8] = 0;
      *((_QWORD *)v34 + 8) = v43;
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v111, v38);
      v44 = v103;
      if (v103)
        v45 = *((_DWORD *)v103 - 3) + 1;
      else
        v45 = 1;
      *((_DWORD *)v103 - 3) = v45;
      v46 = (*((_DWORD *)v44 - 4) + v45);
      v47 = *((unsigned int *)v44 - 1);
      if (v47 > 0x400)
      {
        if (v47 > 2 * v46)
          goto LABEL_71;
LABEL_70:
        v34 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)&v103, v34);
        goto LABEL_71;
      }
      if (3 * v47 <= 4 * v46)
        goto LABEL_70;
LABEL_71:
      *((_QWORD *)v34 + 5) += v99;
      if (*((double *)v34 + 6) < v12)
        *((double *)v34 + 6) = v12;
      v48 = (unint64_t)v5 + 32;
      v49 = v34[17];
      v8 = v32;
      v3 = (WebCore::SecurityOriginData **)v97;
      if ((_DWORD)v49 == v34[16])
      {
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>((uint64_t)(v34 + 14), v48);
      }
      else
      {
        v50 = *((_QWORD *)v34 + 7) + 32 * v49;
        *(_BYTE *)v50 = 0;
        *(_DWORD *)(v50 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v50, v48);
        ++v34[17];
      }
      v2 = v96;
      if ((WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v97, v5) & 1) == 0)*((_BYTE *)v34 + 32) = 1;
      if (!*((_BYTE *)v34 + 34))
      {
        buf[0] = 0;
        *(_DWORD *)v111 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v5);
        v111[8] = 0;
        LODWORD(v113) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v111[8], (uint64_t)v5);
        v51 = WebKit::NetworkStorageManager::persistedInternal((WebKit::NetworkStorageManager *)v97, (const WebCore::ClientOrigin *)buf);
        if ((_DWORD)v113 != -1)
          ((void (*)(WTF::StringImpl **, _BYTE *))v32[v113])(&v104, &v111[8]);
        LODWORD(v113) = -1;
        if (*(_DWORD *)v111 != -1)
          ((void (*)(WTF::StringImpl **, _BYTE *))v32[*(unsigned int *)v111])(&v104, buf);
        if (v51)
          *(_WORD *)((char *)v34 + 33) = 257;
      }
      v9 = (WebCore::SecurityOriginData *)((char *)v98 + v99);
      v106.i64[0] += 64;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets((WebCore::SecurityOriginData **)&v106);
      v5 = (WebCore::SecurityOriginData *)v106.i64[0];
      if ((WebCore::SecurityOriginData *)v106.i64[0] == v95)
      {
        v7 = v102;
        break;
      }
    }
  }
  if (v7)
    v7 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v7, v4);
  v3[32] = v9;
  *((_BYTE *)v3 + 264) = 1;
  *((_BYTE *)v3 + 288) = 0;
  if (!*((_BYTE *)v3 + 280))
LABEL_155:
    __break(1u);
  v52 = v103;
  if (v9 > v3[34])
  {
    v104 = 0;
    v105 = 0;
    if (!v103)
      goto LABEL_108;
    if (*((_DWORD *)v103 - 3))
    {
      v53 = (char *)v103 + 72 * *((unsigned int *)v103 - 1);
      *(_QWORD *)buf = v103;
      *(_QWORD *)&buf[8] = v53;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets((WebCore::SecurityOriginData **)buf);
      v54 = *(int64x2_t *)buf;
      v55 = *((_DWORD *)v52 - 1);
    }
    else
    {
      v55 = *((_DWORD *)v103 - 1);
      v54 = vdupq_n_s64((unint64_t)v103 + 72 * v55);
    }
    v106 = v54;
    v56 = v54.i64[0];
    v57 = (char *)v52 + 72 * v55;
    if (v57 == (char *)v54.i64[0])
    {
LABEL_108:
      v70 = 0;
      v58 = 0;
    }
    else
    {
      v58 = 0;
      LODWORD(v59) = 0;
      do
      {
        buf[0] = 0;
        *(_DWORD *)v111 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, v56);
        v60 = *(_OWORD *)(v56 + 32);
        v112 = *(_QWORD *)(v56 + 48);
        *(_OWORD *)&v111[8] = v60;
        v113 = 0;
        v114 = 0;
        v61 = *(_QWORD *)(v56 + 56);
        *(_QWORD *)(v56 + 56) = 0;
        v113 = v61;
        *(_QWORD *)&v60 = *(_QWORD *)(v56 + 64);
        *(_QWORD *)(v56 + 64) = 0;
        v114 = v60;
        if ((_DWORD)v59 == (_DWORD)v105)
        {
          v62 = WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v59 + 1, (unint64_t)buf);
          LODWORD(v59) = HIDWORD(v105);
          v58 = v104;
          v63 = (char *)v104 + 72 * HIDWORD(v105);
          *v63 = 0;
          *((_DWORD *)v63 + 6) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v63, v62);
          v65 = *(_QWORD *)(v62 + 48);
          *((_OWORD *)v63 + 2) = *(_OWORD *)(v62 + 32);
          *((_QWORD *)v63 + 7) = 0;
          *((_QWORD *)v63 + 8) = 0;
          *((_QWORD *)v63 + 6) = v65;
          v66 = *(_QWORD *)(v62 + 56);
          *(_QWORD *)(v62 + 56) = 0;
          *((_QWORD *)v63 + 7) = v66;
          LODWORD(v66) = *(_DWORD *)(v62 + 64);
          *(_DWORD *)(v62 + 64) = 0;
          *((_DWORD *)v63 + 16) = v66;
          LODWORD(v66) = *(_DWORD *)(v62 + 68);
          *(_DWORD *)(v62 + 68) = 0;
          *((_DWORD *)v63 + 17) = v66;
        }
        else
        {
          v67 = (uint64_t)v58 + 72 * v59;
          *(_BYTE *)v67 = 0;
          *(_DWORD *)(v67 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v67, (uint64_t)buf);
          v68 = v112;
          *(_OWORD *)(v67 + 32) = *(_OWORD *)&v111[8];
          *(_QWORD *)(v67 + 56) = 0;
          *(_QWORD *)(v67 + 64) = 0;
          *(_QWORD *)(v67 + 48) = v68;
          v69 = v113;
          v113 = 0;
          *(_QWORD *)(v67 + 56) = v69;
          LODWORD(v69) = v114;
          LODWORD(v114) = 0;
          *(_DWORD *)(v67 + 64) = v69;
          LODWORD(v69) = HIDWORD(v114);
          HIDWORD(v114) = 0;
          *(_DWORD *)(v67 + 68) = v69;
        }
        v59 = (v59 + 1);
        HIDWORD(v105) = v59;
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v64);
        if (*(_DWORD *)v111 != -1)
          ((void (*)(uint64_t *, _BYTE *))v8[*(unsigned int *)v111])(&v102, buf);
        v106.i64[0] += 72;
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets((WebCore::SecurityOriginData **)&v106);
        v56 = v106.i64[0];
      }
      while ((char *)v106.i64[0] != v57);
      v70 = (double *)((char *)v58 + 72 * v59);
      if ((_DWORD)v59)
      {
        v71 = 126 - 2 * __clz(v59);
LABEL_110:
        std::__introsort<std::_ClassicAlgPolicy,WebKit::NetworkStorageManager::performEviction(WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits> &&)::$_0 &,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord> *,false>((uint64_t)v58, v70, v71, 1);
        if (HIDWORD(v105))
        {
          v100 = 0;
          v72 = v104;
          while (*((_BYTE *)v3 + 264) && *((_BYTE *)v3 + 280))
          {
            if (v3[32] <= v3[34])
              goto LABEL_133;
            v73 = HIDWORD(v105) - 1;
            v74 = (unsigned int *)((char *)v72 + 72 * HIDWORD(v105));
            buf[0] = 0;
            *(_DWORD *)v111 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)(v74 - 18));
            v75 = *(_OWORD *)(v74 - 10);
            v112 = *((_QWORD *)v74 - 3);
            *(_OWORD *)&v111[8] = v75;
            v76 = *((_QWORD *)v74 - 2);
            *((_QWORD *)v74 - 2) = 0;
            v113 = v76;
            LODWORD(v76) = *(v74 - 2);
            *(v74 - 2) = 0;
            LODWORD(v114) = v76;
            LODWORD(v76) = *(v74 - 1);
            *(v74 - 1) = 0;
            HIDWORD(v114) = v76;
            WTF::VectorDestructor<true,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>::destruct((uint64_t)(v74 - 18), v74);
            HIDWORD(v105) = v73;
            if (v111[8])
            {
              v3 = (WebCore::SecurityOriginData **)v97;
            }
            else
            {
              v3 = (WebCore::SecurityOriginData **)v97;
              if (!v111[10] || !v111[9])
              {
                if (HIDWORD(v114))
                {
                  v78 = v113;
                  v79 = 32 * HIDWORD(v114);
                  do
                  {
                    v106.i8[0] = 0;
                    v107 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v106, (uint64_t)buf);
                    v108[0] = 0;
                    v109 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v108, v78);
                    v80 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v97, (const WebCore::ClientOrigin *)&v106);
                    v81 = WebKit::OriginStorageManager::defaultBucket(v80);
                    WebKit::OriginStorageManager::StorageBucket::deleteData(v81, (void *)0x8C0B0, -INFINITY);
                    WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v97, (const WebCore::ClientOrigin *)&v106);
                    if (v109 != -1)
                      ((void (*)(uint64_t *, _BYTE *))v8[v109])(&v102, v108);
                    v109 = -1;
                    if (v107 != -1)
                      ((void (*)(uint64_t *, int64x2_t *))v8[v107])(&v102, &v106);
                    v78 += 32;
                    v79 -= 32;
                  }
                  while (v79);
                }
                if (!*(_BYTE *)(v97 + 264))
                  goto LABEL_155;
                *(_QWORD *)(v97 + 256) -= *(_QWORD *)&v111[16];
                *(_BYTE *)(v97 + 264) = 1;
                ++v100;
              }
            }
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v77);
            if (*(_DWORD *)v111 != -1)
              ((void (*)(int64x2_t *, _BYTE *))v8[*(unsigned int *)v111])(&v106, buf);
            if (!HIDWORD(v105))
              goto LABEL_133;
          }
          goto LABEL_155;
        }
        v100 = 0;
LABEL_133:
        v82 = qword_1ECE718E8;
        v7 = os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v7)
        {
          if (!*((_BYTE *)v3 + 280))
            goto LABEL_155;
          if (*((_BYTE *)v3 + 264))
            v83 = v3[32];
          else
            v83 = 0;
          v84 = v3[34];
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = v3;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v100;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v111 = v83;
          *(_WORD *)&v111[8] = 2048;
          *(_QWORD *)&v111[10] = v84;
          _os_log_impl(&dword_196BCC000, v82, OS_LOG_TYPE_DEFAULT, "%p - NetworkStorageManager::performEviction evicts %llu origins, current usage %llu, total quota %llu", buf, 0x2Au);
        }
        v85 = v104;
        if (HIDWORD(v105))
          v7 = WTF::VectorDestructor<true,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>::destruct((uint64_t)v104, (unsigned int *)v104 + 18 * HIDWORD(v105));
        if (v85)
          v7 = WTF::fastFree(v85, v4);
        v52 = v103;
        goto LABEL_144;
      }
    }
    v71 = 0;
    goto LABEL_110;
  }
LABEL_144:
  if (v52)
  {
    v86 = *((unsigned int *)v52 - 1);
    if ((_DWORD)v86)
    {
      v87 = (unsigned int *)v52;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v87);
        if ((v88 & 1) == 0)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v87 + 14), v4);
          v89 = v87[6];
          if ((_DWORD)v89 != -1)
            ((void (*)(_BYTE *, unsigned int *))v8[v89])(buf, v87);
          v87[6] = -1;
        }
        v87 += 18;
        --v86;
      }
      while (v86);
    }
    v7 = WTF::fastFree((WebCore::SecurityOriginData *)((char *)v52 - 16), v4);
  }
  WTF::RunLoop::main((WTF::RunLoop *)v7);
  v90 = v101;
  v91 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v91 = &off_1E34C6AA8;
  v91[1] = v90;
  *(_QWORD *)buf = v91;
  WTF::RunLoop::dispatch();
  result = *(_QWORD **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_ENUlvE_clEvEUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34C6AA8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit21NetworkStorageManager18prepareForEvictionEvEN3__0clEvENUlT_E_clINSt3__18optionalINS_7HashMapIN7WebCore17RegistrableDomainENS_8WallTimeENS_11DefaultHashISC_EENS_10HashTraitsISC_EENSG_ISD_EENS_15HashTableTraitsEEEEEEEDaS5_ENUlvE_clEvEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C6AA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

double WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  double v3;
  unsigned int v5;
  uint64_t v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  int v10;

  v2 = *a1;
  v3 = 0.0;
  if (*a1)
  {
    v5 = *(_DWORD *)(v2 - 8);
    v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
    v7 = (WTF **)(v2 + 16 * v6);
    if ((WTF::equal(*v7, 0, v8) & 1) == 0)
    {
      v10 = 1;
      while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
      {
        v6 = ((_DWORD)v6 + v10) & v5;
        v7 = (WTF **)(v2 + 16 * v6);
        ++v10;
        if ((WTF::equal(*v7, 0, v9) & 1) != 0)
          return v3;
      }
      return *(double *)(v2 + 16 * v6 + 8);
    }
  }
  return v3;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  void *v23;
  int isNull;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  unsigned int *v38;
  char v39;
  char v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(72 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 72 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (!v3)
  {
    v11 = 0;
    if (!v2)
      return v11;
    goto LABEL_28;
  }
  v10 = 0;
  v11 = 0;
  v12 = v3;
  do
  {
    v13 = (unsigned int *)(v2 + 72 * v10);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
    if ((v14 & 1) == 0)
    {
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 72 * v10)))
      {
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 72 * v10 + 56, v15);
        v16 = v13[6];
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v16])(&v39, v2 + 72 * v10);
        v13[6] = -1;
      }
      else
      {
        v17 = *a1;
        v38 = v11;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v42 = -1640531527;
        v43 = 0;
        v44 = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v42, v2 + 72 * v10);
        v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
        v20 = 0;
        do
        {
          v21 = v19 & v18;
          v22 = (unsigned int *)(v17 + 72 * (v19 & v18));
          isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v22);
          v19 = ++v20 + v21;
        }
        while (!isNull);
        v25 = (_QWORD *)(v17 + 72 * v21 + 56);
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v23);
        v26 = v22[6];
        if ((_DWORD)v26 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v26])(&v40, v17 + 72 * v21);
        *(_BYTE *)v22 = 0;
        v22[6] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v17 + 72 * v21, v2 + 72 * v10);
        v27 = v17 + 72 * v21;
        v28 = v2 + 72 * v10;
        v29 = *(_OWORD *)(v28 + 32);
        *(_QWORD *)(v27 + 48) = *(_QWORD *)(v28 + 48);
        *(_OWORD *)(v27 + 32) = v29;
        *v25 = 0;
        *(_QWORD *)(v27 + 64) = 0;
        v30 = *(_QWORD *)(v28 + 56);
        v28 += 56;
        *(_QWORD *)v28 = 0;
        *v25 = v30;
        v31 = *(_DWORD *)(v28 + 8);
        *(_DWORD *)(v28 + 8) = 0;
        *(_DWORD *)(v27 + 64) = v31;
        v32 = *(_DWORD *)(v28 + 12);
        *(_DWORD *)(v28 + 12) = 0;
        *(_DWORD *)(v27 + 68) = v32;
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, v33);
        v34 = v13[6];
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v34])(&v41, v2 + 72 * v10);
        v13[6] = -1;
        v11 = v38;
        if (v13 == a2)
          v11 = v22;
      }
    }
    ++v10;
  }
  while (v10 != v12);
  if (v2)
LABEL_28:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

uint64_t WTF::VectorDestructor<true,std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>::destruct(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if ((unsigned int *)result != a2)
  {
    v8 = v2;
    v9 = v3;
    v5 = (unsigned int *)result;
    do
    {
      result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 14), a2);
      v6 = v5[6];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v6])(&v7, v5);
      v5[6] = -1;
      v5 += 18;
    }
    while (v5 != a2);
  }
  return result;
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebKit::NetworkStorageManager::AccessRecord>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WebCore::SecurityOriginData::isNull(v1) & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 72);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

unint64_t WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WebCore::SecurityOriginData,WebKit::NetworkStorageManager::AccessRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 72 * a2;
      result = WTF::fastMalloc((WTF *)(72 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 72 * v4;
        v9 = (uint64_t)v3 + 56;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v7, v9 - 56);
          v10 = *(_QWORD *)(v9 - 8);
          *(_OWORD *)(v7 + 32) = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(v7 + 56) = 0;
          *(_QWORD *)(v7 + 64) = 0;
          *(_QWORD *)(v7 + 48) = v10;
          v11 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v7 + 56) = v11;
          LODWORD(v11) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 64) = v11;
          LODWORD(v11) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 68) = v11;
          result = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v12);
          v13 = *(unsigned int *)(v9 - 32);
          if ((_DWORD)v13 != -1)
            result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v13])(&v14, v9 - 56);
          *(_DWORD *)(v9 - 32) = -1;
          v9 += 72;
          v7 += 72;
          v8 -= 72;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_1E34C6AD0;
  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v2])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)this = &off_1E34C6AD0;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v7, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v6[6];
  uint64_t v7;

  v7 = a2;
  v5 = *(_QWORD *)(a1 + 80);
  v6[0] = a1 + 8;
  v6[1] = a1 + 16;
  v6[2] = &v7;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  IPC::Connection::send<Messages::NetworkProcessProxy::IncreaseQuota>(v5, (uint64_t)v6);
}

void IPC::Connection::send<Messages::NetworkProcessProxy::IncreaseQuota>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  uint64_t v23;
  unsigned __int8 **v24;
  IPC::Encoder *v25;

  IPC::Connection::connection(a1, &v24);
  v3 = (uint64_t)v24;
  if (v24)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 318;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v25 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *(uint64_t **)a2);
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v4, *(_QWORD *)(a2 + 8));
    v5 = **(_QWORD **)(a2 + 16);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v6;
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v7;
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v8;
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v25, 0, 0);
    v10 = v25;
    v25 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      v14 = *v13;
      if (__ldaxr(*v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v14);
LABEL_9:
      v16 = *((_QWORD *)v14 + 1);
      v17 = v16 - 1;
      *((_QWORD *)v14 + 1) = v16 - 1;
      if (v16 == 1)
      {
        v23 = *((_QWORD *)v14 + 2);
        v19 = *((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 3) = 0;
        v18 = v23 == 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = __ldxr(v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, v14))
        {
          if (v17)
            return;
LABEL_17:
          v21 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v21 = off_1E34ACA48;
          *(_QWORD *)(v21 + 8) = v14;
          *(_QWORD *)(v21 + 16) = v19;
          *(_BYTE *)(v21 + 24) = v18;
          v25 = (IPC::Encoder *)v21;
          WTF::ensureOnMainRunLoop();
          v22 = v25;
          v25 = 0;
          if (v22)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v22 + 8))(v22);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17)
        return;
      goto LABEL_17;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void,unsigned long long>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  char v7;
  char v8;

  *(_QWORD *)a1 = &off_1E34C6AF8;
  v3 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v7, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  char v7;
  char v8;

  *(_QWORD *)this = &off_1E34C6AF8;
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v7, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v5 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  return WTF::fastFree(this, a2);
}

WTF::WallTime *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void,unsigned long long>::call(WTF::WallTime *result, uint64_t a2)
{
  uint64_t v3;
  WTF::WallTime *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  double *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  unsigned int v54;
  WebKit::OriginStorageManager *v55;
  const WTF::String *v56;
  const WTF::String *v57;
  WTF::StringImpl *v58;
  const WTF::String *v59;
  WTF::StringImpl *v60;
  const WTF::String *v61;
  double v62;
  unint64_t v63;
  WTF::ThreadSafeWeakPtrControlBlock *v64;
  WTF::ThreadSafeWeakPtrControlBlock *v65;
  WTF::StringImpl *v66;
  char v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  WTF::StringImpl *v73;

  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    v4 = result;
    result = (WTF::WallTime *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v72, v3, *((_QWORD *)result + 2));
    v5 = v72;
    if (v72)
    {
      v6 = (uint64_t)v4 + 24;
      WTF::WallTime::now(result);
      v8 = v7;
      v9 = (uint64_t *)(v5 + 360);
      v10 = *(_QWORD *)(v5 + 360);
      v70 = v5;
      v71 = (uint64_t *)(v5 + 360);
      if (v10)
      {
        v11 = *(_DWORD *)(v10 - 8);
        v12 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)v4 + 24) & v11;
        v13 = (double *)(v10 + 72 * v12);
        v14 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        if ((v14 & 1) == 0)
        {
          v16 = 1;
          while (1)
          {
            WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
            if ((v17 & 1) == 0)
            {
              if (WebCore::operator==())
              {
                v14 = WebCore::operator==();
                if ((v14 & 1) != 0)
                  break;
              }
            }
            v12 = (v12 + v16) & v11;
            v13 = (double *)(v10 + 72 * v12);
            v14 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
            ++v16;
            if ((_DWORD)v14)
              goto LABEL_11;
          }
          v9 = v71;
          v18 = *v71;
          if (!*v71)
          {
            v5 = v70;
            goto LABEL_14;
          }
          v19 = *(_DWORD *)(v18 - 4);
          v5 = v70;
          goto LABEL_13;
        }
LABEL_11:
        v5 = v70;
        v9 = v71;
        v18 = *v71;
        if (*v71)
        {
          v19 = *(_DWORD *)(v18 - 4);
          v13 = (double *)(v18 + 72 * v19);
LABEL_13:
          if ((double *)(v18 + 72 * v19) != v13)
          {
LABEL_14:
            if (v8 - v13[8] <= 30.0)
              goto LABEL_96;
            v13[8] = v8;
LABEL_39:
            v33 = *v9;
            if (!*v9)
              goto LABEL_78;
            v34 = *(_DWORD *)(v33 - 4);
            if (!v34)
              goto LABEL_78;
            v35 = 0;
            v36 = v34 - 1;
            do
            {
              v37 = v36;
              v38 = v33 + 72 * v36;
              if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
              {
                WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v33 + 72 * v36));
                if ((v39 & 1) == 0 && v8 - *(double *)(v33 + 72 * v36 + 64) > 30.0)
                {
                  v40 = *(unsigned int *)(v38 + 56);
                  if ((_DWORD)v40 != -1)
                    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v40])(&v73, v38 + 32);
                  *(_DWORD *)(v38 + 56) = -1;
                  v41 = *(unsigned int *)(v38 + 24);
                  if ((_DWORD)v41 != -1)
                    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v41])(&v73, v33 + 72 * v36);
                  *(_QWORD *)v38 = -1;
                  *(_QWORD *)(v38 + 8) = 0;
                  *(_DWORD *)(v38 + 16) = 0;
                  ++v35;
                  *(_DWORD *)(v38 + 24) = 0;
                }
              }
              --v36;
            }
            while (v37);
            v42 = *v71;
            if (v35)
            {
              *(_DWORD *)(v42 - 16) += v35;
              v43 = *v71;
              if (*v71)
                v44 = *(_DWORD *)(v43 - 12);
              else
                v44 = 0;
              *(_DWORD *)(v43 - 12) = v44 - v35;
              v42 = *v71;
            }
            if (!v42)
              goto LABEL_78;
            v45 = *(_DWORD *)(v42 - 4);
            v46 = *(unsigned int *)(v42 - 12);
            if (v45 < 9 || 6 * (int)v46 >= v45)
              goto LABEL_78;
            v48 = (v46 - 1) | ((v46 - 1) >> 1) | ((((_DWORD)v46 - 1) | ((v46 - 1) >> 1)) >> 2);
            v49 = v48 | (v48 >> 4) | ((v48 | (v48 >> 4)) >> 8);
            v50 = (v49 | HIWORD(v49)) + 1;
            if (v50 > 0x400)
            {
              if (v50 > 2 * v46)
                goto LABEL_71;
            }
            else if (3 * v50 > 4 * v46)
            {
LABEL_66:
              v51 = (double)v46;
              v52 = (double)v50;
              v53 = 0.604166667;
LABEL_72:
              if (v52 * v53 <= v51)
                LODWORD(v50) = 2 * v50;
              if (v50 <= 8)
                v54 = 8;
              else
                v54 = v50;
              WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(v71, v54, 0);
LABEL_78:
              v14 = (uint64_t)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*(WebCore::SecurityOriginData **)(v5 + 80), v6);
              v55 = *(WebKit::OriginStorageManager **)(v14 + 64);
              v56 = (const WTF::String *)*((_QWORD *)v55 + 2);
              if (v56)
              {
                *(_DWORD *)v56 += 2;
                WebKit::originFilePath((WTF::StringImpl *)&v73, v56);
                WTF::FileSystemImpl::updateFileModificationTime((WTF::FileSystemImpl *)&v73, v57);
                v14 = (uint64_t)v73;
                v73 = 0;
                if (v14)
                {
                  if (*(_DWORD *)v14 == 2)
                    v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
                  else
                    *(_DWORD *)v14 -= 2;
                }
                if (*(unsigned __int8 *)(v5 + 289) <= 1u)
                {
                  v58 = WebKit::OriginStorageManager::defaultBucket(v55);
                  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v58, 0x8000, &v73);
                  WTF::FileSystemImpl::updateFileModificationTime((WTF::FileSystemImpl *)&v73, v59);
                  v14 = (uint64_t)v73;
                  v73 = 0;
                  if (v14)
                  {
                    if (*(_DWORD *)v14 == 2)
                      v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
                    else
                      *(_DWORD *)v14 -= 2;
                  }
                  if (!*(_BYTE *)(v5 + 289))
                  {
                    v60 = WebKit::OriginStorageManager::defaultBucket(v55);
                    WebKit::OriginStorageManager::StorageBucket::resolvedPath(v60, 128, &v73);
                    WTF::FileSystemImpl::updateFileModificationTime((WTF::FileSystemImpl *)&v73, v61);
                    v14 = (uint64_t)v73;
                    v73 = 0;
                    if (v14)
                    {
                      if (*(_DWORD *)v14 == 2)
                        v14 = WTF::StringImpl::destroy((WTF::StringImpl *)v14, v15);
                      else
                        *(_DWORD *)v14 -= 2;
                    }
                  }
                }
                if (*(_DWORD *)v56 == 2)
                  v14 = WTF::StringImpl::destroy(v56, v15);
                else
                  *(_DWORD *)v56 -= 2;
              }
LABEL_96:
              if (*(_BYTE *)(v5 + 216))
              {
                if (*(_BYTE *)(v5 + 280))
                  goto LABEL_102;
                if (*(_BYTE *)(v5 + 248))
                {
                  v62 = *(double *)(v5 + 208) * (double)*(unint64_t *)(v5 + 240);
LABEL_100:
                  *(_BYTE *)(v5 + 280) = 1;
LABEL_101:
                  *(_QWORD *)(v5 + 272) = (unint64_t)v62;
LABEL_102:
                  if (*(_BYTE *)(v5 + 264))
                  {
                    v63 = *(_QWORD *)(v5 + 256) + a2;
                    *(_QWORD *)(v5 + 256) = v63;
                    *(_BYTE *)(v5 + 264) = 1;
                    if (v63 <= *(_QWORD *)(v5 + 272))
                      goto LABEL_113;
                  }
                  if (*(_BYTE *)(v5 + 288))
                    goto LABEL_113;
                  *(_BYTE *)(v5 + 288) = 1;
                  WTF::RunLoop::main((WTF::RunLoop *)v14);
                  v64 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v5 + 16);
                  if (v64)
                  {
                    v65 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v64);
                    goto LABEL_107;
                  }
LABEL_116:
                  v65 = 0;
LABEL_107:
                  v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v66 = &off_1E34C6A30;
                  *((_QWORD *)v66 + 1) = v5;
                  *((_QWORD *)v66 + 2) = v65;
                  *((_QWORD *)v66 + 3) = v5;
                  v73 = v66;
                  WTF::RunLoop::dispatch();
                  v14 = (uint64_t)v73;
                  v73 = 0;
                  if (v14)
                    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
                  goto LABEL_113;
                }
                v14 = WTF::FileSystemImpl::volumeCapacity((WTF::FileSystemImpl *)(v5 + 56), v15);
                if (v67)
                {
                  if (!*(_BYTE *)(v5 + 216))
                  {
                    __break(1u);
                    goto LABEL_116;
                  }
                  v62 = *(double *)(v5 + 208) * (double)((v14 + 0x3FFFFFFF) & 0xFFFFFFFFC0000000);
                  if (*(_BYTE *)(v5 + 280))
                    goto LABEL_101;
                  goto LABEL_100;
                }
              }
LABEL_113:
              WTF::RunLoop::main((WTF::RunLoop *)v14);
              v68 = v72;
              v69 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v69 = &off_1E34C6B20;
              *((_QWORD *)v69 + 1) = v68;
              v73 = v69;
              WTF::RunLoop::dispatch();
              result = v73;
              v73 = 0;
              if (result)
                return (WTF::WallTime *)(*(uint64_t (**)(WTF::WallTime *))(*(_QWORD *)result + 8))(result);
              return result;
            }
            LODWORD(v50) = 2 * v50;
            if (v50 <= 0x400)
              goto LABEL_66;
LABEL_71:
            v51 = (double)v46;
            v52 = (double)v50;
            v53 = 0.416666667;
            goto LABEL_72;
          }
          goto LABEL_17;
        }
      }
      WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v9, 0);
      v18 = *v9;
      if (!*v9)
      {
        v20 = 0;
LABEL_19:
        v21 = (uint64_t)v4 + 56;
        v22 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)v4 + 24) & v20;
        v23 = (double *)(v18 + 72 * v22);
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) != 0)
        {
          v9 = v71;
        }
        else
        {
          v24 = 0;
          v25 = 1;
          do
          {
            WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v23);
            if ((v26 & 1) != 0)
            {
              v24 = v23;
            }
            else if (WebCore::operator==() && WebCore::operator==())
            {
              *(double *)(v18 + 72 * v22 + 64) = v8;
              v5 = v70;
              v9 = v71;
              goto LABEL_39;
            }
            v22 = ((_DWORD)v22 + v25) & v20;
            v23 = (double *)(v18 + 72 * v22);
            ++v25;
          }
          while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
          v5 = v70;
          v9 = v71;
          if (v24)
          {
            v24[8] = 0.0;
            *((_OWORD *)v24 + 2) = 0u;
            *((_OWORD *)v24 + 3) = 0u;
            *(_OWORD *)v24 = 0u;
            *((_OWORD *)v24 + 1) = 0u;
            --*(_DWORD *)(*v71 - 16);
            v23 = v24;
          }
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, v6);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v23 + 4), v21);
        v23[8] = v8;
        v27 = *v9;
        if (*v9)
          v28 = *(_DWORD *)(v27 - 12) + 1;
        else
          v28 = 1;
        *(_DWORD *)(v27 - 12) = v28;
        v29 = *v9;
        if (*v9)
          v30 = *(_DWORD *)(v29 - 12);
        else
          v30 = 0;
        v31 = (*(_DWORD *)(v29 - 16) + v30);
        v32 = *(unsigned int *)(v29 - 4);
        if (v32 > 0x400)
        {
          if (v32 > 2 * v31)
            goto LABEL_39;
        }
        else if (3 * v32 > 4 * v31)
        {
          goto LABEL_39;
        }
        WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v9, (unsigned int *)v23);
        goto LABEL_39;
      }
LABEL_17:
      v20 = *(_DWORD *)(v18 - 8);
      goto LABEL_19;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::operator() const(unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34C6B20;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::operator() const(unsigned long long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C6B20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENS3_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vJNS_23ObjectIdentifierGenericINS2_34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEyyyEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_1E34C6B48;
  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v2])(&v5, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENS3_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vJNS_23ObjectIdentifierGenericINS2_34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEyyyEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)this = &off_1E34C6B48;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v7, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager20originStorageManagerERKN7WebCore12ClientOriginENS3_21ShouldWriteOriginFileEENK3__0clEvEUlT_T0_T1_T2_E_vJNS_23ObjectIdentifierGenericINS2_34QuotaIncreaseRequestIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEyyyEE4callESJ_yyy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v6[6];
  uint64_t v7;

  v7 = a2;
  v5 = *(_QWORD *)(a1 + 80);
  v6[0] = a1 + 8;
  v6[1] = a1 + 16;
  v6[2] = &v7;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  IPC::Connection::send<Messages::NetworkProcessProxy::IncreaseQuota>(v5, (uint64_t)v6);
}

void WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v5, a2);
}

void WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::WallTime>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::WallTime,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 72 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (unsigned int *)(v4 + 72 * v11);
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
      if ((v15 & 1) == 0)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
        {
          v16 = v14[14];
          if ((_DWORD)v16 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v16])(&v31, v14 + 8);
          v14[14] = -1;
          v17 = v14[6];
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v17])(&v32, v4 + 72 * v11);
          v14[6] = -1;
        }
        else
        {
          v18 = *a1;
          v30 = v12;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::computeHash<WebCore::ClientOrigin>(v4 + 72 * v11);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v12 = v18 + 72 * (v20 & v19);
            v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
            v20 = ++v21 + v22;
          }
          while (!v23);
          v24 = *(unsigned int *)(v12 + 56);
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v24])(&v33, v12 + 32);
          *(_DWORD *)(v12 + 56) = -1;
          v25 = *(unsigned int *)(v12 + 24);
          if ((_DWORD)v25 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v25])(&v34, v18 + 72 * v22);
          *(_BYTE *)v12 = 0;
          *(_DWORD *)(v12 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 72 * v22, v4 + 72 * v11);
          *(_BYTE *)(v12 + 32) = 0;
          *(_DWORD *)(v12 + 56) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v12 + 32, (uint64_t)(v14 + 8));
          *(_QWORD *)(v18 + 72 * v22 + 64) = *(_QWORD *)(v4 + 72 * v11 + 64);
          v26 = v14[14];
          if ((_DWORD)v26 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v26])(&v35, v14 + 8);
          v14[14] = -1;
          v27 = v14[6];
          if ((_DWORD)v27 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v27])(&v36, v4 + 72 * v11);
          v14[6] = -1;
          if (v14 != a3)
            v12 = v30;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchRegistrableDomainsForPersist(void)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C6B70;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchRegistrableDomainsForPersist(void)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C6B70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchRegistrableDomainsForPersist(void)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::call(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v6, v3, *((_QWORD *)result + 2));
    v4 = v6;
    if (v6)
    {
      WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(v6, a2);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v5);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  unsigned __int8 *v4;

  *a1 = &off_1E34C6B98;
  v3 = (WTF::StringImpl **)a1[4];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  unsigned __int8 *v4;

  *(_QWORD *)this = &off_1E34C6B98;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  const WebCore::ClientOrigin *v9;
  unsigned int v10;
  void *v11;
  const WebCore::ClientOrigin *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[2];
  const WebCore::ClientOrigin *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = result;
    v3 = *((_QWORD *)result + 1);
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v20, v1, *((_QWORD *)result + 3));
    v5 = v20;
    if (v20)
    {
      if (*(_BYTE *)(v3 + 336))
      {
        v6 = *((_QWORD *)v2 + 4);
        *((_QWORD *)v2 + 4) = 0;
        v7 = *(WTF::StringImpl ***)(v3 + 328);
        *(_QWORD *)(v3 + 328) = v6;
        if (v7)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v4);
      }
      else
      {
        *(_QWORD *)(v3 + 328) = 0;
        v8 = *((_QWORD *)v2 + 4);
        *((_QWORD *)v2 + 4) = 0;
        *(_QWORD *)(v3 + 328) = v8;
        *(_BYTE *)(v3 + 336) = 1;
      }
      v9 = *(const WebCore::ClientOrigin **)(v3 + 312);
      v17 = v9;
      v10 = *(_DWORD *)(v3 + 324);
      v18 = *(_DWORD *)(v3 + 320);
      v19 = v10;
      v16[0] = 0;
      *(_QWORD *)(v3 + 312) = 0;
      v16[1] = 0;
      *(_QWORD *)(v3 + 320) = 0;
      WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v4);
      if (v10)
      {
        v12 = (const WebCore::ClientOrigin *)((char *)v9 + 72 * v10);
        do
        {
          v13 = WebKit::NetworkStorageManager::persistOrigin(v3, v9);
          v14 = *((_QWORD *)v9 + 8);
          *((_QWORD *)v9 + 8) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v13);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          v9 = (const WebCore::ClientOrigin *)((char *)v9 + 72);
        }
        while (v9 != v12);
      }
      WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v11);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v15);
    }
  }
  return result;
}

uint64_t std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v4;
  return a1;
}

unint64_t WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 72 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(72 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = (uint64_t)result;
        v8 = 72 * v4;
        v9 = (char *)v3 + 32;
        do
        {
          std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>::pair[abi:sn180100](v7, (uint64_t)(v9 - 32));
          result = (unsigned int *)*((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          v10 = *((unsigned int *)v9 + 6);
          if ((_DWORD)v10 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v10])(&v12, v9);
          *((_DWORD *)v9 + 6) = -1;
          v11 = *((unsigned int *)v9 - 2);
          if ((_DWORD)v11 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v11])(&v13, v9 - 32);
          *((_DWORD *)v9 - 2) = -1;
          v7 += 72;
          v9 += 72;
          v8 -= 72;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::persist(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C6BC0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::persist(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C6BC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::persist(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  _QWORD *v11;
  WTF::StringImpl **v12;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v11, v1, *((_QWORD *)result + 2));
    v2 = v11;
    if (v11)
    {
      v3 = v11[4];
      if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
      {
        v5 = v11[5];
        v6 = (WTF::ThreadSafeWeakPtrControlBlock *)v11[2];
        if (v6)
          v7 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
        else
          v7 = 0;
        v8 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v8 = &off_1E34C6B70;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(v8 + 16) = v2;
        v12 = (WTF::StringImpl **)v8;
        WebKit::NetworkProcess::registrableDomainsExemptFromWebsiteDataDeletion(v4, v5, (uint64_t *)&v12);
        v10 = v12;
        v12 = 0;
        if (v10)
          (*((void (**)(WTF::StringImpl **))*v10 + 1))(v10);
      }
      else
      {
        v12 = 0;
        WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist((uint64_t)v11, (uint64_t *)&v12);
        if (v12)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>((unsigned __int8 *)v2[2], v9);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6BE8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6BE8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData **v2;
  WebCore::SecurityOriginData *v3;
  WebCore::SecurityOriginData *v4;
  WTF::RunLoop *v5;
  WebCore::SecurityOriginData *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::SecurityOriginData *result;
  __int128 v11;
  WTF::StringImpl *v12;
  WebCore::SecurityOriginData *v13[2];
  WTF::RunLoop *v14;

  v2 = *(WebCore::SecurityOriginData ***)(a1 + 8);
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v14, v2);
  v4 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin((uint64_t *)&v14);
  v13[0] = v4;
  v13[1] = v3;
  v5 = v14;
  if (v14)
    v6 = (WTF::RunLoop *)((char *)v14 + 64 * (unint64_t)*((unsigned int *)v14 - 1));
  else
    v6 = 0;
  if (v6 != v4)
  {
    while (1)
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v12, (const WebCore::ClientOrigin *)v2, v4);
      v8 = v12;
      if (v12)
      {
        if (!*((_DWORD *)v12 + 1))
        {
          v12 = 0;
LABEL_9:
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
          goto LABEL_12;
        }
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v12, v7);
        v8 = v12;
        v12 = 0;
        if (v8)
          goto LABEL_9;
      }
LABEL_12:
      v13[0] = (WebCore::SecurityOriginData *)((char *)v13[0] + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v13);
      v4 = v13[0];
      if (v13[0] == v6)
      {
        v5 = v14;
        break;
      }
    }
  }
  if (v5)
    v5 = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable((uint64_t)v5, v3);
  WTF::RunLoop::main(v5);
  v11 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v9 = &off_1E34C6C10;
  *(_OWORD *)(v9 + 8) = v11;
  v13[0] = (WebCore::SecurityOriginData *)v9;
  WTF::RunLoop::dispatch();
  result = v13[0];
  v13[0] = 0;
  if (result)
    return (WebCore::SecurityOriginData *)(*(uint64_t (**)(WebCore::SecurityOriginData *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6C10;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6C10;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetStoragePersistedState(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(uint64_t a1, WebCore::SecurityOriginData *a2)
{
  unsigned int v2;
  WebCore::SecurityOriginData *v4[2];

  if (a1)
    v2 = *(_DWORD *)(a1 - 4);
  else
    v2 = 0;
  v4[0] = a2;
  v4[1] = (WebCore::SecurityOriginData *)(a1 + 72 * v2);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v4);
  return v4[0];
}

double WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  double result;
  WebCore::SecurityOriginData *v4;
  int v5;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
      {
        result = WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v5)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 72);
      *a1 = v1;
    }
    while (v1 != v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C6C38;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C6C38;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebCore::SecurityOriginData *v3;
  WebCore::SecurityOriginData *v4;
  double result;
  WebCore::SecurityOriginData *v6;
  uint64_t v7;
  WebCore::SecurityOriginData *v8;
  uint64_t v9;
  WebCore::SecurityOriginData *v10[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v2 + 80));
  v6 = v3;
  v7 = *(_QWORD *)(v2 + 80);
  if (v7)
    v8 = (WebCore::SecurityOriginData *)(v7 + 72 * *(unsigned int *)(v7 - 4));
  else
    v8 = 0;
  v10[1] = v4;
  if (v8 != v3)
  {
    do
    {
      v9 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v6 + 8)) + 7);
      if (v9)
        WebKit::SessionStorageManager::removeNamespace(v9, *(_QWORD *)(a1 + 24));
      v10[0] = (WebCore::SecurityOriginData *)((char *)v6 + 72);
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v10);
      v6 = v10[0];
    }
    while (v10[0] != v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C6C60;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C6C60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  double result;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  uint64_t v10;
  WebCore::SecurityOriginData *v11[2];

  v1 = a1[1];
  v2 = a1[3];
  v3 = a1[4];
  v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v1 + 80));
  v7 = v4;
  v8 = *(_QWORD *)(v1 + 80);
  if (v8)
    v9 = (WebCore::SecurityOriginData *)(v8 + 72 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  v11[1] = v5;
  if (v9 != v4)
  {
    do
    {
      v10 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v7 + 8)) + 7);
      if (v10)
        WebKit::SessionStorageManager::cloneStorageArea(v10, v2, v3);
      v11[0] = (WebCore::SecurityOriginData *)((char *)v7 + 72);
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v11);
      v7 = v11[0];
    }
    while (v11[0] != v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didIncreaseQuota(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<unsigned long long>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  *(_QWORD *)a1 = &off_1E34C6C88;
  v3 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v7, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didIncreaseQuota(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  *(_QWORD *)this = &off_1E34C6C88;
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v7, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return WTF::fastFree(this, a2);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::didIncreaseQuota(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*(WebCore::SecurityOriginData **)(*(_QWORD *)(a1 + 8) + 80), a1 + 24);
  if (result)
  {
    v3 = *((_QWORD *)result + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 48);
      if (*(_BYTE *)(v4 + 64))
      {
        if (*(_QWORD *)(v4 + 56) == *(_QWORD *)(a1 + 88))
        {
          if (*(_BYTE *)(a1 + 104))
          {
            v5 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(v4 + 80) = 0;
            *(_QWORD *)(v4 + 88) = v5;
          }
          result = (WebCore::SecurityOriginData *)WebKit::OriginQuotaManager::grantWithCurrentQuota((WebKit::OriginQuotaManager *)v4, *(_QWORD *)(v4 + 40));
          if (*(_BYTE *)(v4 + 64))
          {
            v6 = *(_QWORD *)(v4 + 48);
            *(_QWORD *)(v4 + 48) = 0;
            (*(void (**)(uint64_t, WebCore::SecurityOriginData *))(*(_QWORD *)v6 + 16))(v6, result);
            result = (WebCore::SecurityOriginData *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
            if (*(_BYTE *)(v4 + 64))
            {
              result = *(WebCore::SecurityOriginData **)(v4 + 48);
              *(_QWORD *)(v4 + 48) = 0;
              if (result)
                result = (WebCore::SecurityOriginData *)(*(uint64_t (**)(WebCore::SecurityOriginData *))(*(_QWORD *)result + 8))(result);
              *(_BYTE *)(v4 + 64) = 0;
            }
            if (!*(_BYTE *)(v4 + 72))
              return (WebCore::SecurityOriginData *)WebKit::OriginQuotaManager::handleRequests((_BYTE *)v4);
          }
          else
          {
            __break(1u);
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C6890[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C6CA0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C68A0[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C6CB0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN6WebKit22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E34C68B0 + v4))(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C6CC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit30FileSystemSyncAccessHandleInfoENS8_22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  *a2 = *a3;
  result = WebCore::FileHandle::FileHandle();
  a2[4] = a3[4];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit30FileSystemSyncAccessHandleInfoENS8_22FileSystemStorageErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getAllOrigins(void)::$_0,void,WTF::String const&>::call(uint64_t a1, const WTF::String **a2)
{
  const WTF::String *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[3];
  _BYTE v10[72];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  WebKit::originFilePath((WTF::StringImpl *)v9, v3);
  WebCore::StorageUtilities::readOriginFromFile((WebCore::StorageUtilities *)v9, v4);
  v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v10[64])
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(*(uint64_t **)(a1 + 8), (uint64_t)v10, (uint64_t)v9);
  result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v8);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6D08;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6D08;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData **v2;
  int v3;
  int v4;
  void *v5;
  WebCore::SecurityOriginData *v6;
  unint64_t v7;
  WTF::RunLoop *v8;
  WebKit::OriginStorageManager *v9;
  WTF::StringImpl *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  double v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  int64x2_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69[3];
  int v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75[3];
  int v76;
  uint64_t Table;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *(WebCore::SecurityOriginData ***)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 28);
  v67 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)v75, v2);
  v6 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(v75);
  v7 = 0;
  v71.i64[0] = (uint64_t)v6;
  v71.i64[1] = (uint64_t)v5;
  v8 = (WTF::RunLoop *)v75[0];
  if (v75[0])
    v7 = v75[0] + ((unint64_t)*(unsigned int *)(v75[0] - 4) << 6);
  if ((WebCore::SecurityOriginData *)v7 != v6)
  {
    do
    {
      v9 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)v2, v6);
      v10 = WebKit::OriginStorageManager::defaultBucket(v9);
      WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList(v10, v3, v4 != 0, v69);
      WebKit::updateOriginData(&v67, (uint64_t)v6 + 32, v69);
      if ((WebCore::operator==() & 1) == 0)
        WebKit::updateOriginData(&v67, (uint64_t)v6, v69);
      WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v6);
      if (v69[0])
        WTF::fastFree((WTF *)(v69[0] - 16), v11);
      v71.i64[0] += 64;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets((WebCore::SecurityOriginData **)&v71);
      v6 = (WebCore::SecurityOriginData *)v71.i64[0];
    }
    while (v71.i64[0] != v7);
    v8 = (WTF::RunLoop *)v75[0];
  }
  if (v8)
    v8 = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable((uint64_t)v8, v5);
  v64 = 0;
  v65 = 0;
  v12 = v67;
  if (!v67)
    goto LABEL_92;
  if (*(_DWORD *)(v67 - 12))
  {
    v13 = v67 + 40 * *(unsigned int *)(v67 - 4);
    v71.i64[0] = v67;
    v71.i64[1] = v13;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets((WebCore::SecurityOriginData **)&v71);
    v14 = v71;
    v15 = *(_DWORD *)(v12 - 4);
  }
  else
  {
    v15 = *(_DWORD *)(v67 - 4);
    v14 = vdupq_n_s64(v67 + 40 * (unint64_t)v15);
  }
  v66 = v14;
  v16 = v14.i64[0];
  v17 = v12 + 40 * v15;
  if (v17 == v14.i64[0])
  {
LABEL_82:
    v47 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v47)
    {
      v48 = v12;
      do
      {
        v49.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v48);
        if ((v50 & 1) == 0)
        {
          v51 = *(_QWORD *)(v48 + 32);
          if (v51)
            WTF::fastFree((WTF *)(v51 - 16), v5);
          v52 = *(unsigned int *)(v48 + 24);
          if ((_DWORD)v52 != -1)
            ((void (*)(int64x2_t *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v52])(&v71, v48, v49);
          *(_DWORD *)(v48 + 24) = -1;
        }
        v48 += 40;
        --v47;
      }
      while (v47);
    }
    v8 = (WTF::RunLoop *)WTF::fastFree((WTF *)(v12 - 16), v5);
    goto LABEL_92;
  }
  do
  {
    LOBYTE(v75[0]) = 0;
    v76 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v75, v16);
    Table = 0;
    v19 = *(_QWORD *)(v16 + 32);
    if (!v19)
      goto LABEL_78;
    v20 = *(unsigned int *)(v19 - 12);
    if ((_DWORD)v20)
    {
      v21 = (v20 - 1) | ((v20 - 1) >> 1) | ((((_DWORD)v20 - 1) | ((v20 - 1) >> 1)) >> 2);
      v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
      v23 = (v22 | HIWORD(v22)) + 1;
      if (v23 > 0x400)
      {
        if (v23 > 2 * v20)
          goto LABEL_24;
      }
      else if (3 * v23 > 4 * v20)
      {
LABEL_22:
        v24 = (double)v20;
        v25 = (double)v23 * 0.604166667;
        goto LABEL_25;
      }
      LODWORD(v23) = 2 * v23;
      if (v23 <= 0x400)
        goto LABEL_22;
LABEL_24:
      v24 = (double)v20;
      v25 = (double)v23 * 0.416666667;
LABEL_25:
      if (v25 <= v24)
        LODWORD(v23) = 2 * v23;
      if (v23 <= 8)
        v26 = 8;
      else
        v26 = v23;
      Table = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::allocateTable(v26);
      *(_DWORD *)(Table - 4) = v26;
      *(_DWORD *)(Table - 8) = v26 - 1;
      *(_DWORD *)(Table - 12) = v20;
      *(_DWORD *)(Table - 16) = 0;
      v27 = *(_DWORD **)(v16 + 32);
      if (v27)
      {
        v28 = *(v27 - 1);
        v29 = &v27[4 * v28];
        if (*(v27 - 3))
        {
          v30 = *(_DWORD **)(v16 + 32);
          if ((_DWORD)v28)
          {
            v31 = 16 * v28;
            v30 = *(_DWORD **)(v16 + 32);
            while (*v30 >= 0xFFFFFFFE)
            {
              v30 += 4;
              v31 -= 16;
              if (!v31)
              {
                v30 = v29;
                goto LABEL_40;
              }
            }
          }
          goto LABEL_40;
        }
        v30 = &v27[4 * v28];
      }
      else
      {
        v30 = 0;
        v28 = 0;
      }
      v29 = &v27[4 * v28];
LABEL_40:
      if (v27)
        v27 += 4 * *(v27 - 1);
      while (v30 != v27)
      {
        if (Table)
          v32 = *(_DWORD *)(Table - 8);
        else
          v32 = 0;
        v33 = 0;
        v34 = *v30 + ~(*v30 << 15);
        v35 = (9 * (v34 ^ (v34 >> 10))) ^ ((9 * (v34 ^ (v34 >> 10))) >> 6);
        v36 = (v35 + ~(v35 << 11)) ^ ((v35 + ~(v35 << 11)) >> 16);
        do
        {
          v37 = v36 & v32;
          v36 = ++v33 + v37;
        }
        while (*(_DWORD *)(Table + 16 * v37) != -1);
        *(_OWORD *)(Table + 16 * v37) = *(_OWORD *)v30;
        v38 = v30 + 4;
        v30 = v29;
        if (v38 != v29)
        {
          v30 = v38;
          while (*v30 >= 0xFFFFFFFE)
          {
            v30 += 4;
            if (v30 == v29)
            {
              v30 = v29;
              break;
            }
          }
        }
      }
    }
    v39 = Table;
    if (Table)
    {
      if (!*(_DWORD *)(Table - 12))
        goto LABEL_77;
      v40 = *(unsigned int *)(Table - 4);
      v41 = Table;
      if ((_DWORD)v40)
      {
        v42 = 0;
        while (*(_DWORD *)(Table + v42) >= 0xFFFFFFFE)
        {
          v42 += 16;
          if (16 * v40 == v42)
            goto LABEL_76;
        }
        v41 = Table + v42;
      }
      v43 = Table + 16 * v40;
      if (v43 != v41)
      {
        v44 = *(_DWORD *)v41;
LABEL_64:
        v45 = *(_QWORD *)(v41 + 8);
        LOBYTE(v69[0]) = 0;
        v70 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v69, (uint64_t)v75);
        v71.i8[0] = 0;
        LODWORD(v73) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v71, (uint64_t)v69);
        LODWORD(v74) = v44;
        *((_QWORD *)&v74 + 1) = v45;
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)&v64, (unint64_t)&v71);
        }
        else
        {
          v46 = v64 + 48 * HIDWORD(v65);
          *(_BYTE *)v46 = 0;
          *(_DWORD *)(v46 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v46, (uint64_t)&v71);
          *(_OWORD *)(v46 + 32) = v74;
          ++HIDWORD(v65);
        }
        if ((_DWORD)v73 != -1)
          ((void (*)(char *, int64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v73])(&v68, &v71);
        LODWORD(v73) = -1;
        if (v70 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v70])(&v68, v69);
        v70 = -1;
        while (1)
        {
          v41 += 16;
          if (v41 == v43)
            break;
          v44 = *(_DWORD *)v41;
          if (*(_DWORD *)v41 < 0xFFFFFFFE)
          {
            if (v41 != v43)
              goto LABEL_64;
            break;
          }
        }
        v39 = Table;
      }
LABEL_76:
      if (v39)
LABEL_77:
        WTF::fastFree((WTF *)(v39 - 16), v18);
    }
LABEL_78:
    if (v76 != -1)
      ((void (*)(int64x2_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v76])(&v71, v75);
    v66.i64[0] += 40;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets((WebCore::SecurityOriginData **)&v66);
    v16 = v66.i64[0];
  }
  while (v66.i64[0] != v17);
  v12 = v67;
  if (v67)
    goto LABEL_82;
LABEL_92:
  WTF::RunLoop::main(v8);
  v53 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v54 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v71.i64[0] = v53;
  v71.i64[1] = v54;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v64, (uint64_t)&v72);
  v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v55 = off_1E34C6D30;
  v55[1] = v71.i64[0];
  v56 = v71.i64[1];
  v71 = 0uLL;
  v55[2] = v56;
  v55[3] = v72;
  v57 = v73;
  v72 = 0;
  v73 = 0;
  v55[4] = v57;
  v75[0] = (uint64_t)v55;
  WTF::RunLoop::dispatch();
  v59 = v75[0];
  v75[0] = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v58);
  v61 = v71.i64[1];
  v71.i64[1] = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = v71.i64[0];
  v71.i64[0] = 0;
  if (v62)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v62 + 16), v60);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v60);
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  char v8;
  _BYTE v9[24];
  int v10;
  __int128 v11;
  uint64_t v12;

  v2 = result;
  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *(_DWORD *)(result + 12);
  if (v5)
  {
    v6 = v4 + 48 * v5;
    do
    {
      WebKit::WebsiteData::Entry::isolatedCopy(v4, (uint64_t)v9);
      result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4, (uint64_t)v9);
      *(_OWORD *)(v4 + 32) = v11;
      if (v10 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v10])(&v8, v9);
      v4 += 48;
    }
    while (v4 < v6);
    v4 = *(_QWORD *)v2;
    v5 = *(_DWORD *)(v2 + 12);
  }
  *(_QWORD *)a2 = v4;
  v7 = *(_DWORD *)(v2 + 8);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1E34C6D30;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34C6D30;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v3);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::fetchData(WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::NetworkStorageManager::ShouldComputeSize,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *a1 = off_1E34C6D58;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34C6D58;
  v3 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  return WTF::fastFree(a1, v4);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  WTF::RunLoop *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  WebCore::SecurityOriginData *result;
  _QWORD v16[3];
  WebCore::SecurityOriginData *v17;
  uint64_t v18[3];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(WebCore::SecurityOriginData ***)(a1 + 8);
  v17 = 0;
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reserveInitialCapacity(&v17, *(_DWORD *)(a1 + 44));
  v3 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 32 * v3;
    do
    {
      LOBYTE(v18[0]) = 0;
      v19 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v18, v4);
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v17, (uint64_t)v18, (uint64_t)v16);
      if (v19 != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v19])(v16, v18);
      v4 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  v6 = *(_DWORD *)(a1 + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34C6D80;
  v7[1] = &v17;
  v16[0] = v7;
  WebKit::NetworkStorageManager::deleteDataOnDisk(v18, v2, v6, v16, -INFINITY);
  if (v18[0])
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v18[0], v8);
  v9 = (WTF::RunLoop *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  WTF::RunLoop::main(v9);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C6DA8;
  v12[1] = v10;
  v12[2] = v11;
  v16[0] = v12;
  WTF::RunLoop::dispatch();
  v14 = v16[0];
  v16[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v17;
  if (v17)
    return (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v17, v13);
  return result;
}

void WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reserveInitialCapacity(_QWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(a2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  v5 = WTF::fastMalloc((WTF *)((32 * v4) | 0x10));
  bzero((void *)(v5 + 16), 32 * v4);
  *a1 = v5 + 16;
  *(_DWORD *)(v5 + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlT_E_bJRKNS8_12ClientOriginEEE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  _BYTE v7[24];
  int v8;
  _BYTE v9[24];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  v8 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v7, a2);
  v9[0] = 0;
  v10 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a2 + 32);
  if ((WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(*(uint64_t **)(a1 + 8), (uint64_t)v7) & 1) != 0)v4 = 1;
  else
    v4 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(*(uint64_t **)(a1 + 8), (uint64_t)v9);
  if (v10 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v10])(&v6, v9);
  v10 = -1;
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v8])(&v6, v7);
  return v4;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6DA8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6DA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  *(_QWORD *)a1 = &off_1E34C6DD0;
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  *(_QWORD *)this = &off_1E34C6DD0;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData **v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[3];
  int v15;
  _BYTE v16[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(WebCore::SecurityOriginData ***)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24);
  LOBYTE(v14[0]) = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, a1 + 32);
  v16[0] = 0;
  v17 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v16, a1 + 64);
  v4 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v4 = &off_1E34C6DF8;
  *(_BYTE *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4 + 8, (uint64_t)v14);
  *(_BYTE *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4 + 40, (uint64_t)v16);
  v11 = v4;
  WebKit::NetworkStorageManager::deleteDataOnDisk(&v12, v2, v3, &v11, -INFINITY);
  if (v12)
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v12, v5);
  v6 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v17 != -1)
    v6 = (WTF::RunLoop *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v17])(&v13, v16);
  v17 = -1;
  if (v15 != -1)
    v6 = (WTF::RunLoop *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v15])(&v13, v14);
  WTF::RunLoop::main(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34C6E20;
  v9[1] = v7;
  v9[2] = v8;
  v14[0] = v9;
  WTF::RunLoop::dispatch();
  result = v14[0];
  v14[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJSA_EED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_1E34C6DF8;
  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v2])(&v5, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJSA_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)this = &off_1E34C6DF8;
  v3 = *((unsigned int *)this + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, (char *)this + 40);
  *((_DWORD *)this + 16) = -1;
  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v7, (char *)this + 8);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager10deleteDataENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJSA_EE4callESA_()
{
  return WebCore::operator==();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6E20;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6E20;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6E48;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6E48;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData **v2;
  unsigned int v3;
  double v4;
  uint64_t v5;
  void *v6;
  WTF::RunLoop *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;

  v2 = *(WebCore::SecurityOriginData ***)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24);
  v4 = *(double *)(a1 + 32);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E34C6E70;
  v12 = (_QWORD *)v5;
  WebKit::NetworkStorageManager::deleteDataOnDisk(&v13, v2, v3, &v12, v4);
  if (v13)
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v13, v6);
  v7 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::RunLoop::main(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34C6E98;
  v10[1] = v8;
  v10[2] = v9;
  v12 = v10;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager23deleteDataModifiedSinceENS_9OptionSetINS2_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlRT_E_bJRKN7WebCore12ClientOriginEEE4callESJ_()
{
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C6E98;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6E98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataModifiedSince(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *a1 = off_1E34C6EC0;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34C6EC0;
  v3 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SecurityOriginData **v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  WebCore::SecurityOriginData *v9;
  WebCore::RegistrableDomain *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  _QWORD v23[3];
  WTF::StringImpl *v24;
  WebCore::SecurityOriginData *v25[2];
  WTF::StringImpl **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  int v31;
  _BYTE v32[24];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(WebCore::SecurityOriginData ***)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24);
  v4 = a1 + 32;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34C6EE8;
  v5[1] = v4;
  v28 = v5;
  WebKit::NetworkStorageManager::deleteDataOnDisk(&v27, v2, v3, &v28, -INFINITY);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v26 = 0;
  v6 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v27);
  v7 = v6;
  v8 = 0;
  v25[0] = v6;
  v25[1] = v9;
  if (v27)
    v8 = (WebCore::SecurityOriginData *)(v27 + ((unint64_t)*(unsigned int *)(v27 - 4) << 6));
  if (v8 != v6)
  {
    do
    {
      LOBYTE(v28) = 0;
      v31 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v28, (uint64_t)v7);
      v32[0] = 0;
      v33 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v32, (uint64_t)v7 + 32);
      v10 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)v32);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v10, &v24);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v26, &v24, (uint64_t)v23);
      v12 = v24;
      v24 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (v33 != -1)
        ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v33])(v23, v32);
      v33 = -1;
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v31])(v23, &v28);
      v25[0] = (WebCore::SecurityOriginData *)((char *)v25[0] + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v25);
      v7 = v25[0];
    }
    while (v25[0] != v8);
  }
  WTF::RunLoop::main(v6);
  v13 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v28 = v13;
  v29 = v14;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)&v26, (uint64_t *)&v30);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E34C6F10;
  v15[1] = v28;
  v16 = v29;
  v28 = 0;
  v29 = 0;
  v15[2] = v16;
  v17 = v30;
  v30 = 0;
  v15[3] = v17;
  v23[0] = v15;
  WTF::RunLoop::dispatch();
  v19 = v23[0];
  v23[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v30)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v18);
  v20 = v29;
  v29 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v28;
  v28 = 0;
  if (v21)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>((unsigned __int8 *)v21[2], v18);
  if (v26)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v18);
  result = v27;
  if (v27)
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v27, v18);
  return result;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkStorageManager31deleteDataForRegistrableDomainsENS_9OptionSetINS2_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS9_NS_11DefaultHashIS9_EENS_10HashTraitsIS9_EENS_15HashTableTraitsEEEEEEEN3__0clEvEUlRT_E_bJRKNS8_12ClientOriginEEE4callESX_(uint64_t a1, uint64_t a2)
{
  WebCore::RegistrableDomain *v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  const WTF::StringImpl **v11;

  v3 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)(a2 + 32));
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v3, &v10);
  v4 = *(_QWORD *)(a1 + 8);
  v11 = &v10;
  v7 = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(v4, &v11, v5);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7 != -1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34C6F10;
  v3 = (WTF::StringImpl **)a1[3];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C6F10;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::moveData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  *(_QWORD *)a1 = &off_1E34C6F38;
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::moveData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  *(_QWORD *)this = &off_1E34C6F38;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::moveData(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::NetworkStorageManager *v2;
  uint64_t v3;
  WebKit::OriginStorageManager *v4;
  void *v5;
  WTF::StringImpl *v6;
  WebKit::OriginStorageManager *v7;
  int v8;
  WebKit::OriginStorageManager *v9;
  WTF::StringImpl *v10;
  WebKit::OriginStorageManager *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::RunLoop *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BYTE v21[24];
  int v22;
  _BYTE v23[24];
  int v24;
  _BYTE v25[24];
  int v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(WebKit::NetworkStorageManager **)(a1 + 8);
  v3 = a1 + 32;
  v25[0] = 0;
  v26 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, a1 + 32);
  v27[0] = 0;
  v28 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, v3);
  v21[0] = 0;
  v22 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v21, a1 + 64);
  v23[0] = 0;
  v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, a1 + 64);
  v4 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)v2, (const WebCore::ClientOrigin *)v21);
  v5 = (void *)*(unsigned int *)(a1 + 24);
  v6 = WebKit::OriginStorageManager::defaultBucket(v4);
  WebKit::OriginStorageManager::StorageBucket::deleteData(v6, v5, -INFINITY);
  v7 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)v2, (const WebCore::ClientOrigin *)v25);
  v8 = *(_DWORD *)(a1 + 24);
  v9 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)v2, (const WebCore::ClientOrigin *)v21);
  v10 = WebKit::OriginStorageManager::defaultBucket(v9);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v10, 32, &v20);
  v11 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)v2, (const WebCore::ClientOrigin *)v21);
  v12 = WebKit::OriginStorageManager::defaultBucket(v11);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v12, 128, &v19);
  v13 = WebKit::OriginStorageManager::defaultBucket(v7);
  WebKit::OriginStorageManager::StorageBucket::moveData(v13, v8, (WTF::FileSystemImpl *)&v20, (WTF::FileSystemImpl *)&v19);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible(v2, (const WebCore::ClientOrigin *)v21);
  v17 = (WTF::RunLoop *)WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible(v2, (const WebCore::ClientOrigin *)v25);
  WTF::RunLoop::main(v17);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v20, (uint64_t *)(a1 + 96));
  WTF::RunLoop::dispatch();
  result = v20;
  v20 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v24 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v24])(&v20, v23);
  v24 = -1;
  if (v22 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v22])(&v20, v21);
  if (v28 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v28])(v21, v27);
  v28 = -1;
  if (v26 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v26])(v21, v25);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  *(_QWORD *)a1 = &off_1E34C6F60;
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  *(_QWORD *)this = &off_1E34C6F60;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v9, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::call(WTF::RunLoop *a1)
{
  WTF::RunLoop *v1;
  WebKit::NetworkStorageManager *v2;
  uint64_t v3;
  const WebCore::ClientOrigin *v4;
  WebKit::OriginStorageManager *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD *v18;

  v1 = a1;
  v2 = (WebKit::NetworkStorageManager *)*((_QWORD *)a1 + 1);
  WTF::RunLoop::main(a1);
  v3 = *((_QWORD *)v1 + 12);
  *((_QWORD *)v1 + 12) = 0;
  v16 = v3;
  v4 = (WTF::RunLoop *)((char *)v1 + 32);
  v5 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)v2, (WTF::RunLoop *)((char *)v1 + 32));
  LODWORD(v1) = *((_DWORD *)v1 + 6);
  v6 = WebKit::OriginStorageManager::defaultBucket(v5);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v6, (int)v1, &v15);
  WTF::String::isolatedCopy();
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34C6F88;
  v7[1] = v16;
  v8 = v17;
  v16 = 0;
  v17 = 0;
  v7[2] = v8;
  v18 = v7;
  WTF::RunLoop::dispatch();
  v10 = v18;
  v18 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible(v2, v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34C6F88;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C6F88;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::getOriginDirectory(WebCore::ClientOrigin &&,WebKit::WebsiteDataType,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::suspend(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C6FB0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::suspend(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C6FB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::suspend(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::SecurityOriginData *v2;
  WebCore::SecurityOriginData *v3;
  double result;
  WebCore::SecurityOriginData *v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  WebKit::SQLiteStorageArea *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::IDBServer::UniqueIDBDatabase *v18;
  WebCore::SecurityOriginData *v19[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v1 + 80));
  v5 = v2;
  v6 = *(_QWORD *)(v1 + 80);
  if (v6)
    v7 = (WebCore::SecurityOriginData *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  v19[0] = v2;
  for (v19[1] = v3; v19[0] != v7; v5 = v19[0])
  {
    v8 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v5 + 8)) + 4);
    if (v8)
    {
      v9 = *(WebKit::SQLiteStorageArea **)(v8 + 24);
      if (v9)
      {
        if (((*(uint64_t (**)(WebKit::SQLiteStorageArea *))(*(_QWORD *)v9 + 16))(v9) & 1) == 0)
          WebKit::SQLiteStorageArea::commitTransactionIfNecessary(v9);
      }
    }
    v10 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v5 + 8)) + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        if (*(_DWORD *)(v11 + 4))
        {
          v12 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((_QWORD **)(v10 + 40));
          v13 = v12;
          v15 = v14;
          v16 = *(_QWORD *)(v10 + 40);
          v17 = v16 ? v16 + 88 * *(unsigned int *)(v16 - 4) : 0;
          if ((_QWORD *)v17 != v12)
          {
            do
            {
              v18 = (WebCore::IDBServer::UniqueIDBDatabase *)v13[10];
              if (!*((_BYTE *)v18 + 88))
                WebCore::IDBServer::UniqueIDBDatabase::abortActiveTransactions(v18);
              while (1)
              {
                v13 += 11;
                if (v13 == v15)
                  break;
                if ((unint64_t)(*v13 + 1) > 1)
                  goto LABEL_22;
              }
              v13 = v15;
LABEL_22:
              ;
            }
            while (v13 != (_QWORD *)v17);
          }
        }
      }
    }
    v19[0] = (WebCore::SecurityOriginData *)((char *)v5 + 72);
    result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v19);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::handleLowMemoryWarning(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C6FD8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::handleLowMemoryWarning(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C6FD8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::handleLowMemoryWarning(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::SecurityOriginData *v2;
  WebCore::SecurityOriginData *v3;
  double result;
  WebCore::SecurityOriginData *v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  _QWORD *v9;
  WebCore::SQLiteDatabase *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::SecurityOriginData *v18[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v1 + 80));
  v5 = v2;
  v6 = *(_QWORD *)(v1 + 80);
  if (v6)
    v7 = (WebCore::SecurityOriginData *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  v18[0] = v2;
  for (v18[1] = v3; v18[0] != v7; v5 = v18[0])
  {
    v8 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v5 + 8)) + 4);
    if (v8)
    {
      v9 = *(_QWORD **)(v8 + 24);
      if (v9)
      {
        if (((*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9) & 1) == 0)
        {
          v10 = (WebCore::SQLiteDatabase *)v9[15];
          if (v10)
          {
            if (*((_QWORD *)v10 + 1))
              WebCore::SQLiteDatabase::releaseMemory(v10);
          }
        }
      }
    }
    v11 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v5 + 8)) + 8);
    if (v11)
    {
      v12 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((_QWORD **)(v11 + 40));
      v13 = v12;
      v15 = v14;
      v16 = *(_QWORD *)(v11 + 40);
      v17 = v16 ? v16 + 88 * *(unsigned int *)(v16 - 4) : 0;
      if ((_QWORD *)v17 != v12)
      {
        do
        {
          WebCore::IDBServer::UniqueIDBDatabase::handleLowMemoryWarning((WebCore::IDBServer::UniqueIDBDatabase *)v13[10]);
          while (1)
          {
            v13 += 11;
            if (v13 == v15)
              break;
            if ((unint64_t)(*v13 + 1) > 1)
              goto LABEL_21;
          }
          v13 = v15;
LABEL_21:
          ;
        }
        while (v13 != (_QWORD *)v17);
      }
    }
    v18[0] = (WebCore::SecurityOriginData *)((char *)v5 + 72);
    result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v18);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C7000;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7000;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebCore::SecurityOriginData *v3;
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  WebKit::SQLiteStorageArea *v9;
  WebCore::SecurityOriginData *result;
  WebCore::SecurityOriginData *v11[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v2 + 80));
  v5 = v3;
  v6 = *(_QWORD *)(v2 + 80);
  if (v6)
    v7 = (WebCore::SecurityOriginData *)(v6 + 72 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  v11[1] = v4;
  if (v7 != v3)
  {
    do
    {
      v8 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v5 + 8)) + 4);
      if (v8)
      {
        v9 = *(WebKit::SQLiteStorageArea **)(v8 + 24);
        if (v9)
        {
          if (((*(uint64_t (**)(WebKit::SQLiteStorageArea *))(*(_QWORD *)v9 + 16))(v9) & 1) == 0)
            WebKit::SQLiteStorageArea::commitTransactionIfNecessary(v9);
        }
      }
      v11[0] = (WebCore::SecurityOriginData *)((char *)v5 + 72);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v11);
      v5 = v11[0];
    }
    while (v11[0] != v7);
  }
  WTF::RunLoop::main(v3);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v11, (uint64_t *)(a1 + 24));
  WTF::RunLoop::dispatch();
  result = v11[0];
  v11[0] = 0;
  if (result)
    return (WebCore::SecurityOriginData *)(*(uint64_t (**)(WebCore::SecurityOriginData *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(IPC::Connection &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *a1 = off_1E34C7028;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(IPC::Connection &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34C7028;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v3);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(IPC::Connection &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  char v26[24];

  v3 = result;
  v4 = (uint64_t *)(*(_QWORD *)(result + 8) + 304);
  v5 = *v4;
  if (*v4
    || (result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(*(_QWORD *)(result + 8) + 304), 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v3 + 24);
  v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v6 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v5 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    result = v12[1];
    *v12 = v7;
    v12[1] = 0;
    if (result)
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
    v16 = *v4;
    if (*v4)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_23;
    }
    else if (3 * v21 > 4 * v20)
    {
      goto LABEL_23;
    }
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v12);
    v12 = (uint64_t *)result;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != v7)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v6;
    v12 = (uint64_t *)(v5 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v7 = *(_QWORD *)(v3 + 24);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  v22 = *(unsigned int *)(v3 + 44);
  if ((_DWORD)v22)
  {
    v23 = v12 + 1;
    v24 = *(WTF::StringImpl ***)(v3 + 32);
    v25 = 8 * v22;
    do
    {
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v23, v24++, a3, (uint64_t)v26);
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetQuotaForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C7050;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetQuotaForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7050;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::resetQuotaForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebCore::SecurityOriginData *v3;
  WTF::RunLoop *v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::RunLoop *result;
  WTF::RunLoop *v10[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v2 + 80));
  v5 = *(_QWORD *)(v2 + 80);
  if (v5)
    v6 = (WTF::RunLoop *)(v5 + 72 * *(unsigned int *)(v5 - 4));
  else
    v6 = 0;
  v10[1] = v4;
  if (v6 != v3)
  {
    do
    {
      v7 = *(_QWORD **)(*((_QWORD *)v3 + 8) + 48);
      v8 = v7[13];
      v7[10] = 0;
      v7[11] = v8;
      v10[0] = (WebCore::SecurityOriginData *)((char *)v3 + 72);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v10);
      v3 = v10[0];
    }
    while (v10[0] != v6);
  }
  WTF::RunLoop::main(v3);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v10, (uint64_t *)(a1 + 24));
  WTF::RunLoop::dispatch();
  result = v10[0];
  v10[0] = 0;
  if (result)
    return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C7078;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7078;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(WebCore::SecurityOriginData *a1)
{
  WebCore::SecurityOriginData *v1;
  uint64_t v2;
  int v3;
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SecurityOriginData *v15[2];

  v1 = a1;
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((unsigned __int8 *)a1 + 24);
  if (*(unsigned __int8 *)(v2 + 184) != v3)
  {
    *(_BYTE *)(v2 + 184) = v3;
    a1 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v2 + 80));
    v4 = a1;
    v15[0] = a1;
    v15[1] = v5;
    v6 = *(_QWORD *)(v2 + 80);
    v7 = v6 ? (WebCore::SecurityOriginData *)(v6 + 72 * *(unsigned int *)(v6 - 4)) : 0;
    if (v7 != a1)
    {
      do
      {
        v8 = *(_QWORD *)(*((_QWORD *)v4 + 8) + 48);
        WebKit::NetworkStorageManager::originQuotaManagerParameters((WebKit::NetworkStorageManager *)&v12, (const WebCore::ClientOrigin *)v2, v4);
        *(_OWORD *)(v8 + 88) = v12;
        v9 = *(_QWORD *)(v8 + 136);
        *(_QWORD *)(v8 + 136) = v13;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v10 = *(_QWORD *)(v8 + 144);
        *(_QWORD *)(v8 + 144) = v14;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        *(_QWORD *)(v8 + 104) = *(_QWORD *)(v8 + 88);
        *(_QWORD *)(v8 + 80) = 0;
        if (*(_BYTE *)(v8 + 120))
          *(_BYTE *)(v8 + 120) = 0;
        v15[0] = (WebCore::SecurityOriginData *)((char *)v4 + 72);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v15);
        v4 = v15[0];
      }
      while (v15[0] != v7);
    }
  }
  WTF::RunLoop::main(a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v12, (uint64_t *)v1 + 4);
  WTF::RunLoop::dispatch();
  result = v12;
  *(_QWORD *)&v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C70A0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C70A0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  *(_QWORD *)(a1[1] + 344) = a1[3];
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, a1 + 4);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C70C8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C70C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(BOOL)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  WebKit::NetworkStorageManager *v3;
  void *v4;
  WebKit::NetworkStorageManager *v5;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v5, v1, *((_QWORD *)result + 2));
    v3 = v5;
    if (v5)
    {
      WebKit::NetworkStorageManager::setStorageSiteValidationEnabledInternal((uint64_t)v5, (WTF::StringImpl *)v2[24]);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*((unsigned __int8 **)v3 + 2), v4);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  *a1 = off_1E34C70F0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v4 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  *(_QWORD *)a1 = off_1E34C70F0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  return WTF::fastFree(a1, v3);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  WTF::StringImpl **v3;
  void *v4;
  WTF::StringImpl **v5;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v5, v1, *((_QWORD *)result + 2));
    v3 = v5;
    if (v5)
    {
      WebKit::NetworkStorageManager::addAllowedSitesForConnectionInternal(v5, *((_QWORD *)v2 + 3), (uint64_t)(v2 + 32));
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>((unsigned __int8 *)v3[2], v4);
    }
  }
  return result;
}

WTF::StringImpl **WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, WTF::StringImpl ***a3)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  WTF::StringImpl **v6;

  v3 = *a3;
  *a3 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl ***))(*(_QWORD *)a1 + 16))(a1, a2, &v6);
  result = v6;
  if (v6)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(WebCore::ClientOrigin const&,WTF::Function<void ()(WebKit::BackgroundFetchStoreManager *)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::WorkQueue *v6;
  uint64_t v7;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_1E34C7118;
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v9, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v10, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(WTF::WorkQueue **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    WTF::WorkQueue::deref(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(WebCore::ClientOrigin const&,WTF::Function<void ()(WebKit::BackgroundFetchStoreManager *)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::WorkQueue *v6;
  uint64_t v7;
  char v9;
  char v10;

  *(_QWORD *)this = &off_1E34C7118;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v9, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v5])(&v10, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v6 = (WTF::WorkQueue *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    WTF::WorkQueue::deref(v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(WebCore::ClientOrigin const&,WTF::Function<void ()(WebKit::BackgroundFetchStoreManager *)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::OriginStorageManager *v2;
  uint64_t v3;
  WebKit::BackgroundFetchStoreManager *Manager;
  uint64_t result;
  uint64_t v6;

  v2 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(*(_QWORD *)(a1 + 8), (const WebCore::ClientOrigin *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = v3;
  Manager = WebKit::OriginStorageManager::backgroundFetchManager(v2, &v6);
  (*(void (**)(_QWORD, WebKit::BackgroundFetchStoreManager *))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), Manager);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::String const&,WebKit::BackgroundFetchChange>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::String const&,WebKit::BackgroundFetchChange>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C7140;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7140;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::RunLoop *v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  uint64_t v7;
  WebCore::SecurityOriginData *v8;
  WebKit::OriginStorageManager::StorageBucket *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SecurityOriginData *result;
  __int128 v13;
  WebCore::SecurityOriginData *v14[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 352);
  if (v3)
  {
    v4 = (WTF::RunLoop *)std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100]((uint64_t *)(v3 + 8), 0);
  }
  else
  {
    v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*(WebCore::SecurityOriginData **)(v2 + 80));
    v6 = v4;
    v7 = *(_QWORD *)(v2 + 80);
    if (v7)
      v8 = (WebCore::SecurityOriginData *)(v7 + 72 * *(unsigned int *)(v7 - 4));
    else
      v8 = 0;
    v14[1] = v5;
    if (v8 != v4)
    {
      do
      {
        v9 = WebKit::OriginStorageManager::defaultBucket(*((WebKit::OriginStorageManager **)v6 + 8));
        v10 = WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager(v9);
        std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100]((uint64_t *)(v10 + 8), 0);
        v14[0] = (WebCore::SecurityOriginData *)((char *)v6 + 72);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v14);
        v6 = v14[0];
      }
      while (v14[0] != v8);
    }
  }
  WTF::RunLoop::main(v4);
  v13 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = &off_1E34C7168;
  *(_OWORD *)(v11 + 8) = v13;
  v14[0] = (WebCore::SecurityOriginData *)v11;
  WTF::RunLoop::dispatch();
  result = v14[0];
  v14[0] = 0;
  if (result)
    return (WebCore::SecurityOriginData *)(*(uint64_t (**)(WebCore::SecurityOriginData *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C7168;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7168;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C7190;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7190;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::ServiceWorkerStorageManager *v3;
  WTF::RunLoop *v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  WebKit::OriginStorageManager *v8;
  WebKit::OriginStorageManager::StorageBucket *v9;
  WebKit::ServiceWorkerStorageManager *v10;
  uint64_t v11;
  WebCore::SecurityOriginData *result;
  __int128 v13;
  WebCore::SecurityOriginData *v14[2];
  WTF::RunLoop *v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(WebKit::ServiceWorkerStorageManager **)(v2 + 352);
  if (v3)
  {
    v4 = WebKit::ServiceWorkerStorageManager::clearAllRegistrations(v3);
  }
  else
  {
    WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v15, (WebCore::SecurityOriginData **)v2);
    v6 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin((uint64_t *)&v15);
    v14[0] = v6;
    v14[1] = v5;
    v4 = v15;
    if (v15)
      v7 = (WTF::RunLoop *)((char *)v15 + 64 * (unint64_t)*((unsigned int *)v15 - 1));
    else
      v7 = 0;
    if (v7 != v6)
    {
      do
      {
        v8 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, v6);
        v9 = WebKit::OriginStorageManager::defaultBucket(v8);
        v10 = (WebKit::ServiceWorkerStorageManager *)WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager(v9);
        WebKit::ServiceWorkerStorageManager::clearAllRegistrations(v10);
        WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v6);
        v14[0] = (WebCore::SecurityOriginData *)((char *)v14[0] + 64);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v14);
        v6 = v14[0];
      }
      while (v14[0] != v7);
      v4 = v15;
    }
    if (v4)
      v4 = (WTF::RunLoop *)WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable((uint64_t)v4, v5);
  }
  WTF::RunLoop::main(v4);
  v13 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = &off_1E34C71B8;
  *(_OWORD *)(v11 + 8) = v13;
  v14[0] = (WebCore::SecurityOriginData *)v11;
  WTF::RunLoop::dispatch();
  result = v14[0];
  v14[0] = 0;
  if (result)
    return (WebCore::SecurityOriginData *)(*(uint64_t (**)(WebCore::SecurityOriginData *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C71B8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C71B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C71E0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C71E0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  WebKit::ServiceWorkerStorageManager *v3;
  WTF *v4;
  WebCore::SecurityOriginData *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityOriginData *v10;
  WebCore::SecurityOriginData *v11;
  uint64_t result;
  char v13;
  WebKit::OriginStorageManager *v14;
  WebKit::OriginStorageManager::StorageBucket *v15;
  WebKit::ServiceWorkerStorageManager *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  WebCore::ServiceWorkerContextData *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::ServiceWorkerContextData **v43;
  unsigned int v44;
  WTF *v45;
  WebCore::ServiceWorkerContextData *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  __int128 *v52;
  unsigned int v53;
  WTF *v54;
  uint64_t v55;
  unsigned int v56;
  WebCore::ServiceWorkerContextData *v57;
  const WebCore::ServiceWorkerContextData *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  WebCore::SecurityOriginData *v73[2];
  uint64_t v74;
  WebCore::ServiceWorkerContextData *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  unsigned __int8 v79;

  v2 = a1[1];
  LOBYTE(v77) = 0;
  v79 = 0;
  v3 = *(WebKit::ServiceWorkerStorageManager **)(v2 + 352);
  if (!v3)
  {
    v75 = 0;
    v76 = 0;
    WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v74, (WebCore::SecurityOriginData **)v2);
    v10 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v74);
    v11 = 0;
    v73[0] = v10;
    v73[1] = v5;
    result = v74;
    if (v74)
      v11 = (WebCore::SecurityOriginData *)(v74 + ((unint64_t)*(unsigned int *)(v74 - 4) << 6));
    if (v11 == v10)
    {
      v13 = 0;
      if (!v74)
        goto LABEL_31;
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(v2, v10);
        v15 = WebKit::OriginStorageManager::defaultBucket(v14);
        v16 = (WebKit::ServiceWorkerStorageManager *)WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager(v15);
        WebKit::ServiceWorkerStorageManager::importRegistrations(v16, &v68);
        if ((_BYTE)v70)
        {
          v18 = HIDWORD(v69);
          v19 = HIDWORD(v69) + (unint64_t)HIDWORD(v76);
          if (v19 > v76)
          {
            v20 = v76 + ((unint64_t)v76 >> 2);
            if (v20 >= 0x10)
              v21 = v20 + 1;
            else
              v21 = 16;
            if (v21 <= v19)
              v22 = HIDWORD(v69) + (unint64_t)HIDWORD(v76);
            else
              v22 = v21;
            WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v75, v22);
            v18 = HIDWORD(v69);
          }
          if (v18)
          {
            v23 = v68;
            v24 = (WTF *)((char *)v68 + 592 * v18);
            v25 = HIDWORD(v76);
            do
            {
              v26 = (char *)v75 + 592 * v25;
              v27 = *(_OWORD *)v23;
              *((_QWORD *)v26 + 2) = *((_QWORD *)v23 + 2);
              *(_OWORD *)v26 = v27;
              WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)(v26 + 24), (uint64_t)v23 + 24);
              *((_QWORD *)v26 + 47) = *((_QWORD *)v23 + 47);
              v28 = *((_QWORD *)v23 + 48);
              *((_QWORD *)v23 + 48) = 0;
              *((_QWORD *)v26 + 48) = v28;
              v29 = *((_QWORD *)v23 + 49);
              *((_QWORD *)v23 + 49) = 0;
              *((_QWORD *)v26 + 50) = 0;
              *((_QWORD *)v26 + 51) = 0;
              *((_QWORD *)v26 + 49) = v29;
              v30 = *((_QWORD *)v23 + 50);
              *((_QWORD *)v23 + 50) = 0;
              *((_QWORD *)v26 + 50) = v30;
              LODWORD(v30) = *((_DWORD *)v23 + 102);
              *((_DWORD *)v23 + 102) = 0;
              *((_DWORD *)v26 + 102) = v30;
              LODWORD(v30) = *((_DWORD *)v23 + 103);
              *((_DWORD *)v23 + 103) = 0;
              *((_DWORD *)v26 + 103) = v30;
              LODWORD(v30) = *((_DWORD *)v23 + 104);
              v26[420] = *((_BYTE *)v23 + 420);
              *((_DWORD *)v26 + 104) = v30;
              *((_WORD *)v26 + 212) = *((_WORD *)v23 + 212);
              v31 = *((_QWORD *)v23 + 54);
              *((_QWORD *)v23 + 54) = 0;
              *((_QWORD *)v26 + 54) = v31;
              v32 = *((_QWORD *)v23 + 55);
              *((_QWORD *)v23 + 55) = 0;
              *((_QWORD *)v26 + 55) = v32;
              v33 = *((_QWORD *)v23 + 56);
              *((_QWORD *)v23 + 56) = 0;
              *((_QWORD *)v26 + 56) = v33;
              WTF::URL::URL((uint64_t)(v26 + 456), (uint64_t *)v23 + 57);
              *((_DWORD *)v26 + 124) = *((_DWORD *)v23 + 124);
              *(_QWORD *)(v26 + 517) = 0;
              *((_QWORD *)v26 + 63) = 0;
              *((_QWORD *)v26 + 64) = 0;
              v34 = *((_QWORD *)v23 + 63);
              *((_QWORD *)v23 + 63) = 0;
              *((_QWORD *)v26 + 63) = v34;
              LODWORD(v34) = *((_DWORD *)v23 + 128);
              *((_DWORD *)v23 + 128) = 0;
              *((_DWORD *)v26 + 128) = v34;
              LODWORD(v34) = *((_DWORD *)v23 + 129);
              *((_DWORD *)v23 + 129) = 0;
              *((_DWORD *)v26 + 129) = v34;
              LODWORD(v34) = *((_DWORD *)v23 + 130);
              *((_DWORD *)v23 + 130) = 0;
              *((_DWORD *)v26 + 130) = v34;
              LOBYTE(v34) = *((_BYTE *)v23 + 524);
              *((_BYTE *)v23 + 524) = 0;
              v26[524] = v34;
              v35 = *((_OWORD *)v23 + 35);
              v36 = *((_OWORD *)v23 + 33);
              *((_OWORD *)v26 + 34) = *((_OWORD *)v23 + 34);
              *((_OWORD *)v26 + 35) = v35;
              *((_OWORD *)v26 + 33) = v36;
              v26[576] = *((_BYTE *)v23 + 576);
              v37 = *((_QWORD *)v23 + 73);
              *((_QWORD *)v23 + 73) = 0;
              *((_QWORD *)v26 + 73) = v37;
              v25 = ++HIDWORD(v76);
              v23 = (WTF *)((char *)v23 + 592);
            }
            while (v23 != v24);
          }
          if ((_BYTE)v70)
            WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v17);
          v13 = 1;
        }
        WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)v2, v10);
        v73[0] = (WebCore::SecurityOriginData *)((char *)v73[0] + 64);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v73);
        v10 = v73[0];
      }
      while (v73[0] != v11);
      result = v74;
      if (!v74)
      {
LABEL_31:
        if ((v13 & 1) != 0)
          goto LABEL_32;
        goto LABEL_71;
      }
    }
    result = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(result, v5);
    if ((v13 & 1) != 0)
    {
LABEL_32:
      if (v79)
      {
        v38 = HIDWORD(v76);
        if (HIDWORD(v78) <= HIDWORD(v76))
        {
          if (HIDWORD(v76) <= v78)
          {
            v38 = HIDWORD(v78);
          }
          else
          {
            if ((_DWORD)v78)
            {
              if (HIDWORD(v78))
              {
                v48 = v77;
                v49 = 592 * HIDWORD(v78);
                do
                {
                  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v48, v5);
                  v48 = (WTF *)(v50 + 592);
                  v49 -= 592;
                }
                while (v49);
                HIDWORD(v78) = 0;
              }
              v51 = v77;
              if (v77)
              {
                v77 = 0;
                LODWORD(v78) = 0;
                WTF::fastFree(v51, v5);
              }
            }
            WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v77, HIDWORD(v76));
            v38 = HIDWORD(v78);
          }
        }
        else
        {
          v39 = (WTF *)((char *)v77 + 592 * HIDWORD(v76));
          v40 = 592 * HIDWORD(v78) - 592 * HIDWORD(v76);
          do
          {
            WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v39, v5);
            v39 = (WebCore::ServiceWorkerContextData *)(v41 + 592);
            v40 -= 592;
          }
          while (v40);
          HIDWORD(v78) = v38;
        }
        v52 = (__int128 *)v75;
        if (v38)
        {
          v53 = v38;
          v54 = v77;
          v55 = 592 * v53;
          do
          {
            WebCore::ServiceWorkerContextData::operator=((uint64_t)v54, v52);
            v52 += 37;
            v54 = (WTF *)((char *)v54 + 592);
            v55 -= 592;
          }
          while (v55);
          v52 = (__int128 *)v75;
          v56 = HIDWORD(v78);
        }
        else
        {
          v56 = 0;
        }
        if (v56 != HIDWORD(v76))
        {
          v57 = (WTF *)((char *)v77 + 592 * v56);
          v58 = (const WebCore::ServiceWorkerContextData *)&v52[37 * v56];
          v59 = 592 * HIDWORD(v76) - 592 * v56;
          do
          {
            v57 = (WebCore::ServiceWorkerContextData *)((char *)WebCore::ServiceWorkerContextData::ServiceWorkerContextData(v57, v58)+ 592);
            v58 = (const WebCore::ServiceWorkerContextData *)((char *)v58 + 592);
            v59 -= 592;
          }
          while (v59);
          v56 = HIDWORD(v76);
        }
        HIDWORD(v78) = v56;
      }
      else
      {
        v77 = 0;
        LODWORD(v78) = 0;
        HIDWORD(v78) = HIDWORD(v76);
        if (HIDWORD(v76))
        {
          if (HIDWORD(v76) >= 0x6EB3E5)
          {
            __break(0xC471u);
            return result;
          }
          v44 = 592 * HIDWORD(v76);
          v45 = (WTF *)WTF::fastMalloc((WTF *)(592 * HIDWORD(v76)));
          LODWORD(v78) = v44 / 0x250;
          v77 = v45;
          if (HIDWORD(v76))
          {
            v46 = v75;
            v47 = 592 * HIDWORD(v76);
            do
            {
              v45 = (WebCore::ServiceWorkerContextData *)((char *)WebCore::ServiceWorkerContextData::ServiceWorkerContextData(v45, v46)+ 592);
              v46 = (WebCore::ServiceWorkerContextData *)((char *)v46 + 592);
              v47 -= 592;
            }
            while (v47);
          }
        }
        v79 = 1;
      }
    }
LABEL_71:
    v43 = &v75;
    goto LABEL_72;
  }
  v4 = WebKit::ServiceWorkerStorageManager::importRegistrations(v3, &v68);
  if (v79 == v70)
  {
    if (!v79)
      goto LABEL_73;
    if (HIDWORD(v78))
    {
      v6 = v77;
      v7 = 592 * HIDWORD(v78);
      do
      {
        WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v6, v5);
        v6 = (WTF *)(v8 + 592);
        v7 -= 592;
      }
      while (v7);
    }
    v4 = v77;
    if (v77)
    {
      v77 = 0;
      LODWORD(v78) = 0;
      v4 = (WTF *)WTF::fastFree(v4, v5);
    }
    v77 = v68;
    v9 = v69;
    v68 = 0;
    v69 = 0;
    v78 = v9;
  }
  else if (v79)
  {
    v4 = (WTF *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v5);
    v79 = 0;
  }
  else
  {
    v77 = v68;
    v42 = v69;
    v68 = 0;
    v69 = 0;
    v78 = v42;
    v79 = 1;
  }
  if ((_BYTE)v70)
  {
    v43 = &v68;
LABEL_72:
    v4 = (WTF *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v5);
  }
LABEL_73:
  WTF::RunLoop::main(v4);
  v60 = (WTF *)a1[2];
  a1[2] = 0;
  v68 = v60;
  WTF::CrossThreadCopierBase<false,false,std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy<std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v69, (uint64_t)&v77);
  v61 = a1[3];
  a1[3] = 0;
  v72 = v61;
  v62 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v62 = &off_1E34C7208;
  v63 = v68;
  v68 = 0;
  *(_QWORD *)(v62 + 8) = v63;
  *(_BYTE *)(v62 + 16) = 0;
  *(_BYTE *)(v62 + 32) = 0;
  v64 = v71;
  if (v71)
  {
    *(_QWORD *)(v62 + 16) = v69;
    v65 = v70;
    v69 = 0;
    v70 = 0;
    *(_QWORD *)(v62 + 24) = v65;
    *(_BYTE *)(v62 + 32) = 1;
  }
  *(_QWORD *)(v62 + 40) = v61;
  v75 = (WebCore::ServiceWorkerContextData *)v62;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v75;
  v75 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v72 = 0;
  if (v64)
  {
    result = WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v66);
    v67 = v68;
    v68 = 0;
    if (v67)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*((unsigned __int8 **)v67 + 2), v66);
  }
  if (v79)
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v66);
  return result;
}

uint64_t WebCore::ServiceWorkerContextData::ServiceWorkerContextData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(a1 + 24, (uint64_t)a2 + 24);
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  v5 = *((_QWORD *)a2 + 48);
  *((_QWORD *)a2 + 48) = 0;
  *(_QWORD *)(a1 + 384) = v5;
  v6 = *((_QWORD *)a2 + 49);
  *((_QWORD *)a2 + 49) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = v6;
  v7 = *((_QWORD *)a2 + 50);
  *((_QWORD *)a2 + 50) = 0;
  *(_QWORD *)(a1 + 400) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 102);
  *((_DWORD *)a2 + 102) = 0;
  *(_DWORD *)(a1 + 408) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 103);
  *((_DWORD *)a2 + 103) = 0;
  *(_DWORD *)(a1 + 412) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 104);
  *(_BYTE *)(a1 + 420) = *((_BYTE *)a2 + 420);
  *(_DWORD *)(a1 + 416) = v7;
  *(_WORD *)(a1 + 424) = *((_WORD *)a2 + 212);
  v8 = *((_QWORD *)a2 + 54);
  *((_QWORD *)a2 + 54) = 0;
  *(_QWORD *)(a1 + 432) = v8;
  v9 = *((_QWORD *)a2 + 55);
  *((_QWORD *)a2 + 55) = 0;
  *(_QWORD *)(a1 + 440) = v9;
  v10 = *((_QWORD *)a2 + 56);
  *((_QWORD *)a2 + 56) = 0;
  *(_QWORD *)(a1 + 448) = v10;
  WTF::URL::URL(a1 + 456, (uint64_t *)a2 + 57);
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  *(_QWORD *)(a1 + 517) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  v11 = *((_QWORD *)a2 + 63);
  *((_QWORD *)a2 + 63) = 0;
  *(_QWORD *)(a1 + 504) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 128);
  *((_DWORD *)a2 + 128) = 0;
  *(_DWORD *)(a1 + 512) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 129);
  *((_DWORD *)a2 + 129) = 0;
  *(_DWORD *)(a1 + 516) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 130);
  *((_DWORD *)a2 + 130) = 0;
  *(_DWORD *)(a1 + 520) = v11;
  LOBYTE(v11) = *((_BYTE *)a2 + 524);
  *((_BYTE *)a2 + 524) = 0;
  *(_BYTE *)(a1 + 524) = v11;
  v12 = a2[33];
  v13 = a2[35];
  *(_OWORD *)(a1 + 544) = a2[34];
  *(_OWORD *)(a1 + 560) = v13;
  *(_OWORD *)(a1 + 528) = v12;
  *(_BYTE *)(a1 + 576) = *((_BYTE *)a2 + 576);
  v14 = *((_QWORD *)a2 + 73);
  *((_QWORD *)a2 + 73) = 0;
  *(_QWORD *)(a1 + 584) = v14;
  return a1;
}

uint64_t WebCore::ServiceWorkerRegistrationKey::ServiceWorkerRegistrationKey(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  WTF::URL::URL(a1 + 32, (uint64_t *)(a2 + 32));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34C7208;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 32))
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7208;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 32))
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::importServiceWorkerRegistrations(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  _QWORD v6[2];
  char v7;

  v2 = (uint64_t *)(a1 + 40);
  LOBYTE(v6[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    v6[0] = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v6[1] = v3;
    v7 = 1;
  }
  result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(v2, (uint64_t)v6);
  if (v7)
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;

  *a1 = off_1E34C7230;
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), a2);
  WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v4);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E34C7230;
  v3 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v4);
  v6 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
  return WTF::fastFree(a1, v5);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0,void>::call(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v4;
  WebKit::ServiceWorkerStorageManager *v5;
  WTF::RunLoop *updated;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF *v14;
  WTF **v15;
  WTF **v16;
  WTF **v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF::URL *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl **v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  WTF::StringImpl **v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  char *v45;
  unsigned int *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  const WTF::StringImpl *v53;
  int v54;
  WTF **v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  void *v60;
  unsigned int *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  char *v64;
  _QWORD *v65;
  unsigned int *v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  WTF::StringImpl **v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int *v73;
  WTF::StringImpl *v74;
  void *v75;
  unsigned int *v76;
  unsigned int *v77;
  WTF *v78;
  unsigned int *v79;
  uint64_t v80;
  WTF *v81;
  void *v82;
  WTF *result;
  int v84;
  uint64_t v85;
  char *v86;
  WTF *v87;
  WTF **v88;
  uint64_t v89;
  WTF **v90;
  int v91;
  uint64_t v92;
  WTF *v93;
  int v94;
  uint64_t v95;
  WTF *v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  unsigned int *v104;
  WTF *v105;
  _DWORD v106[4];
  unsigned int *v107;
  WTF::StringImpl *v108[5];
  WTF *v109;
  uint64_t v110;
  unsigned __int8 v111;
  unsigned int *v112;

  v4 = *(_QWORD *)(a1 + 8);
  LOBYTE(v100) = 0;
  v102 = 0;
  v5 = *(WebKit::ServiceWorkerStorageManager **)(v4 + 352);
  if (!v5)
  {
    WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin((uint64_t)&v109, v4, *(__int128 **)(a1 + 24), *(_DWORD *)(a1 + 36), a1 + 40);
    v100 = v109;
    v8 = v110;
    v109 = 0;
    v110 = 0;
    v101 = v8;
    v102 = 1;
LABEL_6:
    updated = (WTF::RunLoop *)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v7);
    goto LABEL_7;
  }
  updated = (WTF::RunLoop *)WebKit::ServiceWorkerStorageManager::updateRegistrations(v5, &v109);
  if (v102 != v111)
  {
    v100 = v109;
    v9 = v110;
    v109 = 0;
    v110 = 0;
    v101 = v9;
    v102 = 1;
    if (v111)
      goto LABEL_6;
  }
LABEL_7:
  WTF::RunLoop::main(updated);
  v11 = a1;
  v12 = *(_QWORD *)(a1 + 16);
  v85 = v11;
  *(_QWORD *)(v11 + 16) = 0;
  v95 = v12;
  v13 = v102;
  v84 = v102;
  if (v102)
  {
    v14 = v100;
    if (HIDWORD(v101))
    {
      v86 = (char *)v100 + 40 * HIDWORD(v101);
      while (1)
      {
        v15 = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::begin((uint64_t)v14 + 16);
        v89 = *((_QWORD *)v14 + 2) + 48 * *((unsigned int *)v14 + 6);
        v87 = v14;
        if ((WTF **)v89 != v15)
          break;
        LOBYTE(v18) = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
LABEL_99:
        v103 = *(_QWORD *)v87;
        WebCore::ScriptBuffer::isolatedCopy((WebCore::ScriptBuffer *)&v104, (WebCore::FragmentedSharedBuffer **)v87 + 1);
        v105 = v22;
        v106[0] = v21;
        v106[1] = v20;
        v106[2] = v19;
        LOBYTE(v106[3]) = v18;
        *(_QWORD *)v87 = v103;
        v76 = v104;
        v104 = 0;
        v77 = (unsigned int *)*((_QWORD *)v87 + 1);
        *((_QWORD *)v87 + 1) = v76;
        if (v77)
        {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v77, v75);
          v22 = v105;
          v21 = v106[0];
          v20 = v106[1];
          v19 = v106[2];
          LOBYTE(v18) = v106[3];
        }
        v105 = 0;
        memset(v106, 0, 13);
        v78 = (WTF *)*((_QWORD *)v87 + 2);
        *((_QWORD *)v87 + 2) = v22;
        v10 = (void *)*((unsigned int *)v87 + 6);
        *((_DWORD *)v87 + 6) = v21;
        *((_DWORD *)v87 + 7) = v20;
        *((_DWORD *)v87 + 8) = v19;
        *((_BYTE *)v87 + 36) = v18;
        if (v78)
        {
          WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v78, v10);
          if (v105)
            WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v105, (void *)v106[0]);
        }
        v79 = v104;
        v104 = 0;
        if (v79)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v79, v10);
        v14 = (WTF *)((char *)v87 + 40);
        if ((char *)v87 + 40 >= v86)
        {
          v14 = v100;
          v1 = HIDWORD(v101);
          v12 = v95;
          goto LABEL_110;
        }
      }
      v17 = v15;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v88 = v16;
      while (1)
      {
        v90 = v17;
        WTF::URL::isolatedCopy();
        WebCore::ScriptBuffer::isolatedCopy((WebCore::ScriptBuffer *)&v107, v17 + 5);
        v91 = v20;
        if (10 * (unint64_t)v20 >= 9 * (unint64_t)v21 || (_BYTE)v18 && 2 * v20 >= v21)
          break;
LABEL_47:
        v94 = v18;
        v48 = *((_DWORD *)v108[0] + 4);
        if (v48 >= 0x100)
          v49 = v48 >> 8;
        else
          v49 = WTF::StringImpl::hashSlowCase(v108[0]);
        v50 = v21 - 1;
        v51 = (v49 ^ v19) & (v21 - 1);
        v52 = (WTF::StringImpl **)((char *)v22 + 48 * v51);
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v52) & 1) != 0)
        {
          v54 = v91;
          v55 = v88;
          v17 = v90;
          v18 = v94;
LABEL_63:
          WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::URL,WebCore::ScriptBuffer>((uint64_t)v52, (WTF::StringImpl *)v108, (uint64_t *)&v107);
        }
        else
        {
          v56 = 0;
          while (1)
          {
            v57 = *((_DWORD *)*v52 + 4);
            v58 = v57 >= 0x100 ? v57 >> 8 : WTF::StringImpl::hashSlowCase(*v52);
            v59 = (v51 + v21 - ((v58 ^ v19) & v50)) & v50;
            if (v56 > v59)
              break;
            if (v58 == v49 && (WTF::equal(*v52, v108[0], v53) & 1) != 0)
            {
              v20 = v91;
              v55 = v88;
              v17 = v90;
              v18 = v94;
              goto LABEL_65;
            }
            ++v56;
            v51 = ((_DWORD)v51 + 1) & v50;
            v52 = (WTF::StringImpl **)((char *)v22 + 48 * v51);
            if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v52) & 1) != 0)
            {
              v18 = v94;
              if (v56 > 0x7F)
                v18 = 1;
              v54 = v91;
              v55 = v88;
              v17 = v90;
              goto LABEL_63;
            }
          }
          v18 = v94;
          if (v56 > 0x7F)
            v18 = 1;
          WTF::URL::URL((uint64_t)&v109, (uint64_t *)v52);
          v64 = (char *)v22 + 48 * v51;
          v66 = (unsigned int *)*((_QWORD *)v64 + 5);
          v65 = v64 + 40;
          v112 = v66;
          *v65 = 0;
          v67 = *v52;
          *v52 = 0;
          v54 = v91;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v63);
            else
              *(_DWORD *)v67 -= 2;
          }
          *v52 = 0;
          WTF::URL::invalidate((WTF::URL *)v52);
          *v65 = 0;
          WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::URL,WebCore::ScriptBuffer>((uint64_t)v52, (WTF::StringImpl *)v108, (uint64_t *)&v107);
          v68 = (v51 + 1) & v50;
          v69 = (WTF::StringImpl **)((char *)v22 + 48 * v68);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v69) & 1) == 0)
          {
            do
            {
              v70 = *((_DWORD *)*v69 + 4);
              if (v70 >= 0x100)
                v71 = v70 >> 8;
              else
                v71 = WTF::StringImpl::hashSlowCase(*v69);
              ++v59;
              v72 = (v68 + v21 - ((v71 ^ v19) & v50)) & v50;
              if (v59 > v72)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t *)&v109, (WTF::StringImpl *)v69);
                v59 = v72;
              }
              v68 = (v68 + 1) & v50;
              v69 = (WTF::StringImpl **)((char *)v22 + 48 * v68);
            }
            while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v69));
          }
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t)v69, (WTF::StringImpl *)&v109);
          v73 = v112;
          v112 = 0;
          if (v73)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v73, v60);
          v74 = v109;
          v109 = 0;
          v55 = v88;
          v17 = v90;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v60);
            else
              *(_DWORD *)v74 -= 2;
          }
        }
        v20 = v54 + 1;
LABEL_65:
        v61 = v107;
        v107 = 0;
        if (v61)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v61, v60);
        v62 = v108[0];
        v108[0] = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v60);
          else
            *(_DWORD *)v62 -= 2;
        }
        while (1)
        {
          v17 += 6;
          if (v17 == v55)
            break;
          if (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v17))
            goto LABEL_75;
        }
        v17 = v55;
LABEL_75:
        if (v17 == (WTF **)v89)
          goto LABEL_99;
      }
      v23 = 2 * v21;
      if (v21)
        v24 = v23;
      else
        v24 = 8;
      v25 = WTF::fastMalloc((WTF *)(16 * (v24 + 2 * v24)));
      v27 = v25;
      if ((_DWORD)v24)
      {
        v28 = (WTF::URL *)v25;
        v29 = v24;
        do
        {
          *(_QWORD *)v28 = 0;
          WTF::URL::invalidate(v28);
          *((_QWORD *)v28 + 5) = 0;
          v28 = (WTF::URL *)((char *)v28 + 48);
          --v29;
        }
        while (v29);
      }
      v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
      v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v19 = (v32 >> 31) ^ v32;
      if (v21)
      {
        v33 = 0;
        v34 = v21;
        v35 = v23 - 1;
        v92 = v21;
        v93 = v22;
        do
        {
          v36 = (WTF::StringImpl **)((char *)v22 + 48 * v33);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v36) & 1) == 0)
          {
            v37 = *((_DWORD *)*v36 + 4);
            if (v37 >= 0x100)
              v38 = v37 >> 8;
            else
              v38 = WTF::StringImpl::hashSlowCase(*v36);
            v39 = (v38 ^ v19) & v35;
            v40 = (WTF::StringImpl **)(v27 + 48 * v39);
            if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v40) & 1) == 0)
            {
              v41 = 0;
              do
              {
                v42 = *((_DWORD *)*v40 + 4);
                if (v42 >= 0x100)
                  v43 = v42 >> 8;
                else
                  v43 = WTF::StringImpl::hashSlowCase(*v40);
                v44 = (v39 + v24 - ((v43 ^ v19) & v35)) & v35;
                if (v41 > v44)
                {
                  std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t *)v36, (WTF::StringImpl *)v40);
                  v41 = v44;
                }
                ++v41;
                v39 = (v39 + 1) & v35;
                v40 = (WTF::StringImpl **)(v27 + 48 * v39);
              }
              while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v40));
            }
            WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>((uint64_t)v40, (WTF::StringImpl *)v36);
            v34 = v92;
            v22 = v93;
          }
          v45 = (char *)v22 + 48 * v33;
          v46 = (unsigned int *)*((_QWORD *)v45 + 5);
          *((_QWORD *)v45 + 5) = 0;
          if (v46)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v46, v26);
          v47 = *v36;
          *v36 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v26);
            else
              *(_DWORD *)v47 -= 2;
          }
          ++v33;
        }
        while (v33 != v34);
      }
      else if (!v22)
      {
        v18 = 0;
        v21 = 8;
        goto LABEL_46;
      }
      WTF::fastFree(v22, v26);
      v18 = 0;
      v21 = v24;
LABEL_46:
      v22 = (WTF *)v27;
      goto LABEL_47;
    }
    v1 = 0;
LABEL_110:
    v100 = 0;
    v2 = v101;
    v101 = 0;
    v109 = 0;
    v96 = v14;
    v110 = 0;
    v97 = __PAIR64__(v1, v2);
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v10);
    v13 = 1;
  }
  else
  {
    LOBYTE(v96) = 0;
  }
  v98 = v13;
  v80 = *(_QWORD *)(v85 + 56);
  *(_QWORD *)(v85 + 56) = 0;
  v99 = v80;
  v81 = (WTF *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v81 = &off_1E34C7258;
  *((_QWORD *)v81 + 1) = v12;
  *((_BYTE *)v81 + 16) = 0;
  *((_BYTE *)v81 + 32) = 0;
  if (v84)
  {
    *((_QWORD *)v81 + 2) = v96;
    v96 = 0;
    v97 = 0;
    *((_DWORD *)v81 + 6) = v2;
    *((_DWORD *)v81 + 7) = v1;
    *((_BYTE *)v81 + 32) = 1;
  }
  *((_QWORD *)v81 + 5) = v80;
  v109 = v81;
  WTF::RunLoop::dispatch();
  result = v109;
  v109 = 0;
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  v99 = 0;
  if (v84)
    result = (WTF *)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96, v82);
  if (v102)
    return (WTF *)WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v82);
  return result;
}

unsigned int *WebCore::ScriptBuffer::isolatedCopy(WebCore::ScriptBuffer *this, WebCore::FragmentedSharedBuffer **a2)
{
  WebCore::FragmentedSharedBuffer *v2;
  unsigned int *v3;
  void *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int *v7;

  v2 = *a2;
  if (*a2)
  {
    WebCore::SharedBufferBuilder::copy(a2);
    v3 = v6;
    v6 = 0;
  }
  else
  {
    v3 = 0;
  }
  v7 = v3;
  WebCore::SharedBufferBuilder::SharedBufferBuilder();
  result = v7;
  if (v7)
    result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v4);
  if (v2)
  {
    result = v6;
    if (v6)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v4);
  }
  return result;
}

WTF **WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::begin(uint64_t a1)
{
  WTF **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(WTF ***)a1;
  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD *)a1 + 48 * v2;
  if (!*(_DWORD *)(a1 + 12))
    return (WTF **)v3;
  if ((_DWORD)v2)
  {
    v4 = 48 * v2;
    while (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v1))
    {
      v1 += 6;
      v4 -= 48;
      if (!v4)
        return (WTF **)v3;
    }
  }
  return v1;
}

unsigned int *WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::URL,WebCore::ScriptBuffer>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  void *v5;
  uint64_t v6;
  unsigned int *result;

  WTF::URL::operator=(a1, a2);
  v6 = *a3;
  *a3 = 0;
  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

unsigned int *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>(uint64_t a1, WTF::StringImpl *a2)
{
  void *v4;
  uint64_t v5;
  unsigned int *result;

  WTF::URL::operator=(a1, a2);
  v5 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
  return result;
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[5];
  unsigned int *v14;

  WTF::URL::URL((uint64_t)v13, a1);
  v4 = a1[5];
  a1[5] = 0;
  v14 = (unsigned int *)v4;
  WTF::URL::operator=((uint64_t)a1, a2);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v7 = (unsigned int *)a1[5];
  a1[5] = v6;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
  WTF::URL::operator=((uint64_t)a2, (WTF::StringImpl *)v13);
  v9 = v14;
  v14 = 0;
  v10 = (unsigned int *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  if (v10)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v8);
    v11 = v14;
    v14 = 0;
    if (v11)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v8);
  }
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34C7258;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 32))
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C7258;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 32))
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6[2];
  char v7;

  v2 = (uint64_t *)(a1 + 40);
  LOBYTE(v6[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    v6[0] = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v6[1] = v3;
    v7 = 1;
  }
  result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(v2, v6);
  if (v7)
    return WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  void *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v2 = *a1;
  if (!*a1)
  {
    LODWORD(v3) = 0;
    v4 = 0;
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  LODWORD(v3) = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!(_DWORD)v3)
    goto LABEL_3;
  v5 = (_DWORD)v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  v6 = WTF::fastMalloc((WTF *)((96 * v5) | 0x10));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
  {
    v10 = v5;
    v11 = (_QWORD *)(v6 + 80);
    do
    {
      *((_OWORD *)v11 - 2) = 0u;
      *((_OWORD *)v11 - 1) = 0u;
      *((_OWORD *)v11 - 4) = 0u;
      *((_OWORD *)v11 - 3) = 0u;
      WTF::PairHashTraits<WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::emptyValue(v11, v7);
      v11 += 12;
      --v10;
    }
    while (v10);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (!(_DWORD)v3)
  {
    v13 = 0;
    if (!v2)
      return v13;
    goto LABEL_33;
  }
  v12 = 0;
  v13 = 0;
  v3 = v3;
  v50 = v3;
  v51 = v2;
  do
  {
    v14 = (unsigned int *)(v2 + 96 * v12);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
    if ((v15 & 1) == 0)
    {
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      {
        v17 = v2 + 96 * v12;
        v18 = v17 + 64;
        WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17 + 80, v16);
        WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v19);
        v20 = v14[14];
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v20])(&v55, v14 + 8);
        v14[14] = -1;
        v21 = v14[6];
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v21])(&v56, v2 + 96 * v12);
        v14[6] = -1;
      }
      else
      {
        v22 = *a1;
        v54 = v13;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = WTF::computeHash<WebCore::ClientOrigin>(v2 + 96 * v12);
        v25 = 0;
        do
        {
          v26 = v24 & v23;
          v27 = v22 + 96 * (v24 & v23);
          v29 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
          v24 = ++v25 + v26;
        }
        while (!v29);
        v30 = v22 + 96 * v26;
        v31 = (_QWORD *)(v30 + 64);
        v32 = (_QWORD *)(v30 + 80);
        WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30 + 80, v28);
        WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v33);
        v34 = *(unsigned int *)(v27 + 56);
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v34])(&v59, v27 + 32);
        *(_DWORD *)(v27 + 56) = -1;
        v35 = *(unsigned int *)(v27 + 24);
        if ((_DWORD)v35 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v35])(&v60, v22 + 96 * v26);
        *(_BYTE *)v27 = 0;
        *(_DWORD *)(v27 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v22 + 96 * v26, v2 + 96 * v12);
        *(_BYTE *)(v27 + 32) = 0;
        *(_DWORD *)(v27 + 56) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v27 + 32, (uint64_t)(v14 + 8));
        *v31 = 0;
        v31[1] = 0;
        v36 = v2 + 96 * v12;
        v38 = *(_QWORD *)(v36 + 64);
        v37 = v36 + 64;
        *(_QWORD *)(v36 + 64) = 0;
        *v31 = v38;
        v39 = *(_DWORD *)(v36 + 72);
        *(_DWORD *)(v36 + 72) = 0;
        v40 = (_DWORD *)(v22 + 96 * v26);
        v40[18] = v39;
        v41 = *(_DWORD *)(v36 + 76);
        *(_DWORD *)(v36 + 76) = 0;
        v40[19] = v41;
        *v32 = 0;
        v32[1] = 0;
        v42 = *(_QWORD *)(v36 + 80);
        v36 += 80;
        *(_QWORD *)v36 = 0;
        *v32 = v42;
        v43 = *(_DWORD *)(v36 + 8);
        *(_DWORD *)(v36 + 8) = 0;
        v40[22] = v43;
        v44 = *(_DWORD *)(v36 + 12);
        *(_DWORD *)(v36 + 12) = 0;
        v40[23] = v44;
        WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36, v45);
        WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v37, v46);
        v47 = v14[14];
        if ((_DWORD)v47 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v47])(&v57, v14 + 8);
        v14[14] = -1;
        v48 = v14[6];
        v13 = v54;
        v3 = v50;
        if ((_DWORD)v48 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v48])(&v58, v14);
        v14[6] = -1;
        v2 = v51;
        if (v14 == a2)
          v13 = v27;
      }
    }
    ++v12;
  }
  while (v12 != v3);
  if (v2)
LABEL_33:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  return v13;
}

uint64_t WTF::PairHashTraits<WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::emptyValue(_QWORD *a1, void *a2)
{
  WTF::StringImpl *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v5[0] = 0;
  *a1 = 0;
  v5[1] = 0;
  a1[1] = 0;
  v4[0] = 0;
  a1[2] = 0;
  v4[1] = 0;
  a1[3] = 0;
  WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, a2);
  return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v2);
}

uint64_t std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  WebCore::ServiceWorkerContextData *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    v5 = *(WebCore::ServiceWorkerContextData **)a1;
    v6 = 592 * v4;
    do
    {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v5, (WTF::StringImpl *)a2);
      v5 = (WebCore::ServiceWorkerContextData *)(v7 + 592);
      v6 -= 592;
    }
    while (v6);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, (_DWORD *)a2);
  v9 = *(_DWORD *)(a1 + 28);
  if (v9)
    WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationKey>::destruct(*(WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(*(_QWORD *)(a1 + 16) + 72 * v9));
  v10 = *(WTF **)(a1 + 16);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v10, v8);
  }
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 24) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 28) = v11;
  return a1;
}

void WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationKey>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4, v3);
  WTF::URL::URL(v4 + 32, (uint64_t *)(v3 + 32));
  ++*(_DWORD *)(a1 + 12);
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(uint64_t a1, WebCore::SecurityOriginData *a2)
{
  unsigned int v2;
  WebCore::SecurityOriginData *v4[2];

  if (a1)
    v2 = *(_DWORD *)(a1 - 4);
  else
    v2 = 0;
  v4[0] = a2;
  v4[1] = (WebCore::SecurityOriginData *)(a1 + 96 * v2);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v4);
  return v4[0];
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 96);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

uint64_t WTF::Deque<WebKit::OriginQuotaManager::Request,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  WTF *v4;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xAAAAAAA)
  {
    __break(0xC471u);
    JUMPOUT(0x1971D7388);
  }
  v4 = *(WTF **)(a1 + 16);
  v5 = 24 * v2 + 24;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * v2 + 24));
  *(_DWORD *)(a1 + 24) = (v5 & 0xFFFFFFF8) / 0x18;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 <= v7)
  {
    result = WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move((uint64_t)v4 + 24 * *(_QWORD *)a1, (uint64_t *)v4 + 3 * v7, &v6[3 * *(_QWORD *)a1]);
    if (!v4)
      return result;
  }
  else
  {
    WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move((uint64_t)v4, (uint64_t *)v4 + 3 * v7, v6);
    v8 = *(_QWORD *)a1 - v1 + *(unsigned int *)(a1 + 24);
    result = WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move((uint64_t)v4 + 24 * *(_QWORD *)a1, (uint64_t *)v4 + 3 * v1, (_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8));
    *(_QWORD *)a1 = v8;
    if (!v4)
      return result;
  }
  if (*(WTF **)(a1 + 16) == v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return WTF::fastFree(v4, v10);
}

uint64_t WTF::VectorMover<false,WebKit::OriginQuotaManager::Request>::move(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      v7 = v5[1];
      v5[1] = 0;
      *a3 = v6;
      a3[1] = v7;
      a3[2] = v5[2];
      result = v5[1];
      v5[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WebKit::ExtensionCapabilityGranter::ExtensionCapabilityGranter(_QWORD *a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;

  *a1 = 0;
  v3 = (unsigned int **)(a2 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v4 = *v3;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  a1[1] = v4;
  return a1;
}

void sub_1971D7444(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ExtensionCapabilityGranter::grant(WebKit::ExtensionCapabilityGranter *this, const WebKit::ExtensionCapability *a2)
{
  WebKit::AuxiliaryProcessProxy *v4;
  int v5;
  NSObject *v6;
  WTF::String *v7;
  char *v8;
  WTF *v9;
  WebKit *v10;
  WebKit::AuxiliaryProcessProxy *v11;
  int v12;
  WTF::String *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  WTF::Lock *v19;
  WTF::Lock *v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::Lock *v23;
  CFTypeRef v24;
  uint64_t v25;
  __int128 v26;
  CFTypeRef v27;
  uint64_t v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  WTF::NativePromiseBase *v45;
  _BYTE *v47;
  _BYTE *v48;
  WTF::StringImpl *result;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  uint64_t i;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  _QWORD *v74;
  uint64_t v75;
  WTF::NativePromiseBase **v76;
  WTF::NativePromiseBase **v77;
  WTF::NativePromiseBase *v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  WTF::String *v90;
  WTF::String *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  const char *v95;
  uint64_t v96;
  WTF::String *v97;
  WTF::String *v98;
  WTF::StringImpl *v99;
  __int128 v100;
  __int128 v101;
  CFTypeRef cf;
  char v103[8];
  int v104;
  char v105;
  char v106[8];
  int v107;
  char v108;
  WTF::StringImpl *v109;
  int v110;
  char v111;
  WTF::StringImpl *v112;
  int v113;
  char v114;
  WTF::Lock *v115;
  __int128 v116;
  __int128 v117;
  WTF::NativePromiseBase *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  _BYTE buf[24];
  __int128 v127;
  CFTypeRef v128;
  int v129;
  int v130;
  int v131;
  char v132[8];
  int v133;
  char v134[8];
  int v135;
  uint64_t v136;
  int v137;
  _QWORD v138[5];

  v138[2] = *MEMORY[0x1E0C80C00];
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebKit::ExtensionCapability *))(*(_QWORD *)a2 + 16))(&v99, a2);
  if (!v99 || !*((_DWORD *)v99 + 1))
  {
    v6 = qword_1ECE71618;
    if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v8 = cf ? (char *)cf + 16 : 0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "grant";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v8;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] environmentIdentifier must not be empty", buf, 0x16u);
      v9 = (WTF *)cf;
      cf = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, v7);
        else
          --*(_DWORD *)v9;
      }
    }
    goto LABEL_182;
  }
  (*(void (**)(WTF::String **__return_ptr, _QWORD, WebKit::ExtensionCapabilityGranter *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 16))(&v98, *(_QWORD *)(*((_QWORD *)this + 1) + 8), this);
  if (v98)
    v5 = WebKit::prepareGrant(&v99, v98, v4);
  else
    v5 = 0;
  v10 = (WebKit *)(*(_QWORD *(**)(WTF::String **__return_ptr, _QWORD, WebKit::ExtensionCapabilityGranter *, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 24))(&v97, *(_QWORD *)(*((_QWORD *)this + 1) + 8), this, &v99);
  v7 = v97;
  if (v97)
  {
    v10 = (WebKit *)WebKit::prepareGrant(&v99, v97, v11);
    v12 = (int)v10;
  }
  else
  {
    v12 = 0;
  }
  if (((v5 | v12) & 1) != 0)
  {
    if (v12)
      v13 = v97;
    else
      v13 = 0;
    if (v98)
      v14 = v5;
    else
      v14 = 0;
    if (v14 == 1 && (v15 = *((_QWORD *)v98 + 17)) != 0)
    {
      v10 = (WebKit *)std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](&v112, v15 + 40);
      if (!v13)
        goto LABEL_30;
    }
    else
    {
      LOBYTE(v112) = 0;
      v114 = 0;
      if (!v13)
        goto LABEL_30;
    }
    v16 = *((_QWORD *)v13 + 17);
    if (v16)
    {
      v10 = (WebKit *)std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](&v109, v16 + 40);
      goto LABEL_31;
    }
LABEL_30:
    LOBYTE(v109) = 0;
    v111 = 0;
LABEL_31:
    v17 = WebKit::granterQueue(v10);
    v18 = (const void *)*((_QWORD *)a2 + 1);
    cf = v18;
    if (v18)
      CFRetain(v18);
    std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](v103, (uint64_t)&v112);
    std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](v106, (uint64_t)&v109);
    v100 = 0uLL;
    *(_QWORD *)&v101 = "grantCapabilityInternal";
    *((_QWORD *)&v101 + 1) = 0;
    v19 = (WTF::Lock *)WTF::fastMalloc((WTF *)0x88);
    WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise((uint64_t)v19, &v100);
    v115 = v19;
    v116 = v100;
    v117 = v101;
    WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode((unsigned __int8 *)v19, 0, (WTF::Logger::LogSiteIdentifier *)&v100);
    v20 = v115;
    if (v115)
    {
      v21 = (unsigned int *)((char *)v115 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = v115;
    }
    else
    {
      v23 = 0;
    }
    v115 = 0;
    *(_OWORD *)&buf[8] = v116;
    v127 = v117;
    v24 = cf;
    cf = 0;
    *(_QWORD *)buf = v23;
    v128 = v24;
    v93 = (uint64_t)v20;
    std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](&v129, (uint64_t)v103);
    std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](v132, (uint64_t)v106);
    v25 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v25 = off_1E34C7400;
    *(_QWORD *)(v25 + 8) = *(_QWORD *)buf;
    v26 = v127;
    *(_OWORD *)(v25 + 16) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v25 + 32) = v26;
    v27 = v128;
    *(_QWORD *)buf = 0;
    v128 = 0;
    *(_QWORD *)(v25 + 48) = v27;
    std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v25 + 56), (uint64_t)&v129);
    std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100]((_BYTE *)(v25 + 80), (uint64_t)v132);
    v125 = (WTF::StringImpl *)v25;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)(v17 + 32) + 16))(v17 + 32, &v125);
    v28 = (uint64_t)v125;
    v125 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (v134[0])
    {
      if (v133 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E34C74A8[v133])(&v124, v132);
      v133 = -1;
    }
    if ((_BYTE)v131)
    {
      if (v130 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E34C74A8[v130])(&v124, &v129);
      v130 = -1;
    }
    v29 = v128;
    v128 = 0;
    if (v29)
      CFRelease(v29);
    WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)buf);
    WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)&v115);
    if (v108)
    {
      if (v107 != -1)
        ((void (*)(_BYTE *, char *))off_1E34C74A8[v107])(buf, v106);
      v107 = -1;
    }
    if (v105)
    {
      if (v104 != -1)
        ((void (*)(_BYTE *, char *))off_1E34C74A8[v104])(buf, v103);
      v104 = -1;
    }
    v30 = (void *)cf;
    cf = 0;
    if (v30)
      CFRelease(v30);
    if (v111 && v110 != -1)
      v30 = (void *)((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E34C74A8[v110])(buf, &v109);
    if (v114 && v113 != -1)
      v30 = (void *)((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E34C74A8[v113])(buf, &v112);
    v31 = WTF::RunLoop::main((WTF::RunLoop *)v30);
    v32 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      goto LABEL_192;
    v32 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = this;
    v34 = *(unsigned int **)this;
    *(_QWORD *)this = v32;
    if (!v34)
      goto LABEL_192;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v33);
    }
    v32 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_192:
      do
        v37 = __ldaxr((unsigned int *)v32);
      while (__stlxr(v37 + 1, (unsigned int *)v32));
    }
    v38 = v99;
    if (v99)
      *(_DWORD *)v99 += 2;
    if (v12)
      v39 = 256;
    else
      v39 = 0;
    v100 = 0uLL;
    v40 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
    v41 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v41 = &off_1E34C74E8;
    *(_QWORD *)(v41 + 8) = this;
    *(_QWORD *)(v41 + 16) = v32;
    *(_QWORD *)(v41 + 24) = v38;
    *(_WORD *)(v41 + 32) = v39 | v5;
    *(_DWORD *)(v40 + 8) = 1;
    *(_QWORD *)(v40 + 16) = v31;
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 40) = "grant";
    *(_QWORD *)(v40 + 48) = 0;
    *(_WORD *)(v40 + 56) = 0;
    *(_QWORD *)v40 = off_1E34C7510;
    v42 = v93;
    v43 = (unsigned int *)(v93 + 8);
    *(_QWORD *)(v40 + 64) = 0;
    *(_QWORD *)(v40 + 72) = v41;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v94 = v100;
    v95 = "grant";
    v96 = 0;
    v118 = (WTF::NativePromiseBase *)v40;
    v45 = (WTF::NativePromiseBase *)(v93 + 48);
    v115 = (WTF::Lock *)(v93 + 48);
    LOBYTE(v116) = 1;
    if (__ldaxr((unsigned __int8 *)(v93 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v45))
    {
LABEL_83:
      *(_BYTE *)(v93 + 128) = 1;
      v47 = (_BYTE *)WTF::NativePromiseBase::logChannel(v45);
      v48 = v47;
      if (*v47 && v47[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v94);
        WTF::String::String((WTF::String *)&v125, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v124, v93);
        WTF::String::String((WTF::String *)&v123, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v121, " isNothing:");
        WTF::LogArgument<BOOL>::toString<BOOL>(&v120);
        WTF::String::String((WTF::String *)&v119, "]");
        result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v109, (uint64_t *)&v125, (uint64_t *)&v124, (uint64_t *)&v123, (uint64_t *)&v122, (uint64_t *)&v121, (uint64_t *)&v120, (uint64_t *)&v119, &v112);
        if (!v112)
        {
          __break(0xC471u);
          return result;
        }
        v51 = v119;
        v119 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v50);
          else
            *(_DWORD *)v51 -= 2;
        }
        v52 = v120;
        v120 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v50);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = v121;
        v121 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v50);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = v122;
        v122 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v50);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = v123;
        v123 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v50);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = v124;
        v124 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v50);
          else
            *(_DWORD *)v56 -= 2;
        }
        v57 = v125;
        v125 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v50);
          else
            *(_DWORD *)v57 -= 2;
        }
        v58 = v109;
        v109 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v50);
          else
            *(_DWORD *)v58 -= 2;
        }
        v59 = *((_QWORD *)v48 + 4);
        v60 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v60)
        {
          WTF::String::utf8();
          v61 = cf ? (char *)cf + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v61;
          _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v60 = (uint64_t)cf;
          cf = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 1)
              v60 = WTF::fastFree((WTF *)v60, v7);
            else
              --*(_DWORD *)v60;
          }
        }
        if (*v48 && v48[16] >= 4u)
        {
          v62 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v63 = *v62;
            if ((v63 & 1) != 0)
              break;
            v64 = __ldaxr(v62);
            if (v64 == v63)
            {
              if (!__stxr(v63 | 1, v62))
              {
                v65 = WTF::Logger::observers((WTF::Logger *)v60);
                v66 = *(unsigned int *)(v65 + 12);
                if ((_DWORD)v66)
                {
                  v67 = *(uint64_t **)v65;
                  v92 = *(_QWORD *)v65 + 8 * v66;
                  do
                  {
                    v68 = *v67;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v94);
                    *(_DWORD *)&buf[16] = 0;
                    WTF::String::String((WTF::String *)&v127, " invoking maybeSettle() [");
                    DWORD2(v127) = 0;
                    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v128, v93);
                    v129 = 0;
                    WTF::String::String((WTF::String *)&v130, " callback:");
                    v131 = 0;
                    WTF::LogArgument<void const*>::toString();
                    v133 = 0;
                    WTF::String::String((WTF::String *)v134, " isNothing:");
                    v135 = 0;
                    WTF::LogArgument<BOOL>::toString<BOOL>(&v136);
                    v137 = 0;
                    WTF::String::String((WTF::String *)v138, "]");
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&cf, (uint64_t)buf, 8uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, CFTypeRef *))(*(_QWORD *)v68 + 16))(v68, v48, 4, &cf);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v69);
                    for (i = 120; i != -8; i -= 16)
                    {
                      v71 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v71)
                      {
                        if (*(_DWORD *)v71 == 2)
                          WTF::StringImpl::destroy(v71, v7);
                        else
                          *(_DWORD *)v71 -= 2;
                      }
                    }
                    ++v67;
                  }
                  while (v67 != (uint64_t *)v92);
                }
                v72 = __ldxr(v62);
                if (v72 == 1)
                {
                  v42 = v93;
                  if (!__stlxr(0, v62))
                    break;
                }
                else
                {
                  __clrex();
                  v42 = v93;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v73 = v112;
        v112 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v7);
          else
            *(_DWORD *)v73 -= 2;
        }
      }
      if (*(_DWORD *)(v42 + 80))
      {
        WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(v118, v42, (unsigned __int8 **)&v115);
      }
      else
      {
        v74 = (_QWORD *)(v42 + 88);
        v75 = *(unsigned int *)(v42 + 100);
        if ((_DWORD)v75 == *(_DWORD *)(v42 + 96))
        {
          v76 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v75 + 1, (unint64_t)&v118);
          v75 = *(unsigned int *)(v42 + 100);
          v77 = (WTF::NativePromiseBase **)(*(_QWORD *)(v42 + 88) + 8 * v75);
        }
        else
        {
          v77 = (WTF::NativePromiseBase **)(*v74 + 8 * v75);
          v76 = &v118;
        }
        v78 = *v76;
        *v76 = 0;
        *v77 = v78;
        *(_DWORD *)(v42 + 100) = v75 + 1;
      }
      if (!(_BYTE)v116)
        goto LABEL_165;
      v79 = v115;
      v80 = __ldxr((unsigned __int8 *)v115);
      if (v80 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v115))
        {
LABEL_165:
          v81 = (unsigned int *)v118;
          v118 = 0;
          if (v81)
          {
            v82 = v81 + 2;
            do
            {
              v83 = __ldaxr(v82);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v82));
            if (!v84)
            {
              atomic_store(1u, v81 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v81 + 8))(v81);
            }
          }
          if (v93)
          {
            v85 = (unsigned int *)(v93 + 8);
            do
            {
              v86 = __ldaxr(v85);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v85));
            if (!v87)
            {
              atomic_store(1u, (unsigned int *)(v93 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
            }
          }
          do
          {
            v88 = __ldaxr(v43);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v43));
          if (!v89)
          {
            atomic_store(1u, (unsigned int *)(v42 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
          }
          goto LABEL_178;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v79);
      goto LABEL_165;
    }
    v45 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C]();
    goto LABEL_83;
  }
LABEL_178:
  v90 = v97;
  v97 = 0;
  if (v90)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v90 + 4);
  v91 = v98;
  v98 = 0;
  if (v91)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v91 + 4);
LABEL_182:
  result = v99;
  v99 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971D8150(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int *a26,unsigned int *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49,uint64_t a50,uint64_t a51,unsigned __int8 *a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,unsigned int *a57)
{
  unsigned __int8 *v57;
  int v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;

  v58 = __ldxr(v57);
  if (v58 == 1)
  {
    if (!__stlxr(0, v57))
    {
LABEL_6:
      if (a49)
      {
        if (*(_DWORD *)a49 == 2)
          WTF::StringImpl::destroy(a49, a2);
        else
          *(_DWORD *)a49 -= 2;
      }
      if (a53)
      {
        v59 = __ldxr(a52);
        if (v59 == 1)
        {
          if (!__stlxr(0, a52))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)a52);
      }
LABEL_16:
      if (a57)
      {
        v60 = a57 + 2;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, a57 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a57 + 8))(a57);
        }
      }
      if (a27)
      {
        v63 = a27 + 2;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, a27 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a27 + 8))(a27);
        }
      }
      if (a26)
      {
        v66 = a26 + 2;
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          atomic_store(1u, a26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a26 + 16))(a26);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebKit::prepareGrant(WTF::StringImpl **this, const WTF::String *a2, WebKit::AuxiliaryProcessProxy *a3)
{
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  void *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl **v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl **v31;
  WTF *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v40;
  uint64_t v41;

  v4 = *this;
  if (*this)
    *(_DWORD *)v4 += 2;
  v40 = v4;
  v41 = 0;
  v5 = (uint64_t *)((char *)a2 + 392);
  v6 = *((_QWORD *)a2 + 49);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)a2 + 49),
        (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*this + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*this);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF::StringImpl **)(v6 + 24 * (v9 & v7));
    v14 = *v13;
    if (*v13 == (WTF::StringImpl *)-1)
    {
      v10 = (WTF::StringImpl **)(v6 + 24 * v12);
      goto LABEL_15;
    }
    if (!v14)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        v13 = v10;
      }
      WTF::String::operator=(v13, (WTF::StringImpl *)this);
      WebKit::ExtensionCapabilityGrant::operator=((uint64_t)(v13 + 1), (WTF::StringImpl *)&v40);
      v15 = *v5;
      if (*v5)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v20 = *v5;
      if (*v5)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_55;
      }
      else if (3 * v23 > 4 * v22)
      {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    if ((WTF::equal(v14, *this, a3) & 1) != 0)
      break;
LABEL_15:
    v9 = i + v12;
  }
  v17 = *(void **)(v6 + 24 * v12 + 16);
  if (!v17 || (objc_msgSend(v17, "isValid", v40, v41) & 1) != 0)
  {
    v19 = 0;
    goto LABEL_56;
  }
  v24 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5),
        (v24 = *v5) != 0))
  {
    v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = *((_DWORD *)*this + 4);
  if (v26 >= 0x100)
    v27 = v26 >> 8;
  else
    v27 = WTF::StringImpl::hashSlowCase(*this);
  v28 = 0;
  v29 = 1;
  while (2)
  {
    v30 = v27 & v25;
    v31 = (WTF::StringImpl **)(v24 + 24 * (v27 & v25));
    v32 = *v31;
    if (*v31 == (WTF::StringImpl *)-1)
    {
      v28 = (WTF::StringImpl **)(v24 + 24 * v30);
LABEL_43:
      v27 = v29 + v30;
      ++v29;
      continue;
    }
    break;
  }
  if (v32)
  {
    if (WTF::equal(v32, *this, v18))
    {
      WebKit::ExtensionCapabilityGrant::operator=(v24 + 24 * v30 + 8, (WTF::StringImpl *)&v40);
      goto LABEL_55;
    }
    goto LABEL_43;
  }
  if (v28)
  {
    *v28 = 0;
    v28[1] = 0;
    v28[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    v31 = v28;
  }
  WTF::String::operator=(v31, (WTF::StringImpl *)this);
  WebKit::ExtensionCapabilityGrant::operator=((uint64_t)(v31 + 1), (WTF::StringImpl *)&v40);
  v33 = *v5;
  if (*v5)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *v5;
  if (*v5)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 > 2 * v37)
      goto LABEL_55;
LABEL_54:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5);
    goto LABEL_55;
  }
  if (3 * v38 <= 4 * v37)
    goto LABEL_54;
LABEL_55:
  v19 = 1;
LABEL_56:
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v40);
  return v19;
}

void sub_1971D8BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&a9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ExtensionCapabilityGranter::revoke(WebKit::ExtensionCapabilityGranter *this, const WebKit::ExtensionCapability *a2)
{
  const WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  const WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = 2;
  v28 = WTF::fastMalloc((WTF *)0x20);
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebKit::ExtensionCapability *))(*(_QWORD *)a2 + 16))(&v27, a2);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, WebKit::ExtensionCapabilityGranter *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8)
                                                                                              + 16))(&v26, *(_QWORD *)(*((_QWORD *)this + 1) + 8), this);
  if (v26)
  {
    v5 = (uint64_t *)(v26 + 392);
    v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v26 + 392), &v27, v4);
    WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::take(&v24, v5, v6);
    if (HIDWORD(v29) == (_DWORD)v29)
    {
      WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v28, (unint64_t)&v24);
    }
    else
    {
      v7 = HIDWORD(v29) + 1;
      v8 = (_QWORD *)(v28 + 16 * HIDWORD(v29));
      v9 = v24;
      v24 = 0;
      *v8 = v9;
      v10 = v25;
      v25 = 0;
      v8[1] = v10;
      HIDWORD(v29) = v7;
    }
    WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v24);
    v11 = v26;
    v26 = 0;
    if (v11)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
  }
  v12 = (unsigned int *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, WebKit::ExtensionCapabilityGranter *, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 24))(&v26, *(_QWORD *)(*((_QWORD *)this + 1) + 8), this, &v27);
  if (v26)
  {
    v14 = (uint64_t *)(v26 + 392);
    v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v26 + 392), &v27, v13);
    WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::take(&v24, v14, v15);
    if (HIDWORD(v29) == (_DWORD)v29)
    {
      WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v28, (unint64_t)&v24);
    }
    else
    {
      v16 = HIDWORD(v29) + 1;
      v17 = (_QWORD *)(v28 + 16 * HIDWORD(v29));
      v18 = v24;
      v24 = 0;
      *v17 = v18;
      v19 = v25;
      v25 = 0;
      v17[1] = v19;
      HIDWORD(v29) = v16;
    }
    WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v24);
    v20 = v26;
    v26 = 0;
    if (v20)
      v12 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
  }
  WebKit::ExtensionCapabilityGranter::invalidateGrants((WebKit *)v12, (uint64_t)&v28);
  v22 = v27;
  v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  return WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v21);
}

void sub_1971D8DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&a9);
  v15 = a11;
  a11 = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
  v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

void WebKit::ExtensionCapabilityGranter::setMediaCapabilityActive(WebKit::ExtensionCapabilityGranter *this, WebKit::MediaCapability *a2, int a3)
{
  int v5;
  char v7;
  NSObject *v8;
  WTF::StringImpl *v9;
  char *v10;
  const char *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  WTF *v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;
  __int128 v23;
  const void *v24;
  WTF::Lock *v25;
  const void *v26;
  const void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  _BYTE *v42;
  _BYTE *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  char *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  uint64_t i;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  _QWORD *v69;
  uint64_t v70;
  WTF::NativePromiseBase **v71;
  WTF::NativePromiseBase **v72;
  WTF::NativePromiseBase *v73;
  WTF::Lock *v74;
  int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WTF::StringImpl *v91[2];
  __int128 v92;
  unsigned int *v93;
  unsigned int *v94;
  __int128 v95;
  const char *v96;
  uint64_t v97;
  WTF *v98;
  __int128 v99;
  __int128 v100;
  WTF::NativePromiseBase *v101;
  WTF::Lock *v102;
  char v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  _BYTE buf[24];
  __int128 v114;
  const void *v115;
  const void *v116;
  char v117[8];
  int v118;
  int v119;
  _DWORD v120[4];
  uint64_t v121;
  int v122;
  _QWORD v123[5];

  v123[2] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a2 + 24);
  if ((v5 - 1) < 2)
  {
    if ((a3 & 1) != 0)
      return;
    v7 = 3;
    goto LABEL_11;
  }
  if (v5 == 3 || v5 == 0)
  {
    if ((a3 & 1) == 0)
      return;
    v7 = 1;
LABEL_11:
    *((_BYTE *)a2 + 24) = v7;
  }
  v8 = qword_1ECE71618;
  v9 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v9)
  {
    WebKit::MediaCapability::environmentIdentifier((id *)a2, (uint64_t *)v91);
    WTF::String::utf8();
    if (v98)
      v10 = (char *)v98 + 16;
    else
      v10 = 0;
    v11 = "deactivating";
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "setMediaCapabilityActive";
    if (a3)
      v11 = "activating";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2082;
    *(_QWORD *)&v114 = v11;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] %{public}s", buf, 0x20u);
    v13 = v98;
    v98 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v9 = v91[0];
    v91[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v14 = WebKit::granterQueue(v9);
  v15 = (const void *)*((_QWORD *)a2 + 1);
  if (v15)
    CFRetain(*((CFTypeRef *)a2 + 1));
  v16 = (const void *)*((_QWORD *)a2 + 9);
  if (v16)
    CFRetain(*((CFTypeRef *)a2 + 9));
  v91[0] = 0;
  v91[1] = 0;
  v92 = (unint64_t)"setMediaCapabilityActive";
  v17 = (WTF *)WTF::fastMalloc((WTF *)0x78);
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise((uint64_t)v17, (__int128 *)v91);
  v98 = v17;
  v99 = *(_OWORD *)v91;
  v100 = v92;
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode((unsigned __int8 *)v17, 0, (WTF::Logger::LogSiteIdentifier *)v91);
  v18 = v98;
  if (v98)
  {
    v19 = (unsigned int *)((char *)v98 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = v98;
  }
  else
  {
    v21 = 0;
  }
  v98 = 0;
  *(_OWORD *)&buf[8] = v99;
  v114 = v100;
  *(_QWORD *)buf = v21;
  v115 = v15;
  v116 = v16;
  v117[0] = a3;
  v22 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v22 = off_1E34C75B0;
  *(_QWORD *)(v22 + 8) = *(_QWORD *)buf;
  v23 = v114;
  *(_OWORD *)(v22 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 48) = v115;
  v24 = v116;
  *(_QWORD *)buf = 0;
  v115 = 0;
  v116 = 0;
  *(_QWORD *)(v22 + 56) = v24;
  *(_BYTE *)(v22 + 64) = v117[0];
  v102 = (WTF::Lock *)v22;
  (*(void (**)(uint64_t, WTF::Lock **))(*(_QWORD *)(v14 + 32) + 16))(v14 + 32, &v102);
  v25 = v102;
  v102 = 0;
  if (v25)
    (*(void (**)(WTF::Lock *))(*(_QWORD *)v25 + 8))(v25);
  v26 = v116;
  v116 = 0;
  if (v26)
    CFRelease(v26);
  v27 = v115;
  v115 = 0;
  if (v27)
    CFRelease(v27);
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)buf);
  v28 = WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)&v98);
  v29 = WTF::RunLoop::main((WTF::RunLoop *)v28);
  v30 = *((_QWORD *)a2 + 2);
  if (v30)
    goto LABEL_158;
  v30 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v30 = 1;
  *(_QWORD *)(v30 + 8) = a2;
  v32 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v30;
  if (!v32)
    goto LABEL_158;
  do
  {
    v33 = __ldaxr(v32);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v32));
  if (!v34)
  {
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, v31);
  }
  v30 = *((_QWORD *)a2 + 2);
  if (v30)
  {
LABEL_158:
    do
      v35 = __ldaxr((unsigned int *)v30);
    while (__stlxr(v35 + 1, (unsigned int *)v30));
  }
  v36 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  v37 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v37 = &off_1E34C7618;
  *(_QWORD *)(v37 + 8) = v30;
  *(_BYTE *)(v37 + 16) = a3;
  *(_DWORD *)(v36 + 8) = 1;
  *(_QWORD *)(v36 + 16) = v29;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = "setMediaCapabilityActive";
  *(_QWORD *)(v36 + 48) = 0;
  *(_WORD *)(v36 + 56) = 0;
  *(_QWORD *)v36 = off_1E34C7640;
  v38 = (unsigned int *)((char *)v18 + 8);
  *(_QWORD *)(v36 + 64) = 0;
  *(_QWORD *)(v36 + 72) = v37;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 + 1, v38));
  v95 = 0uLL;
  v96 = "setMediaCapabilityActive";
  v97 = 0;
  v93 = (unsigned int *)v18;
  v94 = 0;
  v40 = (unsigned __int8 *)v18 + 48;
  v101 = (WTF::NativePromiseBase *)v36;
  v102 = (WTF *)((char *)v18 + 48);
  v103 = 1;
  if (__ldaxr((unsigned __int8 *)v18 + 48))
  {
    __clrex();
LABEL_52:
    v40 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_53;
  }
  if (__stxr(1u, v40))
    goto LABEL_52;
LABEL_53:
  *((_BYTE *)v18 + 112) = 1;
  v42 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v40);
  v43 = v42;
  if (*v42 && v42[16] >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v95);
    WTF::String::String((WTF::String *)&v110, " invoking maybeSettle() [");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v109, (uint64_t)v18);
    WTF::String::String((WTF::String *)&v108, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v106, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v105);
    WTF::String::String((WTF::String *)&v104, "]");
    WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v111, (uint64_t *)&v110, (uint64_t *)&v109, (uint64_t *)&v108, (uint64_t *)&v107, (uint64_t *)&v106, (uint64_t *)&v105, (uint64_t *)&v104, &v112);
    if (!v112)
    {
      __break(0xC471u);
      return;
    }
    v45 = v104;
    v104 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v44);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v105;
    v105 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v44);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v106;
    v106 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v44);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = v107;
    v107 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v44);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = v108;
    v108 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v44);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v109;
    v109 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v44);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v110;
    v110 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v44);
      else
        *(_DWORD *)v51 -= 2;
    }
    v52 = v111;
    v111 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v44);
      else
        *(_DWORD *)v52 -= 2;
    }
    v53 = *((_QWORD *)v43 + 4);
    v54 = os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v54)
    {
      WTF::String::utf8();
      v56 = v98 ? (char *)v98 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v56;
      _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v54 = (uint64_t)v98;
      v98 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 1)
          v54 = WTF::fastFree((WTF *)v54, v55);
        else
          --*(_DWORD *)v54;
      }
    }
    if (*v43 && v43[16] >= 4u)
    {
      v57 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v58 = *v57;
        if ((v58 & 1) != 0)
          break;
        v59 = __ldaxr(v57);
        if (v59 == v58)
        {
          if (!__stxr(v58 | 1, v57))
          {
            v60 = WTF::Logger::observers((WTF::Logger *)v54);
            v61 = *(unsigned int *)(v60 + 12);
            if ((_DWORD)v61)
            {
              v62 = *(uint64_t **)v60;
              v90 = *(_QWORD *)v60 + 8 * v61;
              do
              {
                v63 = *v62;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v95);
                *(_DWORD *)&buf[16] = 0;
                WTF::String::String((WTF::String *)&v114, " invoking maybeSettle() [");
                DWORD2(v114) = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v115, (uint64_t)v18);
                LODWORD(v116) = 0;
                WTF::String::String((WTF::String *)v117, " callback:");
                v118 = 0;
                WTF::LogArgument<void const*>::toString();
                v119 = 0;
                WTF::String::String((WTF::String *)v120, " isNothing:");
                v120[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v121);
                v122 = 0;
                WTF::String::String((WTF::String *)v123, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v98, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v63 + 16))(v63, v43, 4, &v98);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v98, v64);
                for (i = 120; i != -8; i -= 16)
                {
                  v66 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v66)
                  {
                    if (*(_DWORD *)v66 == 2)
                      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v66 -= 2;
                  }
                }
                ++v62;
              }
              while (v62 != (uint64_t *)v90);
            }
            v67 = __ldxr(v57);
            if (v67 == 1)
            {
              if (!__stlxr(0, v57))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v68 = v112;
    v112 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v55);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  if (*((_DWORD *)v18 + 16))
  {
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(v101, (uint64_t)v18, (unsigned __int8 **)&v102);
  }
  else
  {
    v69 = (_QWORD *)((char *)v18 + 72);
    v70 = *((unsigned int *)v18 + 21);
    if ((_DWORD)v70 == *((_DWORD *)v18 + 20))
    {
      v71 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v101);
      v70 = *((unsigned int *)v18 + 21);
      v72 = (WTF::NativePromiseBase **)(*((_QWORD *)v18 + 9) + 8 * v70);
    }
    else
    {
      v72 = (WTF::NativePromiseBase **)(*v69 + 8 * v70);
      v71 = &v101;
    }
    v73 = *v71;
    *v71 = 0;
    *v72 = v73;
    *((_DWORD *)v18 + 21) = v70 + 1;
  }
  if (!v103)
    goto LABEL_134;
  v74 = v102;
  v75 = __ldxr((unsigned __int8 *)v102);
  if (v75 != 1)
  {
    __clrex();
    goto LABEL_133;
  }
  if (__stlxr(0, (unsigned __int8 *)v102))
LABEL_133:
    WTF::Lock::unlockSlow(v74);
LABEL_134:
  v76 = (unsigned int *)v101;
  v101 = 0;
  if (v76)
  {
    v77 = v76 + 2;
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v76 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
    }
  }
  v80 = v94;
  v94 = 0;
  if (v80)
  {
    v81 = v80 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v80 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
    }
  }
  v84 = v93;
  v93 = 0;
  if (v84)
  {
    v85 = v84 + 2;
    do
    {
      v86 = __ldaxr(v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v85));
    if (!v87)
    {
      atomic_store(1u, v84 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
    }
  }
  do
  {
    v88 = __ldaxr(v38);
    v89 = v88 - 1;
  }
  while (__stlxr(v89, v38));
  if (!v89)
  {
    atomic_store(1u, (unsigned int *)v18 + 2);
    (*(void (**)(WTF *))(*(_QWORD *)v18 + 16))(v18);
  }
}

void sub_1971D98D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned int *a32,unsigned int *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,unsigned int *a43,WTF::Lock *a44,char a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF::StringImpl *a48,WTF::StringImpl *a49,WTF::StringImpl *a50,WTF::StringImpl *a51,WTF::StringImpl *a52)
{
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;

  v54 = __ldxr(v52);
  if (v54 == 1)
  {
    if (!__stlxr(0, v52))
    {
LABEL_6:
      v55 = *(WTF::StringImpl **)(v53 - 248);
      *(_QWORD *)(v53 - 248) = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, a2);
        else
          *(_DWORD *)v55 -= 2;
      }
      if (a45)
      {
        v56 = __ldxr((unsigned __int8 *)a44);
        if (v56 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a44))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a44);
      }
LABEL_16:
      if (a43)
      {
        v57 = a43 + 2;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
        {
          atomic_store(1u, a43 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a43 + 8))(a43);
        }
      }
      if (a33)
      {
        v60 = a33 + 2;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, a33 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a33 + 8))(a33);
        }
      }
      if (a32)
      {
        v63 = a32 + 2;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, a32 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a32 + 16))(a32);
        }
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1971D9E24()
{
  JUMPOUT(0x1971D9DC0);
}

uint64_t WebKit::FindClient::setDelegate(uint64_t a1, void *a2)
{
  char v3;
  char v4;
  char v5;
  uint64_t result;
  char v7;

  objc_storeWeak((id *)(a1 + 16), a2);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFB | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xF7 | v5;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    v7 = 16;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xEF | v7;
  return result;
}

void WebKit::FindClient::didCountStringMatches(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, unsigned int a4)
{
  id WeakRetained;
  id v8;
  const __CFString *v9;

  if (((_BYTE)this[3] & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    v8 = this[1];
    if (*(_QWORD *)a3)
      v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:didCountMatches:forString:", v8, a4, v9);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971D9FA8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FindClient::didFindString(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, int a6)
{
  id WeakRetained;
  uint64_t v11;
  const __CFString *v12;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    v11 = *(_QWORD *)(a1 + 8);
    if (*a3)
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:didFindMatches:forString:withMatchIndex:", v11, a5, v12, a6);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971DA05C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FindClient::didFailToFindString(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3)
{
  id WeakRetained;
  id v6;
  const __CFString *v7;

  if (((_BYTE)this[3] & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    v6 = this[1];
    if (*(_QWORD *)a3)
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:didFailToFindString:", v6, v7);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971DA0F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::FindClient::didAddLayerForFindOverlay(uint64_t this, WebKit::WebPageProxy *a2, CALayer *a3)
{
  if ((*(_BYTE *)(this + 24) & 8) != 0)
    return objc_msgSend(objc_loadWeak((id *)(this + 16)), "_webView:didAddLayerForFindOverlay:", *(_QWORD *)(this + 8), a3);
  return this;
}

uint64_t WebKit::FindClient::didRemoveLayerForFindOverlay(uint64_t this, WebKit::WebPageProxy *a2)
{
  if ((*(_BYTE *)(this + 24) & 0x10) != 0)
    return objc_msgSend(objc_loadWeak((id *)(this + 16)), "_webViewDidRemoveLayerForFindOverlay:", *(_QWORD *)(this + 8));
  return this;
}

void WebKit::FullscreenClient::willEnterFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  id WeakRetained;

  objc_msgSend(this[1], "willChangeValueForKey:", CFSTR("fullscreenState"));
  objc_msgSend(this[1], "didChangeValueForKey:", CFSTR("fullscreenState"));
  if (((_BYTE)this[3] & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    objc_msgSend(WeakRetained, "_webViewWillEnterElementFullscreen:", this[1]);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971DA1F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::didEnterFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  id WeakRetained;

  objc_msgSend(this[1], "willChangeValueForKey:", CFSTR("fullscreenState"));
  objc_msgSend(this[1], "didChangeValueForKey:", CFSTR("fullscreenState"));
  if (((_BYTE)this[3] & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    objc_msgSend(WeakRetained, "_webViewDidEnterElementFullscreen:", this[1]);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971DA27C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::willExitFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  id WeakRetained;

  objc_msgSend(this[1], "willChangeValueForKey:", CFSTR("fullscreenState"));
  objc_msgSend(this[1], "didChangeValueForKey:", CFSTR("fullscreenState"));
  if (((_BYTE)this[3] & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    objc_msgSend(WeakRetained, "_webViewWillExitElementFullscreen:", this[1]);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971DA300(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::didExitFullscreen(id *this, WebKit::WebPageProxy *a2)
{
  id WeakRetained;

  objc_msgSend(this[1], "willChangeValueForKey:", CFSTR("fullscreenState"));
  objc_msgSend(this[1], "didChangeValueForKey:", CFSTR("fullscreenState"));
  if (((_BYTE)this[3] & 8) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    objc_msgSend(WeakRetained, "_webViewDidExitElementFullscreen:", this[1]);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971DA384(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FullscreenClient::requestPresentingViewController(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id Weak;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((*(_BYTE *)(a1 + 24) & 0x10) != 0)
  {
    Weak = objc_loadWeak((id *)(a1 + 16));
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *a2;
    *a2 = 0;
    v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v8 = MEMORY[0x1E0C809A0];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::{lambda(void *,UIViewController *,NSError *)#1}::__invoke;
    v8[3] = &WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::descriptor;
    v8[4] = v7;
    objc_msgSend(Weak, "_webView:requestPresentingViewControllerWithCompletionHandler:", v6, v8);
    _Block_release(v8);
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

void sub_1971DA480(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(WebKit::GPUProcessProxy *this)
{
  unsigned __int8 **v1;
  unsigned __int8 *v2;
  int v4;
  _QWORD *v5;
  NSObject *global_queue;

  v1 = (unsigned __int8 **)*((_QWORD *)this + 18);
  if (!v1)
    goto LABEL_11;
  v2 = *v1;
  if (__ldaxr(*v1))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEABB3C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, v2))
    goto LABEL_5;
LABEL_6:
  ++*((_QWORD *)v2 + 1);
  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_11:
  v5 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::{lambda(void *)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::descriptor;
  v5[4] = v1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, v5);
  _Block_release(v5);
}

void sub_1971DA5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!v10)
    goto LABEL_19;
  v12 = *v10;
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
LABEL_7:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v20 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v20 == 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_14:
        if (!v15)
        {
          v19 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v19 = off_1E34ACA48;
          *(_QWORD *)(v19 + 8) = v12;
          *(_QWORD *)(v19 + 16) = v16;
          *(_BYTE *)(v19 + 24) = v17;
          v21 = v19;
          WTF::ensureOnMainRunLoop();
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v12);
  goto LABEL_7;
}

id WebKit::IconLoadingDelegate::delegate@<X0>(id *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_loadWeakRetained(this + 1);
  *a2 = result;
  return result;
}

void WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v4 + 16) & 1) == 0)
  {
    v15 = 0;
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v15);
    goto LABEL_8;
  }
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  if (!WeakRetained)
  {
    v15 = 0;
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v15);
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v14 = v15;
    v15 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return;
  }
  v9 = WeakRetained;
  v10 = -[_WKLinkIconParameters _initWithLinkIcon:]([_WKLinkIconParameters alloc], "_initWithLinkIcon:", a2);
  v11 = **(_QWORD **)(a1 + 8);
  v12 = *a3;
  *a3 = 0;
  v13 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v13 = MEMORY[0x1E0C809A0];
  v13[1] = 50331650;
  v13[2] = WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::{lambda(void *,void({block_pointer})(NSData *))#1}::__invoke;
  v13[3] = &WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::descriptor;
  v13[4] = v12;
  objc_msgSend(v9, "webView:shouldLoadIconWithParameters:completionHandler:", v11, v10, v13);
  _Block_release(v13);
  if (v10)
    CFRelease(v10);
  CFRelease(v9);
}

void sub_1971DA82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void sub_1971DAD64(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 - 40);
  *(_QWORD *)(v1 - 40) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v1 - 232));
  _Unwind_Resume(a1);
}

void WebKit::LegacyCustomProtocolManagerClient::startLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WKCustomProtocolLoader *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  const void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v6 = WebCore::ResourceRequest::nsURLRequest();
  if (v6)
  {
    v7 = -[WKCustomProtocolLoader initWithLegacyCustomProtocolManagerProxy:customProtocolID:request:]([WKCustomProtocolLoader alloc], "initWithLegacyCustomProtocolManagerProxy:customProtocolID:request:", a2, a3, v6);
    v10 = *(_QWORD *)(a1 + 8);
    v9 = (uint64_t *)(a1 + 8);
    v8 = v10;
    if (v10
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v9),
          (v8 = *v9) != 0))
    {
      v11 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    if (!*v16)
    {
LABEL_13:
      v20 = (const void *)v16[1];
      *v16 = a3;
      v16[1] = (uint64_t)v7;
      if (v20)
        CFRelease(v20);
      v21 = *v9;
      if (*v9)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v9;
      if (*v9)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          return;
      }
      else if (3 * v26 > 4 * v25)
      {
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v9);
      return;
    }
    v18 = 0;
    v19 = 1;
    while (v17 != a3)
    {
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
      if (!*v16)
      {
        if (v18)
        {
          *v18 = 0;
          v18[1] = 0;
          --*(_DWORD *)(*v9 - 16);
          v16 = v18;
        }
        goto LABEL_13;
      }
    }
    if (v7)
      CFRelease(v7);
  }
}

void sub_1971DB020(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::LegacyCustomProtocolManagerClient::stopLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, a3);
  if (v4)
  {
    v6 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v6 == v5)
      return;
  }
  else
  {
    if (!v5)
      return;
    v6 = 0;
  }
  if (v6 != v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v5);
}

uint64_t WebKit::LegacyCustomProtocolManagerClient::invalidate(uint64_t a1)
{
  uint64_t result;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;

  v2 = (uint64_t *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    do
    {
      if (!*(_DWORD *)(result - 12))
        return result;
      v3 = *(unsigned int *)(result - 4);
      v4 = (uint64_t *)(result + 16 * v3);
      v5 = (uint64_t *)result;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (uint64_t *)result;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            break;
          }
        }
      }
      v7 = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(result, *v5);
      if (v4 == v7)
      {
        v8 = 0;
      }
      else
      {
        v8 = (void *)v7[1];
        v7[1] = 0;
        if (*v2)
        {
          v9 = *v2 + 16 * *(unsigned int *)(*v2 - 4);
          if ((uint64_t *)v9 != v7)
            goto LABEL_15;
        }
        else if (v7)
        {
          v9 = 0;
LABEL_15:
          if ((uint64_t *)v9 != v7)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v2, v7);
        }
      }
      objc_msgSend(v8, "cancel");
      if (v8)
        CFRelease(v8);
      result = *v2;
    }
    while (*v2);
  }
  return result;
}

void sub_1971DB178(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyDownloadClient::legacyDidStart(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(result + 24) & 1) != 0)
    return objc_msgSend(objc_loadWeak((id *)(result + 16)), "_downloadDidStart:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)));
  return result;
}

uint64_t WebKit::LegacyDownloadClient::didReceiveData(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5;

  v5 = *(_WORD *)(result + 24);
  if ((v5 & 8) != 0)
    return objc_msgSend(objc_loadWeak((id *)(result + 16)), "_download:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)), a3, a4, a5);
  if ((v5 & 4) != 0)
    return objc_msgSend(objc_loadWeak((id *)(result + 16)), "_download:didReceiveData:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)), a3);
  return result;
}

void WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  id *v10;
  id Weak;
  _WKDownload *v12;
  const void *v13;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef cf;

  if ((*(_WORD *)(a1 + 24) & 0x400) != 0)
  {
    v10 = (id *)(a1 + 16);
    Weak = objc_loadWeak((id *)(a1 + 16));
    v12 = +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8));
    v13 = *(const void **)(a3 + 8);
    CFRetain(v13);
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v10);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__download_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v20);
    v16 = a3;
    v15 = v20;
    v17 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v17 = MEMORY[0x1E0C809A0];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v17[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::descriptor;
    v17[4] = v16;
    v17[5] = v15;
    objc_msgSend(Weak, "_download:didReceiveAuthenticationChallenge:completionHandler:", v12, v13, v17);
    _Block_release(v17);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v19);
    cf = 0;
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, 1, &v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = cf;
      cf = 0;
      if (v7)
        CFRelease(v7);
    }
    v8 = v20;
    v20 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v18 = v19;
    v19 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v5);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
}

void sub_1971DB464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;

  _Block_release(v10);
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyDownloadClient::didCreateDestination(uint64_t result, uint64_t a2, _QWORD *a3)
{
  id Weak;
  _WKDownload *v6;
  const __CFString *v7;

  if ((*(_WORD *)(result + 24) & 0x1000) != 0)
  {
    Weak = objc_loadWeak((id *)(result + 16));
    v6 = +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8));
    if (*a3)
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E351F1B8;
    return objc_msgSend(Weak, "_download:didCreateDestination:", v6, v7);
  }
  return result;
}

uint64_t WebKit::LegacyDownloadClient::processDidCrash(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(result + 24) & 0x2000) != 0)
    return objc_msgSend(objc_loadWeak((id *)(result + 16)), "_downloadProcessDidCrash:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)));
  return result;
}

void WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, _QWORD *a4, uint64_t *a5)
{
  __int16 v9;
  id Weak;
  id *v12;
  id v13;
  _WKDownload *v14;
  const __CFString *v15;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  id v22;
  _WKDownload *v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v9 = *(_WORD *)(a1 + 24);
  if ((v9 & 2) != 0)
  {
    Weak = objc_loadWeak((id *)(a1 + 16));
    objc_msgSend(Weak, "_download:didReceiveResponse:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)), WebCore::ResourceResponse::nsURLResponse(a3));
    v9 = *(_WORD *)(a1 + 24);
  }
  if ((v9 & 0x30) == 0)
  {
    v29 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v29);
    v21 = v29;
    v29 = 0;
    if (!v21)
      return;
    goto LABEL_14;
  }
  if ((v9 & 0x10) == 0)
  {
    v12 = (id *)(a1 + 16);
    v13 = objc_loadWeak((id *)(a1 + 16));
    v14 = +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8));
    if (*a4)
      v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E351F1B8;
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v12);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__download_decideDestinationWithSuggestedFilename_completionHandler_, v27);
    v17 = *a5;
    *a5 = 0;
    v18 = v27[0];
    v19 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v19 = MEMORY[0x1E0C809A0];
    v19[1] = 50331650;
    v19[2] = WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::{lambda(void *,BOOL,NSString *)#1}::__invoke;
    v19[3] = &WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::descriptor;
    v19[4] = v18;
    v19[5] = v17;
    objc_msgSend(v13, "_download:decideDestinationWithSuggestedFilename:completionHandler:", v14, v15, v19);
    _Block_release(v19);
    if (WeakRetained)
      CFRelease(WeakRetained);
    return;
  }
  LOBYTE(v27[0]) = 0;
  v22 = objc_loadWeak((id *)(a1 + 16));
  v23 = +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8));
  if (*a4)
    v24 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v24 = &stru_1E351F1B8;
  v25 = objc_msgSend(v22, "_download:decideDestinationWithSuggestedFilename:allowOverwrite:", v23, v24, v27);
  v26 = LOBYTE(v27[0]);
  MEMORY[0x19AEABCC8](&v28, v25);
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, v26, &v28);
  v21 = v28;
  v28 = 0;
  if (v21)
  {
LABEL_14:
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
}

void sub_1971DB7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  const void *v12;
  const void *v13;
  const void *v14;

  v14 = v12;
  _Block_release(v14);
  if (v13)
    CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyDownloadClient::didFinish(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(result + 24) & 0x40) != 0)
    return objc_msgSend(objc_loadWeak((id *)(result + 16)), "_downloadDidFinish:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)));
  return result;
}

uint64_t WebKit::LegacyDownloadClient::didFail(uint64_t result, uint64_t a2, WebCore::ResourceError *a3)
{
  id Weak;

  if ((*(_WORD *)(result + 24) & 0x80) != 0)
  {
    Weak = objc_loadWeak((id *)(result + 16));
    return objc_msgSend(Weak, "_download:didFailWithError:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)), WebCore::ResourceError::nsError(a3));
  }
  return result;
}

uint64_t WebKit::LegacyDownloadClient::legacyDidCancel(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(result + 24) & 0x100) != 0)
    return objc_msgSend(objc_loadWeak((id *)(result + 16)), "_downloadDidCancel:", +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8)));
  return result;
}

uint64_t WebKit::LegacyDownloadClient::willSendRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t *a5)
{
  id Weak;
  _WKDownload *v9;
  uint64_t v10;

  if ((*(_WORD *)(a1 + 24) & 0x200) != 0)
  {
    Weak = objc_loadWeak((id *)(a1 + 16));
    v9 = +[_WKDownload downloadWithDownload:](_WKDownload, "downloadWithDownload:", *(_QWORD *)(a2 + 8));
    WebCore::ResourceRequestBase::url(a3);
    objc_msgSend(Weak, "_download:didReceiveServerRedirectToURL:", v9, WTF::URL::operator NSURL *());
  }
  v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequestBase *))(*(_QWORD *)v10 + 16))(v10, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void sub_1971DBA44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::LegacyCustomProtocolManagerClient::~LegacyCustomProtocolManagerClient(WebKit::LegacyCustomProtocolManagerClient *this, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v2, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  WTF::fastFree(this, a2);
}

void WebKit::LegacyDownloadClient::~LegacyDownloadClient(id *this)
{
  objc_destroyWeak(this + 2);
}

{
  void *v2;

  objc_destroyWeak(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebKit::ExtensionCapabilityGrant *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 24 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v3 + 24 * v10);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v13);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(v15 + 24 * v20 + 8));
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v12;
          *v12 = 0;
          *v21 = v24;
          v25 = (WebKit::ExtensionCapabilityGrant *)(v3 + 24 * v10);
          v26 = *((_QWORD *)v25 + 1);
          v25 = (WebKit::ExtensionCapabilityGrant *)((char *)v25 + 8);
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v15 + 24 * v20 + 8) = v26;
          v27 = *((_QWORD *)v25 + 1);
          *((_QWORD *)v25 + 1) = 0;
          *(_QWORD *)(v15 + 24 * v20 + 16) = v27;
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v25);
          v14 = *v12;
          *v12 = 0;
          if (!v14)
            goto LABEL_30;
          if (*(_DWORD *)v14 == 2)
          {
LABEL_29:
            WTF::StringImpl::destroy(v14, v7);
            goto LABEL_30;
          }
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(v3 + 24 * v10 + 8));
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              goto LABEL_29;
            *(_DWORD *)v14 -= 2;
          }
        }
      }
LABEL_30:
      if (++v10 == v11)
        goto LABEL_33;
    }
  }
  if (v3)
LABEL_33:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WebKit::ExtensionCapabilityGrant::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  const void *v5;

  WTF::String::operator=((WTF::StringImpl **)a1, a2);
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    CFRelease(v5);
  return a1;
}

_BYTE *WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 129));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

void sub_1971DBEAC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34C73B0;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  v6 = v5;
  if (!*v5 || v5[16] < 4u)
    return a1;
  WTF::String::String((WTF::String *)&v30, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, a1);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *((_QWORD *)v6 + 4);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*v6 && v6[16] >= 4u)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                v33 = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v22 + 16))(v22, v6, 4, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v27 -= 2;
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

void sub_1971DC230(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21)
{
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      v26 = a19;
      a19 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v27);
      v28 = *(unsigned int *)(v21 + 80);
      if ((_DWORD)v28 != -1)
        ((void (*)(char *, uint64_t))off_1E34C73C8[v28])(&a14, v22 - 32);
      *(_DWORD *)(v21 + 80) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_1971DC448(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v30, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, (uint64_t)a1);
    *(_QWORD *)buf = v30;
    v28[0] = v29;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
    if (!v31)
    {
      __break(0xC471u);
      return result;
    }
    v6 = v29;
    v29 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(NSObject **)(v2 + 32);
    v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v9)
    {
      WTF::String::utf8();
      v11 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v9 = v28[0];
      v28[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          v9 = (WTF *)WTF::fastFree(v9, v10);
        else
          --*(_DWORD *)v9;
      }
    }
    if (*(_BYTE *)v2 && *(unsigned __int8 *)(v2 + 16) >= 4u)
    {
      v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v13 = *v12;
        if ((v13 & 1) != 0)
          break;
        v14 = __ldaxr(v12);
        if (v14 == v13)
        {
          if (!__stxr(v13 | 1, v12))
          {
            v15 = WTF::Logger::observers(v9);
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16)
            {
              v17 = *(uint64_t **)v15;
              v18 = *(_QWORD *)v15 + 8 * v16;
              do
              {
                v19 = *v17;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v33 = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v19 + 16))(v19, v2, 4, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
                for (i = 24; i != -8; i -= 16)
                {
                  v22 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                }
                ++v17;
              }
              while (v17 != (uint64_t *)v18);
            }
            v23 = __ldxr(v12);
            if (v23 == 1)
            {
              if (!__stlxr(0, v12))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v25);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v26);
  v27 = a1[20];
  if ((_DWORD)v27 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34C73C8[v27])(buf, a1 + 14);
  a1[20] = -1;
  return (uint64_t)a1;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a1);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971DC53C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C73E0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  v3 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1971DC9F0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19)
{
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
    {
LABEL_6:
      v23 = a17;
      a17 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 112, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 88, v24);
      v25 = *(unsigned int *)(v19 + 80);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, uint64_t))off_1E34C73C8[v25])(&a12, v19 + 56);
      *(_DWORD *)(v19 + 80) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *result;
  uint64_t v27;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[4];
  char *v36;
  int v37;
  _DWORD v38[4];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v32, a3);
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v31, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  v7 = v31;
  v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v32;
  v32 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v33;
  v33 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(NSObject **)(a1 + 32);
  v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v36 = v13;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v11 = v30[0];
    v30[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = (WTF *)WTF::fastFree(v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v27 = a1;
          v17 = WTF::Logger::observers(v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v20 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v37 = 0;
              WTF::String::String((WTF::String *)v38, a3);
              v38[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v39, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, v27, 4, v30);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v22);
              for (i = 40; i != -8; i -= 16)
              {
                v24 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v24 -= 2;
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          v25 = __ldxr(v14);
          if (v25 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971DCE70(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t *WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1971DD050(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKitL23grantCapabilityInternalERKNS3_19ExtensionCapabilityEPKNS3_15GPUProcessProxyEPKNS3_15WebProcessProxyEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  char v6;
  char v7;

  *(_QWORD *)a1 = off_1E34C7400;
  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E34C74A8[v2])(&v6, a1 + 80);
    *(_DWORD *)(a1 + 88) = -1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34C74A8[v3])(&v7, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
  }
  v4 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    CFRelease(v4);
  WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKitL23grantCapabilityInternalERKNS3_19ExtensionCapabilityEPKNS3_15GPUProcessProxyEPKNS3_15WebProcessProxyEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  char v7;
  char v8;

  *(_QWORD *)a1 = off_1E34C7400;
  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E34C74A8[v2])(&v7, a1 + 80);
    *(_DWORD *)(a1 + 88) = -1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34C74A8[v3])(&v8, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
  }
  v4 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    CFRelease(v4);
  WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKitL23grantCapabilityInternalERKNS3_19ExtensionCapabilityEPKNS3_15GPUProcessProxyEPKNS3_15WebProcessProxyEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  unsigned __int8 *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  WTF *v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  int v33;
  CFTypeRef v34;
  void *v35;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t *result;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  NSObject *v53;
  WTF *v54;
  void *v55;
  char *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  uint64_t j;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  __int128 v83;
  int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  const char *v91;
  uint64_t v92;
  CFTypeRef cf[3];
  WTF::StringImpl *v94;
  char v95;
  WTF *v96[2];
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint8_t buf[4];
  char *v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  _DWORD v111[4];
  uint64_t v112;
  int v113;
  _DWORD v114[4];
  uint64_t v115;
  int v116;
  _QWORD v117[5];

  v117[2] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 48);
  WebKit::grantCapability(cf, (_QWORD *)(a1 + 48), a1 + 56);
  WebKit::grantCapability(&cf[1], v2, a1 + 80);
  v90 = 0uLL;
  v91 = "operator()";
  v92 = 0;
  v3 = WTF::fastMalloc((WTF *)0x88);
  v4 = (WTF::NativePromiseBase *)WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(v3, &v90);
  v5 = (unsigned __int8 *)(v3 + 48);
  v94 = (WTF::StringImpl *)(v3 + 48);
  v95 = 1;
  v6 = __ldaxr((unsigned __int8 *)(v3 + 48));
  v89 = v3;
  if (v6)
  {
    __clrex();
LABEL_4:
    v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v3 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
  v8 = v7;
  if (*v7 && v7[16] >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v90);
    WTF::String::String((WTF::String *)&v101, " resolving ");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v100, v3);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v103);
    v10 = v100;
    v100 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v101;
    v101 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v102;
    v102 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *((_QWORD *)v8 + 4);
    v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v14)
    {
      WTF::String::utf8();
      v16 = v96[0] ? (char *)v96[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v105 = v16;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v14 = v96[0];
      v96[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          v14 = (WTF *)WTF::fastFree(v14, v15);
        else
          --*(_DWORD *)v14;
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v18 = *v17;
        if ((v18 & 1) != 0)
          break;
        v19 = __ldaxr(v17);
        if (v19 == v18)
        {
          if (!__stxr(v18 | 1, v17))
          {
            v20 = WTF::Logger::observers(v14);
            v21 = *(unsigned int *)(v20 + 12);
            if ((_DWORD)v21)
            {
              v22 = *(uint64_t **)v20;
              v23 = *(_QWORD *)v20 + 8 * v21;
              do
              {
                v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v90);
                v106 = 0;
                WTF::String::String((WTF::String *)&v107, " resolving ");
                v108 = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v109, v3);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v96, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, v8, 4, v96);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v25);
                for (i = 40; i != -8; i -= 16)
                {
                  v27 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            v28 = __ldxr(v17);
            if (v28 == 1)
            {
              v5 = (unsigned __int8 *)(v3 + 48);
              if (!__stlxr(0, v17))
                break;
            }
            else
            {
              __clrex();
              v5 = (unsigned __int8 *)(v3 + 48);
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v29 = v103;
    v103 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v30 = *(unsigned int *)(v3 + 80);
  if ((_DWORD)v30 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34C73C8[v30])(buf, v3 + 56);
  v31 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  *(_OWORD *)(v3 + 56) = v31;
  *(_DWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 80) = 1;
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v3, (unsigned __int8 **)&v94);
  if (v95)
  {
    v32 = v94;
    v33 = __ldxr((unsigned __int8 *)v94);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v94))
        goto LABEL_61;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v32);
  }
LABEL_61:
  v34 = cf[1];
  cf[1] = 0;
  if (v34)
    CFRelease(v34);
  v35 = (void *)cf[0];
  cf[0] = 0;
  if (v35)
    CFRelease(v35);
  v90 = 0uLL;
  v91 = "invokeAsync proxy";
  v92 = 0;
  if (__ldaxr(v5))
  {
    __clrex();
LABEL_68:
    v35 = (void *)MEMORY[0x19AEABB3C](v5);
    goto LABEL_69;
  }
  if (__stxr(1u, v5))
    goto LABEL_68;
LABEL_69:
  v37 = a1 + 8;
  *(_BYTE *)(v3 + 128) = 1;
  v38 = *(unsigned int **)(a1 + 8);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  v41 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v35);
  if (*(_BYTE *)v41)
    v42 = *(unsigned __int8 *)(v41 + 16) >= 4u;
  else
    v42 = 0;
  if (v42)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v90);
    WTF::String::String((WTF::String *)&v103, " invoking chainTo() [");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v102, v3);
    WTF::String::String((WTF::String *)&v101, " chainedPromise:");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v100, (uint64_t)v38);
    WTF::String::String((WTF::String *)&v99, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v98);
    WTF::String::String((WTF::String *)&v97, "]");
    result = (uint64_t *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)cf, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, (uint64_t *)&v97, &v94);
    if (!v94)
    {
      __break(0xC471u);
      return result;
    }
    v45 = v97;
    v97 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v44);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v98;
    v98 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v44);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v99;
    v99 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v44);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = v100;
    v100 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v44);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = v101;
    v101 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v44);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v102;
    v102 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v44);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v103;
    v103 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v44);
      else
        *(_DWORD *)v51 -= 2;
    }
    v52 = (WTF::StringImpl *)cf[0];
    cf[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v44);
      else
        *(_DWORD *)v52 -= 2;
    }
    v53 = *(NSObject **)(v41 + 32);
    v54 = (WTF *)os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v54)
    {
      WTF::String::utf8();
      v56 = v96[0] ? (char *)v96[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v105 = v56;
      _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v54 = v96[0];
      v96[0] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 1)
          v54 = (WTF *)WTF::fastFree(v54, v55);
        else
          --*(_DWORD *)v54;
      }
    }
    if (*(_BYTE *)v41 && *(unsigned __int8 *)(v41 + 16) >= 4u)
    {
      v57 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v58 = *v57;
        if ((v58 & 1) != 0)
          break;
        v59 = __ldaxr(v57);
        if (v59 == v58)
        {
          if (!__stxr(v58 | 1, v57))
          {
            v60 = WTF::Logger::observers(v54);
            v61 = *(unsigned int *)(v60 + 12);
            if ((_DWORD)v61)
            {
              v62 = *(uint64_t **)v60;
              v88 = *(_QWORD *)v60 + 8 * v61;
              do
              {
                v63 = *v62;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v90);
                v106 = 0;
                WTF::String::String((WTF::String *)&v107, " invoking chainTo() [");
                v108 = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v109, v3);
                v110 = 0;
                WTF::String::String((WTF::String *)v111, " chainedPromise:");
                v111[2] = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v112, (uint64_t)v38);
                v113 = 0;
                WTF::String::String((WTF::String *)v114, " isNothing:");
                v114[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v115);
                v116 = 0;
                WTF::String::String((WTF::String *)v117, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v96, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v63 + 16))(v63, v41, 4, v96);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v64);
                for (j = 120; j != -8; j -= 16)
                {
                  v66 = *(WTF::StringImpl **)&buf[j];
                  *(_QWORD *)&buf[j] = 0;
                  if (v66)
                  {
                    if (*(_DWORD *)v66 == 2)
                      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v66 -= 2;
                  }
                }
                ++v62;
                v3 = v89;
              }
              while (v62 != (uint64_t *)v88);
            }
            v67 = __ldxr(v57);
            if (v67 == 1)
            {
              if (!__stlxr(0, v57))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v68 = v94;
    v94 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v55);
        if (!v38)
          goto LABEL_148;
        goto LABEL_144;
      }
      *(_DWORD *)v68 -= 2;
    }
  }
  if (!v38)
    goto LABEL_148;
LABEL_144:
  v69 = v38 + 2;
  do
  {
    v70 = __ldaxr(v69);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, v69));
  if (!v71)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
  }
LABEL_148:
  v72 = atomic_load((unsigned __int8 *)(v3 + 129));
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(*(unsigned __int8 **)v37, v72, (WTF::Logger::LogSiteIdentifier *)&v90);
  if (*(_DWORD *)(v3 + 80))
  {
    result = WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(v3, v37, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    result = (uint64_t *)(v3 + 112);
    v79 = *(unsigned int *)(v3 + 124);
    if ((_DWORD)v79 == *(_DWORD *)(v3 + 120))
    {
      result = (uint64_t *)WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v79 + 1, v37);
      v37 = (unint64_t)result;
      LODWORD(v79) = *(_DWORD *)(v3 + 124);
      v80 = *(_QWORD *)(v3 + 112);
    }
    else
    {
      v80 = *result;
    }
    v81 = v80 + 40 * v79;
    v82 = *(unsigned __int8 **)v37;
    *(_QWORD *)v37 = 0;
    *(_QWORD *)v81 = v82;
    v81 += 8;
    v83 = *(_OWORD *)(v37 + 24);
    *(_OWORD *)v81 = *(_OWORD *)(v37 + 8);
    *(_OWORD *)(v81 + 16) = v83;
    ++*(_DWORD *)(v3 + 124);
  }
  v84 = __ldxr(v5);
  if (v84 != 1)
  {
    __clrex();
    goto LABEL_158;
  }
  if (__stlxr(0, v5))
LABEL_158:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v85 = (unsigned int *)(v3 + 8);
  do
  {
    v86 = __ldaxr(v85);
    v87 = v86 - 1;
  }
  while (__stlxr(v87, v85));
  if (!v87)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  return result;
}

void sub_1971DDCA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::Lock *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,unsigned int *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,CFTypeRef a31,CFTypeRef cf,uint64_t a33,WTF::StringImpl *a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44,WTF::StringImpl *a45)
{
  unsigned __int8 *v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v46 = __ldxr(v45);
  if (v46 == 1)
  {
    if (!__stlxr(0, v45))
    {
LABEL_6:
      if (a34)
      {
        if (*(_DWORD *)a34 == 2)
          WTF::StringImpl::destroy(a34, a2);
        else
          *(_DWORD *)a34 -= 2;
      }
      if (a24)
      {
        v47 = a24 + 2;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          atomic_store(1u, a24 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a24 + 16))(a24);
        }
      }
      v50 = __ldxr((unsigned __int8 *)a17);
      if (v50 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a17))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a17);
LABEL_20:
      v51 = a26 + 2;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, a26 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)a26 + 16))(a26);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebKit::grantCapability(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  BOOL v4;
  void *aBlock;

  if (*a2)
    v4 = *(_BYTE *)(a3 + 16) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *a1 = 0;
  }
  else
  {
    aBlock = _Block_copy(&__block_literal_global_23);
    WebKit::ExtensionProcess::grantCapability(a3, (uint64_t)a2, (uint64_t)&aBlock, a1);
    _Block_release(aBlock);
  }
}

void sub_1971DE2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::NativePromiseBase **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[2];
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::NativePromiseBase **v26;
  uint64_t v27;
  uint64_t v28;

  v23 = &v25;
  v24 = 1;
  v26 = (WTF::NativePromiseBase **)&v28;
  v27 = 1;
  v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    v6 = *(unsigned int *)(a1 + 100);
    memcpy(&v28, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v26 = (WTF::NativePromiseBase **)v4;
    v5 = *(_DWORD *)(a1 + 96);
    LODWORD(v6) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 96) = 1;
    LODWORD(v27) = v5;
  }
  HIDWORD(v27) = v6;
  HIDWORD(v24) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v4);
  v7 = *(_QWORD *)(a1 + 112);
  v23 = (uint64_t *)v7;
  v8 = *(_DWORD *)(a1 + 124);
  LODWORD(v24) = *(_DWORD *)(a1 + 120);
  HIDWORD(v24) = v8;
  v22[0] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v22[1] = 0;
  *(_QWORD *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v9);
  if (HIDWORD(v27))
  {
    v17 = v26;
    v18 = 8 * HIDWORD(v27);
    do
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(*v17++, a1, a2);
      v18 -= 8;
    }
    while (v18);
    v7 = (uint64_t)v23;
    v8 = HIDWORD(v24);
  }
  if (v8)
  {
    v19 = 40 * v8;
    do
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(a1, v7, v11, v12, v13, v14, v15, v16);
      v7 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v20);
}

void sub_1971DE434(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  char v22;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E34C7458;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v20[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v20);
      result = (unsigned __int8 *)v20[0];
      v20[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v20[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)v20, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v19, a2);
    v17 = v19;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v19 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    if (v21 != -1)
      ((void (*)(char *, _QWORD *))off_1E34C73E0[v21])(&v22, v20);
    v21 = -1;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)v20, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    if (v21 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E34C73E0[v21])(&v19, v20);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

void sub_1971DE688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  unsigned __int8 **v18;
  uint64_t v19;

  if (a13 != -1)
    ((void (*)(char *, uint64_t *))off_1E34C73E0[a13])(&a18, &a11);
  a13 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (__ldaxr(*v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v18))
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  MEMORY[0x19AEABB3C]();
  goto LABEL_8;
}

uint64_t *WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::Lock *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD v23[4];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  WTF::Lock *v27;
  char v28;
  uint64_t v29;

  v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v24 = v9;
  v25 = *(_OWORD *)(a2 + 8);
  v26 = *(_OWORD *)(a2 + 24);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v23[0] = 0;
  v23[1] = 0;
  v23[2] = "<chained promise>";
  v23[3] = 0;
  v12 = (unsigned __int8 *)(v9 + 48);
  v27 = (WTF::Lock *)(v9 + 48);
  v28 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_7:
    v12 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v12, a2, a3, a4, a5, a6, a7, a8, v23[0]);
    goto LABEL_8;
  }
  if (__stxr(1u, v12))
    goto LABEL_7;
LABEL_8:
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v12);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v14, (WTF::Logger::LogSiteIdentifier *)v23, " settling chained promise ", v9);
  v15 = *(unsigned int *)(v9 + 80);
  v16 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v15 == -1)
  {
    if ((_DWORD)v16 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v16 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34C73C8[v15])(&v29, v9 + 56);
    *(_DWORD *)(v9 + 80) = -1;
    goto LABEL_16;
  }
  v29 = v9 + 56;
  ((void (*)(uint64_t *))off_1E34C7470[v16])(&v29);
LABEL_16:
  WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v9, &v27);
  if (v28)
  {
    v17 = v27;
    v18 = __ldxr((unsigned __int8 *)v27);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v17);
  }
LABEL_22:
  v19 = (unsigned int *)(v9 + 8);
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  return WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(&v24);
}

void sub_1971DE960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  va_list va;

  va_start(va, a5);
  if (v5)
  {
    v7 = v5 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1971DEA80(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;

  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1971DEB4C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  WTF *v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t i;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v33[2];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _BYTE buf[12];
  int v48;
  uint64_t v49;
  int v50;
  _DWORD v51[8];
  _DWORD v52[8];
  _QWORD v53[3];

  v53[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v40, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v39, a2);
  WTF::String::String((WTF::String *)&v38, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v36, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v34, "]");
  *(_QWORD *)buf = v40;
  v33[0] = v39;
  v45 = v37;
  v46 = v38;
  v43 = v35;
  v44 = v36;
  v42 = v34;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v33, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v41);
  if (v41)
  {
    v8 = v34;
    v34 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v35;
    v35 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v36;
    v36 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v37;
    v37 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v38;
    v38 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v39;
    v39 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v40;
    v40 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(NSObject **)(a1 + 32);
    v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v16)
    {
      WTF::String::utf8();
      v18 = v33[0] ? (char *)v33[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v16 = v33[0];
      v33[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          v16 = (WTF *)WTF::fastFree(v16, v17);
        else
          --*(_DWORD *)v16;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v20 = *v19;
        if ((v20 & 1) != 0)
          break;
        v21 = __ldaxr(v19);
        if (v21 == v20)
        {
          if (!__stxr(v20 | 1, v19))
          {
            v31 = a2;
            v22 = WTF::Logger::observers(v16);
            v23 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v23)
            {
              v24 = *(uint64_t **)v22;
              v30 = *(_QWORD *)v22 + 8 * v23;
              do
              {
                v25 = *v24;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "ThenCallback disconnected from ");
                v48 = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v49, v31);
                v50 = 0;
                WTF::String::String((WTF::String *)v51, " aborting [callback:");
                v51[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v51[6] = 0;
                WTF::String::String((WTF::String *)v52, " callSite:");
                v52[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(a4);
                v52[6] = 0;
                WTF::String::String((WTF::String *)v53, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v25 + 16))(v25, a1, 4, v33);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);
                for (i = 104; i != -8; i -= 16)
                {
                  v28 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
                }
                ++v24;
              }
              while (v24 != (uint64_t *)v30);
            }
            v29 = __ldxr(v19);
            if (v29 == 1)
            {
              if (!__stlxr(0, v19))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1971DF034(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  unsigned __int8 *v31;
  int v32;

  v32 = __ldxr(v31);
  if (v32 == 1)
  {
    if (!__stlxr(0, v31))
    {
LABEL_6:
      if (a31)
      {
        if (*(_DWORD *)a31 == 2)
          WTF::StringImpl::destroy(a31, a2);
        else
          *(_DWORD *)a31 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34C7438[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 16) = v3;
  }
  return a1;
}

void sub_1971DF2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 16);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34C73E0[v14])(&a12, v12);
  *(_DWORD *)(v12 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34C7458;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34C7458;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  char v12;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v9, v7);
      v8 = v9;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(v10, v9);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        ((void (*)(char *, _QWORD *))off_1E34C73E0[v11])(&v12, v10);
      v11 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)v10, v7);
      result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      if (v11 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E34C73E0[v11])(&v9, v10);
    }
  }
  return result;
}

void sub_1971DF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13)
{
  uint64_t v13;
  uint64_t v14;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E34C73E0[a13])(v14 - 33, &a11);
  a13 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C73C8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE v15[16];
  unsigned int v16;
  _BYTE v17[16];
  int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34C73C8[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v15, a3);
  v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v16 == -1;
    if (v16 == -1)
      v11 = -1;
    else
      v11 = v16;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34C7488[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        v12 = v15;
        if ((_DWORD)v8 == 1)
          v13 = v15;
        else
          v13 = (_BYTE *)a2;
        if ((_DWORD)v8 == 1)
          v12 = (_BYTE *)a2;
        if ((_DWORD)v8 == -1)
          v14 = v15;
        else
          v14 = v13;
        if ((_DWORD)v8 != -1)
          a2 = (uint64_t)v12;
      }
      else
      {
        v14 = v15;
      }
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>(a2, (uint64_t)v14);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34C73E0[v18])(&v19, v17);
    }
  }
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34C73E0[v16])(v17, v15);
  return result;
}

void sub_1971DF830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, int a16)
{
  uint64_t v16;

  if (a16 != -1)
    ((void (*)(uint64_t, char *))off_1E34C73E0[a16])(v16 - 33, &a14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34C73E0[a12])(v16 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENSA_29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C73C8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C73E0[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C7498[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN6WebKit33PlatformExtensionCapabilityGrantsENS7_29ExtensionCapabilityGrantErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, const void **a2, const void **a3)
{
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v6 = *a2;
  v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
    CFRelease(v8);
  v9 = a3[1];
  a3[1] = 0;
  v10 = a2[1];
  a2[1] = v9;
  if (v10)
    CFRelease(v10);
  v11 = *a3;
  *a3 = v6;
  if (v11)
    CFRelease(v11);
  v12 = a3[1];
  a3[1] = v5;
  if (v12)
    CFRelease(v12);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN6WebKit33PlatformExtensionCapabilityGrantsENS7_29ExtensionCapabilityGrantErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit33PlatformExtensionCapabilityGrantsENS8_29ExtensionCapabilityGrantErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = (WTF *)*result;
      v4 = *((_DWORD *)result + 3);
      v5 = 40 * a2;
      result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *v2 = (uint64_t)result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t *)v3;
        do
        {
          v8 = *result;
          *result = 0;
          *v7 = v8;
          v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          result = WTF::NativePromiseProducer<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_BYTE *std::__optional_move_base<WebKit::ExtensionProcess,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_1971DFC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34C74A8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1971DFCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34C74A8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C74A8[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C74C0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENS3_29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter5grantERKNS3_19ExtensionCapabilityEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSQ_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C74E8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENS3_29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter5grantERKNS3_19ExtensionCapabilityEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSQ_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C74E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN6WebKit33PlatformExtensionCapabilityGrantsENS3_29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter5grantERKNS3_19ExtensionCapabilityEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  WTF::StringImpl **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t *v20;
  int v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  void *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  id v42;
  uint64_t v43;
  _BYTE buf[22];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v6 = (WTF::StringImpl **)(a1 + 24);
  v5 = *(int **)(a1 + 24);
  if (v5)
  {
    v7 = *v5;
    v42 = *(id *)(a1 + 24);
    v43 = 0;
    *v5 = v7 + 4;
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  v41 = (unint64_t)v5;
  if (!*(_DWORD *)(a2 + 16))
  {
    WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)&v42, (uint64_t *)a2);
    if (*(_DWORD *)(a2 + 16))
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return;
    }
    WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)&v41, (uint64_t *)(a2 + 8));
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    v9 = WTF::fastMalloc((WTF *)0x20);
    v40 = 2;
    v39 = v9;
    if (*(_BYTE *)(a1 + 32))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 16))(buf, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), v4);
      v10 = WebKit::finalizeGrant(v6, *(uint64_t *)buf, &v42);
      v11 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v11)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
      v12 = qword_1ECE71618;
      if (v10)
      {
        v9 = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v9)
        {
          WTF::String::utf8();
          v13 = v38 ? (uint64_t)v38 + 16 : 0;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "operator()";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v13;
          _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] granted for GPU process", buf, 0x16u);
          v9 = (uint64_t)v38;
          v38 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
              v9 = WTF::fastFree((WTF *)v9, v14);
            else
              --*(_DWORD *)v9;
          }
        }
      }
      else
      {
        v9 = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v9)
        {
          WTF::String::utf8();
          v34 = v38 ? (uint64_t)v38 + 16 : 0;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "operator()";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v34;
          _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] failed to grant for GPU process", buf, 0x16u);
          v9 = (uint64_t)v38;
          v38 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
              v9 = WTF::fastFree((WTF *)v9, v35);
            else
              --*(_DWORD *)v9;
          }
        }
        if (HIDWORD(v40) == (_DWORD)v40)
        {
          v9 = (uint64_t)WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v39, (unint64_t)&v42);
        }
        else
        {
          v21 = HIDWORD(v40) + 1;
          v22 = (_QWORD *)(v39 + 16 * HIDWORD(v40));
          v23 = v42;
          v42 = 0;
          *v22 = v23;
          v24 = v43;
          v43 = 0;
          v22[1] = v24;
          HIDWORD(v40) = v21;
        }
      }
    }
    if (*(_BYTE *)(a1 + 33))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8)
                                                                                       + 24))(buf, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), v4, v6);
      v25 = WebKit::finalizeGrant(v6, *(uint64_t *)buf, (id *)&v41);
      v26 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v26)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v26 + 16));
      v27 = qword_1ECE71618;
      if (v25)
      {
        v9 = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v9)
        {
          WTF::String::utf8();
          if (v38)
            v28 = (char *)v38 + 16;
          else
            v28 = 0;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "operator()";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v28;
          _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] granted for WebContent process", buf, 0x16u);
          v9 = (uint64_t)v38;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
              v9 = WTF::fastFree(v38, v29);
            else
              --*(_DWORD *)v38;
          }
        }
      }
      else
      {
        v9 = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v9)
        {
          WTF::String::utf8();
          v36 = v38 ? (uint64_t)v38 + 16 : 0;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "operator()";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v36;
          _os_log_error_impl(&dword_196BCC000, v27, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] failed to grant for WebContent process", buf, 0x16u);
          v9 = (uint64_t)v38;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
              v9 = WTF::fastFree(v38, v37);
            else
              --*(_DWORD *)v38;
          }
        }
        if (HIDWORD(v40) == (_DWORD)v40)
        {
          v9 = (uint64_t)WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>((uint64_t)&v39, (unint64_t)&v41);
        }
        else
        {
          v30 = HIDWORD(v40) + 1;
          v31 = (_QWORD *)(v39 + 16 * HIDWORD(v40));
          v32 = v41;
          *(_QWORD *)&v41 = 0;
          *v31 = v32;
          v33 = *((_QWORD *)&v41 + 1);
          *((_QWORD *)&v41 + 1) = 0;
          v31[1] = v33;
          HIDWORD(v40) = v30;
        }
      }
    }
    WebKit::ExtensionCapabilityGranter::invalidateGrants((WebKit *)v9, (uint64_t)&v39);
    v20 = &v39;
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v15 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)buf = v15;
    *(_QWORD *)&buf[8] = 0x200000002;
    v16 = v42;
    v42 = 0;
    *(_QWORD *)v15 = v16;
    v17 = v43;
    v43 = 0;
    *(_QWORD *)(v15 + 8) = v17;
    v18 = v41;
    v41 = 0uLL;
    *(_OWORD *)(v15 + 16) = v18;
    WebKit::ExtensionCapabilityGranter::invalidateGrants((WebKit *)v15, (uint64_t)buf);
    v20 = (uint64_t *)buf;
  }
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v19);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v41);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v42);
}

void sub_1971E03B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va1);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va2);
  _Unwind_Resume(a1);
}

BOOL WebKit::finalizeGrant(WTF::StringImpl **a1, uint64_t a2, id *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  WebKit *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BOOL8 result;
  NSObject *v15;
  char *v16;
  const char *v17;
  char *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  WTF *v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v15 = qword_1ECE71618;
    result = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    WTF::String::utf8();
    if (v26)
      v16 = (char *)v26 + 16;
    else
      v16 = 0;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "finalizeGrant";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v16;
    v17 = "%{public}s[envID=%{public}s] auxiliaryProcess is null";
LABEL_20:
    _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0x16u);
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        WTF::fastFree(v26, v19);
      else
        --*(_DWORD *)v26;
    }
    return 0;
  }
  v5 = (uint64_t *)(a2 + 392);
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a2 + 392), a1, (const WTF::StringImpl *)a3);
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 392);
  if (v8)
    v8 += 24 * *(unsigned int *)(v8 - 4);
  if (v8 == v6)
  {
    v15 = qword_1ECE71618;
    result = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    WTF::String::utf8();
    if (v26)
      v18 = (char *)v26 + 16;
    else
      v18 = 0;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "finalizeGrant";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v18;
    v17 = "%{public}s[envID=%{public}s] grant previously revoked";
    goto LABEL_20;
  }
  if (!objc_msgSend(a3[1], "isValid"))
  {
    v20 = qword_1ECE71618;
    if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v22 = v26 ? (uint64_t)v26 + 16 : 0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "finalizeGrant";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v22;
      _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] grant invalid", buf, 0x16u);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v23);
        else
          --*(_DWORD *)v26;
      }
    }
    if (*v5)
    {
      v21 = *v5 + 24 * *(unsigned int *)(*v5 - 4);
      if (v21 == v7)
        return 0;
    }
    else
    {
      if (!v7)
        return 0;
      v21 = 0;
    }
    if (v21 != v7)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, (WTF::StringImpl **)v7);
    return 0;
  }
  if (objc_msgSend(*(id *)(v7 + 16), "isValid"))
  {
    v9 = qword_1ECE71618;
    if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v26)
        v24 = (char *)v26 + 16;
      else
        v24 = 0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "finalizeGrant";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v24;
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] grant not expected to be valid", buf, 0x16u);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v25);
        else
          --*(_DWORD *)v26;
      }
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v10 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 0x100000001;
    v11 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)v10 = v11;
    v12 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    *((_QWORD *)v10 + 1) = v12;
    WebKit::ExtensionCapabilityGranter::invalidateGrants(v10, (uint64_t)buf);
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v13);
  }
  WebKit::ExtensionCapabilityGrant::operator=(v7 + 8, (WTF::StringImpl *)a3);
  return 1;
}

void sub_1971E07DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(a2 + 1));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1);
  }
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34C7510;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34C7540;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34C7510;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34C7540;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _BYTE *v6;
  BOOL v7;
  _BYTE *v8;
  const char *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t i;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  unsigned __int8 *v36;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a3 + 16);
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6)
    v7 = v6[16] >= 4u;
  else
    v7 = 0;
  if (v7)
  {
    v8 = v6;
    if (v5)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    v43 = (char *)v9;
    WTF::String::String((WTF::String *)&v53, v9);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v49, a2);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v12 = v46;
    v46 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v47;
    v47 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v48;
    v48 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v49;
    v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v50;
    v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v51;
    v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v52;
    v52 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v53;
    v53 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v11);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *((_QWORD *)v8 + 4);
    v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v21 = v45[0];
      v45[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = (WTF *)WTF::fastFree(v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers(v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(uint64_t **)v27;
              v42 = *(_QWORD *)v27 + 8 * v28;
              do
              {
                v30 = *v29;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v43);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v61, a2);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v30 + 16))(v30, v8, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v31);
                for (i = 120; i != -8; i -= 16)
                {
                  v33 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v42);
            }
            v34 = __ldxr(v24);
            if (v34 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v35 = v54;
    v54 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  v36 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v36))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v38 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v39 = __ldxr(v36);
  if (v39 == 1)
  {
    if (!__stlxr(0, v36))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v38)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v38, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v38)
  {
    v40 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v38);
    return WTF::fastFree((WTF *)v40, v41);
  }
  return result;
}

void sub_1971E0F80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,char a37)
{
  unsigned __int8 *v37;
  int v38;

  v38 = __ldxr(v37);
  if (v38 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

_BYTE *WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 113));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

void sub_1971E12F0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34C7570;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  v6 = v5;
  if (!*v5 || v5[16] < 4u)
    return a1;
  WTF::String::String((WTF::String *)&v30, "creating ");
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, a1);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *((_QWORD *)v6 + 4);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*v6 && v6[16] >= 4u)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                v33 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v22 + 16))(v22, v6, 4, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v27 -= 2;
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

void sub_1971E1674(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21)
{
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      v26 = a19;
      a19 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v27);
      v28 = *(unsigned int *)(v21 + 64);
      if ((_DWORD)v28 != -1)
        ((void (*)(char *, uint64_t))off_1E34C7588[v28])(&a14, v22 - 16);
      *(_DWORD *)(v21 + 64) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_1971E188C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v30, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v29, (uint64_t)a1);
    *(_QWORD *)buf = v30;
    v28[0] = v29;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
    if (!v31)
    {
      __break(0xC471u);
      return result;
    }
    v6 = v29;
    v29 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(NSObject **)(v2 + 32);
    v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v9)
    {
      WTF::String::utf8();
      v11 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v9 = v28[0];
      v28[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          v9 = (WTF *)WTF::fastFree(v9, v10);
        else
          --*(_DWORD *)v9;
      }
    }
    if (*(_BYTE *)v2 && *(unsigned __int8 *)(v2 + 16) >= 4u)
    {
      v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v13 = *v12;
        if ((v13 & 1) != 0)
          break;
        v14 = __ldaxr(v12);
        if (v14 == v13)
        {
          if (!__stxr(v13 | 1, v12))
          {
            v15 = WTF::Logger::observers(v9);
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16)
            {
              v17 = *(uint64_t **)v15;
              v18 = *(_QWORD *)v15 + 8 * v16;
              do
              {
                v19 = *v17;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v33 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v34, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v19 + 16))(v19, v2, 4, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
                for (i = 24; i != -8; i -= 16)
                {
                  v22 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                }
                ++v17;
              }
              while (v17 != (uint64_t *)v18);
            }
            v23 = __ldxr(v12);
            if (v23 == 1)
            {
              if (!__stlxr(0, v12))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v25);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v26);
  v27 = a1[16];
  if ((_DWORD)v27 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34C7588[v27])(buf, a1 + 14);
  a1[16] = -1;
  return (uint64_t)a1;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a1);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971E1980(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1971E1DA0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19)
{
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
    {
LABEL_6:
      v23 = a17;
      a17 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 96, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 72, v24);
      v25 = *(unsigned int *)(v19 + 64);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, uint64_t))off_1E34C7588[v25])(&a12, v19 + 56);
      *(_DWORD *)(v19 + 64) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *result;
  uint64_t v27;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[4];
  char *v36;
  int v37;
  _DWORD v38[4];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v32, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v31, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  v7 = v31;
  v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v32;
  v32 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v33;
  v33 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(NSObject **)(a1 + 32);
  v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v36 = v13;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v11 = v30[0];
    v30[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = (WTF *)WTF::fastFree(v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v27 = a1;
          v17 = WTF::Logger::observers(v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v20 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v37 = 0;
              WTF::String::String((WTF::String *)v38, a3);
              v38[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v39, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, v27, 4, v30);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v22);
              for (i = 40; i != -8; i -= 16)
              {
                v24 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v24 -= 2;
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          v25 = __ldxr(v14);
          if (v25 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971E2220(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t *WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1971E2400(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = off_1E34C75B0;
  v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  const void *v2;
  const void *v3;
  void *v4;

  *a1 = (uint64_t)off_1E34C75B0;
  v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  int v2;
  void *v3;
  WTF *v4;
  NSObject *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  _BYTE *v11;
  uint64_t v12;
  WTF::Lock *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t *result;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  WTF *v36;
  void *v37;
  char *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  uint64_t i;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  __int128 v65;
  int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  WTF::Lock *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  WTF *v76[2];
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  _BYTE buf[24];
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  _DWORD v91[4];
  uint64_t v92;
  int v93;
  _DWORD v94[4];
  uint64_t v95;
  int v96;
  _QWORD v97[3];

  v97[1] = *MEMORY[0x1E0C80C00];
  v76[0] = 0;
  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(void **)(a1 + 56);
  if (v2)
    objc_msgSend(v3, "activateWithError:", v76);
  else
    objc_msgSend(v3, "suspendWithError:", v76);
  v4 = v76[0];
  if (v76[0])
  {
    v5 = qword_1ECE71618;
    if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v4;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%{public}s failed with error: %{public}@", buf, 0x16u);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = "operator()";
    v87 = 0;
    v6 = WTF::fastMalloc((WTF *)0x78);
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(v6, (__int128 *)buf);
    v7 = (unsigned __int8 *)(v6 + 48);
    v72 = (WTF::Lock *)(v6 + 48);
    LOBYTE(v73) = 1;
    if (__ldaxr((unsigned __int8 *)(v6 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_13;
    }
    v7 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
LABEL_13:
    v11 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
    if (*v11 && v11[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v11, (WTF::Logger::LogSiteIdentifier *)buf, " rejecting ", v6);
    v12 = *(unsigned int *)(v6 + 64);
    if ((_DWORD)v12 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E34C7588[v12])(&v85, v6 + 56);
    *(_WORD *)(v6 + 56) = 256;
    *(_DWORD *)(v6 + 64) = 1;
    v13 = (WTF::Lock *)WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v6, (unsigned __int8 **)&v72);
    goto LABEL_27;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "operator()";
  v87 = 0;
  v6 = WTF::fastMalloc((WTF *)0x78);
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::NativePromise(v6, (__int128 *)buf);
  v9 = (unsigned __int8 *)(v6 + 48);
  v72 = (WTF::Lock *)(v6 + 48);
  LOBYTE(v73) = 1;
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_21;
  }
  v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
LABEL_21:
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v14, (WTF::Logger::LogSiteIdentifier *)buf, " resolving ", v6);
  v15 = *(unsigned int *)(v6 + 64);
  if ((_DWORD)v15 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E34C7588[v15])(&v85, v6 + 56);
  *(_WORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = 1;
  v13 = (WTF::Lock *)WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v6, (unsigned __int8 **)&v72);
LABEL_27:
  if (!(_BYTE)v73)
    goto LABEL_33;
  v13 = v72;
  v16 = __ldxr((unsigned __int8 *)v72);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v72))
LABEL_32:
    v13 = (WTF::Lock *)WTF::Lock::unlockSlow(v13);
LABEL_33:
  v72 = 0;
  v73 = 0;
  v74 = "invokeAsync proxy";
  v75 = 0;
  v17 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
LABEL_36:
    v13 = (WTF::Lock *)MEMORY[0x19AEABB3C](v6 + 48);
    goto LABEL_37;
  }
  if (__stxr(1u, v17))
    goto LABEL_36;
LABEL_37:
  v19 = a1 + 8;
  *(_BYTE *)(v6 + 112) = 1;
  v20 = *(unsigned int **)(a1 + 8);
  if (v20)
  {
    v21 = v20 + 2;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v23 = WTF::NativePromiseBase::logChannel(v13);
  if (*(_BYTE *)v23)
    v24 = *(unsigned __int8 *)(v23 + 16) >= 4u;
  else
    v24 = 0;
  if (v24)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
    WTF::String::String((WTF::String *)&v83, " invoking chainTo() [");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v82, v6);
    WTF::String::String((WTF::String *)&v81, " chainedPromise:");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v80, (uint64_t)v20);
    WTF::String::String((WTF::String *)&v79, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v78);
    WTF::String::String((WTF::String *)&v77, "]");
    result = (uint64_t *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, &v85);
    if (!v85)
    {
      __break(0xC471u);
      return result;
    }
    v27 = v77;
    v77 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v78;
    v78 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v26);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v79;
    v79 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v26);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v80;
    v80 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v26);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v81;
    v81 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v26);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = v82;
    v82 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v26);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v83;
    v83 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v26);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v84;
    v84 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v26);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = *(NSObject **)(v23 + 32);
    v36 = (WTF *)os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v36)
    {
      WTF::String::utf8();
      v38 = v76[0] ? (char *)v76[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v38;
      _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v36 = v76[0];
      v76[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
          v36 = (WTF *)WTF::fastFree(v36, v37);
        else
          --*(_DWORD *)v36;
      }
    }
    if (*(_BYTE *)v23 && *(unsigned __int8 *)(v23 + 16) >= 4u)
    {
      v39 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v40 = *v39;
        if ((v40 & 1) != 0)
          break;
        v41 = __ldaxr(v39);
        if (v41 == v40)
        {
          if (!__stxr(v40 | 1, v39))
          {
            v70 = v19;
            v42 = WTF::Logger::observers(v36);
            v43 = *(unsigned int *)(v42 + 12);
            if ((_DWORD)v43)
            {
              v44 = *(uint64_t **)v42;
              v71 = *(_QWORD *)v42 + 8 * v43;
              do
              {
                v45 = *v44;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
                *(_DWORD *)&buf[16] = 0;
                WTF::String::String((WTF::String *)&v87, " invoking chainTo() [");
                v88 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v89, v6);
                v90 = 0;
                WTF::String::String((WTF::String *)v91, " chainedPromise:");
                v91[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v92, (uint64_t)v20);
                v93 = 0;
                WTF::String::String((WTF::String *)v94, " isNothing:");
                v94[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v95);
                v96 = 0;
                WTF::String::String((WTF::String *)v97, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v76, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v45 + 16))(v45, v23, 4, v76);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v76, v46);
                for (i = 120; i != -8; i -= 16)
                {
                  v48 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v37);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                }
                ++v44;
              }
              while (v44 != (uint64_t *)v71);
            }
            v49 = __ldxr(v39);
            if (v49 == 1)
            {
              v19 = v70;
              v17 = (unsigned __int8 *)(v6 + 48);
              if (!__stlxr(0, v39))
                break;
            }
            else
            {
              __clrex();
              v19 = v70;
              v17 = (unsigned __int8 *)(v6 + 48);
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v50 = v85;
    v85 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v37);
        if (!v20)
          goto LABEL_116;
        goto LABEL_112;
      }
      *(_DWORD *)v50 -= 2;
    }
  }
  if (!v20)
    goto LABEL_116;
LABEL_112:
  v51 = v20 + 2;
  do
  {
    v52 = __ldaxr(v51);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v51));
  if (!v53)
  {
    atomic_store(1u, v20 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
  }
LABEL_116:
  v54 = atomic_load((unsigned __int8 *)(v6 + 113));
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::setDispatchMode(*(unsigned __int8 **)v19, v54, (WTF::Logger::LogSiteIdentifier *)&v72);
  if (*(_DWORD *)(v6 + 64))
  {
    result = WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(v6, v19, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    result = (uint64_t *)(v6 + 96);
    v61 = *(unsigned int *)(v6 + 108);
    if ((_DWORD)v61 == *(_DWORD *)(v6 + 104))
    {
      result = (uint64_t *)WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v61 + 1, v19);
      v19 = (unint64_t)result;
      LODWORD(v61) = *(_DWORD *)(v6 + 108);
      v62 = *(_QWORD *)(v6 + 96);
    }
    else
    {
      v62 = *result;
    }
    v63 = v62 + 40 * v61;
    v64 = *(unsigned __int8 **)v19;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)v63 = v64;
    v63 += 8;
    v65 = *(_OWORD *)(v19 + 24);
    *(_OWORD *)v63 = *(_OWORD *)(v19 + 8);
    *(_OWORD *)(v63 + 16) = v65;
    ++*(_DWORD *)(v6 + 108);
  }
  v66 = __ldxr(v17);
  if (v66 != 1)
  {
    __clrex();
    goto LABEL_126;
  }
  if (__stlxr(0, v17))
LABEL_126:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
  v67 = (unsigned int *)(v6 + 8);
  do
  {
    v68 = __ldaxr(v67);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v67));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)(v6 + 8));
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  return result;
}

void sub_1971E2DC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::Lock *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,WTF::Lock *a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,WTF::StringImpl *a38,uint64_t a39)
{
  unsigned int *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v42 = __ldxr(v40);
  if (v42 == 1)
  {
    if (!__stlxr(0, v40))
    {
LABEL_6:
      v43 = *(WTF::StringImpl **)(v41 - 232);
      *(_QWORD *)(v41 - 232) = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, a2);
        else
          *(_DWORD *)v43 -= 2;
      }
      if (a24)
      {
        v44 = a24 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, a24 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a24 + 16))(a24);
        }
      }
      v47 = __ldxr((unsigned __int8 *)a17);
      if (v47 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a17))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a17);
LABEL_20:
      v48 = v39 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v39 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 16))(v39);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1971E3204()
{
  JUMPOUT(0x1971E3170);
}

void sub_1971E3210()
{
  JUMPOUT(0x1971E31B4);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *result;
  uint64_t v27;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[4];
  char *v36;
  int v37;
  _DWORD v38[4];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v32, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v31, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  v7 = v31;
  v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v32;
  v32 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v33;
  v33 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(NSObject **)(a1 + 32);
  v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v36 = v13;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v11 = v30[0];
    v30[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = (WTF *)WTF::fastFree(v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v27 = a1;
          v17 = WTF::Logger::observers(v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v20 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v37 = 0;
              WTF::String::String((WTF::String *)v38, a3);
              v38[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(v39, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, v27, 4, v30);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v22);
              for (i = 40; i != -8; i -= 16)
              {
                v24 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v24 -= 2;
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          v25 = __ldxr(v14);
          if (v25 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971E3534(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::NativePromiseBase **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[2];
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::NativePromiseBase **v26;
  uint64_t v27;
  uint64_t v28;

  v23 = &v25;
  v24 = 1;
  v26 = (WTF::NativePromiseBase **)&v28;
  v27 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v28, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v26 = (WTF::NativePromiseBase **)v4;
    v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v27) = v5;
  }
  HIDWORD(v27) = v6;
  HIDWORD(v24) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v4);
  v7 = *(_QWORD *)(a1 + 96);
  v23 = (uint64_t *)v7;
  v8 = *(_DWORD *)(a1 + 108);
  LODWORD(v24) = *(_DWORD *)(a1 + 104);
  HIDWORD(v24) = v8;
  v22[0] = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v22[1] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v9);
  if (HIDWORD(v27))
  {
    v17 = v26;
    v18 = 8 * HIDWORD(v27);
    do
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(*v17++, a1, a2);
      v18 -= 8;
    }
    while (v18);
    v7 = (uint64_t)v23;
    v8 = HIDWORD(v24);
  }
  if (v8)
  {
    v19 = 40 * v8;
    do
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(a1, v7, v11, v12, v13, v14, v15, v16);
      v7 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v10);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v20);
}

void sub_1971E37E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  _BYTE v19[2];
  unsigned __int8 *v20;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34C75D8;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v20 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v20);
      result = v20;
      v20 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v20 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v20, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v20, a2);
    v17 = v20;
    (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *))(*(_QWORD *)v20 + 16))(v19, v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, a2, v19);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)&v20, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v20);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

void sub_1971E39E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 **v10;

  if (__ldaxr(*v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v10))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEABB3C]();
  goto LABEL_6;
}

uint64_t *WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::Lock *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD v23[4];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  WTF::Lock *v27;
  char v28;
  uint64_t v29;

  v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v24 = v9;
  v25 = *(_OWORD *)(a2 + 8);
  v26 = *(_OWORD *)(a2 + 24);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v23[0] = 0;
  v23[1] = 0;
  v23[2] = "<chained promise>";
  v23[3] = 0;
  v12 = (unsigned __int8 *)(v9 + 48);
  v27 = (WTF::Lock *)(v9 + 48);
  v28 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_7:
    v12 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v12, a2, a3, a4, a5, a6, a7, a8, v23[0]);
    goto LABEL_8;
  }
  if (__stxr(1u, v12))
    goto LABEL_7;
LABEL_8:
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v12);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>((uint64_t)v14, (WTF::Logger::LogSiteIdentifier *)v23, " settling chained promise ", v9);
  v15 = *(unsigned int *)(v9 + 64);
  v16 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v15 == -1)
  {
    if ((_DWORD)v16 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v16 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34C7588[v15])(&v29, v9 + 56);
    *(_DWORD *)(v9 + 64) = -1;
    goto LABEL_16;
  }
  v29 = v9 + 56;
  ((void (*)(uint64_t *))off_1E34C75F0[v16])(&v29);
LABEL_16:
  WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::dispatchAll(v9, &v27);
  if (v28)
  {
    v17 = v27;
    v18 = __ldxr((unsigned __int8 *)v27);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v17);
  }
LABEL_22:
  v19 = (unsigned int *)(v9 + 8);
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  return WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(&v24);
}

void sub_1971E3C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  va_list va;

  va_start(va, a5);
  if (v5)
  {
    v7 = v5 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) != 2)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1971E3D84(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResult(uint64_t result, uint64_t a2)
{
  _WORD *v3;
  unsigned __int8 *v4;
  int v6;

  v3 = (_WORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *v3 = *(_WORD *)(a2 + 56);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1971E3E4C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  WTF *v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t i;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v33[2];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _BYTE buf[12];
  int v48;
  uint64_t v49;
  int v50;
  _DWORD v51[8];
  _DWORD v52[8];
  _QWORD v53[3];

  v53[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v40, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v39, a2);
  WTF::String::String((WTF::String *)&v38, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v36, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v34, "]");
  *(_QWORD *)buf = v40;
  v33[0] = v39;
  v45 = v37;
  v46 = v38;
  v43 = v35;
  v44 = v36;
  v42 = v34;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v33, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v41);
  if (v41)
  {
    v8 = v34;
    v34 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v35;
    v35 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v36;
    v36 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v37;
    v37 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v38;
    v38 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v39;
    v39 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v40;
    v40 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(NSObject **)(a1 + 32);
    v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v16)
    {
      WTF::String::utf8();
      v18 = v33[0] ? (char *)v33[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v16 = v33[0];
      v33[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          v16 = (WTF *)WTF::fastFree(v16, v17);
        else
          --*(_DWORD *)v16;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v20 = *v19;
        if ((v20 & 1) != 0)
          break;
        v21 = __ldaxr(v19);
        if (v21 == v20)
        {
          if (!__stxr(v20 | 1, v19))
          {
            v31 = a2;
            v22 = WTF::Logger::observers(v16);
            v23 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v23)
            {
              v24 = *(uint64_t **)v22;
              v30 = *(_QWORD *)v22 + 8 * v23;
              do
              {
                v25 = *v24;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "ThenCallback disconnected from ");
                v48 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v49, v31);
                v50 = 0;
                WTF::String::String((WTF::String *)v51, " aborting [callback:");
                v51[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v51[6] = 0;
                WTF::String::String((WTF::String *)v52, " callSite:");
                v52[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(a4);
                v52[6] = 0;
                WTF::String::String((WTF::String *)v53, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v25 + 16))(v25, a1, 4, v33);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);
                for (i = 104; i != -8; i -= 16)
                {
                  v28 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
                }
                ++v24;
              }
              while (v24 != (uint64_t *)v30);
            }
            v29 = __ldxr(v19);
            if (v29 == 1)
            {
              if (!__stlxr(0, v19))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1971E4334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  unsigned __int8 *v31;
  int v32;

  v32 = __ldxr(v31);
  if (v32 == 1)
  {
    if (!__stlxr(0, v31))
    {
LABEL_6:
      if (a31)
      {
        if (*(_DWORD *)a31 == 2)
          WTF::StringImpl::destroy(a31, a2);
        else
          *(_DWORD *)a31 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34C75D8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34C75D8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[2];
  uint64_t v10;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResultRunnable((uint64_t)&v10, *((_QWORD *)a1 + 3));
      v8 = v10;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v10 + 16))(v9, v10);
      (*(void (**)(_BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::takeResult((uint64_t)&v10, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

void sub_1971E47CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C7588[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, _BYTE *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C7588[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (unsigned __int16)*a3;
  v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1])
        a2[1] = 0;
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C7588[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = (WTF *)*result;
      v4 = *((_DWORD *)result + 3);
      v5 = 40 * a2;
      result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *v2 = (uint64_t)result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t *)v3;
        do
        {
          v8 = *result;
          *result = 0;
          *v7 = v8;
          v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          result = WTF::NativePromiseProducer<void,WebKit::ExtensionCapabilityGrantError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSO_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C7618;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSO_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C7618;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN6WebKit29ExtensionCapabilityGrantErrorELj0EE11whenSettledIZNS3_26ExtensionCapabilityGranter24setMediaCapabilityActiveERNS3_15MediaCapabilityEbE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSO_EE4callESO_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  char v6;
  NSObject *v7;
  char *v8;
  const char *v9;
  int v10;
  void *v11;
  WTF *v12;
  char *v13;
  const char *v14;
  int v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      if (*(_BYTE *)(a2 + 1))
      {
        v5 = qword_1ECE71618;
        result = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          WebKit::MediaCapability::environmentIdentifier((id *)v3, (uint64_t *)&v18);
          WTF::String::utf8();
          if (v19)
            v13 = (char *)v19 + 16;
          else
            v13 = 0;
          v14 = "activate";
          v15 = *(unsigned __int8 *)(v4 + 16);
          v21 = "operator()";
          *(_DWORD *)buf = 136446722;
          v22 = 2082;
          if (!v15)
            v14 = "deactivate";
          v23 = v13;
          v24 = 2082;
          v25 = v14;
          _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%{public}s[envID=%{public}s] failed to %{public}s", buf, 0x20u);
          v17 = v19;
          v19 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
              WTF::fastFree(v17, v16);
            else
              --*(_DWORD *)v17;
          }
          result = (uint64_t)v18;
          v18 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)result -= 2;
          }
        }
        *(_BYTE *)(v3 + 24) = 0;
      }
      else
      {
        switch(*(_BYTE *)(v3 + 24))
        {
          case 0:
          case 2:
            return result;
          case 1:
            if (!*(_BYTE *)(result + 16))
              goto LABEL_12;
            v6 = 2;
            goto LABEL_11;
          case 3:
            v6 = *(_BYTE *)(result + 16);
            if (!v6)
LABEL_11:
              *(_BYTE *)(v3 + 24) = v6;
            goto LABEL_12;
          default:
LABEL_12:
            v7 = qword_1ECE71618;
            result = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)result)
            {
              WebKit::MediaCapability::environmentIdentifier((id *)v3, (uint64_t *)&v18);
              WTF::String::utf8();
              if (v19)
                v8 = (char *)v19 + 16;
              else
                v8 = 0;
              v9 = "activated";
              v10 = *(unsigned __int8 *)(v4 + 16);
              v21 = "operator()";
              *(_DWORD *)buf = 136446722;
              v22 = 2082;
              if (!v10)
                v9 = "deactivated";
              v23 = v8;
              v24 = 2082;
              v25 = v9;
              _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s[envID=%{public}s] %{public}s", buf, 0x20u);
              v12 = v19;
              v19 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 1)
                  WTF::fastFree(v12, v11);
                else
                  --*(_DWORD *)v12;
              }
              result = (uint64_t)v18;
              v18 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
                else
                  *(_DWORD *)result -= 2;
              }
            }
            break;
        }
      }
    }
  }
  return result;
}

void sub_1971E4E7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34C7640;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34C7670;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34C7640;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34C7670;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _BYTE *v6;
  BOOL v7;
  _BYTE *v8;
  const char *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t i;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  unsigned __int8 *v36;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a3 + 1);
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6)
    v7 = v6[16] >= 4u;
  else
    v7 = 0;
  if (v7)
  {
    v8 = v6;
    if (v5)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    v43 = (char *)v9;
    WTF::String::String((WTF::String *)&v53, v9);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v49, a2);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v12 = v46;
    v46 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v47;
    v47 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v48;
    v48 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v49;
    v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v50;
    v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v51;
    v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v52;
    v52 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v53;
    v53 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v11);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *((_QWORD *)v8 + 4);
    v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v21 = v45[0];
      v45[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = (WTF *)WTF::fastFree(v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers(v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(uint64_t **)v27;
              v42 = *(_QWORD *)v27 + 8 * v28;
              do
              {
                v30 = *v29;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v43);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>>::toString(&v61, a2);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v30 + 16))(v30, v8, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v31);
                for (i = 120; i != -8; i -= 16)
                {
                  v33 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v42);
            }
            v34 = __ldxr(v24);
            if (v34 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v35 = v54;
    v54 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  v36 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v36))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v38 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v39 = __ldxr(v36);
  if (v39 == 1)
  {
    if (!__stlxr(0, v36))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v38)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v38, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v38)
  {
    v40 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v38);
    return WTF::fastFree((WTF *)v40, v41);
  }
  return result;
}

void sub_1971E55A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,char a37)
{
  unsigned __int8 *v37;
  int v38;

  v38 = __ldxr(v37);
  if (v38 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(UIViewController *,NSError *)>::fromCallable<WTF::CompletionHandler<void ()(UIViewController *,NSError *)>>(WTF::CompletionHandler<void ()(UIViewController *,NSError *)>)::{lambda(void *,UIViewController *,NSError *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1971E58BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>(uint64_t a1, uint64_t a2)
{
  const char **v2;
  uint64_t v3;
  const char **v4;

  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = *(const char ***)a2;
      *(_QWORD *)a2 = 0;
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)a1, v2);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)a1);
    *(_BYTE *)(v3 + 8) = 0;
  }
  else
  {
    v4 = *(const char ***)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t result)
{
  unsigned __int8 **v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(unsigned __int8 ***)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (v1)
  {
    v2 = *v1;
    if (__ldaxr(*v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, v2))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEABB3C](v2);
LABEL_6:
    v4 = *((_QWORD *)v2 + 1);
    v5 = v4 - 1;
    *((_QWORD *)v2 + 1) = v4 - 1;
    if (v4 == 1)
    {
      v10 = *((_QWORD *)v2 + 2);
      v6 = *((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      v7 = v10 == 0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v8 = __ldxr(v2);
    if (v8 == 1)
    {
      if (!__stlxr(0, v2))
      {
        if (v5)
          return result;
LABEL_14:
        v9 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v9 = off_1E34ACA48;
        *(_QWORD *)(v9 + 8) = v2;
        *(_QWORD *)(v9 + 16) = v6;
        *(_BYTE *)(v9 + 24) = v7;
        v11 = v9;
        WTF::ensureOnMainRunLoop();
        result = v11;
        if (v11)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return result;
    goto LABEL_14;
  }
  return result;
}

void sub_1971E5A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;

  v2 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", 0), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, &v15);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:relativeToURL:", CFSTR("Caches/com.apple.WebKit.GPU/"), v3);
  v15 = 0;
  v5 = (void *)objc_msgSend(v4, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", 512, 0, 0, &v15);
  v6 = v5;
  if (v5)
  {
    CFRetain(v5);
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
    {
LABEL_9:
      CFRelease(v6);
      goto LABEL_10;
    }
    v8 = (const void *)objc_msgSend(v6, "bytes");
    v9 = objc_msgSend(v6, "length");
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      goto LABEL_10;
    v8 = 0;
    v9 = 0;
  }
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 73;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v16 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, v8, v9);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v16, 0, 0);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
  }
  if (v6)
    goto LABEL_9;
LABEL_10:
  if (!v4)
  {
    if (!v3)
      return;
LABEL_14:
    CFRelease(v3);
    return;
  }
  CFRelease(v4);
  if (v3)
    goto LABEL_14;
}

void sub_1971E5BDC(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  const void *v3;
  const void *v4;
  IPC::Encoder *v5;
  WTF *v7;
  void *v8;

  IPC::Encoder::~Encoder(v5, a2);
  WTF::fastFree(v7, v8);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(void({block_pointer})(NSData *))>::fromCallable<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0>(WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0)::{lambda(void *,void({block_pointer})(NSData *))#1}::__invoke(uint64_t a1, void *aBlock)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if (aBlock)
  {
    v3 = _Block_copy(aBlock);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34C7700;
    v4[1] = v3;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 16))(v5, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v9;
    v9 = 0;
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    _Block_release(0);
  }
  else
  {
    v9 = 0;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 16))(v7, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v9;
    v9 = 0;
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
}

void sub_1971E5D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0::operator()(void({block_pointer})(NSData *))::{lambda(API::Data *)#1},void,API::Data *>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C7700;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0::operator()(void({block_pointer})(NSData *))::{lambda(API::Data *)#1},void,API::Data *>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E34C7700;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::IconLoadingDelegate::IconLoadingClient::getLoadDecisionForIcon(WebCore::LinkIcon const&,WTF::CompletionHandler<void ()(WTF::CompletionHandler<void ()(API::Data *)> &&)> &&)::$_0::operator()(void({block_pointer})(NSData *))::{lambda(API::Data *)#1},void,API::Data *>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::LegacyDownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  CFTypeRef cf;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    switch(a2)
    {
      case 0:
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        if (a3)
        {
          MEMORY[0x19AEAC4CC](&v15, a3);
        }
        else
        {
          WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
          cf = 0;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (!v10)
          goto LABEL_16;
        *(_QWORD *)(v7 + 16) = 0;
        (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 0, &v15);
        break;
      case 1:
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
        cf = 0;
        v10 = *(_QWORD *)(v9 + 16);
        if (!v10)
          goto LABEL_18;
        *(_QWORD *)(v9 + 16) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 1, &v15);
        break;
      case 2:
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
        cf = 0;
        v10 = *(_QWORD *)(v11 + 16);
        if (!v10)
          goto LABEL_18;
        *(_QWORD *)(v11 + 16) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 2, &v15);
        break;
      case 3:
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
        cf = 0;
        v10 = *(_QWORD *)(v12 + 16);
        if (!v10)
          goto LABEL_18;
        *(_QWORD *)(v12 + 16) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 3, &v15);
        break;
      default:
        return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid NSURLSessionAuthChallengeDisposition (%ld)"), a2);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_16:
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
LABEL_18:
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(BOOL,NSString *)>::fromCallable<WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0>(WebKit::LegacyDownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::$_0)::{lambda(void *,BOOL,NSString *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    MEMORY[0x19AEABCC8](&v8, a3);
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), a2, &v8);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971E6144(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::ExtensionCapabilityGranter,WebKit::ExtensionCapabilityGranterClient &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  result = WebKit::ExtensionCapabilityGranter::ExtensionCapabilityGranter(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1971E61B4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ExtensionCapabilityGrant>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        result = (uint64_t)v4;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *v7 = v8;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          v7[1] = v9;
          WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)result);
          result = v10 + 16;
          v7 += 2;
        }
        while ((WTF *)result != (WTF *)((char *)v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::take(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[2];

  v3 = *a2;
  if (*a2)
    v3 += 24 * *(unsigned int *)(v3 - 4);
  if (v3 == a3)
  {
    v6[0] = 0;
    v6[1] = 0;
    *a1 = 0;
    a1[1] = 0;
    WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)v6);
    return;
  }
  v4 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)a1 = v4;
  if (*a2)
  {
    v5 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
    if (v5 == a3)
      return;
  }
  else
  {
    if (!a3)
      return;
    v5 = 0;
  }
  if (v5 != a3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a2, (WTF::StringImpl **)a3);
}

void sub_1971E6424(_Unwind_Exception *a1)
{
  WebKit::ExtensionCapabilityGrant *v1;

  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ExtensionCapabilityGranter::invalidateGrants(WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34C7768;
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ExtensionCapabilityGranter::invalidateGrants(WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C7768;
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::ExtensionCapabilityGranter::invalidateGrants(WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v1 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = 16 * v1;
    do
    {
      cf = 0;
      WebKit::ExtensionCapabilityGrant::setPlatformGrant(v2, (uint64_t *)&cf);
      v4 = cf;
      cf = 0;
      if (v4)
        CFRelease(v4);
      v2 += 16;
      v3 -= 16;
    }
    while (v3);
  }
}

void sub_1971E64F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (const void *)v23[1];
          v23[1] = 0;
          if (v24)
            CFRelease(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(const void **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          CFRelease(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(const void **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (const void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    CFRelease(v3);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocolLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocolLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1);
  }
}

uint64_t WebKit::OriginStorageManager::StorageBucket::connectionClosed(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[3];
  if (v4)
    WebKit::FileSystemStorageManager::connectionClosed(v4, a2);
  v5 = a1[4];
  if (v5)
    WebKit::LocalStorageManager::connectionClosed(v5, (uint64_t)a2);
  v6 = a1[7];
  if (v6)
    WebKit::SessionStorageManager::connectionClosed(*(_QWORD *)(v6 + 8), (uint64_t)a2);
  result = a1[11];
  if (result)
    return WebKit::CacheStorageManager::connectionClosed(result, (uint64_t)a2);
  return result;
}

uint64_t WebKit::SessionStorageManager::connectionClosed(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (!result)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = (_QWORD *)(result + 16 * v3);
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(result - 4);
  v4 = (_QWORD *)(result + 16 * v3);
  if (!*(_DWORD *)(result - 12))
  {
    v5 = (_QWORD *)(result + 16 * v3);
    goto LABEL_10;
  }
  v5 = (_QWORD *)result;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_QWORD *)result;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (result)
    v7 = (_QWORD *)(result + 16 * *(unsigned int *)(result - 4));
  else
    v7 = 0;
  while (v5 != v7)
  {
    result = WebKit::StorageAreaBase::removeListener(v5[1], a2);
    v8 = v5 + 2;
    v5 = v4;
    if (v8 != v4)
    {
      v5 = v8;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  return result;
}

WebKit::FileSystemStorageManager *WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WebKit::FileSystemStorageManager **v4;
  WebKit::FileSystemStorageManager *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v4 = (WebKit::FileSystemStorageManager **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
    WebKit::OriginStorageManager::StorageBucket::typeStoragePath(a1, 0, &v13);
    v7 = (WebKit::FileSystemStorageManager *)WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v7 = 0;
    v8 = v13;
    v13 = 0;
    *((_QWORD *)v7 + 1) = v8;
    *((_QWORD *)v7 + 2) = a2;
    v9 = *a3;
    *a3 = 0;
    *((_QWORD *)v7 + 3) = v9;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100](v4, v7);
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return *v4;
  }
  return (WebKit::FileSystemStorageManager *)v3;
}

WTF *WebKit::OriginStorageManager::StorageBucket::sessionStorageManager(uint64_t a1, uint64_t a2)
{
  WTF *result;
  WTF **v3;
  WTF *v5;

  v3 = (WTF **)(a1 + 56);
  result = *(WTF **)(a1 + 56);
  if (!result)
  {
    result = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = a2;
    v5 = *v3;
    *v3 = result;
    if (v5)
    {
      std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100]((int)v3, v5);
      return *v3;
    }
  }
  return result;
}

WebKit::IDBStorageManager *WebKit::OriginStorageManager::StorageBucket::idbStorageManager(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WebKit::IDBStorageManager **v4;
  WebKit::IDBStorageManager *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  v4 = (WebKit::IDBStorageManager **)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath(a1, &v12);
    v7 = (WebKit::IDBStorageManager *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v7 = off_1E34C67A8;
    *((_QWORD *)v7 + 1) = 0;
    v8 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *((_QWORD *)v7 + 2) = v8;
    *((_QWORD *)v7 + 3) = a2;
    v9 = *a3;
    *a3 = 0;
    *((_QWORD *)v7 + 4) = v9;
    *((_QWORD *)v7 + 5) = 0;
    std::unique_ptr<WebKit::IDBStorageManager>::reset[abi:sn180100](v4, v7);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v10);
      else
        *(_DWORD *)v8 -= 2;
    }
    return *v4;
  }
  return (WebKit::IDBStorageManager *)v3;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  const WTF::String *v6;
  const WTF::String *v7;
  NSObject *v8;
  char *v9;
  void *v10;
  WTF *v11;
  const WTF::String *v12;
  const WTF::String *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  _BYTE v18[12];
  unsigned int v19;
  WTF *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl **)(this + 80);
  v3 = *(WTF::StringImpl **)(this + 80);
  if (v3)
    goto LABEL_22;
  v5 = this;
  if (*(_BYTE *)(this + 112))
  {
    WebKit::OriginStorageManager::StorageBucket::typeStoragePath(this, (WTF::StringImpl *)3, &v22);
    if (WebKit::IDBStorageManager::migrateOriginData((WebKit::IDBStorageManager *)(v5 + 72), (const WTF::String *)&v22, v6))
    {
      v8 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        v9 = v20 ? (char *)v20 + 16 : 0;
        *(_DWORD *)buf = 134218242;
        v24 = v5;
        v25 = 2082;
        v26 = v9;
        _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - StorageBucket::resolvedIDBStoragePath New path '%{public}s'", buf, 0x16u);
        v11 = v20;
        v20 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
            WTF::fastFree(v11, v10);
          else
            --*(_DWORD *)v11;
        }
      }
    }
    else if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v22, v7))
    {
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(v5 + 72), v12);
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v22, v13);
      v14 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218496;
        v24 = v5;
        v25 = 2048;
        v26 = (char *)v19;
        v27 = 2048;
        v28 = v21;
        _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "%p - StorageBucket::resolvedLocalStoragePath Fails to migrate all databases to new path: %zu migrated, %zu left", buf, 0x20u);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v15);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
    }
    WTF::String::operator=(v4, (WTF::StringImpl *)&v22);
    this = (uint64_t)v22;
    v22 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    this = (uint64_t)WTF::String::operator=((WTF::StringImpl **)(this + 80), (WTF::StringImpl *)(this + 72));
  }
  v3 = *v4;
  if (*v4)
LABEL_22:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

WebKit::CacheStorageManager *WebKit::OriginStorageManager::StorageBucket::cacheStorageManager(WebKit::OriginStorageManager::StorageBucket *this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  WebKit::CacheStorageManager *result;
  WebKit::CacheStorageManager **v7;
  WebKit::CacheStorageManager *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BYTE v14[72];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = (WebKit::CacheStorageManager **)((char *)this + 88);
  result = (WebKit::CacheStorageManager *)*((_QWORD *)this + 11);
  if (!result)
  {
    v14[0] = 0;
    v14[64] = 0;
    if (*((unsigned __int8 *)this + 112) <= 1u)
      std::optional<WebCore::ClientOrigin>::operator=[abi:sn180100]<WebCore::ClientOrigin const&,void>((uint64_t)v14, a3);
    WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((unsigned __int8 *)this, &v13);
    v11 = (WebKit::CacheStorageManager *)WTF::fastMalloc((WTF *)0xA8);
    WebKit::CacheStorageManager::CacheStorageManager((uint64_t)v11, (_DWORD **)&v13, a2, (const WTF::String *)v14, a4, a5);
    std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100](v7, v11);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
    return *v7;
  }
  return result;
}

uint64_t std::optional<WebCore::ClientOrigin>::operator=[abi:sn180100]<WebCore::ClientOrigin const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 64))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 32, a2 + 32);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
    *(_BYTE *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 32, a2 + 32);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

unsigned __int8 *WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  WTF::FileSystemImpl *v4;
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  const WTF::String *v11;
  NSObject *v12;
  const WTF::String *v13;
  char *v14;
  void *v15;
  WTF *v16;
  _BYTE buf[12];
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::FileSystemImpl *)(this + 104);
  v3 = (_DWORD *)*((_QWORD *)this + 13);
  if (v3)
    goto LABEL_5;
  v5 = (uint64_t)this;
  v6 = this[112];
  if (v6 < 2)
  {
    this = (unsigned __int8 *)WTF::String::operator=((WTF::StringImpl **)this + 13, (WTF::StringImpl *)(this + 96));
    goto LABEL_4;
  }
  if (v6 != 2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, (WTF::StringImpl *)4, buf);
  v8 = *(_DWORD **)buf;
  *(_QWORD *)buf = 0;
  this = *(unsigned __int8 **)(v5 + 104);
  *(_QWORD *)(v5 + 104) = v8;
  if (this)
  {
    v9 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      this = *(unsigned __int8 **)buf;
      *(_QWORD *)buf = 0;
      if (!this)
      {
LABEL_14:
        v8 = *(_DWORD **)v4;
        goto LABEL_15;
      }
      v9 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
      {
        this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
        goto LABEL_14;
      }
    }
    *(_DWORD *)this = v9;
    goto LABEL_14;
  }
LABEL_15:
  if (v8)
  {
    if (v8[1])
    {
      v10 = *(_QWORD *)(v5 + 96);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 4))
        {
          this = (unsigned __int8 *)WTF::FileSystemImpl::fileExists(v4, v7);
          if ((this & 1) == 0)
          {
            this = (unsigned __int8 *)WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(v5 + 96), v11);
            if ((_DWORD)this)
            {
              v12 = qword_1ECE718E8;
              if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
              {
                WTF::String::utf8();
                if (v16)
                  v14 = (char *)v16 + 16;
                else
                  v14 = 0;
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v5;
                v18 = 2082;
                v19 = v14;
                _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - StorageBucket::resolvedCacheStoragePath New path '%{public}s'", buf, 0x16u);
                if (v16)
                {
                  if (*(_DWORD *)v16 == 1)
                    WTF::fastFree(v16, v15);
                  else
                    --*(_DWORD *)v16;
                }
              }
              this = (unsigned __int8 *)WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)(v5 + 96), v4, v13);
            }
          }
        }
      }
    }
  }
LABEL_4:
  v3 = *(_DWORD **)v4;
  if (*(_QWORD *)v4)
LABEL_5:
    *v3 += 2;
LABEL_6:
  *a2 = v3;
  return this;
}

WebKit::BackgroundFetchStoreManager *WebKit::OriginStorageManager::StorageBucket::backgroundFetchManager(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  WebKit::BackgroundFetchStoreManager **v4;
  WebKit::BackgroundFetchStoreManager *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v4 = (WebKit::BackgroundFetchStoreManager **)(a1 + 15);
  v3 = a1[15];
  if (!v3)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedBackgroundFetchStoragePath(a1, &v10);
    v7 = (WebKit::BackgroundFetchStoreManager *)WTF::fastMalloc((WTF *)0x30);
    WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(v7, (_DWORD **)&v10, a2, a3);
    std::unique_ptr<WebKit::BackgroundFetchStoreManager>::reset[abi:sn180100](v4, v7);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    return *v4;
  }
  return (WebKit::BackgroundFetchStoreManager *)v3;
}

_QWORD *WebKit::OriginStorageManager::StorageBucket::resolvedBackgroundFetchStoragePath@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)this[13];
  if (v3)
    goto LABEL_9;
  v4 = this;
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, (WTF::StringImpl *)5, &v8);
  v3 = v8;
  v8 = 0;
  this = (_QWORD *)v4[13];
  v4[13] = v3;
  if (!this)
    goto LABEL_8;
  v6 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this != 2)
  {
LABEL_6:
    *(_DWORD *)this = v6;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
  this = v8;
  v8 = 0;
  if (this)
  {
    v6 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_7:
  v3 = (WTF::StringImpl *)v4[13];
LABEL_8:
  if (v3)
LABEL_9:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebKit::SessionStorageManager::isActive(WebKit::SessionStorageManager *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = &v1[2 * v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[2 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[2 * v2];
    goto LABEL_10;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v1 += 2 * *((unsigned int *)v1 - 1);
  if (v1 == v4)
    return 0;
  while (1)
  {
    v6 = *(_QWORD *)(v4[1] + 96);
    if (v6)
    {
      if (*(_DWORD *)(v6 - 12))
        return 1;
    }
    v7 = v4 + 2;
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
    if (v4 == v1)
      return 0;
  }
}

BOOL WebKit::SessionStorageManager::hasDataInMemory(WebKit::SessionStorageManager *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _BOOL8 result;
  _QWORD *v9;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = (_QWORD *)(v1 + 16 * v2);
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (_QWORD *)(v1 + 16 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = (_QWORD *)(v1 + 16 * v2);
    goto LABEL_10;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  if (v6 == v4)
    return 0;
  do
  {
    v7 = WebCore::StorageMap::length((WebCore::StorageMap *)(v4[1] + 104));
    result = v7 != 0;
    if (v7)
      break;
    v9 = v4 + 2;
    v4 = v3;
    if (v9 != v3)
    {
      v4 = v9;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  while (v4 != v6);
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList@<X0>(WTF::StringImpl *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int16 v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v6 = a2;
  WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk(a1, a2, a3, a4);
  result = WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory(a1, v6);
  if ((_DWORD)result)
  {
    v8 = result;
    do
    {
      v10 = 0;
      v11 = v8 & -v8;
      result = (uint64_t)WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<int>(a4, &v11, &v10, (uint64_t)&v9);
      v8 &= v8 - 1;
    }
    while (v8);
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromDisk@<X0>(WTF::StringImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int16 v5;
  WTF::StringImpl *v6;
  const WTF::String *v8;
  const WTF::String *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  const WTF::String *v15;
  const WTF::String *v16;
  const WTF::String *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  int hasCacheList;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[3];
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;

  v5 = a2;
  v6 = this;
  *a4 = 0;
  if ((a2 & 0x80000) == 0)
    goto LABEL_12;
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v33);
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v33, v8);
  if (v32)
  {
    v30 = 0;
    if (a3)
    {
      v10 = WTF::FileSystemImpl::directorySize((WTF::FileSystemImpl *)&v33, v9);
      if (v11)
        v12 = v10;
      else
        v12 = 0;
      v30 = v12;
    }
    v29 = 0x80000;
    WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, &v29, &v30);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v9);
  this = v33;
  v33 = 0;
  if (!this)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_12;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
  if ((v5 & 0x20) == 0)
    goto LABEL_23;
LABEL_13:
  WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(v6, &v31);
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v31, v14))
  {
    v33 = 0;
    if (a3)
      v33 = (WTF::StringImpl *)WebCore::SQLiteFileSystem::databaseFileSize((WebCore::SQLiteFileSystem *)&v31, v15);
    LODWORD(v30) = 32;
    WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, (int *)&v30, &v33);
  }
  this = v31;
  v31 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_23:
  if ((v5 & 0x80) == 0)
    goto LABEL_34;
  WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((uint64_t)v6, &v33);
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v33, v16);
  if (v32)
  {
    v30 = 0;
    if (a3)
    {
      v18 = WTF::FileSystemImpl::directorySize((WTF::FileSystemImpl *)&v33, v17);
      if (v19)
        v20 = v18;
      else
        v20 = 0;
      v30 = v20;
    }
    v29 = 128;
    WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, &v29, &v30);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v17);
  this = v33;
  v33 = 0;
  if (!this)
  {
LABEL_34:
    if ((v5 & 0x8000) == 0)
      return this;
    goto LABEL_35;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_34;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v21);
  if ((v5 & 0x8000) == 0)
    return this;
LABEL_35:
  WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((unsigned __int8 *)v6, v28);
  hasCacheList = WebKit::CacheStorageManager::hasCacheList((WebKit::CacheStorageManager *)v28, v22);
  this = v28[0];
  if (!v28[0])
    goto LABEL_38;
  if (*(_DWORD *)v28[0] != 2)
  {
    *(_DWORD *)v28[0] -= 2;
LABEL_38:
    if (!hasCacheList)
      return this;
    goto LABEL_43;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(v28[0], v23);
  if (!hasCacheList)
    return this;
LABEL_43:
  v31 = 0;
  if (a3)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((unsigned __int8 *)v6, v28);
    v31 = (WTF::StringImpl *)WebKit::CacheStorageManager::cacheStorageSize((WebKit::CacheStorageManager *)v28, v25);
    v27 = v28[0];
    v28[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  LODWORD(v33) = 0x8000;
  return (WTF::StringImpl *)WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v28, a4, (int *)&v33, &v31);
}

uint64_t WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInListFromMemory(_QWORD *a1, __int16 a2)
{
  WebKit::LocalStorageManager *v4;
  uint64_t v5;
  WebKit::SessionStorageManager *v6;
  WebKit::IDBStorageManager *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((a2 & 0x20) != 0 && (v4 = (WebKit::LocalStorageManager *)a1[4]) != 0)
  {
    if (WebKit::LocalStorageManager::hasDataInMemory(v4))
      v5 = 32;
    else
      v5 = 0;
    if ((a2 & 0x10) == 0)
      goto LABEL_13;
  }
  else
  {
    v5 = 0;
    if ((a2 & 0x10) == 0)
      goto LABEL_13;
  }
  v6 = (WebKit::SessionStorageManager *)a1[7];
  if (v6)
  {
    if (WebKit::SessionStorageManager::hasDataInMemory(v6))
      v5 = v5 | 0x10;
    else
      v5 = v5;
  }
LABEL_13:
  if ((a2 & 0x80) != 0)
  {
    v7 = (WebKit::IDBStorageManager *)a1[8];
    if (v7)
    {
      if (WebKit::IDBStorageManager::hasDataInMemory(v7))
        v5 = v5 | 0x80;
      else
        v5 = v5;
    }
  }
  if (a2 < 0)
  {
    v8 = a1[11];
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 56);
      if (!v9 || !*(_DWORD *)(v9 + 4))
      {
        if (*(_DWORD *)(v8 + 100))
          return v5 | 0x8000;
        v11 = *(_QWORD *)(v8 + 104);
        if (v11)
        {
          if (*(_DWORD *)(v11 - 12))
            return v5 | 0x8000;
        }
      }
    }
  }
  return v5;
}

_OWORD *WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(_OWORD *result, uint64_t *a2, int *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD *v15;
  int v16;
  _OWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_OWORD *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v27 = v8 + 16 * v21;
        goto LABEL_29;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_OWORD *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)v17 = -1;
      *((_QWORD *)v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  *((_QWORD *)v15 + 1) = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      result = WTF::HashTable<WebKit::WebsiteDataType,WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebsiteDataType,unsigned long long>>,WTF::IntHash<WebKit::WebsiteDataType>,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>>::expand(a2, v15);
      v15 = result;
      v22 = *a2;
      if (*a2)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  v27 = v22 + 16 * v25;
  v26 = 1;
LABEL_29:
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v27;
  *((_BYTE *)v7 + 16) = v26;
  return result;
}

void WebKit::OriginStorageManager::StorageBucket::deleteData(WTF::StringImpl *a1, void *a2, double a3)
{
  __int16 v4;
  WebKit::LocalStorageManager **v5;
  double v6;

  v4 = (__int16)a2;
  v5 = (WebKit::LocalStorageManager **)a1;
  if ((a2 & 0x80000) != 0)
  {
    a1 = WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData((uint64_t)a1, a3);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a2 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  a1 = WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData(v5, a3);
  if ((v4 & 0x10) == 0)
    goto LABEL_9;
LABEL_7:
  WTF::WallTime::now(a1);
  if (a3 < v6)
    WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData((WebKit::OriginStorageManager::StorageBucket *)v5);
LABEL_9:
  if ((v4 & 0x80) != 0)
    WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData((uint64_t)v5, a3);
  if (v4 < 0)
    WebKit::OriginStorageManager::StorageBucket::deleteCacheStorageData((uint64_t)v5, a2, a3);
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteFileSystemStorageData(uint64_t a1, double a2)
{
  __n128 v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100]((WebKit::FileSystemStorageManager **)(a1 + 24), 0);
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath(a1, 0, &v8);
  v4.n128_f64[0] = a2;
  WTF::FileSystemImpl::deleteAllFilesModifiedSince((WTF::FileSystemImpl *)&v8, v5, v4);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteLocalStorageData(WebKit::LocalStorageManager **a1, double a2)
{
  const WTF::String *v4;
  double v5;
  const WTF::String *v6;
  BOOL v7;
  WebKit::LocalStorageManager *v8;
  uint64_t v9;
  WebKit::LocalStorageManager *v10;
  WebKit::LocalStorageManager **v11;
  WebKit::LocalStorageManager *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;

  WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath((WTF::StringImpl *)a1, &v14);
  v5 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v14, v4));
  if ((_BYTE)v6)
    v7 = a2 > v5;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = a1[4];
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 3);
      if (v9)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) & 1) == 0)
          (*(void (**)(_QWORD))(**((_QWORD **)v8 + 3) + 40))(*((_QWORD *)v8 + 3));
      }
    }
    WebCore::SQLiteFileSystem::deleteDatabaseFile((WebCore::SQLiteFileSystem *)&v14, v6);
  }
  v12 = a1[4];
  v11 = a1 + 4;
  v10 = v12;
  if (v12)
  {
    WebKit::LocalStorageManager::clearDataInMemory(v10);
    if ((WebKit::LocalStorageManager::isActive(*v11) & 1) == 0)
    {
      v6 = *v11;
      *v11 = 0;
      if (v6)
        std::default_delete<WebKit::LocalStorageManager>::operator()[abi:sn180100]((int)v11, v6);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::OriginStorageManager::StorageBucket::deleteSessionStorageData(WebKit::OriginStorageManager::StorageBucket *this)
{
  uint64_t *v1;
  WebKit::SessionStorageManager **v2;
  WTF *v3;

  v2 = (WebKit::SessionStorageManager **)((char *)this + 56);
  v1 = (uint64_t *)*((_QWORD *)this + 7);
  if (v1)
  {
    WebKit::SessionStorageManager::clearData(v1);
    v3 = *v2;
    if ((WebKit::SessionStorageManager::isActive(*v2) & 1) == 0)
    {
      *v2 = 0;
      if (v3)
        std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100]((int)v2, v3);
    }
  }
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteIDBStorageData(uint64_t a1, double a2)
{
  WebKit::IDBStorageManager *v4;
  __n128 v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v4 = *(WebKit::IDBStorageManager **)(a1 + 64);
  if (v4)
    WebKit::IDBStorageManager::closeDatabasesForDeletion(v4);
  WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath(a1, &v9);
  v5.n128_f64[0] = a2;
  WTF::FileSystemImpl::deleteAllFilesModifiedSince((WTF::FileSystemImpl *)&v9, v6, v5);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::deleteCacheStorageData(uint64_t a1, void *a2, double a3)
{
  WebKit::CacheStorageManager *v5;
  __n128 v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v5 = *(WebKit::CacheStorageManager **)(a1 + 88);
  if (v5)
    WebKit::CacheStorageManager::reset(v5, a2);
  WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((unsigned __int8 *)a1, &v10);
  v6.n128_f64[0] = a3;
  WTF::FileSystemImpl::deleteAllFilesModifiedSince((WTF::FileSystemImpl *)&v10, v7, v6);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebKit::SessionStorageManager::clearData(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = this[1];
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = (_QWORD *)(v1 + 16 * v2);
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (_QWORD *)(v1 + 16 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = (_QWORD *)(v1 + 16 * v2);
    goto LABEL_10;
  }
  v4 = (_QWORD *)this[1];
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = (_QWORD *)this[1];
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  while (v4 != v6)
  {
    v7 = v4[1];
    WebCore::StorageMap::clear((WebCore::StorageMap *)(v7 + 104));
    this = WebKit::StorageAreaBase::notifyListenersAboutClear((WebKit::StorageAreaBase *)v7);
    v8 = v4 + 2;
    v4 = v3;
    if (v8 != v3)
    {
      v4 = v8;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::moveData(WTF::StringImpl *this, char a2, WTF::FileSystemImpl *a3, WTF::FileSystemImpl *a4)
{
  WTF::StringImpl *v6;
  uint64_t v8;
  WebKit::SQLiteStorageArea *v9;
  WTF::StringImpl *v10;
  const WTF::String *v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WebKit::IDBStorageManager *v16;
  WTF::StringImpl *v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v6 = this;
  if ((a2 & 0x20) == 0 || !*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
    goto LABEL_18;
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(WebKit::SQLiteStorageArea **)(v8 + 24);
    if (v9)
    {
      if (((*(uint64_t (**)(WebKit::SQLiteStorageArea *))(*(_QWORD *)v9 + 16))(v9) & 1) == 0)
        WebKit::SQLiteStorageArea::close(v9, v10);
    }
  }
  WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(v6, &v23);
  this = v23;
  if (!v23)
    goto LABEL_18;
  if (!*((_DWORD *)v23 + 1))
  {
    v23 = 0;
    goto LABEL_16;
  }
  WTF::FileSystemImpl::parentPath(a3, v11);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v22, v12);
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::SQLiteFileSystem::moveDatabaseFile((WebCore::SQLiteFileSystem *)&v23, a3, v14);
  this = v23;
  v23 = 0;
  if (!this)
  {
LABEL_18:
    if ((a2 & 0x80) == 0)
      return this;
    goto LABEL_19;
  }
LABEL_16:
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_18;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
  if ((a2 & 0x80) == 0)
    return this;
LABEL_19:
  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v16 = (WebKit::IDBStorageManager *)*((_QWORD *)v6 + 8);
    if (v16)
      WebKit::IDBStorageManager::closeDatabasesForDeletion(v16);
    WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((uint64_t)v6, &v23);
    this = v23;
    if (v23)
    {
      if (!*((_DWORD *)v23 + 1))
      {
        v23 = 0;
LABEL_33:
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v17);
        *(_DWORD *)this -= 2;
        return this;
      }
      WTF::FileSystemImpl::parentPath(a4, v17);
      WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v22, v18);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
      WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v23, a4, v20);
      this = v23;
      v23 = 0;
      if (this)
        goto LABEL_33;
    }
  }
  return this;
}

uint64_t WebKit::OriginStorageManager::originFileIdentifier(WebKit::OriginStorageManager *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

WebKit::FileSystemStorageManager *WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::OriginStorageManager *a1, uint64_t a2)
{
  WebKit::OriginStorageManager::StorageBucket *v4;
  WTF::ThreadSafeWeakPtrControlBlock **v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  _QWORD *v7;
  WebKit::FileSystemStorageManager *v8;
  _QWORD *v10;

  v4 = WebKit::OriginStorageManager::defaultBucket(a1);
  v5 = (WTF::ThreadSafeWeakPtrControlBlock **)*((_QWORD *)a1 + 6);
  if (*v5)
    v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v5);
  else
    v6 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34C78E0;
  v7[1] = v6;
  v7[2] = v5;
  v10 = v7;
  v8 = WebKit::OriginStorageManager::StorageBucket::fileSystemStorageManager((uint64_t)v4, a2, (uint64_t *)&v10);
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return v8;
}

WebKit::IDBStorageManager *WebKit::OriginStorageManager::idbStorageManager(WebKit::OriginStorageManager *a1, uint64_t a2)
{
  WebKit::OriginStorageManager::StorageBucket *v4;
  WTF::ThreadSafeWeakPtrControlBlock **v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  _QWORD *v7;
  WebKit::IDBStorageManager *v8;
  _QWORD *v10;

  v4 = WebKit::OriginStorageManager::defaultBucket(a1);
  v5 = (WTF::ThreadSafeWeakPtrControlBlock **)*((_QWORD *)a1 + 6);
  if (*v5)
    v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v5);
  else
    v6 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34C7930;
  v7[1] = v6;
  v7[2] = v5;
  v10 = v7;
  v8 = WebKit::OriginStorageManager::StorageBucket::idbStorageManager((uint64_t)v4, a2, (uint64_t *)&v10);
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return v8;
}

WebKit::CacheStorageManager *WebKit::OriginStorageManager::cacheStorageManager(WebKit::OriginStorageManager *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::OriginStorageManager::StorageBucket *v8;
  WTF::ThreadSafeWeakPtrControlBlock **v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  _QWORD *v11;
  WebKit::CacheStorageManager *v12;
  _QWORD *v14;

  v8 = WebKit::OriginStorageManager::defaultBucket(a1);
  v9 = (WTF::ThreadSafeWeakPtrControlBlock **)*((_QWORD *)a1 + 6);
  if (*v9)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v9);
  else
    v10 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34C7980;
  v11[1] = v10;
  v11[2] = v9;
  v14 = v11;
  v12 = WebKit::OriginStorageManager::StorageBucket::cacheStorageManager(v8, a2, a3, (uint64_t *)&v14, a4);
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  return v12;
}

WebKit::BackgroundFetchStoreManager *WebKit::OriginStorageManager::backgroundFetchManager(WebKit::OriginStorageManager *a1, uint64_t *a2)
{
  WebKit::OriginStorageManager::StorageBucket *v4;
  WTF::ThreadSafeWeakPtrControlBlock **v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  _QWORD *v7;
  WebKit::BackgroundFetchStoreManager *Manager;
  _QWORD *v10;

  v4 = WebKit::OriginStorageManager::defaultBucket(a1);
  v5 = (WTF::ThreadSafeWeakPtrControlBlock **)*((_QWORD *)a1 + 6);
  if (*v5)
    v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*v5);
  else
    v6 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34C79D0;
  v7[1] = v6;
  v7[2] = v5;
  v10 = v7;
  Manager = WebKit::OriginStorageManager::StorageBucket::backgroundFetchManager(v4, a2, (uint64_t *)&v10);
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return Manager;
}

uint64_t WebKit::SQLiteStorageArea::SQLiteStorageArea(uint64_t a1, int a2, const WebCore::ClientOrigin *a3, _DWORD **a4, uint64_t *a5)
{
  _DWORD *v8;
  uint64_t v9;
  void *v10;

  *(_QWORD *)WebKit::StorageAreaBase::StorageAreaBase((WebKit::StorageAreaBase *)a1, a2, a3) = off_1E34C77C8;
  v8 = *a4;
  if (*a4)
    *v8 += 2;
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 148) = 6;
  v10 = (void *)WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(a1 + 144) = 6;
  *(_QWORD *)(a1 + 136) = v10;
  bzero(v10, 8 * *(unsigned int *)(a1 + 148));
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  return a1;
}

void WebKit::SQLiteStorageArea::close(WebKit::SQLiteStorageArea *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WebCore::SQLiteDatabase *v6;

  if (*((_BYTE *)this + 160))
  {
    v3 = *((_QWORD *)this + 19);
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    *((_BYTE *)this + 160) = 0;
  }
  if (*((_BYTE *)this + 172))
    *((_BYTE *)this + 172) = 0;
  WebKit::SQLiteStorageArea::commitTransactionIfNecessary(this);
  v4 = 0;
  v5 = 0;
  do
  {
    if (v5 >= *((unsigned int *)this + 37))
    {
      __break(0xC471u);
      return;
    }
    std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)(*((_QWORD *)this + 17) + v4), 0);
    ++v5;
    v4 += 8;
  }
  while (v4 != 48);
  v6 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    WebCore::SQLiteDatabase::operator delete(v6, 0x40uLL);
}

uint64_t WebKit::SQLiteStorageArea::commitTransactionIfNecessary(WebKit::SQLiteStorageArea *this)
{
  uint64_t *v1;
  WebCore::SQLiteTransaction *v2;
  WebCore::SQLiteTransaction *v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = (WebCore::SQLiteTransaction *)*((_QWORD *)this + 16);
  v1 = (uint64_t *)((char *)this + 128);
  v2 = v3;
  *v1 = 0;
  result = std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100](v1, 0);
  if (v3)
  {
    WebCore::SQLiteTransaction::commit(v2);
    v5 = (WTF *)MEMORY[0x19AEAFB44](v2);
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void WebKit::SQLiteStorageArea::~SQLiteStorageArea(WebKit::SQLiteStorageArea *this)
{
  _BOOL4 isEmpty;
  WTF::StringImpl *v3;
  const WTF::String *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::SQLiteDatabase *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  isEmpty = WebKit::SQLiteStorageArea::isEmpty(this);
  WebKit::SQLiteStorageArea::close(this, v3);
  if (isEmpty)
    WebCore::SQLiteFileSystem::deleteDatabaseFile((WebKit::SQLiteStorageArea *)((char *)this + 104), v4);
  if (*((_BYTE *)this + 160))
  {
    v5 = *((_QWORD *)this + 19);
    if (v5)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v4);
  }
  WTF::Vector<std::unique_ptr<WebCore::SQLiteStatement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v4);
  std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100]((uint64_t *)this + 16, 0);
  v7 = (WebCore::SQLiteDatabase *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
    WebCore::SQLiteDatabase::operator delete(v7, 0x40uLL);
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebKit::StorageAreaBase::~StorageAreaBase(this, v6);
}

{
  WTF *v1;
  void *v2;

  WebKit::SQLiteStorageArea::~SQLiteStorageArea(this);
  WTF::fastFree(v1, v2);
}

BOOL WebKit::SQLiteStorageArea::isEmpty(WebKit::SQLiteStorageArea *this)
{
  _BOOL8 v2;
  uint64_t v4;
  NSObject *v5;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 160))
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
      return *(_DWORD *)(v4 - 12) == 0;
    return 1;
  }
  if (!WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)this, 0) || !*((_QWORD *)this + 15))
    return 1;
  WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v8, (uint64_t)this, 0);
  if (v8 && WebCore::SQLiteStatement::step(v8) == 100)
  {
    v2 = WebCore::SQLiteStatement::columnInt(v8) == 0;
  }
  else
  {
    v5 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      Error = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
      *(_DWORD *)buf = 67109378;
      v10 = Error;
      v11 = 2082;
      v12 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::isEmpty failed on executing statement (%d) - %{public}s", buf, 0x12u);
    }
    v2 = 1;
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
  return v2;
}

void WebKit::StorageAreaBase::~StorageAreaBase(WebKit::StorageAreaBase *this, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E34C7828;
  v3 = *((_QWORD *)this + 12);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WebCore::ClientOrigin::~ClientOrigin((WebKit::StorageAreaBase *)((char *)this + 32));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

uint64_t *WebKit::SQLiteStorageArea::clear(WebKit::SQLiteStorageArea *this, WTF::StringImpl *a2)
{
  const WTF::String *v3;

  WebKit::SQLiteStorageArea::close(this, a2);
  WebCore::SQLiteFileSystem::deleteDatabaseFile((WebKit::SQLiteStorageArea *)((char *)this + 104), v3);
  return WebKit::StorageAreaBase::notifyListenersAboutClear(this);
}

uint64_t *WebKit::StorageAreaBase::notifyListenersAboutClear(WebKit::StorageAreaBase *this)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin((_QWORD **)this + 12);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 12);
  if (v6)
    v7 = (uint64_t *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      v8 = *v3;
      do
      {
        v9 = __ldaxr(&WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier);
        v10 = v9 + 1;
      }
      while (__stlxr(v10, &WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier));
      v11 = v10;
      result = (uint64_t *)IPC::Connection::send<Messages::StorageAreaMap::ClearCache>(v8, (uint64_t *)&v11, v3[1], 0, 0);
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_12;
      }
      v3 = v5;
LABEL_12:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded(WebKit::SQLiteStorageArea *this, WTF::StringImpl *a2)
{
  NSObject *v3;
  void *v4;
  char *v6;
  WTF *v7;
  uint8_t buf[4];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2 == 10)
  {
    WebKit::SQLiteStorageArea::close(this, a2);
    return 0;
  }
  if ((_DWORD)a2 != 26 && (_DWORD)a2 != 11)
    return 0;
  WebKit::SQLiteStorageArea::close(this, a2);
  v3 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    if (v7)
      v6 = (char *)v7 + 16;
    else
      v6 = 0;
    *(_DWORD *)buf = 136315138;
    v9 = v6;
    _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::handleDatabaseCorruption deletes corrupted database file '%s'", buf, 0xCu);
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v4);
      else
        --*(_DWORD *)v7;
    }
  }
  WebCore::SQLiteFileSystem::deleteDatabaseFile((WebKit::SQLiteStorageArea *)((char *)this + 104), (const WTF::String *)v4);
  return 1;
}

uint64_t std::optional<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v4 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v3;
    if (v4)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    v5 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void WebKit::SQLiteStorageArea::getItemFromDatabase(WebKit::SQLiteStorageArea *this, WebCore::SQLiteDatabase **a2)
{
  NSObject *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v12;
  uint8_t buf[8];
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)a2, 0) & 1) != 0)
  {
    if (a2[15])
    {
      WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v12, (uint64_t)a2, 3u);
      if (v12 && !WebCore::SQLiteStatement::bindText())
      {
        v5 = WebCore::SQLiteStatement::step(v12);
        if ((_DWORD)v5 == 101)
        {
          *(_BYTE *)this = 1;
          goto LABEL_8;
        }
        v6 = (WTF::StringImpl *)v5;
        if ((_DWORD)v5 == 100)
        {
          WebCore::SQLiteStatement::columnBlobAsString(v12);
          *(_QWORD *)this = *(_QWORD *)buf;
          *((_DWORD *)this + 2) = 0;
          goto LABEL_9;
        }
        v7 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          Error = WebCore::SQLiteDatabase::lastError(a2[15]);
          ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(a2[15]);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = Error;
          v14 = 2082;
          v15 = ErrorMsg;
          _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::getItemFromDatabase failed on stepping statement (%d) - %{public}s", buf, 0x12u);
        }
        WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a2, v6);
      }
      else
      {
        v4 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          v8 = WebCore::SQLiteDatabase::lastError(a2[15]);
          v9 = WebCore::SQLiteDatabase::lastErrorMsg(a2[15]);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v8;
          v14 = 2082;
          v15 = v9;
          _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::getItemFromDatabase failed on creating statement (%d) - %{public}s", buf, 0x12u);
        }
      }
      *(_BYTE *)this = 0;
LABEL_8:
      *((_DWORD *)this + 2) = 1;
LABEL_9:
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v12);
      return;
    }
    *(_BYTE *)this = 1;
  }
  else
  {
    *(_BYTE *)this = 0;
  }
  *((_DWORD *)this + 2) = 1;
}

void WebKit::SQLiteStorageArea::setItem(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X3>, const WTF::String *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  const WTF::StringImpl *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  __int16 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  NSObject *v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v38;
  NSObject *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::SQLiteStatement *v49;
  WTF::StringImpl *v50;
  _BYTE v51[8];
  int v52;
  uint8_t buf[8];
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if ((WebKit::SQLiteStorageArea::prepareDatabase(a1, (const WTF::String *)1) & 1) == 0)
  {
    v23 = 256;
LABEL_32:
    *(_WORD *)a7 = v23;
    return;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    if (!*(_QWORD *)a5)
      goto LABEL_34;
    if (!*(_BYTE *)(a1 + 172)
      || (v15 = (uint64_t *)(a1 + 152),
          v16 = *(_DWORD *)(a1 + 168),
          v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 152), a4, v14), !*(_BYTE *)(a1 + 160)))
    {
      __break(1u);
    }
    v18 = *v15;
    if (*v15)
      v18 += 24 * *(unsigned int *)(v18 - 4);
    if (v18 == v17)
    {
      v27 = *a4;
      if (*a4)
        LODWORD(v27) = *((_DWORD *)v27 + 1) << ((*((_DWORD *)v27 + 4) & 4) == 0);
      v21 = v16 + (_DWORD)v27;
      v22 = __CFADD__(v16, (_DWORD)v27);
    }
    else
    {
      v19 = *(unsigned int *)(v17 + 16);
      if ((_DWORD)v19 == -1)
        goto LABEL_57;
      *(_QWORD *)buf = v51;
      v20 = ((uint64_t (*)(uint8_t *, uint64_t))off_1E34C7A68[v19])(buf, v17 + 8);
      v21 = v16 - v20;
      v22 = v16 < v20;
    }
    if (v22)
      v21 = v16;
    v28 = *(_QWORD *)a5;
    if (*(_QWORD *)a5)
      LODWORD(v28) = *(_DWORD *)(v28 + 4) << ((*(_DWORD *)(v28 + 16) & 4) == 0);
    v29 = __CFADD__(v21, (_DWORD)v28);
    v26 = v21 + v28;
    v30 = v29;
    if (((v30 | v22) & 1) != 0)
      goto LABEL_31;
  }
  else
  {
    v24 = *a4;
    if (*a4)
      LODWORD(v24) = *((_DWORD *)v24 + 1) << ((*((_DWORD *)v24 + 4) & 4) == 0);
    v25 = *(_QWORD *)a5;
    if (*(_QWORD *)a5)
      LODWORD(v25) = *(_DWORD *)(v25 + 4) << ((*(_DWORD *)(v25 + 16) & 4) == 0);
    v26 = v25 + (_DWORD)v24;
  }
  if (v26 > *(_DWORD *)(a1 + 24))
  {
LABEL_31:
    v23 = 258;
    goto LABEL_32;
  }
LABEL_34:
  WebKit::SQLiteStorageArea::startTransactionIfNecessary((WebKit::SQLiteStorageArea *)a1);
  WebKit::SQLiteStorageArea::getItem((WebKit::SQLiteStorageArea *)v51, (const WTF::String *)a1, a4);
  v50 = 0;
  if (v52 != 1)
  {
    if (!v52)
    {
      WTF::String::operator=(&v50, (WTF::StringImpl *)v51);
LABEL_38:
      WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v49, a1, 5u);
      if (!v49
        || WebCore::SQLiteStatement::bindText()
        || WebCore::SQLiteStatement::bindBlob(v49, 2, a5))
      {
        v31 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          Error = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
          ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = Error;
          v54 = 2082;
          v55 = ErrorMsg;
          _os_log_error_impl(&dword_196BCC000, v31, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::setItem failed on creating statement (%d) - %{public}s", buf, 0x12u);
        }
      }
      else
      {
        v35 = WebCore::SQLiteStatement::step(v49);
        if ((_DWORD)v35 == 101)
        {
          WebKit::StorageAreaBase::dispatchEvents(a1, a2, a3, (uint64_t)a4, (uint64_t)&v50, (uint64_t)a5, a6);
          WebKit::SQLiteStorageArea::updateCacheIfNeeded(a1, a4, a5);
          v32 = 0;
LABEL_44:
          *(_BYTE *)a7 = 0;
          *(_BYTE *)(a7 + 1) = v32;
          WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v49);
          v34 = v50;
          v50 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v33);
            else
              *(_DWORD *)v34 -= 2;
          }
          goto LABEL_49;
        }
        v38 = (WTF::StringImpl *)v35;
        v39 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          v40 = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
          v41 = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v40;
          v54 = 2082;
          v55 = v41;
          _os_log_error_impl(&dword_196BCC000, v39, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::setItem failed on stepping statement (%d) - %{public}s", buf, 0x12u);
        }
        WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, v38);
      }
      v32 = 1;
      goto LABEL_44;
    }
LABEL_57:
    v42 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::StorageAreaBase::dispatchEvents(v42, v43, v44, v45, v46, v47, v48);
    return;
  }
  if (v51[0] == 1)
    goto LABEL_38;
  *(_BYTE *)a7 = v51[0];
  *(_BYTE *)(a7 + 1) = 1;
LABEL_49:
  if (v52 != -1)
    ((void (*)(uint8_t *, _BYTE *))off_1E34C7898[v52])(buf, v51);
}

uint64_t WebKit::StorageAreaBase::dispatchEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[6];
  uint64_t v24;
  char v25;

  result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin((_QWORD **)(a1 + 96));
  v14 = (uint64_t *)result;
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 96);
  if (v17)
    v18 = (uint64_t *)(v17 + 16 * *(unsigned int *)(v17 - 4));
  else
    v18 = 0;
  if (v18 != (uint64_t *)result)
  {
    do
    {
      LOBYTE(v24) = 0;
      v25 = 0;
      v19 = *v14;
      if (*v14 == a2)
      {
        v25 = 1;
        v24 = a3;
        v19 = *v14;
      }
      do
      {
        v20 = __ldaxr(&WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier);
        v21 = v20 + 1;
      }
      while (__stlxr(v21, &WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier));
      v23[0] = &v24;
      v23[1] = a4;
      v23[2] = a5;
      v23[3] = a6;
      v23[4] = a7;
      v23[5] = v21;
      result = IPC::Connection::send<Messages::StorageAreaMap::DispatchStorageEvent>(v19, (uint64_t)v23, v14[1], 0, 0);
      while (1)
      {
        v14 += 2;
        if (v14 == v16)
          break;
        if ((unint64_t)(*v14 + 1) > 1)
          goto LABEL_13;
      }
      v14 = v16;
LABEL_13:
      ;
    }
    while (v14 != v18);
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::removeItem@<X0>(WebCore::SQLiteDatabase **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  __int16 v16;
  NSObject *v17;
  char v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v30;
  WTF::StringImpl *v31;
  uint8_t buf[8];
  _DWORD v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = WebKit::SQLiteStorageArea::prepareDatabase((uint64_t)a1, 0);
  if ((result & 1) == 0)
  {
    v16 = 256;
LABEL_7:
    *(_WORD *)a6 = v16;
    return result;
  }
  if (!a1[15])
  {
    v16 = 257;
    goto LABEL_7;
  }
  WebKit::SQLiteStorageArea::startTransactionIfNecessary((WebKit::SQLiteStorageArea *)a1);
  v31 = 0;
  WebKit::SQLiteStorageArea::getItem((WebKit::SQLiteStorageArea *)buf, (const WTF::String *)a1, a4);
  v14 = v33[0];
  if (v33[0])
  {
    *(_WORD *)a6 = 257;
    v15 = v14;
  }
  else
  {
    WTF::String::operator=(&v31, (WTF::StringImpl *)buf);
    v15 = v33[0];
  }
  if (v15 != -1)
    ((void (*)(WebCore::SQLiteStatement **, uint8_t *))off_1E34C7898[v15])(&v30, buf);
  if (v14)
    goto LABEL_18;
  WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v30, (uint64_t)a1, 1u);
  if (v30 && !WebCore::SQLiteStatement::bindText())
  {
    v19 = WebCore::SQLiteStatement::step(v30);
    if ((_DWORD)v19 == 101)
    {
      *(_QWORD *)buf = 0;
      WebKit::StorageAreaBase::dispatchEvents((uint64_t)a1, a2, a3, (uint64_t)a4, (uint64_t)&v31, (uint64_t)buf, a5);
      v21 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      *(_QWORD *)buf = 0;
      WebKit::SQLiteStorageArea::updateCacheIfNeeded((uint64_t)a1, a4, (const WTF::String *)buf);
      v27 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v18 = 0;
      goto LABEL_17;
    }
    v22 = (WTF::StringImpl *)v19;
    v23 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      Error = WebCore::SQLiteDatabase::lastError(a1[15]);
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(a1[15]);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = Error;
      LOWORD(v33[0]) = 2082;
      *(_QWORD *)((char *)v33 + 2) = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::removeItem failed on executing statement (%d) - %{public}s", buf, 0x12u);
    }
    WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, v22);
  }
  else
  {
    v17 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      v24 = WebCore::SQLiteDatabase::lastError(a1[15]);
      v25 = WebCore::SQLiteDatabase::lastErrorMsg(a1[15]);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v24;
      LOWORD(v33[0]) = 2082;
      *(_QWORD *)((char *)v33 + 2) = v25;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::removeItem failed on creating statement (%d) - %{public}s", buf, 0x12u);
    }
  }
  v18 = 1;
LABEL_17:
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 1) = v18;
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v30);
LABEL_18:
  result = (uint64_t)v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::SQLiteStorageArea::clear(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int16 v15;
  NSObject *v16;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v19;
  NSObject *v20;
  char v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::SQLiteStatement *v29;
  uint8_t buf[8];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((WebKit::SQLiteStorageArea::prepareDatabase(a1, 0) & 1) == 0)
  {
    v15 = 256;
LABEL_17:
    *(_WORD *)a5 = v15;
    return;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v11 = *(_QWORD *)(a1 + 152);
    if (!v11 || !*(_DWORD *)(v11 - 12))
      goto LABEL_16;
    *(_QWORD *)(a1 + 152) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
    if (!*(_BYTE *)(a1 + 172))
      *(_BYTE *)(a1 + 172) = 1;
    *(_DWORD *)(a1 + 168) = 0;
  }
  if (!*(_QWORD *)(a1 + 120))
  {
LABEL_16:
    v15 = 257;
    goto LABEL_17;
  }
  WebKit::SQLiteStorageArea::startTransactionIfNecessary((WebKit::SQLiteStorageArea *)a1);
  WebKit::SQLiteStorageArea::cachedStatement((WebCore::SQLiteStatementAutoResetScope *)&v29, a1, 2u);
  if (!v29)
  {
    v16 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      Error = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = Error;
      v31 = 2082;
      v32 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::clear failed on creating statement (%d) - %{public}s", buf, 0x12u);
    }
    goto LABEL_23;
  }
  v12 = WebCore::SQLiteStatement::step(v29);
  if ((_DWORD)v12 != 101)
  {
    v19 = (WTF::StringImpl *)v12;
    v20 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      v25 = WebCore::SQLiteDatabase::lastError(*(WebCore::SQLiteDatabase **)(a1 + 120));
      v26 = WebCore::SQLiteDatabase::lastErrorMsg(*(WebCore::SQLiteDatabase **)(a1 + 120));
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v25;
      v31 = 2082;
      v32 = v26;
      _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "SQLiteStorageArea::clear failed on executing statement (%d) - %{public}s", buf, 0x12u);
    }
    WebKit::SQLiteStorageArea::handleDatabaseErrorIfNeeded((WebKit::SQLiteStorageArea *)a1, v19);
LABEL_23:
    v21 = 0;
    goto LABEL_24;
  }
  if ((int)WebCore::SQLiteDatabase::lastChanges(*(WebCore::SQLiteDatabase **)(a1 + 120)) >= 1)
  {
    *(_QWORD *)buf = 0;
    v27 = 0;
    v28 = 0;
    WebKit::StorageAreaBase::dispatchEvents(a1, a2, a3, (uint64_t)buf, (uint64_t)&v28, (uint64_t)&v27, a4);
    v14 = v27;
    v27 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v23 = v28;
    v28 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v13);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v13);
      else
        *(_DWORD *)v24 -= 2;
    }
    v21 = 0;
    v22 = 0;
    goto LABEL_25;
  }
  v21 = 1;
LABEL_24:
  v22 = 1;
LABEL_25:
  *(_BYTE *)a5 = v21;
  *(_BYTE *)(a5 + 1) = v22;
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v29);
}

uint64_t WebKit::ServiceWorkerStorageManager::updateRegistrations@<X0>(WebKit::ServiceWorkerStorageManager *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = WebKit::ServiceWorkerStorageManager::ensureDatabase(a1);
  if (result)
    return WebCore::SWRegistrationDatabase::updateRegistrations();
  *a2 = 0;
  a2[16] = 0;
  return result;
}

uint64_t WebKit::StorageAreaBase::removeListener(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;

  v5 = a2;
  v2 = (uint64_t *)(a1 + 96);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 96), &v5);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::remove(v2, v3);
}

uint64_t WebKit::SessionStorageManager::removeNamespace(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 16), &v8);
  v7 = result;
  if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 8), &v7);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
      if (v6 == v4)
        return WebKit::StorageAreaRegistry::unregisterStorageArea(*(uint64_t **)a1, v7);
    }
    else
    {
      if (!v4)
        return WebKit::StorageAreaRegistry::unregisterStorageArea(*(uint64_t **)a1, v7);
      v6 = 0;
    }
    if (v6 != v4)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(a1 + 8), v4);
    return WebKit::StorageAreaRegistry::unregisterStorageArea(*(uint64_t **)a1, v7);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2);
  if (!*a1)
  {
    if (v3)
      goto LABEL_3;
    return 0;
  }
  if ((_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4)) == v3)
    return 0;
LABEL_3:
  v4 = v3[1];
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, v3);
  return v4;
}

uint64_t WebKit::StorageAreaRegistry::unregisterStorageArea(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, &v5);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(a1, v3);
}

uint64_t WebKit::SessionStorageManager::addStorageArea(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  v9 = a3;
  v5 = *a2;
  v10 = *(_QWORD *)(*a2 + 16);
  v7 = (uint64_t *)(a1 + 8);
  v6 = *(uint64_t **)a1;
  v12 = v10;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>(v6, &v12, v5, (uint64_t)v11);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t *)(a1 + 16), &v9, &v10, (uint64_t)v11);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::MemoryStorageArea>>(v7, &v10, a2, (uint64_t)v11);
  return v10;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  v28 = v23 + 16 * v26;
  v27 = 1;
LABEL_29:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::MemoryStorageArea>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  WebKit::StorageAreaBase *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  v21 = (WebKit::StorageAreaBase *)v16[1];
  v16[1] = v20;
  if (v21)
    std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((_DWORD)v16 + 8, v21);
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v16);
      v25 = *a1;
      if (*a1)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  v30 = v25 + 16 * v28;
  v29 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
}

uint64_t WebKit::SessionStorageManager::connectToSessionStorageArea(uint64_t a1, void *a2, uint64_t a3, const WebCore::ClientOrigin *a4, uint64_t a5)
{
  WebKit::StorageAreaBase *v9;
  WebKit::StorageAreaBase *v10;
  uint64_t v11;
  WebKit::StorageAreaBase *v12;
  uint64_t result;
  WebKit::StorageAreaBase *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  void *v19;

  v16 = a5;
  v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v16);
  if ((unint64_t)(v15 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v9 = (WebKit::StorageAreaBase *)WTF::fastMalloc((WTF *)0x80);
    v10 = WebKit::StorageAreaBase::StorageAreaBase(v9, -1, a4);
    *(_QWORD *)v10 = off_1E34C67F8;
    WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v10 + 104));
    *((_BYTE *)v9 + 120) = 0;
    v14 = v9;
    v11 = WebKit::SessionStorageManager::addStorageArea(a1, (uint64_t *)&v14, v16);
    v12 = v14;
    v14 = 0;
    v15 = v11;
    if (v12)
      std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)&v14, v12);
  }
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 8), &v15);
  if (result)
  {
    v18 = a3;
    v19 = a2;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t *)(result + 96), &v19, &v18, (uint64_t)v17);
    return v15;
  }
  return result;
}

uint64_t WebKit::SessionStorageManager::cancelConnectToSessionStorageArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = a3;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v7);
  v6 = result;
  if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 8), &v6);
    if (result)
      return WebKit::StorageAreaBase::removeListener(result, a2);
  }
  return result;
}

uint64_t WebKit::SessionStorageManager::disconnectFromStorageArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = a3;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 8), &v5);
  if (result)
    return WebKit::StorageAreaBase::removeListener(result, a2);
  return result;
}

void WebKit::SessionStorageManager::cloneStorageArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::MemoryStorageArea *v5;
  WebKit::StorageAreaBase *v6;
  WebKit::StorageAreaBase *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v9);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = (WebKit::MemoryStorageArea *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 8), &v8);
    if (v5)
    {
      WebKit::MemoryStorageArea::clone(v5, (uint64_t *)&v7);
      WebKit::SessionStorageManager::addStorageArea(a1, (uint64_t *)&v7, a3);
      v6 = v7;
      v7 = 0;
      if (v6)
        std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)&v7, v6);
    }
  }
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = (void *)*v12;
  v14 = *a2;
  if (*v12)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v13 == v14)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == (void *)-1)
        v23 = v12;
      v11 = (v11 + v24) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = (void *)*v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v14 = *a2;
      v12 = v23;
    }
  }
  *v12 = v14;
  v12[1] = *a3;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, (void **)v12);
    v12 = (_QWORD *)result;
    v17 = *a1;
    if (*a1)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_24;
LABEL_11:
  v21 = v17 + 16 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

BOOL WebKit::StorageAreaBase::hasListeners(WebKit::StorageAreaBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

uint64_t IPC::Connection::send<Messages::StorageAreaMap::ClearCache>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  char *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::StorageAreaMap::ClearCache>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return (uint64_t)v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return (uint64_t)v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return (uint64_t)v9;
}

uint64_t IPC::Connection::send<Messages::StorageAreaMap::DispatchStorageEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::StorageAreaMap::DispatchStorageEvent>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1460;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul>(v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a2;
  if (*v12)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v13 == v14)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1)
        v23 = v12;
      v11 = (v11 + v24) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v14 = *a2;
      v12 = v23;
    }
  }
  *v12 = v14;
  result = (uint64_t)WTF::GenericHashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::StorageAreaBase&>((unsigned int **)v12 + 1, a3);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v12);
    v12 = (_QWORD *)result;
    v17 = *a1;
    if (*a1)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_24;
LABEL_11:
  v21 = v17 + 16 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

uint64_t WebKit::StorageAreaRegistry::getStorageArea(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  v10 = a2;
  v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v10);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if (!v4)
    return 0;
  do
    v5 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v5 + 1, (unsigned int *)v4));
  v6 = *(_QWORD *)(v4 + 8);
  do
  {
    v7 = __ldaxr((unsigned int *)v4);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)v4));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return v6;
}

void WebKit::NetworkMDNSRegister::~NetworkMDNSRegister(WebKit::NetworkMDNSRegister *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  v6 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

uint64_t WebKit::NetworkMDNSRegister::hasRegisteredName(WebKit::NetworkMDNSRegister *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    result = *(_QWORD *)(v3 + 8 * (v8 & v6));
    if (result != -1)
    {
      if (!result)
        return result;
      if ((WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return 1;
}

uint64_t WebKit::NetworkMDNSRegister::unregisterMDNSNames(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  WTF::StringImpl **v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t *v12;
  uint64_t i;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl **v17;
  unsigned int v18;

  v4 = a1 + 3;
  v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 3, a2);
  v6 = a1[3];
  if (v6)
  {
    v7 = (uint64_t *)(v6 + 48 * *(unsigned int *)(v6 - 4));
    if (v7 == v5)
      goto LABEL_8;
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v7 = 0;
  }
  if (v7 != v5)
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v4, v5);
LABEL_8:
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 2, a2);
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take(a1 + 2, v8, &v17);
  if (v18)
  {
    v11 = v17;
    v12 = a1 + 1;
    for (i = 8 * v18; i; i -= 8)
    {
      v14 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v12, v11, v10);
      v9 = v14;
      if (*v12)
      {
        v15 = *v12 + 8 * *(unsigned int *)(*v12 - 4);
        if ((WTF::StringImpl **)v15 != v14)
          goto LABEL_12;
      }
      else if (v14)
      {
        v15 = 0;
LABEL_12:
        if ((WTF::StringImpl **)v15 != v14)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v12, v14);
      }
      ++v11;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
}

WTF::StringImpl *WebKit::NetworkMDNSRegister::registerMDNSName(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  WTF::StringImpl *result;
  const WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  int v19;
  BOOL v20;
  __int128 v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  const char *v38;
  void *v39;
  in_addr_t v40;
  WTF *v41;
  DNSServiceErrorType Connection;
  DNSServiceErrorType v43;
  NSObject *v44;
  uint64_t IdentifierInternal;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  WTF *v63;
  int v64;
  NSObject *v65;
  uint64_t v66;
  DNSServiceErrorType v67;
  void *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _DNSServiceRef_t *v72;
  const char *v73;
  DNSServiceErrorType v74;
  WTF *v75;
  NSObject *v76;
  uint64_t *v77;
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  _DNSServiceRef_t *v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  BOOL v95;
  __int128 v98;
  _DNSServiceRef_t *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  DNSRecordRef RecordRef;
  in_addr_t rdata;
  WTF::StringImpl *v108;
  DNSServiceRef sdRef[2];
  _BYTE buf[18];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  WTF::UUID::UUID((WTF::UUID *)buf);
  sdRef[0] = (DNSServiceRef)".local";
  sdRef[1] = (DNSServiceRef)7;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::UUID,WTF::ASCIILiteral>(buf, (uint64_t *)sdRef, &v108);
  if (!v108)
  {
    __break(0xC471u);
    return result;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1 + 1, &v108, v8, (uint64_t)buf);
  v9 = a1 + 2;
  v10 = a1[2];
  if (v10
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 2, 0), (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  *(_DWORD *)buf = -1640531527;
  *(_WORD *)&buf[4] = 0;
  buf[6] = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(buf, a2);
  v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v11;
  v13 = v10 + 48 * v12;
  v15 = *(_QWORD *)v13;
  v14 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  if (*(_OWORD *)v13 == 0 && v16 == 0)
  {
LABEL_26:
    v23 = *(_OWORD *)a2;
    *(_QWORD *)(v13 + 16) = a2[2];
    *(_OWORD *)v13 = v23;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13 + 32, buf);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v24);
    v25 = *v9;
    if (*v9)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v9;
    if (*v9)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_35;
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_35;
    }
    v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 2, v13);
    goto LABEL_35;
  }
  v18 = 0;
  v19 = 1;
  while (1)
  {
    v20 = v14 == a2[1] && v15 == *a2;
    if (v20 && v16 == a2[2])
      break;
    if (v16 == -1)
      v18 = (_QWORD *)v13;
    v12 = (v12 + v19) & v11;
    v13 = v10 + 48 * v12;
    v15 = *(_QWORD *)v13;
    v14 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    ++v19;
    if (*(_OWORD *)v13 == 0 && v16 == 0)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        v18[4] = 0;
        v18[5] = 0;
        --*(_DWORD *)(*v9 - 16);
        v13 = (uint64_t)v18;
      }
      goto LABEL_26;
    }
  }
LABEL_35:
  v31 = (uint64_t *)(v13 + 32);
  v32 = *(unsigned int *)(v13 + 44);
  if ((_DWORD)v32 == *(_DWORD *)(v13 + 40))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v31, (unint64_t)&v108);
  }
  else
  {
    v33 = *v31;
    v34 = v108;
    if (v108)
      *(_DWORD *)v108 += 2;
    *(_QWORD *)(v33 + 8 * v32) = v34;
    *(_DWORD *)(v13 + 44) = v32 + 1;
  }
  sdRef[0] = 0;
  v35 = a1 + 3;
  v36 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 3, a2);
  v37 = (uint64_t *)a1[3];
  if (v37)
    v37 += 6 * *((unsigned int *)v37 - 1);
  if (v37 == v36)
  {
    Connection = DNSServiceCreateConnection(sdRef);
    if (Connection)
    {
      v43 = Connection;
      v44 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_79:
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v43;
        _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - NetworkMDNSRegister::registerMDNSName DNSServiceCreateConnection error %d", buf, 0x12u);
      }
    }
    else
    {
      v67 = DNSServiceSetDispatchQueue(sdRef[0], MEMORY[0x1E0C80D38]);
      if (!v67)
      {
        v85 = sdRef[0];
        v86 = *v35;
        if (*v35
          || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 3, 0), (v86 = *v35) != 0))
        {
          v87 = *(_DWORD *)(v86 - 8);
        }
        else
        {
          v87 = 0;
        }
        *(_DWORD *)buf = -1640531527;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(buf, a2);
        v88 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v87;
        v89 = (_QWORD *)(v86 + 48 * v88);
        v91 = *v89;
        v90 = v89[1];
        v92 = v89[2];
        if (*(_OWORD *)v89 != 0 || v92)
        {
          v93 = 0;
          v94 = 1;
          while (1)
          {
            v95 = v90 == a2[1] && v91 == *a2;
            if (v95 && v92 == a2[2])
              break;
            if (v92 == -1)
              v93 = v89;
            v88 = (v88 + v94) & v87;
            v89 = (_QWORD *)(v86 + 48 * v88);
            v91 = *v89;
            v90 = v89[1];
            v92 = v89[2];
            ++v94;
            if (*(_OWORD *)v89 == 0 && v92 == 0)
            {
              if (v93)
              {
                *v93 = 0;
                v93[1] = 0;
                v93[2] = 0;
                v93[4] = 0;
                --*(_DWORD *)(*v35 - 16);
                v89 = v93;
              }
              goto LABEL_147;
            }
          }
          if (v85)
            DNSServiceRefDeallocate(v85);
          goto LABEL_43;
        }
LABEL_147:
        v98 = *(_OWORD *)a2;
        v89[2] = a2[2];
        *(_OWORD *)v89 = v98;
        v99 = (_DNSServiceRef_t *)v89[4];
        v89[4] = v85;
        if (v99)
          DNSServiceRefDeallocate(v99);
        v100 = *v35;
        if (*v35)
          v101 = *(_DWORD *)(v100 - 12) + 1;
        else
          v101 = 1;
        *(_DWORD *)(v100 - 12) = v101;
        v102 = *v35;
        if (*v35)
          v103 = *(_DWORD *)(v102 - 12);
        else
          v103 = 0;
        v104 = (*(_DWORD *)(v102 - 16) + v103);
        v105 = *(unsigned int *)(v102 - 4);
        if (v105 > 0x400)
        {
          if (v105 > 2 * v104)
            goto LABEL_43;
        }
        else if (3 * v105 > 4 * v104)
        {
          goto LABEL_43;
        }
        WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 3, (uint64_t)v89);
        goto LABEL_43;
      }
      v43 = v67;
      v44 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_79;
    }
    v66 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v66 + 16))(v66, &v108, 258);
    goto LABEL_81;
  }
  sdRef[0] = (DNSServiceRef)v36[4];
LABEL_43:
  WTF::String::utf8();
  if (*(_QWORD *)buf)
    v38 = (const char *)(*(_QWORD *)buf + 16);
  else
    v38 = 0;
  v40 = inet_addr(v38);
  v41 = *(WTF **)buf;
  *(_QWORD *)buf = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::fastFree(v41, v39);
    else
      --*(_DWORD *)v41;
  }
  rdata = v40;
  if (v40 != -1)
  {
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    v46 = *(_QWORD *)(*a1 + 8);
    if (v46)
      v47 = v46 - 48;
    else
      v47 = 0;
    ++*(_DWORD *)(v47 + 8);
    v48 = *(_QWORD *)(v47 + 80);
    v50 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    ++*(_DWORD *)(v47 + 8);
    *(_QWORD *)v50 = v47;
    v51 = v108;
    v108 = 0;
    *((_QWORD *)v50 + 1) = v51;
    *((_QWORD *)v50 + 2) = v48;
    v52 = *a4;
    *a4 = 0;
    *((_QWORD *)v50 + 3) = v52;
    if ((_MergedGlobals_75 & 1) != 0)
    {
      v53 = qword_1ECE72A60;
      if (qword_1ECE72A60)
        goto LABEL_60;
    }
    else
    {
      qword_1ECE72A60 = 0;
      _MergedGlobals_75 = 1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(0);
    v53 = qword_1ECE72A60;
    if (!qword_1ECE72A60)
    {
      v54 = 0;
LABEL_61:
      v55 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
      v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
      v58 = v54 & ((v57 >> 31) ^ v57);
      v59 = (uint64_t *)(v53 + 16 * v58);
      v60 = *v59;
      if (*v59)
      {
        v61 = 0;
        v62 = 1;
        while (v60 != IdentifierInternal)
        {
          if (v60 == -1)
            v61 = v59;
          v58 = (v58 + v62) & v54;
          v59 = (uint64_t *)(v53 + 16 * v58);
          v60 = *v59;
          ++v62;
          if (!*v59)
          {
            if (v61)
            {
              *v61 = 0;
              v61[1] = 0;
              --*(_DWORD *)(v53 - 16);
              v59 = v61;
            }
            goto LABEL_69;
          }
        }
LABEL_91:
        RecordRef = 0;
        v72 = sdRef[0];
        WTF::String::utf8();
        if (*(_QWORD *)buf)
          v73 = (const char *)(*(_QWORD *)buf + 16);
        else
          v73 = 0;
        v74 = DNSServiceRegisterRecord(v72, &RecordRef, 0x800u, 0, v73, 1u, 1u, 4u, &rdata, 0, (DNSServiceRegisterRecordReply)WebKit::registerMDNSNameCallback, (void *)IdentifierInternal);
        v75 = *(WTF **)buf;
        *(_QWORD *)buf = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 1)
          {
            WTF::fastFree(v75, v68);
            if (!v74)
            {
LABEL_113:
              if (v50)
                std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v50, (WTF::StringImpl *)v68);
              if (v46)
              {
                if (*(_DWORD *)(v47 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)(v46 - 48) + 8))(v46 - 48);
                else
                  --*(_DWORD *)(v47 + 8);
              }
              goto LABEL_118;
            }
LABEL_100:
            v76 = off_1ECE713E8;
            if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = a1;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v74;
              _os_log_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEFAULT, "%p - NetworkMDNSRegister::registerMDNSName DNSServiceRegisterRecord error %d", buf, 0x12u);
            }
            v77 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(a1 + 3, a2);
            if (*v35)
            {
              v78 = *v35 + 48 * *(unsigned int *)(*v35 - 4);
              v79 = dword_1ECE72000;
              if ((uint64_t *)v78 == v77)
                goto LABEL_109;
            }
            else
            {
              v79 = dword_1ECE72000;
              if (!v77)
              {
LABEL_109:
                if ((v79[662] & 1) == 0)
                {
                  qword_1ECE72A60 = 0;
                  _MergedGlobals_75 = 1;
                }
                v80 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(IdentifierInternal);
                WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::take((uint64_t *)buf, v80);
                v81 = *(WTF **)buf;
                if (*(_QWORD *)buf)
                {
                  v82 = *(_QWORD *)buf + 8;
                  v83 = *(_QWORD *)(*(_QWORD *)buf + 24);
                  *(_QWORD *)(*(_QWORD *)buf + 24) = 0;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83 + 16))(v83, v82, 258);
                  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
                  std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v81, v84);
                }
                goto LABEL_113;
              }
              v78 = 0;
            }
            if ((uint64_t *)v78 != v77)
              WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v35, v77);
            goto LABEL_109;
          }
          --*(_DWORD *)v75;
        }
        if (!v74)
          goto LABEL_113;
        goto LABEL_100;
      }
LABEL_69:
      v63 = (WTF *)v59[1];
      *v59 = IdentifierInternal;
      v59[1] = (uint64_t)v50;
      if (v63)
        std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v63, v49);
      if (qword_1ECE72A60)
        v64 = *(_DWORD *)(qword_1ECE72A60 - 12) + 1;
      else
        v64 = 1;
      *(_DWORD *)(qword_1ECE72A60 - 12) = v64;
      if (qword_1ECE72A60)
        v69 = *(_DWORD *)(qword_1ECE72A60 - 12);
      else
        v69 = 0;
      v70 = (*(_DWORD *)(qword_1ECE72A60 - 16) + v69);
      v71 = *(unsigned int *)(qword_1ECE72A60 - 4);
      if (v71 > 0x400)
      {
        if (v71 > 2 * v70)
          goto LABEL_90;
      }
      else if (3 * v71 > 4 * v70)
      {
LABEL_90:
        v50 = 0;
        goto LABEL_91;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v59);
      goto LABEL_90;
    }
LABEL_60:
    v54 = *(_DWORD *)(v53 - 8);
    goto LABEL_61;
  }
  v65 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v65, OS_LOG_TYPE_DEFAULT, "%p - NetworkMDNSRegister::registerMDNSName inet_addr error", buf, 0xCu);
  }
  v66 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v66 + 16))(v66, &v108, 257);
LABEL_81:
  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
LABEL_118:
  result = v108;
  v108 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v68);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebKit::registerMDNSNameCallback(WebKit *this, _DNSServiceRef_t *a2, _DNSRecordRef_t *a3, int a4, uint64_t a5, void *a6)
{
  _QWORD *v8;
  uint64_t *result;
  WTF *v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  WebKit *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  double v34;
  double v35;
  double v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint8_t buf[4];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_75 & 1) == 0)
  {
    qword_1ECE72A60 = 0;
    _MergedGlobals_75 = 1;
  }
  v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a5);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::take((uint64_t *)&v39, v8);
  v10 = v39;
  if (v39)
  {
    v11 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v41 = a4;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "NetworkMDNSRegister callback - registerMDNSNameCallback with error %d", buf, 8u);
    }
    if (!a4)
    {
      v27 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v27 + 16))(v27, (_QWORD *)v10 + 1, 0);
LABEL_43:
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      return (uint64_t *)std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v10, v38);
    }
    v12 = (uint64_t *)(*(_QWORD *)v10 + 184);
    v13 = *v12;
    if (!*v12)
      goto LABEL_42;
    v14 = *(_DWORD *)(v13 - 4);
    if (!v14)
      goto LABEL_42;
    v15 = 0;
    v16 = v14 - 1;
    do
    {
      v17 = v16;
      v18 = (_QWORD *)(v13 + 48 * v16);
      v19 = v18[2];
      if (*v18 | v18[1] | v19)
        v20 = v19 == -1;
      else
        v20 = 1;
      if (!v20)
      {
        v21 = v13 + 48 * v16;
        v23 = *(WebKit **)(v21 + 32);
        v22 = (_QWORD *)(v21 + 32);
        if (v23 == this)
        {
          *v18 = 1;
          v18[1] = 0;
          v18[2] = -1;
          *v22 = 0;
          if (this)
            DNSServiceRefDeallocate(this);
          ++v15;
        }
      }
      --v16;
    }
    while (v17);
    v24 = *v12;
    if (v15)
    {
      *(_DWORD *)(v24 - 16) += v15;
      v25 = *v12;
      if (*v12)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      *(_DWORD *)(v25 - 12) = v26 - v15;
      v24 = *v12;
    }
    if (!v24
      || ((v28 = *(_DWORD *)(v24 - 4), v29 = *(unsigned int *)(v24 - 12), v28 >= 9)
        ? (v30 = 6 * (int)v29 >= v28)
        : (v30 = 1),
          v30))
    {
LABEL_42:
      v27 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v27 + 16))(v27, (_QWORD *)v10 + 1, 258);
      goto LABEL_43;
    }
    v31 = (v29 - 1) | ((v29 - 1) >> 1) | ((((_DWORD)v29 - 1) | ((v29 - 1) >> 1)) >> 2);
    v32 = v31 | (v31 >> 4) | ((v31 | (v31 >> 4)) >> 8);
    v33 = (v32 | HIWORD(v32)) + 1;
    if (v33 > 0x400)
    {
      if (v33 > 2 * v29)
        goto LABEL_35;
    }
    else if (3 * v33 > 4 * v29)
    {
LABEL_33:
      v34 = (double)v29;
      v35 = (double)v33;
      v36 = 0.604166667;
LABEL_36:
      if (v35 * v36 <= v34)
        LODWORD(v33) = 2 * v33;
      if (v33 <= 8)
        v37 = 8;
      else
        v37 = v33;
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v12, v37, 0);
      goto LABEL_42;
    }
    LODWORD(v33) = 2 * v33;
    if (v33 <= 0x400)
      goto LABEL_33;
LABEL_35:
    v34 = (double)v29;
    v35 = (double)v33;
    v36 = 0.416666667;
    goto LABEL_36;
  }
  return result;
}

WebKit::RTCDataChannelRemoteManagerProxy *WebKit::RTCDataChannelRemoteManagerProxy::RTCDataChannelRemoteManagerProxy(WebKit::RTCDataChannelRemoteManagerProxy *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = this;
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = off_1E34B4718;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 4) = 0;
  return this;
}

void WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::RTCDataChannelRemoteManagerProxy *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = *((_QWORD *)this + 3);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 2);
  v5 = *((_QWORD *)a2 + 32);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34C7A88;
  v7[1] = this;
  v7[2] = this;
  v7[3] = v5;
  v7[4] = v6;
  v9 = v7;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v9);
  v8 = v9;
  v9 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  IPC::Connection::addWorkQueueMessageReceiver(*((_QWORD *)a2 + 8), 0x33u, *((_QWORD *)this + 3), (uint64_t)this, 0);
}

void WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::RTCDataChannelRemoteManagerProxy *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = *((_QWORD *)this + 3);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 2);
  v5 = *((_QWORD *)a2 + 32);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C7AB0;
  v6[1] = this;
  v6[2] = this;
  v6[3] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v8);
  v7 = v8;
  v8 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  IPC::Connection::removeWorkQueueMessageReceiver(*((_QWORD *)a2 + 8), 0x33u, 0);
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::sendData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v11[0] = a5;
  v11[1] = a6;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), v12);
  if (result)
  {
    v8 = v12;
    v9 = a4;
    v10 = v11;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::SendData>(result, (uint64_t)&v8, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::SendData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::RTCDataChannelRemoteManager::SendData>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 676;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), v5);
  if (result)
  {
    v4 = v5;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::Close>(result, &v4, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::Close>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::RTCDataChannelRemoteManager::Close>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  IPC::Encoder *v19;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 673;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v19 = (IPC::Encoder *)v10;
  v11 = *a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = v11[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v12;
  v14 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v19, a4, a5);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  return v14;
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::changeReadyState(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  _QWORD *v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), v8);
  if (result)
  {
    v6 = v8;
    v7 = a4;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::ChangeReadyState>(result, (uint64_t)&v6, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::ChangeReadyState>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::RTCDataChannelRemoteManager::ChangeReadyState>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  IPC::Encoder *v19;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 672;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v19 = (IPC::Encoder *)v10;
  v11 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  v12 = v11[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v12;
  LOBYTE(v12) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v12;
  v14 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v19, a4, a5);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  return v14;
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::receiveData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v11[0] = a5;
  v11[1] = a6;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), v12);
  if (result)
  {
    v8 = v12;
    v9 = a4;
    v10 = v11;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::ReceiveData>(result, (uint64_t)&v8, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::ReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::RTCDataChannelRemoteManager::ReceiveData>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 675;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::detectError(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), v11);
  if (result)
  {
    v8 = v11;
    v9 = a4;
    v10 = a5;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::DetectError>(result, (uint64_t)&v8, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::DetectError>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::RTCDataChannelRemoteManager::DetectError>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 674;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::RTCDataChannelRemoteManagerProxy::bufferedAmountIsDecreasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), v7);
  if (result)
  {
    v6[0] = v7;
    v6[1] = a4;
    return IPC::Connection::send<Messages::RTCDataChannelRemoteManager::BufferedAmountIsDecreasing>(result, (uint64_t)v6, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RTCDataChannelRemoteManager::BufferedAmountIsDecreasing>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;

  IPC::Connection::connection(a1, &v22);
  if (!v22)
    return 2;
  v9 = IPC::Connection::send<Messages::RTCDataChannelRemoteManager::BufferedAmountIsDecreasing>((uint64_t)v22, a2, a3, a4, a5);
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    v11 = *v10;
    if (__ldaxr(*v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v11);
LABEL_8:
    v13 = *((_QWORD *)v11 + 1);
    v14 = v13 - 1;
    *((_QWORD *)v11 + 1) = v13 - 1;
    if (v13 == 1)
    {
      v21 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      v15 = v21 == 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
      {
        if (v14)
          return v9;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return v9;
LABEL_16:
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E34ACA48;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = v15;
    v23 = v18;
    WTF::ensureOnMainRunLoop();
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return v9;
}

{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  IPC::Encoder *v20;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 671;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v20 = (IPC::Encoder *)v10;
  v11 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  v12 = v11[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v12;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v13;
  v15 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v20, a4, a5);
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v17, v18);
  }
  return v15;
}

uint64_t WebKit::SQLiteStorageArea::type(WebKit::SQLiteStorageArea *this)
{
  return 0;
}

uint64_t WebKit::SQLiteStorageArea::storageType(WebKit::SQLiteStorageArea *this)
{
  return 1;
}

WebKit::FileSystemStorageManager *std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100](WebKit::FileSystemStorageManager **a1, WebKit::FileSystemStorageManager *a2)
{
  WebKit::FileSystemStorageManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::FileSystemStorageManager::~FileSystemStorageManager(result);
    return (WebKit::FileSystemStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void std::default_delete<WebKit::LocalStorageManager>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  WebKit::StorageAreaBase *v4;
  WTF::StringImpl *v5;

  if (this)
  {
    v3 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = (WebKit::StorageAreaBase *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v4)
      std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((_DWORD)this + 16, v4);
    v5 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::fastFree(this, v4);
  }
}

void std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;

  if (this)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      WTF::fastFree((WTF *)(v3 - 16), this);
    v4 = *((_QWORD *)this + 1);
    if (v4)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, this);
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WebKit::StorageAreaBase *a2)
{
  uint64_t v3;
  WebKit::StorageAreaBase **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::StorageAreaBase **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::StorageAreaBase *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v4, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::IDBStorageManager *std::unique_ptr<WebKit::IDBStorageManager>::reset[abi:sn180100](WebKit::IDBStorageManager **a1, WebKit::IDBStorageManager *a2)
{
  WebKit::IDBStorageManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::IDBStorageManager::~IDBStorageManager(result);
    return (WebKit::IDBStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::CacheStorageManager *std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100](WebKit::CacheStorageManager **a1, WebKit::CacheStorageManager *a2)
{
  WebKit::CacheStorageManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CacheStorageManager::~CacheStorageManager(result, a2);
    return (WebKit::CacheStorageManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::BackgroundFetchStoreManager *std::unique_ptr<WebKit::BackgroundFetchStoreManager>::reset[abi:sn180100](WebKit::BackgroundFetchStoreManager **a1, WebKit::BackgroundFetchStoreManager *a2)
{
  WebKit::BackgroundFetchStoreManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::BackgroundFetchStoreManager::~BackgroundFetchStoreManager(result, a2);
    return (WebKit::BackgroundFetchStoreManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::OriginStorageManager::StorageBucket *std::unique_ptr<WebKit::OriginStorageManager::StorageBucket>::reset[abi:sn180100](WebKit::OriginStorageManager::StorageBucket **a1, WebKit::OriginStorageManager::StorageBucket *a2)
{
  WebKit::OriginStorageManager::StorageBucket *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::OriginStorageManager::StorageBucket::~StorageBucket(result);
    return (WebKit::OriginStorageManager::StorageBucket *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::OriginStorageManager::StorageBucket,WTF::String &,WTF::ASCIILiteral,WTF::String &,WTF::String &,WTF::String &,WebKit::UnifiedOriginStorageLevel &>@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, _DWORD **a4@<X3>, _DWORD **a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  _DWORD *v19[2];

  v14 = WTF::fastMalloc((WTF *)0x88);
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = (_DWORD *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = v19[1];
    }
    v19[0] = v16;
  }
  else
  {
    v16 = 0;
    v19[0] = 0;
  }
  result = WebKit::OriginStorageManager::StorageBucket::StorageBucket(v14, *a1, v19, a3, a4, a5, *a6);
  *a7 = v14;
  v19[0] = 0;
  if (v16)
  {
    if (*v16 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v16, v18);
    else
      *v16 -= 2;
  }
  return result;
}

void WebCore::SQLiteDatabase::operator delete(WebCore::SQLiteDatabase *a1, size_t a2)
{
  void *v3;
  void *v4;

  WebCore::SQLiteDatabase::~SQLiteDatabase(a1);
  if (atomic_load((unsigned int *)v3))
    bzero(v3, a2);
  else
    WTF::fastFree((WTF *)v3, v4);
}

uint64_t std::unique_ptr<WebCore::SQLiteTransaction>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEAFB44]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned int>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned int>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      v5 = *(WTF::StringImpl **)(v4 - 8);
      if (v5 != (WTF::StringImpl *)-1)
      {
        v6 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v6 != -1)
        {
          ((void (*)(char *, uint64_t))off_1E34C7878[v6])(&v8, v4);
          v5 = *(WTF::StringImpl **)(v4 - 8);
        }
        *(_DWORD *)(v4 + 8) = -1;
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEjEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_jEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN6WebKit12StorageErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DNSServiceRef_t **v4;
  _DNSServiceRef_t *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DNSServiceRef_t **)(a1 + 32);
    do
    {
      if (*(v4 - 2) != (_DNSServiceRef_t *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          DNSServiceRefDeallocate(v5);
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 32;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
        v4 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 48;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::createQuotaManager(WebKit::OriginQuotaManager::Parameters &&)::$_0,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C78B8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::createQuotaManager(WebKit::OriginQuotaManager::Parameters &&)::$_0,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C78B8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::createQuotaManager(WebKit::OriginQuotaManager::Parameters &&)::$_0,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1;
  WebKit::OriginStorageManager *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  WebKit::FileSystemStorageManager *v10;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  v2 = *(WebKit::OriginStorageManager **)(a1 + 8);
  v3 = WebKit::OriginStorageManager::defaultBucket(v2);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v3, 128, &v24);
  v4 = WebKit::OriginStorageManager::defaultBucket(v2);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v4, 0x8000, &v23);
  v5 = WebKit::OriginStorageManager::defaultBucket(v2);
  WebKit::OriginStorageManager::StorageBucket::resolvedPath(v5, 0x80000, &v22);
  v7 = WTF::FileSystemImpl::directorySize((WTF::FileSystemImpl *)&v22, v6);
  if (v8)
    v9 = v7;
  else
    v9 = 0;
  v10 = (WebKit::FileSystemStorageManager *)*((_QWORD *)WebKit::OriginStorageManager::defaultBucket(v2) + 3);
  if (v10)
  {
    v12 = WebKit::FileSystemStorageManager::allocatedUnusedCapacity(v10);
    if (!__CFADD__(v9, v12))
      v9 += v12;
  }
  if (v24 && *((_DWORD *)v24 + 1))
    v13 = WebCore::IDBServer::SQLiteIDBBackingStore::databasesSizeForDirectory((WebCore::IDBServer::SQLiteIDBBackingStore *)&v24, v11);
  else
    v13 = 0;
  v16 = WebKit::CacheStorageManager::cacheStorageSize((WebKit::CacheStorageManager *)&v23, v11);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v9 + v16;
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v14 = v13 + v18;
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  return v14;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::FileSystemStorageHandleRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C78E0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::FileSystemStorageHandleRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C78E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::fileSystemStorageManager(WebKit::FileSystemStorageHandleRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::Lock *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;

  v5 = *(WTF::Lock **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v13, v5, *(_QWORD *)(a1 + 16)), (v6 = v13) != 0))
  {
    v7 = *a3;
    *a3 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34C7908;
    v8[1] = v7;
    v12 = v8;
    WebKit::OriginQuotaManager::requestSpace(v6, a2, (uint64_t *)&v12);
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v6, v9);
  }
  else
  {
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager24fileSystemStorageManagerERNS2_31FileSystemStorageHandleRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C7908;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager24fileSystemStorageManagerERNS2_31FileSystemStorageHandleRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C7908;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager24fileSystemStorageManagerERNS2_31FileSystemStorageHandleRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESE_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::idbStorageManager(WebKit::IDBStorageRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C7930;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::idbStorageManager(WebKit::IDBStorageRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C7930;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::idbStorageManager(WebKit::IDBStorageRegistry &)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::Lock *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;

  v5 = *(WTF::Lock **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v13, v5, *(_QWORD *)(a1 + 16)), (v6 = v13) != 0))
  {
    v7 = *a3;
    *a3 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34C7958;
    v8[1] = v7;
    v12 = v8;
    WebKit::OriginQuotaManager::requestSpace(v6, a2, (uint64_t *)&v12);
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v6, v9);
  }
  else
  {
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager17idbStorageManagerERNS2_18IDBStorageRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C7958;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager17idbStorageManagerERNS2_18IDBStorageRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C7958;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager17idbStorageManagerERNS2_18IDBStorageRegistryEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESE_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::cacheStorageManager(WebKit::CacheStorageRegistry &,WebCore::ClientOrigin const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C7980;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::cacheStorageManager(WebKit::CacheStorageRegistry &,WebCore::ClientOrigin const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C7980;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::cacheStorageManager(WebKit::CacheStorageRegistry &,WebCore::ClientOrigin const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::Lock *v5;
  void *v7;
  WTF::Lock *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *result;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;

  v5 = *(WTF::Lock **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v16, v5, *(_QWORD *)(a1 + 16)), v16))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v16, v7);
    v8 = *(WTF::Lock **)(a1 + 8);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v16, v8, *(_QWORD *)(a1 + 16));
      v9 = v16;
    }
    else
    {
      v9 = 0;
    }
    v12 = *a3;
    *a3 = 0;
    v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = &off_1E34C79A8;
    *((_QWORD *)v13 + 1) = v12;
    v15 = v13;
    WebKit::OriginQuotaManager::requestSpace(v9, a2, (uint64_t *)&v15);
    result = v15;
    if (v15)
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v15 + 8))(v15);
    if (v9)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v9, v14);
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager19cacheStorageManagerERNS2_20CacheStorageRegistryERKN7WebCore12ClientOriginEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C79A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager19cacheStorageManagerERNS2_20CacheStorageRegistryERKN7WebCore12ClientOriginEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C79A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager19cacheStorageManagerERNS2_20CacheStorageRegistryERKN7WebCore12ClientOriginEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESQ_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::backgroundFetchManager(WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C79D0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::backgroundFetchManager(WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C79D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::OriginStorageManager::backgroundFetchManager(WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&)::$_0,void,unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::Lock *v5;
  void *v7;
  WTF::Lock *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *result;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;

  v5 = *(WTF::Lock **)(a1 + 8);
  if (v5
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v16, v5, *(_QWORD *)(a1 + 16)), v16))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v16, v7);
    v8 = *(WTF::Lock **)(a1 + 8);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v16, v8, *(_QWORD *)(a1 + 16));
      v9 = v16;
    }
    else
    {
      v9 = 0;
    }
    v12 = *a3;
    *a3 = 0;
    v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = &off_1E34C79F8;
    *((_QWORD *)v13 + 1) = v12;
    v15 = v13;
    WebKit::OriginQuotaManager::requestSpace(v9, a2, (uint64_t *)&v15);
    result = v15;
    if (v15)
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v15 + 8))(v15);
    if (v9)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::OriginQuotaManager,(WTF::DestructionThread)0>(*v9, v14);
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager22backgroundFetchManagerEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C79F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager22backgroundFetchManagerEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C79F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20OriginStorageManager22backgroundFetchManagerEONS_3RefINS_9WorkQueueENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEyONS_17CompletionHandlerIFvbEEEEUlT_E_vJNS2_18OriginQuotaManager8DecisionEEE4callESK_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::SQLiteStatement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::SQLiteStatement **v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::SQLiteStatement ***)a1;
    v5 = 8 * v3;
    do
    {
      std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](v4++, 0);
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SQLiteStorageArea::startTransactionIfNecessary(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C7A20;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SQLiteStorageArea::startTransactionIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C7A20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::SQLiteStorageArea *WTF::Detail::CallableWrapper<WebKit::SQLiteStorageArea::startTransactionIfNecessary(void)::$_0,void>::call(WebKit::SQLiteStorageArea *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WebKit::SQLiteStorageArea **)(v1 + 8);
    if (result)
      return (WebKit::SQLiteStorageArea *)WebKit::SQLiteStorageArea::commitTransactionIfNecessary(result);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_0,WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned int> &>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2)
    LODWORD(v2) = *(_DWORD *)(v2 + 4) << ((*(_DWORD *)(v2 + 16) & 4) == 0);
  **(_DWORD **)(*(_QWORD *)result + 8) = v2;
  return result;
}

_DWORD ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_0,WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned int> &>(_DWORD ***result, _DWORD *a2)
{
  ***result = *a2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEjEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_jEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEjEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_jEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

WTF::StringImpl **std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,unsigned int>>::__assign_alt[abi:sn180100]<0ul,WTF::String,WTF::String const&>(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;

  v4 = result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl **))off_1E34C7878[v5])(&v7, result);
  }
  v6 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v6 += 2;
  *v4 = v6;
  *((_DWORD *)v4 + 2) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_2,WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned int> &>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  v2 = *a2;
  if (*a2)
    LODWORD(v2) = *(_DWORD *)(v2 + 4) << ((*(_DWORD *)(v2 + 16) & 4) == 0);
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  v4 = *(_DWORD *)(v3 + 4);
  v5 = __CFADD__(v4, (_DWORD)v2);
  v6 = v4 + v2;
  if (v5)
    *(_BYTE *)v3 = 1;
  else
    *(_DWORD *)(v3 + 4) = v6;
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_2,WebKit::SQLiteStorageArea::updateCacheIfNeeded(WTF::String const&,WTF::String const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned int> &>(uint64_t **result, _DWORD *a2)
{
  uint64_t v2;
  int v3;

  v2 = **result;
  v3 = *(_DWORD *)(v2 + 4);
  if (__CFADD__(v3, *a2))
    *(_BYTE *)v2 = 1;
  else
    *(_DWORD *)(v2 + 4) = v3 + *a2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SQLiteStorageArea::requestSpace(WTF::String const&,WTF::String const&)::$_0,WebKit::SQLiteStorageArea::requestSpace(WTF::String const&,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned int> &>(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return (*(_DWORD *)(*(_QWORD *)a2 + 4) << (((*(_DWORD *)(*(_QWORD *)a2 + 16) >> 2) & 1) == 0));
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SQLiteStorageArea::requestSpace(WTF::String const&,WTF::String const&)::$_0,WebKit::SQLiteStorageArea::requestSpace(WTF::String const&,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned int> &>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (*v13 + ~(*v13 << 32)) ^ ((*v13 + ~(*v13 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  WebKit::StorageAreaBase *v4;
  WebKit::StorageAreaBase *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v5 = (WebKit::StorageAreaBase *)a2[1];
  v3 = a2 + 1;
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v3, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WebKit::StorageAreaBase *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WebKit::StorageAreaBase *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  WebKit::StorageAreaBase *v28;
  _QWORD *v29;
  uint64_t v30;
  WebKit::StorageAreaBase **v31;
  uint64_t v32;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v29 = v27 + 1;
          v28 = (WebKit::StorageAreaBase *)v27[1];
          v27[1] = 0;
          if (v28)
            std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v29, v28);
          *v27 = *v13;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (WebKit::StorageAreaBase **)(v30 + 8);
          *v31 = 0;
          *v29 = v32;
          v10 = *v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v31, v10);
          if (v13 == a3)
            v12 = v27;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(WebKit::StorageAreaBase **)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
            std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::MemoryStorageArea>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::MemoryStorageArea>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _OWORD *result;
  void **v13;
  _OWORD *v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (void **)v6;
    do
    {
      v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(*a1, (uint64_t)v10);
        *v14 = *(_OWORD *)v13;
        if (v13 == a3)
          v11 = v14;
      }
      v13 += 2;
      --v7;
    }
    while (v7);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  return a1 + 16 * v8;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

char *IPC::Connection::send<Messages::StorageAreaMap::ClearCache>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  char *result;
  unint64_t v24;
  size_t v25;
  void *v26;
  IPC::Encoder *v27;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1459;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v27 = (IPC::Encoder *)v10;
  v11 = *a2;
  v12 = *(_QWORD *)(v10 + 544);
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 8;
  v15 = *(_QWORD *)(v10 + 552);
  if (v15 < v13 + 8)
  {
    v24 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v14);
    result = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v16 = result;
    memcpy(result, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v26 = *(void **)(v10 + 528);
    if (v26 != (void *)(v10 + 16))
      munmap(v26, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v16;
    *(_QWORD *)(v10 + 552) = v25;
    v12 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v16 = *(char **)(v10 + 528);
  }
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(v10 + 544) = v14;
  v17 = (_QWORD *)(*(_QWORD *)(v10 + 528) + v13);
  *(_QWORD *)(v10 + 536) = v17 + 1;
  *v17 = v11;
  v19 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v27, a4, a5);
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v21, v22);
  }
  return (char *)v19;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 32));
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 8;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 8)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    return;
  }
  v11 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v7);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v9 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v12;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v15 = 0;
    v13 = 0;
    v16 = v7;
    do
    {
      v17 = (_QWORD *)(v6 + 16 * v15);
      if (*v17 != -1)
      {
        if (*v17)
        {
          v22 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, (_QWORD *)(v6 + 16 * v15));
          v23 = v6 + 16 * v15;
          v24 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              v27 = v22;
              WTF::fastFree((WTF *)v24, v10);
              v22 = v27;
            }
          }
          if (v17 == a3)
            v13 = v22;
        }
        else
        {
          v18 = v6 + 16 * v15;
          v19 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v10);
            }
          }
        }
      }
      ++v15;
    }
    while (v15 != v16);
    goto LABEL_23;
  }
  v13 = 0;
  result = 0;
  if (v6)
  {
LABEL_23:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (_QWORD *)(a1 + 16 * v9);
  v12 = (unsigned int *)v11[1];
  v11[1] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  *v11 = *a2;
  v15 = a2[1];
  a2[1] = 0;
  v11[1] = v15;
  return v11;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return 1;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  unsigned int *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(_QWORD *a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v4;
    v6 = *(_QWORD *)(v2 + 16 * v5);
    if (v6 == *a2)
      return v2 + 16 * v5;
    v8 = 1;
    while (v6)
    {
      v5 = ((_DWORD)v5 + v8) & v4;
      v6 = *(_QWORD *)(v2 + 16 * v5);
      ++v8;
      if (v6 == *a2)
        return v2 + 16 * v5;
    }
  }
  return 0;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _DNSServiceRef_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = 1;
  a2[1] = 0;
  a2[2] = -1;
  v3 = (_DNSServiceRef_t *)a2[4];
  a2[4] = 0;
  if (v3)
    DNSServiceRefDeallocate(v3);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v8 >> 1, 0);
  }
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DNSServiceRef_t *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  _DNSServiceRef_t *v27;
  _QWORD *v28;
  _DNSServiceRef_t *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _DNSServiceRef_t *v33;
  uint64_t result;
  int v36;
  __int16 v37;
  char v38;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 48);
    do
    {
      *(v11 - 4) = 0;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *v11 = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v5 + 48 * v12;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15)
          v16 = 0;
        else
          v16 = *(_OWORD *)v14 == 0;
        if (v16)
        {
          v19 = v5 + 48 * v12;
          v20 = *(_DNSServiceRef_t **)(v19 + 32);
          *(_QWORD *)(v19 + 32) = 0;
          if (v20)
            DNSServiceRefDeallocate(v20);
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v36 = -1640531527;
          v37 = 0;
          v38 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v36, (_QWORD *)(v5 + 48 * v12));
          v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36);
          v22 = 0;
          do
          {
            v23 = v21 & v18;
            v24 = v17 + 48 * (v21 & v18);
            v21 = ++v22 + (v21 & v18);
          }
          while (*(_OWORD *)v24 != 0 || *(_QWORD *)(v24 + 16) != 0);
          v26 = v17 + 48 * v23;
          v29 = *(_DNSServiceRef_t **)(v26 + 32);
          v28 = (_QWORD *)(v26 + 32);
          v27 = v29;
          *v28 = 0;
          if (v29)
            DNSServiceRefDeallocate(v27);
          v30 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v24 = *(_OWORD *)v14;
          *(_OWORD *)(v24 + 16) = v30;
          v31 = v5 + 48 * v12;
          v32 = *(_QWORD *)(v31 + 32);
          *(_QWORD *)(v31 + 32) = 0;
          *v28 = v32;
          v33 = *(_DNSServiceRef_t **)(v31 + 32);
          *(_QWORD *)(v31 + 32) = 0;
          if (v33)
            DNSServiceRefDeallocate(v33);
          if (v14 == a3)
            v13 = v24;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

_DWORD *WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(_DWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = a2[1];
  v3 = (v2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)v2) << 16) ^ (*result + (unsigned __int16)v2);
  LODWORD(v2) = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  LODWORD(v2) = v2 + (unsigned __int16)*a2 + (v2 >> 11);
  LODWORD(v2) = (*a2 >> 5) & 0x7FFF800 ^ ((_DWORD)v2 << 16) ^ v2;
  LODWORD(v2) = v2 + (unsigned __int16)WORD2(*a2) + (v2 >> 11);
  v4 = (*a2 >> 37) & 0x7FFF800 ^ ((_DWORD)v2 << 16) ^ v2;
  *result = v4 + (v4 >> 11);
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v3 = *result;
  if (*result)
    v3 += 48 * *(unsigned int *)(v3 - 4);
  if ((_QWORD *)v3 == a2)
  {
    v6[0] = 0;
    *a3 = 0;
    v6[1] = 0;
    a3[1] = 0;
    return (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, a2);
  }
  *a3 = a2[4];
  v4 = a2[5];
  a2[4] = 0;
  a2[5] = 0;
  a3[1] = v4;
  if (*result)
  {
    v5 = *result + 48 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v5 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v5 = 0;
  }
  if ((_QWORD *)v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(result, a2);
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *a2 = 1;
  a2[1] = 0;
  a2[2] = -1;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 4), a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v31;
  uint64_t result;
  int v34;
  __int16 v35;
  char v36;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 48);
    do
    {
      *(v11 - 4) = 0;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *v11 = 0;
      v11[1] = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v5 + 48 * v12;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15)
          v16 = 0;
        else
          v16 = *(_OWORD *)v14 == 0;
        if (v16)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 48 * v12 + 32, v9);
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v34 = -1640531527;
          v35 = 0;
          v36 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v34, (_QWORD *)(v5 + 48 * v12));
          v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          v21 = 0;
          do
          {
            v22 = v19 & v18;
            v23 = v17 + 48 * (v19 & v18);
            v19 = ++v21 + (v19 & v18);
          }
          while (*(_OWORD *)v23 != 0 || *(_QWORD *)(v23 + 16) != 0);
          v25 = v17 + 48 * v22;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25 + 32, v20);
          v26 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v23 = *(_OWORD *)v14;
          *(_OWORD *)(v23 + 16) = v26;
          v27 = v5 + 48 * v12;
          *(_QWORD *)(v25 + 32) = 0;
          *(_QWORD *)(v25 + 40) = 0;
          v28 = *(_QWORD *)(v27 + 32);
          v27 += 32;
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v25 + 32) = v28;
          v29 = *(_DWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 8) = 0;
          *(_DWORD *)(v25 + 40) = v29;
          v30 = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(v27 + 12) = 0;
          *(_DWORD *)(v25 + 44) = v30;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
          if (v14 == a3)
            v13 = v23;
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  BOOL v18;
  int v20;
  __int16 v21;
  char v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v20 = -1640531527;
  v21 = 0;
  v22 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v20, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = v6 & v5;
  result = (uint64_t *)(v2 + 48 * (v6 & v5));
  v12 = *result;
  v13 = result[1];
  v14 = v13 == v8 && v12 == v7;
  v15 = result[2];
  if (!v14 || v15 != v9)
  {
    v17 = 1;
    while (v12 | v13 || v15)
    {
      v10 = (v10 + v17) & v5;
      result = (uint64_t *)(v2 + 48 * v10);
      v12 = *result;
      v13 = result[1];
      v18 = v13 == v8 && v12 == v7;
      v15 = result[2];
      ++v17;
      if (v18 && v15 == v9)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::take(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  if (qword_1ECE72A60)
  {
    if ((_QWORD *)(qword_1ECE72A60 + 16 * *(unsigned int *)(qword_1ECE72A60 - 4)) != a2)
      goto LABEL_3;
LABEL_6:
    *result = 0;
    return result;
  }
  if (!a2)
    goto LABEL_6;
LABEL_3:
  *result = a2[1];
  *a2 = -1;
  a2[1] = 0;
  v2 = qword_1ECE72A60;
  ++*(_DWORD *)(qword_1ECE72A60 - 16);
  if (v2)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  if (qword_1ECE72A60)
  {
    v4 = *(_DWORD *)(qword_1ECE72A60 - 4);
    if (6 * *(_DWORD *)(qword_1ECE72A60 - 12) < v4 && v4 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t *result;

  v4 = qword_1ECE72A60;
  if (qword_1ECE72A60)
  {
    v5 = *(_DWORD *)(qword_1ECE72A60 - 4);
    v6 = *(_DWORD *)(qword_1ECE72A60 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72A60 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE72A60 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          if (qword_1ECE72A60)
            v15 = *(_DWORD *)(qword_1ECE72A60 - 8);
          else
            v15 = 0;
          v16 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(qword_1ECE72A60 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(qword_1ECE72A60 + 16 * v21);
          v24 = (WTF *)v23[1];
          v23[1] = 0;
          if (v24)
            std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v24, v8);
          *v23 = *v11;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v27 = *(WTF **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
            std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v27, v8);
          if (v11 == a2)
            v10 = v23;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
            std::default_delete<WebKit::PendingRegistrationRequest>::operator()[abi:sn180100](v14, v8);
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (!qword_1ECE72A60)
    return 0;
  v1 = *(_DWORD *)(qword_1ECE72A60 - 8);
  v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = v1 & ((v4 >> 31) ^ v4);
  v6 = *(_QWORD *)(qword_1ECE72A60 + 16 * v5);
  if (v6 == a1)
    return qword_1ECE72A60 + 16 * v5;
  v7 = 1;
  while (v6)
  {
    v5 = ((_DWORD)v5 + v7) & v1;
    v6 = *(_QWORD *)(qword_1ECE72A60 + 16 * v5);
    ++v7;
    if (v6 == a1)
      return qword_1ECE72A60 + 16 * v5;
  }
  return qword_1ECE72A60 + 16 * *(unsigned int *)(qword_1ECE72A60 - 4);
}

uint64_t WTF::tryMakeString<WTF::UUID,WTF::ASCIILiteral>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _QWORD v10[2];

  v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  v4 = a2[1];
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v8 = *a2;
  if (v6 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)v10, (uint64_t)&v8, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  BOOL v8;
  char v9;

  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(a1, (uint64_t)&v9);
  v7 = *(_DWORD *)(a2 + 8);
  if (((v7 | result) & 0x80000000) == 0)
  {
    v8 = __OFADD__((_DWORD)result, v7);
    result = (result + v7);
    if (!v8)
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, *(_DWORD **)a1, *(_QWORD *)(a1 + 8), *(_OWORD **)a2, *(_QWORD *)(a2 + 8), a3);
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::UUID,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  _DWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  _DWORD *v25;
  uint64_t v26;
  _BYTE **v27;
  _DWORD *v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v25;
        if (v25)
        {
          *v25 = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          v25 = a3;
          v26 = a4;
          v27 = (_BYTE **)&v28;
          v28 = v13 + 5;
          _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v25, &v27);
          result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((uint64_t)&v25, (uint64_t)&v28);
          if (a6)
          {
            result = (uint64_t)v13 + result + 20;
            if (a6 == 1)
              *(_BYTE *)result = *(_BYTE *)a5;
            else
              result = (uint64_t)memcpy((void *)result, a5, a6);
          }
        }
        goto LABEL_19;
      }
LABEL_10:
      v13 = 0;
      goto LABEL_19;
    }
LABEL_11:
    v13 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_10;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v25;
  if (v25)
  {
    *v25 = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    v25 = a3;
    v26 = a4;
    v27 = (_BYTE **)&v28;
    v28 = v13 + 5;
    _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v25, &v27);
    result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((uint64_t)&v25, (uint64_t)&v28);
    v14 = (char *)v13 + 2 * result + 20;
    v15 = &v14[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      v16 = &v14[2 * (a6 & 0xFFFFFFC0)];
      v17 = 0uLL;
      do
      {
        v29.val[0] = (int8x16_t)*a5;
        v18 = *((int8x16_t *)a5 + 1);
        v30.val[0] = (int8x16_t)a5[2];
        v19 = a5[3];
        a5 += 4;
        v20 = v19;
        v30.val[1] = 0uLL;
        v31.val[0] = v18;
        v29.val[1] = 0uLL;
        v21 = v14;
        vst2q_s8(v21, v29);
        v21 += 32;
        v31.val[1] = 0uLL;
        vst2q_s8(v21, v31);
        v22 = v14 + 64;
        vst2q_s8(v22, v30);
        v23 = v14 + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
        v14 += 128;
      }
      while (v14 != v16);
      v14 = v16;
    }
    while (v14 != v15)
    {
      v24 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)v14 = v24;
      v14 += 2;
    }
  }
LABEL_19:
  *a7 = v13;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<std::unique_ptr<_DNSServiceRef_t,WebKit::NetworkMDNSRegister::DNSServiceDeallocator>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE72A60 && (v2 = *(_DWORD *)(qword_1ECE72A60 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE72A60 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingRegistrationRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingRegistrationRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PendingRegistrationRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C7A88;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C7A88;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(v2 + 32);
  v4 = (uint64_t *)(v2 + 32);
  v3 = v5;
  if (v5
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4),
        (v3 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v1 + 24);
  v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v6 & ((v10 >> 31) ^ v10);
  v12 = (_QWORD *)(v3 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = v7;
    v12[1] = *(_QWORD *)(v1 + 32);
    v16 = *v4;
    if (*v4)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        return result;
    }
    else if (3 * v21 > 4 * v20)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4);
  }
  v14 = 0;
  v15 = 1;
  while (v13 != v7)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v6;
    v12 = (_QWORD *)(v3 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v7 = *(_QWORD *)(v1 + 24);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (*v10 + ~(*v10 << 32)) ^ ((*v10 + ~(*v10 << 32)) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v19 = *(_QWORD *)(v11 + 16 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C7AB0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C7AB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v2 + 32);
  result = (uint64_t *)(v2 + 32);
  v4 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_DWORD *)(v4 - 8);
    v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v4 + 16 * v11);
    if (v12 != v6)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v4 + 16 * v11);
        ++v13;
        if (v12 == v6)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v4 - 4))
    {
      *(_QWORD *)(v4 + 16 * v11) = -1;
      ++*(_DWORD *)(*result - 16);
      v14 = *result;
      v15 = *result ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *result;
      if (*result)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v18 >> 1);
      }
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  v5 = v4[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, **(const void ***)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
}

void IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  v5 = v4[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
}

BOOL WebKit::checkUsageDescriptionStringForSpeechRecognition(WebKit *this)
{
  uint64_t v1;
  void *v2;

  v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "infoDictionary"), "objectForKeyedSubscript:", CFSTR("NSSpeechRecognitionUsageDescription"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = (void *)v1;
  else
    v2 = 0;
  return objc_msgSend(v2, "length") != 0;
}

BOOL WebKit::applicationVisibleNameFromOrigin(WebKit *this, const WebCore::SecurityOriginData *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  WebKit *v5;
  const WTF::String *v6;

  v3 = (_QWORD *)WebCore::SecurityOriginData::protocol(this);
  if ((MEMORY[0x19AEABBCC](*v3, "http", 4) & 1) == 0)
  {
    v4 = (_QWORD *)WebCore::SecurityOriginData::protocol(this);
    if (!MEMORY[0x19AEABBCC](*v4, "https", 5))
      return 0;
  }
  v5 = (WebKit *)WebCore::SecurityOriginData::host(this);
  return WebKit::visibleDomain(v5, v6);
}

BOOL WebKit::visibleDomain(WebKit *this, const WTF::String *a2)
{
  const CString *v2;
  void *v3;
  WTF *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  CFTypeRef v11;
  const __CFString *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF *v15[2];
  CFTypeRef cf;
  WTF::StringImpl *v17;

  WTF::String::utf8();
  WTF::URLHelpers::userVisibleURL((WTF::URLHelpers *)v15, v2);
  v4 = v15[0];
  v15[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, v3);
    else
      --*(_DWORD *)v4;
  }
  if (!v17)
    goto LABEL_22;
  result = WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((_BOOL8)v17, (uint64_t)"www.", 4uLL);
  if (result)
  {
    if (v17 && (v6 = *((unsigned int *)v17 + 1), v6 >= 5))
    {
      v7 = *((_QWORD *)v17 + 1);
      v8 = (v6 - 4);
      v9 = v6 - 4;
      if ((*((_BYTE *)v17 + 16) & 4) != 0)
      {
        if (v9 >= v8)
        {
          v10 = (WTF *)(v7 + 4);
          v8 |= 0x100000000uLL;
          goto LABEL_12;
        }
LABEL_25:
        __break(1u);
        return result;
      }
      if (v9 < v8)
        goto LABEL_25;
      v10 = (WTF *)(v7 + 8);
    }
    else
    {
      v8 = 0x100000000;
      v10 = (WTF *)"";
    }
LABEL_12:
    v15[0] = v10;
    v15[1] = (WTF *)v8;
    WTF::StringView::createNSString((WTF::StringView *)v15);
    v11 = cf;
    cf = 0;
    v12 = (id)CFMakeCollectable(v11);
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
    goto LABEL_16;
  }
  if (v17)
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
LABEL_22:
    v12 = &stru_1E351F1B8;
LABEL_16:
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v14 -= 2;
  }
  return (BOOL)v12;
}

void sub_1971EF910(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, CFTypeRef cf, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::alertForPermission(WebKit::WebPageProxy *a1, const __CFString *a2, WebKit *a3, uint64_t *a4)
{
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::SecurityOriginData *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  WebKit *v16;
  const WTF::String *v17;
  __CFString *v18;
  WebKit *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  const __CFString *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  _QWORD v45[4];
  void *aBlock;
  _QWORD v47[4];
  void *v48;
  CFTypeRef cf;
  id v50;

  v6 = a2;
  if ((_DWORD)a2 == 3)
  {
    v7 = *((_QWORD *)a1 + 128);
    if (v7)
    {
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 16))(*((_QWORD *)a1 + 128));
      v9 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
LABEL_11:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  WebKit::WebPageProxy::cocoaView(a1, &cf);
  if (!cf)
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    goto LABEL_11;
  }
  v12 = WebKit::applicationVisibleNameFromOrigin(a3, v10);
  if (!v12)
    v12 = WebKit::applicationVisibleName(0);
  switch((int)v6)
  {
    case 0:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to use your camera?"), v11);
      v14 = v50;
      if (!v50)
        goto LABEL_52;
      goto LABEL_24;
    case 1:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to use your camera and microphone?"), v11);
      v14 = v50;
      if (v50)
        goto LABEL_24;
      goto LABEL_52;
    case 2:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to use your microphone?"), v11);
      v14 = v50;
      if (v50)
        goto LABEL_24;
      goto LABEL_52;
    case 3:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("“%@” Would Like to Access Motion and Orientation"), v11);
      v14 = v50;
      if (v50)
        goto LABEL_24;
      goto LABEL_52;
    case 4:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to use your current location?"), v11);
      v14 = v50;
      if (v50)
        goto LABEL_24;
      goto LABEL_52;
    case 5:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to capture your audio and use it for speech recognition?"), v11);
      if (v50)
      {
        CFAutorelease(v50);
        v15 = v50;
      }
      else
      {
        v15 = 0;
      }
      v16 = (WebKit *)WebCore::SecurityOriginData::host(a3);
      v12 = WebKit::visibleDomain(v16, v17);
      goto LABEL_25;
    case 6:
      v13 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to observe your screen?"), v11);
      v14 = v50;
      if (v50)
      {
LABEL_24:
        CFAutorelease(v14);
        v15 = v50;
      }
      else
      {
LABEL_52:
        v15 = 0;
      }
LABEL_25:
      v19 = (WebKit *)objc_msgSend(v13, "stringWithFormat:", v15, v12);
      if (v19)
      {
        switch((int)v6)
        {
          case 0:
          case 1:
          case 2:
            WebCore::localizedString((WebCore *)CFSTR("Allow (usermedia)"), v18);
            if (v50)
            {
              v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
              v21 = (WTF::StringImpl *)v50;
              v50 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v20);
                else
                  *(_DWORD *)v21 -= 2;
              }
            }
            else
            {
              v6 = &stru_1E351F1B8;
            }
            WebCore::localizedString((WebCore *)CFSTR("Don’t Allow (usermedia)"), (const __CFString *)v20);
            if (!v50)
              goto LABEL_74;
            goto LABEL_64;
          case 3:
            WebCore::localizedString((WebCore *)CFSTR("Allow (device motion and orientation access)"), v18);
            if (v50)
            {
              v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
              v25 = (WTF::StringImpl *)v50;
              v50 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v24);
                else
                  *(_DWORD *)v25 -= 2;
              }
            }
            else
            {
              v6 = &stru_1E351F1B8;
            }
            WebCore::localizedString((WebCore *)CFSTR("Cancel (device motion and orientation access)"), (const __CFString *)v24);
            if (v50)
              goto LABEL_64;
            goto LABEL_74;
          case 4:
            WebCore::localizedString((WebCore *)CFSTR("Allow (geolocation)"), v18);
            if (v50)
            {
              v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
              v27 = (WTF::StringImpl *)v50;
              v50 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v26);
                else
                  *(_DWORD *)v27 -= 2;
              }
            }
            else
            {
              v6 = &stru_1E351F1B8;
            }
            WebCore::localizedString((WebCore *)CFSTR("Don’t Allow (geolocation)"), (const __CFString *)v26);
            if (v50)
              goto LABEL_64;
            goto LABEL_74;
          case 5:
            WebCore::localizedString((WebCore *)CFSTR("Allow (speechrecognition)"), v18);
            if (v50)
            {
              v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
              v29 = (WTF::StringImpl *)v50;
              v50 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v28);
                else
                  *(_DWORD *)v29 -= 2;
              }
            }
            else
            {
              v6 = &stru_1E351F1B8;
            }
            WebCore::localizedString((WebCore *)CFSTR("Don’t Allow (speechrecognition)"), (const __CFString *)v28);
            if (v50)
              goto LABEL_64;
            goto LABEL_74;
          case 6:
            WebCore::localizedString((WebCore *)CFSTR("Allow (screensharing)"), v18);
            if (v50)
            {
              v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
              v30 = (WTF::StringImpl *)v50;
              v50 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v30 -= 2;
              }
            }
            else
            {
              v6 = &stru_1E351F1B8;
            }
            goto LABEL_63;
          default:
LABEL_63:
            WebCore::localizedString((WebCore *)CFSTR("Don’t Allow (screensharing)"), v18);
            if (v50)
            {
LABEL_64:
              v32 = (const __CFString *)WTF::StringImpl::operator NSString *();
              v33 = (WTF::StringImpl *)v50;
              v50 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v31);
                else
                  *(_DWORD *)v33 -= 2;
              }
            }
            else
            {
LABEL_74:
              v32 = &stru_1E351F1B8;
            }
            v34 = *a4;
            *a4 = 0;
            v35 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
            *v35 = MEMORY[0x1E0C809A0];
            v35[1] = 50331650;
            v35[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::{lambda(void *,BOOL)#1}::__invoke;
            v35[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::descriptor;
            v35[4] = v34;
            WebKit::createUIAlertController(v19, 0, &v50);
            v36 = (void *)MEMORY[0x1E0CEA2E0];
            v37 = MEMORY[0x1E0C809B0];
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 3321888768;
            v47[2] = ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke;
            v47[3] = &__block_descriptor_40_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__0_e23_v16__0__UIAlertAction_8l;
            v38 = _Block_copy(v35);
            v48 = _Block_copy(v38);
            v39 = objc_msgSend(v36, "actionWithTitle:style:handler:", v6, 0, v47);
            _Block_release(v38);
            v40 = (void *)MEMORY[0x1E0CEA2E0];
            v45[0] = v37;
            v45[1] = 3321888768;
            v45[2] = ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke_6;
            v45[3] = &__block_descriptor_40_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__1_e23_v16__0__UIAlertAction_8l;
            v41 = _Block_copy(v35);
            aBlock = _Block_copy(v41);
            v42 = objc_msgSend(v40, "actionWithTitle:style:handler:", v32, 1, v45);
            _Block_release(v41);
            objc_msgSend(v50, "addAction:", v42);
            objc_msgSend(v50, "addAction:", v39);
            v23 = cf;
            v43 = (void *)objc_msgSend((id)cf, "_wk_viewControllerForFullScreenPresentation");
            objc_msgSend(v43, "presentViewController:animated:completion:", v50, 1, 0);
            _Block_release(aBlock);
            _Block_release(v48);
            v44 = v50;
            v50 = 0;
            if (v44)
              CFRelease(v44);
            _Block_release(v35);
            if (v23)
              goto LABEL_71;
            return;
        }
      }
      break;
    default:
      break;
  }
  v22 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = cf;
  if (cf)
LABEL_71:
    CFRelease(v23);
}

void sub_1971F003C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,CFTypeRef cf)
{
  uint64_t v21;
  WTF::StringImpl *v23;

  v23 = *(WTF::StringImpl **)(v21 - 88);
  *(_QWORD *)(v21 - 88) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__0(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__0(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t ___ZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEE_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c150_ZTSKZN6WebKit18alertForPermissionERNS_12WebPageProxyENS_21MediaPermissionReasonERKN7WebCore18SecurityOriginDataEON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void WebKit::requestAVCaptureAccessForType(PAL *a1, uint64_t *a2)
{
  uint64_t AVFoundation_AVMediaTypeAudio;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if ((_DWORD)a1 == 1)
    AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio(a1);
  else
    AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeVideo(a1);
  v4 = AVFoundation_AVMediaTypeAudio;
  v5 = *a2;
  *a2 = 0;
  v6 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v6 = MEMORY[0x1E0C809A0];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v6[4] = v5;
  objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFD8])(), "requestAccessForMediaType:completionHandler:", v4, v6);
  _Block_release(v6);
}

void sub_1971F02D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::requestSpeechRecognitionAccess(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *a1;
  *a1 = 0;
  v2 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v2 = MEMORY[0x1E0C809A0];
  v2[1] = 50331650;
  v2[2] = WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,SFSpeechRecognizerAuthorizationStatus)#1}::__invoke;
  v2[3] = &WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v2[4] = v1;
  objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE068])(), "requestAuthorization:", v2);
  _Block_release(v2);
}

void sub_1971F0398(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::checkSpeechRecognitionServiceAvailability(WebKit *this, const WTF::String *a2)
{
  id v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  const void *v7;
  uint64_t v8;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v3 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE068])());
    v4 = (void *)MEMORY[0x1E0C99DC8];
    if (*(_QWORD *)this)
      v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v6 = (void *)objc_msgSend(v3, "initWithLocale:", objc_msgSend(v4, "localeWithLocaleIdentifier:", v5));
  }
  else
  {
    v6 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE068])()), "init");
  }
  v7 = v6;
  if (!v6)
    return 0;
  v8 = objc_msgSend(v6, "isAvailable");
  CFRelease(v7);
  return v8;
}

void sub_1971F0490(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ModelElementController::modelViewForModelIdentifier(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 224);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, a3))return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 184);
  if (!v7)
    return 0;
  if (*(_BYTE *)(v7 + 32))
    return 0;
  v9 = *(_QWORD *)(v7 + 72);
  v11[0] = a2;
  v11[1] = a3;
  if (!a2)
    return 0;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v9 + 16), v11);
  if (result)
  {
    v10 = *(_QWORD *)(result + 48);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return v10;
    else
      return 0;
  }
  return result;
}

void *WebKit::ModelElementController::takeModelElementFullscreen(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, WTF::URL *a4)
{
  void *result;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  CFTypeRef v21;
  _QWORD v22[7];
  _QWORD v23[2];
  CFTypeRef cf;

  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) + 488))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104));
  if (result)
  {
    v9 = result;
    result = (void *)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3);
    if (result)
    {
      v10 = result;
      objc_msgSend(result, "frame");
      objc_msgSend(v10, "convertRect:toView:", 0);
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v19 = (void *)objc_msgSend(v10, "preview");
      objc_msgSend(v19, "setCanonicalWebPageURL:", WTF::URL::operator NSURL *());
      v23[0] = WTF::URL::fragmentIdentifier(a4);
      v23[1] = v20;
      WTF::StringView::createNSString((WTF::StringView *)v23);
      objc_msgSend(v19, "setUrlFragment:", cf);
      v21 = cf;
      cf = 0;
      if (v21)
        CFRelease(v21);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke;
      v22[3] = &unk_1E34C7BA8;
      v22[4] = v9;
      v22[5] = v10;
      v22[6] = v19;
      return (void *)objc_msgSend(v19, "createFullscreenInstanceWithInitialFrame:previewOptions:completionHandler:", &unk_1E356F820, v22, v12, v14, v16, v18);
    }
  }
  return result;
}

void sub_1971F06D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD block[5];
  __int128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    objc_msgSend(a3, "invalidate");
  }
  else
  {
    v11 = v4;
    v12 = v5;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_2;
    block[3] = &unk_1E34C7B80;
    block[4] = a2;
    v8 = *(_OWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
    v9 = a3;
    v10 = v6;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[6];
  _QWORD v9[4];
  __int128 v10;

  objc_msgSend(*(id *)(a1 + 32), "setModalPresentationStyle:", 5);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "view"), "setBackgroundColor:", objc_msgSend(MEMORY[0x1E0CEA478], "clearColor"));
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_3;
  v9[3] = &unk_1E34C8CA8;
  v10 = *(_OWORD *)(a1 + 48);
  objc_msgSend(v2, "presentViewController:animated:completion:", v3, 0, v9);
  v5 = *(void **)(a1 + 64);
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_4;
  v8[3] = &unk_1E34C7B58;
  v6 = *(_QWORD *)(a1 + 32);
  v8[4] = *(_QWORD *)(a1 + 48);
  v8[5] = v6;
  return objc_msgSend(v5, "observeDismissFullscreenWithCompletionHandler:", v8);
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_3(uint64_t a1)
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "layer"), "superlayer"), "context"), "addFence:", *(_QWORD *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  return objc_msgSend(*(id *)(a1 + 40), "invalidate");
}

void ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[6];
  __int128 v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_5;
  v4[3] = &unk_1E34C7B30;
  v4[4] = a4;
  v4[5] = a2;
  v5 = *(_OWORD *)(a1 + 32);
  dispatch_async(MEMORY[0x1E0C80D38], v4);
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_5(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[5];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  if (v3 || !v2)
    return objc_msgSend(v2, "invalidate");
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "layer"), "superlayer"), "context"), "addFence:", *(_QWORD *)(a1 + 40));
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_6;
  v5[3] = &unk_1E34BAF80;
  v5[4] = *(_QWORD *)(a1 + 56);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setCompletionBlock:", v5);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  return objc_msgSend(*(id *)(a1 + 40), "invalidate");
}

uint64_t ___ZN6WebKit22ModelElementController26takeModelElementFullscreenENS_15ModelIdentifierERKN3WTF3URLE_block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 0, 0);
}

void WebKit::ModelElementController::getCameraForModelElement(unsigned int *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  CFTypeRef cf;
  char v29;
  _BYTE v30[80];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier((uint64_t)a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
    v7 = *(unsigned int **)a1;
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v9 = *a4;
    *a4 = 0;
    v10 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v10 = MEMORY[0x1E0C809A0];
    v10[1] = 50331650;
    v10[2] = _ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_ENUlPvS1_S3_E_8__invokeESN_S1_S3_;
    v10[3] = &_ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_E10descriptor;
    v10[4] = v7;
    v10[5] = v9;
    objc_msgSend(v6, "getCameraTransform:", v10);
    _Block_release(v10);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v20, 1);
    v23 = 0;
    v24 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v25, (uint64_t *)&v20);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v30, (uint64_t *)&v25);
    v31 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v30);
    if (v31 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C88D8[v31])(&v29, v30);
    v31 = -1;
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    v13 = v27;
    v27 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v26;
    v26 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v25;
    v25 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v23;
    v23 = 0;
    if (v16)
      CFRelease(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v11);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
}

void sub_1971F0C50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,CFTypeRef cf)
{
  uint64_t v28;
  uint64_t v30;

  v30 = *(unsigned int *)(v28 - 64);
  if ((_DWORD)v30 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C88D8[v30])(v28 - 145, v28 - 144);
  *(_DWORD *)(v28 - 64) = -1;
  if (cf)
    CFRelease(cf);
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a18)
    CFRelease(a18);
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  _BYTE v5[80];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(&v3, (uint64_t)v5);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C88D8[v6])(&v4, v5);
  v6 = -1;
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1971F0EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34C88D8[a24])(&a13, &a14);
  a24 = -1;
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setCameraForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, float64_t a5, float64_t a6)
{
  void *v7;
  float64x2_t v8;
  uint64_t v9;

  v7 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8.f64[0] = a5;
    v8.f64[1] = a6;
    objc_msgSend(v7, "setCameraTransform:", COERCE_DOUBLE(vcvt_f32_f64(v8)));
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 1);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1971F0FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ModelElementController::isPlayingAnimationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[80];
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;
  _BYTE v26[80];
  int v27;
  char v28;

  v5 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15[0] = objc_msgSend(v5, "isPlaying");
    v16 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C8958[v16])(&v22, v15);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    v20 = 0;
    v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C8958[v27])(&v28, v26);
    v27 = -1;
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v20;
    v20 = 0;
    if (v12)
      CFRelease(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971F11D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v39;
  uint64_t v41;

  v41 = *(unsigned int *)(v39 - 48);
  if ((_DWORD)v41 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C8958[v41])(v39 - 33, v39 - 128);
  *(_DWORD *)(v39 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
      WTF::StringImpl::destroy(a37, a2);
    else
      *(_DWORD *)a37 -= 2;
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a29)
    CFRelease(a29);
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[80];
  int v4;
  uint64_t v5;
  char v6;

  v5 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v3, a2);
  WTF::Function<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(&v5, (uint64_t)v3);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C8958[v4])(&v6, v3);
  v4 = -1;
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1971F13D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  uint64_t v20;
  uint64_t v22;

  if (a20 != -1)
    ((void (*)(uint64_t, char *))off_1E34C8958[a20])(v20 - 17, &a10);
  a20 = -1;
  v22 = *(_QWORD *)(v20 - 32);
  *(_QWORD *)(v20 - 32) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(exception_object);
}

void WebKit::ModelElementController::setAnimationIsPlayingForModelElement(unsigned int *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v8 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier((uint64_t)a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
    v9 = *(unsigned int **)a1;
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = *a5;
    *a5 = 0;
    v12 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v12[4] = v9;
    v12[5] = v11;
    objc_msgSend(v8, "setIsPlaying:reply:", a4, v12);
    _Block_release(v12);
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void sub_1971F1544(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ModelElementController::isLoopingAnimationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[80];
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;
  _BYTE v26[80];
  int v27;
  char v28;

  v5 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15[0] = objc_msgSend(v5, "isLooping");
    v16 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C8958[v16])(&v22, v15);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    v20 = 0;
    v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C8958[v27])(&v28, v26);
    v27 = -1;
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v20;
    v20 = 0;
    if (v12)
      CFRelease(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971F17B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v39;
  uint64_t v41;

  v41 = *(unsigned int *)(v39 - 48);
  if ((_DWORD)v41 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C8958[v41])(v39 - 33, v39 - 128);
  *(_DWORD *)(v39 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
      WTF::StringImpl::destroy(a37, a2);
    else
      *(_DWORD *)a37 -= 2;
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a29)
    CFRelease(a29);
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setIsLoopingAnimationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  void *v7;
  uint64_t v8;

  v7 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v7, "setIsLooping:", a4);
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
  }
  else
  {
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1971F19C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ModelElementController::animationDurationForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef cf;
  char v25;
  _QWORD v26[10];
  int v27;
  _BYTE v28[80];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "duration");
    v26[0] = v6;
    v27 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E34C89B0[v27])(&v21, v26);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v16, 1);
    v19 = 0;
    v20 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v21, (uint64_t *)&v16);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v28, (uint64_t *)&v21);
    v29 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v28);
    if (v29 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C89B0[v29])(&v25, v28);
    v29 = -1;
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v19;
    v19 = 0;
    if (v13)
      CFRelease(v13);
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971F1C08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v43;
  uint64_t v45;

  v45 = *(unsigned int *)(v43 - 48);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, uint64_t))off_1E34C89B0[v45])(&a32, v43 - 128);
  *(_DWORD *)(v43 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a17)
    CFRelease(a17);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  _BYTE v5[80];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  *a1 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(&v3, (uint64_t)v5);
  if (v6 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C89B0[v6])(&v4, v5);
  v6 = -1;
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1971F1E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34C89B0[a24])(&a13, &a14);
  a24 = -1;
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::ModelElementController::animationCurrentTimeForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v5;
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef cf;
  char v25;
  _QWORD v26[10];
  int v27;
  _BYTE v28[80];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "currentTime");
    v26[0] = v6;
    v27 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E34C89B0[v27])(&v21, v26);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v16, 1);
    v19 = 0;
    v20 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v21, (uint64_t *)&v16);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v28, (uint64_t *)&v21);
    v29 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v28);
    if (v29 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C89B0[v29])(&v25, v28);
    v29 = -1;
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v19;
    v19 = 0;
    if (v13)
      CFRelease(v13);
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971F20B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v43;
  uint64_t v45;

  v45 = *(unsigned int *)(v43 - 48);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, uint64_t))off_1E34C89B0[v45])(&a32, v43 - 128);
  *(_DWORD *)(v43 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a17)
    CFRelease(a17);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setAnimationCurrentTimeForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, double a5)
{
  void *v7;
  uint64_t v8;

  v7 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v7, "setCurrentTime:", a5);
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
  }
  else
  {
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1971F22CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::ModelElementController::hasAudioForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[80];
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;
  _BYTE v26[80];
  int v27;
  char v28;

  v5 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15[0] = objc_msgSend(v5, "hasAudio");
    v16 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C8958[v16])(&v22, v15);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    v20 = 0;
    v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C8958[v27])(&v28, v26);
    v27 = -1;
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v20;
    v20 = 0;
    if (v12)
      CFRelease(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971F24E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v39;
  uint64_t v41;

  v41 = *(unsigned int *)(v39 - 48);
  if ((_DWORD)v41 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C8958[v41])(v39 - 33, v39 - 128);
  *(_DWORD *)(v39 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
      WTF::StringImpl::destroy(a37, a2);
    else
      *(_DWORD *)a37 -= 2;
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a29)
    CFRelease(a29);
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::ModelElementController::isMutedForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  void *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[80];
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;
  _BYTE v26[80];
  int v27;
  char v28;

  v5 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15[0] = objc_msgSend(v5, "isMuted");
    v16 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v15);
    if (v16 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C8958[v16])(&v22, v15);
  }
  else
  {
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v17, 1);
    v20 = 0;
    v21 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v22, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v26, (uint64_t *)&v22);
    v27 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a4, (uint64_t)v26);
    if (v27 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C8958[v27])(&v28, v26);
    v27 = -1;
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v20;
    v20 = 0;
    if (v12)
      CFRelease(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v7);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971F2858(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,CFTypeRef a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,CFTypeRef cf)
{
  uint64_t v39;
  uint64_t v41;

  v41 = *(unsigned int *)(v39 - 48);
  if ((_DWORD)v41 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C8958[v41])(v39 - 33, v39 - 128);
  *(_DWORD *)(v39 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
      WTF::StringImpl::destroy(a37, a2);
    else
      *(_DWORD *)a37 -= 2;
  }
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a29)
    CFRelease(a29);
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ModelElementController::setIsMutedForModelElement(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  void *v7;
  uint64_t v8;

  v7 = (void *)objc_msgSend((id)WebKit::ModelElementController::modelViewForModelIdentifier(a1, a2, a3), "preview");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v7, "setIsMuted:", a4);
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
  }
  else
  {
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1971F2A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::initWKMarketplaceKit(WebKit *this)
{
  if (_MergedGlobals_76 != -1)
    dispatch_once(&_MergedGlobals_76, &__block_literal_global_24);
  return qword_1ECE72A70;
}

uint64_t WebKit::NavigationState::releaseNetworkActivityAfterLoadCompletion(WebKit::NavigationState *this)
{
  return WebKit::NavigationState::releaseNetworkActivity((uint64_t)this, 0);
}

uint64_t WebKit::NavigationState::fromWebPage(WebKit::NavigationState *this, WebKit::WebPageProxy *a2)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;

  {
    WebKit::navigationStates(void)::navigationStates = 0;
    *(_QWORD *)&dword_1ECE736B0 = 0;
  }
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::get((unsigned int **)&WebKit::navigationStates(void)::navigationStates, (uint64_t)this, (unsigned int **)&v8);
  v3 = (unsigned int *)v8;
  if (!v8)
    return 0;
  v4 = *((_QWORD *)v8 + 1);
  v8 = 0;
  do
  {
    v5 = __ldaxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

unsigned int **WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::get@<X0>(unsigned int **result@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v3;

  ++*((_DWORD *)result + 2);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 && *(_QWORD *)(v3 + 8))
    return WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(result, v3, a3);
  *a3 = 0;
  return result;
}

id WebKit::NavigationState::navigationDelegate@<X0>(id *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_loadWeakRetained(this + 3);
  *a2 = result;
  return result;
}

id WebKit::NavigationState::historyDelegate@<X0>(id *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_loadWeakRetained(this + 5);
  *a2 = result;
  return result;
}

void WebKit::NavigationState::navigationGestureDidBegin(id *this)
{
  id WeakRetained;
  void *v3;
  id v4;

  if ((*((_WORD *)this + 19) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v3 = WeakRetained;
      v4 = objc_loadWeakRetained(this + 2);
      objc_msgSend(v3, "_webViewDidBeginNavigationGesture:", v4);
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void sub_1971F2C64(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::navigationGestureWillEnd(id *this, int a2, WebKit::WebBackForwardListItem *a3)
{
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;

  if ((*((_WORD *)this + 19) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v7 = WeakRetained;
      v8 = objc_loadWeakRetained(this + 2);
      if (a2)
        v9 = *((_QWORD *)a3 + 1);
      else
        v9 = 0;
      objc_msgSend(v7, "_webViewWillEndNavigationGesture:withNavigationToBackForwardListItem:", v8, v9);
      if (v8)
        CFRelease(v8);
      CFRelease(v7);
    }
  }
}

void sub_1971F2D14(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::navigationGestureDidEnd(id *this, int a2, WebKit::WebBackForwardListItem *a3)
{
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;

  if ((*((_WORD *)this + 19) & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v7 = WeakRetained;
      v8 = objc_loadWeakRetained(this + 2);
      if (a2)
        v9 = *((_QWORD *)a3 + 1);
      else
        v9 = 0;
      objc_msgSend(v7, "_webViewDidEndNavigationGesture:withNavigationToBackForwardListItem:", v8, v9);
      if (v8)
        CFRelease(v8);
      CFRelease(v7);
    }
  }
}

void sub_1971F2DC4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::willRecordNavigationSnapshot(id *this, WebKit::WebBackForwardListItem *a2)
{
  id WeakRetained;
  void *v5;
  id v6;

  if ((*((_WORD *)this + 19) & 8) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v5 = WeakRetained;
      v6 = objc_loadWeakRetained(this + 2);
      objc_msgSend(v5, "_webView:willSnapshotBackForwardListItem:", v6, *((_QWORD *)a2 + 1));
      if (v6)
        CFRelease(v6);
      CFRelease(v5);
    }
  }
}

void sub_1971F2E68(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::navigationGestureSnapshotWasRemoved(id *this)
{
  id WeakRetained;
  void *v3;
  id v4;

  if ((*((_WORD *)this + 19) & 0x10) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v3 = WeakRetained;
      v4 = objc_loadWeakRetained(this + 2);
      objc_msgSend(v3, "_webViewDidRemoveNavigationGestureSnapshot:", v4);
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void sub_1971F2F04(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didRequestPasswordForQuickLookDocument(id *this)
{
  id WeakRetained;
  void *v3;
  id v4;

  if ((*((_WORD *)this + 19) & 0x200) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v3 = WeakRetained;
      v4 = objc_loadWeakRetained(this + 2);
      objc_msgSend(v3, "_webViewDidRequestPasswordForQuickLookDocument:", v4);
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void sub_1971F2FA0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didStopRequestingPasswordForQuickLookDocument(id *this)
{
  id WeakRetained;
  void *v3;
  id v4;

  if ((*((_WORD *)this + 19) & 0x400) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v3 = WeakRetained;
      v4 = objc_loadWeakRetained(this + 2);
      objc_msgSend(v3, "_webViewDidStopRequestingPasswordForQuickLookDocument:", v4);
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void sub_1971F303C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::didFirstPaint(id *this)
{
  id WeakRetained;
  void *v3;
  id v4;

  if (((_DWORD)this[4] & 0x4000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 3);
    if (WeakRetained)
    {
      v3 = WeakRetained;
      v4 = objc_loadWeakRetained(this + 2);
      objc_msgSend(v3, "_webView:renderingProgressDidChange:", v4, 64);
      if (v4)
        CFRelease(v4);
      CFRelease(v3);
    }
  }
}

void sub_1971F30E4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NavigationState::NavigationClient::willGoToBackForwardListItem(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WebKit::WebBackForwardListItem *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v10;
  uint64_t v11;
  id WeakRetained;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || (*(_WORD *)(v5 + 38) & 0x800) == 0)
    return 0;
  result = (uint64_t)objc_loadWeakRetained((id *)(v5 + 24));
  if (result)
  {
    v10 = (void *)result;
    v11 = *((_QWORD *)this + 1);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v11 + 16));
    objc_msgSend(v10, "_webView:willGoToBackForwardListItem:inPageCache:", WeakRetained, *((_QWORD *)a3 + 1), a4);
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v10);
    return 1;
  }
  return result;
}

void sub_1971F31FC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  BOOL v9;
  API::WebsitePolicies *v10;
  API::WebsitePolicies *v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v15;
  uint64_t v16;
  int v17;
  char **v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  API::WebsitePolicies *v22;
  API::WebsitePolicies *v23;
  uint64_t v24;
  uint64_t v25;
  API::WebsitePolicies *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  API::WebsitePolicies *v40;

  v8 = *(_QWORD *)(*a3 + 24);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 0;
  else
    v9 = 0;
  v10 = API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(*(_QWORD *)(a2 + 48) + 56));
  API::WebsitePolicies::copy(v10, &v40);
  v11 = v40;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 8)) == 0 || (*(_DWORD *)(v13 + 32) & 7) == 0)
  {
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v20 = *a4;
    *a4 = 0;
    v21 = *a3;
    CFRetain(*(CFTypeRef *)(*a3 + 8));
    if (v11)
      CFRetain(*((CFTypeRef *)v11 + 1));
    v22 = (API::WebsitePolicies *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v22 = &off_1E34C8C88;
    *((_QWORD *)v22 + 1) = a2;
    *((_QWORD *)v22 + 2) = v20;
    *((_QWORD *)v22 + 3) = v21;
    *((_QWORD *)v22 + 4) = v11;
    v40 = v22;
    WebKit::tryInterceptNavigation(a3, a2, (const WTF::StringImpl *)&v40);
    v23 = v40;
    v40 = 0;
    if (v23)
      (*(void (**)(API::WebsitePolicies *))(*(_QWORD *)v23 + 8))(v23);
LABEL_16:
    if (!v11)
      return;
    goto LABEL_17;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v13 + 24));
  v15 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_16;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(_DWORD *)(*(_QWORD *)(v16 + 8) + 32);
    if ((v17 & 2) == 0)
    {
      if ((v17 & 4) == 0)
      {
        v18 = &selRef_webView_decidePolicyForNavigationAction_decisionHandler_;
        v19 = 1;
        goto LABEL_22;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_DWORD *)(MEMORY[8] + 32) & 2) == 0)
  {
LABEL_20:
    v19 = 0;
    v18 = &selRef__webView_decidePolicyForNavigationAction_preferences_userInfo_decisionHandler_;
    goto LABEL_22;
  }
  v19 = 0;
  v18 = &selRef_webView_decidePolicyForNavigationAction_preferences_decisionHandler_;
LABEL_22:
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)*v18, (uint64_t *)&v40);
  v24 = *a4;
  *a4 = 0;
  v25 = *a3;
  CFRetain(*(CFTypeRef *)(*a3 + 8));
  v26 = v40;
  v40 = 0;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  if (v11)
    CFRetain(*((CFTypeRef *)v11 + 1));
  v27 = *(_QWORD *)(a1 + 8);
  if ((v19 & 1) != 0)
  {
    if (v27)
      v27 = *(_QWORD *)(v27 + 8);
    v28 = objc_loadWeakRetained((id *)(v27 + 16));
    v29 = *(_QWORD *)(*a3 + 8);
    v30 = malloc_type_malloc(0x50uLL, 0x10E0040B7C787CEuLL);
    *v30 = MEMORY[0x1E0C809A0];
    v30[1] = 50331650;
    v30[2] = WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::{lambda(void *,WKNavigationActionPolicy)#1}::__invoke;
    v30[3] = &WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::descriptor;
    v30[4] = v24;
    v30[5] = v25;
    v30[6] = v26;
    v30[7] = a2;
    *((_BYTE *)v30 + 64) = v9;
    v30[9] = v11;
    -[WebKit::CompletionHandlerCallChecker webView:decidePolicyForNavigationAction:decisionHandler:](v15, "webView:decidePolicyForNavigationAction:decisionHandler:", v28, v29, v30);
  }
  else
  {
    v39 = v24;
    if (v27)
    {
      v27 = *(_QWORD *)(v27 + 8);
      v31 = *(_DWORD *)(v27 + 32);
    }
    else
    {
      LOBYTE(v31) = MEMORY[0x20];
    }
    v32 = (id *)(v27 + 16);
    if ((v31 & 2) != 0)
    {
      v28 = objc_loadWeakRetained(v32);
      v35 = *a3;
      if (v11)
        v36 = *((_QWORD *)v11 + 1);
      else
        v36 = 0;
      v38 = *(_QWORD *)(v35 + 8);
      v30 = malloc_type_malloc(0x50uLL, 0x10E0040B7C787CEuLL);
      *v30 = MEMORY[0x1E0C809A0];
      v30[1] = 50331650;
      v30[2] = WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void *,WKNavigationActionPolicy,WKWebpagePreferences *)#1}::__invoke;
      v30[3] = &WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::descriptor;
      v30[4] = v39;
      v30[5] = v25;
      v30[6] = v26;
      v30[7] = a2;
      *((_BYTE *)v30 + 64) = v9;
      v30[9] = v11;
      -[WebKit::CompletionHandlerCallChecker webView:decidePolicyForNavigationAction:preferences:decisionHandler:](v15, "webView:decidePolicyForNavigationAction:preferences:decisionHandler:", v28, v38, v36, v30);
    }
    else
    {
      v28 = objc_loadWeakRetained(v32);
      v33 = *a3;
      if (v11)
        v34 = *((_QWORD *)v11 + 1);
      else
        v34 = 0;
      v37 = *(_QWORD *)(v33 + 8);
      v30 = malloc_type_malloc(0x50uLL, 0x10E0040B7C787CEuLL);
      *v30 = MEMORY[0x1E0C809A0];
      v30[1] = 50331650;
      v30[2] = WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void *,WKNavigationActionPolicy,WKWebpagePreferences *)#1}::__invoke;
      v30[3] = &WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::descriptor;
      v30[4] = v39;
      v30[5] = v25;
      v30[6] = v26;
      v30[7] = a2;
      *((_BYTE *)v30 + 64) = v9;
      v30[9] = v11;
      -[WebKit::CompletionHandlerCallChecker _webView:decidePolicyForNavigationAction:preferences:userInfo:decisionHandler:](v15, "_webView:decidePolicyForNavigationAction:preferences:userInfo:decisionHandler:", v28, v37, v34, 0, v30);
    }
  }
  _Block_release(v30);
  if (v28)
    CFRelease(v28);
  if (v40)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v40);
  CFRelease(v15);
  if (v11)
LABEL_17:
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void sub_1971F3620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;

  _Block_release(v12);
  if (v11)
    CFRelease(v11);
  if (a10)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  CFRelease(v10);
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  _Unwind_Resume(a1);
}

void WebKit::tryInterceptNavigation(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WebKit *v6;
  const WTF::URL *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  const void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  CFTypeRef v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _QWORD v35[5];
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _BYTE v38[152];
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  char v43;
  CFTypeRef cf;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;

  v6 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a1 + 40));
  if (WebKit::isMarketplaceKitURL(v6, v7))
  {
    WebKit::interceptMarketplaceKitNavigation(a1, a2);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, 1);
  }
  else
  {
    v8 = *a1;
    if (*(_BYTE *)(*a1 + 280) && *(_BYTE *)(v8 + 369) == 2)
    {
      v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 40));
      v10 = *(WTF::StringImpl **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v10 += 2;
      v45 = v10;
      v11 = *(_OWORD *)(v9 + 24);
      v46 = *(_OWORD *)(v9 + 8);
      v47 = v11;
      v12 = *a1;
      WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v38, (const WebCore::ResourceRequestBase::RequestData *)(*a1 + 40));
      v13 = *(_DWORD **)(v12 + 192);
      if (v13)
        *v13 += 2;
      v39 = v13;
      v14 = *(_DWORD **)(v12 + 200);
      if (v14)
        *v14 += 2;
      v40 = v14;
      v15 = *(_DWORD **)(v12 + 208);
      if (v15)
        ++*v15;
      v16 = *(_QWORD *)(v12 + 216);
      v41 = v15;
      v42 = v16;
      v43 = *(_BYTE *)(v12 + 224);
      v17 = *(const void **)(v12 + 232);
      cf = v17;
      if (v17)
        CFRetain(v17);
      WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString((WebCore::ResourceRequestBase *)v38);
      WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)v38);
      if (v37 && *((_DWORD *)v37 + 1))
      {
        WTF::URL::URL((uint64_t)&v36, &v37);
        v19 = WTF::URL::operator NSURL *();
        v20 = v36;
        v36 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      else
      {
        v19 = 0;
      }
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      v22 = *a1;
      *a1 = 0;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
      v23 = *(unsigned int **)(a2 + 24);
      if (v23)
      {
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
      }
      v25 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v26 = &off_1E34C8A40;
      v26[1] = v22;
      v26[2] = v23;
      v26[3] = v25;
      *v21 = v26;
      v27 = objc_alloc_init(MEMORY[0x1E0CA5938]);
      objc_msgSend(v27, "setReferrerURL:", v19);
      v28 = (void *)MEMORY[0x1E0CA5838];
      v29 = WTF::URL::operator NSURL *();
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3321888768;
      v35[2] = ___ZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEE_block_invoke;
      v35[3] = &__block_descriptor_40_e8_32c179_ZTSKZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEEE3__1_e20_v20__0B8__NSError_12l;
      v35[4] = v21;
      objc_msgSend(v28, "openWithURL:configuration:completionHandler:", v29, v27, v35);
      if (v27)
        CFRelease(v27);
      v31 = v37;
      v37 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = cf;
      cf = 0;
      if (v32)
        CFRelease(v32);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v38);
      v34 = v45;
      v45 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v33);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    else
    {
      WebKit::trySOAuthorization(a1, (WebKit::WebsiteDataStore **)a2, a3);
    }
  }
}

void sub_1971F3AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf)
{
  uint64_t v45;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a21);
  v48 = *(WTF::StringImpl **)(v45 - 104);
  *(_QWORD *)(v45 - 104) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::contentRuleListNotification(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  const __CFString *v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  id WeakRetained;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  const __CFString *v31;
  int *v32;
  uint64_t v33;
  char v34;
  id cf;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return;
  v9 = a2[30];
  if (!v9)
  {
    v10 = a2[31];
    if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
    {
LABEL_9:
      v4 = *(_QWORD *)(v4 + 8);
      if ((*(_WORD *)(v4 + 38) & 0x60) == 0)
        return;
      goto LABEL_10;
    }
    v9 = v11 - 16;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
  WebKit::WebExtensionController::handleContentRuleListNotification(v9, *(_QWORD *)(a2[4] + 744), a3, a4);
  CFRelease(*(CFTypeRef *)(v9 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    goto LABEL_9;
LABEL_10:
  cf = objc_loadWeakRetained((id *)(v4 + 24));
  if (!cf)
    return;
  v12 = *(unsigned int *)(a4 + 52);
  if (!(_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v34 = 1;
    goto LABEL_41;
  }
  v13 = 0;
  v14 = 0;
  v15 = a4;
  v16 = *(_QWORD *)(a4 + 40);
  v17 = v16 + 32 * v12;
  do
  {
    v18 = *(unsigned int *)(v16 + 28);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD **)(v16 + 16);
      for (i = 8 * v18; i; i -= 8)
      {
        if (v14)
        {
          if (!v13)
            goto LABEL_19;
        }
        else
        {
          v14 = (void *)objc_opt_new();
          if (!v13)
LABEL_19:
            v13 = (void *)objc_opt_new();
        }
        if (*(_QWORD *)v16)
          v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v21 = &stru_1E351F1B8;
        objc_msgSend(v14, "addObject:", v21);
        if (*v19)
          v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v22 = &stru_1E351F1B8;
        objc_msgSend(v13, "addObject:", v22);
        ++v19;
      }
    }
    v16 += 32;
  }
  while (v16 != v17);
  if (v13)
  {
    v23 = *(_QWORD *)(a1 + 8);
    a4 = v15;
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if ((*(_WORD *)(v24 + 38) & 0x20) == 0)
        goto LABEL_40;
    }
    else
    {
      if ((MEMORY[0x26] & 0x20) == 0)
        goto LABEL_40;
      v24 = 0;
    }
    WeakRetained = objc_loadWeakRetained((id *)(v24 + 16));
    objc_msgSend(cf, "_webView:URL:contentRuleListIdentifiers:notifications:", WeakRetained, WTF::URL::operator NSURL *(), v14, v13);
    if (WeakRetained)
      CFRelease(WeakRetained);
LABEL_40:
    v34 = 0;
  }
  else
  {
    v34 = 1;
    a4 = v15;
  }
LABEL_41:
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 38) & 0x40) != 0)
  {
    v26 = *(unsigned int *)(a4 + 52);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD **)(a4 + 40);
      v28 = &v27[4 * v26];
      do
      {
        v29 = *(_QWORD *)(a1 + 8);
        if (v29)
          v29 = *(_QWORD *)(v29 + 8);
        v30 = objc_loadWeakRetained((id *)(v29 + 16));
        if (*v27)
          v31 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v31 = &stru_1E351F1B8;
        v32 = (int *)(v27 + 1);
        API::ContentRuleListAction::create(v32, &v36);
        v33 = v36;
        objc_msgSend(cf, "_webView:contentRuleListWithIdentifier:performedAction:forURL:", v30, v31, *(_QWORD *)(v36 + 8), WTF::URL::operator NSURL *());
        CFRelease(*(CFTypeRef *)(v33 + 8));
        if (v30)
          CFRelease(v30);
        v27 = v32 + 6;
      }
      while (v27 != v28);
    }
  }
  if ((v34 & 1) == 0)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  CFRelease(cf);
}

void sub_1971F3F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  const void *v11;
  const void *v12;

  CFRelease(v12);
  if (v11)
    CFRelease(v11);
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  WTF *v10;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (*(_DWORD *)(v7 + 32) & 8) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 24));
    if (WeakRetained)
    {
      v13 = WeakRetained;
      WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_webView_decidePolicyForNavigationResponse_decisionHandler_, &v20);
      v14 = *(_QWORD *)(a1 + 8);
      if (v14)
        v14 = *(_QWORD *)(v14 + 8);
      v15 = objc_loadWeakRetained((id *)(v14 + 16));
      v16 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v17 = *a4;
      *a4 = 0;
      v18 = v20;
      v19 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      *v19 = MEMORY[0x1E0C809A0];
      v19[1] = 50331650;
      v19[2] = WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::{lambda(void *,WKNavigationResponsePolicy)#1}::__invoke;
      v19[3] = &WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::descriptor;
      v19[4] = v17;
      v19[5] = v18;
      -[WebKit::CompletionHandlerCallChecker webView:decidePolicyForNavigationResponse:decisionHandler:](v13, "webView:decidePolicyForNavigationResponse:decisionHandler:", v15, v16, v19);
      _Block_release(v19);
      if (v15)
        CFRelease(v15);
      CFRelease(v13);
    }
  }
  else
  {
    v8 = (void *)objc_msgSend((id)WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(*(_QWORD *)a3 + 224)), "URL");
    if (objc_msgSend(v8, "isFileURL"))
    {
      v21 = 0;
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", objc_msgSend(v8, "path"), &v21))v9 = v21 == 0;
      else
        v9 = 0;
      if (v9 && *(_BYTE *)(*(_QWORD *)a3 + 480))
        WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
      else
        WebKit::WebFramePolicyListenerProxy::ignore((WTF *)*a4, 0);
    }
    else
    {
      v10 = (WTF *)*a4;
      if (*(_BYTE *)(*(_QWORD *)a3 + 480))
        WebKit::WebFramePolicyListenerProxy::use((uint64_t)v10, 0, 0);
      else
        WebKit::WebFramePolicyListenerProxy::ignore(v10, 0);
    }
  }
}

void sub_1971F41D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v12 = v10;
  _Block_release(v12);
  if (v11)
    CFRelease(v11);
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didReceiveServerRedirectForProvisionalNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x40) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v9 = WeakRetained;
          v10 = *((_QWORD *)this + 1);
          if (v10)
            v10 = *(_QWORD *)(v10 + 8);
          v11 = objc_loadWeakRetained((id *)(v10 + 16));
          if (a3)
            v12 = *((_QWORD *)a3 + 1);
          else
            v12 = 0;
          objc_msgSend(v9, "webView:didReceiveServerRedirectForProvisionalNavigation:", v11, v12);
          if (v11)
            CFRelease(v11);
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_1971F42F4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::willPerformClientRedirect(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x800) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          WTF::URL::URL((uint64_t)&v15, a3);
          v11 = *((_QWORD *)this + 1);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          objc_msgSend(v10, "_webView:willPerformClientRedirectToURL:delay:", v12, WTF::URL::operator NSURL *(), a4);
          if (v12)
            CFRelease(v12);
          v14 = v15;
          v15 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F4404(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didPerformClientRedirect(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x1000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          WTF::URL::URL((uint64_t)&v18, a3);
          WTF::URL::URL((uint64_t)&v17, a4);
          v11 = *((_QWORD *)this + 1);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          v13 = WTF::URL::operator NSURL *();
          objc_msgSend(v10, "_webView:didPerformClientRedirectFromURL:toURL:", v12, v13, WTF::URL::operator NSURL *());
          if (v12)
            CFRelease(v12);
          v15 = v17;
          v17 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v18;
          v18 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v14);
            else
              *(_DWORD *)v16 -= 2;
          }
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F457C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  const void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didCancelClientRedirect(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 32) & 0x2000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 1);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 16));
          objc_msgSend(v6, "_webViewDidCancelClientRedirect:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_1971F4698(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailProvisionalNavigationWithError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::ResourceError *a6)
{
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WKWebView *v19;
  const WTF::URL *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  CFTypeRef v30;
  uint64_t v31;
  CFTypeRef cf;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return;
  WeakRetained = objc_loadWeakRetained((id *)(v7 + 24));
  if (!WeakRetained)
    return;
  v15 = WeakRetained;
  v17 = a4
     && (v16 = *(_QWORD *)(a4 + 3472)) != 0
     && (*(_WORD *)(v16 + 96) & 0xC) == 4
     && WebCore::ResourceError::errorRecoveryMethod(a6)
     && *(_BYTE *)a3 != 0;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18)
    v18 = *(_QWORD *)(v18 + 8);
  v19 = (WKWebView *)objc_loadWeakRetained((id *)(v18 + 16));
  v20 = (const WTF::URL *)WebCore::ResourceError::nsError(a6);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v19, *(const FrameInfoData **)(a3 + 248), *(NSError **)(a3 + 256), v20, a5, v17);
  if (v19)
    CFRelease(v19);
  v21 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)a3)
  {
    if (v21)
    {
      v23 = *(_QWORD *)(v21 + 8);
      if ((*(_DWORD *)(v23 + 32) & 0x200) == 0)
        goto LABEL_36;
    }
    else
    {
      if ((MEMORY[0x20] & 0x200) == 0)
        goto LABEL_36;
      v23 = 0;
    }
    v26 = objc_loadWeakRetained((id *)(v23 + 16));
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v31 = a2;
    v27 = API::Object::newObject(0x140uLL, 60);
    v28 = API::FrameInfo::FrameInfo(v27, a3, &v31);
    v29 = *(const void **)(v28 + 8);
    if (v29)
      CFRetain(*(CFTypeRef *)(v28 + 8));
    objc_msgSend(v15, "_webView:navigation:didFailProvisionalLoadInSubframe:withError:", v26, 0, v29, cf, v31);
    if (v29)
      CFRelease(v29);
    CFRelease(*(CFTypeRef *)(v27 + 8));
    if (v31)
      CFRelease(*(CFTypeRef *)(v31 + 8));
    if (v26)
      CFRelease(v26);
    goto LABEL_36;
  }
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if ((*(_DWORD *)(v22 + 32) & 0x80) == 0)
      goto LABEL_36;
LABEL_24:
    v24 = objc_loadWeakRetained((id *)(v22 + 16));
    if (a4)
      v25 = *(_QWORD *)(a4 + 8);
    else
      v25 = 0;
    v30 = cf;
    objc_msgSend(v15, "webView:didFailProvisionalNavigation:withError:", v24, v25, cf);
    if (v24)
      CFRelease(v24);
    goto LABEL_40;
  }
  if ((MEMORY[0x20] & 0x80) != 0)
  {
    v22 = 0;
    goto LABEL_24;
  }
LABEL_36:
  v30 = cf;
LABEL_40:
  if (v30)
    CFRelease(v30);
  CFRelease(v15);
}

void sub_1971F493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  uint64_t v11;
  const void *v12;

  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::createErrorWithRecoveryAttempter(WebKit *this, WKWebView *a2, const FrameInfoData *a3, NSError *a4, const WTF::URL *a5, uint64_t a6, int a7)
{
  uint64_t v14;
  WKReloadFrameErrorRecoveryAttempter *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t buf[16];

  v14 = API::Object::newObject(0x28uLL, 11);
  *(_QWORD *)v14 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v14);
  *(_QWORD *)v14 = &off_1E34AD1B8;
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  *(_BYTE *)(v14 + 32) = 0;
  v15 = -[WKReloadFrameErrorRecoveryAttempter initWithWebView:frameHandle:urlString:]([WKReloadFrameErrorRecoveryAttempter alloc], "initWithWebView:frameHandle:urlString:", a2, *(_QWORD *)(v14 + 8), a6);
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithObjectsAndKeys:", v15, CFSTR("_WKRecoveryAttempterErrorKey"), 0);
  v17 = -[WTF::URL userInfo](a5, "userInfo");
  if (v17)
    objc_msgSend(v16, "addEntriesFromDictionary:", v17);
  if (a7)
  {
    v18 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "NavigationState: Including HTTPS Only HTTP fallback signal.", buf, 2u);
    }
    objc_msgSend(v16, "setValue:forKey:", CFSTR("HTTPSOnlyHTTPFallback"), CFSTR("errorRecoveryMethod"));
  }
  *(_QWORD *)this = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", -[WTF::URL domain](a5, "domain"), -[WTF::URL code](a5, "code"), v16);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  CFRelease(*(CFTypeRef *)(v14 + 8));
}

void sub_1971F4B78(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailProvisionalLoadWithErrorForFrame(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceError *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v13;
  uint64_t v14;
  WKWebView *v15;
  const WTF::URL *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  CFTypeRef cf;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return;
  WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
  if (!WeakRetained)
    return;
  v13 = WeakRetained;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  v15 = (WKWebView *)objc_loadWeakRetained((id *)(v14 + 16));
  v16 = (const WTF::URL *)WebCore::ResourceError::nsError(a4);
  v17 = WebCore::ResourceRequestBase::url(a3);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v15, *(const FrameInfoData **)(a5 + 248), *(NSError **)(a5 + 256), v16, v17, 0);
  if (v15)
    CFRelease(v15);
  v18 = *(_QWORD *)(a1 + 8);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if ((*(_DWORD *)(v19 + 32) & 0x100) == 0)
      goto LABEL_22;
LABEL_14:
    v20 = objc_loadWeakRetained((id *)(v19 + 16));
    v21 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v25 = a2;
    v22 = API::Object::newObject(0x140uLL, 60);
    v23 = API::FrameInfo::FrameInfo(v22, a5, &v25);
    v24 = *(const void **)(v23 + 8);
    if (v24)
      CFRetain(*(CFTypeRef *)(v23 + 8));
    objc_msgSend(v13, "_webView:didFailProvisionalLoadWithRequest:inFrame:withError:", v20, v21, v24, cf, v25);
    if (v24)
      CFRelease(v24);
    CFRelease(*(CFTypeRef *)(v22 + 8));
    if (v25)
      CFRelease(*(CFTypeRef *)(v25 + 8));
    if (v20)
      CFRelease(v20);
    goto LABEL_22;
  }
  if ((MEMORY[0x20] & 0x100) != 0)
  {
    v19 = 0;
    goto LABEL_14;
  }
LABEL_22:
  if (cf)
    CFRelease(cf);
  CFRelease(v13);
}

void sub_1971F4D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didCommitNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v9 = WeakRetained;
        v10 = *((_QWORD *)this + 1);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if ((*(_DWORD *)(v11 + 32) & 0x4000) == 0)
            goto LABEL_15;
        }
        else
        {
          if ((MEMORY[0x20] & 0x4000) == 0)
          {
LABEL_15:
            CFRelease(v9);
            return;
          }
          v11 = 0;
        }
        v12 = objc_loadWeakRetained((id *)(v11 + 16));
        if (a3)
          v13 = *((_QWORD *)a3 + 1);
        else
          v13 = 0;
        objc_msgSend(v9, "webView:didCommitNavigation:", v12, v13);
        if (v12)
          CFRelease(v12);
        goto LABEL_15;
      }
    }
  }
}

void sub_1971F4ED0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v9 = WeakRetained;
        v10 = *((_QWORD *)this + 1);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if ((*(_DWORD *)(v11 + 32) & 0x20000) == 0)
            goto LABEL_15;
        }
        else
        {
          if ((MEMORY[0x20] & 0x20000) == 0)
          {
LABEL_15:
            CFRelease(v9);
            return;
          }
          v11 = 0;
        }
        v12 = objc_loadWeakRetained((id *)(v11 + 16));
        if (a3)
          v13 = *((_QWORD *)a3 + 1);
        else
          v13 = 0;
        objc_msgSend(v9, "webView:didFinishNavigation:", v12, v13);
        if (v12)
          CFRelease(v12);
        goto LABEL_15;
      }
    }
  }
}

void sub_1971F4FC4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didBlockLoadToKnownTracker(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WTF::URL *a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
      if (WeakRetained)
      {
        v7 = WeakRetained;
        v8 = *((_QWORD *)this + 1);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if ((*(_DWORD *)(v9 + 32) & 0x800000) == 0)
            goto LABEL_12;
        }
        else
        {
          if ((MEMORY[0x20] & 0x800000) == 0)
          {
LABEL_12:
            CFRelease(v7);
            return;
          }
          v9 = 0;
        }
        v10 = objc_loadWeakRetained((id *)(v9 + 16));
        objc_msgSend(v7, "_webView:didFailLoadDueToNetworkConnectionIntegrityWithURL:", v10, WTF::URL::operator NSURL *());
        if (v10)
          CFRelease(v10);
        goto LABEL_12;
      }
    }
  }
}

void sub_1971F50B4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didApplyLinkDecorationFiltering(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v8 = WeakRetained;
        v9 = *((_QWORD *)this + 1);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if ((*(_DWORD *)(v10 + 32) & 0x1000000) == 0)
            goto LABEL_12;
        }
        else
        {
          if ((MEMORY[0x20] & 0x1000000) == 0)
          {
LABEL_12:
            CFRelease(v8);
            return;
          }
          v10 = 0;
        }
        v11 = objc_loadWeakRetained((id *)(v10 + 16));
        v12 = WTF::URL::operator NSURL *();
        objc_msgSend(v8, "_webView:didChangeLookalikeCharactersFromURL:toURL:", v11, v12, WTF::URL::operator NSURL *());
        if (v11)
          CFRelease(v11);
        goto LABEL_12;
      }
    }
  }
}

void sub_1971F51B8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didPromptForStorageAccess(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const __CFString *v16;
  const __CFString *v17;

  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
      if (WeakRetained)
      {
        v12 = WeakRetained;
        v13 = *((_QWORD *)this + 1);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if ((*(_DWORD *)(v14 + 32) & 0x2000000) == 0)
            goto LABEL_16;
        }
        else
        {
          if ((MEMORY[0x20] & 0x2000000) == 0)
          {
LABEL_16:
            CFRelease(v12);
            return;
          }
          v14 = 0;
        }
        v15 = objc_loadWeakRetained((id *)(v14 + 16));
        if (*(_QWORD *)a3)
          v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v16 = &stru_1E351F1B8;
        if (*(_QWORD *)a4)
          v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        objc_msgSend(v12, "_webView:didPromptForStorageAccess:forSubFrameDomain:forQuirk:", v15, v16, v17, a5);
        if (v15)
          CFRelease(v15);
        goto LABEL_16;
      }
    }
  }
}

void sub_1971F52F0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailNavigationWithError(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const FrameInfoData *a3, Navigation *a4, const WTF::URL *a5, const WebCore::ResourceError *a6, API::Object *a7)
{
  uint64_t v7;
  uint64_t v8;
  id WeakRetained;
  void *v16;
  uint64_t v17;
  WKWebView *v18;
  const WTF::URL *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef cf;

  v7 = *((_QWORD *)this + 1);
  if (!v7)
    return;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return;
  WeakRetained = objc_loadWeakRetained((id *)(v8 + 24));
  if (!WeakRetained)
    return;
  v16 = WeakRetained;
  v17 = *((_QWORD *)this + 1);
  if (v17)
    v17 = *(_QWORD *)(v17 + 8);
  v18 = (WKWebView *)objc_loadWeakRetained((id *)(v17 + 16));
  v19 = (const WTF::URL *)WebCore::ResourceError::nsError(a6);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v18, (const FrameInfoData *)a3->frameID.m_object.m_identifier, (NSError *)a3->frameID.m_processIdentifier.m_identifier, v19, (uint64_t)a5, 0);
  if (v18)
    CFRelease(v18);
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_DWORD *)(v21 + 32);
    if ((v22 & 0x100000) == 0)
    {
      if ((v22 & 0x80000) == 0)
        goto LABEL_27;
LABEL_16:
      v23 = objc_loadWeakRetained((id *)(v21 + 16));
      if (a4)
        v24 = *((_QWORD *)a4 + 1);
      else
        v24 = 0;
      v28 = cf;
      objc_msgSend(v16, "webView:didFailNavigation:withError:", v23, v24, cf);
      if (v23)
        CFRelease(v23);
      goto LABEL_28;
    }
LABEL_19:
    v25 = objc_loadWeakRetained((id *)(v21 + 16));
    if (a4)
      v26 = *((_QWORD *)a4 + 1);
    else
      v26 = 0;
    if (a7)
      v27 = *((_QWORD *)a7 + 1);
    else
      v27 = 0;
    objc_msgSend(v16, "_webView:didFailNavigation:withError:userInfo:", v25, v26, cf, v27);
    if (v25)
      CFRelease(v25);
    goto LABEL_27;
  }
  if ((MEMORY[0x20] & 0x100000) != 0)
  {
    v21 = 0;
    goto LABEL_19;
  }
  if ((MEMORY[0x20] & 0x80000) != 0)
  {
    v21 = 0;
    goto LABEL_16;
  }
LABEL_27:
  v28 = cf;
LABEL_28:
  if (v28)
    CFRelease(v28);
  CFRelease(v16);
}

void sub_1971F54D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  const void *v10;
  const void *v11;
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    v11 = a10;
  }
  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFailLoadWithErrorForFrame(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceError *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v13;
  uint64_t v14;
  WKWebView *v15;
  const WTF::URL *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  CFTypeRef cf;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return;
  WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
  if (!WeakRetained)
    return;
  v13 = WeakRetained;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  v15 = (WKWebView *)objc_loadWeakRetained((id *)(v14 + 16));
  v16 = (const WTF::URL *)WebCore::ResourceError::nsError(a4);
  v17 = WebCore::ResourceRequestBase::url(a3);
  WebKit::createErrorWithRecoveryAttempter((WebKit *)&cf, v15, *(const FrameInfoData **)(a5 + 248), *(NSError **)(a5 + 256), v16, v17, 0);
  if (v15)
    CFRelease(v15);
  v18 = *(_QWORD *)(a1 + 8);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if ((*(_DWORD *)(v19 + 32) & 0x200000) == 0)
      goto LABEL_22;
LABEL_14:
    v20 = objc_loadWeakRetained((id *)(v19 + 16));
    v21 = WebCore::ResourceRequest::nsURLRequest();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v25 = a2;
    v22 = API::Object::newObject(0x140uLL, 60);
    v23 = API::FrameInfo::FrameInfo(v22, a5, &v25);
    v24 = *(const void **)(v23 + 8);
    if (v24)
      CFRetain(*(CFTypeRef *)(v23 + 8));
    objc_msgSend(v13, "_webView:didFailLoadWithRequest:inFrame:withError:", v20, v21, v24, cf, v25);
    if (v24)
      CFRelease(v24);
    CFRelease(*(CFTypeRef *)(v22 + 8));
    if (v25)
      CFRelease(*(CFTypeRef *)(v25 + 8));
    if (v20)
      CFRelease(v20);
    goto LABEL_22;
  }
  if ((MEMORY[0x20] & 0x200000) != 0)
  {
    v19 = 0;
    goto LABEL_14;
  }
LABEL_22:
  if (cf)
    CFRelease(cf);
  CFRelease(v13);
}

void sub_1971F56FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didSameDocumentNavigation(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x400000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *(_QWORD *)(a1 + 8);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          if (a3)
            v13 = *(_QWORD *)(a3 + 8);
          else
            v13 = 0;
          if ((a4 - 1) < 3)
            v14 = (a4 - 1) + 1;
          else
            v14 = 0;
          objc_msgSend(v10, "_webView:navigation:didSameDocumentNavigation:", v12, v13, v14);
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F5840(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (*(_DWORD *)(v7 + 32) & 0x30000000) == 0)
  {
    v18 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 208) + 412);
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v18);
LABEL_10:
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 24));
  if (!WeakRetained)
  {
    v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 208) + 412);
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v20);
    goto LABEL_10;
  }
  v11 = WeakRetained;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32) & 0x20000000) != 0)
  {
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_webView_authenticationChallenge_shouldAllowDeprecatedTLS_, &v25);
    v21 = *(_QWORD *)(a1 + 8);
    if (v21)
      v21 = *(_QWORD *)(v21 + 8);
    v13 = objc_loadWeakRetained((id *)(v21 + 16));
    v22 = *(_QWORD *)(a3 + 8);
    v23 = v25;
    v24 = *a4;
    *a4 = 0;
    v17 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v17 = MEMORY[0x1E0C809A0];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v17[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v17[4] = v23;
    v17[5] = v24;
    -[WebKit::CompletionHandlerCallChecker webView:authenticationChallenge:shouldAllowDeprecatedTLS:](v11, "webView:authenticationChallenge:shouldAllowDeprecatedTLS:", v13, v22, v17);
  }
  else
  {
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_authenticationChallenge_shouldAllowLegacyTLS_, &v25);
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
    v13 = objc_loadWeakRetained((id *)(v12 + 16));
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v25;
    v16 = *a4;
    *a4 = 0;
    v17 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v17 = MEMORY[0x1E0C809A0];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
    v17[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
    v17[4] = v15;
    v17[5] = v16;
    -[WebKit::CompletionHandlerCallChecker _webView:authenticationChallenge:shouldAllowLegacyTLS:](v11, "_webView:authenticationChallenge:shouldAllowLegacyTLS:", v13, v14, v17);
  }
  _Block_release(v17);
  if (v13)
    CFRelease(v13);
  CFRelease(v11);
}

void sub_1971F5AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  v13 = v11;
  _Block_release(v13);
  if (v12)
    CFRelease(v12);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didNegotiateModernTLS(WebKit::NavigationState::NavigationClient *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 32) & 0x40000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 1);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 16));
          objc_msgSend(v6, "_webView:didNegotiateModernTLSForURL:", v8, WTF::URL::operator NSURL *());
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_1971F5C30(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NavigationState::NavigationClient::processDidTerminate(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id *v12;
  id WeakRetained;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4
    || ((*(unsigned int *)(v4 + 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 36) << 32)) & 0x380000000) == 0)
  {
    return 0;
  }
  result = (uint64_t)objc_loadWeakRetained((id *)(v4 + 24));
  if (!result)
    return result;
  v8 = (void *)result;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int8 *)(v10 + 36) << 32);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_16;
  }
  else
  {
    v11 = MEMORY[0x20] | ((unint64_t)MEMORY[0x24] << 32);
    if ((v11 & 0x100000000) != 0)
    {
      v10 = 0;
LABEL_16:
      WeakRetained = objc_loadWeakRetained((id *)(v10 + 16));
      if (a3 > 9)
        v14 = 3;
      else
        v14 = qword_1978D0070[(char)a3];
      objc_msgSend(v8, "_webView:webContentProcessDidTerminateWithReason:", WeakRetained, v14);
      goto LABEL_20;
    }
    v10 = 0;
  }
  v12 = (id *)(v10 + 16);
  if ((v11 & 0x80000000) != 0)
  {
    WeakRetained = objc_loadWeakRetained(v12);
    objc_msgSend(v8, "webViewWebContentProcessDidTerminate:", WeakRetained);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(v12);
    objc_msgSend(v8, "_webViewWebProcessDidCrash:", WeakRetained);
  }
LABEL_20:
  if (WeakRetained)
    CFRelease(WeakRetained);
  CFRelease(v8);
  return 1;
}

void sub_1971F5D84(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::processDidBecomeResponsive(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 36) << 32)) & 0x400000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 1);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 16));
          objc_msgSend(v6, "_webViewWebProcessDidBecomeResponsive:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_1971F5E54(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::processDidBecomeUnresponsive(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 36) << 32)) & 0x800000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 1);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 16));
          objc_msgSend(v6, "_webViewWebProcessDidBecomeUnresponsive:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_1971F5F14(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebCore *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  WTF *v27;
  _QWORD *v28;
  WTF *v29;
  int v30;
  int v31;
  char v32;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if ((((unint64_t)*(unsigned __int8 *)(v5 + 36) << 32) & 0x3000000000) != 0)
    {
      WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v8 = WeakRetained;
        v9 = *((_QWORD *)a1 + 1);
        if (!v9
          || (v9 = *(_QWORD *)(v9 + 8),
              v10 = *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int8 *)(v9 + 36) << 32),
              (v10 & 0x1000000000) != 0))
        {
          v14 = objc_loadWeakRetained((id *)(v9 + 16));
          v15 = (void *)-[WebKit::CompletionHandlerCallChecker _webCryptoMasterKeyForWebView:](v8, "_webCryptoMasterKeyForWebView:", v14);
          if (v14)
            CFRelease(v14);
          if (v15)
          {
            v16 = objc_msgSend(v15, "bytes");
            v17 = objc_msgSend(v15, "length");
            v18 = v17;
            if (v17)
            {
              if (HIDWORD(v17))
              {
                __break(0xC471u);
                return;
              }
              v19 = (WTF *)WTF::fastMalloc((WTF *)v17);
              v20 = 0;
              do
              {
                *((_BYTE *)v19 + v20) = *(_BYTE *)(v16 + v20);
                ++v20;
              }
              while (v18 != v20);
            }
            else
            {
              v19 = 0;
            }
            v29 = v19;
            v30 = v18;
            v31 = v18;
            v32 = 1;
            v21 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, &v29);
            goto LABEL_24;
          }
        }
        else if ((v10 & 0x2000000000) != 0)
        {
          WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webCryptoMasterKeyForWebView_completionHandler_, (uint64_t *)&v29);
          v24 = *((_QWORD *)a1 + 1);
          if (v24)
            v24 = *(_QWORD *)(v24 + 8);
          v25 = objc_loadWeakRetained((id *)(v24 + 16));
          v26 = *a3;
          *a3 = 0;
          v27 = v29;
          v28 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
          *v28 = MEMORY[0x1E0C809A0];
          v28[1] = 50331650;
          v28[2] = WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke;
          v28[3] = &WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::descriptor;
          v28[4] = v26;
          v28[5] = v27;
          -[WebKit::CompletionHandlerCallChecker _webCryptoMasterKeyForWebView:completionHandler:](v8, "_webCryptoMasterKeyForWebView:completionHandler:", v25, v28);
          _Block_release(v28);
          if (v25)
            CFRelease(v25);
          goto LABEL_31;
        }
        LOBYTE(v29) = 0;
        v32 = 0;
        v21 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, &v29);
LABEL_24:
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        if (v32)
        {
          v23 = v29;
          if (v29)
          {
            v29 = 0;
            v30 = 0;
            WTF::fastFree(v23, v22);
          }
        }
LABEL_31:
        CFRelease(v8);
        return;
      }
      LOBYTE(v29) = 0;
      v32 = 0;
      v11 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v11 + 16))(v11, &v29);
    }
    else
    {
      WebCore::defaultWebCryptoMasterKey(a1);
      v11 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v11 + 16))(v11, &v29);
    }
  }
  else
  {
    LOBYTE(v29) = 0;
    v32 = 0;
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v11 + 16))(v11, &v29);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v32)
  {
    v13 = v29;
    if (v29)
    {
      v29 = 0;
      v30 = 0;
      WTF::fastFree(v13, v12);
    }
  }
}

void sub_1971F6244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v16 = v14;
  _Block_release(v16);
  if (v15)
    CFRelease(v15);
  CFRelease(v13);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::navigationActionDidBecomeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (((*(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int8 *)(v5 + 36) << 32)) & 0x4000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *(_QWORD *)(a1 + 8);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          objc_msgSend(v10, "webView:navigationAction:didBecomeDownload:", v12, *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8));
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F63F8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::navigationResponseDidBecomeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (((*(unsigned int *)(v5 + 32) | (unint64_t)((uint64_t)*(char *)(v5 + 36) << 32)) & 0x8000000000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *(_QWORD *)(a1 + 8);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          objc_msgSend(v10, "webView:navigationResponse:didBecomeDownload:", v12, *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8));
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F64C8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::contextMenuDidCreateDownload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 37))
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
        if (WeakRetained)
        {
          v8 = WeakRetained;
          v9 = *(_QWORD *)(a1 + 8);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8);
          v10 = objc_loadWeakRetained((id *)(v9 + 16));
          objc_msgSend(v8, "_webView:contextMenuDidCreateDownload:", v10, *(_QWORD *)(a3 + 8));
          if (v10)
            CFRelease(v10);
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_1971F6588(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didStartLoadForQuickLookDocumentInMainFrame(WebKit::NavigationState::NavigationClient *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  id v11;
  const __CFString *v12;
  const __CFString *v13;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 38) & 0x80) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
        if (WeakRetained)
        {
          v9 = WeakRetained;
          v10 = *((_QWORD *)this + 1);
          if (v10)
            v10 = *(_QWORD *)(v10 + 8);
          v11 = objc_loadWeakRetained((id *)(v10 + 16));
          if (*(_QWORD *)a2)
            v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v12 = &stru_1E351F1B8;
          if (*(_QWORD *)a3)
            v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v13 = &stru_1E351F1B8;
          objc_msgSend(v9, "_webView:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:", v11, v12, v13);
          if (v11)
            CFRelease(v11);
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_1971F6684(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishLoadForQuickLookDocumentInMainFrame(WebKit::NavigationState::NavigationClient *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  WebCore::SharedBuffer *v11;
  CFTypeRef cf;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 38) & 0x100) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 24));
        if (WeakRetained)
        {
          v7 = WeakRetained;
          v8 = *((_QWORD *)this + 1);
          if (v8)
            v8 = *(_QWORD *)(v8 + 8);
          v9 = objc_loadWeakRetained((id *)(v8 + 16));
          WebCore::FragmentedSharedBuffer::makeContiguous(a2);
          WebCore::SharedBuffer::createNSData(v11);
          objc_msgSend(v7, "_webView:didFinishLoadForQuickLookDocumentInMainFrame:", v9, cf);
          if (cf)
            CFRelease(cf);
          if (v11)
          {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v11, v10);
            if (!v9)
              goto LABEL_12;
          }
          else if (!v9)
          {
LABEL_12:
            CFRelease(v7);
            return;
          }
          CFRelease(v9);
          goto LABEL_12;
        }
      }
    }
  }
}

void sub_1971F6780(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v13;
  uint64_t v14;
  id v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || (*(_WORD *)(v8 + 38) & 0x1000) == 0)
  {
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a3);
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 24));
  if (!WeakRetained)
  {
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a3);
    goto LABEL_5;
  }
  v13 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_decidePolicyForSOAuthorizationLoadWithCurrentPolicy_forExtension_completionHandler_, &v20);
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  v15 = objc_loadWeakRetained((id *)(v14 + 16));
  if (*a4)
    v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v16 = &stru_1E351F1B8;
  v17 = *a5;
  *a5 = 0;
  v18 = v20;
  v20 = 0;
  v19 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v19 = MEMORY[0x1E0C809A0];
  v19[1] = 50331650;
  v19[2] = WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::{lambda(void *,_WKSOAuthorizationLoadPolicy)#1}::__invoke;
  v19[3] = &WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::descriptor;
  v19[4] = v17;
  v19[5] = v18;
  -[WebKit::CompletionHandlerCallChecker _webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:](v13, "_webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:", v15, a3, v16, v19);
  _Block_release(v19);
  if (v15)
    CFRelease(v15);
  CFRelease(v13);
}

void sub_1971F699C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::~HistoryClient(WebKit::NavigationState::HistoryClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebKit::NavigationState::HistoryClient::didNavigateWithNavigationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 48) & 1) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 40));
        if (WeakRetained)
        {
          v8 = WeakRetained;
          v9 = *(_QWORD *)(a1 + 8);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8);
          v10 = objc_loadWeakRetained((id *)(v9 + 16));
          v11 = API::Object::newObject(0x1E8uLL, 78);
          v12 = API::NavigationData::NavigationData(v11, a3);
          v13 = *(const void **)(v12 + 8);
          if (v13)
            CFRetain(*(CFTypeRef *)(v12 + 8));
          objc_msgSend(v8, "_webView:didNavigateWithNavigationData:", v10, v13);
          if (v13)
            CFRelease(v13);
          CFRelease(*(CFTypeRef *)(v11 + 8));
          if (v10)
            CFRelease(v10);
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_1971F6BB8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v3;

  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::didPerformClientRedirect(WebKit::NavigationState::HistoryClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 48) & 2) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 40));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *((_QWORD *)this + 1);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          v13 = objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithWTFString:", a3);
          objc_msgSend(v10, "_webView:didPerformClientRedirectFromURL:toURL:", v12, v13, objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithWTFString:", a4));
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F6CD4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::didPerformServerRedirect(WebKit::NavigationState::HistoryClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 48) & 4) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 40));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *((_QWORD *)this + 1);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          v13 = objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithWTFString:", a3);
          objc_msgSend(v10, "_webView:didPerformServerRedirectFromURL:toURL:", v12, v13, objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithWTFString:", a4));
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F6DC8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::HistoryClient::didUpdateHistoryTitle(WebKit::NavigationState::HistoryClient *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  const __CFString *v13;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 48) & 8) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 40));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *((_QWORD *)this + 1);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 16));
          if (*(_QWORD *)a3)
            v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v13 = &stru_1E351F1B8;
          objc_msgSend(v10, "_webView:didUpdateHistoryTitle:forURL:", v12, v13, objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithWTFString:", a4));
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_1971F6EBC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NavigationState::releaseNetworkActivity(uint64_t result, int a2)
{
  WebKit::ProcessThrottlerActivity **v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::ProcessThrottlerActivity **)(result + 56);
  if (*(_QWORD *)(result + 56))
  {
    v3 = result;
    if (a2 == 1)
    {
      v4 = qword_1ECE71640;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
LABEL_9:
        std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
        return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 64));
      }
      v6 = 134217984;
      v7 = v3;
      v5 = "%p NavigationState is releasing background process assertion because the screen was locked";
    }
    else
    {
      if (a2)
        goto LABEL_9;
      v4 = qword_1ECE71640;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
      v6 = 134217984;
      v7 = v3;
      v5 = "%p NavigationState is releasing background process assertion because a page load completed";
    }
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v6, 0xCu);
    goto LABEL_9;
  }
  return result;
}

void WebKit::NavigationState::willChangeNegotiatedLegacyTLS(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("_negotiatedLegacyTLS"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F7030(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeNegotiatedLegacyTLS(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("_negotiatedLegacyTLS"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F708C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeWasPrivateRelayed(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("_wasPrivateRelayed"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F70E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeWasPrivateRelayed(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("_wasPrivateRelayed"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F7144(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeCanGoBack(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("canGoBack"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F71A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeCanGoBack(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("canGoBack"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F71FC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeCanGoForward(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("canGoForward"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F7258(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeCanGoForward(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("canGoForward"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F72B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeNetworkRequestsInProgress(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("_networkRequestsInProgress"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F7310(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeNetworkRequestsInProgress(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("_networkRequestsInProgress"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F736C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeCertificateInfo(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("serverTrust"));
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("certificateChain"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F73D8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeCertificateInfo(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("certificateChain"));
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("serverTrust"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F7444(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("_webProcessIsResponsive"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F74A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("_webProcessIsResponsive"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1971F74FC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didSwapWebProcesses(id *this)
{
  id WeakRetained;
  const void *v3;
  WebKit::ProcessThrottlerActivity **v4;
  id v5;
  uint64_t v6;
  WebKit::ProcessThrottlerActivity *v7;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v3 = WeakRetained;
  v5 = this[7];
  v4 = (WebKit::ProcessThrottlerActivity **)(this + 7);
  if (v5)
  {
    if (!WeakRetained)
      return;
    v6 = *(_QWORD *)(*((_QWORD *)WeakRetained + 53) + 208);
    v7 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v7, v6 + 200, "Page Load", 10, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v4, v7);
  }
  else if (!WeakRetained)
  {
    return;
  }
  CFRelease(v3);
}

void sub_1971F75B0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClientImplCocoa::topContentInsetDidChange(id *this)
{
  id *v1;
  id Weak;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v1 = this + 2;
  Weak = objc_loadWeak(this + 2);
  objc_msgSend(objc_loadWeak(v1), "minimumViewportInset");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  objc_msgSend(objc_loadWeak(v1), "maximumViewportInset");
  return objc_msgSend(Weak, "_recalculateViewportSizesWithMinimumViewportInset:maximumViewportInset:throwOnInvalidInput:", 0, v4, v6, v8, v10, v11, v12, v13, v14);
}

uint64_t WebKit::PageClientImplCocoa::themeColorWillChange(id *this)
{
  id *v1;

  v1 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("themeColor"));
  return objc_msgSend(objc_loadWeak(v1), "willChangeValueForKey:", CFSTR("_themeColor"));
}

uint64_t WebKit::PageClientImplCocoa::themeColorDidChange(id *this)
{
  id *v1;

  v1 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("themeColor"));
  return objc_msgSend(objc_loadWeak(v1), "didChangeValueForKey:", CFSTR("_themeColor"));
}

uint64_t WebKit::PageClientImplCocoa::underPageBackgroundColorWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("underPageBackgroundColor"));
}

uint64_t WebKit::PageClientImplCocoa::underPageBackgroundColorDidChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("underPageBackgroundColor"));
}

uint64_t WebKit::PageClientImplCocoa::sampledPageTopColorWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_sampledPageTopColor"));
}

uint64_t WebKit::PageClientImplCocoa::sampledPageTopColorDidChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("_sampledPageTopColor"));
}

uint64_t WebKit::PageClientImplCocoa::isPlayingAudioWillChange(id *this)
{
  id Weak;

  Weak = objc_loadWeak(this + 2);
  return objc_msgSend(Weak, "willChangeValueForKey:", NSStringFromSelector(sel__isPlayingAudio));
}

uint64_t WebKit::PageClientImplCocoa::isPlayingAudioDidChange(id *this)
{
  id Weak;

  Weak = objc_loadWeak(this + 2);
  return objc_msgSend(Weak, "didChangeValueForKey:", NSStringFromSelector(sel__isPlayingAudio));
}

uint64_t WebKit::PageClientImplCocoa::scrollingUpdatesDisabledForTesting(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_scrollingUpdatesDisabledForTesting");
}

uint64_t WebKit::PageClientImplCocoa::didInsertAttachment(id *this, API::Attachment *a2, const WTF::String *a3)
{
  id Weak;
  const __CFString *v6;

  Weak = objc_loadWeak(this + 2);
  if (*(_QWORD *)a3)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  return objc_msgSend(Weak, "_didInsertAttachment:withSource:", a2, v6);
}

uint64_t WebKit::PageClientImplCocoa::didRemoveAttachment(id *this, API::Attachment *a2)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_didRemoveAttachment:", a2);
}

uint64_t WebKit::PageClientImplCocoa::didInvalidateDataForAttachment(id *this, API::Attachment *a2)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_didInvalidateDataForAttachment:", a2);
}

id WebKit::PageClientImplCocoa::allocFileWrapperInstance(id *this)
{
  objc_class *v1;

  v1 = (objc_class *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "configuration"), "_attachmentFileWrapperClass");
  if (!v1)
    v1 = (objc_class *)objc_opt_class();
  return [v1 alloc];
}

uint64_t WebKit::PageClientImplCocoa::serializableFileWrapperClasses(id *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  v2 = objc_opt_class();
  v3 = objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "configuration"), "_attachmentFileWrapperClass");
  if (v3)
    v4 = v3 == v2;
  else
    v4 = 1;
  if (v4)
    return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", v2, 0, v6);
  else
    return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", v3, v2, 0);
}

uint64_t WebKit::PageClientImplCocoa::storeAppHighlight(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_storeAppHighlight:", a2);
}

uint64_t WebKit::PageClientImplCocoa::addTextAnimationForAnimationID(id *this, const WTF::UUID *a2, const TextAnimationData *a3)
{
  id Weak;

  Weak = objc_loadWeak(this + 2);
  return objc_msgSend(Weak, "_addTextAnimationForAnimationID:withData:", WTF::UUID::operator NSUUID *(), a3);
}

uint64_t WebKit::PageClientImplCocoa::removeTextAnimationForAnimationID(id *this, const WTF::UUID *a2)
{
  id Weak;

  Weak = objc_loadWeak(this + 2);
  return objc_msgSend(Weak, "_removeTextAnimationForAnimationID:", WTF::UUID::operator NSUUID *());
}

uint64_t WebKit::PageClientImplCocoa::gpuProcessDidExit(id *this)
{
  id *v1;

  v1 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_gpuProcessIdentifier"));
  return objc_msgSend(objc_loadWeak(v1), "didChangeValueForKey:", CFSTR("_gpuProcessIdentifier"));
}

uint64_t WebKit::PageClientImplCocoa::addDictationAlternatives()
{
  return WebCore::AlternativeTextUIController::addAlternatives();
}

uint64_t WebKit::PageClientImplCocoa::replaceDictationAlternatives()
{
  return WebCore::AlternativeTextUIController::replaceAlternatives();
}

void WebKit::PageClientImplCocoa::removeDictationAlternatives()
{
  JUMPOUT(0x19AEB31D4);
}

unsigned int *WebKit::PageClientImplCocoa::dictationAlternatives@<X0>(uint64_t a1@<X8>)
{
  void *v2;

  v2 = (void *)objc_msgSend((id)WebCore::AlternativeTextUIController::alternativesForContext(), "alternativeStrings");
  return WTF::makeVector<WTF::String>(v2, a1);
}

uint64_t WebKit::PageClientImplCocoa::platformDictationAlternatives()
{
  return WebCore::AlternativeTextUIController::alternativesForContext();
}

uint64_t WebKit::PageClientImplCocoa::microphoneCaptureWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("microphoneCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::cameraCaptureWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("cameraCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_displayCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureSurfacesWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_displayCaptureSurfaces"));
}

uint64_t WebKit::PageClientImplCocoa::systemAudioCaptureWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_systemAudioCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::microphoneCaptureChanged(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("microphoneCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::cameraCaptureChanged(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("cameraCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureChanged(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("_displayCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::displayCaptureSurfacesChanged(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("_displayCaptureSurfaces"));
}

uint64_t WebKit::PageClientImplCocoa::systemAudioCaptureChanged(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("_systemAudioCaptureState"));
}

uint64_t WebKit::PageClientImplCocoa::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id Weak;
  uint64_t v6;
  uint64_t v7;

  Weak = objc_loadWeak((id *)(a1 + 16));
  v6 = WTF::UUID::operator NSUUID *();
  v7 = WTF::UUID::operator NSUUID *();
  WebCore::IntRect::operator CGRect();
  return objc_msgSend(Weak, "_proofreadingSessionWithUUID:showDetailsForSuggestionWithUUID:relativeToRect:", v6, v7, a4, a5);
}

uint64_t WebKit::PageClientImplCocoa::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id Weak;
  uint64_t v5;

  Weak = objc_loadWeak((id *)(a1 + 16));
  v5 = WTF::UUID::operator NSUUID *();
  return objc_msgSend(Weak, "_proofreadingSessionWithUUID:updateState:forSuggestionWithUUID:", v5, a3, WTF::UUID::operator NSUUID *());
}

uint64_t WebKit::PageClientImplCocoa::writingToolsActiveWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("writingToolsActive"));
}

uint64_t WebKit::PageClientImplCocoa::writingToolsActiveDidChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("writingToolsActive"));
}

uint64_t WebKit::PageClientImplCocoa::setGamepadsRecentlyAccessed(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_setGamepadsRecentlyAccessed:", a2);
}

uint64_t WebKit::PageClientImplCocoa::hasActiveNowPlayingSessionChanged(id *this, uint64_t a2)
{
  id *v3;
  uint64_t result;

  v3 = this + 2;
  result = objc_msgSend(objc_loadWeak(this + 2), "_hasActiveNowPlayingSession");
  if ((_DWORD)result != (_DWORD)a2)
  {
    objc_msgSend(objc_loadWeak(v3), "willChangeValueForKey:", CFSTR("_hasActiveNowPlayingSession"));
    objc_msgSend(objc_loadWeak(v3), "_setHasActiveNowPlayingSession:", a2);
    return objc_msgSend(objc_loadWeak(v3), "didChangeValueForKey:", CFSTR("_hasActiveNowPlayingSession"));
  }
  return result;
}

uint64_t WebKit::PageClientImplCocoa::videoControlsManagerDidChange(id *this)
{
  id *v1;

  v1 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_canEnterFullscreen"));
  return objc_msgSend(objc_loadWeak(v1), "didChangeValueForKey:", CFSTR("_canEnterFullscreen"));
}

void WebKit::convertToPlatformContext(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  CFTypeRef cf;

  v4 = objc_alloc(MEMORY[0x1E0DDA130]);
  WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 2));
  *a2 = objc_msgSend(v4, "initWithAttributedText:range:", cf, a1[7], a1[8]);
  if (cf)
    CFRelease(cf);
}

void sub_1971F7DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::convertToWebContext(void *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::UUID *v4;
  NSUUID *v5;
  const void *v6;
  uint64_t v7;
  CFTypeRef cf;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::UUID *)objc_msgSend(a1, "uuid");
  WTF::UUID::fromNSUUID(v4, v5);
  if (v12)
  {
    v6 = (const void *)objc_msgSend(a1, "attributedText");
    cf = v6;
    if (v6)
      CFRetain(v6);
    WebCore::AttributedString::fromNSAttributedString();
    *(_QWORD *)&v10 = objc_msgSend(a1, "range");
    *((_QWORD *)&v10 + 1) = v7;
    *(_OWORD *)a2 = v11;
    WebCore::AttributedString::AttributedString();
    *(_OWORD *)(a2 + 56) = v10;
    *(_BYTE *)(a2 + 80) = 1;
    MEMORY[0x19AEAEECC](&v9);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
}

void sub_1971F7F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  MEMORY[0x19AEAEECC](v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WebKit::convertToWebSession@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::UUID *v4;
  NSUUID *v5;
  uint64_t result;
  char v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = (WTF::UUID *)objc_msgSend(a1, "uuid");
  result = WTF::UUID::fromNSUUID(v4, v5);
  v7 = v12;
  if (v12)
  {
    v8 = objc_msgSend(a1, "type") != 1;
    result = objc_msgSend(a1, "compositionSessionType");
    v7 = 1;
    if (result == 11)
      v9 = 1;
    else
      v9 = 2;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    if (!result)
      v9 = 0;
    *(_BYTE *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 17) = v9;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

unint64_t WebKit::convertToWebTextSuggestion@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::UUID *v4;
  NSUUID *v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::UUID *)objc_msgSend(a1, "uuid");
  result = WTF::UUID::fromNSUUID(v4, v5);
  if (v13)
  {
    v9 = v12;
    *(_QWORD *)&v10 = objc_msgSend(a1, "originalRange");
    *((_QWORD *)&v10 + 1) = v7;
    MEMORY[0x19AEABCC8](&v11, objc_msgSend(a1, "replacement"));
    result = objc_msgSend(a1, "state");
    v8 = 0x302030100uLL >> (8 * result);
    if (result >= 5)
      LOBYTE(v8) = 3;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 40) = v8;
    *(_BYTE *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
  return result;
}

void sub_1971F80FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionModelContext::~PlaybackSessionModelContext(WebKit::PlaybackSessionModelContext *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v4);
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    WTF::RefCounted<WebCore::TimeRanges>::deref(v6, v5);
  v7 = *((_QWORD *)this + 5);
  if (v7)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, v5);
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  uint64_t v2;
  void *v3;

  WebKit::PlaybackSessionModelContext::~PlaybackSessionModelContext(this, a2);
  if (*(_DWORD *)(v2 + 20))
  {
    *(_QWORD *)(v2 + 256) = 0;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

unsigned int *WebKit::PlaybackSessionModelContext::addClient(WebKit::PlaybackSessionModelContext *this, WebCore::PlaybackSessionModelClient *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  unsigned int *result;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;

  v3 = (uint64_t *)((char *)this + 40);
  v4 = *((_DWORD *)this + 13);
  v5 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 12) = v5;
  if (v5 > v4)
  {
    v7 = *v3;
    if (*v3)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          v10 = *(_QWORD *)(v7 + 8 * --v8);
          if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          WTF::fastFree((WTF *)v10, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v13 = *v3;
        if (*v3)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v9;
        v7 = *v3;
      }
      if (v7)
      {
        v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          v7 = *((_QWORD *)this + 5);
          *((_DWORD *)this + 12) = 0;
          if (!v7)
          {
            v17 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *((_DWORD *)this + 12) = 0;
LABEL_28:
        v17 = *(_DWORD *)(v7 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_30:
          *((_DWORD *)this + 13) = 2 * v18;
          goto LABEL_31;
        }
LABEL_29:
        v18 = v17;
        goto LABEL_30;
      }
    }
    v17 = 0;
    *((_DWORD *)this + 12) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v19 = *((_QWORD *)a2 + 1);
  if (!v19)
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = a2;
    v21 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v19;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v20);
      }
      v19 = *((_QWORD *)a2 + 1);
    }
  }
  do
    v24 = __ldaxr((unsigned int *)v19);
  while (__stlxr(v24 + 1, (unsigned int *)v19));
  do
    v25 = __ldaxr((unsigned int *)v19);
  while (__stlxr(v25 + 1, (unsigned int *)v19));
  v33 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v33, (uint64_t)&v32);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v30 = __ldaxr(result);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, result));
    if (!v31)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v26);
    }
  }
  if (v19)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)v19);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)v19));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v26);
    }
  }
  return result;
}

void sub_1971F848C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a12)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)a12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)a12));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  if (v12)
  {
    do
    {
      v14 = __ldaxr(v12);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v12));
    if (!v15)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::PlaybackSessionModelContext::removeClient(uint64_t *this, WebCore::PlaybackSessionModelClient *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = this + 5;
  v4 = *((_DWORD *)this + 13);
  v5 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 12) = v5;
  if (v5 > v4)
  {
    v6 = this;
    v7 = *v3;
    if (*v3)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          this = *(uint64_t **)(v7 + 8 * --v8);
          if ((unint64_t)this + 1 >= 2 && !this[1])
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)this);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)this));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)this);
          this = (uint64_t *)WTF::fastFree((WTF *)this, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v12 = *v3;
        if (*v3)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v9;
        v7 = *v3;
      }
      if (v7)
      {
        v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          v7 = v6[5];
          *((_DWORD *)v6 + 12) = 0;
          if (!v7)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *((_DWORD *)v6 + 12) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v7 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *((_DWORD *)v6 + 13) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *((_DWORD *)v6 + 12) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = *((_QWORD *)a2 + 1);
  if (v18 && *(_QWORD *)(v18 + 8))
  {
    v20 = *((_QWORD *)a2 + 1);
    this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == this)
        return this;
    }
    else
    {
      if (!this)
        return this;
      v19 = 0;
    }
    if ((uint64_t *)v19 != this)
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)this);
  }
  return this;
}

void WebKit::PlaybackSessionModelContext::sendRemoteCommand(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  IPC::Encoder *v30;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 32);
      v27 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          v9 = *(_QWORD *)(v6 + 192);
          v10 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 1896);
          v11 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v11 = 638;
          *(_QWORD *)(v11 + 8) = v10;
          *(_QWORD *)(v11 + 528) = v11 + 16;
          *(_QWORD *)(v11 + 536) = v11 + 16;
          *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v11 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
          v30 = (IPC::Encoder *)v11;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v27);
          v12 = *(_QWORD *)(v11 + 544);
          v13 = v12 + 1;
          v14 = *(_QWORD *)(v11 + 552);
          if (v14 < v12 + 1)
          {
            v23 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v24 = v23;
              v23 *= 2;
            }
            while (v24 < v13);
            v25 = (char *)mmap(0, v24, 3, 4098, -1, 0);
            if (v25 == (char *)-1)
            {
              __break(0xC471u);
              return;
            }
            v15 = v25;
            memcpy(v25, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
            v26 = *(void **)(v11 + 528);
            if (v26 != (void *)(v11 + 16))
              munmap(v26, *(_QWORD *)(v11 + 552));
            *(_QWORD *)(v11 + 528) = v15;
            *(_QWORD *)(v11 + 552) = v24;
            v16 = *(_QWORD *)(v11 + 544);
          }
          else
          {
            v15 = *(char **)(v11 + 528);
            v16 = *(_QWORD *)(v11 + 544);
          }
          bzero(&v15[v16], v12 - v16);
          *(_QWORD *)(v11 + 544) = v13;
          v17 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v12);
          *(_QWORD *)(v11 + 536) = v17 + 1;
          *v17 = a2;
          IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v11, (uint64_t *)a3);
          IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v11, (char *)(a3 + 16));
          LOBYTE(v28) = 0;
          v29 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v30, 0, (uint64_t)&v28, 1);
          if (v29)
          {
            v19 = v28;
            v28 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          v20 = v30;
          v30 = 0;
          if (v20)
          {
            IPC::Encoder::~Encoder(v20, v18);
            WTF::fastFree(v21, v22);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
        }
      }
    }
  }
}

void sub_1971F88C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::addNowPlayingMetadataObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 32);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          CFRetain(*(CFTypeRef *)(v5 - 8));
          WebKit::WebPageProxy::addNowPlayingMetadataObserver(v5 - 16, a2);
          CFRelease(*(CFTypeRef *)(v5 - 8));
        }
      }
    }
  }
}

void WebKit::PlaybackSessionModelContext::removeNowPlayingMetadataObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 32);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          CFRetain(*(CFTypeRef *)(v5 - 8));
          WebKit::WebPageProxy::removeNowPlayingMetadataObserver(v5 - 16, a2);
          CFRelease(*(CFTypeRef *)(v5 - 8));
        }
      }
    }
  }
}

void WebKit::PlaybackSessionModelContext::setSoundStageSize(uint64_t a1, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  if (*(unsigned __int8 *)(a1 + 248) != a2)
  {
    v2 = a2;
    *(_BYTE *)(a1 + 248) = a2;
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 32);
        v25 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            CFRetain(*(CFTypeRef *)(v6 - 8));
            v7 = *(_QWORD *)(v6 + 192);
            v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 1896);
            v9 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v9 = 643;
            *(_QWORD *)(v9 + 8) = v8;
            *(_QWORD *)(v9 + 528) = v9 + 16;
            *(_QWORD *)(v9 + 536) = v9 + 16;
            *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v9 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
            v28 = (IPC::Encoder *)v9;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, &v25);
            v10 = *(_QWORD *)(v9 + 544);
            v11 = v10 + 1;
            v12 = *(_QWORD *)(v9 + 552);
            if (v12 < v10 + 1)
            {
              v21 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
              do
              {
                v22 = v21;
                v21 *= 2;
              }
              while (v22 < v11);
              v23 = (char *)mmap(0, v22, 3, 4098, -1, 0);
              if (v23 == (char *)-1)
              {
                __break(0xC471u);
                return;
              }
              v13 = v23;
              memcpy(v23, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
              v24 = *(void **)(v9 + 528);
              if (v24 != (void *)(v9 + 16))
                munmap(v24, *(_QWORD *)(v9 + 552));
              *(_QWORD *)(v9 + 528) = v13;
              *(_QWORD *)(v9 + 552) = v22;
              v14 = *(_QWORD *)(v9 + 544);
            }
            else
            {
              v13 = *(char **)(v9 + 528);
              v14 = *(_QWORD *)(v9 + 544);
            }
            bzero(&v13[v14], v10 - v14);
            *(_QWORD *)(v9 + 544) = v11;
            v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
            *(_QWORD *)(v9 + 536) = v15 + 1;
            *v15 = v2;
            LOBYTE(v26) = 0;
            v27 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v28, 0, (uint64_t)&v26, 1);
            if (v27)
            {
              v17 = v26;
              v26 = 0;
              if (v17)
                (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            }
            v18 = v28;
            v28 = 0;
            if (v18)
            {
              IPC::Encoder::~Encoder(v18, v16);
              WTF::fastFree(v19, v20);
            }
            CFRelease(*(CFTypeRef *)(v6 - 8));
          }
        }
      }
    }
  }
}

void sub_1971F8BF4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::play(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "play";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 634;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971F8DAC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionModelContext::loggerPtr(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 64);
  else
    return 0;
}

uint64_t WebKit::PlaybackSessionModelContext::logIdentifier(WebKit::PlaybackSessionModelContext *this)
{
  return *((_QWORD *)this + 32);
}

void WebKit::PlaybackSessionModelContext::pause(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "pause";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 633;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971F8F8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::togglePlayState(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "togglePlayState";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 648;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971F9144(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::beginScrubbing(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 64);
      if (!v4)
        goto LABEL_18;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "beginScrubbing";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v3 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_18:
        v7 = *(_QWORD *)(v3 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 626;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
  *((_BYTE *)this + 97) = 1;
}

void sub_1971F930C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::endScrubbing(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 64);
      if (!v4)
        goto LABEL_18;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "endScrubbing";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v3 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_18:
        v7 = *(_QWORD *)(v3 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 628;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
  *((_BYTE *)this + 97) = 0;
  *((_BYTE *)this + 64) = *((_BYTE *)this + 96) & 1;
}

void sub_1971F94DC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionModelContext::isPlaying(WebKit::PlaybackSessionModelContext *this)
{
  return *((_BYTE *)this + 96) & 1;
}

void WebKit::PlaybackSessionModelContext::seekToTime(WebKit::PlaybackSessionModelContext *this, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF::String *v12;
  WTF::String *v13;
  WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  WTF *v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::String *v33;
  WTF::String *v34;
  WTF::String *v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  unint64_t v51;
  char *v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  uint64_t v60;
  unint64_t v61;
  size_t v62;
  unint64_t v63;
  char *v64;
  double *v65;
  void *v66;
  uint64_t v67;
  IPC::Encoder *v68;
  WTF *v69;
  void *v70;
  unint64_t v71;
  size_t v72;
  char *v73;
  void *v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  void *v78;
  unint64_t v79;
  size_t v80;
  char *v81;
  void *v82;
  uint64_t v83;
  IPC::Encoder *v84[4];
  WTF *v85[2];
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint8_t buf[16];
  int v98;
  int v99;
  _DWORD v100[8];
  _DWORD v101[6];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3);
  if (!v4)
    return;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return;
  v10 = *(_QWORD *)(v5 + 64);
  if (!v10)
    goto LABEL_65;
  v11 = (IPC::Encoder *)*((_QWORD *)this + 32);
  v84[0] = (IPC::Encoder *)"PlaybackSessionModelContext";
  v84[1] = (IPC::Encoder *)28;
  v84[2] = (IPC::Encoder *)"seekToTime";
  v84[3] = v11;
  if (!*(_BYTE *)(v10 + 12))
    goto LABEL_65;
  v12 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v84);
  WTF::String::number(v12, a2);
  v13 = (WTF::String *)WTF::String::String((WTF::String *)&v89, ", toleranceBefore: ");
  WTF::String::number(v13, a3);
  v14 = (WTF::String *)WTF::String::String((WTF::String *)&v87, ", toleranceAfter: ");
  WTF::String::number(v14, a4);
  v85[0] = v90;
  v96 = v89;
  *(_QWORD *)buf = v91;
  v94 = v87;
  v95 = v88;
  v93 = v86;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v85, (uint64_t *)&v96, (uint64_t *)&v95, (uint64_t *)&v94, (uint64_t *)&v93, &v92);
  if (!v92)
    goto LABEL_101;
  v16 = v86;
  v86 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v87;
  v87 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v88;
  v88 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v89;
  v89 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v90;
  v90 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v91;
  v91 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = qword_1ECE71348;
  v23 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v85[0] ? (char *)v85[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v25;
    _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = v85[0];
    v85[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = (WTF *)WTF::fastFree(v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (WebKit2LogMedia)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers(v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v83 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v32 = *v31;
              *(_DWORD *)buf = 0;
              v33 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v84);
              v98 = 0;
              WTF::String::number(v33, a2);
              v99 = 0;
              v34 = (WTF::String *)WTF::String::String((WTF::String *)v100, ", toleranceBefore: ");
              v100[2] = 0;
              WTF::String::number(v34, a3);
              v100[6] = 0;
              v35 = (WTF::String *)WTF::String::String((WTF::String *)v101, ", toleranceAfter: ");
              v101[2] = 0;
              WTF::String::number(v35, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v85, (uint64_t)buf, 6uLL);
              (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v32 + 16))(v32, &WebKit2LogMedia, 0, v85);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v85, v36);
              for (i = 88; i != -8; i -= 16)
              {
                v38 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v38 -= 2;
                }
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v83);
          }
          v39 = __ldxr(v26);
          if (v39 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v40 = v92;
  v92 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = *((_QWORD *)this + 3);
  if (v41)
  {
    v5 = *(_QWORD *)(v41 + 8);
    if (v5)
    {
LABEL_65:
      v42 = *(_QWORD *)(v5 + 32);
      v85[0] = *((WTF **)this + 4);
      if (!v42)
        return;
      v43 = *(_QWORD *)(v42 + 8);
      if (!v43)
        return;
      CFRetain(*(CFTypeRef *)(v43 - 8));
      v44 = *(_QWORD *)(v43 + 192);
      v45 = *(_QWORD *)(*(_QWORD *)(v43 + 16) + 1896);
      v46 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v46 = 635;
      *(_QWORD *)(v46 + 8) = v45;
      v47 = (void *)(v46 + 16);
      *(_QWORD *)(v46 + 528) = v46 + 16;
      *(_QWORD *)(v46 + 536) = v46 + 16;
      *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v46 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
      v84[0] = (IPC::Encoder *)v46;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v46, (uint64_t *)v85);
      v48 = *(_QWORD *)(v46 + 544);
      v49 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
      v50 = v49 + 8;
      v51 = *(_QWORD *)(v46 + 552);
      if (v51 < v49 + 8)
      {
        v71 = (2 * v51 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v72 = v71;
          v71 *= 2;
        }
        while (v72 < v50);
        v73 = (char *)mmap(0, v72, 3, 4098, -1, 0);
        if (v73 == (char *)-1)
        {
          __break(0xC471u);
          JUMPOUT(0x1971F9CF4);
        }
        v52 = v73;
        memcpy(v73, *(const void **)(v46 + 528), *(_QWORD *)(v46 + 544));
        v74 = *(void **)(v46 + 528);
        if (v74 != v47)
          munmap(v74, *(_QWORD *)(v46 + 552));
        *(_QWORD *)(v46 + 528) = v52;
        *(_QWORD *)(v46 + 552) = v72;
        v48 = *(_QWORD *)(v46 + 544);
      }
      else
      {
        v52 = *(char **)(v46 + 528);
      }
      bzero(&v52[v48], v49 - v48);
      *(_QWORD *)(v46 + 544) = v50;
      v53 = (double *)(*(_QWORD *)(v46 + 528) + v49);
      *(_QWORD *)(v46 + 536) = v53 + 1;
      *v53 = a2;
      v54 = *(_QWORD *)(v46 + 544);
      v55 = (v54 + 7) & 0xFFFFFFFFFFFFFFF8;
      v56 = v55 + 8;
      v57 = *(_QWORD *)(v46 + 552);
      if (v57 < v55 + 8)
      {
        v75 = (2 * v57 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v76 = v75;
          v75 *= 2;
        }
        while (v76 < v56);
        v77 = (char *)mmap(0, v76, 3, 4098, -1, 0);
        if (v77 == (char *)-1)
        {
          __break(0xC471u);
          JUMPOUT(0x1971F9CFCLL);
        }
        v58 = v77;
        memcpy(v77, *(const void **)(v46 + 528), *(_QWORD *)(v46 + 544));
        v78 = *(void **)(v46 + 528);
        if (v78 != v47)
          munmap(v78, *(_QWORD *)(v46 + 552));
        *(_QWORD *)(v46 + 528) = v58;
        *(_QWORD *)(v46 + 552) = v76;
        v54 = *(_QWORD *)(v46 + 544);
      }
      else
      {
        v58 = *(char **)(v46 + 528);
      }
      bzero(&v58[v54], v55 - v54);
      *(_QWORD *)(v46 + 544) = v56;
      v59 = (double *)(*(_QWORD *)(v46 + 528) + v55);
      *(_QWORD *)(v46 + 536) = v59 + 1;
      *v59 = a3;
      v60 = *(_QWORD *)(v46 + 544);
      v61 = (v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      v62 = v61 + 8;
      v63 = *(_QWORD *)(v46 + 552);
      if (v63 >= v61 + 8)
      {
        v64 = *(char **)(v46 + 528);
LABEL_73:
        bzero(&v64[v60], v61 - v60);
        *(_QWORD *)(v46 + 544) = v62;
        v65 = (double *)(*(_QWORD *)(v46 + 528) + v61);
        *(_QWORD *)(v46 + 536) = v65 + 1;
        *v65 = a4;
        buf[0] = 0;
        LOBYTE(v98) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v44, v84, 0, (uint64_t)buf, 1);
        if ((_BYTE)v98)
        {
          v67 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v67)
            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
        }
        v68 = v84[0];
        v84[0] = 0;
        if (v68)
        {
          IPC::Encoder::~Encoder(v68, v66);
          WTF::fastFree(v69, v70);
        }
        CFRelease(*(CFTypeRef *)(v43 - 8));
        return;
      }
      v79 = (2 * v63 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v80 = v79;
        v79 *= 2;
      }
      while (v80 < v62);
      v81 = (char *)mmap(0, v80, 3, 4098, -1, 0);
      if (v81 != (char *)-1)
      {
        v64 = v81;
        memcpy(v81, *(const void **)(v46 + 528), *(_QWORD *)(v46 + 544));
        v82 = *(void **)(v46 + 528);
        if (v82 != v47)
          munmap(v82, *(_QWORD *)(v46 + 552));
        *(_QWORD *)(v46 + 528) = v64;
        *(_QWORD *)(v46 + 552) = v80;
        v60 = *(_QWORD *)(v46 + 544);
        goto LABEL_73;
      }
LABEL_101:
      __break(0xC471u);
      JUMPOUT(0x1971F9CECLL);
    }
  }
}

void sub_1971F9D08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  unsigned __int8 *v35;
  int v36;

  v36 = __ldxr(v35);
  if (v36 == 1)
  {
    if (!__stlxr(0, v35))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebKit::PlaybackSessionModelContext::fastSeek(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  IPC::Encoder *v34;

  v32 = a2;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 64);
      if (!v5)
        goto LABEL_27;
      v6 = *((_QWORD *)this + 32);
      v29[0] = "PlaybackSessionModelContext";
      v29[1] = 28;
      v30 = "fastSeek";
      v31 = v6;
      if (!*(_BYTE *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29, &v32), (v7 = *((_QWORD *)this + 3)) != 0)&& (v3 = *(_QWORD *)(v7 + 8)) != 0)
      {
LABEL_27:
        v8 = v32;
        v9 = *(_QWORD *)(v3 + 32);
        v33 = *((_QWORD *)this + 4);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            v11 = *(_QWORD *)(v10 + 192);
            v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
            v13 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v13 = 631;
            *(_QWORD *)(v13 + 8) = v12;
            *(_QWORD *)(v13 + 528) = v13 + 16;
            *(_QWORD *)(v13 + 536) = v13 + 16;
            *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v13 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
            v34 = (IPC::Encoder *)v13;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v33);
            v14 = *(_QWORD *)(v13 + 544);
            v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
            v16 = v15 + 8;
            v17 = *(_QWORD *)(v13 + 552);
            if (v17 < v15 + 8)
            {
              v25 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
              do
              {
                v26 = v25;
                v25 *= 2;
              }
              while (v26 < v16);
              v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
              if (v27 == (char *)-1)
              {
                __break(0xC471u);
                return;
              }
              v18 = v27;
              memcpy(v27, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
              v28 = *(void **)(v13 + 528);
              if (v28 != (void *)(v13 + 16))
                munmap(v28, *(_QWORD *)(v13 + 552));
              *(_QWORD *)(v13 + 528) = v18;
              *(_QWORD *)(v13 + 552) = v26;
              v14 = *(_QWORD *)(v13 + 544);
            }
            else
            {
              v18 = *(char **)(v13 + 528);
            }
            bzero(&v18[v14], v15 - v14);
            *(_QWORD *)(v13 + 544) = v16;
            v19 = (double *)(*(_QWORD *)(v13 + 528) + v15);
            *(_QWORD *)(v13 + 536) = v19 + 1;
            *v19 = v8;
            LOBYTE(v29[0]) = 0;
            LOBYTE(v30) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v34, 0, (uint64_t)v29, 1);
            if ((_BYTE)v30)
            {
              v21 = v29[0];
              v29[0] = 0;
              if (v21)
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            }
            v22 = v34;
            v34 = 0;
            if (v22)
            {
              IPC::Encoder::~Encoder(v22, v20);
              WTF::fastFree(v23, v24);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FA1BC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::beginScanningForward(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "beginScanningForward";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 625;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FA374(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::beginScanningBackward(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "beginScanningBackward";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 624;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FA52C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::endScanning(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "endScanning";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 627;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FA6E4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setDefaultPlaybackRate(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  float v19;
  float *v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  void *v29;
  _QWORD v30[2];
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  IPC::Encoder *v35;

  v33 = a2;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 64);
      if (!v5)
        goto LABEL_27;
      v6 = *((_QWORD *)this + 32);
      v30[0] = "PlaybackSessionModelContext";
      v30[1] = 28;
      v31 = "setDefaultPlaybackRate";
      v32 = v6;
      if (!*(_BYTE *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v30, &v33), (v7 = *((_QWORD *)this + 3)) != 0)&& (v3 = *(_QWORD *)(v7 + 8)) != 0)
      {
LABEL_27:
        v8 = v33;
        v9 = *(_QWORD *)(v3 + 32);
        v34 = *((_QWORD *)this + 4);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            v11 = *(_QWORD *)(v10 + 192);
            v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
            v13 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v13 = 639;
            *(_QWORD *)(v13 + 8) = v12;
            *(_QWORD *)(v13 + 528) = v13 + 16;
            *(_QWORD *)(v13 + 536) = v13 + 16;
            *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v13 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
            v35 = (IPC::Encoder *)v13;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v34);
            v14 = *(_QWORD *)(v13 + 544);
            v15 = (v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
            v16 = v15 + 4;
            v17 = *(_QWORD *)(v13 + 552);
            if (v17 < v15 + 4)
            {
              v26 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
              do
              {
                v27 = v26;
                v26 *= 2;
              }
              while (v27 < v16);
              v28 = (char *)mmap(0, v27, 3, 4098, -1, 0);
              if (v28 == (char *)-1)
              {
                __break(0xC471u);
                return;
              }
              v18 = v28;
              memcpy(v28, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
              v29 = *(void **)(v13 + 528);
              if (v29 != (void *)(v13 + 16))
                munmap(v29, *(_QWORD *)(v13 + 552));
              *(_QWORD *)(v13 + 528) = v18;
              *(_QWORD *)(v13 + 552) = v27;
              v14 = *(_QWORD *)(v13 + 544);
            }
            else
            {
              v18 = *(char **)(v13 + 528);
            }
            bzero(&v18[v14], v15 - v14);
            *(_QWORD *)(v13 + 544) = v16;
            v20 = (float *)(*(_QWORD *)(v13 + 528) + v15);
            *(_QWORD *)(v13 + 536) = v20 + 1;
            v19 = v8;
            *v20 = v19;
            LOBYTE(v30[0]) = 0;
            LOBYTE(v31) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v35, 0, (uint64_t)v30, 1);
            if ((_BYTE)v31)
            {
              v22 = v30[0];
              v30[0] = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            }
            v23 = v35;
            v35 = 0;
            if (v23)
            {
              IPC::Encoder::~Encoder(v23, v21);
              WTF::fastFree(v24, v25);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FA988(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setPlaybackRate(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  float v19;
  float *v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  void *v29;
  _QWORD v30[2];
  const char *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  IPC::Encoder *v35;

  v33 = a2;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 64);
      if (!v5)
        goto LABEL_27;
      v6 = *((_QWORD *)this + 32);
      v30[0] = "PlaybackSessionModelContext";
      v30[1] = 28;
      v31 = "setPlaybackRate";
      v32 = v6;
      if (!*(_BYTE *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v30, &v33), (v7 = *((_QWORD *)this + 3)) != 0)&& (v3 = *(_QWORD *)(v7 + 8)) != 0)
      {
LABEL_27:
        v8 = v33;
        v9 = *(_QWORD *)(v3 + 32);
        v34 = *((_QWORD *)this + 4);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            v11 = *(_QWORD *)(v10 + 192);
            v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
            v13 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v13 = 641;
            *(_QWORD *)(v13 + 8) = v12;
            *(_QWORD *)(v13 + 528) = v13 + 16;
            *(_QWORD *)(v13 + 536) = v13 + 16;
            *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v13 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
            v35 = (IPC::Encoder *)v13;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v34);
            v14 = *(_QWORD *)(v13 + 544);
            v15 = (v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
            v16 = v15 + 4;
            v17 = *(_QWORD *)(v13 + 552);
            if (v17 < v15 + 4)
            {
              v26 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
              do
              {
                v27 = v26;
                v26 *= 2;
              }
              while (v27 < v16);
              v28 = (char *)mmap(0, v27, 3, 4098, -1, 0);
              if (v28 == (char *)-1)
              {
                __break(0xC471u);
                return;
              }
              v18 = v28;
              memcpy(v28, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
              v29 = *(void **)(v13 + 528);
              if (v29 != (void *)(v13 + 16))
                munmap(v29, *(_QWORD *)(v13 + 552));
              *(_QWORD *)(v13 + 528) = v18;
              *(_QWORD *)(v13 + 552) = v27;
              v14 = *(_QWORD *)(v13 + 544);
            }
            else
            {
              v18 = *(char **)(v13 + 528);
            }
            bzero(&v18[v14], v15 - v14);
            *(_QWORD *)(v13 + 544) = v16;
            v20 = (float *)(*(_QWORD *)(v13 + 528) + v15);
            *(_QWORD *)(v13 + 536) = v20 + 1;
            v19 = v8;
            *v20 = v19;
            LOBYTE(v30[0]) = 0;
            LOBYTE(v31) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v35, 0, (uint64_t)v30, 1);
            if ((_BYTE)v31)
            {
              v22 = v30[0];
              v30[0] = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            }
            v23 = v35;
            v35 = 0;
            if (v23)
            {
              IPC::Encoder::~Encoder(v23, v21);
              WTF::fastFree(v24, v25);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FAC2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::selectAudioMediaOption(WebKit::PlaybackSessionModelContext *this, WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  WTF::String **v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  WTF::String *v32;
  uint64_t v33;
  IPC::Encoder *v34;

  v32 = a2;
  if (*((WTF::String **)this + 21) != a2)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        goto LABEL_28;
      v5 = *(_QWORD *)(v4 + 64);
      if (!v5
        || (v6 = *((_QWORD *)this + 32),
            v29[0] = "PlaybackSessionModelContext",
            v29[1] = 28,
            v30 = "selectAudioMediaOption",
            v31 = v6,
            !*(_BYTE *)(v5 + 12))
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29, &v32), (v3 = *((_QWORD *)this + 3)) != 0))
      {
LABEL_28:
        v7 = *(_QWORD *)(v3 + 8);
        if (v7)
        {
          v8 = v32;
          v9 = *(_QWORD *)(v7 + 32);
          v33 = *((_QWORD *)this + 4);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              v11 = *(_QWORD *)(v10 + 192);
              v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
              v13 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v13 = 636;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)(v13 + 528) = v13 + 16;
              *(_QWORD *)(v13 + 536) = v13 + 16;
              *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v13 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
              v34 = (IPC::Encoder *)v13;
              IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v33);
              v14 = *(_QWORD *)(v13 + 544);
              v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
              v16 = v15 + 8;
              v17 = *(_QWORD *)(v13 + 552);
              if (v17 < v15 + 8)
              {
                v25 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
                do
                {
                  v26 = v25;
                  v25 *= 2;
                }
                while (v26 < v16);
                v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
                if (v27 == (char *)-1)
                {
                  __break(0xC471u);
                  return;
                }
                v18 = v27;
                memcpy(v27, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
                v28 = *(void **)(v13 + 528);
                if (v28 != (void *)(v13 + 16))
                  munmap(v28, *(_QWORD *)(v13 + 552));
                *(_QWORD *)(v13 + 528) = v18;
                *(_QWORD *)(v13 + 552) = v26;
                v14 = *(_QWORD *)(v13 + 544);
              }
              else
              {
                v18 = *(char **)(v13 + 528);
              }
              bzero(&v18[v14], v15 - v14);
              *(_QWORD *)(v13 + 544) = v16;
              v19 = (WTF::String **)(*(_QWORD *)(v13 + 528) + v15);
              *(_QWORD *)(v13 + 536) = v19 + 1;
              *v19 = v8;
              LOBYTE(v29[0]) = 0;
              LOBYTE(v30) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v34, 0, (uint64_t)v29, 1);
              if ((_BYTE)v30)
              {
                v21 = v29[0];
                v29[0] = 0;
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              }
              v22 = v34;
              v34 = 0;
              if (v22)
              {
                IPC::Encoder::~Encoder(v22, v20);
                WTF::fastFree(v23, v24);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_1971FAED8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::selectLegibleMediaOption(WebKit::PlaybackSessionModelContext *this, WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  WTF::String **v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  WTF::String *v32;
  uint64_t v33;
  IPC::Encoder *v34;

  v32 = a2;
  if (*((WTF::String **)this + 24) != a2)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        goto LABEL_28;
      v5 = *(_QWORD *)(v4 + 64);
      if (!v5
        || (v6 = *((_QWORD *)this + 32),
            v29[0] = "PlaybackSessionModelContext",
            v29[1] = 28,
            v30 = "selectLegibleMediaOption",
            v31 = v6,
            !*(_BYTE *)(v5 + 12))
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29, &v32), (v3 = *((_QWORD *)this + 3)) != 0))
      {
LABEL_28:
        v7 = *(_QWORD *)(v3 + 8);
        if (v7)
        {
          v8 = v32;
          v9 = *(_QWORD *)(v7 + 32);
          v33 = *((_QWORD *)this + 4);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              v11 = *(_QWORD *)(v10 + 192);
              v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
              v13 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v13 = 637;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)(v13 + 528) = v13 + 16;
              *(_QWORD *)(v13 + 536) = v13 + 16;
              *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v13 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
              v34 = (IPC::Encoder *)v13;
              IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v33);
              v14 = *(_QWORD *)(v13 + 544);
              v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
              v16 = v15 + 8;
              v17 = *(_QWORD *)(v13 + 552);
              if (v17 < v15 + 8)
              {
                v25 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
                do
                {
                  v26 = v25;
                  v25 *= 2;
                }
                while (v26 < v16);
                v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
                if (v27 == (char *)-1)
                {
                  __break(0xC471u);
                  return;
                }
                v18 = v27;
                memcpy(v27, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
                v28 = *(void **)(v13 + 528);
                if (v28 != (void *)(v13 + 16))
                  munmap(v28, *(_QWORD *)(v13 + 552));
                *(_QWORD *)(v13 + 528) = v18;
                *(_QWORD *)(v13 + 552) = v26;
                v14 = *(_QWORD *)(v13 + 544);
              }
              else
              {
                v18 = *(char **)(v13 + 528);
              }
              bzero(&v18[v14], v15 - v14);
              *(_QWORD *)(v13 + 544) = v16;
              v19 = (WTF::String **)(*(_QWORD *)(v13 + 528) + v15);
              *(_QWORD *)(v13 + 536) = v19 + 1;
              *v19 = v8;
              LOBYTE(v29[0]) = 0;
              LOBYTE(v30) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v34, 0, (uint64_t)v29, 1);
              if ((_BYTE)v30)
              {
                v21 = v29[0];
                v29[0] = 0;
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              }
              v22 = v34;
              v34 = 0;
              if (v22)
              {
                IPC::Encoder::~Encoder(v22, v20);
                WTF::fastFree(v23, v24);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_1971FB184(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::togglePictureInPicture(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "togglePictureInPicture";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 647;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FB33C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::enterFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_7;
      v5 = *((_QWORD *)this + 32);
      v18[0] = "PlaybackSessionModelContext";
      v18[1] = 28;
      v19 = "enterFullscreen";
      v20 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v18), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_7:
        v7 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)(v2 + 16) = v7 + 1;
        v8 = *(_QWORD *)(v2 + 32);
        v21 = *((_QWORD *)this + 4);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            CFRetain(*(CFTypeRef *)(v9 - 8));
            v10 = *(_QWORD *)(v9 + 192);
            v11 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 1896);
            v12 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v12 = 629;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 528) = v12 + 16;
            *(_QWORD *)(v12 + 536) = v12 + 16;
            *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v12 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
            v22 = (IPC::Encoder *)v12;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v21);
            LOBYTE(v18[0]) = 0;
            LOBYTE(v19) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v22, 0, (uint64_t)v18, 1);
            if ((_BYTE)v19)
            {
              v14 = v18[0];
              v18[0] = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
            v15 = v22;
            v22 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v13);
              WTF::fastFree(v16, v17);
            }
            CFRelease(*(CFTypeRef *)(v9 - 8));
            v7 = *(_DWORD *)(v2 + 16) - 1;
          }
        }
        if (v7)
          *(_DWORD *)(v2 + 16) = v7;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
}

void sub_1971FB52C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  _DWORD *v14;
  uint64_t v15;
  WTF *v17;
  void *v18;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[4];
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::exitFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_7;
      v5 = *((_QWORD *)this + 32);
      v18[0] = "PlaybackSessionModelContext";
      v18[1] = 28;
      v19 = "exitFullscreen";
      v20 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v18), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_7:
        v7 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)(v2 + 16) = v7 + 1;
        v8 = *(_QWORD *)(v2 + 32);
        v21 = *((_QWORD *)this + 4);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            CFRetain(*(CFTypeRef *)(v9 - 8));
            v10 = *(_QWORD *)(v9 + 192);
            v11 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 1896);
            v12 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v12 = 630;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 528) = v12 + 16;
            *(_QWORD *)(v12 + 536) = v12 + 16;
            *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v12 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
            v22 = (IPC::Encoder *)v12;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v21);
            LOBYTE(v18[0]) = 0;
            LOBYTE(v19) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v22, 0, (uint64_t)v18, 1);
            if ((_BYTE)v19)
            {
              v14 = v18[0];
              v18[0] = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
            v15 = v22;
            v22 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v13);
              WTF::fastFree(v16, v17);
            }
            CFRelease(*(CFTypeRef *)(v9 - 8));
            v7 = *(_DWORD *)(v2 + 16) - 1;
          }
        }
        if (v7)
          *(_DWORD *)(v2 + 16) = v7;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
}

void sub_1971FB748(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  _DWORD *v14;
  uint64_t v15;
  WTF *v17;
  void *v18;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[4];
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::toggleInWindowFullscreen(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "toggleInWindowFullscreen";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 645;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FB92C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::toggleMuted(WebKit::PlaybackSessionModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 64);
      if (!v4)
        goto LABEL_17;
      v5 = *((_QWORD *)this + 32);
      v17[0] = "PlaybackSessionModelContext";
      v17[1] = 28;
      v18 = "toggleMuted";
      v19 = v5;
      if (!*(_BYTE *)(v4 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17), (v6 = *((_QWORD *)this + 3)) != 0)&& (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
LABEL_17:
        v7 = *(_QWORD *)(v2 + 32);
        v20 = *((_QWORD *)this + 4);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            CFRetain(*(CFTypeRef *)(v8 - 8));
            v9 = *(_QWORD *)(v8 + 192);
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 1896);
            v11 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v11 = 646;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 528) = v11 + 16;
            *(_QWORD *)(v11 + 536) = v11 + 16;
            *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v11 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
            v21 = (IPC::Encoder *)v11;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
            LOBYTE(v17[0]) = 0;
            LOBYTE(v18) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v21, 0, (uint64_t)v17, 1);
            if ((_BYTE)v18)
            {
              v13 = v17[0];
              v17[0] = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            v14 = v21;
            v21 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v12);
              WTF::fastFree(v15, v16);
            }
            CFRelease(*(CFTypeRef *)(v8 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FBAE4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;
  WTF *v16;
  void *v17;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setMuted(WebKit::PlaybackSessionModelContext *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  IPC::Encoder *v34;

  v32 = a2;
  if (*((unsigned __int8 *)this + 217) != a2)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        goto LABEL_28;
      v5 = *(_QWORD *)(v4 + 64);
      if (!v5
        || (v6 = *((_QWORD *)this + 32),
            v29[0] = "PlaybackSessionModelContext",
            v29[1] = 28,
            v30 = "setMuted",
            v31 = v6,
            !*(_BYTE *)(v5 + 12))
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29), (v3 = *((_QWORD *)this + 3)) != 0))
      {
LABEL_28:
        v7 = *(_QWORD *)(v3 + 8);
        if (v7)
        {
          v8 = v32;
          v9 = *(_QWORD *)(v7 + 32);
          v33 = *((_QWORD *)this + 4);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              v11 = *(_QWORD *)(v10 + 192);
              v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
              v13 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v13 = 640;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)(v13 + 528) = v13 + 16;
              *(_QWORD *)(v13 + 536) = v13 + 16;
              *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v13 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
              v34 = (IPC::Encoder *)v13;
              IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v33);
              v14 = *(_QWORD *)(v13 + 544);
              v15 = v14 + 1;
              v16 = *(_QWORD *)(v13 + 552);
              if (v16 < v14 + 1)
              {
                v25 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
                do
                {
                  v26 = v25;
                  v25 *= 2;
                }
                while (v26 < v15);
                v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
                if (v27 == (char *)-1)
                {
                  __break(0xC471u);
                  return;
                }
                v17 = v27;
                memcpy(v27, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
                v28 = *(void **)(v13 + 528);
                if (v28 != (void *)(v13 + 16))
                  munmap(v28, *(_QWORD *)(v13 + 552));
                *(_QWORD *)(v13 + 528) = v17;
                *(_QWORD *)(v13 + 552) = v26;
                v18 = *(_QWORD *)(v13 + 544);
              }
              else
              {
                v17 = *(char **)(v13 + 528);
                v18 = *(_QWORD *)(v13 + 544);
              }
              bzero(&v17[v18], v14 - v18);
              *(_QWORD *)(v13 + 544) = v15;
              v19 = (_BYTE *)(*(_QWORD *)(v13 + 528) + v14);
              *(_QWORD *)(v13 + 536) = v19 + 1;
              *v19 = v8;
              LOBYTE(v29[0]) = 0;
              LOBYTE(v30) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v34, 0, (uint64_t)v29, 1);
              if ((_BYTE)v30)
              {
                v21 = v29[0];
                v29[0] = 0;
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              }
              v22 = v34;
              v34 = 0;
              if (v22)
              {
                IPC::Encoder::~Encoder(v22, v20);
                WTF::fastFree(v23, v24);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_1971FBD8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setVolume(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  IPC::Encoder *v34;

  v32 = a2;
  if (*((double *)this + 28) != a2)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        goto LABEL_28;
      v5 = *(_QWORD *)(v4 + 64);
      if (!v5
        || (v6 = *((_QWORD *)this + 32),
            v29[0] = "PlaybackSessionModelContext",
            v29[1] = 28,
            v30 = "setVolume",
            v31 = v6,
            !*(_BYTE *)(v5 + 12))
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29, &v32), (v3 = *((_QWORD *)this + 3)) != 0))
      {
LABEL_28:
        v7 = *(_QWORD *)(v3 + 8);
        if (v7)
        {
          v8 = v32;
          v9 = *(_QWORD *)(v7 + 32);
          v33 = *((_QWORD *)this + 4);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 8);
            if (v10)
            {
              CFRetain(*(CFTypeRef *)(v10 - 8));
              v11 = *(_QWORD *)(v10 + 192);
              v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
              v13 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v13 = 644;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)(v13 + 528) = v13 + 16;
              *(_QWORD *)(v13 + 536) = v13 + 16;
              *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v13 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
              v34 = (IPC::Encoder *)v13;
              IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v33);
              v14 = *(_QWORD *)(v13 + 544);
              v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
              v16 = v15 + 8;
              v17 = *(_QWORD *)(v13 + 552);
              if (v17 < v15 + 8)
              {
                v25 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
                do
                {
                  v26 = v25;
                  v25 *= 2;
                }
                while (v26 < v16);
                v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
                if (v27 == (char *)-1)
                {
                  __break(0xC471u);
                  return;
                }
                v18 = v27;
                memcpy(v27, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
                v28 = *(void **)(v13 + 528);
                if (v28 != (void *)(v13 + 16))
                  munmap(v28, *(_QWORD *)(v13 + 552));
                *(_QWORD *)(v13 + 528) = v18;
                *(_QWORD *)(v13 + 552) = v26;
                v14 = *(_QWORD *)(v13 + 544);
              }
              else
              {
                v18 = *(char **)(v13 + 528);
              }
              bzero(&v18[v14], v15 - v14);
              *(_QWORD *)(v13 + 544) = v16;
              v19 = (double *)(*(_QWORD *)(v13 + 528) + v15);
              *(_QWORD *)(v13 + 536) = v19 + 1;
              *v19 = v8;
              LOBYTE(v29[0]) = 0;
              LOBYTE(v30) = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v34, 0, (uint64_t)v29, 1);
              if ((_BYTE)v30)
              {
                v21 = v29[0];
                v29[0] = 0;
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              }
              v22 = v34;
              v34 = 0;
              if (v22)
              {
                IPC::Encoder::~Encoder(v22, v20);
                WTF::fastFree(v23, v24);
              }
              CFRelease(*(CFTypeRef *)(v10 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_1971FC03C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionModelContext::setPlayingOnSecondScreen(WebKit::PlaybackSessionModelContext *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  IPC::Encoder *v34;

  v32 = a2;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 64);
      if (!v5)
        goto LABEL_27;
      v6 = *((_QWORD *)this + 32);
      v29[0] = "PlaybackSessionModelContext";
      v29[1] = 28;
      v30 = "setPlayingOnSecondScreen";
      v31 = v6;
      if (!*(_BYTE *)(v5 + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29), (v7 = *((_QWORD *)this + 3)) != 0)&& (v3 = *(_QWORD *)(v7 + 8)) != 0)
      {
LABEL_27:
        v8 = v32;
        v9 = *(_QWORD *)(v3 + 32);
        v33 = *((_QWORD *)this + 4);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            v11 = *(_QWORD *)(v10 + 192);
            v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
            v13 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v13 = 642;
            *(_QWORD *)(v13 + 8) = v12;
            *(_QWORD *)(v13 + 528) = v13 + 16;
            *(_QWORD *)(v13 + 536) = v13 + 16;
            *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v13 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
            v34 = (IPC::Encoder *)v13;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v33);
            v14 = *(_QWORD *)(v13 + 544);
            v15 = v14 + 1;
            v16 = *(_QWORD *)(v13 + 552);
            if (v16 < v14 + 1)
            {
              v25 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
              do
              {
                v26 = v25;
                v25 *= 2;
              }
              while (v26 < v15);
              v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
              if (v27 == (char *)-1)
              {
                __break(0xC471u);
                return;
              }
              v17 = v27;
              memcpy(v27, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
              v28 = *(void **)(v13 + 528);
              if (v28 != (void *)(v13 + 16))
                munmap(v28, *(_QWORD *)(v13 + 552));
              *(_QWORD *)(v13 + 528) = v17;
              *(_QWORD *)(v13 + 552) = v26;
              v18 = *(_QWORD *)(v13 + 544);
            }
            else
            {
              v17 = *(char **)(v13 + 528);
              v18 = *(_QWORD *)(v13 + 544);
            }
            bzero(&v17[v18], v14 - v18);
            *(_QWORD *)(v13 + 544) = v15;
            v19 = (_BYTE *)(*(_QWORD *)(v13 + 528) + v14);
            *(_QWORD *)(v13 + 536) = v19 + 1;
            *v19 = v8;
            LOBYTE(v29[0]) = 0;
            LOBYTE(v30) = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v34, 0, (uint64_t)v29, 1);
            if ((_BYTE)v30)
            {
              v21 = v29[0];
              v29[0] = 0;
              if (v21)
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            }
            v22 = v34;
            v34 = 0;
            if (v22)
            {
              IPC::Encoder::~Encoder(v22, v20);
              WTF::fastFree(v23, v24);
            }
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
        }
      }
    }
  }
}

void sub_1971FC2D8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;
  WTF *v18;
  void *v19;

  if (a12 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::PlaybackSessionModelContext::playbackStartedTimeChanged(WTF::StringImpl *this, double a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  double v8;

  v2 = this;
  v8 = a2;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *((_QWORD *)this + 32);
        v7[0] = "PlaybackSessionModelContext";
        v7[1] = 28;
        v7[2] = "playbackStartedTimeChanged";
        v7[3] = v6;
        if (*(_BYTE *)(v5 + 12))
        {
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7, &v8);
          a2 = v8;
        }
      }
    }
  }
  *((double *)v2 + 7) = a2;
  *((_BYTE *)v2 + 64) = 0;
  return this;
}

_QWORD *WebKit::PlaybackSessionModelContext::durationChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  double v20;

  v20 = a2;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *((_QWORD *)this + 32);
        v16 = "PlaybackSessionModelContext";
        v17 = 28;
        v18 = "durationChanged";
        v19 = v6;
        if (*(_BYTE *)(v5 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v16, &v20);
          a2 = v20;
        }
      }
    }
  }
  *((double *)this + 9) = a2;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v16);
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 8 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v11 = (char *)this + 40;
  v12 = v9;
  v13 = v9;
  v14 = v9;
  v15 = v7 + 8 * v8;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  while (v17 != v12)
  {
    (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)v17 + 8) + 48))(*(_QWORD *)(*(_QWORD *)v17 + 8), v20);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::currentTimeChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;

  v23 = a2;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *((_QWORD *)this + 32);
        v19 = "PlaybackSessionModelContext";
        v20 = 28;
        v21 = "currentTimeChanged";
        v22 = v6;
        if (*(_BYTE *)(v5 + 12))
        {
          if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v19, &v23);
            a2 = v23;
          }
        }
      }
    }
  }
  *((double *)this + 10) = a2;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "systemUptime");
  v9 = v8;
  if (*((_BYTE *)this + 64))
    WebKit::PlaybackSessionModelContext::playbackStartedTimeChanged(this, v23);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v19);
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = v10 + 8 * v11;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v14 = (char *)this + 40;
  v15 = v12;
  v16 = v12;
  v17 = v12;
  v18 = v10 + 8 * v11;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  while (v20 != v15)
  {
    (*(void (**)(_QWORD, double, double))(**(_QWORD **)(*(_QWORD *)v20 + 8) + 56))(*(_QWORD *)(*(_QWORD *)v20 + 8), v23, v9);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::bufferedTimeChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v21;

  v21 = a2;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *((_QWORD *)this + 32);
        v17 = "PlaybackSessionModelContext";
        v18 = 28;
        v19 = "bufferedTimeChanged";
        v20 = v6;
        if (*(_BYTE *)(v5 + 12))
        {
          if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v17, &v21);
            a2 = v21;
          }
        }
      }
    }
  }
  *((double *)this + 11) = a2;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v17);
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 8 * v9;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v12 = (char *)this + 40;
  v13 = v10;
  v14 = v10;
  v15 = v10;
  v16 = v8 + 8 * v9;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (v18 != v13)
  {
    (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)v18 + 8) + 64))(*(_QWORD *)(*(_QWORD *)v18 + 8), v21);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::rateChanged(uint64_t a1, char a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  WTF::String *v12;
  WTF::String *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  WTF *v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::String *v30;
  WTF::String *v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *result;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  WTF *v49[2];
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[4];
  _BYTE v56[12];
  int v57;
  int v58;
  _DWORD v59[6];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 64);
      if (v10)
      {
        v11 = *(const char **)(a1 + 256);
        v44 = "PlaybackSessionModelContext";
        v45 = 28;
        v46 = "rateChanged";
        v47 = v11;
        if (*(_BYTE *)(v10 + 12))
        {
          v12 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v44);
          WTF::String::number(v12, a3);
          v13 = (WTF::String *)WTF::String::String((WTF::String *)&v51, ", defaultPlaybackRate");
          WTF::String::number(v13, a4);
          WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, &v54);
          v15 = v50;
          v50 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v51;
          v51 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v14);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v52;
          v52 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v14);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = v53;
          v53 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v14);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = qword_1ECE71348;
          v20 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v20)
          {
            WTF::String::utf8();
            v22 = v49[0] ? (char *)v49[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v56 = v22;
            _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v20 = v49[0];
            v49[0] = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 1)
                v20 = (WTF *)WTF::fastFree(v20, v21);
              else
                --*(_DWORD *)v20;
            }
          }
          if (WebKit2LogMedia)
          {
            v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v24 = *v23;
              if ((v24 & 1) != 0)
                break;
              v25 = __ldaxr(v23);
              if (v25 == v24)
              {
                if (!__stxr(v24 | 1, v23))
                {
                  v26 = WTF::Logger::observers(v20);
                  v27 = *(unsigned int *)(v26 + 12);
                  if ((_DWORD)v27)
                  {
                    v28 = *(uint64_t **)v26;
                    v43 = *(_QWORD *)v26 + 8 * v27;
                    do
                    {
                      v29 = *v28;
                      *(_DWORD *)buf = 0;
                      v30 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v44);
                      v57 = 0;
                      WTF::String::number(v30, a3);
                      v58 = 0;
                      v31 = (WTF::String *)WTF::String::String((WTF::String *)v59, ", defaultPlaybackRate");
                      v59[2] = 0;
                      WTF::String::number(v31, a4);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v49, (uint64_t)buf, 4uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v29 + 16))(v29, &WebKit2LogMedia, 0, v49);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v32);
                      for (i = 56; i != -8; i -= 16)
                      {
                        v34 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v34)
                        {
                          if (*(_DWORD *)v34 == 2)
                            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
                          else
                            *(_DWORD *)v34 -= 2;
                        }
                      }
                      ++v28;
                    }
                    while (v28 != (uint64_t *)v43);
                  }
                  v35 = __ldxr(v23);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v23))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v54;
          v54 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
      }
    }
  }
  *(_BYTE *)(a1 + 96) = a2;
  *(double *)(a1 + 104) = a4;
  *(double *)(a1 + 112) = a3;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 40), buf);
  v37 = *(_QWORD *)(a1 + 40);
  if (v37)
  {
    v38 = *(unsigned int *)(v37 - 4);
    v39 = (const char *)(v37 + 8 * v38);
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
  v44 = (const char *)(a1 + 40);
  v45 = (uint64_t)v39;
  v46 = v39;
  v47 = v39;
  v48 = v37 + 8 * v38;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v44);
  v41 = *(_QWORD *)&v56[4];
  for (j = v45; v41 != j; j = v45)
  {
    (*(void (**)(_QWORD, _QWORD, double, double))(**(_QWORD **)(*(_QWORD *)v41 + 8) + 80))(*(_QWORD *)(*(_QWORD *)v41 + 8), *(unsigned __int8 *)(a1 + 96), *(double *)(a1 + 112), *(double *)(a1 + 104));
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    v41 = *(_QWORD *)&v56[4];
  }
  return result;
}

void sub_1971FCB78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a24)
      {
        if (*(_DWORD *)a24 == 2)
          WTF::StringImpl::destroy(a24, a2);
        else
          *(_DWORD *)a24 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WebKit::PlaybackSessionModelContext::canPlayFastReverseChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_BYTE *)this + 144) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 96))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  _DWORD *v13;

  if (a2 != a1)
  {
    v4 = a1[3];
    v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v4));
      a1[3] = v5;
      v4 = v5;
    }
    v6 = *(_BYTE **)a2;
    if (v4)
    {
      v7 = &v6[24 * v4];
      v8 = *(_QWORD *)a1;
      do
      {
        *(_BYTE *)v8 = *v6;
        WTF::String::operator=((WTF::StringImpl **)(v8 + 8), (WTF::StringImpl *)(v6 + 8));
        *(_BYTE *)(v8 + 16) = v6[16];
        v6 += 24;
        v8 += 24;
      }
      while (v6 != v7);
      v6 = *(_BYTE **)a2;
      v9 = a1[3];
    }
    else
    {
      v9 = 0;
    }
    v10 = a2[3];
    if (v9 != v10)
    {
      v11 = *(_QWORD *)a1 + 24 * v9;
      v12 = &v6[24 * v9];
      do
      {
        *(_BYTE *)v11 = *v12;
        v13 = (_DWORD *)*((_QWORD *)v12 + 1);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v11 + 8) = v13;
        *(_BYTE *)(v11 + 16) = v12[16];
        v12 += 24;
        v11 += 24;
      }
      while (v12 != &v6[24 * v10]);
    }
    a1[3] = v10;
  }
  return a1;
}

_QWORD *WebKit::PlaybackSessionModelContext::audioMediaSelectionIndexChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_QWORD *)this + 21) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 120))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::legibleMediaSelectionIndexChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_QWORD *)this + 24) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 128))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::wirelessVideoPlaybackDisabledChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_BYTE *)this + 216) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 144))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::mutedChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_BYTE *)this + 217) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 152))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::volumeChanged(WebKit::PlaybackSessionModelContext *this, double a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((double *)this + 28) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 160))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::pictureInPictureSupportedChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_BYTE *)this + 232) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 168))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

_QWORD *WebKit::PlaybackSessionModelContext::isInWindowFullscreenActiveChanged(WebKit::PlaybackSessionModelContext *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_BYTE *)this + 234) = a2;
  v4 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v14);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = v4;
  v10 = v7;
  v11 = v7;
  v12 = v7;
  v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v15 + 8) + 184))(*(_QWORD *)(*(_QWORD *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

uint64_t *WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;

  v5 = (uint64_t *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 40), 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v4 + 24 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v15 = WTF::fastMalloc((WTF *)0x108);
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 1;
    *(_QWORD *)v15 = off_1E34C85F0;
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
      goto LABEL_42;
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = a1;
    v18 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v16;
    if (!v18)
      goto LABEL_42;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
    {
LABEL_42:
      do
        v21 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v21 + 1, (unsigned int *)v16));
    }
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 24) = v16;
    *(_QWORD *)(v15 + 32) = a2;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(_BYTE *)(v15 + 64) = 0;
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)(v15 + 88) = 0;
    *(_QWORD *)(v15 + 72) = 0;
    *(_WORD *)(v15 + 96) = 0;
    *(_QWORD *)(v15 + 104) = 0;
    *(_QWORD *)(v15 + 112) = 0;
    WebCore::TimeRanges::create((WebCore::TimeRanges *)v16);
    *(_QWORD *)(v15 + 208) = 0;
    *(_WORD *)(v15 + 216) = 0;
    *(_BYTE *)(v15 + 248) = 0;
    *(_QWORD *)(v15 + 256) = 0;
    *(_QWORD *)(v15 + 128) = 0;
    *(_QWORD *)(v15 + 136) = 0;
    *(_BYTE *)(v15 + 144) = 0;
    *(_OWORD *)(v15 + 152) = 0u;
    *(_OWORD *)(v15 + 168) = 0u;
    *(_OWORD *)(v15 + 184) = 0u;
    *(_WORD *)(v15 + 200) = 0;
    *(_QWORD *)(v15 + 224) = 0;
    *(_DWORD *)(v15 + 231) = 0;
    WebCore::PlaybackSessionInterfaceAVKit::create();
    v22 = (_DWORD *)v11[1];
    v11[1] = v15;
    if (v22)
    {
      if (v22[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[4];
    }
    v23 = (_DWORD *)v11[2];
    v11[2] = v31;
    if (v23)
    {
      if (v23[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      else
        --v23[4];
    }
    v24 = *v5;
    if (*v5)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *v5;
    if (*v5)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        return v11 + 1;
    }
    else if (3 * v29 > 4 * v28)
    {
      return v11 + 1;
    }
    v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v11);
    return v11 + 1;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (uint64_t *)(v4 + 24 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void sub_1971FD690(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int **v3;
  void *v5;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WTF::fastFree(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::PlaybackSessionManagerProxy::removeClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  WebCore::PlaybackSessionInterfaceAVKit *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 56);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 56), &v11);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  else
    v6 = 0;
  if (v6 == result)
    return result;
  if (*((_DWORD *)result + 2) != 1)
  {
    --*((_DWORD *)result + 2);
    return result;
  }
  if (v5)
  {
    v7 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v7 == result)
      goto LABEL_15;
LABEL_13:
    if (v7 != result)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
    goto LABEL_15;
  }
  if (result)
  {
    v7 = 0;
    goto LABEL_13;
  }
LABEL_15:
  v8 = (WebCore::PlaybackSessionInterfaceAVKit *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, v11)[1];
  ++*((_DWORD *)v8 + 4);
  WebCore::PlaybackSessionInterfaceAVKit::invalidate(v8);
  if (*((_DWORD *)v8 + 4) == 1)
    (*(void (**)(WebCore::PlaybackSessionInterfaceAVKit *))(*(_QWORD *)v8 + 8))(v8);
  else
    --*((_DWORD *)v8 + 4);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v11);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
    if (v10 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v10 = 0;
  }
  if (v10 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(a1 + 40), result);
  return result;
}

void sub_1971FD854(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionManagerProxy::setUpPlaybackControlsManagerWithID(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  int v13;

  v3 = a1[6];
  if (v3 != a2)
  {
    if (v3)
      WebKit::PlaybackSessionManagerProxy::removeClientForContext((uint64_t)a1, v3);
    a1[6] = a2;
    v5 = (_DWORD *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface((uint64_t)a1, a2)[1];
    v6 = v5[4];
    v5[4] = v6 + 1;
    if (v6)
      v5[4] = v6;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    v12 = a1[6];
    v13 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(a1 + 7, &v12, &v13, (uint64_t)v11);
    ++*(_DWORD *)(v11[0] + 8);
    v7 = a1[4];
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        CFRetain(*(CFTypeRef *)(v8 - 8));
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
          v10 = *(_QWORD *)(v9 + 8);
        else
          v10 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1576))(v10);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
        CFRelease(*(CFTypeRef *)(v8 - 8));
      }
    }
  }
}

void WebKit::PlaybackSessionManagerProxy::clearPlaybackControlsManager(WebKit::PlaybackSessionManagerProxy *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    WebKit::PlaybackSessionManagerProxy::removeClientForContext((uint64_t)this, v1);
    *((_QWORD *)this + 6) = 0;
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        CFRetain(*(CFTypeRef *)(v4 - 8));
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
          v6 = *(_QWORD *)(v5 + 8);
        else
          v6 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1576))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
        CFRelease(*(CFTypeRef *)(v4 - 8));
      }
    }
  }
}

void WebKit::PlaybackSessionManagerProxy::currentTimeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v6;
  WebKit::PlaybackSessionModelContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;

  v6 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v7 = (WebKit::PlaybackSessionModelContext *)*v6;
  *((_DWORD *)v7 + 4) = *(_DWORD *)(*v6 + 16) + 1;
  WebKit::PlaybackSessionModelContext::currentTimeChanged(v7, a3);
  if (*((_DWORD *)v7 + 4) == 1)
    (*(void (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v7 + 8))(v7);
  else
    --*((_DWORD *)v7 + 4);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      v10 = *(_QWORD *)(v9 + 16);
      v11 = *(unsigned __int8 *)(v10 + 2472);
      v12 = *(_QWORD *)(v10 + 2464);
      if (v11)
        v13 = v12 == a2;
      else
        v13 = 0;
      if (v13)
        WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)(v9 - 16));
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
  }
}

void sub_1971FDAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::bufferedTimeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::bufferedTimeChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FDBA0(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManagerProxy::seekableRangesVectorChanged(WebCore::TimeRanges *a1, uint64_t a2, uint64_t *a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  WTF *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t i;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  WTF *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  WTF *v51[2];
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  WebCore::TimeRanges::create(a1);
  v10 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v10)
  {
    v11 = *a3;
    v12 = v11 + 16 * v10;
    do
    {
      WebCore::TimeRanges::add();
      v11 += 16;
    }
    while (v11 != v12);
  }
  v13 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface((uint64_t)a1, a2);
  v15 = *v13;
  *(_DWORD *)(v15 + 16) = *(_DWORD *)(*v13 + 16) + 1;
  v16 = *(_QWORD *)(v15 + 24);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 64);
      if (v18)
      {
        v19 = *(const char **)(v15 + 256);
        v46 = "PlaybackSessionModelContext";
        v47 = 28;
        v48 = "seekableRangesChanged";
        v49 = v19;
        if (*(_BYTE *)(v18 + 12))
        {
          if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v46);
            WebCore::PlatformTimeRanges::toString((WTF *)((char *)v45 + 8));
            *(_QWORD *)&buf = v53;
            v51[0] = v52;
            result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v51, &v54);
            if (!v54)
            {
              __break(0xC471u);
              return result;
            }
            v22 = v52;
            v52 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v21);
              else
                *(_DWORD *)v22 -= 2;
            }
            v23 = v53;
            v53 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v21);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = qword_1ECE71348;
            v25 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v25)
            {
              WTF::String::utf8();
              v26 = v51[0] ? (char *)v51[0] + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v26;
              _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v25 = v51[0];
              v51[0] = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 1)
                  v25 = (WTF *)WTF::fastFree(v25, v14);
                else
                  --*(_DWORD *)v25;
              }
            }
            if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
            {
              v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v28 = *v27;
                if ((v28 & 1) != 0)
                  break;
                v29 = __ldaxr(v27);
                if (v29 == v28)
                {
                  if (!__stxr(v28 | 1, v27))
                  {
                    v30 = WTF::Logger::observers(v25);
                    v31 = *(unsigned int *)(v30 + 12);
                    if ((_DWORD)v31)
                    {
                      v32 = *(uint64_t **)v30;
                      v33 = *(_QWORD *)v30 + 8 * v31;
                      do
                      {
                        v34 = *v32;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v46);
                        v56 = 0;
                        WebCore::PlatformTimeRanges::toString((WTF *)((char *)v45 + 8));
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v51, (uint64_t)&buf, 2uLL);
                        (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v34 + 16))(v34, &WebKit2LogMedia, 3, v51);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v35);
                        for (i = 24; i != -8; i -= 16)
                        {
                          v37 = *(WTF::StringImpl **)((char *)&buf + i);
                          *(_QWORD *)((char *)&buf + i) = 0;
                          if (v37)
                          {
                            if (*(_DWORD *)v37 == 2)
                              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v14);
                            else
                              *(_DWORD *)v37 -= 2;
                          }
                        }
                        ++v32;
                      }
                      while (v32 != (uint64_t *)v33);
                    }
                    v38 = __ldxr(v27);
                    if (v38 == 1)
                    {
                      if (!__stlxr(0, v27))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v39 = v54;
            v54 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v14);
              else
                *(_DWORD *)v39 -= 2;
            }
          }
        }
      }
    }
  }
  ++*(_DWORD *)v45;
  v40 = *(_QWORD *)(v15 + 120);
  *(_QWORD *)(v15 + 120) = v45;
  if (v40)
    WTF::RefCounted<WebCore::TimeRanges>::deref(v40, v14);
  *(double *)(v15 + 128) = a4;
  *(double *)(v15 + 136) = a5;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v15 + 40), &buf);
  v41 = *(_QWORD *)(v15 + 40);
  if (v41)
  {
    v42 = *(unsigned int *)(v41 - 4);
    v43 = (const char *)(v41 + 8 * v42);
  }
  else
  {
    v43 = 0;
    v42 = 0;
  }
  v46 = (const char *)(v15 + 40);
  v47 = (uint64_t)v43;
  v48 = v43;
  v49 = v43;
  v50 = v41 + 8 * v42;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v46);
  while (*((_QWORD *)&buf + 1) != v47)
  {
    (*(void (**)(_QWORD, WTF *, double, double))(**(_QWORD **)(**((_QWORD **)&buf + 1) + 8) + 88))(*(_QWORD *)(**((_QWORD **)&buf + 1) + 8), v45, a4, a5);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&buf);
  }
  if (*(_DWORD *)(v15 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  else
    --*(_DWORD *)(v15 + 16);
  result = (uint64_t)v45;
  if (v45)
    return WTF::RefCounted<WebCore::TimeRanges>::deref((uint64_t)v45, v44);
  return result;
}

void sub_1971FE050(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22)
{
  _DWORD *v22;
  unsigned __int8 *v23;
  int v25;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      if (v22[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[4];
      if (a10)
        WTF::RefCounted<WebCore::TimeRanges>::deref((uint64_t)a10, a2);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WebKit::PlaybackSessionManagerProxy::canPlayFastReverseChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::canPlayFastReverseChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE228(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::audioMediaSelectionOptionsChanged(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v7 = *v6;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(*v6 + 16) + 1;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 152), a3);
  *(_QWORD *)(v7 + 168) = a4;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v7 + 40), &v17);
  v8 = *(_QWORD *)(v7 + 40);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 8 * v9;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v12 = v7 + 40;
  v13 = v10;
  v14 = v10;
  v15 = v10;
  v16 = v8 + 8 * v9;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (v18 != v13)
  {
    (*(void (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(*(_QWORD *)v18 + 8) + 104))(*(_QWORD *)(*(_QWORD *)v18 + 8), a3, a4);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  if (*(_DWORD *)(v7 + 16) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 16);
  return result;
}

void sub_1971FE358(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionOptionsChanged(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v7 = *v6;
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(*v6 + 16) + 1;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 176), a3);
  *(_QWORD *)(v7 + 192) = a4;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v7 + 40), &v17);
  v8 = *(_QWORD *)(v7 + 40);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 8 * v9;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v12 = v7 + 40;
  v13 = v10;
  v14 = v10;
  v15 = v10;
  v16 = v8 + 8 * v9;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (v18 != v13)
  {
    (*(void (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(*(_QWORD *)v18 + 8) + 112))(*(_QWORD *)(*(_QWORD *)v18 + 8), a3, a4);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  if (*(_DWORD *)(v7 + 16) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 16);
  return result;
}

void sub_1971FE48C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::audioMediaSelectionIndexChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::audioMediaSelectionIndexChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE524(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionIndexChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::legibleMediaSelectionIndexChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE5B8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::externalPlaybackPropertiesChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v9 = *v8;
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(*v8 + 16) + 1;
  *(_BYTE *)(v9 + 200) = a3;
  *(_BYTE *)(v9 + 201) = a4;
  WTF::String::operator=((WTF::StringImpl **)(v9 + 208), a5);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v9 + 40), &v19);
  v10 = *(_QWORD *)(v9 + 40);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = v10 + 8 * v11;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v14 = v9 + 40;
  v15 = v12;
  v16 = v12;
  v17 = v12;
  v18 = v10 + 8 * v11;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  while (v20 != v15)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl *))(**(_QWORD **)(*(_QWORD *)v20 + 8) + 136))(*(_QWORD *)(*(_QWORD *)v20 + 8), a3, a4, a5);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
  }
  if (*(_DWORD *)(v9 + 16) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  --*(_DWORD *)(v9 + 16);
  return result;
}

void sub_1971FE700(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::wirelessVideoPlaybackDisabledChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::wirelessVideoPlaybackDisabledChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE798(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::mutedChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::mutedChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE82C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::volumeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::volumeChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE8CC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::durationChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::durationChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FE96C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::PlaybackSessionManagerProxy::playbackStartedTimeChanged(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WTF::StringImpl *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::playbackStartedTimeChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FEA0C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

void WebKit::PlaybackSessionManagerProxy::rateChanged(uint64_t a1, uint64_t a2, char a3, double a4, double a5)
{
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;

  v10 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v11 = (_DWORD *)*v10;
  v11[4] = *(_DWORD *)(*v10 + 16) + 1;
  WebKit::PlaybackSessionModelContext::rateChanged((uint64_t)v11, a3, a4, a5);
  if (v11[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
  else
    --v11[4];
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      CFRetain(*(CFTypeRef *)(v13 - 8));
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(unsigned __int8 *)(v14 + 2472);
      v16 = *(_QWORD *)(v14 + 2464);
      if (v15)
        v17 = v16 == a2;
      else
        v17 = 0;
      if (v17)
        WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)(v13 - 16));
      CFRelease(*(CFTypeRef *)(v13 - 8));
    }
  }
}

void sub_1971FEB14(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::pictureInPictureSupportedChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::pictureInPictureSupportedChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FEBB8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::PlaybackSessionManagerProxy::isInWindowFullscreenActiveChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  WebKit::PlaybackSessionModelContext *v5;
  _QWORD *result;

  v4 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = (WebKit::PlaybackSessionModelContext *)*v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*v4 + 16) + 1;
  result = WebKit::PlaybackSessionModelContext::isInWindowFullscreenActiveChanged(v5, a3);
  if (*((_DWORD *)v5 + 4) == 1)
    return (_QWORD *)(*(uint64_t (**)(WebKit::PlaybackSessionModelContext *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 4);
  return result;
}

void sub_1971FEC4C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PlaybackSessionManagerProxy::wirelessVideoPlaybackDisabled(WebKit::PlaybackSessionManagerProxy *this)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 5, (_QWORD *)this + 6);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  if (v3)
    v3 += 3 * *((unsigned int *)v3 - 1);
  return v3 == v2 || *(_BYTE *)(v2[1] + 216) != 0;
}

uint64_t WebKit::PlaybackSessionModelContext::wirelessVideoPlaybackDisabled(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 216);
}

uint64_t *WebKit::PlaybackSessionManagerProxy::controlsManagerInterface@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this[6];
  if (v3)
  {
    this = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface((uint64_t)this, v3);
    v4 = this[1];
    ++*(_DWORD *)(v4 + 16);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

BOOL WebKit::PlaybackSessionManagerProxy::isPaused(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v9;

  v9 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v9);
  v4 = *(uint64_t **)(a1 + 40);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3)
    return 0;
  v5 = v3[1];
  v6 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = v6 + 1;
  v7 = (*(_BYTE *)(v5 + 96) & 3) == 0;
  if (v6)
    *(_DWORD *)(v5 + 16) = v6;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v7;
}

uint64_t WebKit::PlaybackSessionModelContext::isStalled(WebKit::PlaybackSessionModelContext *this)
{
  return (*((unsigned __int8 *)this + 96) >> 1) & 1;
}

uint64_t WebKit::PlaybackSessionManagerProxy::setLogIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;

  result = *WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1, a2);
  v5 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v5 + 1;
  *(_QWORD *)(result + 256) = a3;
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 16) = v5;
  return result;
}

uint64_t API::NavigationClient::didChangeBackForwardList()
{
  return 0;
}

uint64_t WebKit::PageClient::isViewVisibleOrOccluded(WebKit::PageClient *this)
{
  return (*(uint64_t (**)(WebKit::PageClient *))(*(_QWORD *)this + 72))(this);
}

uint64_t WebKit::PageClient::isVisuallyIdle(WebKit::PageClient *this)
{
  return (*(unsigned int (**)(WebKit::PageClient *))(*(_QWORD *)this + 72))(this) ^ 1;
}

uint64_t WebKit::PageClient::viewLayerHostingMode(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::processWillSwap(WebKit::PageClient *this)
{
  return (*(uint64_t (**)(WebKit::PageClient *))(*(_QWORD *)this + 136))(this);
}

uint64_t WebKit::PageClient::handleRunOpenPanel()
{
  return 0;
}

uint64_t WebKit::PageClient::showShareSheet()
{
  return 0;
}

uint64_t WebKit::PageClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  _BYTE v6[16];
  char v7;

  v6[0] = 0;
  v7 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
    return WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  return result;
}

void sub_1971FEEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClient::showSafeBrowsingWarning(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[40];
  int v6;
  char v7;

  v5[0] = 1;
  v6 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C8C20[v6])(&v7, v5);
  return result;
}

void sub_1971FEF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E34C8C20[a15])(v16 - 17, &a10);
  _Unwind_Resume(a1);
}

float WebKit::PageClient::rootViewToWebView(WebKit::PageClient *this, const FloatRect *a2)
{
  return a2->m_location.m_x;
}

float WebKit::PageClient::webViewToRootView(WebKit::PageClient *this, const FloatPoint *a2)
{
  return a2->m_x;
}

uint64_t WebKit::PageClient::runModalJavaScriptDialog(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1971FF040(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClient::createVisibilityPropagationView(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::effectiveAppearanceIsDark(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::effectiveUserInterfaceLevelIsElevated(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::isTextRecognitionInFullscreenVideoEnabled(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::hasSafeBrowsingWarning(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::dataOwnerForPasteboard()
{
  return 0;
}

uint64_t WebKit::PageClient::hasResizableWindows(WebKit::PageClient *this)
{
  return 0;
}

uint64_t WebKit::PageClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  void *v7;
  CFTypeRef v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CFTypeRef cf;

  cf = 0;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 16))(v6, &v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v7);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
  return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

void sub_1971FF164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  CFTypeRef v21;
  void *v22;
  void *v23;

  v18 = v17;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v20);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v22);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v23);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClient::computeHasVisualSearchResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1971FF1EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1971FF248(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClient::windowIsFrontWindowUnderMouse(WebKit::PageClient *this, const NativeWebMouseEvent *a2)
{
  return 0;
}

uint64_t WebKit::PageClient::activeTouchIdentifierForGestureRecognizer(WebKit::PageClient *this, UIGestureRecognizer *a2)
{
  return 0;
}

uint64_t WebKit::PlaybackSessionModelContext::ptrCount(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionModelContext::ptrCountWithoutThreadCheck(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionModelContext::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 20);
  return this;
}

uint64_t WebKit::PlaybackSessionModelContext::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

double WebKit::PlaybackSessionModelContext::playbackStartedTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 7);
}

double WebKit::PlaybackSessionModelContext::duration(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 9);
}

double WebKit::PlaybackSessionModelContext::currentTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 10);
}

double WebKit::PlaybackSessionModelContext::bufferedTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 11);
}

uint64_t WebKit::PlaybackSessionModelContext::isScrubbing(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 97);
}

double WebKit::PlaybackSessionModelContext::defaultPlaybackRate(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 13);
}

double WebKit::PlaybackSessionModelContext::playbackRate(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 14);
}

uint64_t WebKit::PlaybackSessionModelContext::seekableRanges@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 120);
  ++*v2;
  *a2 = v2;
  return this;
}

double WebKit::PlaybackSessionModelContext::seekableTimeRangesLastModifiedTime(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 16);
}

double WebKit::PlaybackSessionModelContext::liveUpdateInterval(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 17);
}

uint64_t WebKit::PlaybackSessionModelContext::canPlayFastReverse(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 144);
}

uint64_t WebKit::PlaybackSessionModelContext::audioMediaSelectionOptions@<X0>(WebKit::PlaybackSessionModelContext *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t *)this + 19);
}

uint64_t WebKit::PlaybackSessionModelContext::audioMediaSelectedIndex(WebKit::PlaybackSessionModelContext *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t WebKit::PlaybackSessionModelContext::legibleMediaSelectionOptions@<X0>(WebKit::PlaybackSessionModelContext *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t *)this + 22);
}

uint64_t WebKit::PlaybackSessionModelContext::legibleMediaSelectedIndex(WebKit::PlaybackSessionModelContext *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t WebKit::PlaybackSessionModelContext::externalPlaybackEnabled(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 200);
}

uint64_t WebKit::PlaybackSessionModelContext::externalPlaybackTargetType(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 201);
}

uint64_t WebKit::PlaybackSessionModelContext::externalPlaybackLocalizedDeviceName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 208);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::PlaybackSessionModelContext::isMuted(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 217);
}

double WebKit::PlaybackSessionModelContext::volume(WebKit::PlaybackSessionModelContext *this)
{
  return *((double *)this + 28);
}

uint64_t WebKit::PlaybackSessionModelContext::isPictureInPictureSupported(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t WebKit::PlaybackSessionModelContext::isPictureInPictureActive(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 233);
}

uint64_t WebKit::PlaybackSessionModelContext::isInWindowFullscreenActive(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 234);
}

uint64_t WebKit::PlaybackSessionModelContext::soundStageSize(WebKit::PlaybackSessionModelContext *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)>)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1971FF428(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C8878;
  *(_QWORD *)(v4 + 8) = v3;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1971FF4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C8878;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C8878;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestAVCaptureAccessForType(WebKit::MediaPermissionType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1971FF5C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(SFSpeechRecognizerAuthorizationStatus)>::fromCallable<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,SFSpeechRecognizerAuthorizationStatus)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C88C0;
  *(_QWORD *)(v4 + 8) = v3;
  *(_BYTE *)(v4 + 16) = a2 == 3;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1971FF66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(SFSpeechRecognizerAuthorizationStatus)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C88C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(SFSpeechRecognizerAuthorizationStatus)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C88C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestSpeechRecognitionAccess(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(SFSpeechRecognizerAuthorizationStatus)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1971FF760(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22HTMLModelElementCameraENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_ENUlPKvE_8__invokeESO_(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t _ZZN3WTF8BlockPtrIFvDv3_fP7NSErrorEE12fromCallableIZN6WebKit22ModelElementController24getCameraForModelElementENS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEE3__0EES5_T_ENUlPvS1_S3_E_8__invokeESN_S1_S3_(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  unint64_t v4;
  __n128 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  __n128 *v10;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v5 = (__n128 *)WTF::fastMalloc((WTF *)0x18);
    v5->n128_u64[0] = (unint64_t)&off_1E34C8918;
    v5->n128_u64[1] = v4;
    v5[1].n128_u64[0] = v3;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v5 = (__n128 *)WTF::fastMalloc((WTF *)0x30);
    v5->n128_u64[0] = (unint64_t)&off_1E34C8940;
    v5[1] = a3;
    v5[2].n128_u64[0] = v7;
    v5[2].n128_u64[1] = v6;
  }
  v10 = v5;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(__n128 *))(v10->n128_u64[0] + 8))(v10);
  return result;
}

void sub_1971FF92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C8918;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C8918;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE_vJEE4callEv(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef cf;
  char v20;
  _BYTE v21[80];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    WebCore::ResourceErrorBase::ResourceErrorBase((uint64_t)&v11, 1);
    v14 = 0;
    v15 = 1;
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v16, (uint64_t *)&v11);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v21, (uint64_t *)&v16);
    v22 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()((uint64_t *)v2 + 2, (uint64_t)v21);
    if (v22 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C88D8[v22])(&v20, v21);
    v22 = -1;
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
    v5 = v18;
    v18 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v17;
    v17 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v16;
    v16 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v14;
    v14 = 0;
    if (v8)
      CFRelease(v8);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v3);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v3);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971FFC94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,CFTypeRef cf)
{
  uint64_t v28;
  uint64_t v30;

  v30 = *(unsigned int *)(v28 - 48);
  if ((_DWORD)v30 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C88D8[v30])(v28 - 129, v28 - 128);
  *(_DWORD *)(v28 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a18)
    CFRelease(a18);
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE0_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C8940;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C8940;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22ModelElementController24getCameraForModelElementENS2_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENS9_13ResourceErrorEEEEEEEN3__0clEDv3_fP7NSErrorEUlvE0_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  double v2;
  char v3;
  float64x2_t v4;
  double v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 32);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(float *)(result + 24);
    v4 = vcvtq_f64_f32(*(float32x2_t *)(result + 16));
    v5 = v2;
    v6 = 0;
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()((uint64_t *)(result + 40), (uint64_t)&v4);
    if (v6 != -1)
      return ((uint64_t (*)(char *, float64x2_t *))off_1E34C88D8[v6])(&v3, &v4);
  }
  return result;
}

void sub_1971FFF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34C88D8[a24])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C8998;
  v6[1] = a3;
  v6[2] = v4;
  v6[3] = v5;
  v8 = v6;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

void sub_197200124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C8998;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C8998;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ModelElementController::setAnimationIsPlayingForModelElement(WebKit::ModelIdentifier,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::call(_QWORD *result)
{
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;

  v1 = result[2];
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = result[1] == 0;
      v3 = result[3];
      result[3] = 0;
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 16))(v3, v2);
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return result;
}

void sub_1972002DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

Class ___ZN6WebKitL20initWKMarketplaceKitEv_block_invoke()
{
  Class result;

  WebKit::WebKitSwiftLibrary((WebKit *)1);
  result = objc_getClass("WKMarketplaceKit");
  qword_1ECE72A70 = (uint64_t)result;
  WebKit::getWKMarketplaceKitClass = WebKit::WKMarketplaceKitFunction;
  return result;
}

uint64_t WebKit::WKMarketplaceKitFunction(WebKit *this)
{
  return qword_1ECE72A70;
}

WTF::StringImpl *WebKit::interceptMarketplaceKitNavigation(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t (*v16)();
  int v17;
  NSObject *v18;
  WTF::StringImpl *v19;
  uint64_t (*v20)();
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *result;
  const void *v25;
  WTF::StringImpl *v26;
  const void *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  WebCore::SecurityOriginData *v31;
  char v32;
  int isNull;
  uint64_t (*v34)();
  const void *v35;
  const void *v36;
  WebKit *v37;
  uint64_t v38;
  void *WKMarketplaceKitClass;
  WTF::StringImpl *v40;
  __int128 v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  double v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  __int128 v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  unsigned int *v52;
  uint8_t buf[16];
  _OWORD v54[3];
  unsigned int *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 264);
    v2 = *(_QWORD *)(v6 + 272);
    v8 = API::Object::newObject(0x28uLL, 11);
    *(_QWORD *)v8 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v8);
    *(_QWORD *)v8 = &off_1E34AD1B8;
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v2;
    *(_BYTE *)(v8 + 32) = 0;
    v9 = v7 & 0xFFFFFFFFFFFFFF00;
    CFRelease(*(CFTypeRef *)(v8 + 8));
    v5 = *a1;
    LOBYTE(v6) = 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    v9 = 0;
  }
  *(_QWORD *)&v47 = v9 | v7;
  *((_QWORD *)&v47 + 1) = v2;
  LOBYTE(v48) = v6;
  v10 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v5 + 40));
  v11 = *(WTF::StringImpl **)v10;
  if (*(_QWORD *)v10)
    *(_DWORD *)v11 += 2;
  v49 = v11;
  v12 = *(_OWORD *)(v10 + 24);
  v50 = *(_OWORD *)(v10 + 8);
  v51 = v12;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v13 = *(unsigned int **)(a2 + 24);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v52 = v13;
  v15 = *a1;
  if (*(unsigned __int8 *)(*a1 + 369) - 1 > 1
    || (*(_QWORD *)(v15 + 288)
      ? (v16 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance)
      : (v16 = 0),
        !v16
     || (*(_BYTE *)(v15 + 530) & 1) == 0
     || (v17 = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v15 + 688)), v15 = *a1, v17)))
  {
    v18 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
    {
      v29 = *(unsigned __int8 *)(v15 + 369);
      v30 = *(_QWORD *)(v15 + 288);
      v31 = (WebCore::SecurityOriginData *)(v15 + 688);
      v32 = *(_BYTE *)(v15 + 530);
      isNull = WebCore::SecurityOriginData::isNull(v31);
      if (v30)
        v34 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
      else
        v34 = 0;
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = (v29 - 1) < 2;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v34 != 0;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v54[0]) = (v32 & 1) == 0;
      WORD2(v54[0]) = 1024;
      *(_DWORD *)((char *)v54 + 6) = isNull;
      _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "NavigationState: can't handle MarketplaceKit navigation with shouldOpenExternalSchemes: %d, isProcessingUserGesture: %d, isRedirect: %d, requesterTopOriginIsNull: %d", buf, 0x1Au);
      v15 = *a1;
    }
    if (*(_QWORD *)(v15 + 288))
      v20 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
    else
      v20 = 0;
    if (!v20 || (*(_BYTE *)(v15 + 530) & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v21 = *(WTF::StringImpl **)buf;
      WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_1::operator()((WTF::StringImpl *)&v47, *(WTF::StringImpl **)buf);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    goto LABEL_25;
  }
  WebCore::SecurityOriginData::toURL((WebCore::SecurityOriginData *)(v15 + 688));
  v25 = (const void *)WTF::URL::operator NSURL *();
  v27 = v25;
  if (v25)
    CFRetain(v25);
  v28 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a1 + 40));
  v35 = (const void *)WTF::URL::operator NSURL *();
  v36 = v35;
  if (v35 && (v37 = (WebKit *)CFRetain(v35), v27))
  {
    WebKit::getWKMarketplaceKitClass(v37);
    v38 = objc_opt_respondsToSelector();
    if ((v38 & 1) != 0)
    {
      WKMarketplaceKitClass = (void *)WebKit::getWKMarketplaceKitClass((WebKit *)v38);
      *(_OWORD *)buf = v47;
      v40 = v49;
      v49 = 0;
      v52 = 0;
      *(_QWORD *)&v54[0] = v48;
      *((_QWORD *)&v54[0] + 1) = v40;
      v41 = v50;
      LODWORD(v50) = v50 & 0xFFFFFFFE;
      v54[1] = v41;
      v54[2] = v51;
      v55 = v13;
      v42 = malloc_type_malloc(0x68uLL, 0x10E004069260048uLL);
      *v42 = MEMORY[0x1E0C809A0];
      v42[1] = 50331650;
      v42[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
      v42[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::descriptor;
      *((_OWORD *)v42 + 2) = *(_OWORD *)buf;
      v42[6] = *(_QWORD *)&v54[0];
      v44 = WTF::URL::URL((uint64_t)(v42 + 7), (uint64_t *)v54 + 1);
      v45 = (WTF::StringImpl *)*((_QWORD *)&v54[0] + 1);
      v42[12] = v55;
      v55 = 0;
      *((_QWORD *)&v54[0] + 1) = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v43);
        else
          *(_DWORD *)v45 -= 2;
      }
      objc_msgSend(WKMarketplaceKitClass, "requestAppInstallationWithTopOrigin:url:completionHandler:", v27, v36, v42, v44);
      _Block_release(v42);
      v13 = 0;
    }
  }
  else
  {
    v46 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v27 != 0;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v36 != 0;
      _os_log_error_impl(&dword_196BCC000, v46, OS_LOG_TYPE_ERROR, "NavigationState: can't handle MarketplaceKit navigation with requesterTopOriginURL: %d url: %d", buf, 0xEu);
    }
    if (!v36)
      goto LABEL_57;
  }
  CFRelease(v36);
LABEL_57:
  if (v27)
    CFRelease(v27);
LABEL_25:
  v52 = 0;
  if (v13)
  {
    do
    {
      v22 = __ldaxr(v13);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v13));
    if (!v23)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v19);
    }
  }
  result = v49;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v49, v19);
    else
      *(_DWORD *)v49 -= 2;
  }
  return result;
}

void sub_197200844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int *a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27)
{
  const void *v27;
  const void *v28;
  const void *v29;
  void *v31;
  unsigned int v32;
  unsigned int v33;

  _Block_release(v27);
  CFRelease(v29);
  CFRelease(v28);
  if (a18)
  {
    do
    {
      v32 = __ldaxr(a18);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, a18));
    if (!v33)
    {
      atomic_store(1u, a18);
      WTF::fastFree((WTF *)a18, v31);
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEE_block_invoke(WTF::RunLoop *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  WTF::RunLoop::main(a1);
  v4 = *((_QWORD *)a1 + 4);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E34C8A68;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_197200A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c179_ZTSKZN6WebKitL22tryInterceptNavigationEON3WTF3RefIN3API16NavigationActionENS0_12RawPtrTraitsIS3_EENS0_21DefaultRefDerefTraitsIS3_EEEERNS_12WebPageProxyEONS0_8FunctionIFvbEEEE3__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void WebKit::trySOAuthorization(uint64_t *a1, WebKit::WebsiteDataStore **a2, const WTF::StringImpl *a3)
{
  WebKit::SOAuthorizationCoordinator *v6;

  if (*(_BYTE *)(*a1 + 281))
  {
    v6 = WebKit::WebsiteDataStore::soAuthorizationCoordinator(a2[33], (const WebKit::WebPageProxy *)a2, a3);
    WebKit::SOAuthorizationCoordinator::tryAuthorize((uint64_t)v6, a1, (uint64_t)a2, (uint64_t *)a3);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, 0);
  }
}

WTF::StringImpl *WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_1::operator()(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 *v12;
  __int16 v13;
  WTF::StringImpl **v14;
  _QWORD *v15;
  _QWORD v16[2];
  __int128 v17;

  if (*((_BYTE *)result + 16))
  {
    v2 = *((_QWORD *)result + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v8 = *(_OWORD *)result;
        v4 = (WTF::StringImpl *)*((_QWORD *)result + 3);
        if (v4)
          *(_DWORD *)v4 += 2;
        v10 = v4;
        if (a2)
          *(_DWORD *)a2 += 2;
        v9 = a2;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Can't handle MarketplaceKit link ", 34, (uint64_t *)&v10, (uint64_t)" due to error: ", 16, (uint64_t *)&v9, &v11);
        v17 = v8;
        v16[0] = 0;
        v16[1] = 0;
        v12 = &v17;
        v13 = 514;
        v14 = &v11;
        v15 = v16;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AddConsoleMessage>(*(_QWORD *)(v3 + 192), (uint64_t)&v12, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896), 0);
        v6 = v11;
        v11 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = v9;
        v9 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v5);
          else
            *(_DWORD *)v7 -= 2;
        }
        result = v10;
        v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_197200C0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *result;

  v3 = *(unsigned int **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  result = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0>(WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_0)::{lambda(void *,NSError *)#1}::__invoke(WTF::StringImpl *result, void *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (a2)
  {
    v2 = (WTF::StringImpl *)((char *)result + 32);
    MEMORY[0x19AEABCC8](&v4, objc_msgSend(a2, "description"));
    WebKit::interceptMarketplaceKitNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &)::$_1::operator()(v2, v4);
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197200D40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *a1 = &off_1E34C8A40;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34C8A40;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1[2];
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        WebKit::WebPageProxy::willOpenAppLink((unsigned int *)(v5 - 16));
    }
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      WebKit::trySOAuthorization(a1 + 1, (WebKit::WebsiteDataStore **)(v6 - 16), (const WTF::StringImpl *)(a1 + 3));
      return;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::tryInterceptNavigation(WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::WebPageProxy &,WTF::Function<void ()(BOOL)> &&)::$_1::operator() const(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result;
  void *v3;
  WTF *v4;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)v4;
    *(_QWORD *)v4 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WTF::fastFree(v4, v3);
  }
  return result;
}

uint64_t WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled((SEL *)a1[2]);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(a1[2] + 24) = 1;
    if (a3)
    {
      v7 = a3 + 8;
    }
    else
    {
      v7 = a1[5];
      if (!v7)
      {
LABEL_17:
        v8 = a1[3];
        a1[3] = 0;
        v10 = *a1;
        v9 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
        *v11 = &off_1E34C8AB0;
        v11[1] = v9;
        v11[2] = v8;
        v11[3] = a2;
        v11[4] = v10;
        v11[5] = v7;
        v12 = v11;
        WTF::ensureOnMainRunLoop();
        result = (uint64_t)v12;
        if (v12)
          return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
        return result;
      }
    }
    CFRetain(*(CFTypeRef *)(v7 + 8));
    if (*(_QWORD *)(v7 + 136) && *((_BYTE *)a1 + 32))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("WKWebpagePreferences._websiteDataStore must be nil for subframe navigations."));
    if (*(_QWORD *)(v7 + 144) && *((_BYTE *)a1 + 32))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("WKWebpagePreferences._userContentController must be nil for subframe navigations."));
    if (*(_QWORD *)(v7 + 64) && *((_BYTE *)a1 + 32))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("WKWebpagePreferences._customUserAgent must be nil for subframe navigations."));
    if (*(_QWORD *)(v7 + 80) && *((_BYTE *)a1 + 32))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("WKWebpagePreferences._customNavigatorPlatform must be nil for subframe navigations."));
    goto LABEL_17;
  }
  return result;
}

void sub_1972010E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

uint64_t WTF::BlockPtr<void ()(WKNavigationActionPolicy,WKWebpagePreferences *)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0)::{lambda(void *,WKNavigationActionPolicy,WKWebpagePreferences *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()((uint64_t *)(a1 + 32), a2, a3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34C8AB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C8AB0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WebKit *v12;
  const WTF::URL *v13;
  int isMarketplaceKitURL;
  WebKit::WebsiteDataStore **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint8_t v20[16];

  if (*(_QWORD *)(a1 + 24)
    && WebKit::isUnsupportedWebExtensionNavigation(*(_QWORD **)(a1 + 8), *(CFTypeRef ***)(a1 + 16)))
  {
    v2 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v20 = 0;
      _os_log_debug_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEBUG, "Ignoring unsupported web extension navigation", v20, 2u);
    }
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 32), 0);
    return;
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(CFTypeRef **)(v3 + 240);
  if (v4)
    goto LABEL_7;
  v10 = *(_QWORD *)(v3 + 248);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v4 = (CFTypeRef *)(v11 - 16);
LABEL_7:
      CFRetain(v4[1]);
      WebKit::WebExtensionController::updateWebsitePoliciesForNavigation((WebKit::WebExtensionController *)v4, *(API::WebsitePolicies **)(a1 + 40), *(API::NavigationAction **)(a1 + 8));
      CFRelease(v4[1]);
    }
  }
  v5 = *(_QWORD *)(a1 + 24);
  switch(v5)
  {
    case 0:
      goto LABEL_15;
    case 1:
    case 4:
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v9 = &off_1E34C8AD8;
      v9[1] = v5;
      v9[2] = v7;
      v9[3] = v8;
      *(_QWORD *)v20 = v9;
      WebKit::tryInterceptNavigation((uint64_t *)(a1 + 8), v6, (const WTF::StringImpl *)v20);
      goto LABEL_18;
    case 2:
      WebKit::WebFramePolicyListenerProxy::download(*(WTF **)(a1 + 32));
      return;
    case 3:
      v12 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(a1 + 8) + 40));
      isMarketplaceKitURL = WebKit::isMarketplaceKitURL(v12, v13);
      v15 = *(WebKit::WebsiteDataStore ***)(a1 + 16);
      if (isMarketplaceKitURL)
      {
        WebKit::interceptMarketplaceKitNavigation((uint64_t *)(a1 + 8), *(_QWORD *)(a1 + 16));
LABEL_15:
        WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 32), 0);
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v18 = &off_1E34C8B00;
        v18[1] = v16;
        v18[2] = v17;
        *(_QWORD *)v20 = v18;
        WebKit::trySOAuthorization((uint64_t *)(a1 + 8), v15, (const WTF::StringImpl *)v20);
LABEL_18:
        v19 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      break;
    default:
      return;
  }
}

void sub_1972014C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34C8AD8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C8AD8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(_QWORD *a1, int a2)
{
  WTF *v3;

  v3 = (WTF *)a1[2];
  if (a2)
    WebKit::WebFramePolicyListenerProxy::ignore(v3, 1);
  else
    WebKit::WebFramePolicyListenerProxy::use((uint64_t)v3, a1[3], a1[1] == 4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#2},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34C8B00;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#2},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C8B00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()(WKNavigationActionPolicy,WKWebpagePreferences *)::{lambda(void)#1}::operator()(void)::{lambda(BOOL)#2},void,BOOL>::call(uint64_t a1, int a2)
{
  WTF *v3;

  v3 = *(WTF **)(a1 + 8);
  if (a2)
    WebKit::WebFramePolicyListenerProxy::ignore(v3, 1);
  else
    WebKit::WebFramePolicyListenerProxy::use((uint64_t)v3, *(_QWORD *)(a1 + 16), 0);
}

void WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

uint64_t WTF::BlockPtr<void ()(WKNavigationActionPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_1)::{lambda(void *,WKNavigationActionPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  return WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_0::operator()((uint64_t *)(a1 + 32), a2, 0);
}

void WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(WKNavigationResponsePolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0)::{lambda(void *,WKNavigationResponsePolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C8B68;
    v6[1] = a2;
    v6[2] = v5;
    v7 = v6;
    WTF::ensureOnMainRunLoop();
    result = (uint64_t)v7;
    if (v7)
      return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_197201824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0::operator()(WKNavigationResponsePolicy)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C8B68;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0::operator()(WKNavigationResponsePolicy)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C8B68;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationResponse(WebKit::WebPageProxy &,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&>> &&)::$_0::operator()(WKNavigationResponsePolicy)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (v1 == 2)
    {
      WebKit::WebFramePolicyListenerProxy::download(*(WTF **)(a1 + 16));
    }
    else if (v1 == 1)
    {
      WebKit::WebFramePolicyListenerProxy::use(*(_QWORD *)(a1 + 16), 0, 0);
    }
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 0);
  }
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  NSURLSessionAuthChallengeDisposition v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef cf;

  result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
    v9 = WebKit::toAuthenticationChallengeDisposition(a2, v7);
    MEMORY[0x19AEAC4CC](&v14, a3);
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
    {
      *(_QWORD *)(v8 + 16) = 0;
      (*(void (**)(uint64_t, unint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, v9, &v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197201B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NavigationState::NavigationClient::shouldAllowLegacyTLS(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197201BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::NavigationState::NavigationClient::legacyWebCryptoMasterKey(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke(uint64_t a1, void *a2)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  int v11;
  int v12;
  char v13;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (a2)
    {
      v5 = objc_msgSend(a2, "bytes");
      result = objc_msgSend(a2, "length");
      v6 = result;
      if (result)
      {
        if (HIDWORD(result))
        {
          __break(0xC471u);
          return result;
        }
        result = WTF::fastMalloc((WTF *)result);
        v7 = 0;
        do
        {
          *(_BYTE *)(result + v7) = *(_BYTE *)(v5 + v7);
          ++v7;
        }
        while (v6 != v7);
      }
      v10 = (WTF *)result;
      v11 = v6;
      v12 = v6;
      v13 = 1;
      v8 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 16))(v8, &v10);
    }
    else
    {
      LOBYTE(v10) = 0;
      v13 = 0;
      v8 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 16))(v8, &v10);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v13)
    {
      result = (unint64_t)v10;
      if (v10)
      {
        v10 = 0;
        v11 = 0;
        return WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

void sub_197201D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, v15);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKSOAuthorizationLoadPolicy)>::fromCallable<WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0>(WebKit::NavigationState::NavigationClient::decidePolicyForSOAuthorizationLoad(WebKit::WebPageProxy &,WebKit::SOAuthorizationLoadPolicy,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::SOAuthorizationLoadPolicy)> &&)::$_0)::{lambda(void *,_WKSOAuthorizationLoadPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, a2 == 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197201E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<WebCore::AlternativeTextUIController>::operator()[abi:sn180100](int a1, WTF *this)
{
  const void **v3;

  if (this)
  {
    v3 = (const void **)*((_QWORD *)this + 1);
    if (v3)
      WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::deallocateTable(v3, this);
    if (*(_QWORD *)this)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*(_QWORD *)this, this);
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::deallocateTable(const void **a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  const void *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (const void *)-1)
      {
        *v4 = 0;
        if (v5)
          CFRelease(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[4];
        }
        v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (v6[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[4];
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ContactInfo>::destruct(*(_QWORD *)a1, (void *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::ContactInfo>::destruct(uint64_t result, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  if ((void *)result != a2)
  {
    v3 = result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 32, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 16, v4);
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v5);
      v3 += 48;
    }
    while ((void *)v3 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18ContinueUnsafeLoadEN3WTF3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0xAAAAAAB)
  {
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 24 * v7;
      do
      {
        *(_BYTE *)v6 = *(_BYTE *)v8;
        v10 = *(_DWORD **)(v8 + 8);
        if (v10)
          *v10 += 2;
        *(_QWORD *)(v6 + 8) = v10;
        *(_BYTE *)(v6 + 16) = *(_BYTE *)(v8 + 16);
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_0 &&>>()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "infoDictionary"), "objectForKeyedSubscript:", CFSTR("NSMicrophoneUsageDescription"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = (void *)v0;
  else
    v1 = 0;
  result = objc_msgSend(v1, "length");
  WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::hasMicrophoneDescriptionString = result != 0;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_1 &&>>()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "infoDictionary"), "objectForKeyedSubscript:", CFSTR("NSCameraUsageDescription"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = (void *)v0;
  else
    v1 = 0;
  result = objc_msgSend(v1, "length");
  WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::hasCameraDescriptionString = result != 0;
  return result;
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  _BYTE v5[80];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C88D8[v6])(&v4, v5);
  return result;
}

void sub_1972022C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34C88D8[a24])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_197202338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34C88D8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C88D8[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C8C30[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22HTMLModelElementCameraENS8_13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22HTMLModelElementCameraENS8_13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>(a2, a3);
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[80];
  int v5;
  char v6;

  v2 = *a1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C8958[v5])(&v6, v4);
  return result;
}

void sub_19720247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34C8958[a19])(v19 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1972024E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34C8958[v15])(&a13, v13);
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C8958[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C8C40[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>(a2, a3);
}

uint64_t WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  _BYTE v5[80];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C89B0[v6])(&v4, v5);
  return result;
}

void sub_19720264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34C89B0[a24])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1972026BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34C89B0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 80) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NavigationState::*&)(void),WebKit::NavigationState*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(uint64_t result, void *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *(unsigned int **)result;
  *(_QWORD *)result = 0;
  if (v2)
  {
    do
    {
      v6 = __ldaxr(v2);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v2));
    if (!v7)
    {
      atomic_store(1u, v2);
      v8 = result;
      WTF::fastFree((WTF *)v2, a2);
      result = v8;
    }
  }
  v3 = *(unsigned int **)(result + 8);
  *(_QWORD *)result = -1;
  *(_QWORD *)(result + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      return WTF::fastFree((WTF *)v3, a2);
    }
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;

  v2 = WebKit::navigationStates(void)::navigationStates;
  if (WebKit::navigationStates(void)::navigationStates)
  {
    v3 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4);
    v4 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v7 = v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 16 * a1);
  WebKit::navigationStates(void)::navigationStates = v8;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 8) = a1 - 1;
  *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16) = 0;
  *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) = v4;
  if (v3)
  {
    v9 = 0;
    while (1)
    {
      v10 = (unsigned int **)(v2 + 16 * v9);
      v11 = *v10;
      if (*v10 != (unsigned int *)-1)
      {
        if (v11)
        {
          if (WebKit::navigationStates(void)::navigationStates)
            v19 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 8);
          else
            v19 = 0;
          v20 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(WebKit::navigationStates(void)::navigationStates + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = WebKit::navigationStates(void)::navigationStates + 16 * v25;
          v28 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v6);
            }
          }
          v31 = *(unsigned int **)v27;
          *(_QWORD *)v27 = 0;
          if (v31)
          {
            do
            {
              v38 = __ldaxr(v31);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v31));
            if (!v39)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v6);
            }
          }
          v32 = *v10;
          *v10 = 0;
          *(_QWORD *)v27 = v32;
          v33 = v2 + 16 * v9;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *(_QWORD *)(v27 + 8) = v34;
          v35 = *(unsigned int **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v6);
            }
          }
          v16 = *v10;
          *v10 = 0;
          if (!v16)
            goto LABEL_33;
          do
          {
            v40 = __ldaxr(v16);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v16));
          if (v41)
            goto LABEL_33;
        }
        else
        {
          v12 = v2 + 16 * v9;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v6);
            }
          }
          v16 = *v10;
          *v10 = 0;
          if (!v16)
            goto LABEL_33;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (v18)
            goto LABEL_33;
        }
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v6);
      }
LABEL_33:
      if (++v9 == v3)
        goto LABEL_42;
    }
  }
  if (v2)
LABEL_42:
    WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand()
{
  int v0;

  if (WebKit::navigationStates(void)::navigationStates
    && (v0 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4)) != 0)
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) >= (2 * v0)));
  }
  else
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(8u);
  }
}

unsigned int **WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>@<X0>(unsigned int **result@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v3 = *result;
  if (*result)
  {
    v4 = *(v3 - 2);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = v8;
      v11 = *(_QWORD *)&v3[4 * v8];
      if (v11 != -1)
      {
        if (!v11)
        {
          v3 = 0;
          goto LABEL_10;
        }
        if (v11 == a2)
          break;
      }
      v8 = (v10 + i) & v4;
    }
    v3 = *(unsigned int **)&v3[4 * v10 + 2];
    if (v3)
    {
      do
        v12 = __ldaxr(v3);
      while (__stlxr(v12 + 1, v3));
    }
  }
LABEL_10:
  *a3 = v3;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_2,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34C8C88;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_2,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C8C88;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NavigationState::NavigationClient::decidePolicyForNavigationAction(WebKit::WebPageProxy &,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WTF::Ref<WebKit::WebFramePolicyListenerProxy,WTF::RawPtrTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>,WTF::DefaultRefDerefTraits<WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&>> &&)::$_2,void,BOOL>::call(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];

  if (a2)
  {
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 1);
    return;
  }
  if (WebKit::isUnsupportedWebExtensionNavigation(*(_QWORD **)(a1 + 24), *(CFTypeRef ***)(a1 + 8)))
  {
    v3 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18[0]) = 0;
      _os_log_debug_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEBUG, "Ignoring unsupported web extension navigation", (uint8_t *)v18, 2u);
    }
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 0);
    return;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(CFTypeRef **)(v4 + 240);
  if (v5)
    goto LABEL_8;
  v13 = *(_QWORD *)(v4 + 248);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v5 = (CFTypeRef *)(v14 - 16);
LABEL_8:
      CFRetain(v5[1]);
      WebKit::WebExtensionController::updateWebsitePoliciesForNavigation((WebKit::WebExtensionController *)v5, *(API::WebsitePolicies **)(a1 + 32), *(API::NavigationAction **)(a1 + 24));
      CFRelease(v5[1]);
    }
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)(v6 + 24))
  {
    WebKit::WebFramePolicyListenerProxy::use(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), 0);
    return;
  }
  API::URLRequest::create((API::URLRequest *)(v6 + 40), (CFTypeRef **)v18);
  v7 = (void *)*((_QWORD *)v18[0] + 1);
  if (!v7)
  {
    v8 = 0;
    v18[0] = 0;
LABEL_12:
    CFRelease(v8);
    goto LABEL_13;
  }
  CFRetain(*((CFTypeRef *)v18[0] + 1));
  v17 = v18[0];
  v18[0] = 0;
  if (v17)
  {
    v8 = (const void *)*((_QWORD *)v17 + 1);
    goto LABEL_12;
  }
LABEL_13:
  if ((objc_msgSend(MEMORY[0x1E0C92C58], "canHandleRequest:", v7, v18[0]) & 1) != 0)
    goto LABEL_26;
  v9 = *(_QWORD *)(a1 + 8);
  MEMORY[0x19AEABCC8](v18, objc_msgSend((id)objc_msgSend(v7, "URL"), "scheme"));
  if (v18[0]
    && WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v9 + 1056), v18, v10))
  {
    v12 = 1;
  }
  else
  {
    v12 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v7, "URL"), "scheme"), "isEqualToString:", CFSTR("blob"));
  }
  v15 = v18[0];
  v18[0] = 0;
  if (!v15)
  {
LABEL_25:
    if (v12)
      goto LABEL_26;
LABEL_30:
    WebKit::WebFramePolicyListenerProxy::ignore(*(WTF **)(a1 + 16), 0);
    goto LABEL_31;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy(v15, v11);
  if (!v12)
    goto LABEL_30;
LABEL_26:
  v16 = *(WTF **)(a1 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 376))
    WebKit::WebFramePolicyListenerProxy::download(v16);
  else
    WebKit::WebFramePolicyListenerProxy::use((uint64_t)v16, *(_QWORD *)(a1 + 32), 0);
LABEL_31:
  if (v7)
    CFRelease(v7);
}

void sub_197202E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef *a9)
{
  if (a9)
    CFRelease(a9[1]);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WebCore::TimeRanges>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(WTF **)(this + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  char v30;
  int v31;
  char v32;
  int v33;
  unsigned int v34;
  uint64_t v35;

  v12 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = *a3;
  if (*a3)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a4;
  if (*a4)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a5;
  if (*a5)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  v22 = *a6;
  if (*a6)
    v23 = *(_DWORD *)(v22 + 4);
  else
    v23 = 0;
  if ((v23 | v21) < 0)
    goto LABEL_50;
  v24 = __OFADD__(v21, v23);
  v25 = v21 + v23;
  v26 = v24;
  if (v19 < 0 || v26)
    goto LABEL_50;
  v24 = __OFADD__(v19, v25);
  v27 = v19 + v25;
  v28 = v24;
  if (v17 < 0
    || v28
    || ((v24 = __OFADD__(v17, v27), v29 = v17 + v27, !v24) ? (v30 = 0) : (v30 = 1),
        v15 < 0
     || (v30 & 1) != 0
     || ((v24 = __OFADD__(v15, v29), v31 = v15 + v29, !v24) ? (v32 = 0) : (v32 = 1),
         v13 < 0 || (v32 & 1) != 0 || (result = (v13 + v31), __OFADD__(v13, v31)))))
  {
LABEL_50:
    *a7 = 0;
    return result;
  }
  if ((!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0)
    && (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0)
    && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0))
  {
    if (v20)
    {
      v34 = *(_DWORD *)(v20 + 16);
      v33 = (v34 >> 2) & 1;
      if (!v22 || (v34 & 4) == 0)
        goto LABEL_44;
    }
    else if (!v22)
    {
      v33 = 1;
      goto LABEL_44;
    }
    v33 = (*(unsigned __int8 *)(v22 + 16) >> 2) & 1;
  }
  else
  {
    v33 = 0;
  }
LABEL_44:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v33, v12, v14, v16, v18, v20, v22, &v35);
  *a7 = v35;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  uint64_t v17;
  uint64_t v18;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v18;
        if (v18)
        {
          *(_DWORD *)v18 = 2;
          *(_DWORD *)(v18 + 4) = v15;
          *(_QWORD *)(v18 + 8) = v18 + 20;
          *(_DWORD *)(v18 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v18 + 20), a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_12;
      }
LABEL_8:
      v17 = 0;
      goto LABEL_12;
    }
LABEL_9:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_9;
  if (result > 0x7FFFFFEF)
    goto LABEL_8;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v18;
  if (v18)
  {
    *(_DWORD *)v18 = 2;
    *(_DWORD *)(v18 + 4) = v15;
    *(_QWORD *)(v18 + 8) = v18 + 20;
    *(_DWORD *)(v18 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v18 + 20), a3, a4, a5, a6, a7, a8);
  }
LABEL_12:
  *a9 = v17;
  return result;
}

void sub_1972031E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::String **a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::String *v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::number(*a4);
  *(_QWORD *)buf = v31;
  v29[0] = v30;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
  if (v32)
  {
    v9 = v30;
    v30 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v31;
    v31 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v29[0];
      v29[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v23 = *a4;
                v34 = 0;
                WTF::String::number(v23);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v24);
                for (i = 24; i != -8; i -= 16)
                {
                  v26 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 2)
                      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v26 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v27 = __ldxr(v15);
            if (v27 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1972034F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v16 + 24 * v23;
          v28 = *(_DWORD **)(v25 + 16);
          v27 = (_QWORD *)(v25 + 16);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            if (v26[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[4];
          }
          v30 = (_DWORD *)*(v27 - 1);
          *(v27 - 1) = 0;
          if (v30)
          {
            if (v30[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            else
              --v30[4];
          }
          *v24 = *v12;
          v31 = v4 + 24 * v9;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = (_QWORD *)(v31 + 8);
          *v32 = 0;
          *(v27 - 1) = v33;
          v34 = v32[1];
          v32[1] = 0;
          *v27 = v34;
          v35 = (_DWORD *)v32[1];
          v32[1] = 0;
          if (v35)
          {
            if (v35[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            else
              --v35[4];
          }
          v36 = (_DWORD *)*v32;
          *v32 = 0;
          if (v36)
          {
            if (v36[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
            else
              --v36[4];
          }
          if (v12 == a3)
            v10 = v24;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = *(_DWORD **)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
          {
            if (v15[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[4];
          }
          v29 = *(_DWORD **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v29)
          {
            if (v29[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            else
              --v29[4];
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  v28 = v23 + 16 * v26;
  v27 = 1;
LABEL_29:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>::customDeleteBucket(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *result;

  *a1 = -1;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  result = (_DWORD *)a1[1];
  a1[1] = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  rtc::AsyncPacketSocket *v25;
  _QWORD v27[4];
  void *__p[2];
  char v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = &unk_1E34C8D20;
  v8 = a1 + 8;
  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)a1 = off_1E34C8CD8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_BYTE *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 80) = a3;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 96) = v10;
  *(_DWORD *)(a1 + 104) = 0;
  v27[0] = a1;
  v27[2] = absl::internal_any_invocable::LocalManagerTrivial;
  v27[3] = absl::internal_any_invocable::LocalInvoker<false,void,WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,std::unique_ptr<rtc::AsyncPacketSocket> &&,WebKit::NetworkRTCProvider::Socket::Type,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&)::$_0 &,rtc::AsyncPacketSocket*,rtc::ReceivedPacket const&>;
  rtc::AsyncPacketSocket::RegisterReceivedPacketCallback();
  absl::internal_any_invocable::LocalManagerTrivial(1, (__n128 *)v27, (__n128 *)v27);
  v11 = *(_QWORD **)(a1 + 88);
  v12 = operator new(0x30uLL);
  v12[2] = sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *,rtc::SentPacket const&>;
  v12[3] = v8;
  v12[4] = WebKit::LibWebRTCSocketClient::signalSentPacket;
  v12[5] = 0;
  v13 = v11[9];
  v11 += 9;
  *v12 = v13;
  v12[1] = v11;
  *(_QWORD *)(v13 + 8) = v12;
  *v11 = v12;
  ++v11[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 16))(v8, v11 - 2);
  v30[0] = &off_1E34C8E80;
  v30[1] = a1;
  v31 = v30;
  rtc::AsyncPacketSocket::SubscribeCloseEvent();
  v14 = v31;
  if (v31 == v30)
  {
    v15 = 4;
    v14 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_6:
  if (a5)
  {
    if (a5 == 1)
    {
      v16 = *(_QWORD **)(a1 + 88);
      v17 = operator new(0x30uLL);
      v17[2] = sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *>;
      v17[3] = v8;
      v17[4] = WebKit::LibWebRTCSocketClient::signalConnect;
      v17[5] = 0;
      v18 = v16[30];
      v16 += 30;
      *v17 = v18;
      v17[1] = v16;
      *(_QWORD *)(v18 + 8) = v17;
      *v16 = v17;
      ++v16[2];
      (*(void (**)(uint64_t, _QWORD *))(a1 + 16))(v8, v16 - 2);
      v19 = *(_QWORD **)(a1 + 88);
      v20 = operator new(0x30uLL);
      v20[2] = sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *,rtc::SocketAddress const&>;
      v20[3] = v8;
      v20[4] = WebKit::LibWebRTCSocketClient::signalAddressReady;
      v20[5] = 0;
      v21 = v19[23];
      v19 += 23;
      *v20 = v21;
      v20[1] = v19;
      *(_QWORD *)(v21 + 8) = v20;
      *v19 = v20;
      ++v19[2];
      (*(void (**)(uint64_t, _QWORD *))(a1 + 16))(v8, v19 - 2);
    }
  }
  else
  {
    v22 = *(_QWORD **)(a1 + 88);
    v23 = operator new(0x30uLL);
    v23[2] = sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *>;
    v23[3] = v8;
    v23[4] = WebKit::LibWebRTCSocketClient::signalConnect;
    v23[5] = 0;
    v24 = v22[30];
    v22 += 30;
    *v23 = v24;
    v23[1] = v22;
    *(_QWORD *)(v24 + 8) = v23;
    *v22 = v23;
    ++v22[2];
    (*(void (**)(uint64_t, _QWORD *))(a1 + 16))(v8, v22 - 2);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 88) + 16))(__p);
    WebKit::LibWebRTCSocketClient::signalAddressReady((WebKit::LibWebRTCSocketClient *)a1, v25, (const rtc::SocketAddress *)__p);
    if (v29 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

uint64_t WebKit::LibWebRTCSocketClient::signalSentPacket(WebKit::LibWebRTCSocketClient *this, rtc::AsyncPacketSocket *a2, const rtc::SentPacket *a3)
{
  uint64_t v3;
  char *v5;
  __int128 v6;

  v3 = *((_QWORD *)this + 12);
  v5 = (char *)this + 64;
  v6 = *(_OWORD *)a3;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(v3, (uint64_t)&v5, 0, 0, 0);
}

uint64_t WebKit::LibWebRTCSocketClient::signalConnect(WebKit::LibWebRTCSocketClient *this, rtc::AsyncPacketSocket *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *((_QWORD *)this + 12);
  v4 = (uint64_t *)((char *)this + 64);
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalConnect>(v2, &v4, 0, 0, 0);
}

WTF *WebKit::LibWebRTCSocketClient::signalAddressReady(WebKit::LibWebRTCSocketClient *this, rtc::AsyncPacketSocket *a2, const rtc::SocketAddress *a3)
{
  uint64_t v3;
  char *v4;
  void *v5;
  WTF *result;
  uint64_t v7;
  WTF *v8;
  int v9;
  _QWORD v10[2];

  v3 = *((_QWORD *)this + 12);
  v4 = (char *)this + 64;
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v7, a3);
  v10[0] = v4;
  v10[1] = &v7;
  IPC::Connection::send<Messages::LibWebRTCNetwork::SignalAddressReady>(v3, (uint64_t)v10, 0, 0, 0);
  result = v8;
  if (v8)
  {
    v8 = 0;
    v9 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void WebKit::LibWebRTCSocketClient::sendTo(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 80))(*(_QWORD *)(a1 + 88));
  v3 = v2;
  if (v2)
  {
    if (*(_DWORD *)(a1 + 104) != v2)
    {
      v4 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_QWORD *)(a1 + 64);
        v6 = 134218240;
        v7 = v5;
        v8 = 1024;
        v9 = v3;
        _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "LibWebRTCSocketClient::sendTo (ID=%llu) failed with error %d", (uint8_t *)&v6, 0x12u);
      }
    }
  }
  *(_DWORD *)(a1 + 104) = v3;
}

uint64_t WebKit::LibWebRTCSocketClient::close(WebKit::LibWebRTCSocketClient *this)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 11) + 48))(*((_QWORD *)this + 11)))
  {
    v3 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      v4 = *((_QWORD *)this + 8);
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 80))(*((_QWORD *)this + 11));
      *(_DWORD *)buf = 134218240;
      v8 = v4;
      v9 = 1024;
      v10 = v5;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "LibWebRTCSocketClient::close (ID=%llu) failed with error %d", buf, 0x12u);
    }
  }
  rtc::AsyncPacketSocket::DeregisterReceivedPacketCallback(*((rtc::AsyncPacketSocket **)this + 11));
  WebKit::NetworkRTCProvider::takeSocket(*((uint64_t **)this + 10), *((_QWORD *)this + 8), &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t *WebKit::NetworkRTCProvider::takeSocket@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = result + 5;
  v4 = (_QWORD *)result[5];
  if (!v4)
    goto LABEL_12;
  result += 4;
  v5 = v3;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v3 && v5[4] <= a2)
  {
    v9 = v5[5];
    v5[5] = 0;
    *a3 = v9;
    return std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::erase((uint64_t **)result, v5);
  }
  else
  {
LABEL_12:
    *a3 = 0;
  }
  return result;
}

float WebKit::LibWebRTCSocketClient::setOption(WebKit::LibWebRTCSocketClient *this, int a2, int a3)
{
  float result;
  NSObject *v7;
  uint64_t v8;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 11) + 72))(*((_QWORD *)this + 11)))
  {
    v7 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      v8 = *((_QWORD *)this + 8);
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 80))(*((_QWORD *)this + 11));
      v10[0] = 67109888;
      v10[1] = a2;
      v11 = 1024;
      v12 = a3;
      v13 = 2048;
      v14 = v8;
      v15 = 1024;
      v16 = v9;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "LibWebRTCSocketClient::setOption(%d, %d) (ID=%llu) failed with error %d", (uint8_t *)v10, 0x1Eu);
    }
  }
  return result;
}

BOOL WTF::WeakHashSet<WebKit::NetworkRTCMonitor,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!qword_1ECE72AD0 || !*(_DWORD *)(qword_1ECE72AD0 - 12))
    return 1;
  v10 = &qword_1ECE72AD0;
  v11 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1ECE72AD0);
  v12 = v0;
  v1 = qword_1ECE72AD0;
  if (qword_1ECE72AD0)
  {
    v2 = *(unsigned int *)(qword_1ECE72AD0 - 4);
    v3 = qword_1ECE72AD0 + 8 * v2;
    v13 = v3;
    v14 = v3;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
  }
  else
  {
    v13 = 0;
    v14 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v10);
    v3 = 0;
    v2 = 0;
  }
  v5 = &qword_1ECE72AD0;
  v6 = (_QWORD *)v3;
  v7 = v3;
  v8 = v3;
  v9 = v1 + 8 * v2;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v5);
  return v11 == v6;
}

char *WebKit::NetworkRTCMonitor::onNetworksChanged(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  size_t v28;
  _BYTE buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCMonitor::onNetworksChanged sent", buf, 0xCu);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2659;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  *(_QWORD *)buf = v10;
  v11 = *(unsigned int *)(a2 + 12);
  v12 = *(_QWORD *)(v10 + 544);
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 8;
  v15 = *(_QWORD *)(v10 + 552);
  if (v15 < v13 + 8)
  {
    v25 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v14);
    v28 = v26;
    result = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v16 = result;
    memcpy(result, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v27 = *(void **)(v10 + 528);
    if (v27 != (void *)(v10 + 16))
      munmap(v27, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v16;
    *(_QWORD *)(v10 + 552) = v28;
    v12 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v16 = *(char **)(v10 + 528);
  }
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(v10 + 544) = v14;
  v17 = (_QWORD *)(*(_QWORD *)(v10 + 528) + v13);
  *(_QWORD *)(v10 + 536) = v17 + 1;
  *v17 = v11;
  v18 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)a2;
    v20 = 96 * v18;
    do
    {
      IPC::ArgumentCoder<WebKit::RTCNetwork,void>::encode((IPC::Encoder *)v10, v19);
      v19 += 96;
      v20 -= 96;
    }
    while (v20);
  }
  IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::encode((IPC::Encoder *)v10, a3);
  IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::encode((IPC::Encoder *)v10, a4);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)buf, 0, 0);
  result = *(char **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v21);
    return (char *)WTF::fastFree(v23, v24);
  }
  return result;
}

void WebKit::NetworkManagerWrapper::onNetworksChanged(WebKit::NetworkManagerWrapper *this)
{
  NSObject *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  const rtc::Network **v7;
  const rtc::Network **v8;
  unsigned int v9;
  const rtc::Network *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  const rtc::Network **v25;
  __int128 v26;
  int v27;
  _QWORD v28[3];
  int v29;
  __int128 v30;
  int v31;
  _QWORD v32[3];
  int v33;
  uint8_t buf[8];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[52];
  uint64_t v38;
  int v39;
  int v40;

  v2 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkManagerWrapper::onNetworksChanged", buf, 2u);
  }
  v32[1] = 0;
  v32[2] = 0;
  v32[0] = &off_1E34B67B0;
  v33 = 0;
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), 2, v32);
  WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v30, (const rtc::IPAddress *)v32);
  v28[1] = 0;
  v28[2] = 0;
  v28[0] = &off_1E34B67B0;
  v29 = 0;
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), 30, v28);
  WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v26, (const rtc::IPAddress *)v28);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 7) + 48))(&__p);
  v3 = (char *)v25 - (_BYTE *)__p;
  if (v25 == __p)
  {
    v9 = 0;
    v6 = 0;
    v5 = 0;
  }
  else
  {
    if ((unint64_t)v3 >= 0x15555558)
    {
      __break(0xC471u);
      return;
    }
    v4 = (WTF *)(96 * (v3 >> 3));
    v5 = WTF::fastMalloc(v4);
    v6 = (v4 & 0xFFFFFFE0) / 0x60;
    v7 = (const rtc::Network **)__p;
    v8 = v25;
    if (__p == v25)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *v7++;
        WebKit::RTCNetwork::RTCNetwork((WebKit::RTCNetwork *)buf, v10);
        v11 = v5 + 96 * v9;
        v12 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)v11 = v12;
        LODWORD(v12) = v35;
        LODWORD(v35) = 0;
        *(_DWORD *)(v11 + 8) = v12;
        LODWORD(v12) = HIDWORD(v35);
        HIDWORD(v35) = 0;
        *(_DWORD *)(v11 + 12) = v12;
        *(_QWORD *)(v11 + 24) = 0;
        v13 = v36;
        v36 = 0;
        *(_QWORD *)(v11 + 16) = v13;
        LODWORD(v13) = *(_DWORD *)v37;
        *(_DWORD *)v37 = 0;
        *(_DWORD *)(v11 + 24) = v13;
        LODWORD(v13) = *(_DWORD *)&v37[4];
        *(_DWORD *)&v37[4] = 0;
        *(_DWORD *)(v11 + 28) = v13;
        v14 = *(_OWORD *)&v37[8];
        v15 = *(_OWORD *)&v37[24];
        *(_OWORD *)(v11 + 60) = *(_OWORD *)&v37[36];
        *(_OWORD *)(v11 + 32) = v14;
        *(_OWORD *)(v11 + 48) = v15;
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 80) = v38;
        *(_DWORD *)(v11 + 88) = v39;
        *(_DWORD *)(v11 + 92) = v40;
        HIDWORD(v23) = ++v9;
      }
      while (v7 != v8);
    }
  }
  *(_QWORD *)buf = this;
  v22 = 0;
  v23 = 0;
  *(_OWORD *)v37 = v30;
  *(_OWORD *)&v37[20] = v26;
  *(_DWORD *)&v37[16] = v31;
  *(_DWORD *)&v37[36] = v27;
  v16 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v16 = off_1E34C8F40;
  *(_QWORD *)(v16 + 8) = this;
  *(_QWORD *)(v16 + 16) = v5;
  v35 = 0;
  v36 = 0;
  *(_DWORD *)(v16 + 24) = v6;
  *(_DWORD *)(v16 + 28) = v9;
  v17 = *(_OWORD *)v37;
  v18 = *(_OWORD *)&v37[16];
  *(_QWORD *)(v16 + 64) = *(_QWORD *)&v37[32];
  *(_OWORD *)(v16 + 32) = v17;
  *(_OWORD *)(v16 + 48) = v18;
  v21 = v16;
  WTF::callOnMainRunLoop();
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v19);
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v20);
  if (__p)
  {
    v25 = (const rtc::Network **)__p;
    operator delete(__p);
  }
}

unsigned int *WebKit::NetworkRTCMonitor::startUpdatingIfNeeded(WebKit::NetworkRTCMonitor *this)
{
  NSObject *v2;
  int v3;
  void *v4;
  BOOL isEmptyIgnoringNullReferences;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  unsigned int *result;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  _BYTE buf[12];
  __int16 v31;
  _BYTE v32[10];
  uint64_t (*v33)(_QWORD *);
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 24);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    v31 = 1024;
    *(_DWORD *)v32 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCMonitor::startUpdatingIfNeeded m_isStarted=%d", buf, 0x12u);
  }
  if ((byte_1ECE72A79 & 1) == 0)
  {
    *(_OWORD *)&byte_1ECE72AE0 = 0u;
    xmmword_1ECE72AF0 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE72B0C + 4) = 0u;
    unk_1ECE72A98 = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
    unk_1ECE72AA0 = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
    unk_1ECE72B00 = 0u;
    unk_1ECE72AA8 = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
    unk_1ECE72AC8 = 0;
    qword_1ECE72AB8 = 0;
    unk_1ECE72AC0 = 0;
    unk_1ECE72AB0 = &qword_1ECE72AB8;
    qword_1ECE72A90 = &off_1E34C8E40;
    qword_1ECE72AE8 = 0;
    *(_QWORD *)&xmmword_1ECE72AF0 = 0;
    *(_QWORD *)&dword_1ECE72AD8 = 0;
    qword_1ECE72AD0 = 0;
    byte_1ECE72A79 = 1;
  }
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::NetworkRTCMonitor,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences();
  if (++dword_1ECE72AD8 > dword_1ECE72ADC)
  {
    v6 = qword_1ECE72AD0;
    if (qword_1ECE72AD0)
    {
      v7 = *(_DWORD *)(qword_1ECE72AD0 - 4);
      if (!v7)
        goto LABEL_29;
      v8 = 0;
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(v6 + 8 * --v7);
          if ((unint64_t)(v9 + 1) >= 2 && !*(_QWORD *)(v9 + 8))
            break;
          if (!v7)
            goto LABEL_18;
        }
        *(_QWORD *)(v6 + 8 * v7) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, v4);
        }
        *(_QWORD *)(v6 + 8 * v7) = -1;
        ++v8;
      }
      while (v7);
LABEL_18:
      v6 = qword_1ECE72AD0;
      if (v8)
      {
        *(_DWORD *)(qword_1ECE72AD0 - 16) += v8;
        if (qword_1ECE72AD0)
          v12 = *(_DWORD *)(qword_1ECE72AD0 - 12);
        else
          v12 = 0;
        *(_DWORD *)(qword_1ECE72AD0 - 12) = v12 - v8;
        v6 = qword_1ECE72AD0;
      }
      if (v6)
      {
        v13 = *(_DWORD *)(v6 - 4);
        if (v13 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v13)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1ECE72AD0);
          v6 = qword_1ECE72AD0;
          dword_1ECE72AD8 = 0;
          if (!qword_1ECE72AD0)
          {
            v15 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        dword_1ECE72AD8 = 0;
LABEL_32:
        v15 = *(_DWORD *)(v6 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
        {
LABEL_34:
          dword_1ECE72ADC = 2 * v16;
          goto LABEL_35;
        }
LABEL_33:
        v16 = v15;
        goto LABEL_34;
      }
    }
    v15 = 0;
    dword_1ECE72AD8 = 0;
    goto LABEL_33;
  }
LABEL_35:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  v17 = *(unsigned int **)this;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 + 1, v17));
  v29 = (WTF *)v17;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1ECE72AD0, &v29, (uint64_t)buf);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
    }
  }
  if (!v17)
    goto LABEL_42;
  do
  {
    v22 = __ldaxr(v17);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v17));
  if (!v23)
  {
    atomic_store(1u, v17);
    result = (unsigned int *)WTF::fastFree((WTF *)v17, v20);
    if (isEmptyIgnoringNullReferences)
      goto LABEL_43;
  }
  else
  {
LABEL_42:
    if (isEmptyIgnoringNullReferences)
    {
LABEL_43:
      v24 = *((_QWORD *)this + 1);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E34C8EF0;
      v25[1] = &qword_1ECE72A90;
      v26 = *(_QWORD *)(v24 + 112);
      *(_QWORD *)buf = v25;
      *(_QWORD *)&v32[2] = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
      v33 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
      webrtc::TaskQueueBase::PostTask(v26, (uint64_t)buf, (uint64_t)&v29);
      return (unsigned int *)(*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))&v32[2])(1, buf, buf);
    }
  }
  if (byte_1ECE72AE0)
    return (unsigned int *)WebKit::NetworkRTCMonitor::onNetworksChanged((uint64_t)this, (uint64_t)&qword_1ECE72AE8, (int *)&xmmword_1ECE72AF0 + 2, (int *)&xmmword_1ECE72B0C);
  return result;
}

uint64_t WebKit::NetworkRTCMonitor::stopUpdating(WebKit::NetworkRTCMonitor *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  unsigned int **v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _BYTE buf[12];
  uint64_t (*v23)(char, uint64_t *, uint64_t *);
  uint64_t (*v24)(_QWORD *);
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCMonitor::stopUpdating", buf, 0xCu);
  }
  if ((byte_1ECE72A79 & 1) == 0)
  {
    *(_OWORD *)&byte_1ECE72AE0 = 0u;
    xmmword_1ECE72AF0 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE72B0C + 4) = 0u;
    unk_1ECE72B00 = 0u;
    unk_1ECE72A98 = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
    unk_1ECE72AA0 = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
    unk_1ECE72AA8 = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
    unk_1ECE72AC8 = 0;
    unk_1ECE72AC0 = 0;
    qword_1ECE72AB8 = 0;
    unk_1ECE72AB0 = &qword_1ECE72AB8;
    qword_1ECE72A90 = &off_1E34C8E40;
    unk_1ECE72AE8 = 0;
    *(_QWORD *)&xmmword_1ECE72AF0 = 0;
    *(_QWORD *)&dword_1ECE72AD8 = 1;
    qword_1ECE72AD0 = 0;
    byte_1ECE72A79 = 1;
LABEL_5:
    v4 = qword_1ECE72AD0;
    if (qword_1ECE72AD0)
    {
      v5 = *(_DWORD *)(qword_1ECE72AD0 - 4);
      if (!v5)
        goto LABEL_28;
      v6 = 0;
      do
      {
        while (1)
        {
          v7 = *(_QWORD *)(v4 + 8 * --v5);
          if ((unint64_t)(v7 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
            break;
          if (!v5)
            goto LABEL_17;
        }
        *(_QWORD *)(v4 + 8 * v5) = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          WTF::fastFree((WTF *)v7, v3);
        }
        *(_QWORD *)(v4 + 8 * v5) = -1;
        ++v6;
      }
      while (v5);
LABEL_17:
      v4 = qword_1ECE72AD0;
      if (v6)
      {
        *(_DWORD *)(qword_1ECE72AD0 - 16) += v6;
        if (qword_1ECE72AD0)
          v10 = *(_DWORD *)(qword_1ECE72AD0 - 12);
        else
          v10 = 0;
        *(_DWORD *)(qword_1ECE72AD0 - 12) = v10 - v6;
        v4 = qword_1ECE72AD0;
      }
      if (v4)
      {
        v11 = *(_DWORD *)(v4 - 4);
        if (v11 >= 9 && 6 * *(_DWORD *)(v4 - 12) < v11)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1ECE72AD0);
          v4 = qword_1ECE72AD0;
          dword_1ECE72AD8 = 0;
          if (!qword_1ECE72AD0)
          {
            v13 = 0;
            goto LABEL_32;
          }
          goto LABEL_31;
        }
LABEL_28:
        dword_1ECE72AD8 = 0;
LABEL_31:
        v13 = *(_DWORD *)(v4 - 12);
        v14 = 0x7FFFFFFF;
        if (v13 >= 0x7FFFFFFF)
        {
LABEL_33:
          dword_1ECE72ADC = 2 * v14;
          goto LABEL_34;
        }
LABEL_32:
        v14 = v13;
        goto LABEL_33;
      }
    }
    v13 = 0;
    dword_1ECE72AD8 = 0;
    goto LABEL_32;
  }
  if (++dword_1ECE72AD8 > dword_1ECE72ADC)
    goto LABEL_5;
LABEL_34:
  if (!*(_QWORD *)this || !*(_QWORD *)(*(_QWORD *)this + 8))
    goto LABEL_43;
  *(_QWORD *)buf = *(_QWORD *)this;
  v15 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1ECE72AD0, buf);
  if (qword_1ECE72AD0)
  {
    v16 = qword_1ECE72AD0 + 8 * *(unsigned int *)(qword_1ECE72AD0 - 4);
    if ((unsigned int **)v16 == v15)
      goto LABEL_43;
  }
  else
  {
    if (!v15)
      goto LABEL_43;
    v16 = 0;
  }
  if ((unsigned int **)v16 != v15)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1ECE72AD0, v15);
LABEL_43:
  result = WTF::WeakHashSet<WebKit::NetworkRTCMonitor,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences();
  if ((_DWORD)result)
  {
    v18 = *((_QWORD *)this + 1);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E34C8F18;
    v19[1] = &qword_1ECE72A90;
    v20 = *(_QWORD *)(v18 + 112);
    *(_QWORD *)buf = v19;
    v23 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
    v24 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
    webrtc::TaskQueueBase::PostTask(v20, (uint64_t)buf, (uint64_t)&v21);
    return v23(1, (uint64_t *)buf, (uint64_t *)buf);
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::rtcNetworkThread(WebKit::NetworkRTCProvider *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  if ((_MergedGlobals_77 & 1) == 0)
  {
    qword_1ECE72A80 = 0;
    _MergedGlobals_77 = 1;
  }
  v1 = atomic_load(&qword_1ECE72A88);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECE72A88, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::NetworkRTCProvider::rtcNetworkThread(void)::$_0 &&>>);
  }
  return qword_1ECE72A80;
}

unsigned __int8 ***WebKit::NetworkRTCProvider::NetworkRTCProvider(unsigned __int8 ***this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned __int8 ***v7;
  rtc::Thread *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  int v13;
  void *v14;
  WTF *v16;

  v4 = WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)this);
  *(_DWORD *)(v4 + 24) = 1;
  *(_QWORD *)v4 = off_1E34C8D40;
  *(_QWORD *)(v4 + 8) = &unk_1E34C8D70;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 32) = v4 + 40;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  v5 = (unsigned int *)*((_QWORD *)a2 + 7);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  this[7] = (unsigned __int8 **)v5;
  v7 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(this + 8, *((unsigned __int8 ***)a2 + 8));
  *((_BYTE *)this + 72) = 1;
  this[10] = 0;
  this[11] = (unsigned __int8 **)this;
  this[12] = 0;
  *((_BYTE *)this + 104) = 0;
  v8 = (rtc::Thread *)WebKit::NetworkRTCProvider::rtcNetworkThread((WebKit::NetworkRTCProvider *)v7);
  this[14] = (unsigned __int8 **)v8;
  rtc::Thread::socketserver(v8);
  operator new();
  this[15] = (unsigned __int8 **)rtc::BasicPacketSocketFactory::BasicPacketSocketFactory();
  this[16] = 0;
  *((_WORD *)this + 68) = 1;
  *((_BYTE *)this + 138) = 0;
  this[18] = 0;
  WebKit::NetworkProcess::sourceApplicationAuditToken(*((_QWORD *)a2 + 9), (uint64_t)(this + 19));
  this[24] = 0;
  v9 = *((_QWORD *)a2 + 9);
  v16 = (WTF *)*((_QWORD *)a2 + 10);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), &v16))
  {
    WTF::String::utf8();
    v11 = v16;
    v16 = 0;
    v12 = (WTF *)this[24];
    this[24] = (unsigned __int8 **)v11;
    if (v12)
    {
      v13 = *(_DWORD *)v12 - 1;
      if (*(_DWORD *)v12 != 1)
      {
LABEL_8:
        *(_DWORD *)v12 = v13;
        goto LABEL_9;
      }
      WTF::fastFree(v12, v10);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        v13 = *(_DWORD *)v12 - 1;
        if (*(_DWORD *)v12 == 1)
        {
          WTF::fastFree(v12, v14);
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
  }
LABEL_9:
  WebCore::LibWebRTCProvider::setRTCLogging();
  return this;
}

void WebKit::NetworkRTCProvider::~NetworkRTCProvider(WebKit::NetworkRTCProvider *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;

  *(_QWORD *)this = off_1E34C8D40;
  *((_QWORD *)this + 1) = &unk_1E34C8D70;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *((_QWORD *)this + 18);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)(v5 + 8);
      do
      {
        if (*(v7 - 1) != -1)
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v9 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 8);
  v16 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v15);
    }
  }
  std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(*((WTF **)this + 5));
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v19);
  WTF::FunctionDispatcher::~FunctionDispatcher(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkRTCProvider::~NetworkRTCProvider(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::NetworkRTCProvider::~NetworkRTCProvider(WebKit::NetworkRTCProvider *this, void *a2)
{
  WebKit::NetworkRTCProvider::~NetworkRTCProvider((WebKit::NetworkRTCProvider *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkRTCProvider::~NetworkRTCProvider((WebKit::NetworkRTCProvider *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::NetworkRTCProvider::close(WebKit::NetworkRTCProvider *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  char v15;
  _BYTE buf[12];
  uint64_t (*v17)(char, uint64_t *, uint64_t *);
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCProvider::close", buf, 0xCu);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (v3)
    v4 = v3 - 48;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 64);
  buf[8] = 0;
  *(_WORD *)buf = 295;
  LOBYTE(v17) = 0;
  IPC::Connection::removeMessageReceiveQueue(v5, buf);
  v7 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  WebKit::NetworkRTCMonitor::stopUpdating((WebKit::NetworkRTCProvider *)((char *)this + 80));
  v10 = (unsigned int *)((char *)this + 24);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C8F90;
  v12[1] = this;
  v12[2] = this;
  v13 = *((_QWORD *)this + 14);
  *(_QWORD *)buf = v12;
  v17 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v18 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  webrtc::TaskQueueBase::PostTask(v13, (uint64_t)buf, (uint64_t)&v15);
  return v17(1, (uint64_t *)buf, (uint64_t *)buf);
}

char *WebKit::NetworkRTCProvider::createSocket(uint64_t a1, unint64_t a2, uint64_t *a3, int a4, uint64_t *a5)
{
  uint64_t v10;
  char *result;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _BYTE buf[22];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  if (*a3)
  {
    v10 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)buf = WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(v10, a2, a1, a3, a4, a5);
    WebKit::NetworkRTCProvider::addSocket(a1, a2, (uint64_t *)buf);
    result = *(char **)buf;
    if (*(_QWORD *)buf)
      return (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  }
  else
  {
    v12 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "%p - NetworkRTCProvider::createSocket with %lu sockets is unable to create a new socket", buf, 0x16u);
    }
    v13 = *a5;
    v15 = 1;
    *(_QWORD *)buf = &v16;
    *(_QWORD *)&buf[8] = &v15;
    return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v13, (uint64_t)buf, 0, 0, 0);
  }
  return result;
}

void WebKit::NetworkRTCProvider::addSocket(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t **)(a1 + 40);
  v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= a2)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= a2)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 40);
LABEL_9:
    v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x30);
    v10[4] = a2;
    v11 = *a3;
    *a3 = 0;
    v10[5] = v11;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v7 = v10;
    v12 = **(_QWORD **)(a1 + 32);
    if (v12)
    {
      *(_QWORD *)(a1 + 32) = v12;
      v13 = *v7;
    }
    else
    {
      v13 = v10;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v13);
    ++*(_QWORD *)(a1 + 48);
  }
  v14 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 48);
    v18 = 134218496;
    v19 = a1;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v15;
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkRTCProvider::new socket %llu, total socket number is %lu", (uint8_t *)&v18, 0x20u);
  }
  if (*(_QWORD *)(a1 + 48) >= 0x101uLL)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v17 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      v18 = 134218240;
      v19 = a1;
      v20 = 2048;
      v21 = v16;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "%p - NetworkRTCProvider::too many sockets, closing %llu", (uint8_t *)&v18, 0x16u);
    }
    WebKit::NetworkRTCProvider::closeSocket(a1, v16);
  }
}

_QWORD *WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  WTF::StringImpl *v30;
  _QWORD *v31;

  v29 = a2;
  v5 = (uint64_t *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 144);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 144), 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v4 + 16 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v30 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v15 = off_1E34C8FB8;
    v15[1] = a1;
    v15[2] = &v30;
    v15[3] = &v29;
    v31 = v15;
    WTF::callOnMainRunLoopAndWait();
    v17 = v31;
    v31 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    v18 = v30;
    v30 = 0;
    v19 = (WTF::StringImpl *)v11[1];
    v11[1] = v18;
    if (v19)
    {
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 != 2)
        goto LABEL_18;
      WTF::StringImpl::destroy(v19, v16);
      v19 = v30;
      v30 = 0;
      if (!v19)
        goto LABEL_19;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v21);
      else
LABEL_18:
        *(_DWORD *)v19 = v20;
    }
LABEL_19:
    v22 = *v5;
    if (*v5)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v5;
    if (*v5)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        return v11 + 1;
    }
    else if (3 * v27 > 4 * v26)
    {
      return v11 + 1;
    }
    v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v11);
    return v11 + 1;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (_QWORD *)(v4 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void WebKit::NetworkRTCProvider::createUDPSocket(uint64_t a1, unint64_t a2, WebKit::RTC::Network::SocketAddress *this, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, WebKit *a9)
{
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  NSObject *v27;
  WTF::StringImpl *v28;
  unsigned __int8 **v29;
  void *__p[2];
  char v31;

  v16 = *(_QWORD **)(a1 + 40);
  if (!v16)
    goto LABEL_31;
  v17 = a1 + 40;
  do
  {
    v18 = v16[4];
    v19 = v18 >= a2;
    if (v18 >= a2)
      v20 = v16;
    else
      v20 = v16 + 1;
    if (v19)
      v17 = (uint64_t)v16;
    v16 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 != a1 + 40 && *(_QWORD *)(v17 + 32) <= a2)
  {
    v27 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_196BCC000, v27, OS_LOG_TYPE_ERROR, "NetworkRTCProvider::createUDPSocket duplicate identifier", (uint8_t *)__p, 2u);
    }
  }
  else
  {
LABEL_31:
    if (*(_BYTE *)(a1 + 138))
    {
      WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)__p);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, *(unsigned __int8 ***)(a1 + 64));
      v21 = (WTF::StringImpl *)*WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(a1, a6);
      if (v21)
        *(_DWORD *)v21 += 2;
      v28 = v21;
      v22 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
      *v22 = (uint64_t)off_1E34B6380;
      v22[1] = a1;
      v22[2] = a2;
      WebKit::NetworkRTCUDPSocketCocoaConnections::create(a2, a1, __p, (uint64_t *)&v29, (uint64_t *)&v28, a7, a8, a9, v22 + 3);
      v24 = v28;
      v28 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
      if (v31 < 0)
        operator delete(__p[0]);
      __p[0] = v22;
      WebKit::NetworkRTCProvider::addSocket(a1, a2, (uint64_t *)__p);
      v26 = (unsigned __int8 **)__p[0];
      if (__p[0])
LABEL_28:
        (*((void (**)(unsigned __int8 **))*v26 + 1))(v26);
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 120);
      WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)__p);
      v29 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, __p, a4, a5);
      if (v31 < 0)
        operator delete(__p[0]);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)__p, *(unsigned __int8 ***)(a1 + 64));
      WebKit::NetworkRTCProvider::createSocket(a1, a2, (uint64_t *)&v29, 0, (uint64_t *)__p);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)__p);
      v26 = v29;
      if (v29)
        goto LABEL_28;
    }
  }
}

void WebKit::NetworkRTCProvider::createClientTCPSocket(std::string::size_type a1, unsigned __int8 **a2, uint64_t *a3, WebKit::RTC::Network::SocketAddress *this, int a5, unsigned int a6, uint64_t a7, BOOL a8, unsigned __int8 a9, WebCore::RegistrableDomain *a10)
{
  _QWORD *v17;
  std::string::size_type v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  const WTF::String *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  std::string::size_type size;
  WTF *v31;
  void *v32;
  __int128 v33;
  WTF *v34;
  void *v35;
  __int128 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  std::string::size_type v47;
  std::string __p;
  uint64_t v49;
  void *__src;
  int __n;
  unsigned int __n_4;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  int v57;
  unsigned int v58;
  __int128 v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned __int8 **v65;

  v17 = *(_QWORD **)(a1 + 40);
  if (!v17)
    goto LABEL_48;
  v18 = a1 + 40;
  do
  {
    v19 = v17[4];
    v20 = v19 >= (unint64_t)a2;
    if (v19 >= (unint64_t)a2)
      v21 = v17;
    else
      v21 = v17 + 1;
    if (v20)
      v18 = (std::string::size_type)v17;
    v17 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 != a1 + 40 && *(_QWORD *)(v18 + 32) <= (unint64_t)a2)
  {
    v40 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, "NetworkRTCProvider::createClientTCPSocket duplicate identifier", (uint8_t *)&__p, 2u);
    }
  }
  else
  {
LABEL_48:
    if (*(_BYTE *)(a1 + 137))
    {
      WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)&__p);
      v22 = (const WTF::String *)WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(a1, a7);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, *(unsigned __int8 ***)(a1 + 64));
      WebKit::NetworkRTCTCPSocketCocoa::createClientTCPSocket((uint64_t)a2, (WebKit::NetworkRTCProvider *)a1, &__p, a6, v22, a8, a9, a10, &v63, (uint64_t *)&v65);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v65);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v63)
      {
        WebKit::NetworkRTCProvider::addSocket(a1, (unint64_t)a2, &v63);
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      }
      else
      {
        v41 = *(_QWORD *)(a1 + 56);
        v65 = a2;
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
          v43 = v42 - 48;
        else
          v43 = 0;
        v44 = *(_QWORD *)(v43 + 64);
        v64 = 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v64;
        IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v44, (uint64_t)&__p, 0, 0, 0);
      }
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = a1;
      v23 = (unsigned int *)(a1 + 24);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      __p.__r_.__value_.__l.__size_ = a1;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
      v25 = *a3;
      v26 = (WTF *)*((unsigned int *)a3 + 5);
      __src = 0;
      __n = 0;
      v49 = v25;
      __n_4 = v26;
      if ((_DWORD)v26)
      {
        __n = (int)v26;
        __src = (void *)WTF::fastMalloc(v26);
        memcpy(__src, (const void *)a3[1], *((unsigned int *)a3 + 5));
      }
      v53 = *(_OWORD *)(a3 + 3);
      v27 = *(_QWORD *)this;
      v54 = a3[5];
      v55 = v27;
      v28 = (WTF *)*((unsigned int *)this + 5);
      v56 = 0;
      v57 = 0;
      v58 = v28;
      if ((_DWORD)v28)
      {
        v57 = (int)v28;
        v56 = (WTF *)WTF::fastMalloc(v28);
        memcpy(v56, *((const void **)this + 1), *((unsigned int *)this + 5));
      }
      v59 = *(_OWORD *)((char *)this + 24);
      v60 = *((_QWORD *)this + 5);
      WTF::String::isolatedCopy();
      v62 = a6;
      v29 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v29 = &off_1E34C8FE0;
      *(_QWORD *)(v29 + 8) = __p.__r_.__value_.__r.__words[0];
      size = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = 0;
      *(_OWORD *)(v29 + 16) = __PAIR128__(__p.__r_.__value_.__r.__words[2], size);
      *(_QWORD *)(v29 + 32) = v49;
      v31 = (WTF *)__n_4;
      *(_QWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_DWORD *)(v29 + 52) = (_DWORD)v31;
      if ((_DWORD)v31)
      {
        v32 = (void *)WTF::fastMalloc(v31);
        *(_DWORD *)(v29 + 48) = (_DWORD)v31;
        *(_QWORD *)(v29 + 40) = v32;
        memcpy(v32, __src, __n_4);
      }
      v33 = v53;
      *(_QWORD *)(v29 + 72) = v54;
      *(_OWORD *)(v29 + 56) = v33;
      *(_QWORD *)(v29 + 80) = v55;
      v34 = (WTF *)v58;
      *(_QWORD *)(v29 + 88) = 0;
      *(_QWORD *)(v29 + 96) = 0;
      *(_DWORD *)(v29 + 100) = (_DWORD)v34;
      if ((_DWORD)v34)
      {
        v35 = (void *)WTF::fastMalloc(v34);
        *(_DWORD *)(v29 + 96) = (_DWORD)v34;
        *(_QWORD *)(v29 + 88) = v35;
        memcpy(v35, v56, v58);
      }
      v36 = v59;
      *(_QWORD *)(v29 + 120) = v60;
      *(_OWORD *)(v29 + 104) = v36;
      v37 = v61;
      v61 = 0;
      *(_QWORD *)(v29 + 128) = v37;
      *(_DWORD *)(v29 + 136) = v62;
      WTF::callOnMainRunLoop();
      v65 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v39 = v61;
      v61 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v38);
        else
          *(_DWORD *)v39 -= 2;
      }
      v45 = v56;
      if (v56)
      {
        v56 = 0;
        v57 = 0;
        WTF::fastFree(v45, v38);
      }
      v46 = (WTF *)__src;
      if (__src)
      {
        __src = 0;
        __n = 0;
        WTF::fastFree(v46, v38);
      }
      v47 = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = 0;
      if (v47)
        WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v47 + 24));
    }
  }
}

void WebKit::NetworkRTCProvider::wrapNewTCPConnection(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  unsigned __int8 **v42;
  uint8_t buf[8];
  uint64_t v44;

  v3 = *(_QWORD *)(a1 + 128);
  if (!v3)
    goto LABEL_39;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v3 + 16 * v10);
  if (v11 != a3)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(v3 + 16 * v10);
      ++v12;
      if (v11 == a3)
        goto LABEL_8;
    }
    v10 = *(unsigned int *)(v3 - 4);
  }
  if (v10 == *(_DWORD *)(v3 - 4))
    goto LABEL_39;
LABEL_8:
  v13 = (_QWORD *)(v3 + 16 * v10);
  v14 = v13[1];
  v13[1] = 0;
  v44 = v14;
  v15 = *(_QWORD **)(a1 + 128);
  if (!v15 || (v15 += 2 * *((unsigned int *)v15 - 1), v15 != v13))
  {
    if (v15 != v13)
    {
      *v13 = -1;
      v13[1] = 0;
      ++*(_DWORD *)(*(_QWORD *)(a1 + 128) - 16);
      v16 = *(_QWORD *)(a1 + 128);
      v17 = v16 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *(_QWORD *)(a1 + 128);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 - 12);
        v20 = *(unsigned int *)(v18 - 4);
        if (6 * v19 < v20 && v20 >= 9)
        {
          v21 = WTF::fastZeroedMalloc((WTF *)(16 * (v20 >> 1) + 16));
          v23 = 0;
          *(_QWORD *)(a1 + 128) = v21 + 16;
          *(_DWORD *)(v21 + 12) = v20 >> 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 128) - 8) = (v20 >> 1) - 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 128) - 16) = 0;
          *(_DWORD *)(*(_QWORD *)(a1 + 128) - 12) = v19;
          do
          {
            v24 = (uint64_t *)(v18 + 16 * v23);
            v25 = *v24;
            if (*v24 != -1)
            {
              if (v25)
              {
                v27 = *(_QWORD *)(a1 + 128);
                if (v27)
                  v28 = *(_DWORD *)(v27 - 8);
                else
                  v28 = 0;
                v29 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
                v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
                v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
                v32 = v28 & ((v31 >> 31) ^ v31);
                v33 = 1;
                do
                {
                  v34 = v32;
                  v35 = *(_QWORD *)(v27 + 16 * v32);
                  v32 = (v32 + v33++) & v28;
                }
                while (v35);
                v36 = (uint64_t *)(v27 + 16 * v34);
                v37 = v36[1];
                v36[1] = 0;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                *v36 = *v24;
                v26 = v18 + 16 * v23;
                v38 = *(_QWORD *)(v26 + 8);
                *(_QWORD *)(v26 + 8) = 0;
                v36[1] = v38;
              }
              else
              {
                v26 = v18 + 16 * v23;
              }
              v39 = *(_QWORD *)(v26 + 8);
              *(_QWORD *)(v26 + 8) = 0;
              if (v39)
                (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            }
            ++v23;
          }
          while (v23 != v20);
          WTF::fastFree((WTF *)(v18 - 16), v22);
        }
      }
    }
  }
  if (v14)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, *(unsigned __int8 ***)(a1 + 64));
    v40 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)buf = WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(v40, a2, a1, &v44, 2, (uint64_t *)&v42);
    WebKit::NetworkRTCProvider::addSocket(a1, a2, (uint64_t *)buf);
    if (*(_QWORD *)buf)
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v42);
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  else
  {
LABEL_39:
    v41 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "NetworkRTCProvider::wrapNewTCPConnection received an invalid socket identifier", buf, 2u);
    }
  }
}

void WebKit::NetworkRTCProvider::sendToSocket(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, WebKit::RTC::Network::SocketAddress *this, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  void *__p[2];
  char v18;

  v8 = *(_QWORD **)(a1 + 40);
  v6 = (_QWORD *)(a1 + 40);
  v7 = v8;
  if (v8)
  {
    v12 = v6;
    do
    {
      v13 = v7[4];
      v14 = v13 >= a2;
      if (v13 >= a2)
        v15 = v7;
      else
        v15 = v7 + 1;
      if (v14)
        v12 = v7;
      v7 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != v6 && v12[4] <= a2)
    {
      v16 = v12[5];
      WebKit::RTC::Network::SocketAddress::rtcAddress(this, (rtc::SocketAddress *)__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v16 + 48))(v16, a3, a4, __p, a6);
      if (v18 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t WebKit::NetworkRTCProvider::closeSocket(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 40);
  result = a1 + 40;
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = (uint64_t)v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result && *(_QWORD *)(v5 + 32) <= a2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 32))(*(_QWORD *)(v5 + 40));
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::setSocketOption(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;

  v6 = *(_QWORD **)(a1 + 40);
  result = a1 + 40;
  v5 = v6;
  if (v6)
  {
    v7 = result;
    do
    {
      v8 = v5[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v5;
      else
        v10 = v5 + 1;
      if (v9)
        v7 = (uint64_t)v5;
      v5 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != result && *(_QWORD *)(v7 + 32) <= a2)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 40) + 40))(*(_QWORD *)(v7 + 40), a3, a4);
  }
  return result;
}

uint64_t WebKit::NetworkRTCProvider::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  uint64_t (*v8)(_QWORD *);

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *a2;
  *a2 = 0;
  v6[0] = v3;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  webrtc::TaskQueueBase::PostTask(v2, (uint64_t)v6, (uint64_t)&v5);
  return v7(1, v6, v6);
}

unsigned int *WebKit::NetworkRTCProvider::createResolver(unsigned int *a1, uint64_t a2, WTF::StringImpl **a3)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  WTF *v13;
  char *v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  WTF **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF **v22;
  unsigned int *result;
  WTF *v24;
  unsigned int v25;
  WTF *v26;
  unint64_t v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF **v39;

  if ((WTF::isMainRunLoop((WTF *)a1) & 1) == 0)
  {
    v35 = (WTF *)a1;
    v17 = a1 + 6;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v36 = (WTF *)a1;
    v37 = (WTF *)a2;
    WTF::String::isolatedCopy();
    v19 = (WTF **)WTF::fastMalloc((WTF *)0x28);
    *v19 = (WTF *)&off_1E34C9030;
    v19[1] = v35;
    v19[2] = v36;
    v19[3] = v37;
    v20 = v38;
    v36 = 0;
    v38 = 0;
    v39 = v19;
    v19[4] = v20;
    WTF::callOnMainRunLoop();
    v22 = v39;
    v39 = 0;
    if (v22)
      (*((void (**)(WTF **))*v22 + 1))(v22);
    result = (unsigned int *)v38;
    v38 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
      else
        *result -= 2;
    }
    v24 = v36;
    v36 = 0;
    if (v24)
      return WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)v24 + 6);
    return result;
  }
  v7 = *((_QWORD *)a1 + 7);
  if (!v7)
  {
    v10 = 0;
    v9 = 1;
    goto LABEL_22;
  }
  v8 = *(_QWORD *)(v7 + 8);
  v9 = v8 == 0;
  if (v8)
  {
    v10 = (_DWORD *)(v8 - 48);
    ++*(_DWORD *)(v8 - 40);
    if (WebKit::NetworkMDNSRegister::hasRegisteredName((WebKit::NetworkMDNSRegister *)(v8 + 112), a3, v6))
    {
      v35 = 0;
      v36 = 0;
      if ((byte_1ECE72A79 & 1) != 0)
      {
        if (dword_1ECE72B08)
        {
          v11 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, 1uLL, (unint64_t)&xmmword_1ECE72AF0 + 8);
          v12 = HIDWORD(v36);
          v13 = v35;
          v14 = (char *)v35 + 20 * HIDWORD(v36);
          v15 = *(_DWORD *)(v11 + 16);
          *(_OWORD *)v14 = *(_OWORD *)v11;
          *((_DWORD *)v14 + 4) = v15;
          v16 = v12 + 1;
          HIDWORD(v36) = v16;
          if ((byte_1ECE72A79 & 1) == 0)
          {
            *(_OWORD *)&byte_1ECE72AE0 = 0u;
            xmmword_1ECE72AF0 = 0u;
            *(__int128 *)((char *)&xmmword_1ECE72B0C + 4) = 0u;
            unk_1ECE72B00 = 0u;
            unk_1ECE72A98 = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
            unk_1ECE72AA0 = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
            unk_1ECE72AA8 = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
            unk_1ECE72AC8 = 0;
            unk_1ECE72AC0 = 0;
            qword_1ECE72AB8 = 0;
            unk_1ECE72AB0 = &qword_1ECE72AB8;
            unk_1ECE72A90 = &off_1E34C8E40;
            unk_1ECE72AE8 = 0;
            *(_QWORD *)&xmmword_1ECE72AF0 = 0;
            *(_QWORD *)&dword_1ECE72AD8 = 0;
            qword_1ECE72AD0 = 0;
            byte_1ECE72A79 = 1;
LABEL_31:
            v33 = *(_QWORD *)(v8 + 16);
            v39 = &v35;
            IPC::Connection::send<Messages::WebRTCResolver::SetResolvedAddress>(v33, (uint64_t *)&v39, a2);
            result = (unsigned int *)v35;
            if (v35)
            {
              v35 = 0;
              LODWORD(v36) = 0;
              result = (unsigned int *)WTF::fastFree((WTF *)result, v34);
            }
LABEL_33:
            if (v10[2] == 1)
              return (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            --v10[2];
            return result;
          }
        }
        else
        {
          v16 = 0;
          v13 = 0;
        }
      }
      else
      {
        v16 = 0;
        v13 = 0;
        unk_1ECE72A98 = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
        unk_1ECE72AA0 = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
        unk_1ECE72AA8 = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
        qword_1ECE72AB8 = 0;
        unk_1ECE72AB0 = &qword_1ECE72AB8;
        unk_1ECE72A90 = &off_1E34C8E40;
        byte_1ECE72A79 = 1;
        *(_OWORD *)&byte_1ECE72AE0 = 0u;
        xmmword_1ECE72AF0 = 0u;
        *(__int128 *)((char *)&xmmword_1ECE72B0C + 4) = 0u;
        unk_1ECE72B00 = 0u;
        unk_1ECE72AC8 = 0;
        unk_1ECE72AC0 = 0;
        unk_1ECE72AE8 = 0;
        *(_QWORD *)&xmmword_1ECE72AF0 = 0;
        *(_QWORD *)&dword_1ECE72AD8 = 0;
        qword_1ECE72AD0 = 0;
      }
      if (dword_1ECE72B1C)
      {
        if (v16 == (_DWORD)v36)
        {
          v27 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v16 + 1, (unint64_t)&xmmword_1ECE72B0C);
          v28 = HIDWORD(v36);
          v29 = (char *)v35 + 20 * HIDWORD(v36);
          v30 = *(_DWORD *)(v27 + 16);
          *(_OWORD *)v29 = *(_OWORD *)v27;
          *((_DWORD *)v29 + 4) = v30;
          HIDWORD(v36) = v28 + 1;
        }
        else
        {
          v31 = dword_1ECE72B1C;
          v32 = (char *)v13 + 20 * v16;
          *(_OWORD *)v32 = xmmword_1ECE72B0C;
          *((_DWORD *)v32 + 4) = v31;
          HIDWORD(v36) = v16 + 1;
        }
      }
      goto LABEL_31;
    }
    v7 = *((_QWORD *)a1 + 7);
    if (!v7)
    {
      v9 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v10 = 0;
  }
  do
    v25 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v25 + 1, (unsigned int *)v7));
LABEL_22:
  v26 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v26 = &off_1E34C9058;
  *((_QWORD *)v26 + 1) = v7;
  *((_QWORD *)v26 + 2) = a2;
  v35 = v26;
  WebCore::resolveDNS();
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (!v9)
    goto LABEL_33;
  return result;
}

uint64_t WebKit::NetworkRTCProvider::stopResolver(WTF *a1, WebCore *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  if ((WTF::isMainRunLoop(a1) & 1) != 0)
    return WebCore::stopResolveDNS(a2);
  v5 = (unsigned int *)((char *)a1 + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34C9080;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = a2;
  v8 = v7;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

void WebKit::NetworkRTCProvider::getInterfaceName(WebKit::NetworkRTCProvider *a1, WTF::URL *a2, uint64_t a3, BOOL a4, int a5, const WebCore::RegistrableDomain *a6, uint64_t *a7)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const WTF::String *v16;
  WTF::StringImpl *v17;

  if ((*((_BYTE *)a2 + 8) & 2) != 0)
  {
    v16 = (const WTF::String *)WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier((uint64_t)a1, a3);
    WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(a1, a2, v16, a4, a5, a6, a7);
  }
  else
  {
    v17 = 0;
    v8 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v10 = v17;
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t webrtc::TaskQueueBase::PostTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7;
  _BYTE v8[16];
  __int128 v9;

  (*(void (**)(_QWORD))(a2 + 16))(0);
  v9 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  (*(void (**)(uint64_t, _BYTE *, char *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v8, &v7, a3);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v9)(1, v8, v8);
}

uint64_t WebKit::NetworkTransportSession::initialize(WebKit::NetworkConnectionToWebProcess *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::NetworkTransportSession *v5;
  uint64_t v6;
  uint64_t result;
  WebKit::NetworkTransportSession *v8;

  v5 = (WebKit::NetworkTransportSession *)WTF::fastMalloc((WTF *)0x40);
  v8 = WebKit::NetworkTransportSession::NetworkTransportSession(v5, a1);
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WebKit::NetworkTransportSession **))(*(_QWORD *)v6 + 16))(v6, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebKit::NetworkTransportSession *WebKit::NetworkTransportSession::NetworkTransportSession(WebKit::NetworkTransportSession *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t IdentifierInternal;
  unsigned int *v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = off_1E351EF70;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = off_1E34C8DA8;
  *((_QWORD *)this + 2) = &unk_1E34C8DF0;
  *((_QWORD *)this + 3) = IdentifierInternal;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  v5 = (unsigned int *)*((_QWORD *)a2 + 7);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 7) = v5;
  return this;
}

void WebKit::NetworkTransportSession::~NetworkTransportSession(WebKit::NetworkTransportSession *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  *(_QWORD *)this = off_1E34C8DA8;
  *((_QWORD *)this + 2) = &unk_1E34C8DF0;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (WTF **)(v6 + 8);
      do
      {
        if (*(v8 - 1) != (WTF *)-1)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
            WTF::fastFree(v9, a2);
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)(v10 + 16 * i) != -1)
        {
          v13 = v10 + 16 * i;
          v14 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            v15 = *(unsigned int **)v14;
            *(_QWORD *)v14 = 0;
            if (v15)
            {
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                atomic_store(1u, v15);
                WTF::fastFree((WTF *)v15, a2);
              }
            }
            WTF::fastFree(v14, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v19)
    {
      v20 = (void **)(v18 + 8);
      do
      {
        if (*(v20 - 1) != (void *)-1)
        {
          a2 = *v20;
          *v20 = 0;
          if (a2)
            std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((int)v20, (unsigned int **)a2);
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkTransportSession::~NetworkTransportSession(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::NetworkTransportSession::~NetworkTransportSession(WebKit::NetworkTransportSession *this, void *a2)
{
  WebKit::NetworkTransportSession::~NetworkTransportSession((WebKit::NetworkTransportSession *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkTransportSession::~NetworkTransportSession((WebKit::NetworkTransportSession *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::NetworkTransportSession::messageSenderConnection(WebKit::NetworkTransportSession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 7);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 16);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebKit::NetworkTransportSession::messageSenderConnection(WebKit::NetworkTransportSession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 16);
  else
    return 0;
}

uint64_t WebKit::NetworkTransportSession::messageSenderDestinationID(WebKit::NetworkTransportSession *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::NetworkTransportSession::messageSenderDestinationID(WebKit::NetworkTransportSession *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebKit::NetworkTransportSession::sendDatagram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::NetworkTransportSession::sendStreamSendBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;

  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 48), a2);
  v7 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkTransportSession::streamSendBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
    goto LABEL_7;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v7 + 16 * v12);
  if (v13 != a2)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v7 + 16 * v12);
      ++v14;
      if (v13 == a2)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  if (!*(_QWORD *)(v7 + 16 * v12 + 8))
LABEL_7:
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 48), a2);
  v15 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

uint64_t WebKit::NetworkTransportSession::createOutgoingUnidirectionalStream(uint64_t a1, uint64_t *a2)
{
  uint64_t IdentifierInternal;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v6 = WTF::fastMalloc((WTF *)1);
  v9 = *(_QWORD *)(a1 + 48);
  v8 = (uint64_t *)(a1 + 48);
  v7 = v9;
  if (v9
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v8, 0), (v7 = *v8) != 0))
  {
    v10 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (uint64_t *)(v7 + 16 * v14);
  v16 = *v15;
  if (!*v15)
  {
LABEL_12:
    v19 = (WTF *)v15[1];
    *v15 = IdentifierInternal;
    v15[1] = v6;
    if (v19)
      WTF::fastFree(v19, v5);
    v20 = *v8;
    if (*v8)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v23 = *v8;
    if (*v8)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_25;
    }
    else if (3 * v26 > 4 * v25)
    {
      goto LABEL_25;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v8, v15);
    goto LABEL_25;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != IdentifierInternal)
  {
    if (v16 == -1)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (uint64_t *)(v7 + 16 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
  v22 = (WTF *)v15[1];
  v15[1] = v6;
  if (v22)
    WTF::fastFree(v22, v5);
LABEL_25:
  v27 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, IdentifierInternal, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
}

uint64_t WebKit::NetworkTransportSession::createBidirectionalStream(uint64_t a1, uint64_t *a2)
{
  uint64_t IdentifierInternal;
  uint64_t *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unsigned int **v19;
  uint64_t v20;
  int v21;
  unsigned int **v22;
  _QWORD *v23;
  unsigned int **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v5 = (uint64_t *)(a1 + 32);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v7 = *(unsigned int **)(a1 + 8);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *v6 = v7;
  v9 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 32), 0), (v9 = *v5) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (uint64_t *)(v9 + 16 * v14);
  v16 = *v15;
  if (!*v15)
  {
LABEL_14:
    *v15 = IdentifierInternal;
    v19 = (unsigned int **)v15[1];
    v15[1] = (uint64_t)v6;
    if (v19)
      std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((_DWORD)v15 + 8, v19);
    v20 = *v5;
    if (*v5)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *v5;
    if (*v5)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_27;
    }
    else if (3 * v28 > 4 * v27)
    {
      goto LABEL_27;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v15);
    goto LABEL_27;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != IdentifierInternal)
  {
    if (v16 == -1)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (uint64_t *)(v9 + 16 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v15 = v17;
      }
      goto LABEL_14;
    }
  }
  v24 = (unsigned int **)v15[1];
  v23 = v15 + 1;
  v22 = v24;
  *v23 = v6;
  if (v24)
    std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((int)v23, v22);
LABEL_27:
  v29 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, IdentifierInternal, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
}

uint64_t *WebKit::NetworkTransportSession::destroyOutgoingUnidirectionalStream(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 48);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 48), &v7);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

void WebKit::NetworkTransportSession::destroyBidirectionalStream(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 32);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v7);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
}

void WebKit::LibWebRTCSocketClient::~LibWebRTCSocketClient(unsigned __int8 ***this)
{
  unsigned __int8 **v2;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 12);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*((void (**)(unsigned __int8 **))*v2 + 1))(v2);
  this[1] = (unsigned __int8 **)&off_1E34C8E60;
  ((void (*)(char *))this[4])((char *)this + 8);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 5), this[6]);
}

{
  unsigned __int8 **v2;
  void *v3;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 12);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*((void (**)(unsigned __int8 **))*v2 + 1))(v2);
  this[1] = (unsigned __int8 **)&off_1E34C8E60;
  ((void (*)(char *))this[4])((char *)this + 8);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 5), this[6]);
  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::LibWebRTCSocketClient::type(WebKit::LibWebRTCSocketClient *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebKit::LibWebRTCSocketClient::identifier(WebKit::LibWebRTCSocketClient *this)
{
  return *((_QWORD *)this + 8);
}

void `non-virtual thunk to'WebKit::LibWebRTCSocketClient::~LibWebRTCSocketClient(unsigned __int8 ***this)
{
  unsigned __int8 **v2;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 11);
  v2 = this[10];
  this[10] = 0;
  if (v2)
    (*((void (**)(unsigned __int8 **))*v2 + 1))(v2);
  *this = (unsigned __int8 **)&off_1E34C8E60;
  ((void (*)(unsigned __int8 ***))this[3])(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 4), this[5]);
}

{
  unsigned __int8 **v2;
  void *v3;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 11);
  v2 = this[10];
  this[10] = 0;
  if (v2)
    (*((void (**)(unsigned __int8 **))*v2 + 1))(v2);
  *this = (unsigned __int8 **)&off_1E34C8E60;
  ((void (*)(unsigned __int8 ***))this[3])(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 4), this[5]);
  WTF::fastFree((WTF *)(this - 1), v3);
}

void WebKit::NetworkManagerWrapper::~NetworkManagerWrapper(WebKit::NetworkManagerWrapper *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E34C8E60;
  (*((void (**)(WebKit::NetworkManagerWrapper *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E34C8E60;
  (*((void (**)(WebKit::NetworkManagerWrapper *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t sigslot::has_slots<sigslot::single_threaded>::~has_slots(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E34C8E60;
  (*(void (**)(void))(a1 + 24))();
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  return a1;
}

void sigslot::has_slots<sigslot::single_threaded>::~has_slots(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E34C8E60;
  (*(void (**)(void))(a1 + 24))();
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  JUMPOUT(0x19AEB936CLL);
}

void std::__tree<sigslot::_signal_base_interface *>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(a1, *a2);
    std::__tree<sigslot::_signal_base_interface *>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100](int a1, unsigned int **this)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (this)
  {
    v3 = *this;
    *this = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, this);
      }
    }
    WTF::fastFree((WTF *)this, this);
  }
}

uint64_t *sigslot::has_slots<sigslot::single_threaded>::do_signal_connect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return std::__tree<sigslot::_signal_base_interface *>::__emplace_unique_key_args<sigslot::_signal_base_interface *,sigslot::_signal_base_interface * const&>((uint64_t **)(a1 + 32), (unint64_t *)&v3, &v3);
}

uint64_t sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  return std::__tree<sigslot::_signal_base_interface *>::__erase_unique<sigslot::_signal_base_interface *>(a1 + 32, &v3);
}

void sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v11[2];

  v1 = a1[6];
  if (v1)
  {
    v3 = a1 + 5;
    do
    {
      v4 = (_QWORD *)a1[5];
      v10 = (_QWORD *)a1[4];
      v5 = v10;
      v11[0] = v4;
      a1[5] = 0;
      a1[6] = 0;
      v11[1] = v1;
      v4[2] = v11;
      a1[4] = v3;
      if (v5 != v11)
      {
        do
        {
          v6 = (_QWORD *)v5[1];
          v7 = v5;
          if (v6)
          {
            do
            {
              v8 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v7[2];
              v9 = *v8 == (_QWORD)v7;
              v7 = v8;
            }
            while (!v9);
          }
          (*(void (**)(void))v5[4])();
          v5 = v8;
        }
        while (v8 != v11);
        v4 = (_QWORD *)v11[0];
      }
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v10, v4);
      v1 = a1[6];
    }
    while (v1);
  }
}

uint64_t *std::__tree<sigslot::_signal_base_interface *>::__emplace_unique_key_args<sigslot::_signal_base_interface *,sigslot::_signal_base_interface * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<sigslot::_signal_base_interface *>::__erase_unique<sigslot::_signal_base_interface *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<sigslot::_signal_base_interface *>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<sigslot::_signal_base_interface *>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t *absl::internal_any_invocable::LocalInvoker<false,void,WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,std::unique_ptr<rtc::AsyncPacketSocket> &&,WebKit::NetworkRTCProvider::Socket::Type,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&)::$_0 &,rtc::AsyncPacketSocket*,rtc::ReceivedPacket const&>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  rtc::SocketAddress *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const rtc::IPAddress *v9;
  __int16 v10;
  _BYTE v11[20];
  _QWORD v12[3];
  __int16 v13;
  uint64_t v14;
  _QWORD v15[2];

  if (*(_BYTE *)(a3 + 24))
  {
    v3 = *(_QWORD *)(a3 + 8);
    v4 = *(rtc::SocketAddress **)(a3 + 32);
    v5 = *result;
    if ((unint64_t)(*(_QWORD *)(a3 + 16) + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
      v6 = 0;
    else
      v6 = *(_QWORD *)(a3 + 16);
    v15[0] = *(_QWORD *)a3;
    v15[1] = v3;
    v7 = *(_QWORD *)(v5 + 96);
    v8 = v5 + 64;
    v9 = (const rtc::IPAddress *)rtc::SocketAddress::ipaddr(v4);
    WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)v11, v9);
    v10 = rtc::SocketAddress::port(v4);
    v12[0] = v8;
    v12[1] = v15;
    v12[2] = v11;
    v13 = v10;
    v14 = v6;
    return (uint64_t *)IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(v7, (uint64_t)v12, 0, 0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 absl::internal_any_invocable::LocalManagerTrivial(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a2;
  *a3 = *a2;
  return result;
}

uint64_t sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *,rtc::SentPacket const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = a1[1];
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  v5 = (_QWORD *)(v4 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v5 + v1);
  return v1(v5);
}

void std::__function::__func<WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,std::unique_ptr<rtc::AsyncPacketSocket> &&,WebKit::NetworkRTCProvider::Socket::Type,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&)::$_1,std::allocator<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &>,void ()(rtc::AsyncPacketSocket*,int)>::~__func()
{
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,std::unique_ptr<rtc::AsyncPacketSocket> &&,WebKit::NetworkRTCProvider::Socket::Type,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&)::$_1,std::allocator<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &>,void ()(rtc::AsyncPacketSocket*,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E34C8E80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,std::unique_ptr<rtc::AsyncPacketSocket> &&,WebKit::NetworkRTCProvider::Socket::Type,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&)::$_1,std::allocator<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &>,void ()(rtc::AsyncPacketSocket*,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34C8E80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebKit::LibWebRTCSocketClient::LibWebRTCSocketClient(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,std::unique_ptr<rtc::AsyncPacketSocket> &&,WebKit::NetworkRTCProvider::Socket::Type,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&)::$_1,std::allocator<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &>,void ()(rtc::AsyncPacketSocket*,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  _QWORD v13[2];
  uint64_t (*v14)(char, uint64_t *, uint64_t *);
  uint64_t (*v15)(_QWORD *);

  v3 = *(unint64_t **)(a1 + 8);
  v11 = *a3;
  v4 = v3[12];
  v13[0] = v3 + 8;
  v13[1] = &v11;
  IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v4, (uint64_t)v13, 0, 0, 0);
  v5 = (uint64_t *)v3[10];
  WebKit::NetworkRTCProvider::takeSocket(v5, v3[8], &v10);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v7 = v10;
  *v6 = &off_1E34C8EC8;
  v6[1] = v7;
  v8 = v5[14];
  v13[0] = v6;
  v14 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v15 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  webrtc::TaskQueueBase::PostTask(v8, (uint64_t)v13, (uint64_t)&v12);
  return v14(1, v13, v13);
}

uint64_t sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = a1[1];
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  v5 = (_QWORD *)(v4 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v5 + v1);
  return v1(v5);
}

uint64_t sigslot::_opaque_connection::emitter<WebKit::LibWebRTCSocketClient,rtc::AsyncPacketSocket *,rtc::SocketAddress const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = a1[1];
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  v5 = (_QWORD *)(v4 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v5 + v1);
  return v1(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketClient::signalClose(rtc::AsyncPacketSocket *,int)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C8EC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketClient::signalClose(rtc::AsyncPacketSocket *,int)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C8EC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManagerWrapper::addListener(WebKit::NetworkRTCMonitor &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  _BOOL8 v3;
  rtc::Thread *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint8_t v11[16];

  v1 = *(_QWORD *)(result + 8);
  if (!*(_QWORD *)(v1 + 56))
  {
    v2 = qword_1ECE71B18;
    v3 = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkManagerWrapper startUpdating", v11, 2u);
    }
    v4 = (rtc::Thread *)WebKit::NetworkRTCProvider::rtcNetworkThread((WebKit::NetworkRTCProvider *)v3);
    v5 = rtc::Thread::socketserver(v4);
    v6 = operator new();
    MEMORY[0x19AEAC04C](v6, 0, v5, 0);
    v7 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = *(_QWORD *)(v1 + 56);
    }
    v8 = operator new(0x30uLL);
    v8[2] = sigslot::_opaque_connection::emitter<WebKit::NetworkManagerWrapper>;
    v8[3] = v1;
    v8[4] = WebKit::NetworkManagerWrapper::onNetworksChanged;
    v8[5] = 0;
    v10 = *(_QWORD *)(v6 + 32);
    v9 = (_QWORD *)(v6 + 32);
    *v8 = v10;
    v8[1] = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *v9 = v8;
    ++v9[2];
    (*(void (**)(uint64_t, _QWORD *))(v1 + 8))(v1, v9 - 2);
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 56) + 32))(*(_QWORD *)(v1 + 56));
  }
  return result;
}

uint64_t sigslot::_opaque_connection::emitter<WebKit::NetworkManagerWrapper>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkManagerWrapper::removeListener(WebKit::NetworkRTCMonitor &)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v3 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "NetworkManagerWrapper stopUpdating", v4, 2u);
      v2 = *(_QWORD *)(v1 + 56);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    result = *(_QWORD **)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 96 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 10);
      if (v4)
      {
        *((_QWORD *)v3 + 10) = 0;
        *((_DWORD *)v3 + 22) = 0;
        WTF::fastFree(v4, a2);
      }
      v5 = (WTF *)*((_QWORD *)v3 + 2);
      if (v5)
      {
        *((_QWORD *)v3 + 2) = 0;
        *((_DWORD *)v3 + 6) = 0;
        WTF::fastFree(v5, a2);
      }
      result = *(WTF **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v3 = (WTF *)((char *)v3 + 96);
    }
    while (v3 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkManagerWrapper::onNetworksChanged(void)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34C8F40;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkManagerWrapper::onNetworksChanged(void)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C8F40;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  return WTF::fastFree(a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkManagerWrapper::onNetworksChanged(void)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v2 + 80) = 1;
  v3 = (_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v2 + 100);
  if (v4)
    WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(*(WTF **)(v2 + 88), (WTF *)(*(_QWORD *)(v2 + 88) + 96 * v4));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v2 + 88, v3);
  v5 = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 120) = *(_DWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 104) = v5;
  v6 = *(_OWORD *)(a1 + 52);
  *(_DWORD *)(v2 + 140) = *(_DWORD *)(a1 + 68);
  *(_OWORD *)(v2 + 124) = v6;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v8 = result;
  result[1] = v2;
  v11 = *(_QWORD *)(v2 + 64);
  v10 = (uint64_t *)(v2 + 64);
  v9 = v11;
  *result = off_1E34C8F68;
  if (v11 && (v12 = *(unsigned int *)(v9 - 12), (_DWORD)v12))
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
  }
  else
  {
    v13 = 0;
  }
  v14 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v10);
  v16 = v14;
  v17 = v15;
  if (*v10)
    v18 = *v10 + 8 * *(unsigned int *)(*v10 - 4);
  else
    v18 = 0;
  if ((_QWORD *)v18 != v14)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v20;
      v22 = *(unsigned int ***)(*v16 + 8);
      if (v22)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*v16 + 8), *(_QWORD *)(*v16 + 8));
        v23 = *v22;
        if (*v22)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
      }
      else
      {
        v23 = 0;
      }
      *((_QWORD *)v13 + v19) = v23;
      while (++v16 != v17)
      {
        if ((unint64_t)(*v16 + 1) > 1)
          goto LABEL_23;
      }
      v16 = v17;
LABEL_23:
      ++v19;
      v20 = v21 + 1;
    }
    while (v16 != (_QWORD *)v18);
    if (v19)
    {
      v25 = 8 * v21;
      v26 = v13;
      do
      {
        if (*(_QWORD *)v26)
        {
          if (*(_QWORD *)(*(_QWORD *)v26 + 8))
          {
            v31 = *(_QWORD *)v26;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v10, &v31))(*(void (**)(_QWORD *, _QWORD))(*v8 + 16))(v8, *(_QWORD *)(*(_QWORD *)v26 + 8));
          }
        }
        v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
      v27 = (unsigned int **)v13;
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
        {
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v15);
          }
        }
        ++v27;
      }
      while (v27 != (unsigned int **)((char *)v13 + 8 * v19));
    }
  }
  if (v13)
    WTF::fastFree(v13, v15);
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

char *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21NetworkManagerWrapper17onNetworksChangedEvEN3__1clEvEUlRT_E_vJRNS2_17NetworkRTCMonitorEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkRTCMonitor::onNetworksChanged(a2, *(_QWORD *)(a1 + 8) + 88, (int *)(*(_QWORD *)(a1 + 8) + 104), (int *)(*(_QWORD *)(a1 + 8) + 124));
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::NetworkRTCProvider::rtcNetworkThread(void)::$_0 &&>>(rtc::Thread *a1)
{
  uint64_t v1;
  uint64_t v3;

  rtc::Thread::CreateWithSocketServer(a1);
  v1 = qword_1ECE72A80;
  qword_1ECE72A80 = v3;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  rtc::Thread::SetName();
  return rtc::Thread::Start((rtc::Thread *)qword_1ECE72A80);
}

WTF *std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(WTF *result)
{
  WTF *v1;
  void *v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(*(_QWORD *)result);
    std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(*((_QWORD *)v1 + 1));
    v3 = *((_QWORD *)v1 + 5);
    *((_QWORD *)v1 + 5) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return (WTF *)WTF::fastFree(v1, v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::close(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C8F90;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C8F90;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::close(void)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v1;
  WTF *v2;
  _QWORD *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF **v7;
  WTF *v8;
  WTF **v9;
  BOOL v10;
  uint64_t v11;
  WTF *v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;

  v1 = *(_QWORD **)(a1 + 8);
  v13 = 0;
  v14 = 0;
  v3 = v1 + 5;
  v2 = (WTF *)v1[5];
  v15 = (WTF **)v1[4];
  v16 = v2;
  if (v1[6])
  {
    *((_QWORD *)v2 + 2) = &v16;
    v2 = 0;
    v1[4] = v3;
    *v3 = 0;
    v1[6] = 0;
  }
  else
  {
    v15 = &v16;
  }
  std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(v2);
  v4 = v13;
  v1[4] = &v13;
  v1[5] = v4;
  v5 = v14;
  v1[6] = v14;
  if (v5)
  {
    *((_QWORD *)v4 + 2) = v3;
    v13 = 0;
    v14 = 0;
    v4 = 0;
  }
  else
  {
    v1[4] = v3;
  }
  std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(v4);
  v7 = v15;
  if (v15 != &v16)
  {
    do
    {
      (*(void (**)(WTF *))(*(_QWORD *)v7[5] + 32))(v7[5]);
      v8 = v7[1];
      if (v8)
      {
        do
        {
          v9 = (WTF **)v8;
          v8 = *(WTF **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (WTF **)v7[2];
          v10 = *v9 == (WTF *)v7;
          v7 = v9;
        }
        while (!v10);
      }
      v7 = v9;
    }
    while (v9 != &v16);
  }
  v11 = v1[18];
  if (v11)
  {
    v1[18] = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, v6);
  }
  return std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::destroy(v16);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::attributedBundleIdentifierFromPageIdentifier(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 24);
      v11 = *(WTF::StringImpl **)(v2 + 32);
      result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 208), &v11);
      if (result)
      {
        v11 = **(WTF::StringImpl ***)(v3 + 24);
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_DWORD **)(result + 824), &v11, &v10);
        WTF::String::isolatedCopy();
        v6 = *(WTF::StringImpl ***)(v3 + 16);
        v7 = v11;
        v11 = 0;
        v8 = *v6;
        *v6 = v7;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v5);
          else
            *(_DWORD *)v9 -= 2;
        }
        result = (uint64_t)v10;
        v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createClientTCPSocket(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress const&,WebKit::RTC::Network::SocketAddress const&,WTF::String &&,int,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E34C8FE0;
  v3 = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF **)(a1 + 88);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF **)(a1 + 40);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createClientTCPSocket(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress const&,WebKit::RTC::Network::SocketAddress const&,WTF::String &&,int,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C8FE0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 24));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createClientTCPSocket(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress const&,WebKit::RTC::Network::SocketAddress const&,WTF::String &&,int,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void **v21;
  void **v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  void *__p[2];
  char v27;
  int v28;
  char v29;
  _QWORD v30[2];
  uint64_t (*v31)(char, uint64_t *, uint64_t *);
  uint64_t (*v32)(_QWORD *);

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 24);
      v21 = *(void ***)(v3 + 32);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v21))
      {
        v21 = (void **)v1;
        v6 = (unsigned int *)(v1 + 24);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(a1 + 24);
        v22 = (void **)v1;
        v23 = v8;
        WebKit::RTC::Network::SocketAddress::rtcAddress((WebKit::RTC::Network::SocketAddress *)(a1 + 32), (rtc::SocketAddress *)v19);
        WebKit::RTC::Network::SocketAddress::isolatedCopy((size_t *)v19, (rtc::SocketAddress *)v24);
        WebKit::RTC::Network::SocketAddress::rtcAddress((WebKit::RTC::Network::SocketAddress *)(a1 + 80), (rtc::SocketAddress *)v17);
        WebKit::RTC::Network::SocketAddress::isolatedCopy((size_t *)v17, (rtc::SocketAddress *)__p);
        v28 = *(_DWORD *)(a1 + 136);
        v9 = WTF::fastMalloc((WTF *)0xB8);
        *(_QWORD *)v9 = &off_1E34C9008;
        *(_QWORD *)(v9 + 8) = v21;
        v10 = v22;
        v22 = 0;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = v23;
        rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(v9 + 32), (const rtc::SocketAddress *)v24);
        rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(v9 + 104), (const rtc::SocketAddress *)__p);
        *(_DWORD *)(v9 + 176) = v28;
        v11 = *(_QWORD *)(v1 + 112);
        v30[0] = v9;
        v31 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
        v32 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
        webrtc::TaskQueueBase::PostTask(v11, (uint64_t)v30, (uint64_t)&v29);
        v31(1, v30, v30);
        if (v27 < 0)
          operator delete(__p[0]);
        if (v25 < 0)
          operator delete(v24[0]);
        v12 = v22;
        v22 = 0;
        if (v12)
          WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)v12 + 6);
        if (v18 < 0)
          operator delete(v17[0]);
        if (v20 < 0)
          operator delete(v19[0]);
      }
      else
      {
        v13 = *(_QWORD *)(v1 + 56);
        v19[0] = *(void **)(a1 + 24);
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
          v15 = v14 - 48;
        else
          v15 = 0;
        v16 = *(_QWORD *)(v15 + 64);
        LODWORD(v17[0]) = 1;
        v21 = v19;
        v22 = v17;
        IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v16, (uint64_t)&v21, 0, 0, 0);
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createClientTCPSocket(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress const&,WebKit::RTC::Network::SocketAddress const&,WTF::String &&,int,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E34C9008;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createClientTCPSocket(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress const&,WebKit::RTC::Network::SocketAddress const&,WTF::String &&,int,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void **this, void *a2)
{
  unsigned int *v3;

  *this = &off_1E34C9008;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v3 = (unsigned int *)this[2];
  this[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v3 + 6);
  return WTF::fastFree((WTF *)this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createClientTCPSocket(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress const&,WebKit::RTC::Network::SocketAddress const&,WTF::String &&,int,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::RegistrableDomain &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unint64_t v9;
  NSObject *v10;
  unsigned __int8 **v11;
  uint8_t buf[8];
  _OWORD v13[3];
  uint64_t v14;
  void (***v15)(void **);

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(v2 + 40);
  if (!v3)
    goto LABEL_12;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = v2 + 40;
  do
  {
    v6 = v3[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (uint64_t)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 + 40 && v4 >= *(_QWORD *)(v5 + 32))
  {
    v10 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "NetworkRTCProvider::createClientTCPSocket duplicate identifier", buf, 2u);
    }
  }
  else
  {
LABEL_12:
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    *(_DWORD *)buf = *(_DWORD *)(a1 + 176);
    v15 = (void (***)(void **))(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint8_t *))(**(_QWORD **)(v2 + 120) + 32))(*(_QWORD *)(v2 + 120), a1 + 32, a1 + 104, buf);
    v9 = *(_QWORD *)(a1 + 24);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, *(unsigned __int8 ***)(v2 + 64));
    WebKit::NetworkRTCProvider::createSocket(v2, v9, (uint64_t *)&v15, 1, (uint64_t *)&v11);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
    if (v15)
      (*v15)[1]((void **)v15);
    v15 = (void (***)(void **))&v13[1] + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:sn180100]((void ***)&v15);
    v15 = (void (***)(void **))v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:sn180100]((void ***)&v15);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,std::__map_value_compare<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>,WebKit::SocketComparator,true>,WTF::FastAllocator<std::__value_type<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkRTCProvider::Socket>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;

  v4 = std::__tree<sigslot::_signal_base_interface *>::__remove_node_pointer(a1, a2);
  v5 = a2[5];
  a2[5] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::fastFree((WTF *)a2, v3);
  return v4;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34C9030;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C9030;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  unsigned int *result;
  uint64_t v3;

  result = *(unsigned int **)(a1 + 8);
  v3 = *((_QWORD *)result + 7);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
      return WebKit::NetworkRTCProvider::createResolver(result, *(_QWORD *)(a1 + 24), (WTF::StringImpl **)(a1 + 32));
  }
  return result;
}

char *IPC::Connection::send<Messages::WebRTCResolver::SetResolvedAddress>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void *v18;
  char *result;
  WTF *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2661;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v25 = (IPC::Encoder *)v6;
  v7 = *a2;
  v8 = *(unsigned int *)(*a2 + 12);
  v9 = *(_QWORD *)(v6 + 544);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v6 + 552);
  if (v12 < v10 + 8)
  {
    v22 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v11);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v24 = *(void **)(v6 + 528);
    if (v24 != (void *)(v6 + 16))
      munmap(v24, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v13;
    *(_QWORD *)(v6 + 552) = v23;
    v9 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v13 = *(char **)(v6 + 528);
  }
  bzero(&v13[v9], v10 - v9);
  *(_QWORD *)(v6 + 544) = v11;
  v14 = (_QWORD *)(*(_QWORD *)(v6 + 528) + v10);
  *(_QWORD *)(v6 + 536) = v14 + 1;
  *v14 = v8;
  v15 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(int **)v7;
    v17 = 20 * v15;
    do
    {
      IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::encode((IPC::Encoder *)v6, v16);
      v16 += 5;
      v17 -= 20;
    }
    while (v17);
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v25, 0, 0);
  result = (char *)v25;
  v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    return (char *)WTF::fastFree(v20, v21);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::DNSError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C9058;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::DNSError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9058;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::createResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&)::$_1,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::DNSError> &&>::call(WTF *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  char *v25;
  int v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  char v41;
  _BYTE v42[28];

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = result;
      v6 = a2[4];
      if (v6)
      {
        if (v6 == 1)
        {
          if (*a2 == 2)
            return result;
          v7 = *(_QWORD *)(v3 + 16);
          v8 = *((_QWORD *)result + 2);
          v9 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v9 = 2660;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 528) = v9 + 16;
          *(_QWORD *)(v9 + 536) = v9 + 16;
          *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v9 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
          *(_QWORD *)v42 = v9;
          v10 = *(_QWORD *)(v9 + 544);
          v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v12 = v11 + 4;
          v13 = *(_QWORD *)(v9 + 552);
          if (v13 >= v11 + 4)
          {
            v14 = *(char **)(v9 + 528);
LABEL_8:
            bzero(&v14[v10], v11 - v10);
            *(_QWORD *)(v9 + 544) = v12;
            v15 = (_DWORD *)(*(_QWORD *)(v9 + 528) + v11);
            *(_QWORD *)(v9 + 536) = v15 + 1;
            *v15 = 1;
            IPC::Connection::sendMessageImpl(v7, (uint64_t *)v42, 0, 0);
            result = *(WTF **)v42;
            *(_QWORD *)v42 = 0;
            if (!result)
              return result;
            IPC::Encoder::~Encoder(result, v16);
            return (WTF *)WTF::fastFree(result, v17);
          }
          v33 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v34 = v33;
            v33 *= 2;
          }
          while (v34 < v12);
          v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
          if (v35 != (char *)-1)
          {
            v14 = v35;
            memcpy(v35, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
            v36 = *(void **)(v9 + 528);
            if (v36 != (void *)(v9 + 16))
              munmap(v36, *(_QWORD *)(v9 + 552));
            *(_QWORD *)(v9 + 528) = v14;
            *(_QWORD *)(v9 + 552) = v34;
            v10 = *(_QWORD *)(v9 + 544);
            goto LABEL_8;
          }
        }
        else
        {
          std::__throw_bad_variant_access[abi:sn180100]();
        }
LABEL_39:
        __break(0xC471u);
        JUMPOUT(0x1972096CCLL);
      }
      v37 = 0;
      v38 = 0;
      v18 = a2[3];
      if ((_DWORD)v18)
      {
        if (v18 >= 0xCCCCCCD)
          goto LABEL_39;
        LODWORD(v38) = 20 * (int)v18 / 0x14u;
        v37 = (WTF *)WTF::fastMalloc((WTF *)(20 * v18));
        v19 = a2[3];
        if ((_DWORD)v19)
        {
          LODWORD(v18) = 0;
          v20 = *(_DWORD **)a2;
          v21 = 20 * v19;
          while (1)
          {
            v22 = v20[4];
            if (v22 == 2)
              break;
            if (v22 == 1)
            {
              *(_QWORD *)v42 = &off_1E34B67B0;
              *(_DWORD *)&v42[8] = 2;
              *(_QWORD *)&v42[16] = 0;
              *(_DWORD *)&v42[24] = 0;
              *(_DWORD *)&v42[12] = *v20;
LABEL_18:
              WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v39, (const rtc::IPAddress *)v42);
              v41 = 1;
              *(_OWORD *)v42 = v39;
              *(_DWORD *)&v42[16] = v40;
              v23 = HIDWORD(v38);
              if (HIDWORD(v38) == (_DWORD)v38)
              {
                v24 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)v42);
                v23 = HIDWORD(v38);
                v25 = (char *)v37 + 20 * HIDWORD(v38);
                v26 = *(_DWORD *)(v24 + 16);
                *(_OWORD *)v25 = *(_OWORD *)v24;
                *((_DWORD *)v25 + 4) = v26;
              }
              else
              {
                v27 = (char *)v37 + 20 * HIDWORD(v38);
                v28 = v39;
                *((_DWORD *)v27 + 4) = v40;
                *(_OWORD *)v27 = v28;
              }
              LODWORD(v18) = v23 + 1;
              HIDWORD(v38) = v18;
            }
            v20 += 5;
            v21 -= 20;
            if (!v21)
              goto LABEL_25;
          }
          *(_QWORD *)v42 = &off_1E34B67B0;
          *(_DWORD *)&v42[8] = 30;
          *(_OWORD *)&v42[12] = *(_OWORD *)v20;
          goto LABEL_18;
        }
        LODWORD(v18) = 0;
      }
LABEL_25:
      WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v37, v18);
      v29 = *((_QWORD *)v5 + 2);
      v30 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 8);
      if (v30)
        v31 = v30 - 48;
      else
        v31 = 0;
      v32 = *(_QWORD *)(v31 + 64);
      *(_QWORD *)v42 = &v37;
      IPC::Connection::send<Messages::WebRTCResolver::SetResolvedAddress>(v32, (uint64_t *)v42, v29);
      result = v37;
      if (v37)
      {
        v37 = 0;
        LODWORD(v38) = 0;
        return (WTF *)WTF::fastFree(result, v17);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::stopResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C9080;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::stopResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C9080;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkRTCProvider::stopResolver(WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  WTF *result;
  uint64_t v3;

  result = *(WTF **)(a1 + 8);
  v3 = *((_QWORD *)result + 7);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
      return (WTF *)WebKit::NetworkRTCProvider::stopResolver(result, *(WebCore **)(a1 + 24));
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 != a2)
    {
      v8 = 1;
      do
      {
        if (!v7)
          break;
        v6 = (v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WTF *)v26[1];
          v26[1] = 0;
          if (v27)
            WTF::fastFree(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WTF **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::fastFree(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::fastFree(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int **v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int **v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int ***v31;
  uint64_t v32;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v29 = v27 + 1;
          v28 = (unsigned int **)v27[1];
          v27[1] = 0;
          if (v28)
            std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((int)v29, v28);
          *v27 = *v13;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (unsigned int ***)(v30 + 8);
          *v31 = 0;
          *v29 = v32;
          v10 = *v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((int)v31, v10);
          if (v13 == a3)
            v12 = v27;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(unsigned int ***)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
            std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((int)v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportSendStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportSendStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  unsigned int **v4;
  unsigned int **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v5 = (unsigned int **)a2[1];
  v3 = a2 + 1;
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebKit::NetworkTransportBidirectionalStream>::operator()[abi:sn180100]((int)v3, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkTransportBidirectionalStream>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 >= v5 + 1)
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
LABEL_3:
    bzero(&v8[v9], v5 - v9);
    *(_QWORD *)(a1 + 544) = v6;
    v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    return;
  }
  v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v6);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

void sub_19720A1F4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19720A5E4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  unsigned __int8 *v13;
  int v15;

  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
    {
LABEL_6:
      WTF::Vector<WTF::Ref<WebKit::ProcessAndUIAssertion,WTF::RawPtrTraits<WebKit::ProcessAndUIAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAndUIAssertion>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_6;
}

void sub_19720A760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_19720AA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_19720AB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_19720AD60(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  WTF::fastFree(v10, a2);
  _Unwind_Resume(a1);
}

void sub_19720AF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19720B0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::ProcessAssertion(uint64_t a1, int a2, _DWORD **a3, char a4, const WTF::String **a5)
{
  uint64_t v10;
  _DWORD *v11;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)a1 = off_1E34C90D0;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a2;
  v11 = *a3;
  if (*a3)
    *v11 += 2;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  WebKit::ProcessAssertion::init((WebKit::ProcessAssertion *)a1, *a5);
  return a1;
}

void sub_19720B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const void **v14;
  WebKit::ExtensionCapabilityGrant *v15;
  uint64_t v16;
  const void **v17;
  uint64_t *v18;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  WTF::StringImpl *v26;

  if (*(_BYTE *)(v13 + 168))
  {
    v20 = *(unsigned int *)(v13 + 160);
    if ((_DWORD)v20 != -1)
      ((void (*)(char *, uint64_t))off_1E34C9568[v20])(&a13, v16);
    *(_DWORD *)(v13 + 160) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v15);
  if (*(_BYTE *)(v13 + 128))
    WebKit::AssertionCapability::~AssertionCapability(v14);
  v22 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v13 + 64) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *v18;
  *v18 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(const void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *v17;
  *v17 = 0;
  if (v25)
    CFRelease(v25);
  v26 = *(WTF::StringImpl **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v21);
    else
      *(_DWORD *)v26 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::init(WebKit::ProcessAssertion *this, const WTF::String *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  WTF::StringImpl *v11;
  const __CFString *v12;
  const __CFString *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  id v16;
  const __CFString *v17;
  uint64_t v18;
  const void *v19;
  WKRBSAssertionDelegate *v20;
  const void *v21;
  uint64_t v22;
  char *v23;
  int v24;
  void *v25;
  _QWORD v26[7];
  _QWORD v27[7];
  WTF *v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  const char *v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  switch(*((_BYTE *)this + 16))
  {
    case 1:
      v3 = "Background";
      goto LABEL_6;
    case 2:
      v3 = "UnboundedNetworking";
      v4 = 20;
      break;
    case 3:
      v3 = "Foreground";
LABEL_6:
      v4 = 11;
      break;
    case 4:
      v3 = "MediaPlayback";
      goto LABEL_11;
    case 5:
      v3 = "FinishTaskCanSleep";
      v4 = 19;
      break;
    case 6:
      v3 = "FinishTaskInterruptable";
      v4 = 24;
      break;
    case 7:
      v3 = "BoostedJetsam";
LABEL_11:
      v4 = 14;
      break;
    default:
      v3 = "Suspended";
      v4 = 10;
      break;
  }
  v5 = *((unsigned int *)this + 5);
  if ((int)v5 > 0)
  {
    if (a2 && *((_DWORD *)a2 + 1))
      v6 = objc_msgSend(MEMORY[0x1E0D87DF8], "targetWithPid:environmentIdentifier:", v5, WTF::StringImpl::operator NSString *());
    else
      v6 = objc_msgSend(MEMORY[0x1E0D87DF8], "targetWithPid:", *((unsigned int *)this + 5));
    v9 = v6;
    v10 = (void *)MEMORY[0x1E0D87CD0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = *(WTF::StringImpl **)buf;
    if (*(_QWORD *)buf)
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (*(_QWORD *)buf)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    v15 = objc_msgSend(v10, "attributeWithDomain:name:", v12, v13);
    if (*(_QWORD *)buf)
    {
      if (**(_DWORD **)buf == 2)
      {
        WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, v14);
LABEL_29:
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v14);
        else
          *(_DWORD *)v11 -= 2;
LABEL_32:
        v16 = objc_alloc(MEMORY[0x1E0D87C98]);
        if (*((_QWORD *)this + 3))
          v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v17 = &stru_1E351F1B8;
        v29 = v15;
        v18 = objc_msgSend(v16, "initWithExplanation:target:attributes:", v17, v9, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v29, 1));
        v19 = (const void *)*((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v18;
        if (v19)
          CFRelease(v19);
        v20 = objc_alloc_init(WKRBSAssertionDelegate);
        v21 = (const void *)*((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v20;
        if (v21)
        {
          CFRelease(v21);
          v20 = (WKRBSAssertionDelegate *)*((_QWORD *)this + 5);
        }
        objc_msgSend(*((id *)this + 4), "addObserver:", v20);
        v22 = MEMORY[0x1E0C809B0];
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke;
        v27[3] = &__block_descriptor_56_e5_v8__0l;
        v27[4] = this;
        v27[5] = v3;
        v27[6] = v4;
        objc_msgSend(*((id *)this + 5), "setInvalidationCallback:", v27);
        v26[0] = v22;
        v26[1] = 3221225472;
        v26[2] = ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke_107;
        v26[3] = &__block_descriptor_56_e5_v8__0l;
        v26[4] = this;
        v26[5] = v3;
        v26[6] = v4;
        return objc_msgSend(*((id *)this + 5), "setPrepareForInvalidationCallback:", v26);
      }
      **(_DWORD **)buf -= 2;
    }
    if (!v11)
      goto LABEL_32;
    goto LABEL_29;
  }
  v7 = qword_1ECE71640;
  result = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    WTF::String::utf8();
    v23 = v28 ? (char *)v28 + 16 : 0;
    v24 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = this;
    v31 = 2082;
    v32 = v3;
    v33 = 2082;
    v34 = v23;
    v35 = 1024;
    v36 = v24;
    _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - ProcessAssertion: Failed to acquire RBS %{public}s assertion '%{public}s' for process because PID %d is invalid", buf, 0x26u);
    result = (uint64_t)v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = WTF::fastFree((WTF *)result, v25);
      else
        --*(_DWORD *)result;
    }
  }
  *((_BYTE *)this + 48) = 1;
  return result;
}

void sub_19720B718(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke(uint64_t a1)
{
  _DWORD *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v7;
  _DWORD *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD **)(a1 + 32);
  v3 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = v2[5];
    v7 = 134218498;
    v8 = v2;
    v9 = 2082;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion: RBS %{public}s assertion for process with PID=%d was invalidated", (uint8_t *)&v7, 0x1Cu);
  }
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
}

uint64_t ___ZN6WebKit16ProcessAssertion4initERKN3WTF6StringE_block_invoke_107(uint64_t a1)
{
  WebKit::ProcessAssertion *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v7;
  WebKit::ProcessAssertion *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(WebKit::ProcessAssertion **)(a1 + 32);
  v3 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *((_DWORD *)v2 + 5);
    v7 = 134218498;
    v8 = v2;
    v9 = 2082;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion() RBS %{public}s assertion for process with PID=%d will be invalidated", (uint8_t *)&v7, 0x1Cu);
  }
  return WebKit::ProcessAssertion::processAssertionWillBeInvalidated(v2);
}

uint64_t WebKit::ProcessAssertion::processAssertionWillBeInvalidated(WebKit::ProcessAssertion *this)
{
  NSObject *v2;
  int v3;
  uint64_t result;
  int v5;
  WebKit::ProcessAssertion *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 5);
    v5 = 134218240;
    v6 = this;
    v7 = 1024;
    v8 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::processAssertionWillBeInvalidated() PID=%d", (uint8_t *)&v5, 0x12u);
  }
  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void WebKit::ProcessAssertion::~ProcessAssertion(WebKit::ProcessAssertion *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void *v5;
  const void *v6;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint8_t buf[4];
  WebKit::ProcessAssertion *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E34C90D0;
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    v3 = v16 ? (uint64_t)v16 + 16 : 0;
    v4 = *((_DWORD *)this + 5);
    *(_DWORD *)buf = 134218498;
    v18 = this;
    v19 = 2082;
    v20 = v3;
    v21 = 1024;
    v22 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ~ProcessAssertion: Releasing process assertion '%{public}s' for process with PID=%d", buf, 0x1Cu);
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v5);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*((_QWORD *)this + 4))
  {
    objc_msgSend(*((id *)this + 5), "setInvalidationCallback:", 0);
    objc_msgSend(*((id *)this + 5), "setPrepareForInvalidationCallback:", 0);
    objc_msgSend(*((id *)this + 4), "removeObserver:", *((_QWORD *)this + 5));
    v6 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v6)
      CFRelease(v6);
    objc_msgSend(*((id *)this + 4), "invalidate");
  }
  if (__ldaxr(WebKit::ProcessAssertion::s_capabilityLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebKit::ProcessAssertion::s_capabilityLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEABB3C](WebKit::ProcessAssertion::s_capabilityLock);
LABEL_17:
  WebKit::ExtensionCapabilityGrant::invalidate((WebKit::ProcessAssertion *)((char *)this + 136));
  v8 = __ldxr(WebKit::ProcessAssertion::s_capabilityLock);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, WebKit::ProcessAssertion::s_capabilityLock))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)WebKit::ProcessAssertion::s_capabilityLock);
  if (*((_BYTE *)this + 168))
  {
    v9 = *((unsigned int *)this + 40);
    if ((_DWORD)v9 != -1)
      ((void (*)(uint8_t *, char *))off_1E34C9568[v9])(buf, (char *)this + 152);
    *((_DWORD *)this + 40) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ProcessAssertion *)((char *)this + 136));
  if (*((_BYTE *)this + 128))
    WebKit::AssertionCapability::~AssertionCapability((const void **)this + 9);
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    CFRelease(v14);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v10);
    else
      *(_DWORD *)v15 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::ProcessAssertion::~ProcessAssertion(this);
  WTF::fastFree(v1, v2);
}

void sub_19720BC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  WTF::StringImpl *v11;
  va_list va;

  va_start(va, a3);
  if (*(_BYTE *)(v3 + 168))
  {
    v5 = *(unsigned int *)(v3 + 160);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E34C9568[v5])(va, v3 + 152);
    *(_DWORD *)(v3 + 160) = -1;
  }
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)(v3 + 136));
  if (*(_BYTE *)(v3 + 128))
    WebKit::AssertionCapability::~AssertionCapability((const void **)(v3 + 72));
  v7 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(const void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(WTF::StringImpl **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAssertion::processAssertionWasInvalidated(WebKit::ProcessAssertion *this)
{
  NSObject *v2;
  int v3;
  uint64_t result;
  int v5;
  WebKit::ProcessAssertion *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 5);
    v5 = 134218240;
    v6 = this;
    v7 = 1024;
    v8 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion::processAssertionWasInvalidated() PID=%d", (uint8_t *)&v5, 0x12u);
  }
  *((_BYTE *)this + 48) = 1;
  result = *((_QWORD *)this + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void WebKit::ProcessAndUIAssertion::~ProcessAndUIAssertion(WebKit::ProcessAndUIAssertion *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 184))
    objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "_updateBackgroundTask");
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebKit::ProcessAssertion::~ProcessAssertion(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::ProcessAndUIAssertion::~ProcessAndUIAssertion(this);
  WTF::fastFree(v1, v2);
}

void sub_19720BE98(_Unwind_Exception *a1)
{
  WebKit::ProcessAssertion *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 22);
  *((_QWORD *)v1 + 22) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::ProcessAssertion::~ProcessAssertion(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessAndUIAssertion::setProcessStateMonitorEnabled(WebKit::ProcessAndUIAssertion *this)
{
  return objc_msgSend(+[WKProcessAssertionBackgroundTaskManager shared](WKProcessAssertionBackgroundTaskManager, "shared"), "setProcessStateMonitorEnabled:", this);
}

unsigned __int8 *WebKit::ProcessAndUIAssertion::processAssertionWasInvalidated(WebKit::ProcessAndUIAssertion *this)
{
  WTF::ThreadSafeWeakPtrControlBlock *v2;
  WTF::Lock *v3;
  unsigned __int8 *result;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v2 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
  if (v2)
    v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v2);
  else
    v3 = 0;
  result = (unsigned __int8 *)WebKit::ProcessAssertion::processAssertionWasInvalidated(this);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v3, (uint64_t)this);
    v6 = v8;
    if (v8)
    {
      WebKit::ProcessAndUIAssertion::updateRunInBackgroundCount(this);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), v7);
    }
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)v3, v5);
  }
  return result;
}

void sub_19720BF98(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  void *v5;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ResourceLoadDelegate::setDelegate(uint64_t a1, void *a2)
{
  char v3;
  char v4;
  char v5;
  uint64_t result;
  char v7;

  objc_storeWeak((id *)(a1 + 8), a2);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xFB | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xF7 | v5;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    v7 = 16;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xEF | v7;
  return result;
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didSendRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  id WeakRetained;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    if (WeakRetained)
    {
      v6 = WeakRetained;
      v7 = objc_loadWeakRetained(*(id **)(a1 + 8));
      API::ResourceLoadInfo::create(&v9, a2);
      v8 = v9;
      objc_msgSend(v6, "webView:resourceLoad:didSendRequest:", v7, *(_QWORD *)(v9 + 8), WebCore::ResourceRequest::nsURLRequest());
      CFRelease(*(CFTypeRef *)(v8 + 8));
      if (v7)
        CFRelease(v7);
      CFRelease(v6);
    }
  }
}

void sub_19720C18C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void API::ResourceLoadInfo::create(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = API::Object::newObject(0x88uLL, 17);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34C3710;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(_BYTE *)(v4 + 64) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  WTF::URL::URL(v4 + 72, (uint64_t *)a2 + 7);
  v8 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  *(_QWORD *)(v4 + 112) = v8;
  v9 = *((_QWORD *)a2 + 13);
  *(_WORD *)(v4 + 128) = *((_WORD *)a2 + 56);
  *(_QWORD *)(v4 + 120) = v9;
  *a1 = v4;
}

void sub_19720C25C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didPerformHTTPRedirection(uint64_t a1, __int128 *a2, WebCore::ResourceResponse *a3)
{
  uint64_t v3;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v3 + 16) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v3 + 8));
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = objc_loadWeakRetained(*(id **)(a1 + 8));
      API::ResourceLoadInfo::create(&v13, a2);
      v10 = v13;
      v11 = *(_QWORD *)(v13 + 8);
      v12 = WebCore::ResourceResponse::nsURLResponse(a3);
      objc_msgSend(v8, "webView:resourceLoad:didPerformHTTPRedirection:newRequest:", v9, v11, v12, WebCore::ResourceRequest::nsURLRequest());
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v9)
        CFRelease(v9);
      CFRelease(v8);
    }
  }
}

void sub_19720C34C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didReceiveChallenge(uint64_t a1, __int128 *a2, WebCore *a3)
{
  uint64_t v3;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  const WebCore::AuthenticationChallenge *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v3 + 8));
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = objc_loadWeakRetained(*(id **)(a1 + 8));
      API::ResourceLoadInfo::create(&v12, a2);
      v10 = v12;
      objc_msgSend(v8, "webView:resourceLoad:didReceiveChallenge:", v9, *(_QWORD *)(v12 + 8), WebCore::mac(a3, v11));
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v9)
        CFRelease(v9);
      CFRelease(v8);
    }
  }
}

void sub_19720C448(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didReceiveResponse(uint64_t a1, __int128 *a2, WebCore::ResourceResponse *a3)
{
  uint64_t v3;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v3 + 16) & 8) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v3 + 8));
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = objc_loadWeakRetained(*(id **)(a1 + 8));
      API::ResourceLoadInfo::create(&v11, a2);
      v10 = v11;
      objc_msgSend(v8, "webView:resourceLoad:didReceiveResponse:", v9, *(_QWORD *)(v11 + 8), WebCore::ResourceResponse::nsURLResponse(a3));
      CFRelease(*(CFTypeRef *)(v10 + 8));
      if (v9)
        CFRelease(v9);
      CFRelease(v8);
    }
  }
}

void sub_19720C544(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ResourceLoadDelegate::ResourceLoadClient::didCompleteWithError(uint64_t a1, __int128 *a2, WebCore::ResourceResponse *a3, WebCore::ResourceError *a4)
{
  uint64_t v4;
  id WeakRetained;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v4 + 16) & 0x10) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
    if (WeakRetained)
    {
      v10 = WeakRetained;
      v11 = objc_loadWeakRetained(*(id **)(a1 + 8));
      API::ResourceLoadInfo::create(&v15, a2);
      v12 = v15;
      v13 = *(_QWORD *)(v15 + 8);
      v14 = WebCore::ResourceError::nsError(a4);
      objc_msgSend(v10, "webView:resourceLoad:didCompleteWithError:response:", v11, v13, v14, WebCore::ResourceResponse::nsURLResponse(a3));
      CFRelease(*(CFTypeRef *)(v12 + 8));
      if (v11)
        CFRelease(v11);
      CFRelease(v10);
    }
  }
}

void sub_19720C654(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::SafeBrowsingWarning::SafeBrowsingWarning(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  _DWORD *v8;
  __int128 v9;
  const __CFString *v10;
  CFTypeRef v11;
  const __CFString *v12;
  const __CFString *v13;
  CFTypeRef v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  CFTypeRef v18;
  const __CFString *v19;
  NSMutableAttributedString *v20;
  const __CFString *v21;
  CFTypeRef v22;
  const __CFString *v23;
  NSString *v24;
  NSString *v25;
  id v26;
  WebKit *v27;
  NSString *v28;
  NSURL *v29;
  const WTF::String *v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  const __CFString *v43;
  int v44;
  CFTypeRef v45;
  const __CFString *v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const __CFString *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  id v60;
  const __CFString *v61;
  CFTypeRef v62;
  void *v63;
  uint64_t v64;
  const __CFString *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v75;
  int v76;
  int v77;
  char v78;
  int v79;
  int v80;
  char v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  NSURL *v98;
  NSString *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  NSString *v104;
  NSURL *v105;
  CFTypeRef v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  NSURL *v113;
  NSString *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  id v119;
  const __CFString *v120;
  CFTypeRef v121;
  WebKit *v122;
  const __CFString *v123;
  NSString *v124;
  const __CFString *v125;
  NSString *v126;
  NSURL *v127;
  const void *v128;
  void *v130;
  NSString *v131;
  NSMutableAttributedString *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137[5];
  CFTypeRef arg[5];
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  uint64_t v142[2];

  *(_DWORD *)a1 = 1;
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v9;
  if (objc_msgSend(a4, "isPhishing"))
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Deceptive Website Warning"), v10);
    v11 = arg[0];
    if (arg[0])
      goto LABEL_10;
  }
  else if (objc_msgSend(a4, "isMalware"))
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Malware Website Warning"), v12);
    v11 = arg[0];
    if (arg[0])
      goto LABEL_10;
  }
  else
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Website With Harmful Software Warning"), v12);
    v11 = arg[0];
    if (arg[0])
LABEL_10:
      CFAutorelease(v11);
  }
  MEMORY[0x19AEABCC8]();
  if (objc_msgSend(a4, "isPhishing"))
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("This website may try to trick you into doing something dangerous, like installing software or disclosing personal or financial information, like passwords, phone numbers, or credit cards."), v13);
    v14 = arg[0];
    if (arg[0])
      goto LABEL_18;
  }
  else if (objc_msgSend(a4, "isMalware"))
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("This website may attempt to install dangerous software, which could harm your computer or steal your personal or financial information, like passwords, photos, or credit cards."), v15);
    v14 = arg[0];
    if (arg[0])
      goto LABEL_18;
  }
  else
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("This website may try to trick you into installing software that harms your browsing experience, like changing your settings without your permission or showing you unwanted ads. Once installed, it may be difficult to remove."), v15);
    v14 = arg[0];
    if (arg[0])
LABEL_18:
      CFAutorelease(v14);
  }
  MEMORY[0x19AEABCC8]();
  *(_BYTE *)(a1 + 64) = a3;
  if (objc_msgSend(a4, "isPhishing"))
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Warnings are shown for websites that have been reported as deceptive. Deceptive websites try to trick you into believing they are legitimate websites you trust."), v16);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v18 = arg[0];
    }
    else
    {
      v18 = 0;
    }
    WebCore::copyLocalizedString((WebCore *)CFSTR("Learn more…"), v17);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v20 = (NSMutableAttributedString *)arg[0];
    }
    else
    {
      v20 = 0;
    }
    WebCore::copyLocalizedString((WebCore *)CFSTR("If you believe this website is safe, you can %report-an-error%. Or, if you understand the risks involved, you can %bypass-link%."), v19);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v22 = arg[0];
    }
    else
    {
      v22 = 0;
    }
    WebCore::copyLocalizedString((WebCore *)CFSTR("report an error"), v21);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v24 = (NSString *)arg[0];
    }
    else
    {
      v24 = 0;
    }
    WebCore::copyLocalizedString((WebCore *)CFSTR("visit this unsafe website"), v23);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v25 = (NSString *)arg[0];
    }
    else
    {
      v25 = 0;
    }
    v26 = objc_alloc(MEMORY[0x1E0CB3778]);
    v27 = (WebKit *)objc_msgSend(v26, "initWithString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@\n\n%@"), v18, v20, v22));
    v28 = (NSString *)objc_msgSend(a4, "learnMoreURL");
    WebKit::addLinkAndReplace(v27, v20, (NSString *)&v20->super.super.isa, v28, v29);
    WTF::URL::URL((WTF::URL *)v137);
    MEMORY[0x19AEABCC8](&v135, objc_msgSend(a4, "reportAnErrorBaseURLString"));
    WTF::encodeWithURLEscapeSequences((WTF *)a2, v30);
    WTF::defaultLanguage();
    v31 = v135;
    if (v135)
    {
      v32 = *((_DWORD *)v135 + 1);
      if (v134)
        goto LABEL_32;
    }
    else
    {
      v32 = 0;
      if (v134)
      {
LABEL_32:
        v33 = *((_DWORD *)v134 + 1);
        if (v133)
          goto LABEL_33;
        goto LABEL_212;
      }
    }
    v33 = 0;
    if (v133)
    {
LABEL_33:
      v34 = *((_DWORD *)v133 + 1);
      if (v34 < 0)
        goto LABEL_222;
LABEL_34:
      v35 = __OFADD__(v34, 4);
      v36 = v34 + 4;
      v37 = v35;
      if (v33 < 0)
        goto LABEL_222;
      if ((v37 & 1) != 0)
        goto LABEL_222;
      v35 = __OFADD__(v33, v36);
      v38 = v33 + v36;
      if (v35)
        goto LABEL_222;
      v35 = __OFADD__(v38, 5);
      v39 = v38 + 5;
      v40 = v35;
      if (v32 < 0)
        goto LABEL_222;
      if (v40)
        goto LABEL_222;
      v41 = v32 + v39;
      if (__OFADD__(v32, v39))
        goto LABEL_222;
      if (v135 && (*((_BYTE *)v135 + 16) & 4) == 0)
      {
        if (v41)
        {
          v42 = v41;
LABEL_117:
          if (v41 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v42 + 20));
            v49 = (uint64_t)v140;
            if (v140)
            {
              *(_DWORD *)v140 = 2;
              *(_DWORD *)(v49 + 4) = v41;
              *(_QWORD *)(v49 + 8) = v49 + 20;
              *(_DWORD *)(v49 + 16) = 0;
              v139 = v31;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v139, (char *)(v49 + 20));
              v92 = (uint64_t)v139;
              if (v139)
                v92 = *((unsigned int *)v139 + 1);
              v93 = v49 + 20 + 2 * v92;
              *(_QWORD *)v93 = 0x6C007200750026;
              *(_WORD *)(v93 + 8) = 61;
              v94 = v93 + 10;
              v142[0] = (uint64_t)v134;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v142, (char *)(v93 + 10));
              v95 = v142[0];
              if (v142[0])
                v95 = *(unsigned int *)(v142[0] + 4);
              v96 = v94 + 2 * v95;
              *(_QWORD *)v96 = 0x3D006C00680026;
              v140 = v133;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v140, (char *)(v96 + 8));
              goto LABEL_124;
            }
          }
          goto LABEL_222;
        }
LABEL_116:
        v49 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
LABEL_124:
        v136 = (WTF::StringImpl *)v49;
        MEMORY[0x19AEABB24](arg, v137, &v136, 0);
        v99 = (NSString *)WTF::URL::operator NSURL *();
        v100 = (WTF::StringImpl *)arg[0];
        arg[0] = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
            WTF::StringImpl::destroy(v100, v97);
          else
            *(_DWORD *)v100 -= 2;
        }
        v101 = v136;
        v136 = 0;
        if (v101)
        {
          if (*(_DWORD *)v101 == 2)
            WTF::StringImpl::destroy(v101, v97);
          else
            *(_DWORD *)v101 -= 2;
        }
        if (v133)
        {
          if (*(_DWORD *)v133 == 2)
            WTF::StringImpl::destroy(v133, v97);
          else
            *(_DWORD *)v133 -= 2;
        }
        if (v134)
        {
          if (*(_DWORD *)v134 == 2)
            WTF::StringImpl::destroy(v134, v97);
          else
            *(_DWORD *)v134 -= 2;
        }
        v102 = v135;
        v135 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
            WTF::StringImpl::destroy(v102, v97);
          else
            *(_DWORD *)v102 -= 2;
        }
        v103 = v137[0];
        v137[0] = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
            WTF::StringImpl::destroy(v103, v97);
          else
            *(_DWORD *)v103 -= 2;
        }
        WebKit::addLinkAndReplace(v27, (NSMutableAttributedString *)CFSTR("%report-an-error%"), v24, v99, v98);
        v104 = (NSString *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("WKVisitUnsafeWebsiteSentinel"));
        WebKit::addLinkAndReplace(v27, (NSMutableAttributedString *)CFSTR("%bypass-link%"), v25, v104, v105);
        v106 = (id)CFMakeCollectable(v27);
        goto LABEL_205;
      }
      if (v134)
      {
        v47 = *((_DWORD *)v134 + 4);
        if (!v133 || (v47 & 4) == 0)
        {
          v42 = v41;
          v48 = v41 == 0;
          if ((v47 & 4) != 0)
            goto LABEL_58;
          goto LABEL_115;
        }
      }
      else if (!v133)
      {
        if (!v41)
          goto LABEL_116;
        v42 = v41;
        if ((v41 & 0x80000000) != 0)
          goto LABEL_222;
        goto LABEL_60;
      }
      v42 = v41;
      v48 = v41 == 0;
      if ((*((_BYTE *)v133 + 16) & 4) != 0)
      {
LABEL_58:
        if (v48)
          goto LABEL_116;
        if ((v41 & 0x80000000) != 0)
          goto LABEL_222;
LABEL_60:
        WTF::tryFastCompactMalloc((WTF *)(v42 + 20));
        v49 = (uint64_t)v140;
        if (v140)
        {
          *(_DWORD *)v140 = 2;
          *(_DWORD *)(v49 + 4) = v41;
          *(_QWORD *)(v49 + 8) = v49 + 20;
          *(_DWORD *)(v49 + 16) = 4;
          v139 = v31;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v139, (char *)(v49 + 20));
          v50 = (uint64_t)v139;
          if (v139)
            v50 = *((unsigned int *)v139 + 1);
          v51 = v49 + 20 + v50;
          *(_BYTE *)(v51 + 4) = 61;
          *(_DWORD *)v51 = 1819440422;
          v52 = v51 + 5;
          v142[0] = (uint64_t)v134;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v142, (char *)(v51 + 5));
          v53 = v142[0];
          if (v142[0])
            v53 = *(unsigned int *)(v142[0] + 4);
          *(_DWORD *)(v52 + v53) = 1030514726;
          v140 = v133;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v140, (char *)(v52 + v53 + 4));
          goto LABEL_124;
        }
        goto LABEL_222;
      }
LABEL_115:
      if (!v48)
        goto LABEL_117;
      goto LABEL_116;
    }
LABEL_212:
    v34 = 0;
    goto LABEL_34;
  }
  v44 = objc_msgSend(a4, "isMalware");
  if (v44)
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Warnings are shown for websites where malicious software has been detected. You can check the %status-link% on the %safeBrowsingProvider% diagnostic page."), v43);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v45 = arg[0];
    }
    else
    {
      v45 = 0;
    }
    v46 = CFSTR("%status-link%");
  }
  else
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Warnings are shown for websites where harmful software has been detected. You can check %the-status-of-site% on the %safeBrowsingProvider% diagnostic page."), v43);
    if (arg[0])
    {
      CFAutorelease(arg[0]);
      v45 = arg[0];
    }
    else
    {
      v45 = 0;
    }
    v46 = CFSTR("%the-status-of-site%");
  }
  v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v45);
  MEMORY[0x19AEABCC8](arg, objc_msgSend(a4, "localizedProviderDisplayName"));
  if (arg[0])
    v55 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v55 = &stru_1E351F1B8;
  v56 = objc_msgSend((id)objc_msgSend(v54, "string"), "rangeOfString:", CFSTR("%safeBrowsingProvider%"));
  objc_msgSend(v54, "replaceCharactersInRange:withString:", v56, v57, v55);
  v59 = (WTF::StringImpl *)arg[0];
  arg[0] = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v58);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = objc_alloc(MEMORY[0x1E0CB3778]);
  WebCore::copyLocalizedString((WebCore *)CFSTR("the status of “%site%”"), v61);
  if (arg[0])
  {
    CFAutorelease(arg[0]);
    v62 = arg[0];
  }
  else
  {
    v62 = 0;
  }
  v63 = (void *)objc_msgSend(v60, "initWithString:", v62);
  WTF::URL::host((WTF::URL *)a2);
  if ((v64 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  if (arg[0])
    v65 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v65 = &stru_1E351F1B8;
  v66 = objc_msgSend((id)objc_msgSend(v63, "string"), "rangeOfString:", CFSTR("%site%"));
  objc_msgSend(v63, "replaceCharactersInRange:withString:", v66, v67, v65);
  v69 = (WTF::StringImpl *)arg[0];
  arg[0] = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v68);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = objc_msgSend(v63, "string");
  WTF::URL::URL((WTF::URL *)v137);
  MEMORY[0x19AEABCC8](&v135, objc_msgSend(a4, "malwareDetailsBaseURLString"));
  v132 = (NSMutableAttributedString *)v46;
  v71 = (WTF::StringImpl *)WTF::URL::host((WTF::URL *)a2);
  v73 = v72;
  WTF::defaultLanguage();
  v74 = v135;
  if (v135)
    v75 = *((_DWORD *)v135 + 1);
  else
    v75 = 0;
  v131 = (NSString *)v70;
  if (v134)
  {
    v76 = *((_DWORD *)v134 + 1);
    if (v76 < 0)
      goto LABEL_222;
  }
  else
  {
    v76 = 0;
  }
  v35 = __OFADD__(v76, 4);
  v77 = v76 + 4;
  v78 = v35;
  if ((v73 & 0x80000000) != 0
    || (v78 & 1) != 0
    || (v35 = __OFADD__((_DWORD)v73, v77), v79 = v73 + v77, v35)
    || ((v35 = __OFADD__(v79, 6), v80 = v79 + 6, !v35) ? (v81 = 0) : (v81 = 1),
        v75 < 0 || (v81 & 1) != 0 || (v82 = v75 + v80, __OFADD__(v75, v80))))
  {
LABEL_222:
    __break(0xC471u);
    JUMPOUT(0x19720D370);
  }
  if (v135)
  {
    v83 = (v73 & 0xFF00000000) == 0 || (*((_BYTE *)v135 + 16) & 4) == 0;
    if (v134 && !v83)
    {
LABEL_107:
      v84 = v82;
      v85 = v82 == 0;
      if ((*((_BYTE *)v134 + 16) & 4) != 0)
        goto LABEL_108;
      goto LABEL_162;
    }
  }
  else
  {
    v83 = (v73 & 0xFF00000000) == 0;
    if ((v73 & 0xFF00000000) != 0 && v134)
      goto LABEL_107;
  }
  v84 = v82;
  v85 = v82 == 0;
  if (!v83)
  {
LABEL_108:
    if (!v85)
    {
      if ((v82 & 0x80000000) != 0)
        goto LABEL_222;
      WTF::tryFastCompactMalloc((WTF *)(v84 + 20));
      v86 = (uint64_t)v140;
      if (!v140)
        goto LABEL_222;
      v130 = v63;
      v87 = v44;
      *(_DWORD *)v140 = 2;
      *(_DWORD *)(v86 + 4) = v82;
      *(_QWORD *)(v86 + 8) = v86 + 20;
      *(_DWORD *)(v86 + 16) = 4;
      v139 = v74;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v139, (char *)(v86 + 20));
      v88 = (uint64_t)v139;
      if (v139)
        v88 = *((unsigned int *)v139 + 1);
      v89 = v86 + 20 + v88;
      *(_WORD *)(v89 + 4) = 15717;
      *(_DWORD *)v89 = 1953067814;
      v90 = v89 + 6;
      v140 = v71;
      v141 = v73;
      WTF::StringView::getCharacters<unsigned char>(&v140, (char *)(v89 + 6));
      v91 = v90 + v141;
      *(_DWORD *)v91 = 1030514726;
      v142[0] = (uint64_t)v134;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v142, (char *)(v91 + 4));
LABEL_171:
      v44 = v87;
      v63 = v130;
      goto LABEL_172;
    }
    goto LABEL_163;
  }
LABEL_162:
  if (!v85)
  {
    if (v82 > 0x7FFFFFEF)
      goto LABEL_222;
    WTF::tryFastCompactMalloc((WTF *)(2 * v84 + 20));
    v86 = (uint64_t)v140;
    if (!v140)
      goto LABEL_222;
    v130 = v63;
    v87 = v44;
    *(_DWORD *)v140 = 2;
    *(_DWORD *)(v86 + 4) = v82;
    *(_QWORD *)(v86 + 8) = v86 + 20;
    *(_DWORD *)(v86 + 16) = 0;
    v139 = v74;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v139, (char *)(v86 + 20));
    v107 = (uint64_t)v139;
    if (v139)
      v107 = *((unsigned int *)v139 + 1);
    v108 = 0;
    v109 = v86 + 20 + 2 * v107;
    do
    {
      *(_WORD *)(v109 + 2 * v108) = aSite_0[v108];
      ++v108;
    }
    while (v108 != 6);
    v110 = v109 + 12;
    v140 = v71;
    v141 = v73;
    WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v140, (char *)(v109 + 12));
    v111 = v110 + 2 * v141;
    *(_QWORD *)v111 = 0x3D006C00680026;
    v142[0] = (uint64_t)v134;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v142, (char *)(v111 + 8));
    goto LABEL_171;
  }
LABEL_163:
  v86 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_172:
  v136 = (WTF::StringImpl *)v86;
  MEMORY[0x19AEABB24](arg, v137, &v136, 0);
  v114 = (NSString *)WTF::URL::operator NSURL *();
  v115 = (WTF::StringImpl *)arg[0];
  arg[0] = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, v112);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = v136;
  v136 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, v112);
    else
      *(_DWORD *)v116 -= 2;
  }
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, v112);
    else
      *(_DWORD *)v134 -= 2;
  }
  v117 = v135;
  v135 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v112);
    else
      *(_DWORD *)v117 -= 2;
  }
  v118 = v137[0];
  v137[0] = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
      WTF::StringImpl::destroy(v118, v112);
    else
      *(_DWORD *)v118 -= 2;
  }
  WebKit::addLinkAndReplace((WebKit *)v54, v132, v131, v114, v113);
  v119 = objc_alloc(MEMORY[0x1E0CB3778]);
  WebCore::copyLocalizedString((WebCore *)CFSTR("If you understand the risks involved, you can %visit-this-unsafe-site-link%."), v120);
  if (arg[0])
  {
    CFAutorelease(arg[0]);
    v121 = arg[0];
  }
  else
  {
    v121 = 0;
  }
  v122 = (WebKit *)objc_msgSend(v119, "initWithString:", v121);
  WebCore::copyLocalizedString((WebCore *)CFSTR("visit this unsafe website"), v123);
  if (arg[0])
  {
    CFAutorelease(arg[0]);
    v124 = (NSString *)arg[0];
  }
  else
  {
    v124 = 0;
  }
  if (v44)
    v125 = CFSTR("WKConfirmMalwareSentinel");
  else
    v125 = CFSTR("WKVisitUnsafeWebsiteSentinel");
  v126 = (NSString *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v125);
  WebKit::addLinkAndReplace(v122, (NSMutableAttributedString *)CFSTR("%visit-this-unsafe-site-link%"), v124, v126, v127);
  v128 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", CFSTR("\n\n"));
  objc_msgSend(v54, "appendAttributedString:", v128);
  if (v128)
    CFRelease(v128);
  objc_msgSend(v54, "appendAttributedString:", v122);
  v106 = (id)CFMakeCollectable(v54);
  if (v122)
    CFRelease(v122);
  if (v63)
    CFRelease(v63);
LABEL_205:
  *(_QWORD *)(a1 + 72) = v106;
  if (v106)
    CFRetain(v106);
  return a1;
}

void sub_19720D3A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, WTF::StringImpl **a16, WTF::StringImpl **a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf)
{
  uint64_t v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  if (cf)
    CFRelease(cf);
  v29 = *a16;
  *a16 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *a17;
  *a17 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *(WTF::StringImpl **)(v27 + 8);
  *(_QWORD *)(v27 + 8) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SafeBrowsingWarning::SafeBrowsingWarning(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a1 = 1;
  WTF::URL::URL(a1 + 8, a2);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = 0;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 72) = v11;
  return a1;
}

uint64_t WebKit::SafeBrowsingWarning::visitUnsafeWebsiteSentinel(WebKit::SafeBrowsingWarning *this)
{
  return objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("WKVisitUnsafeWebsiteSentinel"));
}

uint64_t WebKit::SafeBrowsingWarning::confirmMalwareSentinel(WebKit::SafeBrowsingWarning *this)
{
  return objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("WKConfirmMalwareSentinel"));
}

void WebKit::encodeSessionState(WebKit *this@<X0>, _QWORD *a2@<X8>)
{
  WebKit *v4;
  const void *v5;
  WebKit *v6;
  WebKit *v7;

  WebKit::encodeLegacySessionState(this, &v7);
  v4 = v7;
  if (v7)
  {
    v7 = 0;
    v5 = (const void *)*((_QWORD *)v4 + 1);
    *a2 = v5;
    if (v5)
    {
      CFRetain(v5);
      v5 = (const void *)*((_QWORD *)v4 + 1);
    }
    CFRelease(v5);
    v6 = v7;
    v7 = 0;
    if (v6)
      CFRelease(*((CFTypeRef *)v6 + 1));
  }
  else
  {
    *a2 = 0;
  }
}

void sub_19720D8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::decodeSessionState(WebKit *this, NSData *a2, SessionState *a3)
{
  uint64_t v5;
  unint64_t v6;

  if (this)
  {
    v5 = -[WebKit bytes](this, "bytes", a3);
    v6 = -[WebKit length](this, "length");
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return WebKit::decodeLegacySessionState(v5, v6, (uint64_t)a2);
}

void sub_19720DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, id location, id a17)
{
  const void *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  if (v17)
    CFRelease(v17);
  _Unwind_Resume(a1);
}

void sub_19720DDE8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ71___WKPreviewControllerDataSource_previewController_previewItemAtIndex__E4__12(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ71___WKPreviewControllerDataSource_previewController_previewItemAtIndex__E4__12(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

WTF::StringImpl *WebKit::SystemPreviewController::triggerSystemPreviewAction(WebKit::SystemPreviewController *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  __int128 buf;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71938;
  if (os_log_type_enabled((os_log_t)qword_1ECE71938, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 12);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "SystemPreview action was triggered on %lld", (uint8_t *)&buf, 0xCu);
  }
  v4 = *((_QWORD *)this + 2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)&buf = (char *)this + 32;
  *((_QWORD *)&buf + 1) = &v7;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SystemPreviewActionTriggered>(*(_QWORD *)(v4 + 208), (uint64_t)&buf, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19720E5FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19720E6E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19720EAE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::ProcessThrottlerActivity *WebKit::SystemPreviewController::loadFailed(WebKit::SystemPreviewController *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  WebKit::ProcessThrottlerActivity *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71938;
  if (os_log_type_enabled((os_log_t)qword_1ECE71938, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 12);
    v12 = 134217984;
    v13 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "SystemPreview load has failed on %lld", (uint8_t *)&v12, 0xCu);
  }
  v4 = (void *)*((_QWORD *)this + 31);
  if (v4)
    objc_msgSend(v4, "failWithError:", 0);
  v5 = (void *)*((_QWORD *)this + 29);
  if (v5)
    objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, 0);
  v6 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v9)
    CFRelease(v9);
  result = WebKit::SystemPreviewController::releaseActivityTokenIfNecessary(this);
  v11 = *((_QWORD *)this + 34);
  if (v11)
  {
    *((_QWORD *)this + 34) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    result = (WebKit::ProcessThrottlerActivity *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  *((_BYTE *)this + 8) = 0;
  return result;
}

void sub_19720EC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19720EF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::SystemPreviewController::begin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  NSObject *v7;
  const void *v8;
  const void *v9;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const void *v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  const void *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  WTF::StringImpl *v29;
  WTF *v30;
  CFTypeRef v31;
  char *v32;
  WebKit *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  __int128 v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WebKit *v41;
  WTF::StringImpl *v42;
  CFTypeRef v43;
  WTF::StringImpl *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  CFTypeRef v48;
  WebKit *v49;
  void *v50;
  const __CFString *v51;
  WebKit *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  __CFString *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  void *v61;
  WebKit *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  void *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF::RunLoop *v70;
  void (**v71)(_QWORD, _QWORD);
  void *v72;
  void *v73;
  CFTypeRef v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  WebKit *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  CFTypeRef v86;
  CFTypeRef v87;
  WTF::StringImpl *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  const void *v92;
  __int128 v93;
  uint64_t v94;
  WTF *v95;
  void *v96;
  WTF::RunLoop::TimerBase *v97;
  _QWORD v98[4];
  WTF *v99;
  _QWORD v100[4];
  WTF *v101;
  char v102;
  CFTypeRef v103;
  _BYTE v104[24];
  int v105;
  WTF *v106;
  WTF::StringImpl *v107;
  __int128 v108;
  __int128 v109;
  CFTypeRef cf;
  const void *v111;
  _BYTE v112[24];
  int v113;
  WTF *v114;
  WTF::StringImpl *v115;
  __int128 v116;
  __int128 v117;
  CFTypeRef v118;
  uint8_t buf[8];
  _BYTE v120[24];
  int v121;
  unsigned int *v122;
  WTF::StringImpl *v123;
  __int128 v124;
  __int128 v125;
  CFTypeRef v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8) || *(_QWORD *)(a1 + 280))
  {
    v7 = qword_1ECE71938;
    if (os_log_type_enabled((os_log_t)qword_1ECE71938, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "SystemPreview didn't start because an existing preview is in progress", buf, 2u);
    }
    *(double *)(a1 + 288) = fmin(*(double *)(a1 + 288) * *(double *)(a1 + 288) + 1.0, 30.0);
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(const void *))(*(_QWORD *)v8 + 16))(v8);
    (*(void (**)(const void *))(*(_QWORD *)v8 + 8))(v8);
    return;
  }
  if (*(_QWORD *)(a1 + 232))
  {
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(const void *))(*(_QWORD *)v9 + 16))(v9);
LABEL_8:
    (*(void (**)(const void *))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  v13 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 104) + 488))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104));
  if (!v13)
  {
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(const void *))(*(_QWORD *)v9 + 16))(v9);
    goto LABEL_8;
  }
  v14 = v13;
  CFRetain(v13);
  v16 = *(_OWORD *)(a4 + 16);
  v15 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v15;
  v18 = *(_OWORD *)(a4 + 64);
  v17 = *(_OWORD *)(a4 + 80);
  v19 = *(_OWORD *)(a4 + 48);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a4 + 96);
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 80) = v19;
  v20 = *a5;
  *a5 = 0;
  v111 = v20;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v112, a3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
  v21 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v114 = (WTF *)v21;
  v23 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v23 += 2;
  v116 = *(_OWORD *)(a2 + 8);
  v117 = *(_OWORD *)(a2 + 24);
  v115 = v23;
  v118 = v14;
  CFRetain(v14);
  v24 = v111;
  v111 = 0;
  v103 = v24;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v104, (uint64_t)v112);
  v26 = v114;
  v25 = v115;
  v114 = 0;
  v106 = v26;
  if (v115)
    *(_DWORD *)v115 += 2;
  v108 = v116;
  v109 = v117;
  v27 = v118;
  v118 = 0;
  cf = v27;
  v28 = v103;
  v107 = v25;
  v103 = 0;
  *(_QWORD *)buf = v28;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v120, (uint64_t)v104);
  v30 = v106;
  v29 = v107;
  v106 = 0;
  v122 = (unsigned int *)v30;
  if (v107)
    *(_DWORD *)v107 += 2;
  v123 = v29;
  v124 = v108;
  v125 = v109;
  v31 = cf;
  cf = 0;
  v126 = v31;
  v32 = (char *)malloc_type_malloc(0x80uLL, 0x10E2040DB5DF1ECuLL);
  *(_QWORD *)v32 = MEMORY[0x1E0C809A0];
  *((_QWORD *)v32 + 1) = 50331650;
  *((_QWORD *)v32 + 2) = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  *((_QWORD *)v32 + 3) = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v33 = *(WebKit **)buf;
  *(_QWORD *)buf = 0;
  *((_QWORD *)v32 + 4) = v33;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v32 + 40), (uint64_t)v120);
  v36 = v122;
  v35 = v123;
  v122 = 0;
  *((_QWORD *)v32 + 9) = v36;
  if (v35)
  {
    *(_DWORD *)v35 += 2;
    *((_QWORD *)v32 + 10) = v35;
    v37 = v124;
    *(_OWORD *)(v32 + 104) = v125;
    *(_OWORD *)(v32 + 88) = v37;
    *((_QWORD *)v32 + 15) = v126;
    v126 = 0;
    v123 = 0;
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  else
  {
    *((_QWORD *)v32 + 10) = 0;
    v93 = v125;
    *(_OWORD *)(v32 + 88) = v124;
    *(_OWORD *)(v32 + 104) = v93;
    *((_QWORD *)v32 + 15) = v126;
    v126 = 0;
    v123 = 0;
  }
  v38 = v122;
  v122 = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      WTF::fastFree((WTF *)v38, v34);
    }
  }
  if (v121 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C9598[v121])(&v102, v120);
  v121 = -1;
  v41 = *(WebKit **)buf;
  *(_QWORD *)buf = 0;
  if (v41)
    (*(void (**)(WebKit *))(*(_QWORD *)v41 + 8))(v41);
  _Block_release(*(const void **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = v32;
  _Block_release(0);
  v43 = cf;
  cf = 0;
  if (v43)
    CFRelease(v43);
  v44 = v107;
  v107 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (unsigned int *)v106;
  v106 = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v42);
    }
  }
  if (v105 != -1)
    ((void (*)(uint8_t *, _BYTE *))off_1E34C9598[v105])(buf, v104);
  v105 = -1;
  v48 = v103;
  v103 = 0;
  if (v48)
    (*(void (**)(CFTypeRef))(*(_QWORD *)v48 + 8))(v48);
  WebCore::copyLocalizedString((WebCore *)CFSTR("Open this 3D model?"), (const __CFString *)v42);
  v49 = *(WebKit **)buf;
  if (*(_QWORD *)buf)
  {
    CFAutorelease(*(CFTypeRef *)buf);
    v49 = *(WebKit **)buf;
  }
  WebKit::createUIAlertController(v49, 0, &v103);
  v50 = (void *)MEMORY[0x1E0CEA2E0];
  WebCore::copyLocalizedString((WebCore *)CFSTR("Allow (usdz QuickLook Preview)"), v51);
  if (*(_QWORD *)buf)
  {
    CFAutorelease(*(CFTypeRef *)buf);
    v52 = *(WebKit **)buf;
  }
  else
  {
    v52 = 0;
  }
  v53 = MEMORY[0x1E0C809B0];
  v100[0] = MEMORY[0x1E0C809B0];
  v100[1] = 3321888768;
  v100[2] = ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke;
  v100[3] = &__block_descriptor_40_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__2_e23_v16__0__UIAlertAction_8l;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
  v54 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
    do
      v56 = __ldaxr(v54);
    while (__stlxr(v56 + 1, v54));
  }
  v101 = (WTF *)v54;
  v58 = objc_msgSend(v50, "actionWithTitle:style:handler:", v52, 0, v100);
  if (v54)
  {
    do
    {
      v59 = __ldaxr(v54);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v54));
    if (!v60)
    {
      atomic_store(1u, v54);
      WTF::fastFree((WTF *)v54, v57);
    }
  }
  v61 = (void *)MEMORY[0x1E0CEA2E0];
  WebCore::copyLocalizedString((WebCore *)CFSTR("Cancel (usdz QuickLook Preview)"), v57);
  if (*(_QWORD *)buf)
  {
    CFAutorelease(*(CFTypeRef *)buf);
    v62 = *(WebKit **)buf;
  }
  else
  {
    v62 = 0;
  }
  v98[0] = v53;
  v98[1] = 3321888768;
  v98[2] = ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke_252;
  v98[3] = &__block_descriptor_40_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__3_e23_v16__0__UIAlertAction_8l;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
  v63 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
    do
      v65 = __ldaxr(v63);
    while (__stlxr(v65 + 1, v63));
  }
  v99 = (WTF *)v63;
  v67 = objc_msgSend(v61, "actionWithTitle:style:handler:", v62, 1, v98);
  if (v63)
  {
    do
    {
      v68 = __ldaxr(v63);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v63));
    if (!v69)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, v66);
    }
  }
  objc_msgSend((id)v103, "addAction:", v67);
  v70 = (WTF::RunLoop *)objc_msgSend((id)v103, "addAction:", v58);
  if (*(_QWORD *)(a1 + 272))
  {
    v71 = *(void (***)(_QWORD, _QWORD))(a1 + 280);
    *(_QWORD *)(a1 + 280) = 0;
    v72 = _Block_copy(0);
    _Block_release(*(const void **)(a1 + 280));
    *(_QWORD *)(a1 + 280) = v72;
    _Block_release(0);
    v71[2](v71, 1);
    _Block_release(v71);
  }
  else if (*(double *)(a1 + 288) == 0.0)
  {
    objc_msgSend(v14, "presentViewController:animated:completion:", v103, 1, 0);
  }
  else
  {
    WTF::RunLoop::main(v70);
    v74 = v103;
    if (v103)
      CFRetain(v103);
    CFRetain(v14);
    v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v75 = &off_1E34C9B58;
    v75[1] = v74;
    v75[2] = v14;
    *(_QWORD *)buf = v75;
    WTF::RunLoop::dispatchAfter();
    if (v97)
    {
      v76 = (unsigned int *)((char *)v97 + 24);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, (unsigned int *)v97 + 6);
        v94 = *((_QWORD *)v97 + 4);
        *((_QWORD *)v97 + 4) = 0;
        if (v94)
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
        WTF::RunLoop::TimerBase::~TimerBase(v97);
        WTF::fastFree(v95, v96);
      }
    }
    v79 = *(WebKit **)buf;
    *(_QWORD *)buf = 0;
    if (v79)
      (*(void (**)(WebKit *))(*(_QWORD *)v79 + 8))(v79);
    *(_QWORD *)(a1 + 288) = 0;
  }
  v80 = (unsigned int *)v99;
  v99 = 0;
  if (v80)
  {
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((WTF *)v80, v73);
    }
  }
  v83 = (unsigned int *)v101;
  v101 = 0;
  if (v83)
  {
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      WTF::fastFree((WTF *)v83, v73);
    }
  }
  v86 = v103;
  v103 = 0;
  if (v86)
    CFRelease(v86);
  v87 = v118;
  v118 = 0;
  if (v87)
    CFRelease(v87);
  v88 = v115;
  v115 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v73);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = (unsigned int *)v114;
  v114 = 0;
  if (v89)
  {
    do
    {
      v90 = __ldaxr(v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v89));
    if (!v91)
    {
      atomic_store(1u, v89);
      WTF::fastFree((WTF *)v89, v73);
    }
  }
  if (v113 != -1)
    ((void (*)(uint8_t *, _BYTE *))off_1E34C9598[v113])(buf, v112);
  v113 = -1;
  v92 = v111;
  v111 = 0;
  if (v92)
    (*(void (**)(const void *))(*(_QWORD *)v92 + 8))(v92);
  CFRelease(v14);
}

void sub_19720F9C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,__int16 a21,char a22,char a23,CFTypeRef cf,uint64_t a25,uint64_t a26,uint64_t a27,int a28,WTF *a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,WTF *a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef a47)
{
  const void *v47;
  uint64_t v48;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  CFTypeRef v54;
  CFTypeRef v55;
  WTF::StringImpl *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;

  if (a14)
  {
    do
    {
      v50 = __ldaxr((unsigned int *)a14);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, (unsigned int *)a14));
    if (!v51)
    {
      atomic_store(1u, (unsigned int *)a14);
      WTF::fastFree(a14, a2);
    }
  }
  if (a19)
  {
    do
    {
      v52 = __ldaxr((unsigned int *)a19);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)a19));
    if (!v53)
    {
      atomic_store(1u, (unsigned int *)a19);
      WTF::fastFree(a19, a2);
    }
  }
  v54 = cf;
  cf = 0;
  if (v54)
    CFRelease(v54);
  v55 = a47;
  a47 = 0;
  if (v55)
    CFRelease(v55);
  v56 = a42;
  a42 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (unsigned int *)a41;
  a41 = 0;
  if (v57)
  {
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
    {
      atomic_store(1u, v57);
      WTF::fastFree((WTF *)v57, a2);
    }
  }
  if (a40 != -1)
    ((void (*)(CFTypeRef *, uint64_t))off_1E34C9598[a40])(&cf, v48);
  a40 = -1;
  v60 = a36;
  a36 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  CFRelease(v47);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (**v3)(_QWORD, _QWORD);
  void *v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(void (***)(_QWORD, _QWORD))(v2 + 280);
      *(_QWORD *)(v2 + 280) = 0;
      v4 = _Block_copy(0);
      _Block_release(*(const void **)(v2 + 280));
      *(_QWORD *)(v2 + 280) = v4;
      _Block_release(0);
      v3[2](v3, 1);
      _Block_release(v3);
    }
  }
}

void sub_19720FF3C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__2(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__2(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEE_block_invoke_252(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (**v3)(_QWORD, _QWORD);
  void *v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(void (***)(_QWORD, _QWORD))(v2 + 280);
      *(_QWORD *)(v2 + 280) = 0;
      v4 = _Block_copy(0);
      _Block_release(*(const void **)(v2 + 280));
      *(_QWORD *)(v2 + 280) = v4;
      _Block_release(0);
      v3[2](v3, 0);
      _Block_release(v3);
    }
  }
}

void sub_197210038(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__3(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c152_ZTSKZN6WebKit23SystemPreviewController5beginERKN3WTF3URLERKN7WebCore18SecurityOriginDataERKNS5_17SystemPreviewInfoEONS1_17CompletionHandlerIFvvEEEE3__3(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WebKit::ProcessThrottlerActivity *WebKit::SystemPreviewController::releaseActivityTokenIfNecessary(WebKit::ProcessThrottlerActivity *this)
{
  WebKit::ProcessThrottlerActivity *v1;
  WebKit::ProcessThrottlerActivity **v2;
  NSObject *v3;
  int v4;
  WebKit::ProcessThrottlerActivity *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 33))
  {
    v1 = this;
    v2 = (WebKit::ProcessThrottlerActivity **)((char *)this + 264);
    v3 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 134217984;
      v5 = v1;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p UIProcess is releasing a background assertion because a system preview download completed", (uint8_t *)&v4, 0xCu);
    }
    return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
  }
  return this;
}

WTF::StringImpl *WebKit::SystemPreviewController::triggerSystemPreviewActionWithTargetForTesting(WebKit::SystemPreviewController *this, uint64_t a2, NSString *a3, uint64_t a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11[3];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19AEABCC8](v11, a3);
  WTF::UUID::parseVersion4();
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (v12)
  {
    *((_BYTE *)this + 128) = 1;
    *((_QWORD *)this + 12) = a2;
    v9 = v11[2];
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 176);
    *((WTF::StringImpl **)this + 8) = v11[1];
    *((_QWORD *)this + 9) = v9;
    *((_QWORD *)this + 10) = v10;
    *((_QWORD *)this + 6) = a4;
    return WebKit::SystemPreviewController::triggerSystemPreviewAction(this);
  }
  return result;
}

void sub_19721026C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::~UIClient(WebKit::UIDelegate::UIClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34C9218;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::UIDelegate::UIClient::~UIClient(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::UIDelegate::UIClient::mouseDidMoveOverElement(uint64_t a1, WebKit::WebPageProxy *a2, const WebKit::WebHitTestResultData *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v13;
  CFTypeRef *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 24) & 0x2000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          v13 = WeakRetained;
          v14 = (CFTypeRef *)API::Object::newObject(0x2B0uLL, 67);
          API::HitTestResult::HitTestResult((API::HitTestResult *)v14, a3, a2);
          v15 = *(_QWORD *)(a1 + 16);
          if (v15)
            v15 = *(_QWORD *)(v15 + 8);
          v16 = objc_loadWeakRetained((id *)(v15 + 8));
          if (a5)
            v17 = *(_QWORD *)(a5 + 8);
          else
            v17 = 0;
          objc_msgSend(v13, "_webView:mouseDidMoveOverElement:withFlags:userInfo:", v16, v14[1], (a4 << 12) & 0x10000 | ((unint64_t)(a4 & 0xF) << 17), v17);
          if (v16)
            CFRelease(v16);
          CFRelease(v14[1]);
          CFRelease(v13);
        }
      }
    }
  }
}

void sub_19721042C(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, API::WindowFeatures *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  id v34;
  id *v35;
  id *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  CFTypeRef *v45;
  uint64_t v46;
  unsigned int *v47;
  id *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v52 = 0;
    v19 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 16))(v19, &v52);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v52;
    v52 = 0;
    if (!v20)
      return;
    v21 = *(const void **)(v20 + 8);
    goto LABEL_57;
  }
  WeakRetained = objc_loadWeakRetained((id *)(v8 + 16));
  API::WindowFeatures::create(a4, &v52);
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 144);
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if ((*(_DWORD *)(v18 + 24) & 2) == 0)
    {
      if ((*(_DWORD *)(v18 + 24) & 1) == 0)
        goto LABEL_48;
      goto LABEL_27;
    }
  }
  else if ((MEMORY[0x18] & 2) == 0)
  {
    if ((MEMORY[0x18] & 1) == 0)
      goto LABEL_48;
    v18 = 0;
LABEL_27:
    v34 = objc_loadWeakRetained((id *)(v18 + 8));
    v35 = (id *)objc_msgSend(WeakRetained, "webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:", v34, *(_QWORD *)(*(_QWORD *)a3 + 8), *(_QWORD *)(*(_QWORD *)a5 + 8), *(_QWORD *)(v52 + 8));
    v36 = v35;
    if (v35)
      CFRetain(v35);
    if (v34)
      CFRelease(v34);
    if (v36)
    {
      v37 = objc_msgSend(v36[52], "_relatedWebView");
      v38 = *(_QWORD *)(a1 + 16);
      if (v38)
        v38 = *(_QWORD *)(v38 + 8);
      v39 = objc_loadWeakRetained((id *)(v38 + 8));
      v40 = v39;
      if (v39)
        CFRelease(v39);
      v41 = (_QWORD *)MEMORY[0x1E0C99768];
      if ((id)v37 != v40)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Returned WKWebView was not created with the given configuration."));
      v42 = *((_QWORD *)v36[52] + 19);
      if (v42)
      {
        v43 = (unsigned int *)(v42 + 16);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v43);
        if (v14 == v42)
          goto LABEL_43;
      }
      else if (!v14)
      {
        goto LABEL_43;
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v41, CFSTR("Returned WKWebView was not created with the given configuration."));
LABEL_43:
      v45 = (CFTypeRef *)v36[53];
      if (v45)
        CFRetain(v45[1]);
      v51 = (unsigned int *)v45;
      v46 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v46 + 16))(v46, &v51);
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      v47 = v51;
      v51 = 0;
      if (v47)
        CFRelease(*((CFTypeRef *)v47 + 1));
      v48 = v36;
LABEL_50:
      CFRelease(v48);
      goto LABEL_51;
    }
LABEL_48:
    v51 = 0;
    v49 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v49 + 16))(v49, &v51);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v51;
    v51 = 0;
    if (!v50)
      goto LABEL_51;
    v48 = (id *)*((_QWORD *)v50 + 1);
    goto LABEL_50;
  }
  WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)WeakRetained, (objc_object *)sel__webView_createWebViewWithConfiguration_forNavigationAction_windowFeatures_completionHandler_, (uint64_t *)&v51);
  v22 = *(_QWORD *)(a1 + 16);
  if (v22)
    v22 = *(_QWORD *)(v22 + 8);
  v23 = objc_loadWeakRetained((id *)(v22 + 8));
  v24 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v25 = *(_QWORD *)(*(_QWORD *)a5 + 8);
  v26 = v51;
  v27 = *(_QWORD *)(v52 + 8);
  v28 = *a6;
  *a6 = 0;
  v51 = 0;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
    v29 = *(_QWORD *)(v29 + 8);
  v30 = objc_loadWeakRetained((id *)(v29 + 8));
  if (v14)
  {
    v31 = (unsigned int *)(v14 + 16);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  v33 = malloc_type_malloc(0x40uLL, 0x10E00400E264627uLL);
  *v33 = MEMORY[0x1E0C809A0];
  v33[1] = 50331650;
  v33[2] = WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke;
  v33[3] = &WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::descriptor;
  v33[4] = v28;
  v33[5] = v26;
  v33[6] = v30;
  v33[7] = v14;
  objc_msgSend(WeakRetained, "_webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:", v23, v24, v25, v27, v33);
  _Block_release(v33);
  if (v23)
    CFRelease(v23);
  if (v51)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v51);
LABEL_51:
  if (v14)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
  if (v52)
    CFRelease(*(CFTypeRef *)(v52 + 8));
  if (WeakRetained)
  {
    v21 = WeakRetained;
LABEL_57:
    CFRelease(v21);
  }
}

void sub_197210898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v12)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runJavaScriptAlert(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::CompletionHandlerCallChecker *v13;
  WebKit::CompletionHandlerCallChecker *v14;
  uint64_t v15;
  id WeakRetained;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (*(_DWORD *)(v8 + 24) & 4) != 0
    && (v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    v14 = v13;
    WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(a2);
    WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel_webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_completionHandler_, &v25);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
      v15 = *(_QWORD *)(v15 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    if (*a3)
      v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E351F1B8;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v24 = a2;
    v18 = API::Object::newObject(0x140uLL, 60);
    v19 = API::FrameInfo::FrameInfo(v18, a5, &v24);
    v20 = *(const void **)(v19 + 8);
    if (v20)
      CFRetain(*(CFTypeRef *)(v19 + 8));
    v21 = *a6;
    *a6 = 0;
    v22 = v25;
    v25 = 0;
    v23 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v23 = MEMORY[0x1E0C809A0];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    -[WebKit::CompletionHandlerCallChecker webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:](v14, "webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:", WeakRetained, v17, v20, v23);
    _Block_release(v23);
    if (v20)
      CFRelease(v20);
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v24)
      CFRelease(*(CFTypeRef *)(v24 + 8));
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v14);
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a6 + 16))(*a6);
  }
}

void sub_197210BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v11)
    CFRelease(v11);
  if (a10)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runJavaScriptConfirm(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::CompletionHandlerCallChecker *v13;
  WebKit::CompletionHandlerCallChecker *v14;
  uint64_t v15;
  id WeakRetained;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (*(_DWORD *)(v8 + 24) & 8) != 0
    && (v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    v14 = v13;
    WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(a2);
    WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel_webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_completionHandler_, &v25);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
      v15 = *(_QWORD *)(v15 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    if (*a3)
      v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E351F1B8;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v24 = a2;
    v18 = API::Object::newObject(0x140uLL, 60);
    v19 = API::FrameInfo::FrameInfo(v18, a5, &v24);
    v20 = *(const void **)(v19 + 8);
    if (v20)
      CFRetain(*(CFTypeRef *)(v19 + 8));
    v21 = *a6;
    *a6 = 0;
    v22 = v25;
    v25 = 0;
    v23 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v23 = MEMORY[0x1E0C809A0];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    -[WebKit::CompletionHandlerCallChecker webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:](v14, "webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:", WeakRetained, v17, v20, v23);
    _Block_release(v23);
    if (v20)
      CFRelease(v20);
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v24)
      CFRelease(*(CFTypeRef *)(v24 + 8));
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v14);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a6 + 16))(*a6, 0);
  }
}

void sub_197210E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v11)
    CFRelease(v11);
  if (a10)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runJavaScriptPrompt(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v18;
  uint64_t v19;
  id v20;
  const __CFString *v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v8 = *(_QWORD *)(a1 + 16);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0 || (*(_DWORD *)(v9 + 24) & 0x10) == 0)
  {
    v30 = 0;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v30);
    goto LABEL_5;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v9 + 16));
  if (!WeakRetained)
  {
    v30 = 0;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v30);
LABEL_5:
    v11 = v30;
    v30 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return;
  }
  v18 = WeakRetained;
  WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(a2);
  WebKit::CompletionHandlerCallChecker::create(v18, (objc_object *)sel_webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_completionHandler_, (uint64_t *)&v30);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
    v19 = *(_QWORD *)(v19 + 8);
  v20 = objc_loadWeakRetained((id *)(v19 + 8));
  if (*a3)
    v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v21 = &stru_1E351F1B8;
  if (*a4)
    v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v22 = &stru_1E351F1B8;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v29 = a2;
  v23 = API::Object::newObject(0x140uLL, 60);
  v24 = API::FrameInfo::FrameInfo(v23, a6, &v29);
  v25 = *(const void **)(v24 + 8);
  if (v25)
    CFRetain(*(CFTypeRef *)(v24 + 8));
  v26 = *a7;
  *a7 = 0;
  v27 = v30;
  v30 = 0;
  v28 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v28 = MEMORY[0x1E0C809A0];
  v28[1] = 50331650;
  v28[2] = WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
  v28[3] = &WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::descriptor;
  v28[4] = v26;
  v28[5] = v27;
  -[WebKit::CompletionHandlerCallChecker webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:](v18, "webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:", v20, v21, v22, v25, v28);
  _Block_release(v28);
  if (v25)
    CFRelease(v25);
  CFRelease(*(CFTypeRef *)(v23 + 8));
  if (v29)
    CFRelease(*(CFTypeRef *)(v29 + 8));
  if (v20)
    CFRelease(v20);
  CFRelease(v18);
}

void sub_1972111CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(_QWORD *a1, uint64_t a2, uint64_t a3, WTF::String *a4, WTF::String *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v13;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  WTF::StringImpl *v22;
  const void *v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  const void *v36;
  const __CFString *v37;
  uint64_t v38;
  const __CFString *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  const __CFString *v45;
  const __CFString *v46;
  uint64_t v47;
  const WTF::StringImpl *v48;
  uint64_t v49;
  const __CFString *v50;
  const __CFString *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  WTF::StringImpl *v55;
  WTF::String *v56;
  WebKit::CompletionHandlerCallChecker *v57;
  uint64_t v58[2];
  WTF::StringImpl *v59;
  char v60;
  _QWORD v61[2];

  v61[1] = *MEMORY[0x1E0C80C00];
  v8 = a1[2];
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v18 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
LABEL_10:
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return;
  }
  v13 = a1;
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v9 + 16));
  if (!WeakRetained)
  {
    v18 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
    goto LABEL_10;
  }
  v15 = WeakRetained;
  WebCore::NetworkStorageSession::findAdditionalLoginDomain();
  v16 = v13[2];
  if (*(_BYTE *)(a6 + 32) || v60)
  {
    v19 = *(_QWORD *)(v16 + 8);
    if ((*(_DWORD *)(v19 + 24) & 0x40) == 0)
    {
      if (!*(_BYTE *)(a6 + 32))
      {
        if (v60)
        {
          v13 = objc_loadWeakRetained((id *)(v19 + 8));
          WebKit::presentStorageAccessAlertQuirk(v13, a4, (WTF::String *)&v59, a5, a7);
          goto LABEL_60;
        }
        goto LABEL_7;
      }
      v20 = objc_loadWeakRetained((id *)(v19 + 8));
      if (*(_BYTE *)(a6 + 32))
      {
        v21 = v20;
        WebKit::presentStorageAccessAlertSSOQuirk(v20, (__CFString *)a6, (uint64_t *)(a6 + 8), a7);
        if (!v21)
          goto LABEL_63;
        v23 = v21;
        goto LABEL_62;
      }
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    v26 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
    if (*(_BYTE *)(a6 + 32))
    {
      v27 = (uint64_t *)(a6 + 8);
      v57 = v15;
      v58[0] = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v27, v24, v25);
      v58[1] = v28;
      v56 = a5;
      if (*v27)
        v29 = *v27 + 24 * *(unsigned int *)(*v27 - 4);
      else
        v29 = 0;
      while (1)
      {
        v40 = v58[0];
        if (v58[0] == v29)
          break;
        v41 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(v58[0] + 20));
        v42 = *(unsigned int *)(v40 + 20);
        if ((_DWORD)v42)
        {
          v43 = *(_QWORD **)(v40 + 8);
          v44 = 8 * v42;
          do
          {
            if (*v43)
              v45 = (const __CFString *)WTF::StringImpl::operator NSString *();
            else
              v45 = &stru_1E351F1B8;
            objc_msgSend(v41, "addObject:", v45, v56);
            ++v43;
            v44 -= 8;
          }
          while (v44);
        }
        if (*(_QWORD *)v40)
          v46 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v46 = &stru_1E351F1B8;
        objc_msgSend(v26, "setObject:forKey:", v41, v46, v56);
        v58[0] += 24;
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v58, v47, v48);
      }
      a5 = v56;
      v15 = v57;
    }
    else
    {
      if (!v60)
        goto LABEL_69;
      if (v59)
        v37 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v37 = &stru_1E351F1B8;
      v61[0] = v37;
      v38 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v61, 1);
      if (*(_QWORD *)a5)
        v39 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v39 = &stru_1E351F1B8;
      objc_msgSend(v26, "setObject:forKey:", v38, v39);
    }
    WebKit::CompletionHandlerCallChecker::create(v15, (objc_object *)sel__webView_requestStorageAccessPanelForDomain_underCurrentDomain_forQuirkDomains_completionHandler_, v58);
    v49 = v13[2];
    if (v49)
      v49 = *(_QWORD *)(v49 + 8);
    v13 = objc_loadWeakRetained((id *)(v49 + 8));
    if (*(_QWORD *)a4)
      v50 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v50 = &stru_1E351F1B8;
    if (*(_QWORD *)a5)
      v51 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v51 = &stru_1E351F1B8;
    v52 = *a7;
    *a7 = 0;
    v53 = v58[0];
    v58[0] = 0;
    v54 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v54 = MEMORY[0x1E0C809A0];
    v54[1] = 50331650;
    v54[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v54[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v54[4] = v52;
    v54[5] = v53;
    -[WebKit::CompletionHandlerCallChecker _webView:requestStorageAccessPanelForDomain:underCurrentDomain:forQuirkDomains:completionHandler:](v15, "_webView:requestStorageAccessPanelForDomain:underCurrentDomain:forQuirkDomains:completionHandler:", v13, v50, v51, v26, v54);
    v36 = v54;
    goto LABEL_59;
  }
  if (v16)
  {
LABEL_7:
    v17 = *(_QWORD *)(v16 + 8);
    if ((*(_DWORD *)(v17 + 24) & 0x20) != 0)
    {
LABEL_23:
      WebKit::CompletionHandlerCallChecker::create(v15, (objc_object *)sel__webView_requestStorageAccessPanelForDomain_underCurrentDomain_completionHandler_, v58);
      v30 = v13[2];
      if (v30)
        v30 = *(_QWORD *)(v30 + 8);
      v13 = objc_loadWeakRetained((id *)(v30 + 8));
      if (*(_QWORD *)a4)
      {
        v31 = (const __CFString *)WTF::StringImpl::operator NSString *();
LABEL_27:
        if (*(_QWORD *)a5)
          v32 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v32 = &stru_1E351F1B8;
        v33 = *a7;
        *a7 = 0;
        v34 = v58[0];
        v58[0] = 0;
        v35 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
        *v35 = MEMORY[0x1E0C809A0];
        v35[1] = 50331650;
        v35[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
        v35[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
        v35[4] = v33;
        v35[5] = v34;
        -[WebKit::CompletionHandlerCallChecker _webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:](v15, "_webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:", v13, v31, v32, v35);
        v36 = v35;
LABEL_59:
        _Block_release(v36);
        goto LABEL_60;
      }
LABEL_70:
      v31 = &stru_1E351F1B8;
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  if ((MEMORY[0x18] & 0x20) != 0)
    goto LABEL_23;
  v17 = 0;
LABEL_22:
  v13 = objc_loadWeakRetained((id *)(v17 + 8));
  WebKit::presentStorageAccessAlert(v13, a4, a5, a7);
LABEL_60:
  if (!v13)
    goto LABEL_63;
  v23 = v13;
LABEL_62:
  CFRelease(v23);
LABEL_63:
  if (v60)
  {
    v55 = v59;
    v59 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v22);
      else
        *(_DWORD *)v55 -= 2;
    }
  }
  CFRelease(v15);
}

void sub_197211854(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  const void *v14;
  const void *v15;

  if (v14)
    CFRelease(v14);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  CFRelease(v15);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, const WebKit::FrameInfoData *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  __int128 v30;
  char *v31;
  WTF::StringImpl *v32;
  void *v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  CFTypeRef v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  CFTypeRef v48;
  CFTypeRef v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  uint64_t v53;
  unsigned int *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  _BYTE v57[24];
  int v58;
  __int128 v59;
  CFTypeRef cf;
  _BYTE v61[24];
  int v62;
  WTF::StringImpl *v63;
  CFTypeRef *v64;
  _BYTE v65[24];
  int v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 24) & 0x300) != 0)
      {
        WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          v12 = WeakRetained;
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24) & 0x200) != 0)
          {
            WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 968), &v56);
            WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v56, v23);
            v25 = v56;
            v56 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v24);
              else
                *(_DWORD *)v25 -= 2;
            }
            WebKit::CompletionHandlerCallChecker::create(v12, (objc_object *)sel__webView_requestGeolocationPermissionForOrigin_initiatedByFrame_decisionHandler_, (uint64_t *)&v54);
            v64 = (CFTypeRef *)*a5;
            *a5 = 0;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v65, (uint64_t)v55 + 8);
            v26 = v54;
            v54 = 0;
            *(_QWORD *)&v67 = v26;
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
            v27 = *(unsigned int **)(a2 + 24);
            if (v27)
            {
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 + 1, v27));
            }
            v29 = (WTF::StringImpl *)v64;
            *((_QWORD *)&v67 + 1) = v27;
            v64 = 0;
            v56 = v29;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v57, (uint64_t)v65);
            v30 = v67;
            v67 = 0uLL;
            v59 = v30;
            v31 = (char *)malloc_type_malloc(0x58uLL, 0x10E2040F2FA5045uLL);
            *(_QWORD *)v31 = MEMORY[0x1E0C809A0];
            *((_QWORD *)v31 + 1) = 50331650;
            *((_QWORD *)v31 + 2) = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
            *((_QWORD *)v31 + 3) = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::descriptor;
            v32 = v56;
            v56 = 0;
            *((_QWORD *)v31 + 4) = v32;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v31 + 40), (uint64_t)v57);
            *(_OWORD *)(v31 + 72) = v59;
            v59 = 0uLL;
            if (v58 != -1)
              ((void (*)(uint64_t *, _BYTE *))off_1E34C9598[v58])(&v53, v57);
            v58 = -1;
            v34 = v56;
            v56 = 0;
            if (v34)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v34 + 8))(v34);
            v35 = (unsigned int *)*((_QWORD *)&v67 + 1);
            *((_QWORD *)&v67 + 1) = 0;
            if (v35)
            {
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                atomic_store(1u, v35);
                WTF::fastFree((WTF *)v35, v33);
              }
            }
            v38 = (unsigned int *)v67;
            *(_QWORD *)&v67 = 0;
            if (v38)
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v38);
            if (v66 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C9598[v66])(&v56, v65);
            v66 = -1;
            v39 = (uint64_t)v64;
            v64 = 0;
            if (v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            v40 = *(_QWORD *)(a1 + 16);
            if (v40)
              v40 = *(_QWORD *)(v40 + 8);
            v41 = objc_loadWeakRetained((id *)(v40 + 8));
            API::SecurityOrigin::create(&v64);
            v42 = v64[1];
            if (v42)
              CFRetain(v64[1]);
            WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)&v56, a4);
            CFRetain(*(CFTypeRef *)(a2 + 8));
            v53 = a2;
            v43 = API::Object::newObject(0x140uLL, 60);
            v44 = API::FrameInfo::FrameInfo(v43, (uint64_t)&v56, &v53);
            v45 = *(const void **)(v44 + 8);
            if (v45)
              CFRetain(*(CFTypeRef *)(v44 + 8));
            -[WebKit::CompletionHandlerCallChecker _webView:requestGeolocationPermissionForOrigin:initiatedByFrame:decisionHandler:](v12, "_webView:requestGeolocationPermissionForOrigin:initiatedByFrame:decisionHandler:", v41, v42, v45, v31);
            if (v45)
              CFRelease(v45);
            CFRelease(*(CFTypeRef *)(v43 + 8));
            if (v53)
              CFRelease(*(CFTypeRef *)(v53 + 8));
            v47 = v63;
            v63 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v46);
              else
                *(_DWORD *)v47 -= 2;
            }
            if (v62 != -1)
              ((void (*)(uint64_t *, _BYTE *))off_1E34C9598[v62])(&v53, v61);
            v62 = -1;
            v49 = cf;
            cf = 0;
            if (v49)
              CFRelease(v49);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v57);
            if (v42)
              CFRelease(v42);
            v50 = (uint64_t)v64;
            v64 = 0;
            if (v50)
              CFRelease(*(CFTypeRef *)(v50 + 8));
            if (v41)
              CFRelease(v41);
            _Block_release(v31);
            if (v54)
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v54);
            v52 = v55;
            v55 = 0;
            if (v52)
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v52, v51);
          }
          else
          {
            WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_requestGeolocationPermissionForFrame_decisionHandler_, (uint64_t *)&v64);
            v13 = *(_QWORD *)(a1 + 16);
            if (v13)
              v13 = *(_QWORD *)(v13 + 8);
            v14 = objc_loadWeakRetained((id *)(v13 + 8));
            WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)&v56, a4);
            CFRetain(*(CFTypeRef *)(a2 + 8));
            v55 = (WTF *)a2;
            v15 = API::Object::newObject(0x140uLL, 60);
            v16 = API::FrameInfo::FrameInfo(v15, (uint64_t)&v56, (uint64_t *)&v55);
            v17 = *(const void **)(v16 + 8);
            if (v17)
              CFRetain(*(CFTypeRef *)(v16 + 8));
            v18 = *a5;
            *a5 = 0;
            v19 = (uint64_t)v64;
            v64 = 0;
            v20 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
            *v20 = MEMORY[0x1E0C809A0];
            v20[1] = 50331650;
            v20[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
            v20[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::descriptor;
            v20[4] = v18;
            v20[5] = v19;
            -[WebKit::CompletionHandlerCallChecker _webView:requestGeolocationPermissionForFrame:decisionHandler:](v12, "_webView:requestGeolocationPermissionForFrame:decisionHandler:", v14, v17, v20);
            _Block_release(v20);
            if (v17)
              CFRelease(v17);
            CFRelease(*(CFTypeRef *)(v15 + 8));
            if (v55)
              CFRelease(*((CFTypeRef *)v55 + 1));
            v22 = v63;
            v63 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v21);
              else
                *(_DWORD *)v22 -= 2;
            }
            if (v62 != -1)
              ((void (*)(WTF **, _BYTE *))off_1E34C9598[v62])(&v55, v61);
            v62 = -1;
            v48 = cf;
            cf = 0;
            if (v48)
              CFRelease(v48);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v57);
            if (v14)
              CFRelease(v14);
          }
          CFRelease(v12);
        }
      }
    }
  }
}

void sub_197211FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, WTF *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, WTF *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef cf,uint64_t a38,uint64_t a39,uint64_t a40,int a41,WTF::StringImpl *a42)
{
  const void *v42;
  const void *v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  uint64_t v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  CFTypeRef v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF *v54;

  CFRelease(*(CFTypeRef *)(v44 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  v50 = a42;
  a42 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (a41 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E34C9598[a41])(&a9, &a38);
  a41 = -1;
  v51 = cf;
  cf = 0;
  if (v51)
    CFRelease(v51);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a13);
  if (v46)
    CFRelease(v46);
  v52 = *(_QWORD *)(v47 - 144);
  *(_QWORD *)(v47 - 144) = 0;
  if (v52)
    CFRelease(*(CFTypeRef *)(v52 + 8));
  if (v45)
    CFRelease(v45);
  _Block_release(v43);
  if (a10)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  v54 = a11;
  a11 = 0;
  if (v54)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v54, v53);
  CFRelease(v42);
  _Unwind_Resume(a1);
}

void sub_19721247C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  void *v16;

  if (a16 != -1)
    ((void (*)(char *, char *))off_1E34C9598[a16])(&a12, &a13);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didResignInputElementStrongPasswordAppearance(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, API::Object *a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 24) & 0x400) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
        if (WeakRetained)
        {
          v8 = WeakRetained;
          v9 = *((_QWORD *)this + 2);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8);
          v10 = objc_loadWeakRetained((id *)(v9 + 8));
          if (a3)
            v11 = *((_QWORD *)a3 + 1);
          else
            v11 = 0;
          objc_msgSend(v8, "_webView:didResignInputElementStrongPasswordAppearanceWithUserInfo:", v10, v11);
          if (v10)
            CFRelease(v10);
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_197212570(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::CompletionHandlerCallChecker *v13;
  WebKit::CompletionHandlerCallChecker *v14;
  uint64_t v15;
  id WeakRetained;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (*(_DWORD *)(v8 + 24) & 0x80) != 0
    && (v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16))) != 0)
  {
    v14 = v13;
    WebKit::CompletionHandlerCallChecker::create(v13, (objc_object *)sel__webView_runBeforeUnloadConfirmPanelWithMessage_initiatedByFrame_completionHandler_, &v25);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
      v15 = *(_QWORD *)(v15 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v15 + 8));
    if (*a3)
      v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E351F1B8;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v24 = a2;
    v18 = API::Object::newObject(0x140uLL, 60);
    v19 = API::FrameInfo::FrameInfo(v18, a5, &v24);
    v20 = *(const void **)(v19 + 8);
    if (v20)
      CFRetain(*(CFTypeRef *)(v19 + 8));
    v21 = *a6;
    *a6 = 0;
    v22 = v25;
    v25 = 0;
    v23 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v23 = MEMORY[0x1E0C809A0];
    v23[1] = 50331650;
    v23[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v23[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
    v23[4] = v21;
    v23[5] = v22;
    -[WebKit::CompletionHandlerCallChecker _webView:runBeforeUnloadConfirmPanelWithMessage:initiatedByFrame:completionHandler:](v14, "_webView:runBeforeUnloadConfirmPanelWithMessage:initiatedByFrame:completionHandler:", WeakRetained, v17, v20, v23);
    _Block_release(v23);
    if (v20)
      CFRelease(v20);
    CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v24)
      CFRelease(*(CFTypeRef *)(v24 + 8));
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v14);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a6 + 16))(*a6, 0);
  }
}

void sub_197212774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v11)
    CFRelease(v11);
  if (a10)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  const __CFString *v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const __CFString *v37;
  id v38;
  uint64_t v39;

  v11 = *(_QWORD *)(a1 + 16);
  if (!v11
    || (v12 = *(_QWORD *)(v11 + 8)) == 0
    || (*(_DWORD *)(v12 + 24) & 0x18000) == 0
    || (WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v12 + 16))) == 0)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a11 + 16))(*a11, 52428800);
    return;
  }
  v20 = WeakRetained;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24) & 0x10000) != 0)
  {
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_decideDatabaseQuotaForSecurityOrigin_databaseName_displayName_currentQuota_currentOriginUsage_currentDatabaseUsage_expectedUsage_decisionHandler_, &v39);
    v28 = *(_QWORD *)(a1 + 16);
    if (v28)
      v28 = *(_QWORD *)(v28 + 8);
    v29 = objc_loadWeakRetained((id *)(v28 + 8));
    v30 = *(_QWORD *)(a4 + 8);
    v38 = v29;
    if (*a5)
      v31 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v31 = &stru_1E351F1B8;
    v36 = v30;
    v37 = v31;
    if (*a6)
      v32 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v32 = &stru_1E351F1B8;
    v33 = *a11;
    *a11 = 0;
    v34 = v39;
    v39 = 0;
    v35 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v35 = MEMORY[0x1E0C809A0];
    v35[1] = 50331650;
    v35[2] = WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::{lambda(void *,unsigned long long)#1}::__invoke;
    v35[3] = &WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::descriptor;
    v35[4] = v33;
    v35[5] = v34;
    -[WebKit::CompletionHandlerCallChecker _webView:decideDatabaseQuotaForSecurityOrigin:databaseName:displayName:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:](v20, "_webView:decideDatabaseQuotaForSecurityOrigin:databaseName:displayName:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:", v38, v36, v37, v32, a7, a8, a9, a10, v35);
    _Block_release(v35);
    if (!v38)
      goto LABEL_20;
    v27 = v38;
  }
  else
  {
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_decideDatabaseQuotaForSecurityOrigin_currentQuota_currentOriginUsage_currentDatabaseUsage_expectedUsage_decisionHandler_, &v39);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
      v21 = *(_QWORD *)(v21 + 8);
    v22 = objc_loadWeakRetained((id *)(v21 + 8));
    v23 = *(_QWORD *)(a4 + 8);
    v24 = *a11;
    *a11 = 0;
    v25 = v39;
    v26 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v26 = MEMORY[0x1E0C809A0];
    v26[1] = 50331650;
    v26[2] = WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::{lambda(void *,unsigned long long)#1}::__invoke;
    v26[3] = &WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::descriptor;
    v26[4] = v24;
    v26[5] = v25;
    -[WebKit::CompletionHandlerCallChecker _webView:decideDatabaseQuotaForSecurityOrigin:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:](v20, "_webView:decideDatabaseQuotaForSecurityOrigin:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:", v22, v23, a7, a8, a9, a10, v26);
    _Block_release(v26);
    if (!v22)
      goto LABEL_20;
    v27 = v22;
  }
  CFRelease(v27);
LABEL_20:
  CFRelease(v20);
}

void sub_197212AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, unsigned int *a16)
{
  const void *v16;
  const void *v17;

  _Block_release(v17);
  if (cf)
    CFRelease(cf);
  if (a16)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a16);
  CFRelease(v16);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::lockScreenOrientation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if ((*(_DWORD *)(v4 + 24) & 0x20000) == 0)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
  if (!WeakRetained)
    return 0;
  v8 = WeakRetained;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  v10 = objc_loadWeakRetained((id *)(v9 + 8));
  if ((a3 - 1) < 3)
    v11 = (a3 - 1) + 1;
  else
    v11 = 0;
  v12 = objc_msgSend(v8, "_webViewLockScreenOrientation:lockType:", v10, v11);
  if (v10)
    CFRelease(v10);
  CFRelease(v8);
  return v12;
}

void sub_197212C64(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::unlockScreenOrientation(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x40000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewUnlockScreenOrientation:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_197212D2C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::takeFocus(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v8;
  uint64_t v9;
  id WeakRetained;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || (*(_DWORD *)(v4 + 24) & 0x800) == 0)
    return 0;
  result = (uint64_t)objc_loadWeakRetained((id *)(v4 + 16));
  if (result)
  {
    v8 = (void *)result;
    v9 = *((_QWORD *)this + 2);
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v9 + 8));
    objc_msgSend(v8, "_webView:takeFocus:", WeakRetained, a3 != 0);
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v8);
    return 1;
  }
  return result;
}

void sub_197212E00(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::handleAutoplayEvent(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 24) & 0x1000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 16));
        if (WeakRetained)
        {
          v10 = WeakRetained;
          v11 = *(_QWORD *)(a1 + 16);
          if (v11)
            v11 = *(_QWORD *)(v11 + 8);
          v12 = objc_loadWeakRetained((id *)(v11 + 8));
          if (a3 >= 4)
            v13 = 1;
          else
            v13 = a3;
          objc_msgSend(v10, "_webView:handleAutoplayEvent:withFlags:", v12, v13, a4 & 7);
          if (v12)
            CFRelease(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_197212EDC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || ((*(unsigned int *)(v6 + 24) | ((unint64_t)(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) << 32)) & 0x200000000000) == 0)
  {
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 16));
  if (!WeakRetained)
  {
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    goto LABEL_5;
  }
  v11 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_requestNotificationPermissionForSecurityOrigin_decisionHandler_, &v18);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    v12 = *(_QWORD *)(v12 + 8);
  v13 = objc_loadWeakRetained((id *)(v12 + 8));
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *a4;
  *a4 = 0;
  v16 = v18;
  v17 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v17 = MEMORY[0x1E0C809A0];
  v17[1] = 50331650;
  v17[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v17[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v17[4] = v15;
  v17[5] = v16;
  -[WebKit::CompletionHandlerCallChecker _webView:requestNotificationPermissionForSecurityOrigin:decisionHandler:](v11, "_webView:requestNotificationPermissionForSecurityOrigin:decisionHandler:", v13, v14, v17);
  _Block_release(v17);
  if (v13)
    CFRelease(v13);
  CFRelease(v11);
}

void sub_1972130A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || ((*(unsigned int *)(v4 + 24) | ((unint64_t)(*(unsigned __int16 *)(v4 + 28) | (*(unsigned __int8 *)(v4 + 30) << 16)) << 32)) & 0x400000000000) == 0)
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v4 + 16));
  if (!WeakRetained)
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    goto LABEL_5;
  }
  v8 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_requestCookieConsentWithMoreInfoHandler_decisionHandler_, &v14);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  v10 = objc_loadWeakRetained((id *)(v9 + 8));
  v11 = *a2;
  *a2 = 0;
  v12 = v14;
  v13 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v13 = MEMORY[0x1E0C809A0];
  v13[1] = 50331650;
  v13[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v13[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::descriptor;
  v13[4] = v11;
  v13[5] = v12;
  -[WebKit::CompletionHandlerCallChecker _webView:requestCookieConsentWithMoreInfoHandler:decisionHandler:](v8, "_webView:requestCookieConsentWithMoreInfoHandler:decisionHandler:", v10, 0, v13);
  _Block_release(v13);
  if (v10)
    CFRelease(v10);
  CFRelease(v8);
}

void sub_1972132E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int v15;
  WTF::StringImpl *v16;
  WTF *result;
  uint64_t v18;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  CFTypeRef *v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  char *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  CFTypeRef *v33;
  uint64_t v34;
  id v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF *v42;
  char v43;
  CFTypeRef *v44;
  _BYTE v45[24];
  int v46;
  WTF *v47[2];
  WTF::StringImpl *v48;
  _BYTE v49[24];
  int v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  WebKit::PageLoadState::activeURL((unsigned __int8 *)a2[4] + 968, &v48);
  WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v48, v9);
  v11 = v48;
  v48 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12
    && (v13 = *(_QWORD *)(v12 + 8)) != 0
    && (v14 = objc_loadWeakRetained((id *)(v13 + 16))) != 0
    && (v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24), CFRelease(v14), (v15 & 0x4000) != 0))
  {
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
      v18 = *(_QWORD *)(v18 + 8);
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v18 + 16));
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_webView_requestDeviceOrientationAndMotionPermissionForOrigin_initiatedByFrame_decisionHandler_, (uint64_t *)&v41);
    v20 = (CFTypeRef *)*a5;
    *a5 = 0;
    v44 = v20;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v45, (uint64_t)v42 + 8);
    v21 = v41;
    v41 = 0;
    v47[0] = v21;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)(a2 + 2));
    v22 = (unsigned int *)a2[3];
    if (v22)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    v47[1] = (WTF *)v22;
    v48 = (WTF::StringImpl *)v44;
    v44 = 0;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v49, (uint64_t)v45);
    v24 = *(_OWORD *)v47;
    v47[0] = 0;
    v47[1] = 0;
    v51 = v24;
    v25 = (char *)malloc_type_malloc(0x58uLL, 0x10E2040F2FA5045uLL);
    *(_QWORD *)v25 = MEMORY[0x1E0C809A0];
    *((_QWORD *)v25 + 1) = 50331650;
    *((_QWORD *)v25 + 2) = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
    *((_QWORD *)v25 + 3) = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v26 = v48;
    v48 = 0;
    *((_QWORD *)v25 + 4) = v26;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v25 + 40), (uint64_t)v49);
    *(_OWORD *)(v25 + 72) = v51;
    v51 = 0uLL;
    if (v50 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C9598[v50])(&v43, v49);
    v50 = -1;
    v28 = v48;
    v48 = 0;
    if (v28)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
    v29 = (unsigned int *)v47[1];
    v47[1] = 0;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v27);
      }
    }
    v32 = (unsigned int *)v47[0];
    v47[0] = 0;
    if (v32)
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v32);
    if (v46 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C9598[v46])(&v48, v45);
    v46 = -1;
    v33 = v44;
    v44 = 0;
    if (v33)
      (*((void (**)(CFTypeRef *))*v33 + 1))(v33);
    v34 = *(_QWORD *)(a1 + 16);
    if (v34)
      v34 = *(_QWORD *)(v34 + 8);
    v35 = objc_loadWeakRetained((id *)(v34 + 8));
    API::SecurityOrigin::create(&v48);
    v36 = (const void *)*((_QWORD *)v48 + 1);
    if (v36)
      CFRetain(*((CFTypeRef *)v48 + 1));
    CFRetain(a2[1]);
    v44 = a2;
    v37 = API::Object::newObject(0x140uLL, 60);
    v38 = API::FrameInfo::FrameInfo(v37, a4, (uint64_t *)&v44);
    v39 = *(const void **)(v38 + 8);
    if (v39)
      CFRetain(*(CFTypeRef *)(v38 + 8));
    -[WebKit::CompletionHandlerCallChecker webView:requestDeviceOrientationAndMotionPermissionForOrigin:initiatedByFrame:decisionHandler:](WeakRetained, "webView:requestDeviceOrientationAndMotionPermissionForOrigin:initiatedByFrame:decisionHandler:", v35, v36, v39, v25);
    if (v39)
      CFRelease(v39);
    CFRelease(*(CFTypeRef *)(v37 + 8));
    if (v44)
      CFRelease(v44[1]);
    if (v36)
      CFRelease(v36);
    v40 = v48;
    v48 = 0;
    if (v40)
      CFRelease(*((CFTypeRef *)v40 + 1));
    if (v35)
      CFRelease(v35);
    _Block_release(v25);
    if (v41)
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v41);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
  else
  {
    WebKit::alertForPermission((WebKit::WebPageProxy *)a2, (const __CFString *)3, (WTF *)((char *)v42 + 8), a5);
  }
  result = v42;
  v42 = 0;
  if (result)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v16);
  return result;
}

void sub_197213784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, WTF *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,WTF *a21,CFTypeRef *a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,WTF *a28)
{
  const void *v28;
  const void *v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  WTF::StringImpl *v34;

  CFRelease(*(CFTypeRef *)(v30 + 8));
  if (a15)
    CFRelease(*(CFTypeRef *)(a15 + 8));
  if (v32)
    CFRelease(v32);
  if (a22)
    CFRelease(a22[1]);
  if (v31)
    CFRelease(v31);
  _Block_release(v29);
  if (a9)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a9);
  if (v28)
    CFRelease(v28);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a10, v34);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didChangeFontAttributes(WebKit::UIDelegate::UIClient *this, const WebCore::FontAttributes *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  id v9;
  CFTypeRef cf;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x20000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        v7 = WeakRetained;
        if (WeakRetained)
          CFRelease(WeakRetained);
        v8 = *((_QWORD *)this + 2);
        if (v8)
          v8 = *(_QWORD *)(v8 + 8);
        v9 = objc_loadWeakRetained((id *)(v8 + 8));
        WebCore::FontAttributes::createDictionary(a2);
        objc_msgSend(v7, "_webView:didChangeFontAttributes:", v9, cf);
        if (cf)
          CFRelease(cf);
        if (v9)
          CFRelease(v9);
      }
    }
  }
}

void sub_197213AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WTF::StringImpl *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, CFTypeRef *a6)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v12;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v14;
  WTF::StringImpl *v15;
  char v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::ResourceRequestBase *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  WebKit::CompletionHandlerCallChecker *v28;
  WebKit::CompletionHandlerCallChecker *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  WebKit::WebFrameProxy *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  __int128 v44;
  BOOL v45;
  uint64_t v46;
  CFTypeRef *v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  CFTypeRef v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  const void *v74;
  uint64_t v75;
  int v76;
  id v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  CFTypeRef v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::ResourceRequestBase *v83;
  WTF::StringImpl *v84;
  __int128 v85;
  __int128 v86;
  CFTypeRef *v87;
  WTF::StringImpl *v88;
  _OWORD v89[12];
  CFTypeRef cf;
  _BYTE v91[24];
  int v92;
  WTF::StringImpl *v93;
  __int128 v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  __int16 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 2);
  if (!v6)
    return this;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return this;
  v12 = this;
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 16));
  if (!WeakRetained)
  {
    CFRetain(a6[1]);
    v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v15 = &off_1E34C9B80;
    *((_QWORD *)v15 + 1) = a6;
    v88 = v15;
    WTF::ensureOnMainRunLoop();
    goto LABEL_12;
  }
  v14 = WeakRetained;
  CFRelease(WeakRetained);
  if (*((unsigned __int8 *)a6 + 112) - 1 <= 1)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0 || (*((unsigned int (**)(CFTypeRef *))*a6 + 4))(a6))
      return (WTF::StringImpl *)(*((uint64_t (**)(CFTypeRef *, uint64_t))*a6 + 3))(a6, 2);
    v27 = *((_QWORD *)v12 + 2);
    if (v27)
      v27 = *(_QWORD *)(v27 + 8);
    v28 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v27 + 16));
    v29 = v28;
    if (v28)
      CFRelease(v28);
    WebKit::CompletionHandlerCallChecker::create(v29, (objc_object *)sel__webView_requestDisplayCapturePermissionForOrigin_initiatedByFrame_withSystemAudio_decisionHandler_, (uint64_t *)&v84);
    CFRetain(a6[1]);
    v30 = v84;
    v84 = 0;
    v32 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v32 = MEMORY[0x1E0C809A0];
    v32[1] = 50331650;
    v32[2] = WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKDisplayCapturePermissionDecision)#1}::__invoke;
    v32[3] = &WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::descriptor;
    v32[4] = a6;
    v32[5] = v30;
    v33 = (_QWORD *)*((_QWORD *)a3 + 3);
    if (v33 && (v33 = (_QWORD *)v33[1]) != 0)
    {
      v34 = (WebKit::WebFrameProxy *)v33[33];
      if (v34)
      {
        v35 = *((_QWORD *)v34 + 34);
        v31 = *((_QWORD *)v34 + 35);
        v36 = v35 & 0xFFFFFFFFFFFFFF00;
        v37 = 1;
      }
      else
      {
        v36 = 0;
        LOBYTE(v35) = 0;
        v37 = 0;
      }
      v81 = v31;
      if (v34 == a3)
      {
        LOBYTE(v33) = 1;
      }
      else
      {
        v33 = (_QWORD *)v33[138];
        if (v33)
          LOBYTE(v33) = v33[9] == (_QWORD)a3;
      }
    }
    else
    {
      v37 = 0;
      LOBYTE(v35) = 0;
      v36 = 0;
    }
    LOWORD(v88) = v33;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v89);
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v91, (uint64_t)a4 + 16);
    v94 = *((_OWORD *)a3 + 17);
    v93 = 0;
    v95 = v35 | v36;
    v96 = v81;
    v97 = v37;
    v68 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 4) + 16) + 136);
    if (v68)
      LODWORD(v68) = *(_DWORD *)(v68 + 108);
    v98 = v68;
    v69 = *((_QWORD *)a3 + 3);
    if (v69)
    {
      v70 = *(_QWORD *)(v69 + 8);
      if (v70)
      {
        v99 = *(_QWORD *)(v70 + 280) == (_QWORD)a3;
        CFRetain(*(CFTypeRef *)(v70 - 8));
        v69 = v70 - 16;
LABEL_109:
        v87 = (CFTypeRef *)v69;
        v71 = API::Object::newObject(0x140uLL, 60);
        v72 = API::FrameInfo::FrameInfo(v71, (uint64_t)&v88, (uint64_t *)&v87);
        v73 = *(const void **)(v72 + 8);
        if (v73)
        {
          CFRetain(*(CFTypeRef *)(v72 + 8));
          v74 = *(const void **)(v71 + 8);
        }
        else
        {
          v74 = 0;
        }
        CFRelease(v74);
        if (v87)
          CFRelease(v87[1]);
        v75 = *((_QWORD *)v12 + 2);
        if (v75)
          v75 = *(_QWORD *)(v75 + 8);
        v76 = *((unsigned __int8 *)a6 + 112);
        v77 = objc_loadWeakRetained((id *)(v75 + 8));
        -[WebKit::CompletionHandlerCallChecker _webView:requestDisplayCapturePermissionForOrigin:initiatedByFrame:withSystemAudio:decisionHandler:](v29, "_webView:requestDisplayCapturePermissionForOrigin:initiatedByFrame:withSystemAudio:decisionHandler:", v77, *((_QWORD *)a5 + 1), v73, v76 == 2, v32);
        if (v77)
          CFRelease(v77);
        if (v73)
          CFRelease(v73);
        v79 = v93;
        v93 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v78);
          else
            *(_DWORD *)v79 -= 2;
        }
        if (v92 != -1)
          ((void (*)(CFTypeRef **, _BYTE *))off_1E34C9598[v92])(&v87, v91);
        v92 = -1;
        v80 = cf;
        cf = 0;
        if (v80)
          CFRelease(v80);
LABEL_128:
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v89);
        _Block_release(v32);
        this = v84;
        if (v84)
          return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v84);
        return this;
      }
      v69 = 0;
    }
    v99 = 0;
    goto LABEL_109;
  }
  v16 = objc_opt_respondsToSelector();
  v17 = objc_opt_respondsToSelector();
  if ((v16 & 1) == 0 && (v17 & 1) == 0)
  {
    CFRetain(a6[1]);
    v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = &off_1E34C9BA8;
    *((_QWORD *)v18 + 1) = a6;
    v88 = v18;
    WTF::ensureOnMainRunLoop();
    goto LABEL_12;
  }
  if ((v16 & 1) != 0)
  {
    WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel_webView_requestMediaCapturePermissionForOrigin_initiatedByFrame_type_decisionHandler_, (uint64_t *)&v84);
    CFRetain(a6[1]);
    v19 = v84;
    v84 = 0;
    v20 = (WebCore::ResourceRequestBase *)malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *(_QWORD *)v20 = MEMORY[0x1E0C809A0];
    *((_QWORD *)v20 + 1) = 50331650;
    *((_QWORD *)v20 + 2) = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
    *((_QWORD *)v20 + 3) = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::descriptor;
    *((_QWORD *)v20 + 4) = a6;
    *((_QWORD *)v20 + 5) = v19;
    v22 = (_QWORD *)*((_QWORD *)a3 + 3);
    v83 = v20;
    if (v22 && (v22 = (_QWORD *)v22[1]) != 0)
    {
      v23 = v22[33];
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 272);
        v21 = *(_QWORD *)(v23 + 280);
        v25 = v24 & 0xFFFFFFFFFFFFFF00;
        v26 = 1;
      }
      else
      {
        v25 = 0;
        LOBYTE(v24) = 0;
        v26 = 0;
      }
      v82 = v21;
      if ((WebKit::WebFrameProxy *)v22[33] == a3)
      {
        LOBYTE(v22) = 1;
      }
      else
      {
        v22 = (_QWORD *)v22[138];
        if (v22)
          LOBYTE(v22) = v22[9] == (_QWORD)a3;
      }
    }
    else
    {
      v26 = 0;
      LOBYTE(v24) = 0;
      v25 = 0;
    }
    LOWORD(v88) = v22;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v89);
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v91, (uint64_t)a4 + 16);
    v94 = *((_OWORD *)a3 + 17);
    v93 = 0;
    v95 = v24 | v25;
    v96 = v82;
    v97 = v26;
    v55 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 4) + 16) + 136);
    if (v55)
      LODWORD(v55) = *(_DWORD *)(v55 + 108);
    v32 = v83;
    v98 = v55;
    v56 = *((_QWORD *)a3 + 3);
    if (v56)
    {
      v57 = *(_QWORD *)(v56 + 8);
      if (v57)
      {
        v99 = *(_QWORD *)(v57 + 280) == (_QWORD)a3;
        CFRetain(*(CFTypeRef *)(v57 - 8));
        v56 = v57 - 16;
LABEL_74:
        v87 = (CFTypeRef *)v56;
        v58 = API::Object::newObject(0x140uLL, 60);
        v59 = API::FrameInfo::FrameInfo(v58, (uint64_t)&v88, (uint64_t *)&v87);
        v60 = *(const void **)(v59 + 8);
        if (v60)
        {
          CFRetain(*(CFTypeRef *)(v59 + 8));
          v61 = *(const void **)(v58 + 8);
        }
        else
        {
          v61 = 0;
        }
        CFRelease(v61);
        if (v87)
          CFRelease(v87[1]);
        if (*((_DWORD *)a6 + 27))
        {
          if (*((unsigned __int8 *)a6 + 112) - 1 >= 2)
          {
            if (*((_DWORD *)a6 + 23))
              v62 = 2;
            else
              v62 = 1;
          }
          else
          {
            v62 = 1;
          }
        }
        else
        {
          v62 = 0;
        }
        v63 = *((_QWORD *)v12 + 2);
        if (v63)
          v63 = *(_QWORD *)(v63 + 8);
        v64 = objc_loadWeakRetained((id *)(v63 + 8));
        -[WebKit::CompletionHandlerCallChecker webView:requestMediaCapturePermissionForOrigin:initiatedByFrame:type:decisionHandler:](v14, "webView:requestMediaCapturePermissionForOrigin:initiatedByFrame:type:decisionHandler:", v64, *((_QWORD *)a5 + 1), v60, v62, v83);
        if (v64)
          CFRelease(v64);
        if (v60)
          CFRelease(v60);
        v66 = v93;
        v93 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v65);
          else
            *(_DWORD *)v66 -= 2;
        }
        if (v92 != -1)
          ((void (*)(CFTypeRef **, _BYTE *))off_1E34C9598[v92])(&v87, v91);
        v92 = -1;
        v67 = cf;
        cf = 0;
        if (v67)
          CFRelease(v67);
        goto LABEL_128;
      }
      v56 = 0;
    }
    v99 = 0;
    goto LABEL_74;
  }
  if ((v17 & 1) == 0)
  {
    CFRetain(a6[1]);
    v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v54 = &off_1E34C9BD0;
    *((_QWORD *)v54 + 1) = a6;
    v88 = v54;
    WTF::ensureOnMainRunLoop();
LABEL_12:
    this = v88;
    v88 = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
    return this;
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)a3 + 6);
  if (v38)
    *(_DWORD *)v38 += 2;
  v88 = v38;
  v39 = *(_OWORD *)((char *)a3 + 72);
  v89[0] = *(_OWORD *)((char *)a3 + 56);
  v89[1] = v39;
  v40 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
  if (v40)
    v41 = v40 - 16;
  else
    v41 = 0;
  v42 = *(_QWORD *)(v41 + 280);
  v43 = *(WTF::StringImpl **)(v42 + 48);
  if (v43)
    *(_DWORD *)v43 += 2;
  v84 = v43;
  v44 = *(_OWORD *)(v42 + 72);
  v85 = *(_OWORD *)(v42 + 56);
  v86 = v44;
  if (*((_DWORD *)a6 + 23))
    v45 = *((unsigned __int8 *)a6 + 112) - 1 >= 2;
  else
    v45 = 0;
  if (v45)
    v46 = (*((_DWORD *)a6 + 27) != 0) | 2;
  else
    v46 = *((_DWORD *)a6 + 27) != 0;
  WebKit::CompletionHandlerCallChecker::create(v14, (objc_object *)sel__webView_requestUserMediaAuthorizationForDevices_url_mainFrameURL_decisionHandler_, (uint64_t *)&v87);
  CFRetain(a6[1]);
  v47 = v87;
  v87 = 0;
  v48 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v48 = MEMORY[0x1E0C809A0];
  v48[1] = 50331650;
  v48[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::{lambda(void *,BOOL)#1}::__invoke;
  v48[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::descriptor;
  v48[4] = a6;
  v48[5] = v47;
  v49 = *((_QWORD *)v12 + 2);
  if (v49)
    v49 = *(_QWORD *)(v49 + 8);
  v50 = objc_loadWeakRetained((id *)(v49 + 8));
  v51 = WTF::URL::operator NSURL *();
  -[WebKit::CompletionHandlerCallChecker _webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:](v14, "_webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:", v50, v46, v51, WTF::URL::operator NSURL *(), v48);
  if (v50)
    CFRelease(v50);
  _Block_release(v48);
  if (v87)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v87);
  v53 = v84;
  v84 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  this = v88;
  v88 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v52);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void sub_19721441C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WebCore::ResourceRequestBase *a12, WebCore::ResourceRequestBase *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf,uint64_t a46,uint64_t a47,uint64_t a48,int a49,WTF::StringImpl *a50)
{
  const void *v50;
  WTF::StringImpl *v52;
  CFTypeRef v53;

  v52 = a50;
  a50 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (a49 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E34C9598[a49])(&a19, a11);
  a49 = -1;
  v53 = cf;
  cf = 0;
  if (v53)
    CFRelease(v53);
  WebCore::ResourceRequestBase::~ResourceRequestBase(a13);
  _Block_release(v50);
  if (a14)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)a14);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, CFTypeRef *a6)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  unsigned int *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  unsigned int *v35;

  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 16));
      if (WeakRetained)
      {
        v12 = WeakRetained;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24) & 0x8000000) != 0)
        {
          v15 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
          if (v15)
            v16 = v15 - 16;
          else
            v16 = 0;
          v17 = *(_QWORD *)(v16 + 280);
          if (v17)
            CFRetain(*(CFTypeRef *)(v17 + 8));
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            WebKit::CompletionHandlerCallChecker::create(v12, (objc_object *)sel__webView_includeSensitiveMediaDeviceDetails_, (uint64_t *)&v32);
            CFRetain(a6[1]);
            v18 = v32;
            v32 = 0;
            v19 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
            *v19 = MEMORY[0x1E0C809A0];
            v19[1] = 50331650;
            v19[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
            v19[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::descriptor;
            v19[4] = a6;
            v19[5] = v18;
            v20 = *((_QWORD *)this + 2);
            if (v20)
              v20 = *(_QWORD *)(v20 + 8);
            v21 = objc_loadWeakRetained((id *)(v20 + 8));
            -[WebKit::CompletionHandlerCallChecker _webView:includeSensitiveMediaDeviceDetails:](v12, "_webView:includeSensitiveMediaDeviceDetails:", v21, v19);
            if (v21)
              CFRelease(v21);
            _Block_release(v19);
            if (v32)
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref((unsigned int *)v32);
            if (!v17)
              goto LABEL_42;
          }
          else
          {
            WebKit::CompletionHandlerCallChecker::create(v12, (objc_object *)sel__webView_checkUserMediaPermissionForURL_mainFrameURL_frameIdentifier_decisionHandler_, (uint64_t *)&v35);
            CFRetain(a6[1]);
            v22 = v35;
            v35 = 0;
            v23 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
            *v23 = MEMORY[0x1E0C809A0];
            v23[1] = 50331650;
            v23[2] = WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::{lambda(void *,NSString *,BOOL)#1}::__invoke;
            v23[3] = &WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::descriptor;
            v23[4] = a6;
            v23[5] = v22;
            v24 = (WTF::StringImpl *)*((_QWORD *)a3 + 6);
            if (v24)
              *(_DWORD *)v24 += 2;
            v32 = v24;
            v33 = *(_OWORD *)((char *)a3 + 56);
            v34 = *(_OWORD *)((char *)a3 + 72);
            v25 = *(WTF::StringImpl **)(v17 + 48);
            if (v25)
              *(_DWORD *)v25 += 2;
            v31 = v25;
            v26 = *((_QWORD *)this + 2);
            if (v26)
              v26 = *(_QWORD *)(v26 + 8);
            v27 = objc_loadWeakRetained((id *)(v26 + 8));
            v28 = WTF::URL::operator NSURL *();
            -[WebKit::CompletionHandlerCallChecker _webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:](v12, "_webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:", v27, v28, WTF::URL::operator NSURL *(), *((_QWORD *)a3 + 34), v23);
            if (v27)
              CFRelease(v27);
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v29);
              else
                *(_DWORD *)v31 -= 2;
            }
            v30 = v32;
            v32 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v29);
              else
                *(_DWORD *)v30 -= 2;
            }
            _Block_release(v23);
            if (v35)
              WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v35);
          }
          CFRelease(*(CFTypeRef *)(v17 + 8));
        }
        else
        {
          v13 = a6[4];
          if (v13)
          {
            a6[4] = 0;
            (*(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)v13 + 16))(v13, 1);
            (*(void (**)(CFTypeRef))(*(_QWORD *)v13 + 8))(v13);
          }
        }
LABEL_42:
        CFRelease(v12);
        return;
      }
      v14 = a6[4];
      if (v14)
      {
        a6[4] = 0;
        (*(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)v14 + 16))(v14, 1);
        (*(void (**)(CFTypeRef))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
}

void sub_197214A60(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v21;

  if (v17)
    CFRelease(v17);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Block_release(v16);
  v21 = *(unsigned int **)(v19 - 72);
  if (v21)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v21);
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  CFRelease(v15);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::mediaCaptureStateDidChange(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id WeakRetained;
  id v8;
  id to;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      to = 0;
      objc_copyWeak(&to, (id *)(v3 + 8));
      objc_msgSend(objc_loadWeak(&to), "didChangeValueForKey:", CFSTR("mediaCaptureState"));
      v6 = *(_QWORD *)(a1 + 16);
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
      WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
      if (WeakRetained)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24) & 0x10000000) != 0)
        {
          v8 = objc_loadWeakRetained(&to);
          objc_msgSend(WeakRetained, "_webView:mediaCaptureStateDidChange:", v8, (a2 >> 11) & 0xF);
          if (v8)
            CFRelease(v8);
        }
        CFRelease(WeakRetained);
      }
      objc_destroyWeak(&to);
    }
  }
}

void sub_197214C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return;
  }
  WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
  if (!WeakRetained)
  {
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    goto LABEL_9;
  }
  v11 = WeakRetained;
  v12 = *(_QWORD *)(a3 + 272);
  v13 = *(_QWORD *)(a3 + 280);
  v14 = API::Object::newObject(0x28uLL, 11);
  *(_QWORD *)v14 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v14);
  *(_QWORD *)v14 = &off_1E34AD1B8;
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  *(_BYTE *)(v14 + 32) = 0;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(_DWORD *)(v16 + 24);
    if ((v17 & 0x200000) == 0)
    {
      if ((v17 & 0x100000) == 0)
        goto LABEL_16;
LABEL_14:
      v19 = objc_loadWeakRetained((id *)(v16 + 8));
      objc_msgSend(v11, "_webView:printFrame:", v19, *(_QWORD *)(v14 + 8));
      if (v19)
        CFRelease(v19);
      goto LABEL_16;
    }
LABEL_17:
    WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)v11, (objc_object *)sel__webView_printFrame_pdfFirstPageSize_completionHandler_, &v31);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
      v21 = *(_QWORD *)(v21 + 8);
    v22 = objc_loadWeakRetained((id *)(v21 + 8));
    v23 = *(_QWORD *)(v14 + 8);
    WebCore::FloatSize::operator CGSize();
    v25 = v24;
    v27 = v26;
    v28 = v31;
    v31 = 0;
    v29 = *a5;
    *a5 = 0;
    v30 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v30 = MEMORY[0x1E0C809A0];
    v30[1] = 50331650;
    v30[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
    v30[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v30[4] = v28;
    v30[5] = v29;
    objc_msgSend(v11, "_webView:printFrame:pdfFirstPageSize:completionHandler:", v22, v23, v30, v25, v27);
    _Block_release(v30);
    if (v22)
      CFRelease(v22);
    goto LABEL_21;
  }
  if ((MEMORY[0x18] & 0x200000) != 0)
    goto LABEL_17;
  if ((MEMORY[0x18] & 0x100000) != 0)
  {
    v16 = 0;
    goto LABEL_14;
  }
LABEL_16:
  v20 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_21:
  CFRelease(*(CFTypeRef *)(v14 + 8));
  CFRelease(v11);
}

void sub_197214F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  CFRelease(*(CFTypeRef *)(v11 + 8));
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::close(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id WeakRetained;
  uint64_t v11;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_DWORD *)(v3 + 24);
      if ((v5 & 0x800000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (!WeakRetained)
          return;
        v7 = WeakRetained;
        v11 = *((_QWORD *)this + 2);
        if (v11)
          v11 = *(_QWORD *)(v11 + 8);
        v9 = objc_loadWeakRetained((id *)(v11 + 8));
        objc_msgSend(v7, "_webViewClose:", v9);
      }
      else
      {
        if ((v5 & 0x400000) == 0)
          return;
        v6 = objc_loadWeakRetained((id *)(v3 + 16));
        if (!v6)
          return;
        v7 = v6;
        v8 = *((_QWORD *)this + 2);
        if (v8)
          v8 = *(_QWORD *)(v8 + 8);
        v9 = objc_loadWeakRetained((id *)(v8 + 8));
        objc_msgSend(v7, "webViewDidClose:", v9);
      }
      if (v9)
        CFRelease(v9);
      CFRelease(v7);
    }
  }
}

void sub_1972150E4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::fullscreenMayReturnToInline(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x1000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewFullscreenMayReturnToInline:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_1972151B4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didEnterFullscreen(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x2000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewDidEnterFullscreen:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_19721527C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didExitFullscreen(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_DWORD *)(v3 + 24) & 0x4000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewDidExitFullscreen:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_197215344(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::shouldIncludeAppLinkActionsForElement(WebKit::UIDelegate::UIClient *this, _WKActivatedElementInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 1;
  if ((*(_DWORD *)(v3 + 24) & 0x40000000) == 0)
    return 1;
  WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
  if (!WeakRetained)
    return 1;
  v7 = WeakRetained;
  v8 = *((_QWORD *)this + 2);
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  v9 = objc_loadWeakRetained((id *)(v8 + 8));
  v10 = objc_msgSend(v7, "_webView:shouldIncludeAppLinkActionsForElement:", v9, a2);
  if (v9)
    CFRelease(v9);
  CFRelease(v7);
  return v10;
}

void sub_197215418(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::actionsForElement(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  id v10;
  void *v11;
  uint64_t v12;
  id WeakRetained;
  const void *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && (*(_DWORD *)(v7 + 24) & 0x80000000) != 0
    && (v10 = objc_loadWeakRetained((id *)(v7 + 16))) != 0)
  {
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v12 + 8));
    v14 = (const void *)objc_msgSend(v11, "_webView:actionsForElement:defaultActions:", WeakRetained, a2, *a3);
    *a4 = v14;
    if (v14)
      CFRetain(v14);
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v11);
  }
  else
  {
    v15 = *a3;
    *a3 = 0;
    *a4 = v15;
  }
}

void sub_197215518(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didNotHandleTapAsClick(WebKit::UIDelegate::UIClient *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x100000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          WebCore::IntPoint::operator CGPoint();
          objc_msgSend(v6, "_webView:didNotHandleTapAsClickAtPoint:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_1972155EC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::statusBarWasTapped(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1;
  uint64_t v2;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x200000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
        if (WeakRetained)
        {
          v5 = WeakRetained;
          v6 = *((_QWORD *)this + 2);
          if (v6)
            v6 = *(_QWORD *)(v6 + 8);
          v7 = objc_loadWeakRetained((id *)(v6 + 8));
          objc_msgSend(v5, "_webViewStatusBarWasTapped:", v7);
          if (v7)
            CFRelease(v7);
          CFRelease(v5);
        }
      }
    }
  }
}

void sub_1972156B4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::setShouldKeepScreenAwake(WebKit::UIDelegate::UIClient *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v7;
  uint64_t v8;
  id WeakRetained;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3
    || ((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x400000000) == 0)
  {
    return 0;
  }
  result = (uint64_t)objc_loadWeakRetained((id *)(v3 + 16));
  if (result)
  {
    v7 = (void *)result;
    v8 = *((_QWORD *)this + 2);
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v8 + 8));
    objc_msgSend(v7, "_webView:setShouldKeepScreenAwake:", WeakRetained, a2);
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v7);
    return 1;
  }
  return result;
}

void sub_197215784(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::UIClient::presentingViewController(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1;
  uint64_t v2;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x800000000) == 0)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  if (!WeakRetained)
    return 0;
  v5 = WeakRetained;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  v7 = objc_loadWeakRetained((id *)(v6 + 8));
  v8 = objc_msgSend(v5, "_presentingViewControllerForWebView:", v7);
  if (v7)
    CFRelease(v7);
  CFRelease(v5);
  return v8;
}

void sub_197215850(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didShowSafeBrowsingWarning(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1;
  uint64_t v2;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x8000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
        if (WeakRetained)
        {
          v5 = WeakRetained;
          v6 = *((_QWORD *)this + 2);
          if (v6)
            v6 = *(_QWORD *)(v6 + 8);
          v7 = objc_loadWeakRetained((id *)(v6 + 8));
          objc_msgSend(v5, "_webViewDidShowSafeBrowsingWarning:", v7);
          if (v7)
            CFRelease(v7);
          CFRelease(v5);
        }
      }
    }
  }
}

void sub_197215918(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::confirmPDFOpening(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6
    || (v7 = *(_QWORD *)(v6 + 8)) == 0
    || ((*(unsigned int *)(v7 + 24) | ((unint64_t)(*(unsigned __int16 *)(v7 + 28) | (*(unsigned __int8 *)(v7 + 30) << 16)) << 32)) & 0x10000000000) == 0)
  {
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v7 + 16));
  if (!WeakRetained)
  {
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
    goto LABEL_5;
  }
  v13 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_shouldAllowPDFAtURL_toOpenFromFrame_completionHandler_, &v24);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  v15 = objc_loadWeakRetained((id *)(v14 + 8));
  v16 = WTF::URL::operator NSURL *();
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v23 = a2;
  v17 = API::Object::newObject(0x140uLL, 60);
  v18 = API::FrameInfo::FrameInfo(v17, a4, &v23);
  v19 = *(const void **)(v18 + 8);
  if (v19)
    CFRetain(*(CFTypeRef *)(v18 + 8));
  v20 = *a5;
  *a5 = 0;
  v21 = v24;
  v24 = 0;
  v22 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v22 = MEMORY[0x1E0C809A0];
  v22[1] = 50331650;
  v22[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v22[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v22[4] = v20;
  v22[5] = v21;
  -[WebKit::CompletionHandlerCallChecker _webView:shouldAllowPDFAtURL:toOpenFromFrame:completionHandler:](v13, "_webView:shouldAllowPDFAtURL:toOpenFromFrame:completionHandler:", v15, v16, v19, v22);
  _Block_release(v22);
  if (v19)
    CFRelease(v19);
  CFRelease(*(CFTypeRef *)(v17 + 8));
  if (v23)
    CFRelease(*(CFTypeRef *)(v23 + 8));
  if (v15)
    CFRelease(v15);
  CFRelease(v13);
}

void sub_197215B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || ((*(unsigned int *)(v8 + 24) | ((unint64_t)(*(unsigned __int16 *)(v8 + 28) | (*(unsigned __int8 *)(v8 + 30) << 16)) << 32)) & 0x20000000000) == 0)
  {
    v9 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v8 + 16));
  if (!WeakRetained)
  {
    v9 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    goto LABEL_5;
  }
  v15 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_runWebAuthenticationPanel_initiatedByFrame_completionHandler_, &v26);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
    v16 = *(_QWORD *)(v16 + 8);
  v17 = objc_loadWeakRetained((id *)(v16 + 8));
  v18 = *(_QWORD *)(a3 + 8);
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v25 = a2;
  v19 = API::Object::newObject(0x140uLL, 60);
  v20 = API::FrameInfo::FrameInfo(v19, a5, &v25);
  v21 = *(const void **)(v20 + 8);
  if (v21)
    CFRetain(*(CFTypeRef *)(v20 + 8));
  v22 = *a6;
  *a6 = 0;
  v23 = v26;
  v26 = 0;
  v24 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v24 = MEMORY[0x1E0C809A0];
  v24[1] = 50331650;
  v24[2] = WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::{lambda(void *,_WKWebAuthenticationPanelResult)#1}::__invoke;
  v24[3] = &WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::descriptor;
  v24[4] = v22;
  v24[5] = v23;
  -[WebKit::CompletionHandlerCallChecker _webView:runWebAuthenticationPanel:initiatedByFrame:completionHandler:](v15, "_webView:runWebAuthenticationPanel:initiatedByFrame:completionHandler:", v17, v18, v21, v24);
  _Block_release(v24);
  if (v21)
    CFRelease(v21);
  CFRelease(*(CFTypeRef *)(v19 + 8));
  if (v25)
    CFRelease(*(CFTypeRef *)(v25 + 8));
  if (v17)
    CFRelease(v17);
  CFRelease(v15);
}

void sub_197215E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v10;
  uint64_t v11;
  id v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || ((*(unsigned int *)(v5 + 24) | ((unint64_t)(*(unsigned __int16 *)(v5 + 28) | (*(unsigned __int8 *)(v5 + 30) << 16)) << 32)) & 0x40000000000) == 0)
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v5 + 16));
  if (!WeakRetained)
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    goto LABEL_5;
  }
  v10 = WeakRetained;
  WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel__webView_requestWebAuthenticationConditionalMediationRegistrationForUser_completionHandler_, &v17);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
    v11 = *(_QWORD *)(v11 + 8);
  v12 = objc_loadWeakRetained((id *)(v11 + 8));
  if (*a2)
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  v14 = *a3;
  *a3 = 0;
  v15 = v17;
  v17 = 0;
  v16 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v16 = MEMORY[0x1E0C809A0];
  v16[1] = 50331650;
  v16[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v16[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v16[4] = v14;
  v16[5] = v15;
  -[WebKit::CompletionHandlerCallChecker _webView:requestWebAuthenticationConditionalMediationRegistrationForUser:completionHandler:](v10, "_webView:requestWebAuthenticationConditionalMediationRegistrationForUser:completionHandler:", v12, v13, v16);
  _Block_release(v16);
  if (v12)
    CFRelease(v12);
  CFRelease(v10);
}

void sub_1972160EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::hasVideoInPictureInPictureDidChange(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (((*(unsigned int *)(v4 + 24) | ((unint64_t)(*(unsigned __int16 *)(v4 + 28) | (*(unsigned __int8 *)(v4 + 30) << 16)) << 32)) & 0x4000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
        if (WeakRetained)
        {
          v8 = WeakRetained;
          v9 = *((_QWORD *)this + 2);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8);
          v10 = objc_loadWeakRetained((id *)(v9 + 8));
          objc_msgSend(v8, "_webView:hasVideoInPictureInPictureDidChange:", v10, a3);
          if (v10)
            CFRelease(v10);
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_197216240(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::imageOrMediaDocumentSizeChanged(WebKit::UIDelegate::UIClient *this, const WebCore::IntSize *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x2000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          WebCore::IntSize::operator CGSize();
          objc_msgSend(v6, "_webView:imageOrMediaDocumentSizeChanged:", v8);
          if (v8)
            CFRelease(v8);
          CFRelease(v6);
        }
      }
    }
  }
}

void sub_197216314(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::queryPermission(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v11;
  uint64_t v12;
  id v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 258);
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v6 + 16));
  if (!WeakRetained || (v11 = WeakRetained, CFRelease(WeakRetained), (objc_opt_respondsToSelector() & 1) == 0))
  {
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 258);
    goto LABEL_12;
  }
  WebKit::CompletionHandlerCallChecker::create(v11, (objc_object *)sel__webView_queryPermission_forOrigin_completionHandler_, &v20);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    v12 = *(_QWORD *)(v12 + 8);
  v13 = objc_loadWeakRetained((id *)(v12 + 8));
  if (*a2)
    v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v14 = &stru_1E351F1B8;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = *a4;
  *a4 = 0;
  v17 = v20;
  v20 = 0;
  v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v18 = MEMORY[0x1E0C809A0];
  v18[1] = 50331650;
  v18[2] = WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke;
  v18[3] = &WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::descriptor;
  v18[4] = v16;
  v18[5] = v17;
  -[WebKit::CompletionHandlerCallChecker _webView:queryPermission:forOrigin:completionHandler:](v11, "_webView:queryPermission:forOrigin:completionHandler:", v13, v14, v15, v18);
  _Block_release(v18);
  if (v13)
    CFRelease(v13);
}

void sub_19721652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  const void *v10;
  const void *v11;

  _Block_release(v11);
  if (v10)
    CFRelease(v10);
  if (a10)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a10);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>::operator()(uint64_t *a1, unsigned __int16 a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197216604(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UIDelegate::UIClient::didEnableInspectorBrowserDomain(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x80000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          CFRelease(WeakRetained);
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewDidEnableInspectorBrowserDomain:", v8);
          if (v8)
            CFRelease(v8);
        }
      }
    }
  }
}

void sub_1972166B0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::didDisableInspectorBrowserDomain(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x100000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          CFRelease(WeakRetained);
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewDidDisableInspectorBrowserDomain:", v8);
          if (v8)
            CFRelease(v8);
        }
      }
    }
  }
}

void sub_197216758(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::updateAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (((*(unsigned int *)(v6 + 24) | ((unint64_t)(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) << 32)) & 0x800000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          v11 = WeakRetained;
          CFRelease(WeakRetained);
          if (a5)
            v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
          else
            v12 = 0;
          API::SecurityOrigin::create(&v16);
          v13 = *(_QWORD *)(a1 + 16);
          if (v13)
            v13 = *(_QWORD *)(v13 + 8);
          v14 = objc_loadWeakRetained((id *)(v13 + 8));
          objc_msgSend(v11, "_webView:updatedAppBadge:fromSecurityOrigin:", v14, v12, *(_QWORD *)(v16 + 8));
          if (v14)
            CFRelease(v14);
          v15 = v16;
          v16 = 0;
          if (v15)
            CFRelease(*(CFTypeRef *)(v15 + 8));
        }
      }
    }
  }
}

void sub_19721686C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::updateClientBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (((*(unsigned int *)(v6 + 24) | ((unint64_t)(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) << 32)) & 0x1000000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v6 + 16));
        if (WeakRetained)
        {
          v11 = WeakRetained;
          CFRelease(WeakRetained);
          if (a5)
            v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
          else
            v12 = 0;
          API::SecurityOrigin::create(&v16);
          v13 = *(_QWORD *)(a1 + 16);
          if (v13)
            v13 = *(_QWORD *)(v13 + 8);
          v14 = objc_loadWeakRetained((id *)(v13 + 8));
          objc_msgSend(v11, "_webView:updatedClientBadge:fromSecurityOrigin:", v14, v12, *(_QWORD *)(v16 + 8));
          if (v14)
            CFRelease(v14);
          v15 = v16;
          v16 = 0;
          if (v15)
            CFRelease(*(CFTypeRef *)(v15 + 8));
        }
      }
    }
  }
}

void sub_19721699C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (((*(unsigned int *)(v4 + 24) | ((unint64_t)(*(unsigned __int16 *)(v4 + 28) | (*(unsigned __int8 *)(v4 + 30) << 16)) << 32)) & 0x2000000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 16));
        if (WeakRetained)
        {
          v8 = WeakRetained;
          CFRelease(WeakRetained);
          WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, (uint64_t *)&cf);
          v9 = *(_QWORD *)(a1 + 16);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8);
          v10 = objc_loadWeakRetained((id *)(v9 + 8));
          objc_msgSend(v8, "_webView:didAdjustVisibilityWithSelectors:", v10, cf);
          if (v10)
            CFRelease(v10);
          v11 = cf;
          cf = 0;
          if (v11)
            CFRelease(v11);
        }
      }
    }
  }
}

void sub_197216A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::recentlyAccessedGamepadsForTesting(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x4000000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          CFRelease(WeakRetained);
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewRecentlyAccessedGamepadsForTesting:", v8);
          if (v8)
            CFRelease(v8);
        }
      }
    }
  }
}

void sub_197216B4C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::UIDelegate::UIClient::stoppedAccessingGamepadsForTesting(WebKit::UIDelegate::UIClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (((*(unsigned int *)(v3 + 24) | ((unint64_t)(*(unsigned __int16 *)(v3 + 28) | (*(unsigned __int8 *)(v3 + 30) << 16)) << 32)) & 0x8000000000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v3 + 16));
        if (WeakRetained)
        {
          v6 = WeakRetained;
          CFRelease(WeakRetained);
          v7 = *((_QWORD *)this + 2);
          if (v7)
            v7 = *(_QWORD *)(v7 + 8);
          v8 = objc_loadWeakRetained((id *)(v7 + 8));
          objc_msgSend(v6, "_webViewStoppedAccessingGamepadsForTesting:", v8);
          if (v8)
            CFRelease(v8);
        }
      }
    }
  }
}

void sub_197216BF4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t API::UIClient::focusFromServiceWorker(API::UIClient *this, WebKit::WebPageProxy *a2)
{
  return 0;
}

uint64_t API::UIClient::toolbarsAreVisible(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 1);
}

uint64_t API::UIClient::menuBarIsVisible(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 1);
}

uint64_t API::UIClient::statusBarIsVisible(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, 1);
}

uint64_t API::UIClient::windowFrame(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, float, float, float, float))(*(_QWORD *)*a3 + 16))(*a3, 0.0, 0.0, 0.0, 0.0);
}

uint64_t API::UIClient::runOpenPanel()
{
  return 0;
}

float API::UIClient::headerHeight()
{
  return 0.0;
}

float API::UIClient::footerHeight()
{
  return 0.0;
}

void API::UIClient::configurationForLocalInspector(WebKit **a1@<X8>)
{
  WebKit *v5;

  v5 = (WebKit *)API::Object::newObject(0x28uLL, 72);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)v5 = &off_1E34C2CB8;
  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *a1 = v5;
}

id *std::unique_ptr<WebKit::ProcessStateMonitor>::reset[abi:sn180100](id **a1, id *a2)
{
  id *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ProcessStateMonitor::~ProcessStateMonitor(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

void sub_197216DD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C9568[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34C9580[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<0ul,WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BEWebContentProcess>>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BENetworkingProcess>>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<BERenderingProcess>,WTF::RetainPtr<BERenderingProcess>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<0ul,WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BEWebContentProcess>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E34C9568[v5])(&v9, a1);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 0;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BENetworkingProcess>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E34C9568[v5])(&v9, a1);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 1;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<BERenderingProcess>,WTF::RetainPtr<BERenderingProcess>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E34C9568[v5])(&v9, a1);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 2;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void WebKit::addLinkAndReplace(WebKit *this, NSMutableAttributedString *a2, NSString *a3, NSString *a4, NSURL *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", a3);
  v12[0] = _MergedGlobals_31[0]();
  v13[0] = a4;
  v12[1] = off_1ECE6C568[0]();
  v13[1] = &unk_1E356FD30;
  objc_msgSend(v9, "addAttributes:range:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2), 0, -[NSString length](a3, "length"));
  v10 = objc_msgSend((id)-[WebKit string](this, "string"), "rangeOfString:", a2);
  -[WebKit replaceCharactersInRange:withAttributedString:](this, "replaceCharactersInRange:withAttributedString:", v10, v11, v9);
  if (v9)
    CFRelease(v9);
}

void sub_19721713C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t initNSLinkAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3417A4 == 1)
  {
    v0 = (void *)qword_1EE3417E8;
  }
  else
  {
    v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke();
    qword_1EE3417E8 = (uint64_t)v0;
    byte_1EE3417A4 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSLinkAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1972171C4);
  }
  result = *v1;
  qword_1EE3417E0 = result;
  _MergedGlobals_31[0] = NSLinkAttributeNameFunction;
  return result;
}

uint64_t NSLinkAttributeNameFunction(void)
{
  return qword_1EE3417E0;
}

uint64_t ___ZL19UIFoundationLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
  if (!result)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t initNSUnderlineStyleAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3417A4 == 1)
  {
    v0 = (void *)qword_1EE3417E8;
  }
  else
  {
    v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke();
    qword_1EE3417E8 = (uint64_t)v0;
    byte_1EE3417A4 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSUnderlineStyleAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1972172A4);
  }
  result = *v1;
  qword_1EE3417F0 = result;
  off_1ECE6C568[0] = NSUnderlineStyleAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE341A56 == 1)
  {
    v0 = (void *)qword_1EE341AA8;
  }
  else
  {
    v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1EE341AA8 = (uint64_t)v0;
    byte_1EE341A56 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSUnderlineStyleAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x197865A68);
  }
  result = *v1;
  qword_1EE341AB8 = result;
  off_1ECE70DE0 = NSUnderlineStyleAttributeNameFunction;
  return result;
}

uint64_t NSUnderlineStyleAttributeNameFunction(void)
{
  return qword_1EE3417F0;
}

{
  return qword_1EE341AB8;
}

Class initARQuickLookWebKitItem(void)
{
  Class result;
  void *v1;

  if ((byte_1EE3417A5 & 1) == 0)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x197217330);
    }
    unk_1EE341800 = v1;
    byte_1EE3417A5 = 1;
  }
  result = objc_getClass("ARQuickLookWebKitItem");
  qword_1EE3417F8 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getARQuickLookWebKitItemClass = ARQuickLookWebKitItemFunction;
  return result;
}

uint64_t ARQuickLookWebKitItemFunction(void)
{
  return qword_1EE3417F8;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = *(const void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E34C9598[v8])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  id v21;
  uint64_t v22;
  const void *v23;
  _WKPreviewControllerDelegate *v24;
  const void *v25;
  _WKPreviewControllerDataSource *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  const void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  CFTypeRef v34;
  _QWORD *v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  uint64_t v40;
  CFTypeRef cf;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v3 = *(_QWORD *)(a1 + 72)) == 0 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v33 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    return;
  }
  v5 = qword_1ECE71938;
  if (os_log_type_enabled((os_log_t)qword_1ECE71938, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(v4 + 96);
    *(_DWORD *)buf = 134217984;
    v40 = v6;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "SystemPreview began on %lld", buf, 0xCu);
  }
  v7 = (WTF::StringImpl **)(a1 + 80);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const WTF::URL *)(a1 + 80), 0);
  cf = 0;
  v8 = *(_QWORD *)(v4 + 16);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v36, a1 + 40);
  BYTE8(v38) = 1;
  v9 = *(unsigned int **)(a1 + 72);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C95D8;
  v12[1] = v9;
  v12[2] = v11;
  v35 = v12;
  WebKit::WebPageProxy::dataTaskWithRequest(v8, (WebCore::ResourceRequestBase *)buf, (uint64_t)&v36, 0, (uint64_t *)&v35);
  v13 = (uint64_t)v35;
  v35 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (BYTE8(v38) && (_DWORD)v38 != -1)
    ((void (*)(_QWORD **, WTF::StringImpl **))off_1E34C9598[v38])(&v35, &v36);
  WTF::String::operator=((WTF::StringImpl **)(v4 + 144), (WTF::StringImpl *)(a1 + 80));
  v14 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 152) = v14;
  WTF::URL::fragmentIdentifier((WTF::URL *)(a1 + 80));
  if ((v15 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v17 = v36;
  v36 = 0;
  v18 = *(WTF::StringImpl **)(v4 + 224);
  *(_QWORD *)(v4 + 224) = v17;
  if (v18)
  {
    v19 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 != 2)
    {
LABEL_19:
      *(_DWORD *)v18 = v19;
      goto LABEL_20;
    }
    WTF::StringImpl::destroy(v18, v16);
    v18 = v36;
    v36 = 0;
    if (v18)
    {
      v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v20);
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  v21 = objc_alloc((Class)((uint64_t (*)(WTF::StringImpl *))*MEMORY[0x1E0DCE090])(v18));
  v22 = objc_msgSend(v21, "init", v35);
  v23 = *(const void **)(v4 + 232);
  *(_QWORD *)(v4 + 232) = v22;
  if (v23)
    CFRelease(v23);
  v24 = -[_WKPreviewControllerDelegate initWithSystemPreviewController:]([_WKPreviewControllerDelegate alloc], "initWithSystemPreviewController:", v4);
  v25 = *(const void **)(v4 + 240);
  *(_QWORD *)(v4 + 240) = v24;
  if (v25)
  {
    CFRelease(v25);
    v24 = *(_WKPreviewControllerDelegate **)(v4 + 240);
  }
  objc_msgSend(*(id *)(v4 + 232), "setDelegate:", v24);
  v26 = [_WKPreviewControllerDataSource alloc];
  v27 = *v7;
  if (*v7)
    *(_DWORD *)v27 += 2;
  v36 = v27;
  v28 = *(_OWORD *)(a1 + 104);
  v37 = *(_OWORD *)(a1 + 88);
  v38 = v28;
  v30 = -[_WKPreviewControllerDataSource initWithSystemPreviewController:MIMEType:originatingPageURL:](v26, "initWithSystemPreviewController:MIMEType:originatingPageURL:", v4, CFSTR("model/vnd.usdz+zip"), &v36);
  v31 = *(const void **)(v4 + 248);
  *(_QWORD *)(v4 + 248) = v30;
  if (v31)
    CFRelease(v31);
  v32 = v36;
  v36 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  objc_msgSend(*(id *)(v4 + 232), "setDataSource:", *(_QWORD *)(v4 + 248));
  objc_msgSend(*(id *)(a1 + 120), "presentViewController:animated:completion:", *(_QWORD *)(v4 + 232), 1, 0);
  *(_BYTE *)(v4 + 8) = 0;
  v34 = cf;
  cf = 0;
  if (v34)
    CFRelease(v34);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
}

void sub_1972177F8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,CFTypeRef cf)
{
  CFTypeRef v44;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v44 = cf;
  cf = 0;
  if (v44)
    CFRelease(v44);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a17);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(BOOL)::{lambda(WTF::Ref<API::DataTask,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>> &&)#1},void,API&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C95D8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(BOOL)::{lambda(WTF::Ref<API::DataTask,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>> &&)#1},void,API&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C95D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()(BOOL)::{lambda(WTF::Ref<API::DataTask,WTF::RawPtrTraits<API>,WTF::DefaultRefDerefTraits<API>> &&)#1},void,API&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _WKSystemPreviewDataTaskDelegate *v7;
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  WebKit::ProcessThrottlerActivity *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(void **)(a2 + 8);
    v7 = -[_WKSystemPreviewDataTaskDelegate initWithSystemPreviewController:]([_WKSystemPreviewDataTaskDelegate alloc], "initWithSystemPreviewController:", v5);
    v8 = *(const void **)(v5 + 256);
    *(_QWORD *)(v5 + 256) = v7;
    if (v8)
    {
      CFRelease(v8);
      v7 = *(_WKSystemPreviewDataTaskDelegate **)(v5 + 256);
    }
    objc_msgSend(v6, "setDelegate:", v7);
    v9 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 134217984;
      v14 = v5;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - UIProcess is taking a background assertion because it is downloading a system preview", (uint8_t *)&v13, 0xCu);
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 208);
    v11 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v11, v10 + 200, "System preview download", 24, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v5 + 264), v11);
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  CFRelease(*(CFTypeRef *)(a2 + 8));
}

void sub_197217B60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int *v4;
  uint64_t result;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = (const void *)a1[6];
  a1[6] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  result = a1[4];
  a1[4] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0>(WebKit::UIDelegate::UIClient::createNewPage(WebKit::WebPageProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&,WebCore::WindowFeatures &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebCore::WindowFeatures &>,WTF::DefaultRefDerefTraits<WebCore::WindowFeatures &>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40)))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (!a2)
    {
      v13 = 0;
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v13);
LABEL_14:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v13;
      v13 = 0;
      if (v12)
        CFRelease(*(CFTypeRef *)(v12 + 8));
      return;
    }
    v4 = objc_msgSend(*(id *)(a2 + 416), "_relatedWebView");
    v5 = (_QWORD *)MEMORY[0x1E0C99768];
    if (v4 != *(_QWORD *)(a1 + 48))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Returned WKWebView was not created with the given configuration."));
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 416) + 152);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 16);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v9 = *(_QWORD *)(a1 + 56);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
      if (v9 == v6)
        goto LABEL_10;
    }
    else if (!*(_QWORD *)(a1 + 56))
    {
      goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *v5, CFSTR("Returned WKWebView was not created with the given configuration."));
LABEL_10:
    v10 = *(_QWORD *)(a2 + 424);
    if (v10)
      CFRetain(*(CFTypeRef *)(v10 + 8));
    v13 = v10;
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, &v13);
    goto LABEL_14;
  }
}

void sub_197217D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptAlert(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptConfirm(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::UIDelegate::UIClient::runJavaScriptPrompt(WebKit::WebPageProxy &,WTF::String const&,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    MEMORY[0x19AEABCC8](&v6, a2);
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v6);
    result = (uint64_t)v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  }
  return result;
}

void sub_197217F90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  }
  return result;
}

void sub_197218078(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::UIDelegate::UIClient::requestStorageAccessConfirm(WebKit::WebPageProxy &,WebKit::WebFrameProxy *,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  }
  return result;
}

void sub_19721814C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  v3 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v6);
  v7 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E34C9598[v7])(&v9, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebPageProxy *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 72));
  if ((result & 1) != 0)
    return result;
  v5 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(*(_QWORD *)(a1 + 72) + 24) = 1;
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || a2 == 2)
  {
    v9 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 16);
    return v9();
  }
  if (a2 == 1)
  {
    v9 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 16);
    return v9();
  }
  if (!a2)
  {
    v7 = (WebKit::WebPageProxy *)(v6 - 16);
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    v10 = v8;
    WebKit::alertForPermission(v7, (const __CFString *)4, (WebKit *)(a1 + 40), &v10);
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1972182E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForGeolocationPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WTF::Function<void ()(BOOL)> &)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::runBeforeUnloadConfirmPanel(WebKit::WebPageProxy &,WTF::String const&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_0)::{lambda(void *,unsigned long long)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1>(WebKit::UIDelegate::UIClient::exceededDatabaseQuota(WebKit::WebPageProxy *,WebKit::WebFrameProxy *,API::SecurityOrigin *,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::Function<void ()(unsigned long long)> &&)::$_1)::{lambda(void *,unsigned long long)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy &,API::SecurityOrigin &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197218630(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestCookieConsent(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    if (a2)
      v6 = 1;
    else
      v6 = 2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197218710(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  v3 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v6);
  v7 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E34C9598[v7])(&v9, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::shouldAllowDeviceOrientationAndMotionAccess(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 72)))
  {
    v4 = (uint64_t *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 80);
    *(_BYTE *)(*(_QWORD *)(a1 + 72) + 24) = 1;
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && a2 != 2)
    {
      if (a2 != 1)
      {
        if (!a2)
          WebKit::alertForPermission((WebKit::WebPageProxy *)(v6 - 16), (const __CFString *)3, (WebKit *)(a1 + 40), v4);
        return;
      }
      v7 = *v4;
      *v4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 1);
    }
    else
    {
      v7 = *v4;
      *v4 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void sub_1972188BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(WKDisplayCapturePermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKDisplayCapturePermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C97E0;
    v6[1] = v5;
    v6[2] = a2;
    v7 = v6;
    WTF::ensureOnMainRunLoop();
    result = (uint64_t)v7;
    if (v7)
      return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_1972189B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKDisplayCapturePermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C97E0;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKDisplayCapturePermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C97E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::callDisplayCapturePermissionDelegate(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKDisplayCapturePermissionDecision)::{lambda(void)#1},void>::call(WebKit::UserMediaPermissionRequestManagerProxy *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 2);
  switch(v1)
  {
    case 0:
      return WebKit::UserMediaPermissionRequestProxy::deny(*((_QWORD **)result + 1), 5);
    case 2:
      return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)result + 1) + 24))(*((_QWORD *)result + 1), 0);
    case 1:
      return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 1) + 24))(*((_QWORD *)result + 1), 1);
  }
  return result;
}

void WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C9828;
    v6[1] = v5;
    v6[2] = a2;
    v7 = v6;
    WTF::ensureOnMainRunLoop();
    result = (uint64_t)v7;
    if (v7)
      return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_197218B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKPermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C9828;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKPermissionDecision)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(WKPermissionDecision)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  int v11;
  WTF::StringImpl *v12;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  if (v2 == 2)
    return WebKit::UserMediaPermissionRequestProxy::deny(*((_QWORD **)result + 1), 5);
  if (v2 != 1)
  {
    if (!v2)
      return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(*((WebKit::UserMediaPermissionRequestProxy **)result
                                                                            + 1));
    return result;
  }
  v3 = *((_QWORD *)result + 1);
  if (*(unsigned __int8 *)(v3 + 112) - 1 >= 2 && *(_DWORD *)(v3 + 92))
  {
    WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs(v3, (uint64_t)&v10);
    if (!v11)
      goto LABEL_28;
    v5 = *v10;
    if (*v10)
      *(_DWORD *)v5 += 2;
    v12 = v5;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    v3 = *((_QWORD *)v1 + 1);
  }
  else
  {
    v12 = 0;
  }
  if (*(_DWORD *)(v3 + 108))
  {
    WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs(v3, (uint64_t)&v10);
    if (v11)
    {
      v7 = *v10;
      if (*v10)
        *(_DWORD *)v7 += 2;
      v9 = v7;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
      v3 = *((_QWORD *)v1 + 1);
      goto LABEL_19;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197218D8CLL);
  }
  v9 = 0;
LABEL_19:
  WebKit::UserMediaPermissionRequestProxy::allow((WebKit::UserMediaPermissionRequestProxy *)v3, &v9, (const WTF::String *)&v12);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1>(WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_1)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  WebKit::UserMediaPermissionRequestManagerProxy *result;
  uint64_t v5;
  void *v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  int v13;
  WTF::StringImpl *v14;

  result = (WebKit::UserMediaPermissionRequestManagerProxy *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) != 0)
    return result;
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
  if ((a2 & 1) == 0)
    return WebKit::UserMediaPermissionRequestProxy::deny(*(_QWORD **)(a1 + 32), 5);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v5 + 112) - 1 >= 2 && *(_DWORD *)(v5 + 92))
  {
    WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs(v5, (uint64_t)&v12);
    if (!v13)
      goto LABEL_26;
    v7 = *v12;
    if (*v12)
      *(_DWORD *)v7 += 2;
    v14 = v7;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v6);
    v5 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v14 = 0;
  }
  if (*(_DWORD *)(v5 + 108))
  {
    WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs(v5, (uint64_t)&v12);
    if (v13)
    {
      v9 = *v12;
      if (*v12)
        *(_DWORD *)v9 += 2;
      v11 = v9;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v8);
      v5 = *(_QWORD *)(a1 + 32);
      goto LABEL_17;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197218F30);
  }
  v11 = 0;
LABEL_17:
  WebKit::UserMediaPermissionRequestProxy::allow((WebKit::UserMediaPermissionRequestProxy *)v5, &v11, (const WTF::String *)&v14);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      return (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  return result;
}

void WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    v6 = *(_QWORD *)(v5 + 32);
    if (v6)
    {
      if (a2)
        v7 = 2;
      else
        v7 = 1;
      *(_QWORD *)(v5 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return result;
}

void WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(NSString *,BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1>(WebKit::UIDelegate::UIClient::checkUserMediaPermissionForOrigin(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionCheckProxy &)::$_1)::{lambda(void *,NSString *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    v7 = *(_QWORD *)(v6 + 32);
    if (v7)
    {
      if (a3)
        v8 = 2;
      else
        v8 = 1;
      *(_QWORD *)(v6 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::UIDelegate::UIClient::printFrame(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    v3 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

void sub_197219160(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::confirmPDFOpening(WebKit::WebPageProxy &,WTF::URL const&,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_19721923C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationPanelResult)>::fromCallable<WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0>(WebKit::UIDelegate::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::$_0)::{lambda(void *,_WKWebAuthenticationPanelResult)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (a2 == 2)
      v6 = 2;
    else
      v6 = a2 == 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197219328(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::UIDelegate::UIClient::requestWebAuthenticationConditonalMediationRegistration(WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197219404(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKPermissionDecision)>::fromCallable<WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::UIDelegate::UIClient::queryPermission(WTF::String const&,API::SecurityOrigin &,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)::{lambda(void *,WKPermissionDecision)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (a2 <= 2)
      return WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>::operator()((uint64_t *)(a1 + 32), qword_1978D00E8[a2]);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::rehash(a1, v8);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::ProcessAndUIAssertion,WTF::RawPtrTraits<WebKit::ProcessAndUIAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAndUIAssertion>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), a2);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_197219854(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197219918(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C9A40;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9A40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1,void>::call(uint64_t a1)
{
  WTF::ThreadSafeWeakPtrControlBlock *v2;
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v2 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v2)
    v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v2);
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E34C9A68;
  *(_QWORD *)(v5 + 8) = v3;
  *(_QWORD *)(v5 + 16) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  v8 = v5;
  WTF::RunLoop::dispatch();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_197219A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C9A68;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9A68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_1::operator() const(void)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  WTF::Lock *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::Lock *)a1[1];
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v2, a1[2]);
    v3 = v8;
  }
  else
  {
    v3 = 0;
  }
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[3];
    if (v3)
      v6 = *(_DWORD *)(v3 + 20);
    else
      v6 = 0;
    *(_DWORD *)buf = 134218498;
    v10 = v3;
    v11 = 2082;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion() RBS %{public}s assertion for process with PID=%d will be invalidated", buf, 0x1Cu);
  }
  if (v3)
  {
    WebKit::ProcessAssertion::processAssertionWillBeInvalidated((WebKit::ProcessAssertion *)v3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), v7);
  }
}

void sub_197219BE8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C9A90;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9A90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0,void>::call(uint64_t a1)
{
  WTF::ThreadSafeWeakPtrControlBlock *v2;
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v2 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v2)
    v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v2);
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = &off_1E34C9AB8;
  *(_QWORD *)(v5 + 8) = v3;
  *(_QWORD *)(v5 + 16) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  v8 = v5;
  WTF::RunLoop::dispatch();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_197219D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C9AB8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9AB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::ProcessAssertion(WebKit::AuxiliaryProcessProxy &,WTF::String const&,WebKit::ProcessAssertionType)::$_0::operator() const(void)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  WTF::Lock *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::Lock *)a1[1];
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v2, a1[2]);
    v3 = v8;
  }
  else
  {
    v3 = 0;
  }
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[3];
    if (v3)
      v6 = *(_DWORD *)(v3 + 20);
    else
      v6 = 0;
    *(_DWORD *)buf = 134218498;
    v10 = v3;
    v11 = 2082;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - ProcessAssertion: RBS %{public}s assertion for process with PID=%d was invalidated", buf, 0x1Cu);
  }
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), v7);
  }
}

void sub_197219EC8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C9AE0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C9AE0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::RunLoop *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  WebKit::ProcessAssertion::acquireSync(*(WebKit::ProcessAssertion **)(a1 + 8));
  WTF::RunLoop::main(v2);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34C9B08;
  v5[1] = v4;
  v5[2] = v3;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_19721A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34C9B08;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C9B08;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireAsync(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    *(_QWORD *)(result + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

void sub_19721A160(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireSync(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34C9B30;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireSync(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9B30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::ProcessAssertion::acquireSync(void)::$_0,void>::call(unsigned __int8 *result)
{
  WTF::Lock *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = (WTF::Lock *)*((_QWORD *)result + 1);
  if (v1)
  {
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v4, v1, *((_QWORD *)result + 2));
    v2 = v4;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), v3);
    }
  }
  return result;
}

void sub_19721A24C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E34C9B58;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34C9B58;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SystemPreviewController::begin(WTF::URL const&,WebCore::SecurityOriginData const&,WebCore::SystemPreviewInfo const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 8), 1, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C9B80;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9B80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_2,void>::call(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 8);
  if (v1[112] - 1 > 1)
    return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia((WebKit::UserMediaPermissionRequestProxy *)v1);
  else
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v1 + 24))(v1, 2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_3,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C9BA8;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9BA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_3,void>::call(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 8);
  if (v1[112] - 1 > 1)
    return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia((WebKit::UserMediaPermissionRequestProxy *)v1);
  else
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v1 + 24))(v1, 2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_4,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C9BD0;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9BD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UIDelegate::UIClient::decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::SecurityOrigin &,API::SecurityOrigin &,WebKit::UserMediaPermissionRequestProxy &)::$_4,void>::call(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 8);
  if (v1[112] - 1 > 1)
    return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia((WebKit::UserMediaPermissionRequestProxy *)v1);
  else
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v1 + 24))(v1, 2);
}

void WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::encode(unsigned int *a1)
{
  uint64_t v2;
  const __CFData *v3;
  size_t Length;
  UInt8 *BytePtr;
  char v6;
  char __src;
  size_t v8;

  v2 = SecTrustSerialize();
  if (v2)
  {
    v3 = (const __CFData *)v2;
    __src = 1;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
    Length = CFDataGetLength(v3);
    v8 = Length;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v8, 8uLL);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v3);
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, BytePtr, Length);
    CFRelease(v3);
  }
  else
  {
    v6 = 0;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v6, 1uLL);
  }
}

void WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFDataRef v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 != v4)
  {
    v5 = *a1;
    v6 = *(unsigned __int8 *)(*a1 + v4);
    v7 = v4 + 1;
    a1[2] = v4 + 1;
    if (!v6)
    {
      *(_QWORD *)a2 = 0;
      goto LABEL_9;
    }
    if ((unint64_t)(v3 - v7) > 7)
    {
      v8 = *(_QWORD *)(v5 + v7);
      v9 = v4 + 9;
      a1[2] = v9;
      if (v3 - v9 >= v8)
      {
        a1[2] = v8 + v9;
        v10 = CFDataCreate(0, (const UInt8 *)(v5 + v9), v8);
        v11 = SecTrustDeserialize();
        v12 = v11;
        if (v10)
        {
          CFRelease(v10);
          if (v12)
            goto LABEL_7;
        }
        else if (v11)
        {
LABEL_7:
          *(_QWORD *)a2 = v12;
LABEL_9:
          *(_BYTE *)(a2 + 8) = 1;
          return;
        }
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
}

unsigned int *WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::encode(unsigned int *a1, uint64_t a2)
{
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9[2];
  __int128 v10;

  LOBYTE(v9[0]) = *(_BYTE *)a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v9, 1uLL);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)(a2 + 8));
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)(a2 + 16));
  v9[0] = *(WTF::StringImpl **)(a2 + 24);
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v9, 8uLL);
  LOBYTE(v9[0]) = *(_BYTE *)(a2 + 32);
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v9, 1uLL);
  *(_OWORD *)v9 = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<WebKit::Daemon::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)v9);
  IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(a1, (char *)(a2 + 56));
  v4 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)v9 = *(_OWORD *)(a2 + 192);
  v10 = v4;
  IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(a1, (uint64_t *)v9);
  IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(a1, (uint64_t *)&v10);
  LOBYTE(v9[0]) = 0;
  LOBYTE(v9[1]) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    v5 = *(WTF::StringImpl **)(a2 + 224);
    if (v5)
      *(_DWORD *)v5 += 2;
    v9[0] = v5;
    LOBYTE(v9[1]) = 1;
  }
  IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)v9);
  if (LOBYTE(v9[1]))
  {
    v7 = v9[0];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)(a2 + 304));
}

void WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::decode(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int16 v6;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 **v14;
  char v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 **v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  _BYTE v56[24];
  _OWORD v57[2];
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  char v73;
  WTF::StringImpl *v74;
  char v75;
  char v76;
  WTF::StringImpl *v77[16];
  char v78;
  char v79;
  __int128 v80;
  char v81;
  __int16 v82;
  uint64_t v83;
  char v84;
  WTF::StringImpl *v85;
  unsigned __int8 v86;
  WTF::StringImpl *v87;
  unsigned __int8 v88;
  __int16 v89;
  __int128 v90;
  char v91;
  uint64_t v92;
  char v93;
  char v94;

  v4 = a1[2];
  if (a1[1] == v4)
    goto LABEL_32;
  v6 = *(unsigned __int8 *)(*a1 + v4);
  a1[2] = v4 + 1;
  v89 = v6 | 0x100;
  LOBYTE(v87) = 0;
  v88 = 0;
  v56[0] = 0;
  v56[8] = 0;
  WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(a1, (WTF::StringImpl **)v56, a2);
  v9 = v56[8];
  if (v56[8])
    v10 = *(WTF::StringImpl **)v56;
  else
    v10 = 0;
  if (v88 == v56[8])
  {
    if (v88)
    {
      v11 = v87;
      v87 = v10;
      if (!v11)
        goto LABEL_23;
      if (*(_DWORD *)v11 != 2)
      {
        *(_DWORD *)v11 -= 2;
        goto LABEL_23;
      }
LABEL_22:
      WTF::StringImpl::destroy(v11, v7);
      goto LABEL_23;
    }
  }
  else
  {
    if (!v88)
    {
      v87 = v10;
      v88 = 1;
      goto LABEL_24;
    }
    v12 = v87;
    v87 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v88 = 0;
  }
  if (v9 && v10)
  {
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 -= 2;
      goto LABEL_23;
    }
    v11 = v10;
    goto LABEL_22;
  }
LABEL_23:
  if (!v88)
  {
LABEL_32:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 312) = 0;
    return;
  }
LABEL_24:
  LOBYTE(v85) = 0;
  v86 = 0;
  v56[0] = 0;
  v56[8] = 0;
  WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(a1, (WTF::StringImpl **)v56, v8);
  v16 = v56[8];
  if (v56[8])
    v17 = *(WTF::StringImpl **)v56;
  else
    v17 = 0;
  if (v86 == v56[8])
  {
    if (v86)
    {
      v18 = v85;
      v85 = v17;
      if (!v18)
        goto LABEL_47;
      if (*(_DWORD *)v18 != 2)
      {
        *(_DWORD *)v18 -= 2;
        goto LABEL_47;
      }
LABEL_46:
      WTF::StringImpl::destroy(v18, v13);
      goto LABEL_47;
    }
  }
  else
  {
    if (!v86)
    {
      v85 = v17;
      v86 = 1;
      goto LABEL_48;
    }
    v19 = v85;
    v85 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    v86 = 0;
  }
  if (v16 && v17)
  {
    if (*(_DWORD *)v17 != 2)
    {
      *(_DWORD *)v17 -= 2;
      goto LABEL_47;
    }
    v18 = v17;
    goto LABEL_46;
  }
LABEL_47:
  if (!v86)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 312) = 0;
    goto LABEL_65;
  }
LABEL_48:
  v20 = a1[1];
  v21 = a1[2];
  if ((unint64_t)(v20 - v21) <= 7)
    goto LABEL_60;
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + v21);
  a1[2] = v21 + 8;
  v83 = v23;
  v84 = 1;
  if (v20 == v21 + 8)
    goto LABEL_60;
  v24 = *(unsigned __int8 *)(v22 + v21 + 8);
  a1[2] = v21 + 9;
  v82 = v24 | 0x100;
  if (v20 == v21 + 9)
  {
    v25 = 0;
    LOBYTE(v26) = 0;
    v27 = 0;
    v28 = 1;
    v29 = v20;
    goto LABEL_59;
  }
  v30 = *(unsigned __int8 *)(v22 + v21 + 9);
  v29 = v21 + 10;
  a1[2] = v21 + 10;
  if (!v30)
  {
    v25 = 0;
    LOBYTE(v26) = 0;
    v15 = 0;
    v28 = 0;
    goto LABEL_57;
  }
  if ((unint64_t)(v20 - v29) >= 8)
  {
    v28 = 0;
    v26 = *(_QWORD *)(v22 + v29);
    v29 = v21 + 18;
    a1[2] = v21 + 18;
    v25 = v26 & 0xFFFFFFFFFFFFFF00;
    v15 = 1;
LABEL_57:
    v27 = 1;
    goto LABEL_59;
  }
  v25 = 0;
  LOBYTE(v26) = 0;
  v27 = 0;
  v28 = 1;
LABEL_59:
  *(_QWORD *)&v80 = v26 | v25;
  BYTE8(v80) = v15;
  v81 = v27;
  if (v28)
  {
LABEL_60:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 312) = 0;
    goto LABEL_61;
  }
  LOBYTE(v77[0]) = 0;
  v79 = 0;
  if (v20 == v29)
  {
    v56[0] = 0;
    v60 = 0;
    goto LABEL_79;
  }
  v33 = *(unsigned __int8 *)(v22 + v29);
  a1[2] = v29 + 1;
  if (v33)
  {
    WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::decode(a1, v14, &v90);
    v34 = v94;
    if (!v94)
    {
      v56[0] = 0;
      goto LABEL_78;
    }
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::__optional_destruct_base[abi:sn180100]<WebCore::PCM::AttributionTriggerData>((uint64_t)v56, (uint64_t)&v90);
  }
  else
  {
    LOBYTE(v90) = 0;
    v94 = 0;
    v56[0] = 0;
    v59 = 0;
  }
  v34 = 1;
LABEL_78:
  v60 = v34;
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v13);
LABEL_79:
  if (v79 == v60)
  {
    if (!v79)
      goto LABEL_89;
    std::__optional_storage_base<WebCore::PCM::AttributionTriggerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::AttributionTriggerData,false>>(v77, (uint64_t)v56);
  }
  else if (v79)
  {
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77, v13);
    v79 = 0;
  }
  else
  {
    LOBYTE(v77[0]) = 0;
    v78 = 0;
    if (v59)
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v77, (uint64_t)v56);
      v78 = 1;
    }
    v79 = 1;
  }
  if (v60)
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v56, v13);
LABEL_89:
  if (!v79)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 312) = 0;
    goto LABEL_102;
  }
  v35 = a1[1];
  v36 = a1[2];
  if (v35 == v36)
    goto LABEL_100;
  v37 = *a1;
  LODWORD(v38) = *(unsigned __int8 *)(*a1 + v36);
  v39 = v36 + 1;
  a1[2] = v36 + 1;
  if ((_DWORD)v38)
  {
    if ((unint64_t)(v35 - v39) < 8)
      goto LABEL_100;
    v38 = *(_QWORD *)(v37 + v39);
    v39 = v36 + 9;
    a1[2] = v36 + 9;
    *(_QWORD *)v56 = v38;
    v56[8] = 1;
  }
  else
  {
    v56[8] = 0;
  }
  if (v35 == v39)
    goto LABEL_100;
  v40 = *(_QWORD *)&v56[1];
  v41 = *(unsigned __int8 *)(v37 + v39);
  v42 = v39 + 1;
  a1[2] = v39 + 1;
  if (v41)
  {
    if ((unint64_t)(v35 - v42) >= 8)
    {
      v43 = *(_QWORD *)(v37 + v42);
      a1[2] = v39 + 9;
      *(_QWORD *)v56 = v43;
      v56[8] = 1;
      goto LABEL_105;
    }
LABEL_100:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 312) = 0;
LABEL_101:
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77, v13);
    goto LABEL_102;
  }
  LOBYTE(v43) = 0;
  v56[8] = 0;
LABEL_105:
  LOBYTE(v90) = v38;
  *(_QWORD *)((char *)&v90 + 1) = v40;
  v91 = v43;
  v92 = *(_QWORD *)&v56[1];
  v93 = 1;
  LOBYTE(v74) = 0;
  v76 = 0;
  WebKit::Daemon::Decoder::operator>><std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)&v74, v14);
  if (v76)
  {
    LOBYTE(v72) = 0;
    v73 = 0;
    WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v72, v44);
    if (v73)
    {
      if (!HIBYTE(v89) || !v88 || !v86 || !v84 || !HIBYTE(v82) || !v81 || !v79 || !v93 || !v76)
      {
        __break(1u);
        return;
      }
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v56, &v89, (uint64_t *)&v87, (uint64_t *)&v85, &v83, &v82, &v80, (uint64_t)v77, &v90, (uint64_t *)&v74, (uint64_t *)&v72);
      *(_BYTE *)a3 = v56[0];
      v46 = *(_OWORD *)&v56[8];
      *(_OWORD *)&v56[8] = 0uLL;
      *(_OWORD *)(a3 + 8) = v46;
      *(_OWORD *)(a3 + 24) = v57[0];
      *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)v57 + 9);
      *(_BYTE *)(a3 + 56) = 0;
      *(_BYTE *)(a3 + 184) = 0;
      if (v61)
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(a3 + 56, (uint64_t)&v58);
        *(_BYTE *)(a3 + 184) = 1;
      }
      v47 = v63;
      *(_OWORD *)(a3 + 192) = v62;
      *(_OWORD *)(a3 + 208) = v47;
      *(_BYTE *)(a3 + 224) = 0;
      *(_BYTE *)(a3 + 232) = 0;
      if (v65)
      {
        v48 = v64;
        v64 = 0;
        *(_QWORD *)(a3 + 224) = v48;
        *(_BYTE *)(a3 + 232) = 1;
      }
      v49 = v66;
      v50 = v67;
      v66 = 0u;
      v67 = 0u;
      *(_OWORD *)(a3 + 240) = v49;
      *(_OWORD *)(a3 + 256) = v50;
      *(_BYTE *)(a3 + 272) = 0;
      *(_BYTE *)(a3 + 296) = 0;
      if (v70)
      {
        v51 = v68;
        v68 = 0uLL;
        *(_OWORD *)(a3 + 272) = v51;
        v52 = v69;
        v69 = 0;
        *(_QWORD *)(a3 + 288) = v52;
        *(_BYTE *)(a3 + 296) = 1;
      }
      v53 = v71;
      v71 = 0;
      *(_QWORD *)(a3 + 304) = v53;
      *(_BYTE *)(a3 + 312) = 1;
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v56, v45);
      if (v73)
      {
        v54 = v72;
        v72 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v13);
          else
            *(_DWORD *)v54 -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 312) = 0;
    }
    if (v76)
    {
      if (v75)
      {
        v55 = v74;
        v74 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v13);
          else
            *(_DWORD *)v55 -= 2;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 312) = 0;
  }
  if (v79)
    goto LABEL_101;
LABEL_102:
  if (v86)
  {
LABEL_61:
    v31 = v85;
    v85 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v13);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
LABEL_65:
  if (v88)
  {
    v32 = v87;
    v87 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v13);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::optional<WebCore::PCM::EphemeralNonce>>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  unsigned __int8 v13;
  char v14;

  v5 = a1[2];
  if (a1[1] == v5)
    goto LABEL_2;
  v8 = *(unsigned __int8 *)(*a1 + v5);
  a1[2] = v5 + 1;
  if (v8)
  {
    LOBYTE(v12) = 0;
    v13 = 0;
    WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v12, a3);
    LOBYTE(v5) = v13;
    if (!v13)
    {
LABEL_2:
      v6 = 0;
      v7 = 0;
      LOBYTE(v12) = 0;
      goto LABEL_8;
    }
    LOBYTE(v5) = 0;
    v6 = 1;
    v13 = 1;
  }
  else
  {
    v6 = 0;
    LOBYTE(v12) = 0;
    v13 = 0;
    LOBYTE(v5) = 1;
  }
  v7 = 1;
LABEL_8:
  v14 = v7;
  if (*(unsigned __int8 *)(a2 + 16) == v7)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)a2, (WTF::StringImpl *)&v12);
      v6 = v13;
      if (!v14)
        return a1;
      goto LABEL_15;
    }
LABEL_14:
    if (!v7)
      return a1;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a2, (WTF::StringImpl *)a2);
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_14;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if ((v5 & 1) == 0)
  {
    v10 = v12;
    v12 = 0;
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = 1;
  }
  *(_BYTE *)(a2 + 16) = 1;
  if (v7)
  {
LABEL_15:
    if (v6)
    {
      v9 = v12;
      v12 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  return a1;
}

unsigned int *WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::encode(unsigned int *a1, char *a2)
{
  char __src;
  char v6;
  char v7;

  __src = *a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
  v6 = a2[1];
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v6, 1uLL);
  v7 = a2[2];
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v7, 1uLL);
  IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)(a2 + 24));
  return IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(a1, (uint64_t)(a2 + 40));
}

uint64_t *WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::decode@<X0>(uint64_t *result@<X0>, unsigned __int8 **a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 **v10;
  WTF::StringImpl *v11;
  unsigned __int8 **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  char v24;
  _BYTE v25[40];
  _BYTE v26[32];
  WTF::StringImpl *v27;
  char v28;
  char v29;
  WTF::StringImpl *v30;
  char v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  char v35;

  v5 = result[1];
  v4 = result[2];
  if (v5 == v4)
    goto LABEL_19;
  v6 = *result;
  v7 = *(_BYTE *)(*result + v4);
  result[2] = v4 + 1;
  if (v5 == v4 + 1
    || (v8 = *(_BYTE *)(v6 + v4 + 1), result[2] = v4 + 2, v5 == v4 + 2)
    || (v9 = *(_BYTE *)(v6 + v4 + 2),
        result[2] = v4 + 3,
        LOBYTE(v33) = 0,
        v35 = 0,
        result = WebKit::Daemon::Decoder::operator>><std::optional<WebCore::RegistrableDomain>>(result, (uint64_t)&v33, a2), !v35))
  {
LABEL_19:
    *a3 = 0;
    a3[128] = 0;
  }
  else
  {
    LOBYTE(v30) = 0;
    v32 = 0;
    result = WebKit::Daemon::Decoder::operator>><std::optional<WebCore::PCM::EphemeralNonce>>(result, (uint64_t)&v30, v10);
    if (v32)
    {
      LOBYTE(v27) = 0;
      v29 = 0;
      result = WebKit::Daemon::Decoder::operator>><std::optional<WebCore::RegistrableDomain>>(result, (uint64_t)&v27, v12);
      if (v29)
      {
        v18[0] = v7;
        v18[1] = v8;
        v18[2] = v9;
        if (!v35)
          goto LABEL_52;
        LOBYTE(v19) = 0;
        v20 = 0;
        if (v34)
        {
          v13 = v33;
          v33 = 0;
          v19 = v13;
          v20 = 1;
        }
        if (!v32)
        {
LABEL_52:
          __break(1u);
          return result;
        }
        LOBYTE(v21) = 0;
        v22 = 0;
        if (v31)
        {
          v14 = v30;
          v30 = 0;
          v21 = v14;
          v22 = 1;
        }
        LOBYTE(v23) = 0;
        v24 = 0;
        if (v28)
        {
          v15 = v27;
          v27 = 0;
          v23 = v15;
          v24 = 1;
        }
        v25[0] = 0;
        v25[32] = 0;
        v26[0] = 0;
        v26[24] = 0;
        std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::__optional_destruct_base[abi:sn180100]<WebCore::PCM::AttributionTriggerData>((uint64_t)a3, (uint64_t)v18);
        std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v16);
        result = (uint64_t *)std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v17);
        if (v24)
        {
          result = (uint64_t *)v23;
          v23 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (v22)
        {
          result = (uint64_t *)v21;
          v21 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (v20)
        {
          result = (uint64_t *)v19;
          v19 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if (v29)
        {
          if (v28)
          {
            result = (uint64_t *)v27;
            v27 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
      }
      else
      {
        *a3 = 0;
        a3[128] = 0;
      }
      if (v32)
      {
        if (v31)
        {
          result = (uint64_t *)v30;
          v30 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[128] = 0;
    }
    if (v35)
    {
      if (v34)
      {
        result = (uint64_t *)v33;
        v33 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::optional<WebCore::RegistrableDomain>>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  unsigned __int8 v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;

  v5 = a1[2];
  if (a1[1] == v5)
  {
    v6 = 0;
    v7 = 0;
    LOBYTE(v12) = 0;
    v14 = 0;
  }
  else
  {
    v8 = *(unsigned __int8 *)(*a1 + v5);
    a1[2] = v5 + 1;
    if (v8)
    {
      WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode(a1, a3, (uint64_t)&v15);
      if (v16)
      {
        v12 = v15;
        v7 = 1;
        v13 = 1;
      }
      else
      {
        v7 = 0;
        LOBYTE(v12) = 0;
      }
      LOBYTE(v5) = 0;
      v14 = v7;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      LOBYTE(v12) = 0;
      v13 = 0;
      LOBYTE(v5) = 1;
      v14 = 1;
      v7 = 1;
    }
  }
  if (*(unsigned __int8 *)(a2 + 16) == v7)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)a2, (WTF::StringImpl *)&v12);
      v6 = v13;
      if (!v14)
        return a1;
      goto LABEL_16;
    }
LABEL_15:
    if (!v7)
      return a1;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a2, (WTF::StringImpl *)a2);
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_15;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if ((v5 & 1) == 0)
  {
    v10 = v12;
    v12 = 0;
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = 1;
  }
  *(_BYTE *)(a2 + 16) = 1;
  if (v7)
  {
LABEL_16:
    if (v6)
    {
      v9 = v12;
      v12 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned __int8 v8;

  LOBYTE(v7) = 0;
  v8 = 0;
  result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v7, a2);
  if (v8)
  {
    if (v7 && *((_DWORD *)v7 + 1))
    {
      *(_QWORD *)a3 = v7;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
      *(_BYTE *)(a3 + 8) = 1;
      if (v6)
      {
        result = v7;
        v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsClassifier::calculateResourcePrevalence(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v6;
  uint64_t v7;

  v6 = a2 | a5 | a3 | a4;
  if (!v6)
    return 1;
  if (sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 30.0)
    return 4;
  v7 = 2;
  if (a6 != 2 && v6 <= 3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      return 2;
    else
      return 1;
  }
  return v7;
}

BOOL WebKit::ResourceLoadStatisticsClassifierCocoa::classify(WebKit::ResourceLoadStatisticsClassifierCocoa *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _OWORD *v8;
  int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  _OWORD *v12;
  _OWORD *v13;
  int v14;
  _OWORD *v15;
  WTF::StringImpl *v16;
  double v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  __int128 v24;
  WTF::StringImpl *v25;
  uint64_t v26;

  if (!*((_BYTE *)this + 9))
  {
    if (!*((_BYTE *)this + 8))
      return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
    if (MEMORY[0x1E0D178D8])
    {
      *((_BYTE *)this + 8) = 0;
      return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
    }
    WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath((WebKit::ResourceLoadStatisticsClassifierCocoa *)&v25);
    if (v25 && *((_DWORD *)v25 + 1) && WebKit::ResourceLoadStatisticsClassifierCocoa::singletonPredictionModel(this))
    {
      v21 = 1;
      *((_BYTE *)this + 9) = 1;
    }
    else
    {
      v21 = 0;
      *((_BYTE *)this + 8) = 0;
    }
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if ((v21 & 1) != 0)
          goto LABEL_2;
        return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
      }
      *(_DWORD *)v22 -= 2;
    }
    if ((v21 & 1) != 0)
      goto LABEL_2;
    return sqrt((double)a3 * (double)a3 + (double)a2 * (double)a2 + (double)a4 * (double)a4) > 3.0;
  }
LABEL_2:
  v25 = 0;
  v26 = 0;
  if (a2)
  {
    LODWORD(v24) = 1;
    *((double *)&v24 + 1) = (double)a2;
    v8 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, 1uLL, (unint64_t)&v24);
    v9 = HIDWORD(v26);
    v10 = v25;
    *((_OWORD *)v25 + HIDWORD(v26)) = *v8;
    v11 = v9 + 1;
    HIDWORD(v26) = v11;
    if (!a3)
      goto LABEL_13;
LABEL_9:
    LODWORD(v24) = 2;
    *((double *)&v24 + 1) = (double)a3;
    if (v11 == (_DWORD)v26)
    {
      v12 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v11 + 1, (unint64_t)&v24);
      v11 = HIDWORD(v26);
      v10 = v25;
      *((_OWORD *)v25 + HIDWORD(v26)) = *v12;
    }
    else
    {
      *((_OWORD *)v10 + v11) = v24;
    }
    HIDWORD(v26) = ++v11;
    goto LABEL_13;
  }
  v10 = 0;
  v11 = 0;
  if (a3)
    goto LABEL_9;
LABEL_13:
  if (a4)
  {
    LODWORD(v24) = 3;
    *((double *)&v24 + 1) = (double)a4;
    if (v11 == (_DWORD)v26)
    {
      v13 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v11 + 1, (unint64_t)&v24);
      v14 = HIDWORD(v26);
      *((_OWORD *)v25 + HIDWORD(v26)) = *v13;
    }
    else
    {
      *((_OWORD *)v10 + v11) = v24;
      v14 = HIDWORD(v26);
    }
    v11 = v14 + 1;
    HIDWORD(v26) = v11;
  }
  LODWORD(v24) = -1;
  *((_QWORD *)&v24 + 1) = 0xBFF0000000000000;
  if (v11 == (_DWORD)v26)
  {
    v15 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v11 + 1, (unint64_t)&v24);
    v16 = v25;
    *((_OWORD *)v25 + HIDWORD(v26)) = *v15;
  }
  else
  {
    v16 = v25;
    *((_OWORD *)v25 + v11) = v24;
  }
  *(_QWORD *)&v24 = 0;
  WebKit::ResourceLoadStatisticsClassifierCocoa::singletonPredictionModel(this);
  svm_predict_values();
  v18 = (int)v17 >> 31;
  WTF::fastFree(v16, v19);
  return v18;
}

uint64_t WebKit::ResourceLoadStatisticsClassifierCocoa::singletonPredictionModel(WebKit::ResourceLoadStatisticsClassifierCocoa *this)
{
  uint64_t result;
  void *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN6WebKit37ResourceLoadStatisticsClassifierCocoa24singletonPredictionModelEv_block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  block[4] = this;
  if (qword_1ECE72B30 != -1)
    dispatch_once(&qword_1ECE72B30, block);
  result = qword_1ECE72B28;
  if (_MergedGlobals_78 != 1 || qword_1ECE72B28 == 0)
  {
    WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath((WebKit::ResourceLoadStatisticsClassifierCocoa *)&v7);
    WTF::String::utf8();
    WTFLogAlways();
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, v4);
      else
        --*(_DWORD *)v5;
    }
    v6 = v7;
    v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = 0;
    *((_BYTE *)this + 8) = 0;
  }
  return result;
}

void WebKit::ResourceLoadStatisticsClassifierCocoa::storagePath(WebKit::ResourceLoadStatisticsClassifierCocoa *this)
{
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v3;
  const __CFURL *v4;
  const __CFURL *v5;
  CFStringRef v6;
  CFErrorRef error;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebKit"));
  v3 = CFBundleCopyResourcesDirectoryURL(BundleWithIdentifier);
  v4 = CFURLCreateCopyAppendingPathComponent(0, v3, CFSTR("corePrediction_model"), 0);
  if (v3)
    CFRelease(v3);
  error = 0;
  v5 = CFURLCreateFilePathURL(0, v4, &error);
  if (v4)
    CFRelease(v4);
  if (error)
  {
    *(_QWORD *)this = 0;
    if (!v5)
      return;
    goto LABEL_11;
  }
  if (v5)
  {
    v6 = CFURLCopyFileSystemPath(v5, kCFURLPOSIXPathStyle);
    MEMORY[0x19AEABCC8](this, v6);
    if (v6)
      CFRelease(v6);
LABEL_11:
    CFRelease(v5);
    return;
  }
  *(_QWORD *)this = 0;
}

void WebKit::ResourceLoadStatisticsClassifierCocoa::~ResourceLoadStatisticsClassifierCocoa(WebKit::ResourceLoadStatisticsClassifierCocoa *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::__optional_destruct_base[abi:sn180100]<WebCore::PCM::AttributionTriggerData>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_BYTE *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](a1 + 56, (uint64_t *)(a2 + 56));
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a1 + 96) = v8;
    v9 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a1 + 104) = v9;
    v10 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a1 + 112) = v10;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

unsigned int *IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<WebKit::Daemon::Encoder,std::optional<unsigned long long>>(unsigned int *a1, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t *v4;
  size_t v5;
  int v7;
  char v8;
  char __src;
  uint64_t v10;

  v2 = a1;
  if (!*((_BYTE *)a2 + 8))
  {
    v8 = 0;
    v4 = (uint64_t *)&v8;
    v5 = 1;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  __src = 1;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
  if (*((_BYTE *)a2 + 8))
  {
    v10 = *a2;
    v4 = &v10;
    a1 = v2;
    v5 = 8;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  v7 = std::__throw_bad_optional_access[abi:sn180100]();
  return (unsigned int *)IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(v7);
}

unsigned int *IPC::ArgumentCoder<std::optional<WebCore::PCM::AttributionTriggerData>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::AttributionTriggerData> const&>(unsigned int *a1, char *a2)
{
  int v5;
  char v6;
  char __src;

  if (a2[128])
  {
    __src = 1;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
    if (a2[128])
    {
      return WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::encode(a1, a2);
    }
    else
    {
      v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(v5);
    }
  }
  else
  {
    v6 = 0;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v6, 1uLL);
  }
}

unsigned int *IPC::ArgumentCoder<std::optional<WTF::WallTime>,void>::encode<WebKit::Daemon::Encoder,std::optional<WTF::WallTime> const&>(unsigned int *a1, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t *v4;
  size_t v5;
  unsigned int *v7;
  uint64_t v8;
  char v9;
  char __src;
  uint64_t v11;

  v2 = a1;
  if (!*((_BYTE *)a2 + 8))
  {
    v9 = 0;
    v4 = (uint64_t *)&v9;
    v5 = 1;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  __src = 1;
  WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
  if (*((_BYTE *)a2 + 8))
  {
    v11 = *a2;
    v4 = &v11;
    a1 = v2;
    v5 = 8;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v4, v5);
  }
  v7 = (unsigned int *)std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(v7, v8);
}

unsigned int *IPC::ArgumentCoder<std::optional<WebCore::PCM::EphemeralNonce>,void>::encode<WebKit::Daemon::Encoder,std::optional<WebCore::PCM::EphemeralNonce>>(unsigned int *a1, uint64_t a2)
{
  uint64_t *v5;
  WTF::StringImpl **v6;
  unsigned __int8 **v7;
  char v8;
  char __src;

  if (*(_BYTE *)(a2 + 8))
  {
    __src = 1;
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 1uLL);
    if (*(_BYTE *)(a2 + 8))
    {
      return WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(a1, (uint64_t *)a2);
    }
    else
    {
      v5 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(v5, v6, v7);
    }
  }
  else
  {
    v8 = 0;
    return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &v8, 1uLL);
  }
}

uint64_t *WebKit::Daemon::Decoder::operator>><WebCore::RegistrableDomain>(uint64_t *a1, WTF::StringImpl **a2, unsigned __int8 **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  char v9;

  WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode(a1, a3, (uint64_t)&v8);
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(a2, (WTF::StringImpl *)&v8);
  if (v9)
  {
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  PAL *BoolValueForKey;
  int v7;
  uint64_t AVFoundation_AVMediaTypeAudio;
  uint64_t v9;
  int v11;
  uint64_t AVFoundation_AVMediaTypeVideo;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (PAL *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
  if ((_DWORD)BoolValueForKey)
    goto LABEL_26;
  v7 = 1;
  if (*(_DWORD *)(a2 + 108))
  {
    AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio(BoolValueForKey);
    BoolValueForKey = (PAL *)objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFD8])(), "authorizationStatusForMediaType:", AVFoundation_AVMediaTypeAudio);
    v7 = BoolValueForKey ? 1 : 2;
    if ((unint64_t)BoolValueForKey - 1 <= 1)
      goto LABEL_9;
  }
  if (*(unsigned __int8 *)(a2 + 112) - 3 <= 0xFFFFFFFD && *(_DWORD *)(a2 + 92) != 0)
  {
    AVFoundation_AVMediaTypeVideo = PAL::get_AVFoundation_AVMediaTypeVideo(BoolValueForKey);
    v13 = objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFD8])(), "authorizationStatusForMediaType:", AVFoundation_AVMediaTypeVideo);
    if ((unint64_t)(v13 - 1) <= 1)
    {
LABEL_9:
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
LABEL_27:
      v16 = *(void (**)(void))(*(_QWORD *)v9 + 8);
      goto LABEL_28;
    }
    if (v13)
      v11 = 1;
    else
      v11 = 2;
    if (v7 == 2)
      goto LABEL_22;
    if (!v13)
    {
      WebKit::requestAVCaptureAccessForType((PAL *)2, (uint64_t *)a3);
      return;
    }
LABEL_26:
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 1);
    goto LABEL_27;
  }
  if (v7 != 2)
    goto LABEL_26;
  v11 = 1;
LABEL_22:
  v14 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v15 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v15 = &off_1E34C9E20;
  *(_DWORD *)(v15 + 8) = v11;
  *(_QWORD *)(v15 + 16) = v14;
  v17 = v15;
  WebKit::requestAVCaptureAccessForType((PAL *)1, &v17);
  if (v17)
  {
    v16 = *(void (**)(void))(*(_QWORD *)v17 + 8);
LABEL_28:
    v16();
  }
}

void sub_19721C0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::~VideoPresentationModelContext(WebKit::VideoPresentationModelContext *this, void *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *((_QWORD *)this + 9);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  v4 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::VideoPresentationModelContext::~VideoPresentationModelContext(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::VideoPresentationModelContext::addClient(WebKit::VideoPresentationModelContext *this, WebCore::VideoPresentationModelClient *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  unsigned int *result;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  v3 = (uint64_t *)((char *)this + 72);
  v4 = *((_DWORD *)this + 21);
  v5 = *((_DWORD *)this + 20) + 1;
  *((_DWORD *)this + 20) = v5;
  if (v5 <= v4)
    goto LABEL_31;
  v7 = *v3;
  if (!*v3)
    goto LABEL_26;
  v8 = *(_DWORD *)(v7 - 4);
  if (!v8)
  {
LABEL_25:
    *((_DWORD *)this + 20) = 0;
    goto LABEL_28;
  }
  v9 = 0;
  do
  {
    while (1)
    {
      v10 = *(_QWORD *)(v7 + 8 * --v8);
      if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
        break;
      if (!v8)
        goto LABEL_14;
    }
    *(_QWORD *)(v7 + 8 * v8) = 0;
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, a2);
    }
    *(_QWORD *)(v7 + 8 * v8) = -1;
    ++v9;
  }
  while (v8);
LABEL_14:
  v7 = *v3;
  if (v9)
  {
    *(_DWORD *)(v7 - 16) += v9;
    v13 = *v3;
    if (*v3)
      v14 = *(_DWORD *)(v13 - 12);
    else
      v14 = 0;
    *(_DWORD *)(v13 - 12) = v14 - v9;
    v7 = *v3;
  }
  if (!v7)
  {
LABEL_26:
    v17 = 0;
    *((_DWORD *)this + 20) = 0;
LABEL_29:
    v18 = v17;
    goto LABEL_30;
  }
  v15 = *(_DWORD *)(v7 - 4);
  if (v15 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v15)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
  v7 = *((_QWORD *)this + 9);
  *((_DWORD *)this + 20) = 0;
  if (!v7)
  {
    v17 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v17 = *(_DWORD *)(v7 - 12);
  v18 = 0x7FFFFFFF;
  if (v17 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *((_DWORD *)this + 21) = 2 * v18;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v19 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v29 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v29, (uint64_t)&v28);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v26 = __ldaxr(result);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, result));
    if (!v27)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
    }
  }
  if (v19)
  {
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (!v25)
    {
      atomic_store(1u, v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v22);
    }
  }
  return result;
}

void sub_19721C744(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a12)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)a12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)a12));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  if (v12)
  {
    do
    {
      v14 = __ldaxr(v12);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v12));
    if (!v15)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::VideoPresentationModelContext::removeClient(uint64_t *this, WebCore::VideoPresentationModelClient *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = this + 9;
  v4 = *((_DWORD *)this + 21);
  v5 = *((_DWORD *)this + 20) + 1;
  *((_DWORD *)this + 20) = v5;
  if (v5 > v4)
  {
    v6 = this;
    v7 = *v3;
    if (*v3)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          this = *(uint64_t **)(v7 + 8 * --v8);
          if ((unint64_t)this + 1 >= 2 && !this[1])
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)this);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)this));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)this);
          this = (uint64_t *)WTF::fastFree((WTF *)this, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v12 = *v3;
        if (*v3)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v9;
        v7 = *v3;
      }
      if (v7)
      {
        v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          v7 = v6[9];
          *((_DWORD *)v6 + 20) = 0;
          if (!v7)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *((_DWORD *)v6 + 20) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v7 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *((_DWORD *)v6 + 21) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *((_DWORD *)v6 + 20) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = *((_QWORD *)a2 + 1);
  if (v18 && *(_QWORD *)(v18 + 8))
  {
    v20 = *((_QWORD *)a2 + 1);
    this = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == this)
        return this;
    }
    else
    {
      if (!this)
        return this;
      v19 = 0;
    }
    if ((uint64_t *)v19 != this)
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)this);
  }
  return this;
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::setDocumentVisibility(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;

  if (!result[32])
  {
    result = (unsigned __int8 *)WebKit::VideoPresentationManagerProxy::findInterface((uint64_t)result, a2, &v2);
    if (v2)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 64));
  }
  return result;
}

char *WebKit::VideoPresentationManagerProxy::findInterface@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  result = (char *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v8);
  v6 = *(char **)(a1 + 64);
  if (v6)
    v6 += 24 * *((unsigned int *)v6 - 1);
  if (v6 == result)
  {
    v7 = 0;
  }
  else
  {
    v7 = *((_QWORD *)result + 2);
    result = (char *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v7 + 64));
  }
  *a3 = v7;
  return result;
}

uint64_t WebKit::VideoPresentationModelContext::setVideoDimensions(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  NSObject *v28;
  WTF *v29;
  void *v30;
  char *v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t i;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD v47[4];
  WTF *v48[2];
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[16];
  int v55;
  int v56;
  _DWORD v57[6];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(float *)(this + 88) != *(float *)a2 || *(float *)(this + 92) != *((float *)a2 + 1))
  {
    v4 = this;
    *(_QWORD *)(this + 88) = *(_QWORD *)a2;
    v5 = *(_QWORD *)(this + 24);
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (v8 = *(_QWORD *)(v7 + 64)) == 0)
    {
LABEL_89:
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v44 = off_1E34C9E70;
      v44[1] = a2;
      *(_QWORD *)buf = v44;
      WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(v4 + 72), buf);
      return (*(uint64_t (**)(_QWORD *))(*v44 + 8))(v44);
    }
    v9 = *(_QWORD *)(v5 + 256);
    v47[0] = "VideoPresentationModelContext";
    v47[1] = 30;
    v47[2] = "setVideoDimensions";
    v47[3] = v9;
    v10 = (uint64_t *)(this + 72);
    v11 = *(_QWORD *)(this + 72);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 4);
      if (!v12)
        goto LABEL_31;
      v13 = 0;
      do
      {
        while (1)
        {
          v14 = *(_QWORD *)(v11 + 8 * --v12);
          if ((unint64_t)(v14 + 1) >= 2 && !*(_QWORD *)(v14 + 8))
            break;
          if (!v12)
            goto LABEL_20;
        }
        *(_QWORD *)(v11 + 8 * v12) = 0;
        do
        {
          v15 = __ldaxr((unsigned int *)v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)v14));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)v14);
          WTF::fastFree((WTF *)v14, a2);
        }
        *(_QWORD *)(v11 + 8 * v12) = -1;
        ++v13;
      }
      while (v12);
LABEL_20:
      v11 = *v10;
      if (v13)
      {
        *(_DWORD *)(v11 - 16) += v13;
        v17 = *v10;
        if (*v10)
          v18 = *(_DWORD *)(v17 - 12);
        else
          v18 = 0;
        *(_DWORD *)(v17 - 12) = v18 - v13;
        v11 = *v10;
      }
      if (v11)
      {
        v19 = *(_DWORD *)(v11 - 4);
        if (v19 >= 9 && 6 * *(_DWORD *)(v11 - 12) < v19)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v4 + 72));
          v11 = *(_QWORD *)(v4 + 72);
          *(_DWORD *)(v4 + 80) = 0;
          if (v11)
          {
LABEL_35:
            v21 = *(_DWORD *)(v11 - 12);
            if (v21 >= 0x7FFFFFFF)
              v22 = -2;
            else
              v22 = 2 * v21;
            *(_DWORD *)(v4 + 84) = v22;
            v46 = *(_DWORD *)(v11 - 12);
LABEL_39:
            if (*(_BYTE *)(v8 + 12))
            {
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v47);
              WebCore::FloatSize::toJSONString(a2);
              WTF::String::String((WTF::String *)&v50, ", clients=");
              WTF::String::number((WTF::String *)v46);
              WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, &v53);
              v24 = v49;
              v49 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v23);
                else
                  *(_DWORD *)v24 -= 2;
              }
              v25 = v50;
              v50 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v23);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v26 = v51;
              v51 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v23);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v27 = v52;
              v52 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v23);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = qword_1ECE710F0;
              v29 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v29)
              {
                WTF::String::utf8();
                v31 = v48[0] ? (char *)v48[0] + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v31;
                _os_log_impl(&dword_196BCC000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v29 = v48[0];
                v48[0] = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 1)
                    v29 = (WTF *)WTF::fastFree(v29, v30);
                  else
                    --*(_DWORD *)v29;
                }
              }
              if (WebKit2LogFullscreen)
              {
                v32 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v33 = *v32;
                  if ((v33 & 1) != 0)
                    break;
                  v34 = __ldaxr(v32);
                  if (v34 == v33)
                  {
                    if (!__stxr(v33 | 1, v32))
                    {
                      v35 = WTF::Logger::observers(v29);
                      v36 = *(unsigned int *)(v35 + 12);
                      if ((_DWORD)v36)
                      {
                        v37 = *(uint64_t **)v35;
                        v45 = *(_QWORD *)v35 + 8 * v36;
                        do
                        {
                          v38 = *v37;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v47);
                          v55 = 1;
                          WebCore::FloatSize::toJSONString(a2);
                          v56 = 0;
                          WTF::String::String((WTF::String *)v57, ", clients=");
                          v57[2] = 0;
                          WTF::String::number((WTF::String *)v46);
                          WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v48, (uint64_t)buf, 4uLL);
                          (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v38 + 16))(v38, &WebKit2LogFullscreen, 0, v48);
                          WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v39);
                          for (i = 56; i != -8; i -= 16)
                          {
                            v41 = *(WTF::StringImpl **)&buf[i];
                            *(_QWORD *)&buf[i] = 0;
                            if (v41)
                            {
                              if (*(_DWORD *)v41 == 2)
                                WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v30);
                              else
                                *(_DWORD *)v41 -= 2;
                            }
                          }
                          ++v37;
                        }
                        while (v37 != (uint64_t *)v45);
                      }
                      v42 = __ldxr(v32);
                      if (v42 == 1)
                      {
                        if (!__stlxr(0, v32))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v43 = v53;
              v53 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v30);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
            goto LABEL_89;
          }
LABEL_33:
          v46 = 0;
          *(_DWORD *)(v4 + 84) = 0;
          goto LABEL_39;
        }
LABEL_31:
        *(_DWORD *)(v4 + 80) = 0;
        goto LABEL_35;
      }
    }
    *(_DWORD *)(v4 + 80) = 0;
    goto LABEL_33;
  }
  return this;
}

void sub_19721CF48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a24)
      {
        if (*(_DWORD *)a24 == 2)
          WTF::StringImpl::destroy(a24, a2);
        else
          *(_DWORD *)a24 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebKit::VideoPresentationModelContext::loggerPtr(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 64);
  else
    return 0;
}

uint64_t WebKit::VideoPresentationModelContext::logIdentifier(WebKit::VideoPresentationModelContext *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 256);
}

uint64_t *WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v18 = 0;
  v19 = 0;
  if (*result && (v4 = *(unsigned int *)(*result - 12), (_DWORD)v4))
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    LODWORD(v19) = v4;
    v18 = v5;
  }
  else
  {
    v5 = 0;
  }
  v6 = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v3);
  v8 = v6;
  v9 = v7;
  if (*v3)
    v10 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  else
    v10 = 0;
  if ((unsigned int *)v10 != v6)
  {
    v11 = 0;
    do
    {
      v7 = *(unsigned int **)(*(_QWORD *)v8 + 8);
      if (v7)
      {
        v12 = (unsigned int **)(v7 + 2);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 2, (uint64_t)v7);
        v13 = *v12;
        if (*v12)
        {
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          v11 = HIDWORD(v19);
          v5 = v18;
        }
      }
      else
      {
        v13 = 0;
      }
      v15 = v11 + 1;
      *(_QWORD *)(v5 + 8 * v11) = v13;
      HIDWORD(v19) = v11 + 1;
      while (1)
      {
        v8 += 2;
        if (v8 == v9)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
          goto LABEL_21;
      }
      v8 = v9;
LABEL_21:
      ++v11;
    }
    while (v8 != (unsigned int *)v10);
    if (v15)
    {
      v16 = v18;
      v17 = 8 * v15;
      do
      {
        if (*(_QWORD *)v16 && *(_QWORD *)(*(_QWORD *)v16 + 8))
        {
          v20 = *(_QWORD *)v16;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*(_QWORD *)v16 + 8));
        }
        v16 += 8;
        v17 -= 8;
      }
      while (v17);
    }
  }
  return (uint64_t *)WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
}

void sub_19721D2D4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationModelContext::requestCloseAllMediaPresentations(_QWORD *a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[4];

  v4 = a1[2];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v7 = a1[3];
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      goto LABEL_8;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      goto LABEL_8;
    v10 = *(_QWORD *)(v9 + 64);
    if (!v10)
      goto LABEL_8;
    v11 = *(_QWORD *)(v7 + 256);
    v15[0] = "VideoPresentationModelContext";
    v15[1] = 30;
    v15[2] = "requestCloseAllMediaPresentations";
    v15[3] = v11;
    if (*(_BYTE *)(v10 + 12)
      && (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v15), (v4 = a1[2]) == 0))
    {
      v12 = 0;
    }
    else
    {
LABEL_8:
      v12 = *(_QWORD *)(v4 + 8);
    }
    return WebKit::VideoPresentationManagerProxy::requestCloseAllMediaPresentations(v12, a1[4], a2, a3);
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void sub_19721D3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationManagerProxy::requestCloseAllMediaPresentations(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  if (WebKit::VideoPresentationManagerProxy::hasMode((WebKit::VideoPresentationManagerProxy *)a1, 2)
    || WebKit::VideoPresentationManagerProxy::hasMode((WebKit::VideoPresentationManagerProxy *)a1, 1))
  {
    v8 = (_QWORD *)(a1 + 80);
    v9 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 88))
    {
      a4 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)a4);
      v9 = *(unsigned int *)(a1 + 92);
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    }
    else
    {
      v10 = (_QWORD *)(*v8 + 8 * v9);
    }
    v11 = *a4;
    *a4 = 0;
    *v10 = v11;
    *(_DWORD *)(a1 + 92) = v9 + 1;
    return WebKit::VideoPresentationManagerProxy::requestFullscreenMode(a1, a2, 0, a3);
  }
  else
  {
    v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void sub_19721D4E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::VideoPresentationModelContext::requestFullscreenMode(_QWORD *this, WTF::String *a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  WTF *v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t i;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  WTF *v34[2];
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint8_t buf[4];
  char *v41;
  int v42;
  int v43;
  _DWORD v44[4];
  _QWORD v45[3];

  v5 = this;
  v45[1] = *MEMORY[0x1E0C80C00];
  v6 = this[3];
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 64);
      if (v9)
      {
        v10 = *(_QWORD *)(v6 + 256);
        v33[0] = "VideoPresentationModelContext";
        v33[1] = 30;
        v33[2] = "requestFullscreenMode";
        v33[3] = v10;
        if (*(_BYTE *)(v9 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v33);
          WTF::String::number(a2);
          WTF::String::String((WTF::String *)&v36, ", finishedWithMedia: ");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v35);
          WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v38, (uint64_t *)&v37, (uint64_t *)&v36, (uint64_t *)&v35, &v39);
          v12 = v35;
          v35 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v36;
          v36 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v11);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v37;
          v37 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v11);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v38;
          v38 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v11);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = qword_1ECE710F0;
          v17 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v17)
          {
            WTF::String::utf8();
            v19 = v34[0] ? (char *)v34[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            v41 = v19;
            _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v17 = v34[0];
            v34[0] = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
                v17 = (WTF *)WTF::fastFree(v17, v18);
              else
                --*(_DWORD *)v17;
            }
          }
          if (WebKit2LogFullscreen)
          {
            v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v21 = *v20;
              if ((v21 & 1) != 0)
                break;
              v22 = __ldaxr(v20);
              if (v22 == v21)
              {
                if (!__stxr(v21 | 1, v20))
                {
                  v23 = WTF::Logger::observers(v17);
                  v24 = *(unsigned int *)(v23 + 12);
                  if ((_DWORD)v24)
                  {
                    v25 = *(uint64_t **)v23;
                    v32 = *(_QWORD *)v23 + 8 * v24;
                    do
                    {
                      v26 = *v25;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v33);
                      v42 = 0;
                      WTF::String::number(a2);
                      v43 = 0;
                      WTF::String::String((WTF::String *)v44, ", finishedWithMedia: ");
                      v44[2] = 0;
                      WTF::LogArgument<BOOL>::toString<BOOL>(v45);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v34, (uint64_t)buf, 4uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v26 + 16))(v26, &WebKit2LogFullscreen, 0, v34);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v27);
                      for (i = 56; i != -8; i -= 16)
                      {
                        v29 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v29)
                        {
                          if (*(_DWORD *)v29 == 2)
                            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v18);
                          else
                            *(_DWORD *)v29 -= 2;
                        }
                      }
                      ++v25;
                    }
                    while (v25 != (uint64_t *)v32);
                  }
                  v30 = __ldxr(v20);
                  if (v30 == 1)
                  {
                    if (!__stlxr(0, v20))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          this = v39;
          v39 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
    }
  }
  v31 = v5[2];
  if (v31)
  {
    this = *(_QWORD **)(v31 + 8);
    if (this)
      return (_QWORD *)WebKit::VideoPresentationManagerProxy::requestFullscreenMode((uint64_t)this, v5[4], (int)a2, a3);
  }
  return this;
}

void sub_19721D8D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a24)
      {
        if (*(_DWORD *)a24 == 2)
          WTF::StringImpl::destroy(a24, a2);
        else
          *(_DWORD *)a24 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebKit::VideoPresentationManagerProxy::requestFullscreenMode(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  int v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v4 = *(_QWORD *)(result + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 192);
      v7[0] = &v10;
      v7[1] = &v9;
      v8 = a4;
      return WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::RequestFullscreenMode>(v6, (uint64_t)v7, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 1896), 0);
    }
  }
  return result;
}

void WebKit::VideoPresentationModelContext::setVideoLayerFrame(_QWORD *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  WTF::MachSendRight *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  CGRect v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  *(_QWORD *)&v31 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((_QWORD *)&v31 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v6 = a1[3];
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 64);
      if (v9)
      {
        v10 = *(double *)(v6 + 256);
        *(_QWORD *)&v33.origin.x = "VideoPresentationModelContext";
        *(_QWORD *)&v33.origin.y = 30;
        *(_QWORD *)&v33.size.width = "setVideoLayerFrame";
        v33.size.height = v10;
        if (*(_BYTE *)(v9 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect>((WTF::Logger::LogSiteIdentifier *)&v33, (WebCore::FloatRect *)&v31);
      }
    }
  }
  v11 = a1[2];
  if (v11)
  {
    v12 = *(_QWORD **)(v11 + 8);
    if (v12)
    {
      v13 = a1[4];
      v37 = v13;
      v36 = v31;
      v14 = v12[6];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8))
        {
          v15 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(v12, v13);
          std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v34, v15);
          v33.origin.x = 0.0;
          v33.origin.y = 0.0;
          v33.size = (CGSize)vcvtq_f64_f32(*(float32x2_t *)((char *)&v36 + 8));
          WebCore::VideoFullscreenCaptions::setCaptionsFrame((WebCore::VideoFullscreenCaptions *)(v35 + 32), &v33);
          v32 = 0;
          v16 = *(_QWORD *)(v34 + 40);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & (v16 != 0)) == 1 && *(_QWORD *)(v16 + 432))
          {
            v17 = (void *)objc_msgSend(MEMORY[0x1E0C926D0], "coordinatorWithError:", 0);
            objc_msgSend(v17, "addLayerHierarchyHostingView:", *(_QWORD *)(v16 + 432));
            v18 = (void *)objc_msgSend(v17, "createXPCRepresentation");
            v19 = v18;
            if (v18)
              v20 = v18;
            v21 = (WTF::MachSendRight *)xpc_dictionary_copy_mach_send();
            WTF::MachSendRight::adopt(v21);
            WTF::MachSendRight::operator=();
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v33);
            v22 = *(_QWORD *)(v12[6] + 8);
            v23 = v22 - 16;
            if (!v22)
              v23 = 0;
            v24 = *(_QWORD *)(v23 + 208);
            *(_QWORD *)&v33.origin.y = &v36;
            *(_QWORD *)&v33.size.width = &v32;
            *(_QWORD *)&v33.origin.x = &v37;
            WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(v24, (uint64_t)&v33, *(_QWORD *)(*(_QWORD *)(v22 + 16) + 1896));
            objc_msgSend(v17, "commit");
            if (v19)

          }
          else
          {
            v25 = *(_QWORD *)(v12[6] + 8);
            v26 = v25 - 16;
            if (!v25)
              v26 = 0;
            v27 = *(_QWORD *)(v26 + 208);
            *(_QWORD *)&v33.origin.y = &v36;
            *(_QWORD *)&v33.size.width = &v32;
            *(_QWORD *)&v33.origin.x = &v37;
            WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(v27, (uint64_t)&v33, *(_QWORD *)(*(_QWORD *)(v25 + 16) + 1896));
          }
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v32);
          v29 = v35;
          v35 = 0;
          if (v29)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v29 + 64));
          v30 = v34;
          v34 = 0;
          if (v30)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 8), v28);
        }
      }
    }
  }
}

void sub_19721DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  if (v19)

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a13);
  v22 = a19;
  a19 = 0;
  if (v22)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v22 + 64));
  v23 = a18;
  a18 = 0;
  if (v23)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 8), v21);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::VideoPresentationModelContext::setVideoLayerGravity(IPC::Encoder *result, WTF::String *a2)
{
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  void *v48;
  IPC::Encoder *v49[4];
  WTF *v50[2];
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[16];
  int v55;
  uint64_t v56;

  v3 = result;
  v56 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 3);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 64);
      if (v7)
      {
        v8 = *(IPC::Encoder **)(v4 + 256);
        v49[0] = (IPC::Encoder *)"VideoPresentationModelContext";
        v49[1] = (IPC::Encoder *)30;
        v49[2] = (IPC::Encoder *)"setVideoLayerGravity";
        v49[3] = v8;
        if (*(_BYTE *)(v7 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
          WTF::String::number(a2);
          *(_QWORD *)buf = v52;
          v50[0] = v51;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v50, &v53);
          if (!v53)
            goto LABEL_65;
          v10 = v51;
          v51 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = v52;
          v52 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v9);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = qword_1ECE710F0;
          v13 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v13)
          {
            WTF::String::utf8();
            v15 = v50[0] ? (char *)v50[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v15;
            _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v13 = v50[0];
            v50[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
                v13 = (WTF *)WTF::fastFree(v13, v14);
              else
                --*(_DWORD *)v13;
            }
          }
          if (WebKit2LogFullscreen)
          {
            v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v17 = *v16;
              if ((v17 & 1) != 0)
                break;
              v18 = __ldaxr(v16);
              if (v18 == v17)
              {
                if (!__stxr(v17 | 1, v16))
                {
                  v19 = WTF::Logger::observers(v13);
                  v20 = *(unsigned int *)(v19 + 12);
                  if ((_DWORD)v20)
                  {
                    v21 = *(uint64_t **)v19;
                    v22 = *(_QWORD *)v19 + 8 * v20;
                    do
                    {
                      v23 = *v21;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
                      v55 = 0;
                      WTF::String::number(a2);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v50, (uint64_t)buf, 2uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v50);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v24);
                      for (i = 24; i != -8; i -= 16)
                      {
                        v26 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v26)
                        {
                          if (*(_DWORD *)v26 == 2)
                            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                          else
                            *(_DWORD *)v26 -= 2;
                        }
                      }
                      ++v21;
                    }
                    while (v21 != (uint64_t *)v22);
                  }
                  v27 = __ldxr(v16);
                  if (v27 == 1)
                  {
                    if (!__stlxr(0, v16))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = v53;
          v53 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (IPC::Encoder *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  v28 = *((_QWORD *)v3 + 2);
  if (!v28)
    return result;
  v29 = *(_QWORD *)(v28 + 8);
  if (!v29)
    return result;
  v30 = *(_QWORD *)(v29 + 48);
  v50[0] = *((WTF **)v3 + 4);
  if (!v30)
    return result;
  v31 = *(_QWORD *)(v30 + 8);
  if (!v31)
    return result;
  v32 = *(_QWORD *)(v31 + 192);
  v33 = *(_QWORD *)(*(_QWORD *)(v31 + 16) + 1896);
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 1514;
  *(_QWORD *)(v34 + 8) = v33;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v49[0] = (IPC::Encoder *)v34;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v34, (uint64_t *)v50);
  v35 = *(_QWORD *)(v34 + 544);
  v36 = (v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v37 = v36 + 4;
  v38 = *(_QWORD *)(v34 + 552);
  if (v38 < v36 + 4)
  {
    v45 = (2 * v38 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v46 = v45;
      v45 *= 2;
    }
    while (v46 < v37);
    v47 = (char *)mmap(0, v46, 3, 4098, -1, 0);
    if (v47 != (char *)-1)
    {
      v39 = v47;
      memcpy(v47, *(const void **)(v34 + 528), *(_QWORD *)(v34 + 544));
      v48 = *(void **)(v34 + 528);
      if (v48 != (void *)(v34 + 16))
        munmap(v48, *(_QWORD *)(v34 + 552));
      *(_QWORD *)(v34 + 528) = v39;
      *(_QWORD *)(v34 + 552) = v46;
      v35 = *(_QWORD *)(v34 + 544);
      goto LABEL_53;
    }
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x19721E244);
  }
  v39 = *(char **)(v34 + 528);
LABEL_53:
  bzero(&v39[v35], v36 - v35);
  *(_QWORD *)(v34 + 544) = v37;
  v40 = (_DWORD *)(*(_QWORD *)(v34 + 528) + v36);
  *(_QWORD *)(v34 + 536) = v40 + 1;
  *v40 = (_DWORD)a2;
  buf[0] = 0;
  LOBYTE(v55) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v32, v49, 0, (uint64_t)buf, 1);
  if ((_BYTE)v55)
  {
    v42 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  result = v49[0];
  v49[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v41);
    return (IPC::Encoder *)WTF::fastFree(v43, v44);
  }
  return result;
}

void sub_19721E250(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  unsigned __int8 *v21;
  int v23;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebKit::VideoPresentationModelContext::setVideoFullscreenFrame(_QWORD *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  _QWORD v25[2];
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  IPC::Encoder *v31;

  *(_QWORD *)&v28 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((_QWORD *)&v28 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v6 = a1[3];
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 64);
      if (v9)
      {
        v10 = *(_QWORD *)(v6 + 256);
        v25[0] = "VideoPresentationModelContext";
        v25[1] = 30;
        v26 = "setVideoFullscreenFrame";
        v27 = v10;
        if (*(_BYTE *)(v9 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect>((WTF::Logger::LogSiteIdentifier *)v25, (WebCore::FloatRect *)&v28);
      }
    }
  }
  v11 = a1[2];
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v30 = a1[4];
      v29 = v28;
      v13 = *(_QWORD *)(v12 + 48);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          CFRetain(*(CFTypeRef *)(v14 - 8));
          v15 = *(_QWORD *)(v14 + 192);
          v16 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8);
          if (v16)
            v17 = v16 - 16;
          else
            v17 = 0;
          v18 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 1896);
          v19 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v19 = 1512;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(v19 + 528) = v19 + 16;
          *(_QWORD *)(v19 + 536) = v19 + 16;
          *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v19 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
          v31 = (IPC::Encoder *)v19;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v19, &v30);
          IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v19, (int *)&v29);
          LOBYTE(v25[0]) = 0;
          LOBYTE(v26) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v15, &v31, 0, (uint64_t)v25, 1);
          if ((_BYTE)v26)
          {
            v21 = v25[0];
            v25[0] = 0;
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          }
          v22 = v31;
          v31 = 0;
          if (v22)
          {
            IPC::Encoder::~Encoder(v22, v20);
            WTF::fastFree(v23, v24);
          }
          CFRelease(*(CFTypeRef *)(v14 - 8));
        }
      }
    }
  }
}

void sub_19721E548(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v14 = *(IPC::Encoder **)(v12 - 40);
  *(_QWORD *)(v12 - 40) = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, a2);
    WTF::fastFree(v15, v16);
  }
  CFRelease(*(CFTypeRef *)(v11 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::VideoPresentationModelContext::fullscreenModeChanged(_QWORD *this, WTF::String *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  WTF *v31[2];
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[16];
  int v36;
  uint64_t v37;

  v3 = this;
  v37 = *MEMORY[0x1E0C80C00];
  v4 = this[3];
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 64);
      if (v7)
      {
        v8 = *(_QWORD *)(v4 + 256);
        v30[0] = "VideoPresentationModelContext";
        v30[1] = 30;
        v30[2] = "fullscreenModeChanged";
        v30[3] = v8;
        if (*(_BYTE *)(v7 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v30);
          WTF::String::number(a2);
          *(_QWORD *)buf = v33;
          v31[0] = v32;
          this = (_QWORD *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v31, &v34);
          if (!v34)
          {
            __break(0xC471u);
            return this;
          }
          v10 = v32;
          v32 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = v33;
          v33 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v9);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = qword_1ECE710F0;
          v13 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v13)
          {
            WTF::String::utf8();
            v15 = v31[0] ? (char *)v31[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v15;
            _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v13 = v31[0];
            v31[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
                v13 = (WTF *)WTF::fastFree(v13, v14);
              else
                --*(_DWORD *)v13;
            }
          }
          if (WebKit2LogFullscreen)
          {
            v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v17 = *v16;
              if ((v17 & 1) != 0)
                break;
              v18 = __ldaxr(v16);
              if (v18 == v17)
              {
                if (!__stxr(v17 | 1, v16))
                {
                  v19 = WTF::Logger::observers(v13);
                  v20 = *(unsigned int *)(v19 + 12);
                  if ((_DWORD)v20)
                  {
                    v21 = *(uint64_t **)v19;
                    v22 = *(_QWORD *)v19 + 8 * v20;
                    do
                    {
                      v23 = *v21;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v30);
                      v36 = 0;
                      WTF::String::number(a2);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)buf, 2uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v23 + 16))(v23, &WebKit2LogFullscreen, 0, v31);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v24);
                      for (i = 24; i != -8; i -= 16)
                      {
                        v26 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v26)
                        {
                          if (*(_DWORD *)v26 == 2)
                            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                          else
                            *(_DWORD *)v26 -= 2;
                        }
                      }
                      ++v21;
                    }
                    while (v21 != (uint64_t *)v22);
                  }
                  v27 = __ldxr(v16);
                  if (v27 == 1)
                  {
                    if (!__stlxr(0, v16))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          this = v34;
          v34 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v14);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
    }
  }
  v28 = v3[2];
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    if (v29)
      return WebKit::VideoPresentationManagerProxy::fullscreenModeChanged(*(_QWORD **)(v29 + 48), v3[4], (int)a2);
  }
  return this;
}

void sub_19721E8E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20)
{
  unsigned __int8 *v20;
  int v22;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WebKit::VideoPresentationManagerProxy::fullscreenModeChanged(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  IPC::Encoder *v24;

  v21 = a2;
  if (result)
  {
    v3 = result[1];
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 192);
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1504;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v24 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, &v21);
      v8 = *(_QWORD *)(v7 + 544);
      v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v10 = v9 + 4;
      v11 = *(_QWORD *)(v7 + 552);
      if (v11 < v9 + 4)
      {
        v18 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v19 = v18;
          v18 *= 2;
        }
        while (v19 < v10);
        result = mmap(0, v19, 3, 4098, -1, 0);
        if (result == (_QWORD *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v12 = result;
        memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
        v20 = *(void **)(v7 + 528);
        if (v20 != (void *)(v7 + 16))
          munmap(v20, *(_QWORD *)(v7 + 552));
        *(_QWORD *)(v7 + 528) = v12;
        *(_QWORD *)(v7 + 552) = v19;
        v8 = *(_QWORD *)(v7 + 544);
      }
      else
      {
        v12 = *(_QWORD **)(v7 + 528);
      }
      bzero((char *)v12 + v8, v9 - v8);
      *(_QWORD *)(v7 + 544) = v10;
      v13 = (_DWORD *)(*(_QWORD *)(v7 + 528) + v9);
      *(_QWORD *)(v7 + 536) = v13 + 1;
      *v13 = a3;
      LOBYTE(v22) = 0;
      v23 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v24, 0, (uint64_t)&v22, 1);
      if (v23)
      {
        v15 = v22;
        v22 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      result = v24;
      v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
        return (_QWORD *)WTF::fastFree(v16, v17);
      }
    }
  }
  return result;
}

void sub_19721EBC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationModelContext::presentingViewController(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 48);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1848))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
  return v7;
}

void sub_19721EC98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

WKVideoFullScreenViewController *WebKit::VideoPresentationModelContext::createVideoFullscreenViewController@<X0>(AVPlayerViewController *a1@<X1>, WKVideoFullScreenViewController **a2@<X8>)
{
  WKVideoFullScreenViewController *result;

  result = -[WKVideoFullScreenViewController initWithAVPlayerViewController:]([WKVideoFullScreenViewController alloc], "initWithAVPlayerViewController:", a1);
  *a2 = result;
  return result;
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::requestUpdateInlineRect(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v18[0] = "VideoPresentationModelContext";
        v18[1] = 30;
        v19 = "requestUpdateInlineRect";
        v20 = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
      }
    }
  }
  v7 = *((_QWORD *)v1 + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 48);
      v21 = *((_QWORD *)v1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 192);
          v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
          v13 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v13 = 1507;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(v13 + 528) = v13 + 16;
          *(_QWORD *)(v13 + 536) = v13 + 16;
          *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v13 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
          v22 = (IPC::Encoder *)v13;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v21);
          LOBYTE(v18[0]) = 0;
          LOBYTE(v19) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)v18, 1);
          if ((_BYTE)v19)
          {
            v15 = v18[0];
            v18[0] = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          this = v22;
          v22 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v14);
            return (WTF::StringImpl *)WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return this;
}

void sub_19721EE40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::VideoPresentationModelContext::requestVideoContentLayer(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        v9[2] = "requestVideoContentLayer";
        v9[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      }
    }
  }
  v7 = *(_QWORD *)(v1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      return WebKit::VideoPresentationManagerProxy::requestVideoContentLayer(*(IPC::Encoder **)(v8 + 48), *(_QWORD *)(v1 + 32));
  }
  return this;
}

IPC::Encoder *WebKit::VideoPresentationManagerProxy::requestVideoContentLayer(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v10 = a2;
  if (result)
  {
    v2 = *((_QWORD *)result + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 192);
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 1508;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v13 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, &v10);
      LOBYTE(v11) = 0;
      v12 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v13, 0, (uint64_t)&v11, 1);
      if (v12)
      {
        v7 = v11;
        v11 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      result = v13;
      v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v8, v9);
      }
    }
  }
  return result;
}

void sub_19721F000(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::VideoPresentationModelContext::returnVideoContentLayer(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        v9[2] = "returnVideoContentLayer";
        v9[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      }
    }
  }
  v7 = *(_QWORD *)(v1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      return WebKit::VideoPresentationManagerProxy::returnVideoContentLayer(*(IPC::Encoder **)(v8 + 48), *(_QWORD *)(v1 + 32));
  }
  return this;
}

IPC::Encoder *WebKit::VideoPresentationManagerProxy::returnVideoContentLayer(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v10 = a2;
  if (result)
  {
    v2 = *((_QWORD *)result + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 192);
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 1509;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v13 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, &v10);
      LOBYTE(v11) = 0;
      v12 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v13, 0, (uint64_t)&v11, 1);
      if (v12)
      {
        v7 = v11;
        v11 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      result = v13;
      v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v8, v9);
      }
    }
  }
  return result;
}

void sub_19721F1C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationModelContext::returnVideoView(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  BOOL v11;
  _QWORD v12[4];

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v12[0] = "VideoPresentationModelContext";
        v12[1] = 30;
        v12[2] = "returnVideoView";
        v12[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v12);
      }
    }
  }
  v7 = *((_QWORD *)v1 + 2);
  if (v7)
  {
    this = *(unsigned __int8 **)(v7 + 8);
    if (this)
    {
      v8 = *WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(this, *((_QWORD *)v1 + 4));
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v8 + 8));
      v10 = *(void **)(v8 + 56);
      if (v10)
        v11 = *(_QWORD *)(v8 + 40) == 0;
      else
        v11 = 1;
      if (!v11)
      {
        objc_msgSend(*(id *)(v8 + 56), "addSubview:");
        objc_msgSend(v10, "setNeedsLayout");
        objc_msgSend(v10, "layoutIfNeeded");
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 8), v9);
    }
  }
  return this;
}

void sub_19721F2E8(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::didSetupFullscreen(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        v9[2] = "didSetupFullscreen";
        v9[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      }
    }
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      WebKit::VideoPresentationManagerProxy::enterFullscreen(v8, *((_QWORD *)this + 4));
  }
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::failedToEnterFullscreen(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v18[0] = "VideoPresentationModelContext";
        v18[1] = 30;
        v19 = "failedToEnterFullscreen";
        v20 = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
      }
    }
  }
  v7 = *((_QWORD *)v1 + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 48);
      v21 = *((_QWORD *)v1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 192);
          v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
          v13 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v13 = 1502;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(v13 + 528) = v13 + 16;
          *(_QWORD *)(v13 + 536) = v13 + 16;
          *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v13 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
          v22 = (IPC::Encoder *)v13;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v21);
          LOBYTE(v18[0]) = 0;
          LOBYTE(v19) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)v18, 1);
          if ((_BYTE)v19)
          {
            v15 = v18[0];
            v18[0] = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          this = v22;
          v22 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v14);
            return (WTF::StringImpl *)WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return this;
}

void sub_19721F4E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationModelContext::didEnterFullscreen(WebKit::VideoPresentationModelContext *this, const WebCore::FloatSize *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 64);
      if (v7)
      {
        v8 = *(_QWORD *)(v4 + 256);
        v11[0] = "VideoPresentationModelContext";
        v11[1] = 30;
        v11[2] = "didEnterFullscreen";
        v11[3] = v8;
        if (*(_BYTE *)(v7 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11, a2);
      }
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *(_QWORD **)(v9 + 8);
    if (v10)
      WebKit::VideoPresentationManagerProxy::didEnterFullscreen(v10, *((_QWORD *)this + 4), (float *)a2);
  }
}

void WebKit::VideoPresentationManagerProxy::didEnterFullscreen(_QWORD *a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  IPC::Encoder *v26;

  v23 = a2;
  v3 = a1[6];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      LOBYTE(v21) = 0;
      v22 = 0;
      if (*a3 > 0.0 && a3[1] > 0.0)
      {
        v7 = *(_QWORD *)a3;
        v22 = 1;
        v21 = v7;
      }
      v8 = *(_QWORD *)(v4 + 192);
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896);
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 1499;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v26 = (IPC::Encoder *)v10;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v23);
      IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(v10, (uint64_t)&v21);
      LOBYTE(v24) = 0;
      v25 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v26, 0, (uint64_t)&v24, 1);
      if (v25)
      {
        v12 = v24;
        v24 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      v13 = v26;
      v26 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v11);
        WTF::fastFree(v14, v15);
      }
      v16 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v16 + 64));
      v17 = *(unsigned __int8 *)(v16 + 229);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v16 + 64));
      if (!v17)
      {
        v18 = a1[6];
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
            v20 = v19 - 16;
          else
            v20 = 0;
        }
        else
        {
          v20 = 0;
        }
        WebKit::WebPageProxy::didEnterFullscreen(v20, a2);
      }
    }
  }
}

void sub_19721F74C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  WTF *v17;
  void *v18;

  if (a15 && a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::willExitFullscreen(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v18[0] = "VideoPresentationModelContext";
        v18[1] = 30;
        v19 = "willExitFullscreen";
        v20 = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v18);
      }
    }
  }
  v7 = *((_QWORD *)v1 + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 48);
      v21 = *((_QWORD *)v1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 192);
          v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896);
          v13 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v13 = 1515;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(v13 + 528) = v13 + 16;
          *(_QWORD *)(v13 + 536) = v13 + 16;
          *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v13 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
          v22 = (IPC::Encoder *)v13;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v21);
          LOBYTE(v18[0]) = 0;
          LOBYTE(v19) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v22, 0, (uint64_t)v18, 1);
          if ((_BYTE)v19)
          {
            v15 = v18[0];
            v18[0] = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          this = v22;
          v22 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v14);
            return (WTF::StringImpl *)WTF::fastFree(v16, v17);
          }
        }
      }
    }
  }
  return this;
}

void sub_19721F8E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationModelContext::didExitFullscreen(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v8[0] = "VideoPresentationModelContext";
        v8[1] = 30;
        v8[2] = "didExitFullscreen";
        v8[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8);
      }
    }
  }
  v7 = *((_QWORD *)v1 + 2);
  if (v7)
  {
    this = *(WTF::StringImpl **)(v7 + 8);
    if (this)
      return (WTF::StringImpl *)WebKit::VideoPresentationManagerProxy::didExitFullscreen((uint64_t)this, *((_QWORD *)v1 + 4));
  }
  return this;
}

uint64_t WebKit::VideoPresentationManagerProxy::didExitFullscreen(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::VideoPresentationManagerProxy *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = a2;
  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (WebKit::VideoPresentationManagerProxy *)result;
      v5 = *(_QWORD *)(v3 + 192);
      v12 = &v13;
      WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::DidExitFullscreen>(v5, &v12, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896), 0);
      v6 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(v4, v13)[1];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v6 + 64));
      v7 = *(unsigned __int8 *)(v6 + 229);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v6 + 64));
      if (!v7)
      {
        v9 = *((_QWORD *)v4 + 6);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
            v11 = v10 - 16;
          else
            v11 = 0;
        }
        else
        {
          v11 = 0;
        }
        WebKit::WebPageProxy::didExitFullscreen(v11, v13);
      }
      return WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(v4, v8);
    }
  }
  return result;
}

void WebKit::VideoPresentationModelContext::didCleanupFullscreen(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD v9[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        v9[2] = "didCleanupFullscreen";
        v9[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      }
    }
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(unsigned __int8 **)(v7 + 8);
    if (v8)
      WebKit::VideoPresentationManagerProxy::didCleanupFullscreen(v8, *((_QWORD *)this + 4));
  }
}

void WebKit::VideoPresentationManagerProxy::didCleanupFullscreen(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WebCore::VideoPresentationInterfaceIOS *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::VideoPresentationInterfaceIOS *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  IPC::Encoder *v30;

  v27 = a2;
  v2 = *((_QWORD *)a1 + 6);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v6 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2);
      std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v25, v6);
      v7 = *(void **)(v25 + 40);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v7 != 0)) == 1)
        objc_msgSend(v7, "setVisibilityPropagationView:", 0);
      objc_msgSend(*(id *)(v25 + 40), "removeFromSuperview");
      WebCore::VideoFullscreenCaptions::removeCaptionsLayer((WebCore::VideoPresentationInterfaceIOS *)((char *)v26 + 32));
      v8 = *(void **)(v25 + 48);
      if (v8)
      {
        objc_msgSend(v8, "addSublayer:", objc_msgSend(*(id *)(v25 + 40), "layer"));
        objc_msgSend(v8, "layoutSublayers");
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
        objc_msgSend(*(id *)(v25 + 40), "removeFromSuperview");
        v9 = *(const void **)(v25 + 40);
        *(_QWORD *)(v25 + 40) = 0;
        if (v9)
          CFRelease(v9);
      }
      v10 = *(_QWORD *)(v3 + 192);
      v11 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 8);
      if (v11)
        v12 = v11 - 16;
      else
        v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 1896);
      v14 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v14 = 1498;
      *(_QWORD *)(v14 + 8) = v13;
      *(_QWORD *)(v14 + 528) = v14 + 16;
      *(_QWORD *)(v14 + 536) = v14 + 16;
      *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v14 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
      v30 = (IPC::Encoder *)v14;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, &v27);
      LOBYTE(v28) = 0;
      v29 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v30, 0, (uint64_t)&v28, 1);
      if (v29)
      {
        v16 = v28;
        v28 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      v17 = v30;
      v30 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v15);
        WTF::fastFree(v18, v19);
      }
      if (!WebKit::VideoPresentationManagerProxy::hasMode((WebKit::VideoPresentationManagerProxy *)a1, 4))
      {
        WebCore::VideoPresentationInterfaceIOS::setMode(v26);
        WebKit::VideoPresentationManagerProxy::removeClientForContext(a1, a2);
      }
      v20 = *(_QWORD *)(v3 + 24);
      if (v20)
        v21 = *(_QWORD *)(v20 + 8);
      else
        v21 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1584))(v21);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1840))(v21);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1592))(v21);
      v23 = v26;
      v26 = 0;
      if (v23)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((unsigned __int8 **)v23 + 8));
      v24 = v25;
      v25 = 0;
      if (v24)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 8), v22);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_19721FD88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  uint64_t v16;

  if (a11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a11 + 64));
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a10 + 8), a2);
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WebKit::VideoPresentationModelContext::fullscreenMayReturnToInline(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  IPC::Encoder *v33;

  v1 = this;
  v2 = this[3];
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v29[0] = "VideoPresentationModelContext";
        v29[1] = 30;
        v30 = "fullscreenMayReturnToInline";
        v31 = v6;
        if (*(_BYTE *)(v5 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v29);
      }
    }
  }
  v7 = v1[2];
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 48);
      v32 = v1[4];
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 192);
          v12 = *(_QWORD *)(v10 + 16);
          v13 = *(_BYTE *)(v12 + 48);
          v14 = *(_QWORD *)(v12 + 1896);
          v15 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v15 = 1503;
          *(_QWORD *)(v15 + 8) = v14;
          *(_QWORD *)(v15 + 528) = v15 + 16;
          *(_QWORD *)(v15 + 536) = v15 + 16;
          *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v15 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
          v33 = (IPC::Encoder *)v15;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v15, &v32);
          v16 = *(_QWORD *)(v15 + 544);
          v17 = v16 + 1;
          v18 = *(_QWORD *)(v15 + 552);
          if (v18 < v16 + 1)
          {
            v26 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v27 = v26;
              v26 *= 2;
            }
            while (v27 < v17);
            this = mmap(0, v27, 3, 4098, -1, 0);
            if (this == (_QWORD *)-1)
            {
              __break(0xC471u);
              return this;
            }
            v19 = this;
            memcpy(this, *(const void **)(v15 + 528), *(_QWORD *)(v15 + 544));
            v28 = *(void **)(v15 + 528);
            if (v28 != (void *)(v15 + 16))
              munmap(v28, *(_QWORD *)(v15 + 552));
            *(_QWORD *)(v15 + 528) = v19;
            *(_QWORD *)(v15 + 552) = v27;
            v20 = *(_QWORD *)(v15 + 544);
          }
          else
          {
            v19 = *(_QWORD **)(v15 + 528);
            v20 = *(_QWORD *)(v15 + 544);
          }
          bzero((char *)v19 + v20, v16 - v20);
          *(_QWORD *)(v15 + 544) = v17;
          v21 = (BOOL *)(*(_QWORD *)(v15 + 528) + v16);
          *(_QWORD *)(v15 + 536) = v21 + 1;
          *v21 = (v13 & 4) != 0;
          LOBYTE(v29[0]) = 0;
          LOBYTE(v30) = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v33, 0, (uint64_t)v29, 1);
          if ((_BYTE)v30)
          {
            v23 = v29[0];
            v29[0] = 0;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          }
          this = v33;
          v33 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)this, v22);
            return (_QWORD *)WTF::fastFree(v24, v25);
          }
        }
      }
    }
  }
  return this;
}

void sub_19722004C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::VideoPresentationModelContext::requestRouteSharingPolicyAndContextUID(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  IPC::Encoder *v32;

  v4 = a1[3];
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 64);
      if (v7)
      {
        v8 = *(_QWORD *)(v4 + 256);
        v27 = (WTF::StringImpl *)"VideoPresentationModelContext";
        v28 = 30;
        v29 = "requestRouteSharingPolicyAndContextUID";
        v30 = v8;
        if (*(_BYTE *)(v7 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v27);
      }
    }
  }
  v9 = a1[2];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 48);
      v31 = a1[4];
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 192);
          v14 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 1896);
          v15 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v15 = 1506;
          *(_QWORD *)(v15 + 8) = v14;
          *(_QWORD *)(v15 + 528) = v15 + 16;
          *(_QWORD *)(v15 + 536) = v15 + 16;
          *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v15 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
          v32 = (IPC::Encoder *)v15;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v15, &v31);
          v16 = *a2;
          *a2 = 0;
          v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v17 = &off_1E34C9F10;
          *((_QWORD *)v17 + 1) = v16;
          v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          v27 = v17;
          v28 = v18;
          LOBYTE(v29) = 1;
          WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v32, 0, (uint64_t)&v27, 1);
          if ((_BYTE)v29)
          {
            v20 = v27;
            v27 = 0;
            if (v20)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
          }
          result = v32;
          v32 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v19);
            return (IPC::Encoder *)WTF::fastFree(v22, v23);
          }
          return result;
        }
      }
      v27 = 0;
      WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(a2, 0, &v27);
      result = v27;
      if (!v27)
        return result;
LABEL_20:
      if (*(_DWORD *)result == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, v25);
      *(_DWORD *)result -= 2;
      return result;
    }
  }
  v24 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v24 += 2;
  v26 = v24;
  WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(a2, 0, &v26);
  result = v26;
  if (v26)
    goto LABEL_20;
  return result;
}

void sub_197220288(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  v15 = *(IPC::Encoder **)(v13 - 40);
  *(_QWORD *)(v13 - 40) = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, a2);
    WTF::fastFree(v16, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v3 = *a1;
  *a1 = 0;
  v4 = *a3;
  *a3 = 0;
  v8 = v4;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, a2, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_1972203A8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::didEnterPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::VideoPresentationManagerProxy *v8;
  _QWORD v9[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        v9[2] = "didEnterPictureInPicture";
        v9[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      }
    }
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(WebKit::VideoPresentationManagerProxy **)(v7 + 8);
    if (v8)
      WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(v8, 1u);
  }
}

void WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(WebKit::VideoPresentationManagerProxy *this, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v31 = a2;
  v3 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v3 + 64);
  v4 = *(_QWORD *)(v3 + 72);
  v27 = "VideoPresentationManagerProxy";
  v28 = 30;
  v29 = "hasVideoInPictureInPictureDidChange";
  v30 = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v27);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      CFRetain(*(CFTypeRef *)(v7 - 8));
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 88) + 56))(*(_QWORD *)(v7 + 88), v7 - 16, v31);
      v8 = v31;
      v9 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v9 = off_1E34C9F38;
      v9[8] = v8;
      v12 = *((_QWORD *)this + 12);
      v11 = (uint64_t *)((char *)this + 96);
      v10 = v12;
      v27 = 0;
      v28 = 0;
      if (v12 && (v13 = *(unsigned int *)(v10 - 12), (_DWORD)v13))
      {
        if (v13 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v14 = WTF::fastMalloc((WTF *)(8 * v13));
        LODWORD(v28) = v13;
        v27 = (const char *)v14;
      }
      else
      {
        v14 = 0;
      }
      v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v11);
      v17 = v15;
      v18 = v16;
      if (*v11)
        v19 = *v11 + 8 * *(unsigned int *)(*v11 - 4);
      else
        v19 = 0;
      if ((_QWORD *)v19 == v15)
      {
        v24 = HIDWORD(v28);
        if (!HIDWORD(v28))
        {
LABEL_35:
          WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v16);
          (*(void (**)(_BYTE *))(*(_QWORD *)v9 + 8))(v9);
          CFRelease(*(CFTypeRef *)(v7 - 8));
          return;
        }
      }
      else
      {
        v20 = 0;
        do
        {
          v21 = *(unsigned int ***)(*v17 + 8);
          if (v21)
          {
            WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*v17 + 8), *(_QWORD *)(*v17 + 8));
            v22 = *v21;
            if (*v21)
            {
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 + 1, v22));
              v20 = HIDWORD(v28);
              v14 = (uint64_t)v27;
            }
          }
          else
          {
            v22 = 0;
          }
          v24 = v20 + 1;
          *(_QWORD *)(v14 + 8 * v20) = v22;
          HIDWORD(v28) = v20 + 1;
          while (++v17 != v18)
          {
            if ((unint64_t)(*v17 + 1) > 1)
              goto LABEL_25;
          }
          v17 = v18;
LABEL_25:
          ++v20;
        }
        while (v17 != (_QWORD *)v19);
        if (!v24)
          goto LABEL_35;
      }
      v25 = v27;
      v26 = 8 * v24;
      do
      {
        if (*(_QWORD *)v25 && *(_QWORD *)(*(_QWORD *)v25 + 8))
        {
          v32 = *(_QWORD *)v25;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v11, &v32))(*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v9 + 16))(v9, *(_QWORD *)(*(_QWORD *)v25 + 8));
        }
        v25 += 8;
        v26 -= 8;
      }
      while (v26);
      goto LABEL_35;
    }
  }
}

void sub_1972206D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::didExitPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::VideoPresentationManagerProxy *v8;
  _QWORD v9[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v9[0] = "VideoPresentationModelContext";
        v9[1] = 30;
        v9[2] = "didExitPictureInPicture";
        v9[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      }
    }
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *(WebKit::VideoPresentationManagerProxy **)(v7 + 8);
    if (v8)
      WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(v8, 0);
  }
}

uint64_t WebKit::VideoPresentationModelContext::willEnterPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v10[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v10[0] = "VideoPresentationModelContext";
        v10[1] = 30;
        v10[2] = "willEnterPictureInPicture";
        v10[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
      }
    }
  }
  v7 = (uint64_t *)((char *)this + 72);
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E34C9E98;
  v10[0] = v8;
  WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v7, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19722085C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationModelContext::failedToEnterPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v10[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v10[0] = "VideoPresentationModelContext";
        v10[1] = 30;
        v10[2] = "failedToEnterPictureInPicture";
        v10[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
      }
    }
  }
  v7 = (uint64_t *)((char *)this + 72);
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E34C9EC0;
  v10[0] = v8;
  WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v7, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_197220930(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationModelContext::willExitPictureInPicture(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v10[4];

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 256);
        v10[0] = "VideoPresentationModelContext";
        v10[1] = 30;
        v10[2] = "willExitPictureInPicture";
        v10[3] = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
      }
    }
  }
  v7 = (uint64_t *)((char *)this + 72);
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E34C9EE8;
  v10[0] = v8;
  WTF::WeakHashSet<WebCore::VideoPresentationModelClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v7, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_197220A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::setRequiresTextTrackRepresentation(WebKit::VideoPresentationModelContext *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  IPC::Encoder *v31;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      v28 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)(v3 + 48);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          v8 = *(_QWORD *)(v6 + 192);
          v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8);
          if (v9)
            v10 = v9 - 16;
          else
            v10 = 0;
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 1896);
          v12 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v12 = 1510;
          *(_QWORD *)(v12 + 8) = v11;
          *(_QWORD *)(v12 + 528) = v12 + 16;
          *(_QWORD *)(v12 + 536) = v12 + 16;
          *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v12 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
          v31 = (IPC::Encoder *)v12;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v28);
          v13 = *(_QWORD *)(v12 + 544);
          v14 = v13 + 1;
          v15 = *(_QWORD *)(v12 + 552);
          if (v15 < v13 + 1)
          {
            v24 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v25 = v24;
              v24 *= 2;
            }
            while (v25 < v14);
            v26 = (char *)mmap(0, v25, 3, 4098, -1, 0);
            if (v26 == (char *)-1)
            {
              __break(0xC471u);
              return;
            }
            v16 = v26;
            memcpy(v26, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
            v27 = *(void **)(v12 + 528);
            if (v27 != (void *)(v12 + 16))
              munmap(v27, *(_QWORD *)(v12 + 552));
            *(_QWORD *)(v12 + 528) = v16;
            *(_QWORD *)(v12 + 552) = v25;
            v17 = *(_QWORD *)(v12 + 544);
          }
          else
          {
            v16 = *(char **)(v12 + 528);
            v17 = *(_QWORD *)(v12 + 544);
          }
          bzero(&v16[v17], v13 - v17);
          *(_QWORD *)(v12 + 544) = v14;
          v18 = (_BYTE *)(*(_QWORD *)(v12 + 528) + v13);
          *(_QWORD *)(v12 + 536) = v18 + 1;
          *v18 = a2;
          LOBYTE(v29) = 0;
          v30 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v31, 0, (uint64_t)&v29, 1);
          if (v30)
          {
            v20 = v29;
            v29 = 0;
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
          v21 = v31;
          v31 = 0;
          if (v21)
          {
            IPC::Encoder::~Encoder(v21, v19);
            WTF::fastFree(v22, v23);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
          v4 = *(_DWORD *)(v3 + 16) - 1;
        }
      }
      if (v4)
        *(_DWORD *)(v3 + 16) = v4;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

void sub_197220C60(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  _DWORD *v14;
  uint64_t v15;
  WTF *v17;
  void *v18;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[4];
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationModelContext::setTextTrackRepresentationBounds(WebKit::VideoPresentationModelContext *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      v18 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)(v3 + 48);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          v8 = *(_QWORD *)(v6 + 192);
          v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8);
          if (v9)
            v10 = v9 - 16;
          else
            v10 = 0;
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 1896);
          v12 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v12 = 1511;
          *(_QWORD *)(v12 + 8) = v11;
          *(_QWORD *)(v12 + 528) = v12 + 16;
          *(_QWORD *)(v12 + 536) = v12 + 16;
          *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v12 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
          v21 = (IPC::Encoder *)v12;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v18);
          IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v12, (uint64_t *)a2);
          LOBYTE(v19) = 0;
          v20 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v21, 0, (uint64_t)&v19, 1);
          if (v20)
          {
            v14 = v19;
            v19 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
          v15 = v21;
          v21 = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v13);
            WTF::fastFree(v16, v17);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
          v4 = *(_DWORD *)(v3 + 16) - 1;
        }
      }
      if (v4)
        *(_DWORD *)(v3 + 16) = v4;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

void sub_197220E58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  _DWORD *v14;
  uint64_t v15;
  WTF *v17;
  void *v18;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  CFRelease(*(CFTypeRef *)(v15 - 8));
  if (v14[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[4];
  _Unwind_Resume(a1);
}

unint64_t WebKit::VideoPresentationModelContext::nextChildIdentifier(WebKit::VideoPresentationModelContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 256);
  v2 = *((_QWORD *)this + 13) + 1;
  *((_QWORD *)this + 13) = v2;
  return v1 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v2;
}

uint64_t WebKit::VideoPresentationManagerProxy::requestHideAndExitFullscreen(WebKit::VideoPresentationManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  v2 = *((_QWORD *)this + 7);
  v4 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(v2 + 72);
  v11[0] = "VideoPresentationManagerProxy";
  v11[1] = 30;
  v11[2] = "requestHideAndExitFullscreen";
  v11[3] = v3;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 8);
  v6 = result;
  v8 = v7;
  v9 = *((_QWORD *)this + 8);
  if (v9)
    v10 = v9 + 24 * *(unsigned int *)(v9 - 4);
  else
    v10 = 0;
  if (v10 != result)
  {
    do
    {
      result = WebCore::VideoPresentationInterfaceIOS::requestHideAndExitFullscreen(*(WebCore::VideoPresentationInterfaceIOS **)(v6 + 16));
      while (1)
      {
        v6 += 24;
        if (v6 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_12;
      }
      v6 = v8;
LABEL_12:
      ;
    }
    while (v6 != v10);
  }
  return result;
}

unsigned __int8 **WebKit::VideoPresentationManagerProxy::controlsManagerInterface@<X0>(unsigned __int8 **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this[7] + 6);
  if (v3)
  {
    v4 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(this, v3)[1];
    this = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 64));
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

uint64_t *WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WebCore::VideoPresentationInterfaceAVKit *v25;
  PlaybackSessionInterfaceIOS *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39[3];
  uint64_t v40;
  int v41;

  v5 = a1 + 8;
  v4 = a1[8];
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 8, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v4 + 24 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v15 = WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1[7], a2);
    v16 = (_DWORD *)*v15;
    ++*(_DWORD *)(*v15 + 16);
    v17 = WTF::fastMalloc((WTF *)0x70);
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v18 = 0;
    *(_OWORD *)(v18 + 8) = xmmword_1978CE9C0;
    *(_QWORD *)(v18 + 24) = v17;
    *(_QWORD *)v17 = off_1E34C9C40;
    *(_QWORD *)(v17 + 8) = v18;
    v19 = a1[3];
    if (v19)
      goto LABEL_44;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = a1;
    v21 = (unsigned int *)a1[3];
    a1[3] = v19;
    if (!v21)
      goto LABEL_44;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v19 = a1[3];
    if (v19)
    {
LABEL_44:
      do
        v24 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v24 + 1, (unsigned int *)v19));
    }
    *(_QWORD *)(v17 + 16) = v19;
    ++v16[4];
    *(_QWORD *)(v17 + 24) = v16;
    *(_QWORD *)(v17 + 32) = a2;
    *(_QWORD *)(v17 + 104) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 81) = 0u;
    v25 = (WebCore::VideoPresentationInterfaceAVKit *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(a1[7], a2)[1];
    ++*((_DWORD *)v25 + 4);
    WebCore::VideoPresentationInterfaceAVKit::create(v25, v26);
    v27 = v39[0];
    v28 = a1[7];
    v40 = a2;
    v41 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v28 + 56), &v40, &v41, (uint64_t)v39);
    ++*(_DWORD *)(v39[0] + 8);
    WebCore::VideoPresentationInterfaceIOS::setVideoPresentationModel();
    if (*((_DWORD *)v25 + 4) == 1)
      (*(void (**)(WebCore::VideoPresentationInterfaceAVKit *))(*(_QWORD *)v25 + 8))(v25);
    else
      --*((_DWORD *)v25 + 4);
    if (v16[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[4];
    v30 = v11[1];
    v11[1] = v17;
    if (v30)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 8), v29);
    v31 = v11[2];
    v11[2] = v27;
    if (v31)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v31 + 64));
    v32 = *v5;
    if (*v5)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v5;
    if (*v5)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        return v11 + 1;
    }
    else if (3 * v37 > 4 * v36)
    {
      return v11 + 1;
    }
    v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v11);
    return v11 + 1;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (uint64_t *)(v4 + 24 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void sub_19722134C(_Unwind_Exception *a1, void *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;

  if (v4[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[4];
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  if (v2[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[4];
  _Unwind_Resume(a1);
}

uint64_t *WebKit::VideoPresentationManagerProxy::addClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = a2;
  v3 = 1;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 72), &v6, &v3, (uint64_t)&v4);
  if (!v5)
    ++*(_DWORD *)(v4 + 8);
  return result;
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::removeClientForContext(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v52;

  v52 = a2;
  v3 = (uint64_t *)(result + 72);
  v2 = *((_QWORD *)result + 9);
  if (!v2)
    return result;
  v5 = result;
  v6 = *(_DWORD *)(v2 - 8);
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = v10;
  v12 = (uint64_t *)(v2 + 16 * v10);
  v13 = *v12;
  if (*v12 != a2)
  {
    v20 = 1;
    v21 = *v12;
    v22 = v10;
    while (v21)
    {
      v22 = (v22 + v20) & v6;
      v21 = *(_QWORD *)(v2 + 16 * v22);
      ++v20;
      if (v21 == a2)
      {
        if (v13 == a2)
          goto LABEL_3;
        v23 = 1;
        v24 = *v12;
        while (v24)
        {
          v10 = ((_DWORD)v10 + v23) & v6;
          v24 = *(_QWORD *)(v2 + 16 * v10);
          ++v23;
          if (v24 == a2)
            goto LABEL_3;
        }
        goto LABEL_5;
      }
    }
    return result;
  }
LABEL_3:
  v14 = *(_DWORD *)(v2 + 16 * v10 + 8);
  v15 = __OFSUB__(v14, 1);
  v16 = v14 - 1;
  if ((v16 < 0) ^ v15 | (v16 == 0))
  {
LABEL_5:
    v17 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(result, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v17 + 8);
    WebCore::VideoPresentationInterfaceIOS::setVideoPresentationModel();
    WebCore::VideoPresentationInterfaceIOS::invalidate((WebCore::VideoPresentationInterfaceIOS *)v17);
    WebKit::PlaybackSessionManagerProxy::removeClientForContext(*((_QWORD *)v5 + 7), a2);
    result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3, &v52);
    v18 = result;
    if (*v3)
    {
      v19 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
      if ((unsigned __int8 *)v19 == result)
        goto LABEL_30;
    }
    else
    {
      if (!result)
      {
LABEL_30:
        v31 = *((_QWORD *)v5 + 8);
        v30 = (uint64_t *)(v5 + 64);
        v29 = v31;
        if (v31)
        {
          v32 = *(_DWORD *)(v29 - 8);
          v33 = (v52 + ~(v52 << 32)) ^ ((unint64_t)(v52 + ~(v52 << 32)) >> 22);
          v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
          v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
          v36 = v32 & ((v35 >> 31) ^ v35);
          v37 = (uint64_t *)(v29 + 24 * v36);
          v38 = *v37;
          if (*v37 != v52)
          {
            v39 = 1;
            while (v38)
            {
              v36 = (v36 + v39) & v32;
              v37 = (uint64_t *)(v29 + 24 * v36);
              v38 = *v37;
              ++v39;
              if (*v37 == v52)
                goto LABEL_45;
            }
            v37 = (uint64_t *)(v29 + 24 * *(unsigned int *)(v29 - 4));
          }
LABEL_45:
          if ((uint64_t *)(v29 + 24 * *(unsigned int *)(v29 - 4)) != v37)
          {
            *v37 = -1;
            v44 = v37[2];
            v37[2] = 0;
            if (v44)
              result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v44 + 64));
            v45 = v37[1];
            v37[1] = 0;
            if (v45)
              result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v45 + 8), v18);
            ++*(_DWORD *)(*v30 - 16);
            v46 = *v30;
            if (*v30)
              v47 = *(_DWORD *)(v46 - 12) - 1;
            else
              v47 = -1;
            *(_DWORD *)(v46 - 12) = v47;
            v48 = *v30;
            if (*v30)
            {
              v49 = 6 * *(_DWORD *)(v48 - 12);
              v50 = *(_DWORD *)(v48 - 4);
              if (v49 < v50 && v50 >= 9)
                result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v30, v50 >> 1, 0);
            }
          }
        }
        if (v17)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v17[8]);
        return result;
      }
      v19 = 0;
    }
    if ((unsigned __int8 *)v19 != result)
      result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
    goto LABEL_30;
  }
  if (v13)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v13 == a2)
      {
        *((_DWORD *)v12 + 2) = v16;
        return result;
      }
      if (v13 == -1)
        v25 = v12;
      v11 = (v11 + v26) & v6;
      v12 = (uint64_t *)(v2 + 16 * v11);
      v13 = *v12;
      ++v26;
    }
    while (*v12);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*v3 - 16);
      v12 = v25;
    }
  }
  *v12 = a2;
  *((_DWORD *)v12 + 2) = v16;
  v27 = *v3;
  if (*v3)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v40 = *v3;
  if (*v3)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 <= 2 * v42)
      return (unsigned __int8 *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)result + 9, v12);
  }
  else if (3 * v43 <= 4 * v42)
  {
    return (unsigned __int8 *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)result + 9, v12);
  }
  return result;
}

void sub_1972217D0(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::VideoPresentationManagerProxy::forEachSession(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v3 = result + 8;
  v2 = result[8];
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)result + 8);
    v6 = result;
    v7 = v5;
    v8 = *v3;
    if (*v3)
    {
      v9 = (_QWORD *)(v8 + 24 * *(unsigned int *)(v8 - 4));
      v22 = 0;
      v23 = 0;
      v10 = *(unsigned int *)(v8 - 12);
      if ((_DWORD)v10)
      {
        if (v10 >> 28)
        {
          __break(0xC471u);
          return result;
        }
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        LODWORD(v23) = v10;
        v22 = (_QWORD *)v11;
      }
      else
      {
        v11 = 0;
      }
    }
    else
    {
      v9 = 0;
      v11 = 0;
      v22 = 0;
      v23 = 0;
    }
    if (v9 != v6)
    {
      v12 = 0;
      do
      {
        v13 = v6[1];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v13 + 8));
        v14 = v6[2];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v14 + 64));
        v15 = (_QWORD *)(v11 + 16 * v12);
        *v15 = v13;
        v15[1] = v14;
        while (1)
        {
          v6 += 3;
          if (v6 == v7)
            break;
          if ((unint64_t)(*v6 + 1) > 1)
            goto LABEL_16;
        }
        v6 = v7;
LABEL_16:
        ++v12;
      }
      while (v6 != v9);
      HIDWORD(v23) = v12;
      v16 = v22;
      if (v12)
      {
        v17 = 16 * v12;
        do
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v20, v16);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v20, v21);
          v18 = v21;
          v21 = 0;
          if (v18)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v18 + 64));
          v19 = v20;
          v20 = 0;
          if (v19)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v19 + 8), v5);
          v16 += 2;
          v17 -= 16;
        }
        while (v17);
      }
    }
    return (_QWORD *)WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
  }
  return result;
}

void sub_197221988(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::VideoPresentationManagerProxy::requestBitmapImageForCurrentTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  WebCore::VideoPresentationInterfaceIOS *v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::VideoPresentationInterfaceIOS *v17;
  uint64_t *v18[8];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 48);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    goto LABEL_15;
  {
    WebKit::singleton(void)::singleton = 0;
LABEL_15:
    LOBYTE(v18[0]) = 0;
    v19 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a3);
    return (unsigned int *)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v18);
  }
  if (!WebKit::singleton(void)::singleton)
    goto LABEL_15;
  v5 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
  if (!v5)
    goto LABEL_15;
  v7 = (unsigned int *)(v5 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebKit::VideoPresentationManagerProxy::findInterface(a1, a2, &v17);
  v9 = v17;
  if (v17)
  {
    v10 = WebCore::VideoPresentationInterfaceIOS::playerIdentifier(v17);
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (v12)
    {
      LOBYTE(v18[0]) = 0;
      v19 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a3);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v18);
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (v14)
        v15 = v14 - 16;
      else
        v15 = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 208) + 176);
      v20 = v10;
      v21 = v16;
      v18[0] = &v21;
      v18[1] = &v20;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v5, v18, a3, 0, 0, 1);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((unsigned __int8 **)v9 + 8));
  }
  else
  {
    LOBYTE(v18[0]) = 0;
    v19 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a3);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v18);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
}

void sub_197221B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 64));
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197221C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(BOOL)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(BOOL)>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  v20 = (unsigned int *)*a2;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

void sub_197221E40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)a10);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)a10));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

float WebKit::VideoPresentationModelContext::videoDimensions(WebKit::VideoPresentationModelContext *this)
{
  return *((float *)this + 22);
}

void WebKit::VideoPresentationManagerProxy::createLayerHostViewWithID(WKLayerHostView **a1, _QWORD *a2, uint64_t a3, unsigned int a4, const FloatSize *a5)
{
  uint64_t *v9;
  WKLayerHostView *v10;
  uint64_t v11;
  const void *v12;
  id v13;
  void *v14;
  void *m_ptr;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  WebKit::LayerHostingContext *v24;
  char v25;
  NSObject *v26;
  CFTypeRef v27;
  void *v28;
  WebCore::VideoPresentationInterfaceAVKit *v29;
  uint64_t v30;
  CFTypeRef cf[2];
  uint64_t v32;
  WebCore::VideoPresentationInterfaceAVKit *v33;

  v9 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a2, a3);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v32, v9);
  v10 = *(WKLayerHostView **)(v32 + 40);
  *a1 = v10;
  if (v10)
  {
    CFRetain(v10);
  }
  else
  {
    v10 = objc_alloc_init(WKLayerHostView);
    *a1 = v10;
    -[WKLayerHostView setUserInteractionEnabled:](v10, "setUserInteractionEnabled:", 0);
    v11 = v32;
    if (v10)
      CFRetain(v10);
    v12 = *(const void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;
    if (v12)
      CFRelease(v12);
    v13 = objc_alloc_init(MEMORY[0x1E0C926D8]);
    v14 = v13;
    if (v13)
      CFRetain(v13);
    m_ptr = v10->_hostingView.m_ptr;
    v10->_hostingView.m_ptr = v14;
    if (m_ptr)
      CFRelease(m_ptr);
    -[WKLayerHostView addSubview:](v10, "addSubview:", v14);
    v16 = (void *)objc_msgSend(v14, "layer");
    objc_msgSend(v16, "setMasksToBounds:", 0);
    objc_msgSend(v16, "setName:", CFSTR("WKLayerHostView layer"));
    objc_msgSend(v16, "setFrame:", 0.0, 0.0, a5->m_width, a5->m_height);
    if (v14)
      CFRelease(v14);
  }
  v17 = a2[6];
  if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v18 - 8));
    v19 = v18 - 16;
    v20 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v18 + 32) + 24))
          + 22);
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = *(_QWORD *)(v20 + 136);
      if (v23)
        v24 = (WebKit::LayerHostingContext *)*(int *)(v23 + 108);
      else
        v24 = 0;
      WebKit::LayerHostingContext::createHostingHandle(v24, a4, cf);
      v10 = *a1;
      objc_msgSend((*a1)->_hostingView.m_ptr, "setHandle:", cf[0]);
      v27 = cf[0];
      cf[0] = 0;
      if (v27)
        CFRelease(v27);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v21);
      v25 = 0;
      goto LABEL_27;
    }
    v25 = 0;
  }
  else
  {
    v19 = 0;
    v25 = 1;
  }
  v26 = qword_1ECE71348;
  if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
  {
    LOWORD(cf[0]) = 0;
    _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "VideoPresentationManagerProxy::createLayerHostViewWithID: Unable to initialize hosting view, no GPU process", (uint8_t *)cf, 2u);
  }
LABEL_27:
  WebCore::VideoPresentationInterfaceAVKit::setupCaptionsLayer(v33, (CALayer *)-[WKLayerHostView layer](v10, "layer", cf[0]), a5);
  if ((v25 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v19 + 8));
  v29 = v33;
  v33 = 0;
  if (v29)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((unsigned __int8 **)v29 + 8));
  v30 = v32;
  v32 = 0;
  if (v30)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 8), v28);
}

void sub_197222130(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void **v12;
  const void *v14;

  v14 = *v12;
  *v12 = 0;
  if (v14)
    CFRelease(v14);
  if (a12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a12 + 64));
  if (a11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a11 + 8), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::returningToStandbyInterface@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  void *v15;
  uint64_t *v16[5];
  uint64_t v17;
  unsigned int v18;

  v4 = (uint64_t *)(this + 64);
  v3 = *(_QWORD *)(this + 64);
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_11;
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(this + 64));
  v7 = *v4;
  if (*v4)
  {
    v8 = *(_DWORD *)(v7 - 4);
    v9 = (uint64_t *)(v7 + 24 * v8);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v16[0] = v4;
  v16[1] = v5;
  v16[2] = v6;
  v16[3] = v9;
  v16[4] = (uint64_t *)(v7 + 24 * v8);
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const>(v16, &v17);
  if (!v18)
  {
LABEL_10:
    this = WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v10);
LABEL_11:
    *a2 = 0;
    return this;
  }
  v11 = 16 * v18;
  v12 = (_QWORD *)(v17 + 8);
  while (1)
  {
    v13 = *v12;
    v14 = (unsigned __int8 **)(*v12 + 64);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v14);
    if (*(_BYTE *)(v13 + 206))
      break;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v14);
    v12 += 2;
    v11 -= 16;
    if (!v11)
      goto LABEL_10;
  }
  *a2 = v13;
  return WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
}

void sub_1972222D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManagerProxy::createViewWithID(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, const FloatSize *a4@<X3>, const WebCore::FloatSize *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v12;
  WTF::StringImpl *v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  WTF *v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t i;
  WTF::StringImpl *v36;
  int v37;
  double m_width;
  double m_height;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  WKVideoView *v44;
  WebKit::VideoPresentationModelContext *v45;
  const void *v46;
  WebKit::VideoPresentationModelContext *v47;
  const void *v48;
  WebKit::VideoPresentationModelContext *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  const void *v60;
  uint64_t v61;
  WebKit::VideoPresentationModelContext *v62;
  IPC::Encoder *v63[4];
  CFTypeRef cf;
  WebKit::VideoPresentationModelContext *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68[2];
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint8_t buf[16];
  int v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v67 = a2;
  v12 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v65, v12);
  WebKit::VideoPresentationManagerProxy::addClientForContext((uint64_t)a1, a2);
  WebKit::VideoPresentationManagerProxy::createLayerHostViewWithID((WKLayerHostView **)&cf, a1, a2, a3, a4);
  if (!*((_QWORD *)v65 + 8))
  {
    v15 = a1[7];
    v17 = *(_QWORD *)(v15 + 64);
    v16 = *(IPC::Encoder **)(v15 + 72);
    v63[0] = (IPC::Encoder *)"VideoPresentationManagerProxy";
    v63[1] = (IPC::Encoder *)30;
    v63[2] = (IPC::Encoder *)"createViewWithID";
    v63[3] = v16;
    if (*(_BYTE *)(v17 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v69, ", Creating AVPlayerLayerView");
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
      v19 = v69;
      v69 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v70;
      v70 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v71;
      v71 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = qword_1ECE710F0;
      v23 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v23)
      {
        WTF::String::utf8();
        v25 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v25;
        _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v23 = v68[0];
        v68[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
            v23 = (WTF *)WTF::fastFree(v23, v24);
          else
            --*(_DWORD *)v23;
        }
      }
      if (WebKit2LogFullscreen)
      {
        v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v27 = *v26;
          if ((v27 & 1) != 0)
            break;
          v28 = __ldaxr(v26);
          if (v28 == v27)
          {
            if (!__stxr(v27 | 1, v26))
            {
              v29 = WTF::Logger::observers(v23);
              v30 = *(unsigned int *)(v29 + 12);
              if ((_DWORD)v30)
              {
                v31 = *(uint64_t **)v29;
                v32 = *(_QWORD *)v29 + 8 * v30;
                do
                {
                  v33 = *v31;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v74 = 0;
                  WTF::LogArgument<void const*>::toString();
                  v75 = 0;
                  WTF::String::String((WTF::String *)v76, ", Creating AVPlayerLayerView");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v33 + 16))(v33, &WebKit2LogFullscreen, 0, v68);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v34);
                  for (i = 40; i != -8; i -= 16)
                  {
                    v36 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                  }
                  ++v31;
                }
                while (v31 != (uint64_t *)v32);
              }
              v37 = __ldxr(v26);
              if (v37 == 1)
              {
                if (!__stlxr(0, v26))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v13 = v72;
      v72 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v24);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    m_width = a4->m_width;
    m_height = a4->m_height;
    v40 = (void *)objc_msgSend((id)WebCore::allocWebAVPlayerLayerViewInstance(v13), "initWithFrame:", 0.0, 0.0, m_width, m_height);
    WebKit::VideoPresentationModelContext::setVideoDimensions((uint64_t)v65, a5);
    v41 = (void *)objc_msgSend(v40, "layer");
    v42 = v41;
    if (v41)
      CFRetain(v41);
    WebCore::FloatSize::operator CGSize();
    objc_msgSend(v42, "setVideoDimensions:");
    objc_msgSend(v42, "setPresentationModel:", v65);
    v43 = (void *)cf;
    objc_msgSend(v42, "setVideoSublayer:", objc_msgSend((id)cf, "layer"));
    objc_msgSend(v40, "addSubview:", v43);
    objc_msgSend(v40, "setUserInteractionEnabled:", 0);
    if (!objc_msgSend((id)objc_msgSend(v43, "layer"), "superlayer"))
      objc_msgSend(v42, "addSublayer:", objc_msgSend(v43, "layer"));
    v44 = -[WKVideoView initWithFrame:playerView:]([WKVideoView alloc], "initWithFrame:playerView:", v40, 0.0, 0.0, m_width, m_height);
    v45 = v65;
    v46 = (const void *)*((_QWORD *)v65 + 6);
    *((_QWORD *)v65 + 6) = v42;
    if (v46)
    {
      CFRelease(v46);
      v42 = (void *)*((_QWORD *)v45 + 6);
    }
    WebCore::FloatSize::operator CGSize();
    objc_msgSend(v42, "setVideoDimensions:");
    v47 = v65;
    if (v40)
      CFRetain(v40);
    v48 = (const void *)*((_QWORD *)v47 + 7);
    *((_QWORD *)v47 + 7) = v40;
    if (v48)
      CFRelease(v48);
    v49 = v65;
    if (v44)
      CFRetain(v44);
    v50 = (const void *)*((_QWORD *)v49 + 8);
    *((_QWORD *)v49 + 8) = v44;
    if (v50)
      CFRelease(v50);
    if (v44)
      CFRelease(v44);
    if (v40)
      CFRelease(v40);
  }
  v51 = a1[6];
  if (v51)
  {
    v52 = *(_QWORD *)(v51 + 8);
    if (v52)
    {
      v53 = *(_QWORD *)(v52 + 192);
      v54 = *(_QWORD *)(*(_QWORD *)(v52 + 16) + 1896);
      v55 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v55 = 1501;
      *(_QWORD *)(v55 + 8) = v54;
      *(_QWORD *)(v55 + 528) = v55 + 16;
      *(_QWORD *)(v55 + 536) = v55 + 16;
      *(_OWORD *)(v55 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v55 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v55);
      v63[0] = (IPC::Encoder *)v55;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v55, &v67);
      IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v55, (int *)a5);
      buf[0] = 0;
      LOBYTE(v74) = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v53, v63, 0, (uint64_t)buf, 1);
      if ((_BYTE)v74)
      {
        v56 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      v57 = v63[0];
      v63[0] = 0;
      if (v57)
      {
        IPC::Encoder::~Encoder(v57, v14);
        WTF::fastFree(v58, v59);
      }
    }
  }
  v60 = (const void *)*((_QWORD *)v65 + 8);
  *a6 = v60;
  if (v60)
    CFRetain(v60);
  if (cf)
    CFRelease(cf);
  v61 = v66;
  v66 = 0;
  if (v61)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v61 + 64));
  v62 = v65;
  v65 = 0;
  if (v62)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v62 + 1), v14);
}

void sub_197222918(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,char a31)
{
  unsigned __int8 *v31;
  int v33;

  v33 = __ldxr(v31);
  if (v33 == 1)
  {
    if (!__stlxr(0, v31))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      if (cf)
        CFRelease(cf);
      if (a21)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a21 + 64));
      if (a20)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a20 + 8), a2);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebKit::VideoPresentationManagerProxy::setupFullscreenWithID(uint64_t a1, uint64_t a2, unsigned int a3, const FloatRect *a4, const FloatSize *a5, float *a6, unsigned int a7, BOOL a8, BOOL a9, BOOL a10)
{
  uint64_t v10;
  uint64_t *v19;
  float v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  UIView *v31;
  WebCore::VideoPresentationInterfaceAVKit *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef cf;
  uint64_t v38;
  WebCore::VideoPresentationInterfaceAVKit *v39;
  _BYTE v40[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 && *(_QWORD *)(v10 + 8))
  {
    v19 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((_QWORD *)a1, a2);
    std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v38, v19);
    if ((*((_DWORD *)v39 + 39) | 4) == 4)
      WebKit::VideoPresentationManagerProxy::addClientForContext(a1, a2);
    if (*(_BYTE *)(a1 + 32))
    {
      if (*a6 > 0.0)
      {
        v20 = a6[1];
        if (v20 > 0.0)
          *(float *)(a1 + 40) = 100.0 / (float)(*a6 / v20);
      }
      WebKit::VideoPresentationManagerProxy::requestVideoContentLayer(*(IPC::Encoder **)(a1 + 48), a2);
    }
    else if (a7 >= 8)
    {
      v34 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v40 = 136315138;
        *(_QWORD *)&v40[4] = "void WebKit::VideoPresentationManagerProxy::setupFullscreenWithID(PlaybackSessionContextIde"
                             "ntifier, WebKit::LayerHostingContextID, const WebCore::FloatRect &, const WebCore::FloatSiz"
                             "e &, const WebCore::FloatSize &, float, HTMLMediaElementEnums::VideoFullscreenMode, BOOL, BOOL, BOOL)";
        _os_log_fault_impl(&dword_196BCC000, v34, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 908: Invalid message dispatched %s", v40, 0xCu);
      }
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (v35)
        v36 = v35 - 16;
      else
        v36 = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 208) + 144) + 98) = 1;
    }
    else
    {
      if (!*(_QWORD *)(v38 + 64))
      {
        WebKit::VideoPresentationManagerProxy::createViewWithID((_QWORD *)a1, a2, a3, a5, (const WebCore::FloatSize *)a6, &cf);
        if (cf)
          CFRelease(cf);
      }
      v22 = *(const void **)(v38 + 40);
      if (v22)
      {
        *(_QWORD *)v40 = *(_QWORD *)(v38 + 40);
        CFRetain(v22);
      }
      else
      {
        WebKit::VideoPresentationManagerProxy::createLayerHostViewWithID((WKLayerHostView **)v40, (_QWORD *)a1, a2, a3, a5);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (v23)
        v24 = v23 - 16;
      else
        v24 = 0;
      v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v24 + 40) + 8) + 584))(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8));
      if (v25)
        objc_msgSend(*(id *)v40, "setVisibilityPropagationView:", v25);
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (v26)
        v27 = v26 - 16;
      else
        v27 = 0;
      v28 = *(_QWORD *)(v27 + 184);
      if (*(_BYTE *)(v28 + 32))
      {
        __break(0xC471u);
        JUMPOUT(0x197222E0CLL);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v28 + 72) + 8);
      if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
        v31 = *(UIView **)(v30 + 48);
      else
        v31 = 0;
      WebCore::VideoPresentationInterfaceAVKit::setupFullscreen(v39, *(UIView **)(v38 + 40), a4, (const FloatSize *)a6, v31, a7, a8, a9, a10);
      if (*(_QWORD *)v40)
        CFRelease(*(CFTypeRef *)v40);
    }
    v32 = v39;
    v39 = 0;
    if (v32)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((unsigned __int8 **)v32 + 8));
    v33 = v38;
    v38 = 0;
    if (v33)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v33 + 8), v21);
  }
}

void sub_197222E54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a12 + 64));
  if (a11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a11 + 8), a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::setPlayerIdentifier(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!result[32])
  {
    result = (unsigned __int8 *)WebKit::VideoPresentationManagerProxy::findInterface((uint64_t)result, a2, &v3);
    v2 = v3;
    if (v3)
    {
      WebCore::VideoPresentationInterfaceAVKit::setPlayerIdentifier();
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 64));
    }
  }
  return result;
}

void sub_197222F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 64));
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::setHasVideo(unsigned __int8 *result, uint64_t a2)
{
  WebCore::VideoPresentationInterfaceAVKit *v2;
  WebCore::VideoPresentationInterfaceAVKit *v3;

  if (!result[32])
  {
    result = (unsigned __int8 *)WebKit::VideoPresentationManagerProxy::findInterface((uint64_t)result, a2, &v3);
    v2 = v3;
    if (v3)
    {
      WebCore::VideoPresentationInterfaceAVKit::hasVideoChanged(v3);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((unsigned __int8 **)v2 + 8));
    }
  }
  return result;
}

void sub_197222F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 64));
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::setVideoDimensions(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t *v5;
  unsigned __int8 *result;
  void *v7;
  float v8;
  uint64_t v9;
  WebKit::VideoPresentationModelContext *v10;
  WebKit::VideoPresentationModelContext *v11;
  uint64_t v12;

  v5 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((_QWORD *)a1, a2);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v11, v5);
  result = (unsigned __int8 *)WebKit::VideoPresentationModelContext::setVideoDimensions((uint64_t)v11, (const WebCore::FloatSize *)a3);
  if (*(_BYTE *)(a1 + 32))
  {
    if (*a3 > 0.0)
    {
      v8 = a3[1];
      if (v8 > 0.0)
        *(float *)(a1 + 40) = 100.0 / (float)(*a3 / v8);
    }
  }
  v9 = v12;
  v12 = 0;
  if (v9)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v9 + 64));
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v10 + 1), v7);
  return result;
}

void sub_197223024(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a10 + 64));
  if (a9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a9 + 8), a2);
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::enterFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  WebCore::VideoPresentationInterfaceIOS *v11;

  if (*(_BYTE *)(a1 + 32))
  {
    WebKit::VideoPresentationManagerProxy::didEnterFullscreen((_QWORD *)a1, a2, (float *)(a1 + 36));
  }
  else
  {
    v4 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((_QWORD *)a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 64));
    MEMORY[0x19AEB3900](v4);
    v5 = (_QWORD *)(a1 + 64);
    v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 64));
    v7 = v6;
    v9 = v8;
    if (*v5)
      v10 = *v5 + 24 * *(unsigned int *)(*v5 - 4);
    else
      v10 = 0;
    if ((_QWORD *)v10 != v6)
    {
      do
      {
        if (*v7 != a2)
        {
          v11 = (WebCore::VideoPresentationInterfaceIOS *)v7[2];
          if ((*((_DWORD *)v11 + 39) & *(_DWORD *)(v4 + 156)) != 0)
            WebCore::VideoPresentationInterfaceIOS::requestHideAndExitFullscreen(v11);
        }
        while (1)
        {
          v7 += 3;
          if (v7 == v9)
            break;
          if ((unint64_t)(*v7 + 1) > 1)
            goto LABEL_14;
        }
        v7 = v9;
LABEL_14:
        ;
      }
      while (v7 != (_QWORD *)v10);
    }
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 64));
  }
}

void sub_197223178(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::exitFullscreen(WebKit::VideoPresentationManagerProxy *this, uint64_t a2, uint64_t *a3, float a4, float a5, float a6, float a7)
{
  uint64_t v8;
  uint64_t v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *result;
  unsigned __int8 **v24;
  uint64_t v25;
  uint64_t v26;
  FloatRect v27;

  v27.m_location.m_x = a4;
  v27.m_location.m_y = a5;
  v27.m_size.m_width = a6;
  v27.m_size.m_height = a7;
  v8 = *((_QWORD *)this + 6);
  if (!v8 || !*(_QWORD *)(v8 + 8) || (v10 = *((_QWORD *)this + 8)) == 0)
  {
LABEL_13:
    v22 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 0);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v12 = *(_DWORD *)(v10 - 8);
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = *(_QWORD *)(v10 + 24 * v16);
  if (v17 != a2)
  {
    v18 = 1;
    while (v17)
    {
      v16 = (v16 + v18) & v12;
      v17 = *(_QWORD *)(v10 + 24 * v16);
      ++v18;
      if (v17 == a2)
        goto LABEL_8;
    }
    goto LABEL_13;
  }
LABEL_8:
  if (WebKit::VideoPresentationManagerProxy::hasMode(this, 1))
  {
    v19 = *((_QWORD *)this + 6);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
        v21 = v20 - 16;
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 104) + 32))(*(_QWORD *)(v21 + 104));
  }
  if (*((_BYTE *)this + 32))
  {
    WebKit::VideoPresentationManagerProxy::returnVideoContentLayer(*((IPC::Encoder **)this + 6), a2);
    v22 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, 1);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v24 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(this, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v24 + 8);
  v25 = WebCore::VideoPresentationInterfaceIOS::exitFullscreen((WebCore::VideoPresentationInterfaceIOS *)v24, &v27);
  v26 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v25);
  result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v24)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v24[8]);
  return result;
}

void sub_197223394(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManagerProxy::exitFullscreenWithoutAnimationToMode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4;
  unsigned __int8 **v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a3 >= 8)
  {
    v6 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v9 = 136315138;
      v10 = "void WebKit::VideoPresentationManagerProxy::exitFullscreenWithoutAnimationToMode(PlaybackSessionContextIdent"
            "ifier, WebCore::HTMLMediaElementEnums::VideoFullscreenMode)";
      _os_log_fault_impl(&dword_196BCC000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 1035: Invalid message dispatched %s", (uint8_t *)&v9, 0xCu);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 208) + 144) + 98) = 1;
  }
  else
  {
    v4 = a3;
    if (*(_BYTE *)(a1 + 32))
    {
      WebKit::VideoPresentationManagerProxy::fullscreenModeChanged(*(_QWORD **)(a1 + 48), a2, a3);
    }
    else
    {
      v5 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((_QWORD *)a1, a2)[1];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v5 + 8);
      WebCore::VideoPresentationInterfaceIOS::exitFullscreenWithoutAnimationToMode((WebCore::VideoPresentationInterfaceIOS *)v5);
      if (v5)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v5[8]);
      WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange((WebKit::VideoPresentationManagerProxy *)a1, (v4 & 2) != 0);
    }
  }
}

void sub_197223564(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::setVideoFullscreenMode(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 **v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a3 >= 8)
  {
    v5 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v8 = 136315138;
      v9 = "void WebKit::VideoPresentationManagerProxy::setVideoFullscreenMode(PlaybackSessionContextIdentifier, WebCore:"
           ":HTMLMediaElementEnums::VideoFullscreenMode)";
      _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 1049: Invalid message dispatched %s", (uint8_t *)&v8, 0xCu);
    }
    v6 = *(_QWORD *)(a1[6] + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 208) + 144) + 98) = 1;
  }
  else
  {
    v4 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 8);
    WebCore::VideoPresentationInterfaceIOS::setMode((WebCore::VideoPresentationInterfaceIOS *)v4);
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v4[8]);
  }
}

void sub_1972236B8(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::clearVideoFullscreenMode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3 >= 8)
  {
    v4 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v7 = 136315138;
      v8 = "void WebKit::VideoPresentationManagerProxy::clearVideoFullscreenMode(PlaybackSessionContextIdentifier, WebCor"
           "e::HTMLMediaElementEnums::VideoFullscreenMode)";
      _os_log_fault_impl(&dword_196BCC000, v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/VideoPresentationManagerProxy.mm 1056: Invalid message dispatched %s", (uint8_t *)&v7, 0xCu);
    }
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 208) + 144) + 98) = 1;
  }
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::setInlineRect(unsigned __int8 *result, uint64_t a2, const FloatRect *a3)
{
  unsigned __int8 **v4;

  if (!result[32])
  {
    v4 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(result, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 8);
    result = (unsigned __int8 *)WebCore::VideoPresentationInterfaceIOS::setInlineRect((WebCore::VideoPresentationInterfaceIOS *)v4, a3);
    if (v4)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v4[8]);
  }
  return result;
}

void sub_197223814(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::setHasVideoContentLayer(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 **v3;

  if (*(_BYTE *)(a1 + 32))
  {
    if (a3)
      WebKit::VideoPresentationManagerProxy::enterFullscreen(a1, a2);
    else
      WebKit::VideoPresentationManagerProxy::didExitFullscreen(a1, a2);
  }
  else
  {
    v3 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface((_QWORD *)a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v3 + 8);
    WebCore::VideoPresentationInterfaceIOS::setHasVideoContentLayer((WebCore::VideoPresentationInterfaceIOS *)v3);
    if (v3)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v3[8]);
  }
}

void sub_1972238B4(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManagerProxy::cleanupFullscreen(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 **v2;

  if (a1[32])
  {
    WebKit::VideoPresentationManagerProxy::didCleanupFullscreen(a1, a2);
  }
  else
  {
    v2 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 8);
    WebCore::VideoPresentationInterfaceIOS::cleanupFullscreen((WebCore::VideoPresentationInterfaceIOS *)v2);
    if (v2)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v2[8]);
  }
}

void sub_197223938(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::preparedToReturnToInline(unsigned __int8 *result, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  FloatRect v13;

  v13.m_location.m_x = a4;
  v13.m_location.m_y = a5;
  v13.m_size.m_width = a6;
  v13.m_size.m_height = a7;
  v7 = *((_QWORD *)result + 6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v11 = result;
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 88) + 32))(*(_QWORD *)(v8 + 88), v8 - 16);
      if (!v11[32])
      {
        v12 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(v11, a2)[1];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v12 + 8);
        result = (unsigned __int8 *)WebCore::VideoPresentationInterfaceIOS::preparedToReturnToInline((WebCore::VideoPresentationInterfaceIOS *)v12, a3, &v13);
        if (v12)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v12[8]);
      }
    }
  }
  return result;
}

void sub_1972239F0(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::preparedToExitFullscreen(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 **v2;

  if (!result[32])
  {
    v2 = (unsigned __int8 **)WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(result, a2)[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 8);
    result = (unsigned __int8 *)WebCore::VideoPresentationInterfaceIOS::preparedToExitFullscreen((WebCore::VideoPresentationInterfaceIOS *)v2);
    if (v2)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(v2[8]);
  }
  return result;
}

void sub_197223A64(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::textTrackRepresentationUpdate(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  CFTypeRef cf;
  WTF *v8;

  WebCore::ShareableBitmap::create();
  result = (uint64_t)v8;
  if (!v8)
    return result;
  WebCore::ShareableBitmap::createPlatformImage();
  v5 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 64));
  if (cf)
    CFRetain(cf);
  WebCore::VideoFullscreenCaptions::setTrackRepresentationImage();
  if (cf)
  {
    CFRelease(cf);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v5)
LABEL_6:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 64));
LABEL_7:
  if (cf)
    CFRelease(cf);
  return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v8, v6);
}

void sub_197223B54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, WTF *a12)
{
  unsigned __int8 **v12;
  uint64_t v13;

  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v12);
  if (cf)
    CFRelease(cf);
  if (a12)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a12, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetContentsScale(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  unsigned __int8 *result;

  v4 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 64));
  result = (unsigned __int8 *)WebCore::VideoFullscreenCaptions::setTrackRepresentationContentsScale((WebCore::VideoFullscreenCaptions *)(v4 + 32), a3);
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 64));
  return result;
}

void sub_197223C20(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetHidden(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *result;

  v2 = WebKit::VideoPresentationManagerProxy::ensureModelAndInterface(a1, a2)[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 64));
  result = (unsigned __int8 *)WebCore::VideoFullscreenCaptions::setTrackRepresentationHidden((WebCore::VideoFullscreenCaptions *)(v2 + 32));
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 64));
  return result;
}

void sub_197223C98(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManagerProxy::playerViewController(uint64_t a1, uint64_t a2)
{
  WebCore::VideoPresentationInterfaceAVKit *v2;
  uint64_t v3;
  WebCore::VideoPresentationInterfaceAVKit *v5;

  WebKit::VideoPresentationManagerProxy::findInterface(a1, a2, &v5);
  v2 = v5;
  if (!v5)
    return 0;
  v3 = WebCore::VideoPresentationInterfaceAVKit::avPlayerViewController(v5);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*((unsigned __int8 **)v2 + 8));
  return v3;
}

void sub_197223D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 64));
  _Unwind_Resume(a1);
}

void sub_1972240A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197224128(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c73_ZTSKZ60__WKContactPicker_presentWithRequestData_completionHandler__E3__8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c73_ZTSKZ60__WKContactPicker_presentWithRequestData_completionHandler__E3__8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972241E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1972242FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19722450C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1972245D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  _Unwind_Resume(a1);
}

void sub_197224930(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  void *v24;
  va_list va;

  va_start(va, a18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  v22 = *(WTF::StringImpl **)(v19 - 96);
  *(_QWORD *)(v19 - 96) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 32, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 16, v23);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v24);
  _Unwind_Resume(a1);
}

void sub_197224AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  if (cf)
    CFRelease(cf);
  objc_destroyWeak(v18);
  _Unwind_Resume(a1);
}

void sub_197224B70(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c52_ZTSKZ39__WKContactPicker_dismissWithContacts__E3__9(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef result;

  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a1 + 40;
  *(_QWORD *)(a1 + 32) = v3;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(v4 + 8) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_197224BCC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c52_ZTSKZ39__WKContactPicker_dismissWithContacts__E3__9(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_19722506C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972253F8(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::createItemRecursive(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD v13[4];
  void *v14;
  CFTypeRef cf[8];
  CFTypeRef *v16;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 116));
  v5 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 104);
    v7 = 120 * v5;
    do
    {
      WebKit::createItemRecursive(cf, v6, a2);
      if (cf[0])
      {
        objc_msgSend(v4, "addObject:");
        v8 = cf[0];
        cf[0] = 0;
        if (v8)
          CFRelease(v8);
      }
      v6 += 120;
      v7 -= 120;
    }
    while (v7);
  }
  v14 = v4;
  v13[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1 + 88);
  v13[1] = v9;
  v13[2] = v10;
  v13[3] = v11;
  cf[0] = v13;
  cf[1] = &v14;
  cf[2] = v13;
  cf[3] = &v14;
  cf[4] = v13;
  cf[5] = &v14;
  cf[6] = v13;
  cf[7] = &v14;
  v12 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v12 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v16 = cf;
    ((void (*)(CFTypeRef **, uint64_t))off_1E34C9DF0[v12])(&v16, a1);
    if (v4)
      CFRelease(v4);
  }
}

void sub_1972255E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_19722571C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationModelContext::hasVideo(WebKit::VideoPresentationModelContext *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 64));
        v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), a2);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(*a2 + 8));
  *a1 = v4;
  v5 = a2[1];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 64));
  a1[1] = v5;
  return a1;
}

void sub_197225820(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  _Unwind_Resume(exception_object);
}

Class initCNContactPickerViewController(void)
{
  Class result;
  void *v1;

  if ((byte_1EE341809 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/ContactsUI.framework/ContactsUI", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x1972258A0);
    }
    unk_1EE341820 = v1;
    byte_1EE341809 = 1;
  }
  result = objc_getClass("CNContactPickerViewController");
  qword_1EE341818 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getCNContactPickerViewControllerClass = CNContactPickerViewControllerFunction;
  return result;
}

uint64_t CNContactPickerViewControllerFunction(void)
{
  return qword_1EE341818;
}

Class initCNContactFormatter(void)
{
  Class result;

  if ((byte_1EE34180A & 1) == 0)
  {
    unk_1EE341830 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1EE34180A = 1;
  }
  result = objc_getClass("CNContactFormatter");
  qword_1EE341828 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x19722595CLL);
  }
  getCNContactFormatterClass = CNContactFormatterFunction;
  return result;
}

uint64_t CNContactFormatterFunction(void)
{
  return qword_1EE341828;
}

uint64_t ___ZL15ContactsLibraryv_block_invoke_0()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

Class initCNMutableContact(void)
{
  Class result;

  if ((byte_1EE34180A & 1) == 0)
  {
    unk_1EE341830 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1EE34180A = 1;
  }
  result = objc_getClass("CNMutableContact");
  qword_1EE341838 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x197225A2CLL);
  }
  off_1ECE6C580 = CNMutableContactFunction;
  return result;
}

uint64_t CNMutableContactFunction(void)
{
  return qword_1EE341838;
}

Class initCNLabeledValue(void)
{
  Class result;

  if ((byte_1EE34180A & 1) == 0)
  {
    unk_1EE341830 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1EE34180A = 1;
  }
  result = objc_getClass("CNLabeledValue");
  qword_1EE341840 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x197225AB8);
  }
  _MergedGlobals_132 = CNLabeledValueFunction;
  return result;
}

uint64_t CNLabeledValueFunction(void)
{
  return qword_1EE341840;
}

Class initCNPhoneNumber(void)
{
  Class result;

  if ((byte_1EE34180A & 1) == 0)
  {
    unk_1EE341830 = ___ZL15ContactsLibraryv_block_invoke_0();
    byte_1EE34180A = 1;
  }
  result = objc_getClass("CNPhoneNumber");
  qword_1EE341848 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x197225B44);
  }
  off_1ECE6C578 = CNPhoneNumberFunction;
  return result;
}

uint64_t CNPhoneNumberFunction(void)
{
  return qword_1EE341848;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::TextItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ScrollableItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ImageItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ContainerType)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>@<X0>(WebKit *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  v6 = objc_alloc((Class)WebKit::getWKTextExtractionContainerItemClass(a1));
  if (((v5 - 1) & 0xF8) != 0)
    v7 = 0;
  else
    v7 = (v5 - 1) + 1;
  WebCore::FloatRect::operator CGRect();
  result = objc_msgSend(v6, "initWithContainer:rectInWebView:children:", v7, **(_QWORD **)(v4 + 56));
  *a3 = result;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::TextItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ScrollableItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ImageItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ContainerType)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v10;
  WebKit *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WebKit *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  WebKit *v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t *v37;

  v10 = *a1;
  v11 = (WebKit *)WebCore::FloatRect::operator CGRect();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = **(uint64_t ***)(v10 + 8);
  if (*((_BYTE *)a2 + 72))
  {
    v21 = objc_alloc((Class)WebKit::getWKTextExtractionEditableClass(v11));
    if (*((_BYTE *)a2 + 72))
    {
      v3 = v21;
      if (a2[6])
      {
        v22 = WTF::StringImpl::operator NSString *();
        if (!*((_BYTE *)a2 + 72))
          goto LABEL_36;
        v4 = (__CFString *)v22;
      }
      else
      {
        v4 = &stru_1E351F1B8;
      }
      if (!a2[7])
      {
        v24 = &stru_1E351F1B8;
        goto LABEL_9;
      }
      v23 = WTF::StringImpl::operator NSString *();
      if (*((_BYTE *)a2 + 72))
      {
        v24 = (const __CFString *)v23;
LABEL_9:
        v3 = (void *)objc_msgSend(v3, "initWithLabel:placeholder:isSecure:isFocused:", v4, v24, *((unsigned __int8 *)a2 + 64), *((unsigned __int8 *)a2 + 65));
        goto LABEL_11;
      }
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v3 = 0;
LABEL_11:
  v37 = v20;
  if (*((_BYTE *)a2 + 32))
  {
    v25 = a2[2];
    v26 = a2[3];
    v27 = a2[5];
    if (v27)
      v27 = *(unsigned int *)(v27 + 4);
    if (v26 + v25 <= v27)
      v6 = a2[2];
    else
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    if (v26 + v25 <= v27)
      v5 = a2[3];
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v28 = (WebKit *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a2 + 3));
  v4 = (__CFString *)v28;
  v29 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v29)
  {
    v30 = *a2;
    v31 = 56 * v29;
    do
    {
      v32 = a2[5];
      if (v32)
        v32 = *(unsigned int *)(v32 + 4);
      if (*(_QWORD *)(v30 + 48) + *(_QWORD *)(v30 + 40) <= v32)
      {
        v33 = objc_alloc((Class)WebKit::getWKTextExtractionLinkClass(v28));
        v28 = (WebKit *)objc_msgSend(v33, "initWithURL:range:", WTF::URL::operator NSURL *(), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 48));
        v34 = v28;
        if (v28)
        {
          -[__CFString addObject:](v4, "addObject:", v28);
          CFRelease(v34);
        }
      }
      v30 += 56;
      v31 -= 56;
    }
    while (v31);
  }
  v20 = a3;
  v7 = objc_alloc((Class)WebKit::getWKTextExtractionTextItemClass(v28));
  if (a2[5])
  {
    v35 = (const __CFString *)WTF::StringImpl::operator NSString *();
    goto LABEL_31;
  }
LABEL_37:
  v35 = &stru_1E351F1B8;
LABEL_31:
  v36 = objc_msgSend(v7, "initWithContent:selectedRange:links:editable:rectInWebView:children:", v35, v6, v5, v4, v3, v37, v13, v15, v17, v19);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  *v20 = v36;
}

void sub_197225E44(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::TextItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ScrollableItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ImageItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ContainerType)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>@<X0>(WebKit *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = objc_alloc((Class)WebKit::getWKTextExtractionScrollableItemClass(a1));
  WebCore::FloatSize::operator CGSize();
  v6 = v5;
  v8 = v7;
  WebCore::FloatRect::operator CGRect();
  result = objc_msgSend(v4, "initWithContentSize:rectInWebView:children:", **(_QWORD **)(v3 + 24), v6, v8, v9, v10, v11, v12);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::TextItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ScrollableItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ImageItemData const&)#1},WebKit::createItemWithChildren(WebCore::TextExtraction::Item const&,WTF::Function<WebCore::FloatRect ()(WebCore::FloatRect const&)> const&,NSArray<WKTextExtractionItem *> *)::{lambda(WebCore::TextExtraction::ContainerType)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>@<X0>(WebKit *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  id v6;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t result;

  v5 = *(_QWORD *)a1;
  v6 = objc_alloc((Class)WebKit::getWKTextExtractionImageItemClass(a1));
  if (*a2)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  if (a2[1])
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  WebCore::FloatRect::operator CGRect();
  result = objc_msgSend(v6, "initWithName:altText:rectInWebView:children:", v7, v8, **(_QWORD **)(v5 + 40));
  *a3 = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(WebKit::WebPageProxy const&,WebKit::UserMediaPermissionRequestProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C9E20;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(WebKit::WebPageProxy const&,WebKit::UserMediaPermissionRequestProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C9E20;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(WebKit::WebPageProxy const&,WebKit::UserMediaPermissionRequestProxy &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 16);
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    v2 = *v1;
    *v1 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    WebKit::requestAVCaptureAccessForType((PAL *)2, v1);
  }
}

void sub_1972260AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34C9E48;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_1972261B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::setVideoDimensions(WebCore::FloatSize const&)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 8));
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect>(WTF::Logger::LogSiteIdentifier *a1, WebCore::FloatRect *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int v23;
  WTF *v24[2];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint8_t buf[16];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WebCore::FloatRect::toJSONString(a2);
  *(_QWORD *)buf = v26;
  v24[0] = v25;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v24, &v27);
  if (v27)
  {
    v6 = v25;
    v25 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v26;
    v26 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = qword_1ECE710F0;
    v9 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v9)
    {
      WTF::String::utf8();
      v11 = v24[0] ? (char *)v24[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v9 = v24[0];
      v24[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          v9 = (WTF *)WTF::fastFree(v9, v10);
        else
          --*(_DWORD *)v9;
      }
    }
    if (WebKit2LogFullscreen)
    {
      v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v13 = *v12;
        if ((v13 & 1) != 0)
          break;
        v14 = __ldaxr(v12);
        if (v14 == v13)
        {
          if (!__stxr(v13 | 1, v12))
          {
            v15 = WTF::Logger::observers(v9);
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16)
            {
              v17 = *(uint64_t **)v15;
              v18 = *(_QWORD *)v15 + 8 * v16;
              do
              {
                v19 = *v17;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(a1);
                v29 = 1;
                WebCore::FloatRect::toJSONString(a2);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v24, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v19 + 16))(v19, &WebKit2LogFullscreen, 0, v24);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v20);
                for (i = 24; i != -8; i -= 16)
                {
                  v22 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                }
                ++v17;
              }
              while (v17 != (uint64_t *)v18);
            }
            v23 = __ldxr(v12);
            if (v23 == 1)
            {
              if (!__stlxr(0, v12))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19722652C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::FloatSize *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::FloatSize::toJSONString(a4);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v33 = 1;
                WebCore::FloatSize::toJSONString(a4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_197226940(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::willEnterPictureInPicture(void)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::failedToEnterPictureInPicture(void)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationModelContext::willExitPictureInPicture(void)::$_0,void,WebCore::VideoPresentationModelClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C9F10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C9F10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v4;
  unsigned __int8 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>((uint64_t *)(a1 + 8));
  v4 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a2);
  if (v4 >= 0x100u && (v5 = v4, IPC::Decoder::decode<WTF::String>(a2, &v11), v12))
  {
    WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(v2, v5, &v11);
    result = v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v10 = a2[3];
    if (v10 && v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    return IPC::Connection::cancelReply<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(v2);
  }
  return result;
}

void sub_197226C18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::VideoPresentationManager::RequestRouteSharingPolicyAndContextUID,WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>>(uint64_t *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  v3 = 0;
  WTF::CompletionHandler<void ()(WebCore::RouteSharingPolicy,WTF::String)>::operator()(a1, 0, &v3);
  result = v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

void sub_197226C9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = (uint64_t *)(v17 + 24 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (*v25);
          v26 = v17 + 24 * v24;
          v29 = *(_QWORD *)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          *v28 = 0;
          if (v29)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v27 + 64));
          v30 = *(v28 - 1);
          *(v28 - 1) = 0;
          if (v30)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 8), v8);
          *v25 = *v12;
          v31 = v4 + 24 * v9;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = (uint64_t *)(v31 + 8);
          *v32 = 0;
          *(v28 - 1) = v33;
          v34 = v32[1];
          v32[1] = 0;
          *v28 = v34;
          v35 = v32[1];
          v32[1] = 0;
          if (v35)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v35 + 64));
          v36 = *v32;
          *v32 = 0;
          if (v36)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v36 + 8), v8);
          if (v12 == a3)
            v10 = v25;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 64));
          v16 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v16)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v16 + 8), v8);
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>::destruct(*(unsigned __int8 **)a1, (unsigned __int8 *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned __int8 *WTF::VectorDestructor<true,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>::destruct(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 64));
      v5 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), a2);
      v3 += 16;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManagerProxy::hasVideoInPictureInPictureDidChange(BOOL)::$_0,void,WTF::Observer<void ()(BOOL)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const>@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&,void>::map((uint64_t)a2, a1);
}

void sub_197227010(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Mapper<WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&)::{lambda(std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>&&)#1},WTF::Vector<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = **a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v3 + 8) = v5;
      *(_QWORD *)v3 = result;
    }
  }
  v6 = a2[1];
  v7 = a2[3];
  if (v6 != v7)
  {
    v8 = a2[2];
    do
    {
      result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul>,WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>::__tuple_impl(&v17, v6 + 1);
      v10 = *(unsigned int *)(v3 + 12);
      v11 = v10 + 1;
      v12 = (_QWORD *)(*(_QWORD *)v3 + 16 * v10);
      v13 = v17;
      v17 = 0;
      *v12 = v13;
      v14 = v18;
      v18 = 0;
      v12[1] = v14;
      *(_DWORD *)(v3 + 12) = v11;
      v15 = v18;
      v18 = 0;
      if (v15)
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 64));
      v16 = v17;
      v17 = 0;
      if (v16)
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v16 + 8), v9);
      while (1)
      {
        v6 += 3;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_15;
      }
      v6 = v8;
LABEL_15:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::RequestFullscreenMode>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  char v40;
  IPC::Encoder *v41;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1505;
  *(_QWORD *)(v8 + 8) = a3;
  v9 = (void *)(v8 + 16);
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v41 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v10 = **(_DWORD **)(a2 + 8);
  v11 = *(_QWORD *)(v8 + 544);
  v12 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 + 4;
  v14 = *(_QWORD *)(v8 + 552);
  if (v14 < v12 + 4)
  {
    v31 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v32 = v31;
      v31 *= 2;
    }
    while (v32 < v13);
    v33 = (char *)mmap(0, v32, 3, 4098, -1, 0);
    if (v33 == (char *)-1)
      goto LABEL_23;
    v15 = v33;
    memcpy(v33, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v34 = *(void **)(v8 + 528);
    if (v34 != v9)
      munmap(v34, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v15;
    *(_QWORD *)(v8 + 552) = v32;
    v11 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v15 = *(char **)(v8 + 528);
  }
  bzero(&v15[v11], v12 - v11);
  *(_QWORD *)(v8 + 544) = v13;
  v16 = (_DWORD *)(*(_QWORD *)(v8 + 528) + v12);
  *(_QWORD *)(v8 + 536) = v16 + 1;
  *v16 = v10;
  v17 = *(_BYTE *)(a2 + 16);
  v18 = *(_QWORD *)(v8 + 544);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(v8 + 552);
  if (v20 >= v18 + 1)
  {
    v21 = *(char **)(v8 + 528);
    v22 = *(_QWORD *)(v8 + 544);
    goto LABEL_5;
  }
  v35 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v36 = v35;
    v35 *= 2;
  }
  while (v36 < v19);
  v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
  if (v37 == (char *)-1)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1972273A0);
  }
  v21 = v37;
  memcpy(v37, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
  v38 = *(void **)(v8 + 528);
  if (v38 != v9)
    munmap(v38, *(_QWORD *)(v8 + 552));
  *(_QWORD *)(v8 + 528) = v21;
  *(_QWORD *)(v8 + 552) = v36;
  v22 = *(_QWORD *)(v8 + 544);
LABEL_5:
  bzero(&v21[v22], v18 - v22);
  *(_QWORD *)(v8 + 544) = v19;
  v23 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v18);
  *(_QWORD *)(v8 + 536) = v23 + 1;
  *v23 = v17;
  LOBYTE(v39) = 0;
  v40 = 0;
  v25 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v41, a4, (uint64_t)&v39, 1);
  if (v40)
  {
    v26 = v39;
    v39 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v24);
    WTF::fastFree(v28, v29);
  }
  return v25;
}

void sub_1972273AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::DidExitFullscreen>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1500;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972274D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 8))
  {
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)a1, (int *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::VideoPresentationManager::SetVideoLayerFrameFenced>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1513;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *(int **)(a2 + 8));
  IPC::Encoder::addAttachment(v6, *(_QWORD *)(a2 + 16));
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_197227740(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2;
      if (*a2)
        *v9 += 2;
      *(_QWORD *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_197227818(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuxiliaryProcess::~AuxiliaryProcess(WebKit::AuxiliaryProcess *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E34B7AD0;
  *((_QWORD *)this + 2) = &unk_1E34B7B98;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    IPC::Connection::invalidate(v2);
  *((_QWORD *)this + 9) = off_1E34ABE00;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::AuxiliaryProcess *)((char *)this + 72));
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::AuxiliaryProcess *)((char *)this + 40), v4);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = *v7;
    if (__ldaxr(*v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEABB3C](v8);
LABEL_12:
    v10 = *((_QWORD *)v8 + 1);
    v11 = v10 - 1;
    *((_QWORD *)v8 + 1) = v10 - 1;
    if (v10 == 1)
    {
      v16 = *((_QWORD *)v8 + 2);
      v13 = *((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      v12 = v16 == 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v14 = __ldxr(v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, v8))
      {
        if (v11)
          goto LABEL_22;
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_22;
LABEL_20:
    v15 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v15 = off_1E34ACA48;
    *(_QWORD *)(v15 + 8) = v8;
    *(_QWORD *)(v15 + 16) = v13;
    *(_BYTE *)(v15 + 24) = v12;
    v17 = v15;
    WTF::ensureOnMainRunLoop();
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
LABEL_22:
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

void WebKit::AuxiliaryProcess::didClose(WebKit::AuxiliaryProcess *this, IPC::Connection *a2)
{
  WTF::terminateProcess(0);
  JUMPOUT(0x1972279E0);
}

uint64_t WebKit::AuxiliaryProcess::enableTermination(uint64_t this)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(this + 24) - 1;
  *(_DWORD *)(this + 24) = v1;
  if (!v1)
  {
    v2 = this;
    if (!*(_BYTE *)(this + 28))
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this);
      if ((_DWORD)this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcess::messageSenderConnection(WebKit::AuxiliaryProcess *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebKit::AuxiliaryProcess::messageSenderDestinationID(WebKit::AuxiliaryProcess *this)
{
  return 0;
}

uint64_t WebKit::AuxiliaryProcess::terminate(WebKit::AuxiliaryProcess *this)
{
  IPC::Connection::invalidate(*((_QWORD *)this + 4));
  return (*(uint64_t (**)(WebKit::AuxiliaryProcess *))(*(_QWORD *)this + 120))(this);
}

uint64_t WebKit::AuxiliaryProcess::shutDown(WebKit::AuxiliaryProcess *this)
{
  char v2;
  uint64_t result;

  v2 = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = 1;
  result = (*(uint64_t (**)(WebKit::AuxiliaryProcess *))(*(_QWORD *)this + 112))(this);
  *((_BYTE *)this + 28) = v2;
  return result;
}

void WebKit::BlobDataFileReferenceWithSandboxExtension::~BlobDataFileReferenceWithSandboxExtension(WebKit::BlobDataFileReferenceWithSandboxExtension *this)
{
  const char ***v2;

  v2 = (const char ***)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v2);
  WebCore::BlobDataFileReference::~BlobDataFileReference(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::BlobDataFileReferenceWithSandboxExtension::~BlobDataFileReferenceWithSandboxExtension(this);
  WTF::fastFree(v1, v2);
}

BOOL WebKit::BlobDataFileReferenceWithSandboxExtension::prepareForFileAccess(_BOOL8 this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v2 + 1;
    if (!v2)
      return WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v1 + 8));
  }
  return this;
}

uint64_t WebKit::BlobDataFileReferenceWithSandboxExtension::revokeFileAccess(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16) - 1;
    *(_QWORD *)(v1 + 16) = v2;
    if (!v2)
    {
      *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8) = 0;
      return sandbox_extension_release();
    }
  }
  return this;
}

uint64_t WebKit::DebuggableInfoData::empty@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  *(_BYTE *)a1 = 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 16) = v4;
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t *WebKit::EditingRange::toRange@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t *result;
  Node *v5;
  uint64_t *v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  WebCore::Node *v18[2];
  uint64_t v19[2];
  WebCore::Node *v20;
  int v21;
  uint64_t v22;
  int v23;

  if (a2)
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::startOfParagraph();
    WebCore::makeBoundaryPoint();
    v8 = v20;
    v20 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    result = (uint64_t *)v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (v17)
    {
      v9 = **(_QWORD **)(v16 + 40);
      *(_DWORD *)(v9 + 24) += 4;
      v10 = *(_WORD *)(v9 + 28);
      if ((v10 & 1) != 0)
      {
        v12 = *(_QWORD *)(v9 + 80);
        if (v12)
        {
          v11 = *(_DWORD *)(v12 + 4);
          goto LABEL_20;
        }
      }
      else if ((v10 & 4) != 0)
      {
        v11 = WebCore::ContainerNode::countChildNodes((WebCore::ContainerNode *)v9);
        goto LABEL_20;
      }
      v11 = 0;
LABEL_20:
      v20 = 0;
      v14 = v9;
      v15 = v11;
      result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v20);
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (v17)
      {
        WebCore::SimpleRange::SimpleRange();
        WebCore::resolveCharacterRange();
        *(_QWORD *)a3 = v20;
        *(_DWORD *)(a3 + 8) = v21;
        v13 = v22;
        v20 = 0;
        v22 = 0;
        *(_QWORD *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 24) = v23;
        *(_BYTE *)(a3 + 32) = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v22);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v20);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v19);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v18);
        result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
        if (v17)
          return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
LABEL_16:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  result = (uint64_t *)WebCore::FrameSelection::rootEditableElementOrDocumentElement(*(WebCore::FrameSelection **)(*(_QWORD *)(a1 + 296) + 3064));
  if (!result)
    goto LABEL_16;
  v6 = result;
  *((_DWORD *)result + 6) += 2;
  WebCore::makeRangeSelectingNodeContents((WebCore *)result, v5);
  WebCore::resolveCharacterRange();
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v21;
  v7 = v22;
  v20 = 0;
  v22 = 0;
  *(_QWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 24) = v23;
  *(_BYTE *)(a3 + 32) = 1;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v22);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v20);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v19);
  result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v18);
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return result;
}

uint64_t WebKit::EditingRange::fromRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9[2];
  uint64_t v10;

  if (!*(_BYTE *)(a2 + 32))
    return -1;
  v3 = WebCore::FrameSelection::rootEditableElementOrDocumentElement(*(WebCore::FrameSelection **)(*(_QWORD *)(a1 + 296)
                                                                                                 + 3064));
  if (!v3)
    return -1;
  v4 = v3;
  *(_DWORD *)(v3 + 24) += 4;
  v9[0] = 0;
  v7 = v3;
  v8 = 0;
  result = (uint64_t)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v9);
  if (*(_BYTE *)(a2 + 32))
  {
    WebCore::SimpleRange::SimpleRange();
    v6 = WebCore::characterCount();
    WebCore::characterCount();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v9);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::EditorState::clipOwnedRectExtentsToNumericLimits(void)::$_1::operator()<WebKit::EditorState::VisualData>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  a1[2] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 2));
  a1[3] = v2;
  a1[4] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 4));
  a1[5] = v3;
  a1[10] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 10));
  a1[11] = v4;
  a1[12] = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)(a1 + 12));
  a1[13] = v5;
  result = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)a1);
  *a1 = result;
  a1[1] = v7;
  return result;
}

WebKit::WebPagePreferencesLockdownModeObserver *WebKit::WebPagePreferencesLockdownModeObserver::WebPagePreferencesLockdownModeObserver(WebKit::WebPagePreferencesLockdownModeObserver *this, API::WebsitePolicies *a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34C9F90;
  v3 = (unsigned int **)((char *)a2 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  v4 = *v3;
  if (*v3)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 2) = v4;
  WebKit::addLockdownModeObserver((_BOOL8)this);
  return this;
}

void sub_1972285A4(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v5 = *(unsigned int **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPagePreferencesLockdownModeObserver::willChangeLockdownMode(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(void **)(v2 + 8);
      if (v3)
      {
        objc_msgSend(*(id *)(v2 + 8), "willChangeValueForKey:", CFSTR("_captivePortalModeEnabled"));
        return objc_msgSend(v3, "willChangeValueForKey:", CFSTR("lockdownModeEnabled"));
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPagePreferencesLockdownModeObserver::didChangeLockdownMode(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(void **)(v2 + 8);
      if (v3)
      {
        objc_msgSend(*(id *)(v2 + 8), "didChangeValueForKey:", CFSTR("_captivePortalModeEnabled"));
        return objc_msgSend(v3, "didChangeValueForKey:", CFSTR("lockdownModeEnabled"));
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::layerTreeCommitComplete(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 840))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19722870C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::setDataDetectionResult(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *(const void **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v3;
  if (v4)
    CFRelease(v4);
}

uint64_t WebKit::WebPageProxy::handleClickForDataDetectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 1816))(v6, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

void sub_1972287DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::saveRecentSearches(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*a3)
  {
    WebKit::WebsiteDataStore::saveRecentSearches(*(WebKit::WebsiteDataStore **)(a1 + 264), (uint64_t)a3, a4);
  }
  else
  {
    v5 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v6 = 136315138;
      v7 = "void WebKit::WebPageProxy::saveRecentSearches(IPC::Connection &, const String &, const Vector<WebCore::RecentSearch> &)";
      _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 190: Invalid message dispatched %s", (uint8_t *)&v6, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::loadRecentSearches(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*a3)
    return WebKit::WebsiteDataStore::loadRecentSearches(*(WebKit::WebsiteDataStore **)(a1 + 264), (uint64_t)a3, a4);
  v7 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    LODWORD(v10) = 136315138;
    *(_QWORD *)((char *)&v10 + 4) = "void WebKit::WebPageProxy::loadRecentSearches(IPC::Connection &, const String &, Com"
                                    "pletionHandler<void (Vector<WebCore::RecentSearch> &&)> &&)";
    _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 197: Invalid message dispatched %s", (uint8_t *)&v10, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
  v10 = 0uLL;
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
}

void sub_197228A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

WebKit::WebPasteboardProxy *WebKit::WebPageProxy::grantAccessToCurrentPasteboardData(WebKit::WebPasteboardProxy *result, WTF::StringImpl **a2, uint64_t a3)
{
  WebKit::WebPasteboardProxy *v3;
  WebKit::WebPasteboardProxy *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (!*((_BYTE *)result + 729))
  {
    v3 = result;
    if (*((_BYTE *)result + 728))
    {
      if (*(_BYTE *)(a3 + 16)
        && (result = (WebKit::WebPasteboardProxy *)WebKit::WebFrameProxy::webFrame(*(_QWORD *)a3, *(_QWORD *)(a3 + 8))) != 0)
      {
        v5 = result;
        v6 = WebKit::WebPasteboardProxy::singleton(result);
        v7 = (uint64_t *)(*((_QWORD *)v5 + 4) + 16);
      }
      else
      {
        v6 = WebKit::WebPasteboardProxy::singleton(result);
        v7 = (uint64_t *)((char *)v3 + 208);
      }
      return (WebKit::WebPasteboardProxy *)WebKit::WebPasteboardProxy::grantAccess((uint64_t)v6, *v7, a2, 1);
    }
  }
  return result;
}

void WebKit::WebPageProxy::beginSafeBrowsingCheck(WebKit::WebPageProxy *this, const WTF::URL *a2, char a3, CFTypeRef *a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  char v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;

  v7 = objc_msgSend(MEMORY[0x1E0D8A0A0], "sharedLookupContext");
  if (v7)
  {
    v8 = (void *)v7;
    v9 = WTF::URL::operator NSURL *();
    CFRetain(a4[1]);
    v10 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v10 += 2;
    v19 = (WTF *)a4;
    v20 = a3;
    v21 = v10;
    v11 = *(_OWORD *)((char *)a2 + 24);
    v22 = *(_OWORD *)((char *)a2 + 8);
    v23 = v11;
    v12 = malloc_type_malloc(0x58uLL, 0x10E004008F7C41BuLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::{lambda(void *,SSBLookupResult *,NSError *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::descriptor;
    v19 = 0;
    v12[4] = a4;
    *((_BYTE *)v12 + 40) = a3;
    v14 = WTF::URL::URL((uint64_t)(v12 + 6), (uint64_t *)&v21);
    v15 = v21;
    v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v18 = v19;
    v19 = 0;
    if (v18)
      CFRelease(*((CFTypeRef *)v18 + 1));
    objc_msgSend(v8, "lookUpURL:completionHandler:", v9, v12, v14);
    _Block_release(v12);
  }
  else
  {
    v19 = 0;
    WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults((uint64_t)a4, (WTF::StringImpl *)&v19);
    v17 = v19;
    v19 = 0;
    if (v17)
      WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(v17, v16);
  }
}

void sub_197228C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  const void *v12;

  _Block_release(v12);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::contentFilterDidBlockLoadForFrame(int a1, WebKit::AuxiliaryProcessProxy *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = WebKit::AuxiliaryProcessProxy::fromConnection(this, this);
  v10 = v8;
  if (!v8)
    goto LABEL_7;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  if ((_DWORD)v8 != 2)
  {
    v10 = 0;
LABEL_7:
    v13 = 1;
    goto LABEL_8;
  }
  v11 = (unsigned int *)(v10 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = 0;
LABEL_8:
  v14 = (unsigned int *)(v10 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  WebKit::WebPageProxy::contentFilterDidBlockLoadForFrameShared(v8, v9, a3, a4, a5);
  if ((v13 & 1) == 0)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
  }
}

void sub_197228D60(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  char v2;

  if ((v2 & 1) == 0)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::contentFilterDidBlockLoadForFrameShared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  const void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[24];
  _BYTE *v26;
  CFTypeRef cf;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::WebFrameProxy::webFrame(a4, a5);
  if (!v6)
    return;
  v7 = v6;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v8 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v8 += 2;
  v21 = v8;
  v9 = *(WTF::StringImpl **)(a3 + 8);
  if (v9)
    *(_DWORD *)v9 += 2;
  v22 = v9;
  v10 = *(_OWORD *)(a3 + 32);
  v23 = *(_OWORD *)(a3 + 16);
  v24 = v10;
  v11 = v25;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100]((uint64_t)v25, a3 + 48);
  v13 = *(const void **)(a3 + 80);
  cf = v13;
  if (v13)
    CFRetain(v13);
  v28 = *(_BYTE *)(a3 + 88);
  v14 = *(WTF::StringImpl **)(v7 + 328);
  *(_QWORD *)(v7 + 328) = v21;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::URL::operator=(v7 + 336, (WTF::StringImpl *)&v22);
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((_QWORD *)(v7 + 376), (uint64_t)v25);
  v16 = cf;
  cf = 0;
  v17 = *(const void **)(v7 + 408);
  *(_QWORD *)(v7 + 408) = v16;
  if (v17)
  {
    CFRelease(v17);
    v18 = cf;
    *(_BYTE *)(v7 + 416) = v28;
    cf = 0;
    if (v18)
      CFRelease(v18);
  }
  else
  {
    *(_BYTE *)(v7 + 416) = v28;
    cf = 0;
  }
  if (v26 == v25)
  {
    v19 = 4;
    goto LABEL_20;
  }
  if (v26)
  {
    v19 = 5;
    v11 = v26;
LABEL_20:
    (*(void (**)(_QWORD *))(*v11 + 8 * v19))(v11);
  }
  v20 = v22;
  v22 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

void sub_197228F64(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, CFTypeRef cf)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  if (a19 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
    v21 = a19;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v20 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::createSandboxExtensionsIfNeeded(uint64_t a1, uint64_t a2, const char ***a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  BOOL v12;
  uint64_t v13;
  const char **v14;
  const char **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _OWORD v29[2];
  char v30;
  _BYTE v31[32];

  v4 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v4)
    return;
  if ((_DWORD)v4 != 1)
  {
LABEL_22:
    v17 = *(_QWORD **)a2;
    v18 = *(_QWORD *)a2 + 8 * v4;
    while (1)
    {
      v19 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      if (*v17)
        v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v20 = &stru_1E351F1B8;
      if (!objc_msgSend(v19, "fileExistsAtPath:", v20))
        goto LABEL_30;
      WebKit::SandboxExtension::createHandle(0, (uint64_t)v31);
      if (!v31[8])
        goto LABEL_30;
      v21 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(a4 + 8))
      {
        v24 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v21 + 1, (unint64_t)v31);
        v25 = *(unsigned int *)(a4 + 12);
        v26 = *(_QWORD *)a4;
        v27 = *v24;
        *v24 = 0;
        *(_QWORD *)(v26 + 8 * v25) = v27;
        LODWORD(v26) = v31[8];
        *(_DWORD *)(a4 + 12) = v25 + 1;
        if (!(_DWORD)v26)
          goto LABEL_30;
      }
      else
      {
        v22 = *(_QWORD *)a4;
        v23 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        *(_QWORD *)(v22 + 8 * v21) = v23;
        *(_DWORD *)(a4 + 12) = v21 + 1;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v31);
LABEL_30:
      if (++v17 == (_QWORD *)v18)
        return;
    }
  }
  v30 = 0;
  v9 = objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  if (!*(_DWORD *)(a2 + 12))
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  v10 = (void *)v9;
  if (**(_QWORD **)a2)
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E351F1B8;
  if (objc_msgSend(v10, "fileExistsAtPath:isDirectory:", v11, &v30))
    v12 = v30 == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 144);
    if (!v13 || !*(_QWORD *)(v13 + 352))
    {
      WebKit::SandboxExtension::createHandle(0, (uint64_t)v31);
      if (!v31[8])
      {
LABEL_20:
        v16 = *(_QWORD *)(a1 + 208);
        *(_BYTE *)(a1 + 1117) = 1;
        *(_BYTE *)(v16 + 528) = 1;
        goto LABEL_21;
      }
      v15 = *(const char ***)v31;
      *(_QWORD *)v31 = 0;
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a3, v15);
LABEL_19:
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v31);
      goto LABEL_20;
    }
    xpc_connection_get_audit_token();
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 352))
    {
      xpc_connection_get_audit_token();
      v29[0] = *(_OWORD *)&v31[1];
      *(_OWORD *)((char *)v29 + 15) = *(_OWORD *)&v31[16];
      v28 = v31[0];
      WebKit::SandboxExtension::createHandleForReadByAuditToken((WebKit::SandboxExtensionImpl *)"/", (WebKit::SandboxExtensionImpl *)0x100000001, &v28, (uint64_t)v31);
      if (!v31[8])
        goto LABEL_20;
      v14 = *(const char ***)v31;
      *(_QWORD *)v31 = 0;
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a3, v14);
      if (!v31[8])
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_38:
    __break(1u);
    return;
  }
LABEL_21:
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
    goto LABEL_22;
}

void sub_197229288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const char **a15, __int16 a16, char a17, char a18)
{
  if ((_BYTE)a16)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a15);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollViewDidScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 848))(v6, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

void sub_197229314(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::scrollingUpdatesDisabledForTesting(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1424))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
  return v3;
}

void sub_197229394(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::startDrag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 280))(v6, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

void sub_197229420(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::platformRegisterAttachment(uint64_t a1, API::Attachment **a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  void *v11;
  void *v12;
  CFTypeRef v13;
  const __CFString *v14;
  WebCore::SharedBuffer *v15;
  CFTypeRef cf;

  if (*(_QWORD *)a4)
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    v9 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1712))(v8);
    IPC::SharedBufferReference::unsafeBuffer(a4, &v15);
    v10 = (unsigned int *)v15;
    WebCore::SharedBuffer::createNSData(v15);
    v12 = (void *)objc_msgSend(v9, "initRegularFileWithContents:", cf);
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
    if (v10)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
    if (*a3)
      v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E351F1B8;
    objc_msgSend(v12, "setPreferredFilename:", v14);
    API::Attachment::setFileWrapper(*a2, v12);
    if (v12)
      CFRelease(v12);
  }
}

void sub_19722954C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  unsigned int *v11;

  if (cf)
    CFRelease(cf);
  if (v11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::platformRegisterAttachment(uint64_t a1, API::Attachment **a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  const void *v10;

  if (*a3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
    v7 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1712))(v6);
    v8 = (void *)MEMORY[0x1E0C99E98];
    if (*a3)
      v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E351F1B8;
    v10 = (const void *)objc_msgSend(v7, "initWithURL:options:error:", objc_msgSend(v8, "fileURLWithPath:", v9), 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
    API::Attachment::setFileWrapper(*a2, v10);
    if (v10)
      CFRelease(v10);
  }
}

void sub_197229694(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::iconForAttachment(const WTF::String *a1@<X1>, const WTF::String *a2@<X2>, const WTF::String *a3@<X3>, WebCore::FloatSize *a4@<X4>, WebCore::ShareableBitmap **a5@<X8>)
{
  CGFloat v8;
  CGFloat v9;
  const FloatRect *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const FloatRect *v15;
  WebCore::GraphicsContext *v16;
  CGFloat height;
  CFTypeRef v18;
  WebCore::GraphicsContext *v19;
  WebCore::ShareableBitmap *v20;
  WebCore::GraphicsContext *v21;
  WebCore::ShareableBitmap *v22;
  void *cf;
  uint64_t v24;
  WebCore::GraphicsContext *v25;
  CGSize v26;
  _BYTE v27[32];
  WebCore::ShareableBitmap *v28;
  CFTypeRef v29[2];
  uint64_t v30;
  WebCore::GraphicsContext *v31;
  float v32;
  float v33;

  WebCore::RenderThemeIOS::iconForAttachment(a1, a2, a3, a3);
  if (cf)
    CFRetain(cf);
  *(_QWORD *)a4 = v24;
  objc_msgSend(cf, "size");
  v26.width = v8;
  v26.height = v9;
  WebCore::FloatSize::FloatSize((WebCore::FloatSize *)&v32, &v26);
  if (v32 <= 0.0 || v33 <= 0.0)
    goto LABEL_17;
  *(_OWORD *)v29 = xmmword_1978D0110;
  WebCore::largestRectWithAspectRatioInsideRect((WebCore *)v29, v32 / v33, v10);
  *(_QWORD *)&v26.width = __PAIR64__(v12, v11);
  *(_QWORD *)&v26.height = __PAIR64__(v14, v13);
  WebCore::roundedIntRect((WebCore *)&v26, v15);
  v30 = 0;
  v31 = v16;
  v25 = v16;
  LOBYTE(v29[0]) = 0;
  LOBYTE(v29[1]) = 0;
  MEMORY[0x19AEB3600](&v26, &v25, v29, 0);
  WebCore::ShareableBitmap::create();
  if (v27[0])
  {
    height = v26.height;
    v26.height = 0.0;
    if (height != 0.0)
      CFRelease(*(CFTypeRef *)&height);
  }
  if (LOBYTE(v29[1]))
  {
    v18 = v29[0];
    v29[0] = 0;
    if (v18)
      CFRelease(v18);
  }
  if (v28)
  {
    WebCore::ShareableBitmap::createGraphicsContext(v28);
    v19 = v25;
    if (v25)
    {
      WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext((WebCore::LocalCurrentGraphicsContext *)&v26, v25);
      WebCore::IntRect::operator CGRect();
      objc_msgSend(cf, "drawInRect:");
      v20 = v28;
      v28 = 0;
      *a5 = v20;
      WebCore::LocalCurrentContextSaver::~LocalCurrentContextSaver((WebCore::LocalCurrentContextSaver *)v27);
      if (LOBYTE(v26.height))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v26.width + 104))(*(_QWORD *)&v26.width, 1);
      v21 = v25;
      v25 = 0;
      if (v21)
        (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)v21 + 8))(v21);
    }
    else
    {
      *a5 = 0;
    }
    v22 = v28;
    v28 = 0;
    if (v22)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v22, v19);
  }
  else
  {
LABEL_17:
    *a5 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFRelease(cf);
  }
}

void sub_197229898(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, CFTypeRef a19, char a20)
{
  const void *v20;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a18)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a18, a2);
  if (v20)
    CFRelease(v20);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_BYTE *WebKit::WebPageProxy::insertDictatedTextAsync(_BYTE *result, uint64_t *a2, uint64_t *a3, unsigned int *a4, char *a5)
{
  _QWORD *v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  size_t v37;
  void *v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  IPC::Encoder *v43;

  if (!result[729])
  {
    v5 = result;
    if (result[728])
    {
      v39 = 0;
      v40 = 0;
      v9 = a4[3];
      if (!(_DWORD)v9)
        goto LABEL_26;
      v10 = (_QWORD *)(*(_QWORD *)a4 + 16);
      v11 = 24 * v9;
      do
      {
        v12 = v5[5];
        if (v12)
          v13 = *(_QWORD *)(v12 + 8);
        else
          v13 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
        v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 784))(v13, *v10);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
        if (v14)
        {
          v41 = *((_OWORD *)v10 - 1);
          v42 = v14;
          v15 = HIDWORD(v40);
          if (HIDWORD(v40) == (_DWORD)v40)
          {
            v16 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
            v15 = HIDWORD(v40);
            v17 = (char *)v39 + 24 * HIDWORD(v40);
            v18 = *(_OWORD *)v16;
            *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
          }
          else
          {
            v17 = (char *)v39 + 24 * HIDWORD(v40);
            v18 = v41;
            *((_QWORD *)v17 + 2) = v42;
          }
          *(_OWORD *)v17 = v18;
          HIDWORD(v40) = v15 + 1;
        }
        v10 += 3;
        v11 -= 24;
      }
      while (v11);
      if (HIDWORD(v40))
      {
        v19 = v5[26];
        v20 = *(_QWORD *)(v5[4] + 1896);
        v21 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v21 = 2257;
        *(_QWORD *)(v21 + 8) = v20;
        *(_QWORD *)(v21 + 528) = v21 + 16;
        *(_QWORD *)(v21 + 536) = v21 + 16;
        *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v21 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
        v43 = (IPC::Encoder *)v21;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, a2);
        IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v21, a3);
        v22 = HIDWORD(v40);
        v23 = *(_QWORD *)(v21 + 544);
        v24 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
        v25 = v24 + 8;
        v26 = *(_QWORD *)(v21 + 552);
        if (v26 < v24 + 8)
        {
          v36 = (2 * v26 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v37 = v36;
            v36 *= 2;
          }
          while (v37 < v25);
          result = mmap(0, v37, 3, 4098, -1, 0);
          if (result == (_BYTE *)-1)
          {
            __break(0xC471u);
            return result;
          }
          v27 = result;
          memcpy(result, *(const void **)(v21 + 528), *(_QWORD *)(v21 + 544));
          v38 = *(void **)(v21 + 528);
          if (v38 != (void *)(v21 + 16))
            munmap(v38, *(_QWORD *)(v21 + 552));
          *(_QWORD *)(v21 + 528) = v27;
          *(_QWORD *)(v21 + 552) = v37;
          v23 = *(_QWORD *)(v21 + 544);
        }
        else
        {
          v27 = *(_BYTE **)(v21 + 528);
        }
        bzero(&v27[v23], v24 - v23);
        *(_QWORD *)(v21 + 544) = v25;
        v28 = (_QWORD *)(*(_QWORD *)(v21 + 528) + v24);
        *(_QWORD *)(v21 + 536) = v28 + 1;
        *v28 = v22;
        if (HIDWORD(v40))
        {
          v29 = (uint64_t *)v39;
          v30 = 24 * HIDWORD(v40);
          do
          {
            IPC::ArgumentCoder<WebCore::DictationAlternative,void>::encode((IPC::Encoder *)v21, v29);
            v29 += 3;
            v30 -= 24;
          }
          while (v30);
        }
        IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode((IPC::Encoder *)v21, a5);
        LOBYTE(v41) = 0;
        LOBYTE(v42) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v43, 0, (uint64_t)&v41, 1);
        if ((_BYTE)v42)
        {
          v32 = v41;
          *(_QWORD *)&v41 = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v31);
          WTF::fastFree(v34, v35);
        }
      }
      else
      {
LABEL_26:
        WebKit::WebPageProxy::insertTextAsync((uint64_t)v5, (uint64_t)a2, (uint64_t)a3, (uint64_t)a5);
      }
      result = v39;
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        return (_BYTE *)WTF::fastFree((WTF *)result, v31);
      }
    }
  }
  return result;
}

void sub_197229CA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::addDictationAlternative(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  IPC::Encoder *v23;

  if (!*((_BYTE *)result + 729))
  {
    v2 = result;
    if (*((_BYTE *)result + 728))
    {
      v3 = *(void **)(a2 + 16);
      v4 = *((_QWORD *)result + 5);
      if (v4)
        v5 = *(_QWORD *)(v4 + 8);
      else
        v5 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
      v6 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v5 + 784))(v5, v3);
      v20 = v6;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
      v7 = *((_QWORD *)v2 + 26);
      MEMORY[0x19AEABCC8](&v19, objc_msgSend(v3, "primaryString"));
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v2 + 6, (uint64_t)v2 + 16);
      v8 = (unsigned int *)*((_QWORD *)v2 + 3);
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      v10 = *(_QWORD *)(*((_QWORD *)v2 + 4) + 1896);
      v11 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v11 = 2101;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(v11 + 528) = v11 + 16;
      *(_QWORD *)(v11 + 536) = v11 + 16;
      *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v11 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
      v23 = (IPC::Encoder *)v11;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v19);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, &v20);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = &off_1E34CA800;
      v12[1] = v6;
      v12[2] = v8;
      v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v21[0] = v12;
      v21[1] = v13;
      v22 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v23, 0, (uint64_t)v21, 1);
      if (v22)
      {
        v15 = v21[0];
        v21[0] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v14);
        WTF::fastFree(v17, v18);
      }
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_197229EFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebPageProxy::dictationAlternativesAtSelection(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  WTF *result;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v6 = 0;
    v7 = 0;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 16))(v2, &v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = v6;
    if (v6)
    {
      v6 = 0;
      LODWORD(v7) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 208);
    LOBYTE(v6) = 0;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5, (uint64_t)&v6, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_19722A0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::clearDictationAlternatives(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
      v2 = *(_DWORD *)(a2 + 12) == 0;
    else
      v2 = 1;
    if (!v2)
    {
      v3 = *(_QWORD *)(result + 208);
      v4 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearDictationAlternatives>(v3, &v4, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::platformDictationAlternatives(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 824))(v4, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
  return v5;
}

void sub_19722A19C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::errorForUnpermittedAppBoundDomainNavigation@<X0>(const WTF::URL *a1@<X1>, uint64_t a2@<X8>)
{
  const __CFString *v5;
  const __CFString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  MEMORY[0x19AEABCC8](&v11, CFSTR("WKErrorDomain"));
  v6 = localizedDescriptionForErrorCode(WKErrorNavigationAppBoundDomain, v5);
  MEMORY[0x19AEABCC8](&v10, v6);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v11, 13, (uint64_t)a1, (_DWORD **)&v10, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19722A284(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorConnection(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 208) + 144);
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorConnection(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) + 144);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorBoundInterfaceIdentifier(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 264) + 208) + 312;
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorBoundInterfaceIdentifier(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 264) + 208) + 312;
}

uint64_t WebKit::WebPageProxy::Internals::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, *(_QWORD *)(a1 + 40) + 304);
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, *(_QWORD *)(a1 + 32) + 304);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationBundleIdentifier(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 264) + 208) + 296;
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationBundleIdentifier(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 264) + 208) + 296;
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationSecondaryIdentifier(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 264) + 208) + 304;
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorSourceApplicationSecondaryIdentifier(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 264) + 208) + 304;
}

unsigned int *WebKit::WebPageProxy::Internals::paymentCoordinatorAddMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v7;
  _QWORD v8[2];

  v4 = *(_QWORD *)(a1 + 1896);
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 208) + 160);
  v8[0] = a3;
  v8[1] = v4;
  return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, a4, &v7);
}

unsigned __int8 *WebKit::WebPageProxy::Internals::paymentCoordinatorRemoveMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 208) + 152, a3, *(_QWORD *)(a1 + 1896));
}

char *WebKit::WebPageProxy::Internals::didStartSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  char *result;
  char *v3;
  uint64_t v4;

  result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (*((_QWORD *)result + 2))
  {
    v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
    v4 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_19722A450(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'WebKit::WebPageProxy::Internals::didStartSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didStartSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 32));
}

char *WebKit::WebPageProxy::Internals::didFinishSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  char *result;
  char *v3;
  uint64_t v4;

  result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (*((_QWORD *)result + 3))
  {
    v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
    v4 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_19722A4D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'WebKit::WebPageProxy::Internals::didFinishSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didFinishSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 32));
}

char *WebKit::WebPageProxy::Internals::didPauseSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  char *result;
  char *v3;
  uint64_t v4;

  result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (*((_QWORD *)result + 4))
  {
    v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
    v4 = *((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_19722A558(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'WebKit::WebPageProxy::Internals::didPauseSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didPauseSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 32));
}

char *WebKit::WebPageProxy::Internals::didResumeSpeaking(WebKit::WebPageProxy::Internals *a1)
{
  char *result;
  char *v3;
  uint64_t v4;

  result = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
  if (*((_QWORD *)result + 5))
  {
    v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(a1);
    v4 = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_19722A5DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'WebKit::WebPageProxy::Internals::didResumeSpeaking(uint64_t a1)
{
  return WebKit::WebPageProxy::Internals::didResumeSpeaking((WebKit::WebPageProxy::Internals *)(a1 - 32));
}

uint64_t WebKit::WebPageProxy::Internals::speakingErrorOccurred(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 208);
  v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SpeakingErrorOccurred>(v2, (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896), 0);
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::speakingErrorOccurred(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 208);
  v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SpeakingErrorOccurred>(v2, (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896), 0);
}

uint64_t WebKit::WebPageProxy::Internals::boundaryEventOccurred(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char v8[8];
  int *v9;
  int *v10;
  int v11;
  int v12;

  v11 = a5;
  v12 = a4;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v5 + 208);
  v8[0] = a3 == 0;
  v9 = &v12;
  v10 = &v11;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BoundaryEventOccurred>(v6, v8, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896), 0);
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::boundaryEventOccurred(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char v8[8];
  int *v9;
  int *v10;
  int v11;
  int v12;

  v11 = a5;
  v12 = a4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 208);
  v8[0] = a3 == 0;
  v9 = &v12;
  v10 = &v11;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BoundaryEventOccurred>(v6, v8, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896), 0);
}

uint64_t WebKit::WebPageProxy::Internals::voicesDidChange(WebKit::WebPageProxy::Internals *this)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *((_QWORD *)this + 5);
  v2 = *(_QWORD *)(v1 + 208);
  v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoicesDidChange>(v2, (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896), 0);
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::voicesDidChange(WebKit::WebPageProxy::Internals *this)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 208);
  v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoicesDidChange>(v2, (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896), 0);
}

uint64_t WebKit::WebPageProxy::didCreateContextInWebProcessForVisibilityPropagation(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *((_DWORD *)this + 288) = a2;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 568))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19722A7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *((_DWORD *)this + 289) = a2;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 576))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19722A864(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::updateFullscreenVideoTextRecognition(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 isPaused;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1176))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 4);
    if (*(_BYTE *)(v5 + 2472)
      && (v6 = *((_QWORD *)this + 47)) != 0
      && (isPaused = WebKit::PlaybackSessionManagerProxy::isPaused(v6, *(_QWORD *)(v5 + 2464)),
          v5 = *((_QWORD *)this + 4),
          isPaused))
    {
      WTF::RunLoop::TimerBase::start();
    }
    else
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v5 + 2432));
      v8 = *((_QWORD *)this + 4);
      if (*(_BYTE *)(v8 + 2472))
      {
        v9 = (const void *)WebKit::VideoPresentationManagerProxy::playerViewController(*((_QWORD *)this + 48), *(_QWORD *)(v8 + 2464));
        if (v9)
        {
          v10 = v9;
          CFRetain(v9);
          v11 = *((_QWORD *)this + 5);
          if (v11)
            v12 = *(_QWORD *)(v11 + 8);
          else
            v12 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1584))(v12);
          (*(void (**)(uint64_t, const void *))(*(_QWORD *)v12 + 1168))(v12, v10);
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
          CFRelease(v10);
        }
      }
    }
  }
}

void sub_19722A9B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;

  v1 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v1 + 2472))
  {
    v2 = (uint64_t)this;
    v3 = *((_QWORD *)this + 48);
    if (v3)
    {
      v4 = *(_QWORD *)(v1 + 2464);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(this + 6, (uint64_t)(this + 4));
      v5 = *(unsigned int **)(v2 + 24);
      if (v5)
      {
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
      v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v7 = &off_1E34CA850;
      *((_QWORD *)v7 + 1) = v4;
      *((_QWORD *)v7 + 2) = v5;
      v8 = v7;
      WebKit::VideoPresentationManagerProxy::requestBitmapImageForCurrentTime(v3, v4, (uint64_t *)&v8);
      this = v8;
      v8 = 0;
      if (this)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void sub_19722AAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c64_ZTSKZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEvE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c64_ZTSKZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEvE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t WebKit::WebPageProxy::addActivityStateUpdateCompletionHandler(unint64_t result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 921))
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 940);
    if ((_DWORD)v3 == *(_DWORD *)(result + 936))
    {
      result = WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 928, v3 + 1, (unint64_t)a2);
      v3 = *(unsigned int *)(v2 + 940);
      v4 = v3 + 1;
      v5 = *(_QWORD *)(v2 + 928);
      v6 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v4 = v3 + 1;
      v5 = *(_QWORD *)(result + 928);
      v6 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v5 + 8 * v3) = v6;
    *(_DWORD *)(v2 + 940) = v4;
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

void sub_19722ABF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::createAppHighlightInSelectedRange(IPC::Encoder *this, char a2, char a3)
{
  IPC::Encoder *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  _QWORD v35[2];
  char v36;
  IPC::Encoder *v37;

  if (*((_BYTE *)this + 729))
    return this;
  v3 = this;
  if (!*((_BYTE *)this + 728))
    return this;
  WebKit::WebPageProxy::setUpHighlightsObserver((uint64_t)this);
  CFRetain(*((CFTypeRef *)v3 + 1));
  v6 = *((_QWORD *)v3 + 26);
  v7 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 1896);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2147;
  *(_QWORD *)(v8 + 8) = v7;
  v9 = (void *)(v8 + 16);
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v37 = (IPC::Encoder *)v8;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v27 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v28 = v27;
      v27 *= 2;
    }
    while (v28 < v11);
    v29 = (char *)mmap(0, v28, 3, 4098, -1, 0);
    if (v29 == (char *)-1)
      goto LABEL_25;
    v13 = v29;
    memcpy(v29, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v30 = *(void **)(v8 + 528);
    if (v30 != v9)
      munmap(v30, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v28;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = a2;
  v16 = *(_QWORD *)(v8 + 544);
  v17 = v16 + 1;
  v18 = *(_QWORD *)(v8 + 552);
  if (v18 < v16 + 1)
  {
    v31 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v32 = v31;
      v31 *= 2;
    }
    while (v32 < v17);
    v33 = (char *)mmap(0, v32, 3, 4098, -1, 0);
    if (v33 != (char *)-1)
    {
      v19 = v33;
      memcpy(v33, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
      v34 = *(void **)(v8 + 528);
      if (v34 != v9)
        munmap(v34, *(_QWORD *)(v8 + 552));
      *(_QWORD *)(v8 + 528) = v19;
      *(_QWORD *)(v8 + 552) = v32;
      v20 = *(_QWORD *)(v8 + 544);
      goto LABEL_8;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x19722AEB0);
  }
  v19 = *(char **)(v8 + 528);
  v20 = *(_QWORD *)(v8 + 544);
LABEL_8:
  bzero(&v19[v20], v16 - v20);
  *(_QWORD *)(v8 + 544) = v17;
  v21 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v16);
  *(_QWORD *)(v8 + 536) = v21 + 1;
  *v21 = a3;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v22 = &off_1E34CA878;
  v22[1] = v3;
  v22[2] = v3;
  v35[0] = v22;
  v35[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v36 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v37, 0, (uint64_t)v35, 1);
  if (v36)
  {
    v24 = v35[0];
    v35[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  this = v37;
  v37 = 0;
  if (this)
  {
    IPC::Encoder::~Encoder(this, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return this;
}

void sub_19722AEBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::setUpHighlightsObserver(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, char);
  void *v15;
  WTF *v16;

  if (!*(_QWORD *)(this + 1312))
  {
    v1 = this;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(this + 24), this + 16);
    v2 = *(unsigned int **)(v1 + 24);
    if (v2)
    {
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
      v12 = MEMORY[0x1E0C809B0];
      v13 = 3321888768;
      v14 = ___ZN6WebKit12WebPageProxy23setUpHighlightsObserverEv_block_invoke;
      v15 = &__block_descriptor_40_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e8_v12__0B8l;
      do
        v4 = __ldaxr(v2);
      while (__stlxr(v4 + 1, v2));
    }
    else
    {
      v12 = MEMORY[0x1E0C809B0];
      v13 = 3321888768;
      v14 = ___ZN6WebKit12WebPageProxy23setUpHighlightsObserverEv_block_invoke;
      v15 = &__block_descriptor_40_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e8_v12__0B8l;
    }
    v16 = (WTF *)v2;
    v6 = objc_msgSend(objc_alloc((Class)getSYNotesActivationObserverClass()), "initWithHandler:", &v12);
    v7 = *(const void **)(v1 + 1312);
    *(_QWORD *)(v1 + 1312) = v6;
    if (v7)
      CFRelease(v7);
    this = (uint64_t)v16;
    v16 = 0;
    if (!this)
      goto LABEL_11;
    do
    {
      v8 = __ldaxr((unsigned int *)this);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)this));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, v5);
      if (!v2)
        return this;
    }
    else
    {
LABEL_11:
      if (!v2)
        return this;
    }
    do
    {
      v10 = __ldaxr(v2);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v2));
    if (!v11)
    {
      atomic_store(1u, v2);
      return WTF::fastFree((WTF *)v2, v5);
    }
  }
  return this;
}

void sub_19722B07C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!a14)
    goto LABEL_4;
  do
  {
    v16 = __ldaxr((unsigned int *)a14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)a14));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if (!v14)
      goto LABEL_8;
  }
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::restoreAppHighlightsAndScrollToIndex(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  IPC::Encoder *v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;

  v33 = a3;
  if (*(_BYTE *)(result + 729))
    return result;
  v3 = result;
  if (!*(_BYTE *)(result + 728))
    return result;
  v31 = 0;
  v32 = 0;
  v5 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v5)
    goto LABEL_15;
  if (v5 >> 28)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  LODWORD(v32) = *((_DWORD *)a2 + 3);
  v31 = WTF::fastMalloc((WTF *)(16 * v5));
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = *a2;
    v8 = 8 * v6;
    do
    {
      WebCore::SharedMemory::createHandle();
      if (v37)
      {
        WTF::MachSendRight::MachSendRight();
        v35 = v36[1];
        if (HIDWORD(v32) == (_DWORD)v32)
        {
          WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SharedMemoryHandle>((uint64_t)&v31, (unint64_t)&v34);
        }
        else
        {
          *(_QWORD *)(WTF::MachSendRight::MachSendRight() + 8) = v35;
          ++HIDWORD(v32);
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v34);
        if (v37)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v36);
      }
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
    v9 = HIDWORD(v32);
  }
  else
  {
LABEL_15:
    v9 = 0;
  }
  WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v31, v9);
  WebKit::WebPageProxy::setUpHighlightsObserver(v3);
  v10 = *(_QWORD *)(v3 + 208);
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2340;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v34 = (IPC::Encoder *)v12;
  v13 = HIDWORD(v32);
  v14 = *(_QWORD *)(v12 + 544);
  v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = v15 + 8;
  v17 = *(_QWORD *)(v12 + 552);
  if (v17 < v15 + 8)
  {
    v27 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v28 = v27;
      v27 *= 2;
    }
    while (v28 < v16);
    v29 = (char *)mmap(0, v28, 3, 4098, -1, 0);
    if (v29 != (char *)-1)
    {
      v18 = v29;
      memcpy(v29, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
      v30 = *(void **)(v12 + 528);
      if (v30 != (void *)(v12 + 16))
        munmap(v30, *(_QWORD *)(v12 + 552));
      *(_QWORD *)(v12 + 528) = v18;
      *(_QWORD *)(v12 + 552) = v28;
      v14 = *(_QWORD *)(v12 + 544);
      goto LABEL_18;
    }
    __break(0xC471u);
LABEL_36:
    JUMPOUT(0x19722B3B8);
  }
  v18 = *(char **)(v12 + 528);
LABEL_18:
  bzero(&v18[v14], v15 - v14);
  *(_QWORD *)(v12 + 544) = v16;
  v19 = (_QWORD *)(*(_QWORD *)(v12 + 528) + v15);
  *(_QWORD *)(v12 + 536) = v19 + 1;
  *v19 = v13;
  if (HIDWORD(v32))
  {
    v20 = v31;
    v21 = 16 * HIDWORD(v32);
    do
    {
      IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v12, v20);
      v20 += 16;
      v21 -= 16;
    }
    while (v21);
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)v12, (int *)&v33);
  LOBYTE(v36[0]) = 0;
  v37 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v34, 0, (uint64_t)v36, 1);
  if (v37)
  {
    v23 = v36[0];
    v36[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v25, v26);
  }
  return WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v22);
}

void sub_19722B3C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;

  if (a16)
  {
    v17 = a14;
    a14 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = a12;
  a12 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12WebPageProxy23setUpHighlightsObserverEv_block_invoke(uint64_t a1, char a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(unsigned int **)(a1 + 32);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34CA8A0;
  if (v3)
  {
    do
      v6 = __ldaxr(v3);
    while (__stlxr(v6 + 1, v3));
  }
  *(_QWORD *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 16) = a2;
  v11 = v5;
  WTF::ensureOnMainRunLoop();
  result = v11;
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v3)
  {
    do
    {
      v9 = __ldaxr(v3);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v3));
    if (!v10)
    {
      atomic_store(1u, v3);
      return WTF::fastFree((WTF *)v3, v7);
    }
  }
  return result;
}

void sub_19722B510(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c90_ZTSN3WTF7WeakPtrIN6WebKit12WebPageProxyENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::WebPageProxy::startApplePayAMSUISession(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;

  if (byte_1EE341853 == 1)
  {
    if (qword_1EE341890)
      goto LABEL_3;
LABEL_24:
    v25 = 0;
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v23 + 16))(v23, &v25);
    goto LABEL_25;
  }
  qword_1EE341890 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleMediaServicesUI.framework/AppleMediaServicesUI", 2);
  byte_1EE341853 = 1;
  if (!qword_1EE341890)
    goto LABEL_24;
LABEL_3:
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 488))(*(_QWORD *)(a1 + 104));
  if (!v7)
  {
    v24 = 0;
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v23 + 16))(v23, &v24);
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    return;
  }
  v8 = v7;
  v9 = objc_alloc((Class)off_1EE33F228());
  v10 = (void *)MEMORY[0x1E0CB36D8];
  if (*a3)
    v11 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E351F1B8;
  v12 = objc_msgSend(v10, "JSONObjectWithData:options:error:", -[__CFString dataUsingEncoding:](v11, "dataUsingEncoding:", 4), 0, 0);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v13 = v12;
  else
    v13 = 0;
  v14 = (void *)objc_msgSend(v9, "initWithRequestDictionary:", v13);
  objc_msgSend(v14, "setOriginatingURL:", WTF::URL::operator NSURL *());
  v15 = (const void *)objc_msgSend((id)_MergedGlobals_1079(), "createBagForSubProfile");
  v16 = v15;
  if (v15)
    CFRetain(v15);
  v17 = (void *)objc_msgSend(objc_alloc((Class)_MergedGlobals_1079()), "initWithRequest:bag:presentingViewController:", v14, v16, v8);
  v18 = *(const void **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v17;
  if (v18)
  {
    CFRelease(v18);
    v17 = *(void **)(a1 + 424);
  }
  objc_msgSend(v17, "setRemotePresentation:", 1);
  v19 = (void *)objc_msgSend(*(id *)(a1 + 424), "presentEngagement");
  v20 = v19;
  if (v19)
    CFRetain(v19);
  v21 = *a4;
  *a4 = 0;
  v22 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v22 = MEMORY[0x1E0C809A0];
  v22[1] = 50331650;
  v22[2] = WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::{lambda(void *,AMSEngagementResult *,NSError *)#1}::__invoke;
  v22[3] = &WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::descriptor;
  v22[4] = v21;
  objc_msgSend(v20, "addFinishBlock:", v22);
  _Block_release(v22);
  if (v20)
    CFRelease(v20);
  if (v16)
    CFRelease(v16);
  if (v14)
    CFRelease(v14);
}

void sub_19722B860(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19722B8D8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x19722B8F8);
  JUMPOUT(0x19722B8ACLL);
}

void WebKit::WebPageProxy::abortApplePayAMSUISession(WebKit::WebPageProxy *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  objc_msgSend(v1, "cancel");
  if (v1)
    CFRelease(v1);
}

void sub_19722B944(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::grantAccessToAssetServices(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  _BYTE v7[16];
  __int128 v8[2];
  char v9;
  _OWORD v10[2];
  uint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v11[0] = (uint64_t)"com.apple.mobileassetd.v2";
  v11[1] = 26;
  v2 = *(_QWORD *)(*((_QWORD *)this + 26) + 144);
  if (!v2)
    goto LABEL_5;
  if (!*(_QWORD *)(v2 + 352))
  {
    LOBYTE(v2) = 0;
LABEL_5:
    v3 = 0;
    goto LABEL_6;
  }
  xpc_connection_get_audit_token();
  LOBYTE(v2) = v8[0];
  v10[0] = *(__int128 *)((char *)v8 + 1);
  *(_OWORD *)((char *)v10 + 15) = v8[1];
  v3 = 1;
LABEL_6:
  LOBYTE(v8[0]) = v2;
  *(__int128 *)((char *)v8 + 1) = v10[0];
  v8[1] = *(_OWORD *)((char *)v10 + 15);
  v9 = v3;
  WebKit::SandboxExtension::createHandlesForMachLookup(v11, 1uLL, v8, 1, (uint64_t)v7);
  v4 = *((_QWORD *)this + 26);
  *(_QWORD *)&v8[0] = v7;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GrantAccessToAssetServices>(v4, (uint64_t *)v8, 0, 0);
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

void sub_19722BA54(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GrantAccessToAssetServices>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2594;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19722BB54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RevokeAccessToAssetServices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2620;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_19722BC68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DisableURLSchemeCheckInDataDetectors>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2584;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_19722BD74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::switchFromStaticFontRegistryToUserFontRegistry(WebKit::WebPageProxy *this)
{
  uint64_t result;
  uint64_t v3;
  void *v4;
  _BYTE *v5;
  _BYTE v6[16];
  char v7;

  result = WebKit::WebProcessProxy::fontdMachExtensionHandles(*((_QWORD *)this + 26), (uint64_t)v6);
  if (v7)
  {
    v3 = *((_QWORD *)this + 26);
    v5 = v6;
    result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SwitchFromStaticFontRegistryToUserFontRegistry>(v3, (uint64_t *)&v5, 0, 0);
    if (v7)
      return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
  }
  return result;
}

void sub_19722BE18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SwitchFromStaticFontRegistryToUserFontRegistry>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2653;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19722BF18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::insertMultiRepresentationHEIC(WebKit::WebPageProxy *this, NSData *a2, NSString *a3)
{
  uint64_t v5;
  const void *v7;
  NSUInteger v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v5 = *((_QWORD *)this + 26);
  if (a2)
  {
    v7 = -[NSData bytes](a2, "bytes");
    v8 = -[NSData length](a2, "length");
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v12[0] = v7;
  v12[1] = v8;
  MEMORY[0x19AEABCC8](&v11, a3);
  v13[0] = v12;
  v13[1] = &v11;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertMultiRepresentationHEIC>(v5, (uint64_t)v13, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19722C01C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::shouldAllowAutoFillForCellularIdentifiers(WebKit::WebPageProxy *this)
{
  const WTF::URL *v1;
  WTF::StringImpl *v2;
  uint64_t shouldAllowAutoFillForCellularIdentifiers;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[5];

  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*((_QWORD *)this + 4) + 968), &v7);
  MEMORY[0x19AEABB0C](v8, &v7, 0);
  shouldAllowAutoFillForCellularIdentifiers = WebKit::shouldAllowAutoFillForCellularIdentifiers((WebKit *)v8, v1);
  v4 = v8[0];
  v8[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return shouldAllowAutoFillForCellularIdentifiers;
}

void sub_19722C0E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::deactivateMediaCapability(WebKit::WebPageProxy *this, id *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  char *v11;
  char *v12;
  void *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  CFTypeRef *v20;
  WebKit::ExtensionCapabilityGranter *v21;
  WebKit::ExtensionCapabilityGranter *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint8_t buf[4];
  WebKit::WebPageProxy *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71618;
  if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      v7 = *(_DWORD *)(v6 + 108);
    else
      v7 = 0;
    v8 = *(_QWORD *)(v5 + 744);
    v9 = *(_QWORD *)(v5 + 1896);
    WebKit::MediaCapability::environmentIdentifier(a2, (uint64_t *)&v24);
    WTF::String::utf8();
    v10 = v25;
    WTF::String::utf8();
    v11 = (char *)v10 + 16;
    if (!v10)
      v11 = 0;
    *(_DWORD *)buf = 134219267;
    if (v23)
      v12 = (char *)v23 + 16;
    else
      v12 = 0;
    v27 = this;
    v28 = 2048;
    v29 = v8;
    v30 = 2048;
    v31 = v9;
    v32 = 1024;
    v33 = v7;
    v34 = 2082;
    v35 = v11;
    v36 = 2085;
    v37 = v12;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::deactivateMediaCapability: deactivating (envID=%{public}s) for URL '%{sensitive}s'", buf, 0x3Au);
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, v13);
      else
        --*(_DWORD *)v23;
    }
    v14 = v25;
    v25 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v13);
      else
        --*(_DWORD *)v14;
    }
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v16 = *((_QWORD *)this + 26);
  v17 = (unsigned int *)(v16 + 16);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 512) + 8);
  if (v19)
    v20 = (CFTypeRef *)(v19 - 16);
  else
    v20 = 0;
  CFRetain(v20[1]);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
  v21 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v20);
  WebKit::ExtensionCapabilityGranter::setMediaCapabilityActive(v21, (WebKit::MediaCapability *)a2, 0);
  v22 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v20);
  WebKit::ExtensionCapabilityGranter::revoke(v22, (const WebKit::ExtensionCapability *)a2);
  if (v19)
    CFRelease(v20[1]);
}

void sub_19722C378(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::resetMediaCapability(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  const URL *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  CFTypeRef v18;
  void (**v19)(WebKit::ExtensionCapability *__hidden);
  CFTypeRef v20;
  WTF *v21;
  WTF::StringImpl *v22;
  CFTypeRef cf;
  WTF::StringImpl *v24[10];
  char v25;
  URL v26;

  v4 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (WTF::StringImpl *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, a3);
  if ((_DWORD)result)
  {
    WebKit::WebPageProxy::currentURL(this, v24);
    MEMORY[0x19AEABB0C](&v26, v24, 0);
    v8 = v24[0];
    v24[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728) && (*((_BYTE *)&v26 + 8) & 1) != 0)
    {
      v11 = *((_QWORD *)this + 4);
      if (!*(_BYTE *)(v11 + 2560) || (WTF::protocolHostAndPortAreEqual((WTF *)(v11 + 2512), &v26, v7) & 1) == 0)
      {
        WebKit::MediaCapability::MediaCapability((uint64_t)&v19, (uint64_t *)&v26);
        WebKit::MediaCapability::MediaCapability((uint64_t)v24, (uint64_t)&v19);
        v25 = 1;
        WebKit::WebPageProxy::setMediaCapability(this, (uint64_t)v24);
        std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v12);
        v13 = cf;
        cf = 0;
        if (v13)
          CFRelease(v13);
        v14 = v22;
        v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (v21)
        {
          *((_QWORD *)v21 + 1) = 0;
          v15 = (unsigned int *)v21;
          v21 = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v10);
            }
          }
        }
        else
        {
          v21 = 0;
        }
        v18 = v20;
        v19 = off_1E34AB458;
        v20 = 0;
        if (v18)
          CFRelease(v18);
      }
    }
    else
    {
      LOBYTE(v24[0]) = 0;
      v25 = 0;
      WebKit::WebPageProxy::setMediaCapability(this, (uint64_t)v24);
      std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v9);
    }
    result = (WTF::StringImpl *)v26.m_string.m_impl.m_ptr;
    v26.m_string.m_impl.m_ptr = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19722C5DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, WTF *a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, WTF::StringImpl *a19)
{
  uint64_t v19;
  WTF::StringImpl *v21;

  v21 = *(WTF::StringImpl **)(v19 - 56);
  *(_QWORD *)(v19 - 56) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::shouldDeactivateMediaCapability(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v1 + 2560))
    return 0;
  result = WebKit::MediaCapability::isActivatingOrActive((WebKit::MediaCapability *)(v1 + 2480));
  if (!(_DWORD)result)
    return result;
  if ((*(_DWORD *)(*((_QWORD *)this + 4) + 808) & 0x7FDFC00) != 0)
    return 0;
  v4 = *((_QWORD *)this + 68);
  return !v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_QWORD *)(v5 + 8) == 0;
}

uint64_t WebKit::WebPageProxy::setWritingToolsActive(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(unsigned __int8 *)(this + 1384) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1800))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
    *(_BYTE *)(v3 + 1384) = v2;
    v6 = *(_QWORD *)(v3 + 40);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1808))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
  }
  return this;
}

void sub_19722C820(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::writingToolsBehavior(WebKit::WebPageProxy *this)
{
  _BYTE *v2;
  BOOL v3;
  BOOL v5;

  if (*((_BYTE *)this + 616))
  {
    return 3;
  }
  else
  {
    v2 = (_BYTE *)*((_QWORD *)this + 4);
    if (*(_BYTE *)(*((_QWORD *)this + 6) + 475))
      v3 = v2[233] == 0;
    else
      v3 = 0;
    if (v3 && v2[239] == 0)
    {
      if (v2[237])
        v5 = *(_BYTE *)(*((_QWORD *)this + 6) + 475) == 3;
      else
        v5 = 0;
      if (v5)
        return 3;
      else
        return 2;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t WebKit::WebPageProxy::enableSourceTextAnimationAfterElementWithID(uint64_t this, const WTF::String *a2, const WTF::UUID *a3)
{
  uint64_t v3;
  uint64_t *v4[2];

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v3 = *(_QWORD *)(this + 208);
      v4[0] = (uint64_t *)a2;
      v4[1] = (uint64_t *)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::enableSourceTextAnimationAfterElementWithID>(v3, v4, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::enableTextAnimationTypeForElementWithID(uint64_t this, const WTF::String *a2, const WTF::UUID *a3)
{
  uint64_t v3;
  uint64_t *v4[2];

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v3 = *(_QWORD *)(this + 208);
      v4[0] = (uint64_t *)a2;
      v4[1] = (uint64_t *)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EnableTextAnimationTypeForElementWithID>(v3, v4, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

void WebKit::WebPageProxy::addTextAnimationForAnimationID(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int128 *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v50;
  int v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*a3 > 1uLL)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = (uint64_t *)(v11 + 2216);
    v13 = *(_QWORD *)(v11 + 2216);
    if (v13
      || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::TextIndicatorData,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::TextIndicatorData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(v11 + 2216)),
          (v13 = *v12) != 0))
    {
      v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      v14 = 0;
    }
    v51 = -1640531527;
    LOWORD(v52) = 0;
    BYTE2(v52) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v51, a3);
    v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v51) & v14;
    v16 = (_QWORD *)(v13 + (v15 << 7));
    v18 = *v16;
    v17 = v16[1];
    if (*(_OWORD *)v16 != 0)
    {
      v19 = 0;
      v20 = 1;
      while (v17 != a3[1] || v18 != *a3)
      {
        if (!(v18 ^ 1 | v17))
          v19 = v16;
        v15 = ((_DWORD)v15 + v20) & v14;
        v16 = (_QWORD *)(v13 + (v15 << 7));
        v18 = *v16;
        v17 = v16[1];
        ++v20;
        if (*(_OWORD *)v16 == 0)
        {
          if (v19)
          {
            *((_OWORD *)v19 + 6) = 0u;
            *((_OWORD *)v19 + 7) = 0u;
            *((_OWORD *)v19 + 4) = 0u;
            *((_OWORD *)v19 + 5) = 0u;
            *((_OWORD *)v19 + 2) = 0u;
            *((_OWORD *)v19 + 3) = 0u;
            *(_OWORD *)v19 = 0u;
            *((_OWORD *)v19 + 1) = 0u;
            *((_DWORD *)v19 + 20) = 1065353216;
            *(_OWORD *)(v19 + 11) = 0u;
            *(_OWORD *)(v19 + 13) = 0u;
            *((_BYTE *)v19 + 120) = 0;
            --*(_DWORD *)(*v12 - 16);
            v16 = v19;
          }
          goto LABEL_16;
        }
      }
LABEL_25:
      if (*a6)
      {
        v28 = *(_QWORD *)(a1 + 32);
        v29 = (uint64_t *)(v28 + 2224);
        v30 = *(_QWORD *)(v28 + 2224);
        if (v30
          || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(v28 + 2224), 0), (v30 = *v29) != 0))
        {
          v31 = *(_DWORD *)(v30 - 8);
        }
        else
        {
          v31 = 0;
        }
        v51 = -1640531527;
        LOWORD(v52) = 0;
        BYTE2(v52) = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v51, a3);
        v32 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v51) & v31;
        v33 = (_QWORD *)(v30 + 32 * v32);
        v35 = *v33;
        v34 = v33[1];
        if (*(_OWORD *)v33 != 0)
        {
          v36 = 0;
          v37 = 1;
          while (v34 != a3[1] || v35 != *a3)
          {
            if (!(v35 ^ 1 | v34))
              v36 = v33;
            v32 = ((_DWORD)v32 + v37) & v31;
            v33 = (_QWORD *)(v30 + 32 * v32);
            v35 = *v33;
            v34 = v33[1];
            ++v37;
            if (*(_OWORD *)v33 == 0)
            {
              if (v36)
              {
                *v36 = 0;
                v36[1] = 0;
                v36[2] = 0;
                --*(_DWORD *)(*v29 - 16);
                v33 = v36;
              }
              goto LABEL_40;
            }
          }
          goto LABEL_51;
        }
LABEL_40:
        *(_OWORD *)v33 = *(_OWORD *)a3;
        v39 = *a6;
        *a6 = 0;
        v40 = v33[2];
        v33[2] = v39;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        v41 = *v29;
        if (*v29)
          v42 = *(_DWORD *)(v41 - 12) + 1;
        else
          v42 = 1;
        *(_DWORD *)(v41 - 12) = v42;
        v43 = *v29;
        if (*v29)
          v44 = *(_DWORD *)(v43 - 12);
        else
          v44 = 0;
        v45 = (*(_DWORD *)(v43 - 16) + v44);
        v46 = *(unsigned int *)(v43 - 4);
        if (v46 > 0x400)
        {
          if (v46 > 2 * v45)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (3 * v46 <= 4 * v45)
LABEL_50:
          WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v29, (uint64_t)v33);
      }
LABEL_51:
      v47 = *(_QWORD *)(a1 + 40);
      if (v47)
        v48 = *(_QWORD *)(v47 + 8);
      else
        v48 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 1584))(v48);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v48 + 1736))(v48, a3, a4);
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 1592))(v48);
      return;
    }
LABEL_16:
    *(_OWORD *)v16 = *(_OWORD *)a3;
    WebCore::TextIndicatorData::operator=((uint64_t)(v16 + 2), a5);
    v22 = *v12;
    if (*v12)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v12;
    if (*v12)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_25;
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_25;
    }
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::TextIndicatorData,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::TextIndicatorData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v12);
    goto LABEL_25;
  }
  v50 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    v51 = 136315138;
    v52 = "void WebKit::WebPageProxy::addTextAnimationForAnimationID(IPC::Connection &, const WTF::UUID &, const TextAnim"
          "ationData &, const WebCore::TextIndicatorData &, CompletionHandler<void ()> &&)";
    _os_log_fault_impl(&dword_196BCC000, v50, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1237: Invalid message dispatched %s", (uint8_t *)&v51, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
}

void sub_19722CD3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPageProxy::callCompletionHandlerForAnimationID(uint64_t *this, const WTF::UUID *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      v2 = (uint64_t *)(this[4] + 2224);
      v3 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v2, (uint64_t *)a2);
      this = WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take(v2, v3, &v5);
      v4 = v5;
      if (v5)
      {
        v5 = 0;
        (*(void (**)(uint64_t *))(*v4 + 16))(v4);
        (*(void (**)(uint64_t *))(*v4 + 8))(v4);
        this = v5;
        v5 = 0;
        if (this)
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
      }
    }
  }
  return this;
}

void sub_19722CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::getTextIndicatorForID(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  _QWORD v35[2];
  char v36;
  char v37;
  TextIndicatorData v38;
  char v39;
  IPC::Encoder *v40;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    LOBYTE(v38.selectionRectInRootViewCoordinates.m_location.m_x) = 0;
    v39 = 0;
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, TextIndicatorData *))(*(_QWORD *)v4 + 16))(v4, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(v9 + 2216);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      LODWORD(v35[0]) = -1640531527;
      WORD2(v35[0]) = 0;
      BYTE6(v35[0]) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(v35, a2);
      v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v35);
      v13 = *a2;
      v14 = a2[1];
      v15 = v12 & v11;
      v16 = (uint64_t *)(v10 + (v15 << 7));
      v17 = *v16;
      v18 = v16[1];
      if (v18 == v14 && v17 == v13)
      {
LABEL_17:
        WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)&v38, (const TextIndicatorData *)(v10 + (v15 << 7) + 16));
        v39 = 1;
        WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v35, &v38);
        v37 = 1;
        v23 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 16))(v23, v35);
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, v24);
        return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v5);
      }
      v20 = 1;
      while (v17 | v18)
      {
        v15 = ((_DWORD)v15 + v20) & v11;
        v21 = (uint64_t *)(v10 + (v15 << 7));
        v17 = *v21;
        v18 = v21[1];
        v22 = v18 == v14 && v17 == v13;
        ++v20;
        if (v22)
          goto LABEL_17;
      }
      v9 = *(_QWORD *)(a1 + 32);
    }
    LOBYTE(v38.selectionRectInRootViewCoordinates.m_location.m_x) = 0;
    v39 = 0;
    v25 = *(_QWORD *)(a1 + 208);
    v26 = *(_QWORD *)(v9 + 1896);
    v27 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v27 = 2508;
    *(_QWORD *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 528) = v27 + 16;
    *(_QWORD *)(v27 + 536) = v27 + 16;
    *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v27 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
    v40 = (IPC::Encoder *)v27;
    IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v27, a2);
    v28 = *a3;
    *a3 = 0;
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = &off_1E34CA940;
    v29[1] = v28;
    v30 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v35[0] = v29;
    v35[1] = v30;
    v36 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v25, &v40, 0, (uint64_t)v35, 1);
    if (v36)
    {
      v31 = v35[0];
      v35[0] = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    v32 = v40;
    v40 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v5);
      WTF::fastFree(v33, v34);
    }
  }
  return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v5);
}

void sub_19722D07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v4);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateUnderlyingTextVisibilityForTextAnimationID(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7 = a2;
    v8 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::updateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(v6, (uint64_t)&v7, a4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_19722D1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::removeTextAnimationForAnimationID(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::UUID *a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3 <= 1uLL)
  {
    v7 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v8 = 136315138;
      v9 = "void WebKit::WebPageProxy::removeTextAnimationForAnimationID(IPC::Connection &, const WTF::UUID &)";
      _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1286: Invalid message dispatched %s", (uint8_t *)&v8, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
  else
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v5 + 1584))(v5, a2);
    (*(void (**)(uint64_t, const WTF::UUID *))(*(_QWORD *)v5 + 1744))(v5, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  }
}

void sub_19722D318(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a3 <= 1uLL)
  {
    v13 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v14 = 136315138;
      v15 = "void WebKit::WebPageProxy::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(IPC::Connection &"
            ", const WebCore::WritingTools::Session::ID &, const WebCore::WritingTools::TextSuggestion::ID &, WebCore::IntRect)";
      _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1297: Invalid message dispatched %s", (uint8_t *)&v14, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 1784))(v11, a3, a4, a5, a6);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
  }
}

void sub_19722D498(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*a3 <= 1uLL)
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v12 = 136315138;
      v13 = "void WebKit::WebPageProxy::proofreadingSessionUpdateStateForSuggestionWithID(IPC::Connection &, const WebCor"
            "e::WritingTools::Session::ID &, WebCore::WritingTools::TextSuggestion::State, const WebCore::WritingTools::T"
            "extSuggestion::ID &)";
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 1304: Invalid message dispatched %s", (uint8_t *)&v12, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 1792))(v9, a3, a4, a5);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  }
}

void sub_19722D604(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::playPredominantOrNowPlayingMediaSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7;

  if (WebKit::WebPageProxy::tryToSendCommandToActiveControlledVideo((uint64_t **)a1, 1))
  {
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(v6, (uint64_t)&v7, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_19722D6B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebPageProxy::tryToSendCommandToActiveControlledVideo(uint64_t **a1, uint64_t a2)
{
  WebCore::PlaybackSessionInterfaceIOS *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL8 v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::PlaybackSessionInterfaceIOS *v18;
  char v19;
  __int16 v20;

  if (!WebKit::WebPageProxy::hasActiveVideoForControlsManager((WebKit::WebPageProxy *)a1))
    return 0;
  WebKit::PlaybackSessionManagerProxy::controlsManagerInterface(a1[47], (uint64_t *)&v18);
  v4 = v18;
  v5 = WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(v18);
  v7 = v5;
  if (v5)
  {
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
      goto LABEL_26;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v7;
    v9 = *(unsigned int **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = v8;
    if (!v9)
      goto LABEL_26;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
LABEL_26:
      do
        v12 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v12 + 1, (unsigned int *)v8));
    }
    v4 = v18;
    if (!v18)
      goto LABEL_15;
  }
  else
  {
    v8 = 0;
    if (!v4)
      goto LABEL_15;
  }
  if (*((_DWORD *)v4 + 4) == 1)
  {
    (*(void (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)v4 + 8))(v4);
    if (v8)
      goto LABEL_16;
    return 0;
  }
  --*((_DWORD *)v4 + 4);
LABEL_15:
  if (!v8)
    return 0;
LABEL_16:
  v13 = *(_QWORD *)(v8 + 8);
  v14 = v13 != 0;
  if (v13)
  {
    LOBYTE(v18) = 0;
    v19 = 0;
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, WebCore::PlaybackSessionInterfaceIOS **))(*(_QWORD *)v13 + 240))(v13, a2, &v18);
  }
  do
  {
    v15 = __ldaxr((unsigned int *)v8);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v8));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  return v14;
}

void sub_19722D828(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::pauseNowPlayingMediaSession(uint64_t **a1, uint64_t *a2)
{
  _BOOL8 active;
  uint64_t v4;

  active = WebKit::WebPageProxy::tryToSendCommandToActiveControlledVideo(a1, 2);
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 16))(v4, active);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19722D8D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::grantAccess(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, int a4)
{
  uint64_t result;
  const WTF::StringImpl *v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t *v12;
  void *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int **v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unsigned int *v32;
  unsigned int v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  WTF::StringImpl **v39;
  int i;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int *v56;
  unsigned int *v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  CFTypeRef cf;
  uint64_t v64[2];
  WTF *v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  result = WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(a1 + 16, a2);
  if (!(_DWORD)result || !*a3 || !*((_DWORD *)*a3 + 1))
    return result;
  MEMORY[0x19AEAFFC4](&cf, a3);
  v10 = (const void *)WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = (uint64_t *)(a1 + 32);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 32), a3, v9);
  v14 = (unsigned int *)result;
  v15 = *v12;
  if (*v12)
    v15 += 32 * *(unsigned int *)(v15 - 4);
  if (v15 != result && *(const void **)(result + 8) == v10)
  {
    v16 = (unsigned int **)(result + 16);
    v17 = *(unsigned int *)(result + 28);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = *v16;
      v20 = *v16 + 2;
      while (1)
      {
        v21 = *((_QWORD *)v20 - 1);
        if (v21)
        {
          if (*(_QWORD *)(v21 + 8) == a2)
            break;
        }
        ++v18;
        v20 += 16;
        if (v17 == v18)
          goto LABEL_15;
      }
      if (a4 == 1)
      {
        if (v18 >= v17)
        {
          __break(0xC471u);
          return result;
        }
        *v20 = 1;
      }
      v55 = 0;
      v56 = &v19[4 * v17];
      v57 = v56;
      v58 = (unint64_t)v56;
      do
      {
        result = *(_QWORD *)v19;
        if (!*(_QWORD *)v19 || !*(_QWORD *)(result + 8))
        {
          if (v58 == *((_QWORD *)v14 + 2) + 16 * v14[7])
          {
            v58 = (unint64_t)v19;
          }
          else if (v57 != v19)
          {
            WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping(v57, v19, v58);
            v58 += (char *)v19 - (char *)v57;
            result = *(_QWORD *)v19;
          }
          *(_QWORD *)v19 = 0;
          v57 = v19 + 4;
          if (result)
          {
            do
            {
              v59 = __ldaxr((unsigned int *)result);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, (unsigned int *)result));
            if (!v60)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v13);
            }
          }
          ++v55;
        }
        v19 += 4;
      }
      while (v19 < v56);
      v61 = v14[7];
      v62 = (unsigned int *)(*((_QWORD *)v14 + 2) + 16 * v61);
      if (v57 != v62)
      {
        result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping(v57, v62, v58);
        LODWORD(v61) = v14[7];
      }
      v54 = v61 - v55;
    }
    else
    {
LABEL_15:
      result = (uint64_t)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
      v22 = *(unsigned int **)(a2 + 8);
      if (v22)
      {
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
      }
      cf = v22;
      LOBYTE(v64[0]) = a4;
      v24 = v14[7];
      if ((_DWORD)v24 == v14[6])
      {
        v25 = WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 4, v24 + 1, (unint64_t)&cf);
        v27 = v14[7];
        v28 = *((_QWORD *)v14 + 2) + 16 * v27;
        v29 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)v28 = v29;
        *(_BYTE *)(v28 + 8) = *(_BYTE *)(v25 + 8);
        result = (uint64_t)cf;
        v14[7] = v27 + 1;
        cf = 0;
        if (result)
        {
          do
          {
            v30 = __ldaxr((unsigned int *)result);
            v31 = --v30 == 0;
          }
          while (__stlxr(v30, (unsigned int *)result));
          goto LABEL_49;
        }
        return result;
      }
      v53 = *((_QWORD *)v14 + 2) + 16 * v24;
      *(_QWORD *)v53 = v22;
      *(_BYTE *)(v53 + 8) = a4;
      v54 = v24 + 1;
    }
    v14[7] = v54;
    return result;
  }
  cf = v10;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v32 = *(unsigned int **)(a2 + 8);
  if (v32)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v65 = (WTF *)v32;
  v66 = a4;
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v64, (uint64_t)&v65, 1uLL);
  v35 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12),
        (v35 = *v12) != 0))
  {
    v36 = *(_DWORD *)(v35 - 8);
  }
  else
  {
    v36 = 0;
  }
  v37 = *((_DWORD *)*a3 + 4);
  if (v37 >= 0x100)
    v38 = v37 >> 8;
  else
    v38 = WTF::StringImpl::hashSlowCase(*a3);
  v39 = 0;
  for (i = 1; ; ++i)
  {
    v41 = v38 & v36;
    v42 = (WTF::StringImpl **)(v35 + 32 * v41);
    v43 = *v42;
    if (*v42 == (WTF::StringImpl *)-1)
    {
      v39 = (WTF::StringImpl **)(v35 + 32 * v41);
      goto LABEL_35;
    }
    if (!v43)
      break;
    if (WTF::equal(v43, *a3, v34))
    {
      v46 = v35 + 32 * v41;
      *(_QWORD *)(v46 + 8) = cf;
      WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v46 + 16, (unsigned int *)v64);
      goto LABEL_47;
    }
LABEL_35:
    v38 = i + v41;
  }
  if (v39)
  {
    *(_OWORD *)v39 = 0u;
    *((_OWORD *)v39 + 1) = 0u;
    --*(_DWORD *)(*v12 - 16);
    v42 = v39;
  }
  WTF::String::operator=(v42, (WTF::StringImpl *)a3);
  v42[1] = (WTF::StringImpl *)cf;
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v42 + 2), (unsigned int *)v64);
  v44 = *v12;
  if (*v12)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v48 = *v12;
  if (*v12)
    v49 = *(_DWORD *)(v48 - 12);
  else
    v49 = 0;
  v50 = (*(_DWORD *)(v48 - 16) + v49);
  v51 = *(unsigned int *)(v48 - 4);
  if (v51 > 0x400)
  {
    if (v51 <= 2 * v50)
LABEL_46:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12);
  }
  else if (3 * v51 <= 4 * v50)
  {
    goto LABEL_46;
  }
LABEL_47:
  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v64, v47);
  result = (uint64_t)v65;
  v65 = 0;
  if (result)
  {
    do
    {
      v52 = __ldaxr((unsigned int *)result);
      v31 = --v52 == 0;
    }
    while (__stlxr(v52, (unsigned int *)result));
LABEL_49:
    if (v31)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v26);
    }
  }
  return result;
}

void sub_19722DD90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *cf, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int v13;
  unsigned int v14;

  if (cf)
  {
    do
    {
      v13 = __ldaxr(cf);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, cf));
    if (!v14)
    {
      atomic_store(1u, cf);
      WTF::fastFree((WTF *)cf, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebPasteboardProxy::revokeAccess(WebKit::WebPasteboardProxy *this, WebKit::WebProcessProxy *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 4);
  v5 = (uint64_t)result;
  v7 = v6;
  v8 = *((_QWORD *)this + 4);
  if (v8)
    v9 = (void *)(v8 + 32 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = WebKit::WebPasteboardProxy::PasteboardAccessInformation::revokeAccess((unsigned int *)(v5 + 8), a2);
      while (1)
      {
        v5 += 32;
        if (v5 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_10;
      }
      v5 = v7;
LABEL_10:
      ;
    }
    while ((void *)v5 != v9);
  }
  return result;
}

unsigned int *WebKit::WebPasteboardProxy::PasteboardAccessInformation::revokeAccess(unsigned int *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t i;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;

  v2 = this[5];
  if ((_DWORD)v2)
  {
    v3 = this;
    for (i = *((_QWORD *)this + 1); ; i += 16)
    {
      this = *(unsigned int **)i;
      if (*(_QWORD *)i)
      {
        if (*((WebKit::WebProcessProxy **)this + 1) == a2)
          break;
      }
      if (!--v2)
        return this;
    }
    *(_QWORD *)i = 0;
    do
    {
      v5 = __ldaxr(this);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, this));
    if (!v6)
    {
      atomic_store(1u, this);
      v7 = i;
      WTF::fastFree((WTF *)this, a2);
      i = v7;
    }
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping((unsigned int *)(i + 16), (unsigned int *)(*((_QWORD *)v3 + 1) + 16 * v3[5]--), i);
  }
  return this;
}

uint64_t WebKit::WebPasteboardProxy::accessType(WebKit::WebPasteboardProxy *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  WebKit::WebProcessProxy *v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  NSObject *v22;
  int v23;
  int i;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  __int16 v34;
  void *v35;
  const char *v37;
  WebKit::WebProcessProxy *v38;
  WTF::StringImpl **v39;
  WebKit::WebPasteboardProxy *v40;
  _BYTE cf[12];
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!*a3 || !*((_DWORD *)*a3 + 1))
  {
    v22 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_23:
      LOBYTE(v18) = 0;
      v23 = 0;
      *((_BYTE *)a2 + 98) = 1;
      return v18 | (v23 << 8);
    }
    *(_DWORD *)cf = 136446210;
    *(_QWORD *)&cf[4] = "std::optional<WebPasteboardProxy::PasteboardAccessType> WebKit::WebPasteboardProxy::accessType(I"
                        "PC::Connection &, const String &) const";
    v37 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 104: Inv"
          "alid message dispatched %{public}s";
LABEL_45:
    _os_log_fault_impl(&dword_196BCC000, v22, OS_LOG_TYPE_FAULT, v37, cf, 0xCu);
    goto LABEL_23;
  }
  v6 = (WebKit::WebProcessProxy *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(this, a2);
  if (!v6)
  {
    v22 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)cf = 136446210;
    *(_QWORD *)&cf[4] = "std::optional<WebPasteboardProxy::PasteboardAccessType> WebKit::WebPasteboardProxy::accessType(I"
                        "PC::Connection &, const String &) const";
    v37 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 107: Inv"
          "alid message dispatched %{public}s";
    goto LABEL_45;
  }
  v39 = a3;
  v40 = this;
  v7 = (unsigned int *)((char *)v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v38 = v6;
  WebKit::WebProcessProxy::pages(v6, (uint64_t)cf);
  if (v42)
  {
    v10 = 8 * v42;
    v11 = *(uint64_t **)cf;
    while (1)
    {
      v12 = *v11;
      CFRetain(*(CFTypeRef *)(*v11 + 8));
      v13 = *(_QWORD *)(v12 + 224);
      CFRetain(*(CFTypeRef *)(v13 + 8));
      {
        WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
      }
      if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v13 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, v14)|| *(_BYTE *)(*(_QWORD *)(v12 + 32) + 968))
      {
        {
          WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v13 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, v15))
        {
          {
            WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
          }
          if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v13 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, v16))break;
        }
      }
      CFRelease(*(CFTypeRef *)(v13 + 8));
      CFRelease(*(CFTypeRef *)(v12 + 8));
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_19;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
    CFRelease(*(CFTypeRef *)(v12 + 8));
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)cf, v35);
    LOBYTE(v18) = 1;
    v23 = 1;
  }
  else
  {
LABEL_19:
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)cf, v9);
    v18 = *((_QWORD *)v40 + 4);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = *((_DWORD *)*v39 + 4);
      if (v20 >= 0x100)
        v21 = v20 >> 8;
      else
        v21 = WTF::StringImpl::hashSlowCase(*v39);
      for (i = 0; ; v21 = i + v25)
      {
        v25 = v21 & v19;
        v26 = *(WTF **)(v18 + 32 * v25);
        if (v26 != (WTF *)-1)
        {
          if (!v26)
          {
            v27 = *((_QWORD *)v40 + 4);
            if (!v27)
              goto LABEL_39;
            v28 = v27 + 32 * *(unsigned int *)(v27 - 4);
            goto LABEL_33;
          }
          if ((WTF::equal(v26, *v39, v17) & 1) != 0)
            break;
        }
        ++i;
      }
      v28 = v18 + 32 * v25;
      v27 = *((_QWORD *)v40 + 4);
      if (!v27)
        goto LABEL_34;
LABEL_33:
      v27 += 32 * *(unsigned int *)(v27 - 4);
LABEL_34:
      if (v27 != v28)
      {
        v31 = *(_QWORD *)(v28 + 8);
        v30 = v28 + 8;
        v29 = v31;
        MEMORY[0x19AEAFFC4](cf, v39);
        v32 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)cf);
        v33 = *(const void **)cf;
        *(_QWORD *)cf = 0;
        if (v33)
          CFRelease(v33);
        if (v29 == v32)
        {
          v34 = WebKit::WebPasteboardProxy::PasteboardAccessInformation::accessType(v30, v38);
          LOBYTE(v18) = v34;
          v23 = HIBYTE(v34);
          goto LABEL_42;
        }
      }
LABEL_39:
      LOBYTE(v18) = 0;
    }
    v23 = 0;
  }
LABEL_42:
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  return v18 | (v23 << 8);
}

void sub_19722E330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  unsigned int *v13;

  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::PasteboardAccessInformation::accessType(uint64_t this, WebKit::WebProcessProxy *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;

  v2 = *(unsigned int *)(this + 20);
  if (!(_DWORD)v2)
  {
LABEL_7:
    v6 = 0;
    return v2 | (v6 << 8);
  }
  v3 = 0;
  v4 = (unsigned __int8 *)(*(_QWORD *)(this + 8) + 8);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 1);
    if (v5)
    {
      if (*(WebKit::WebProcessProxy **)(v5 + 8) == a2)
        break;
    }
    ++v3;
    v4 += 16;
    if (v2 == v3)
    {
      LODWORD(v2) = 0;
      goto LABEL_7;
    }
  }
  if (v3 < v2)
  {
    LODWORD(v2) = *v4;
    v6 = 1;
    return v2 | (v6 << 8);
  }
  __break(0xC471u);
  return this;
}

void WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(WebKit::WebPasteboardProxy *this, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  const WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  char v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  NSObject *v29;
  WTF *v30;
  char v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::WebPasteboardProxy::webProcessProxyForConnection(this, a2);
  if (v10)
  {
    v12 = (unsigned int *)v10;
    v13 = (unsigned int *)(v10 + 16);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = (uint64_t *)((char *)this + 32);
    v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v15, a3, v11);
    v17 = v16;
    v18 = *v15;
    if (*v15)
      v18 += 32 * *(unsigned int *)(v18 - 4);
    if (v18 != v16)
    {
      v19 = v16 + 8;
      if (*(_QWORD *)(v17 + 8) == a4)
      {
        v20 = WebKit::WebPasteboardProxy::PasteboardAccessInformation::accessType(v19, (WebKit::WebProcessProxy *)v12);
        v21 = v20;
        if (v20 >= 0x100u)
        {
          *(_QWORD *)buf = a5;
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v12 + 2, (uint64_t)v12);
          v22 = (unsigned int *)*((_QWORD *)v12 + 1);
          if (v22)
          {
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
          }
          v30 = (WTF *)v22;
          v31 = v21;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&buf[8], (uint64_t)&v30, 1uLL);
          *(_QWORD *)(v17 + 8) = *(_QWORD *)buf;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v17 + 16, (unsigned int *)&buf[8]);
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[8], v24);
          v26 = (unsigned int *)v30;
          v30 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v25);
            }
          }
        }
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
  else
  {
    v29 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(IPC::Connection &, const Strin"
                           "g &, int64_t, int64_t)";
      _os_log_fault_impl(&dword_196BCC000, v29, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 140: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
}

void sub_19722E5D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  unsigned int *v9;
  uint64_t v10;
  void *v12;
  unsigned int v13;
  unsigned int v14;

  WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  if (a9)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)a9);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)a9));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)a9);
      WTF::fastFree(a9, v12);
    }
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardTypes(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    v17 = 0uLL;
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v17);
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v17) = 136315138;
      *(_QWORD *)((char *)&v17 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardTypes(IPC::Connection &, const Strin"
                                      "g &, std::optional<PageIdentifier>, CompletionHandler<void (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 155: Invalid message dispatched %s", (uint8_t *)&v17, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v17 = 0uLL;
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v17);
    goto LABEL_6;
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34CA9B8;
  v12[1] = a3;
  v12[2] = a6;
  *(_QWORD *)&v17 = v12;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = v17;
  *(_QWORD *)&v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19722E7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::determineDataOwner(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  WebKit::WebProcessProxy *v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v25;
  _BYTE v26[12];
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a3 && *(_DWORD *)(a3 + 4))
  {
    v10 = (WebKit::WebProcessProxy *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(a1, a2);
    if (v10)
    {
      v11 = (unsigned int *)((char *)v10 + 16);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      if (a5)
      {
        WebKit::WebProcessProxy::pages(v10, (uint64_t)v26);
        if (!v27)
        {
LABEL_11:
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v13);
          v17 = off_1ECE71C40;
          if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)v26 = 136446210;
            *(_QWORD *)&v26[4] = "std::optional<DataOwnerType> WebKit::WebPasteboardProxy::determineDataOwner(IPC::Connec"
                                 "tion &, const String &, std::optional<PageIdentifier>, PasteboardAccessIntent) const";
            _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 654: Invalid message dispatched %{public}s", v26, 0xCu);
          }
          v18 = 0;
          v19 = 0;
          *((_BYTE *)a2 + 98) = 1;
          goto LABEL_22;
        }
        v14 = *(uint64_t **)v26;
        v15 = 8 * v27;
        while (1)
        {
          v16 = *v14;
          CFRetain(*(CFTypeRef *)(*v14 + 8));
          if (*(_QWORD *)(*(_QWORD *)(v16 + 32) + 1896) == a4)
            break;
          CFRelease(*(CFTypeRef *)(v16 + 8));
          ++v14;
          v15 -= 8;
          if (!v15)
            goto LABEL_11;
        }
        v21 = *(_QWORD *)(v16 + 40);
        if (v21)
          v22 = *(_QWORD *)(v21 + 8);
        else
          v22 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 1584))(v22);
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 1456))(v22, a6);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 1592))(v22);
        CFRelease(*(CFTypeRef *)(v16 + 8));
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v23);
      }
      else
      {
        v19 = 0;
      }
      v18 = 1;
LABEL_22:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
      return v19 | (v18 << 8);
    }
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v26 = 136446210;
      *(_QWORD *)&v26[4] = "std::optional<DataOwnerType> WebKit::WebPasteboardProxy::determineDataOwner(IPC::Connection &"
                           ", const String &, std::optional<PageIdentifier>, PasteboardAccessIntent) const";
      v25 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 639: I"
            "nvalid message dispatched %{public}s";
      goto LABEL_25;
    }
  }
  else
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v26 = 136446210;
      *(_QWORD *)&v26[4] = "std::optional<DataOwnerType> WebKit::WebPasteboardProxy::determineDataOwner(IPC::Connection &"
                           ", const String &, std::optional<PageIdentifier>, PasteboardAccessIntent) const";
      v25 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 636: I"
            "nvalid message dispatched %{public}s";
LABEL_25:
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, v25, v26, 0xCu);
    }
  }
  v19 = 0;
  v18 = 0;
  *((_BYTE *)a2 + 98) = 1;
  return v19 | (v18 << 8);
}

